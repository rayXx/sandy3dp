cscope 15 /home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin -q 0000008643 0003244124
	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/bootloaders/atmega644p/ATmegaBOOT.c

69 
	~<öây≥s.h
>

70 
	~<avr/io.h
>

71 
	~<avr/pgm•a˚.h
>

72 
	~<avr/öãºu±.h
>

73 
	~<avr/wdt.h
>

74 
	~<avr/boŸ.h
>

76 #ifde‡
ADABOOT


77 
	#NUM_LED_FLASHES
 3

	)

78 
	#ADABOOT_VER
 1

	)

83 
	#MAX_ERROR_COUNT
 5

	)

87 
	#BAUD_RATE
 38400

	)

91 
	#HW_VER
 0x02

	)

92 
	#SW_MAJOR
 0x01

	)

93 
	#SW_MINOR
 0x10

	)

97 
	#LED_DDR
 
DDRB


	)

98 
	#LED_PORT
 
PORTB


	)

99 
	#LED_PIN
 
PINB


	)

100 
	#LED
 
PINB0


	)

104 
	#SIG1
 0x1E

105 #i‡
	`deföed
(
__AVR_ATmega644P__
)

	)

106 
	#SIG2
 0x96

	)

107 
	#SIG3
 0x0A

	)

108 #ñi‡
deföed
(
__AVR_ATmega644__
)

109 
	#SIG2
 0x96

	)

110 
	#SIG3
 0x09

	)

111 #ñi‡
deföed
(
__AVR_ATmega324P__
)

112 
	#SIG2
 0x95

	)

113 
	#SIG3
 0x08

	)

115 
	#PAGE_SIZE
 0x080U

116 
	#PAGE_SIZE_BYTES
 0x100U

117 

	)

119 
putch
();

120 
gëch
();

121 
gëNch
(
uöt8_t
);

122 
byã_ª•⁄£
(
uöt8_t
);

123 
nŸhög_ª•⁄£
();

124 
gëhex
();

125 
puthex
();

126 
Êash_Àd
(
uöt8_t
);

129 
	uaddªss_uni⁄


131 
uöt16_t
 
	mw‹d
;

132 
uöt8_t
 
	mbyã
[2];

133 } 
	gaddªss
;

135 
	uÀngth_uni⁄


137 
uöt16_t
 
	mw‹d
;

138 
uöt8_t
 
	mbyã
[2];

139 } 
	gÀngth
;

141 
	sÊags_°ru˘


143 
	mì¥om
 : 1;

144 
	mømpz
 : 1;

145 } 
	gÊags
;

147 
uöt8_t
 
	gbuff
[256];

149 
uöt8_t
 
	gîr‹_cou¡
 = 0;

150 
uöt8_t
 
	g§eg
;

152 (*
≠p_°¨t
)() = 0x0000;

155 
	$maö
()

157 
uöt8_t
 
ch
,
ch2
;

158 
uöt16_t
 
w
;

159 
uöt16_t
 
i
;

161 
asm
 volatile("nop\n\t");

163 #ifde‡
ADABOOT


164 
ch
 = 
MCUSR
;

165 
MCUSR
 = 0;

167 
WDTCSR
 |
	`_BV
(
WDCE
Ë| _BV(
WDE
);

168 
WDTCSR
 = 0;

171 i‡(! (
ch
 & 
	`_BV
(
EXTRF
)))

172 
	`≠p_°¨t
();

177 
UBRR0L
 = (
uöt8_t
)(
F_CPU
/(
BAUD_RATE
*16L)-1);

178 
UBRR0H
 = (
F_CPU
/(
BAUD_RATE
*16L)-1) >> 8;

179 
UCSR0B
 = (1<<
RXEN0
Ë| (1<<
TXEN0
);

180 
UCSR0C
 = (1<<
UCSZ00
Ë| (1<<
UCSZ01
);

185 
DDRD
 &~
	`_BV
(
PIND0
);

186 
PORTD
 |
	`_BV
(
PIND0
);

189 
LED_DDR
 |
	`_BV
(
LED
);

196 
	`Êash_Àd
(
NUM_LED_FLASHES
);

198 #ifdef 
ADABOOT


199 
	`Êash_Àd
(
ADABOOT_VER
);

206 
ch
 = 
	`gëch
();

211 if(
ch
=='0')

212 
	`nŸhög_ª•⁄£
();

218 if(
ch
=='1')

220 i‡(
	`gëch
() == ' ')

222 
	`putch
(0x14);

223 
	`putch
('A');

224 
	`putch
('V');

225 
	`putch
('R');

226 
	`putch
(' ');

227 
	`putch
('I');

228 
	`putch
('S');

229 
	`putch
('P');

230 
	`putch
(0x10);

234 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

235 
	`≠p_°¨t
();

241 if(
ch
=='@')

243 
ch2
 = 
	`gëch
();

244 i‡(
ch2
 > 0x85)

245 
	`gëch
();

246 
	`nŸhög_ª•⁄£
();

251 if(
ch
=='A')

253 
ch2
 = 
	`gëch
();

254 if(
ch2
 == 0x80)

255 
	`byã_ª•⁄£
(
HW_VER
);

256 if(
ch2
==0x81)

257 
	`byã_ª•⁄£
(
SW_MAJOR
);

258 if(
ch2
==0x82)

259 
	`byã_ª•⁄£
(
SW_MINOR
);

260 if(
ch2
==0x98)

261 
	`byã_ª•⁄£
(0x03);

263 
	`byã_ª•⁄£
(0x00);

268 if(
ch
=='B')

270 
	`gëNch
(20);

271 
	`nŸhög_ª•⁄£
();

276 if(
ch
=='E')

278 
	`gëNch
(5);

279 
	`nŸhög_ª•⁄£
();

284 if(
ch
=='P')

286 
	`nŸhög_ª•⁄£
();

291 if(
ch
=='Q')

293 
	`nŸhög_ª•⁄£
();

294 #ifde‡
ADABOOT


296 
WDTCSR
 = 
	`_BV
(
WDE
);

303 if(
ch
=='R')

305 
	`nŸhög_ª•⁄£
();

312 if(
ch
=='U')

314 
addªss
.
byã
[0] = 
	`gëch
();

315 
addªss
.
byã
[1] = 
	`gëch
();

316 
	`nŸhög_ª•⁄£
();

321 if(
ch
=='V')

323 
	`gëNch
(4);

324 
	`byã_ª•⁄£
(0x00);

329 if(
ch
=='d')

331 
Àngth
.
byã
[1] = 
	`gëch
();

332 
Àngth
.
byã
[0] = 
	`gëch
();

334 
Êags
.
ì¥om
 = 0;

335 i‡(
	`gëch
() == 'E')

336 
Êags
.
ì¥om
 = 1;

338 
i
=0; i<
PAGE_SIZE
; i++)

339 
buff
[
i
] = 0;

341 
w
 = 0; w < 
Àngth
.
w‹d
; w++)

344 
buff
[
w
] = 
	`gëch
();

347 i‡(
	`gëch
() == ' ')

349 i‡(
Êags
.
ì¥om
)

352 
w
=0;w<
Àngth
.
w‹d
;w++)

354 
EECR
 & (1<<
EEPE
));

356 
EEAR
 = (
uöt16_t
)(*)
addªss
.
w‹d
;

357 
EEDR
 = 
buff
[
w
];

358 
EECR
 |(1<<
EEMPE
);

359 
EECR
 |(1<<
EEPE
);

361 
addªss
.
w‹d
++;

367 
addªss
.
w‹d
 =áddress.word << 1;

370 i‡((
Àngth
.
byã
[0] & 0x01))

371 
Àngth
.
w‹d
++;

376 
EECR
 & (1<<
EEPE
));

378 
asm
 volatile(

452 : "=m" (
SPMCSR
Ë: "M" (
PAGE_SIZE
) : "r0","r16","r17","r24","r25","r28","r29","r30","r31"

456 
	`putch
(0x14);

457 
	`putch
(0x10);

461 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

462 
	`≠p_°¨t
();

467 if(
ch
=='t')

469 
Àngth
.
byã
[1] = 
	`gëch
();

470 
Àngth
.
byã
[0] = 
	`gëch
();

472 i‡(
	`gëch
() == 'E')

473 
Êags
.
ì¥om
 = 1;

476 
Êags
.
ì¥om
 = 0;

477 
addªss
.
w‹d
 =áddress.word << 1;

481 i‡(
	`gëch
() == ' ')

483 
	`putch
(0x14);

484 
w
=0; w<
Àngth
.
w‹d
; w++)

487 i‡(
Êags
.
ì¥om
)

490 
EECR
 & (1<<
EEPE
));

491 
EEAR
 = (
uöt16_t
)(*)
addªss
.
w‹d
;

492 
EECR
 |(1<<
EERE
);

493 
	`putch
(
EEDR
);

495 
addªss
.
w‹d
++;

499 i‡(!
Êags
.
ømpz
)

500 
	`putch
(
	`pgm_ªad_byã_√¨
(
addªss
.
w‹d
));

502 
addªss
.
w‹d
++;

505 
	`putch
(0x10);

511 if(
ch
=='u')

513 i‡(
	`gëch
() == ' ')

515 
	`putch
(0x14);

516 
	`putch
(
SIG1
);

517 
	`putch
(
SIG2
);

518 
	`putch
(
SIG3
);

519 
	`putch
(0x10);

523 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

524 
	`≠p_°¨t
();

530 if(
ch
=='v')

531 
	`byã_ª•⁄£
(0x00);

533 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

534 
	`≠p_°¨t
();

538 
	}
}

541 
	$gëhex
()

543 
ah
,
Æ
;

545 
ah
 = 
	`gëch
();

546 
	`putch
(
ah
);

547 
Æ
 = 
	`gëch
();

548 
	`putch
(
Æ
);

550 if(
ah
 >= 'a')

551 
ah
 =áh - 'a' + 0x0a;

552 if(
ah
 >= '0')

553 
ah
 -= '0';

554 if(
Æ
 >= 'a')

555 
Æ
 =ál - 'a' + 0x0a;

556 if(
Æ
 >= '0')

557 
Æ
 -= '0';

559  (
ah
 << 4Ë+ 
Æ
;

560 
	}
}

563 
	$puthex
(
ch
)

565 
ah
,
Æ
;

567 
ah
 = (
ch
 & 0xf0) >> 4;

568 if(
ah
 >= 0x0a)

569 
ah
 =áh - 0x0a + 'a';

571 
ah
 += '0';

573 
Æ
 = (
ch
 & 0x0f);

574 if(
Æ
 >= 0x0a)

575 
Æ
 =ál - 0x0a + 'a';

577 
Æ
 += '0';

579 
	`putch
(
ah
);

580 
	`putch
(
Æ
);

581 
	}
}

584 
	$putch
(
ch
)

586 !(
UCSR0A
 & 
	`_BV
(
UDRE0
)));

587 
UDR0
 = 
ch
;

588 
	}
}

593 
	$gëch
()

595 
uöt32_t
 
cou¡
 = 0;

597 #ifde‡
ADABOOT


598 
LED_PORT
 &~
	`_BV
(
LED
);

601 !(
UCSR0A
 & 
	`_BV
(
RXC0
)))

605 
cou¡
++;

606 i‡(
cou¡
 > 
MAX_TIME_COUNT
)

607 
	`≠p_°¨t
();

610 #ifde‡
ADABOOT


611 
LED_PORT
 |
	`_BV
(
LED
);

614  
UDR0
;

615 
	}
}

618 
	$gëNch
(
uöt8_t
 
cou¡
)

620 
uöt8_t
 
i
;

621 
i
=0;i<
cou¡
;i++)

623 !(
UCSR0A
 & 
	`_BV
(
RXC0
)));

624 
UDR0
;

626 
	}
}

629 
	$byã_ª•⁄£
(
uöt8_t
 
vÆ
)

631 i‡(
	`gëch
() == ' ')

633 
	`putch
(0x14);

634 
	`putch
(
vÆ
);

635 
	`putch
(0x10);

639 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

640 
	`≠p_°¨t
();

642 
	}
}

645 
	$nŸhög_ª•⁄£
()

647 i‡(
	`gëch
() == ' ')

649 
	`putch
(0x14);

650 
	`putch
(0x10);

654 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

655 
	`≠p_°¨t
();

657 
	}
}

659 #ifde‡
ADABOOT


661 
	$Êash_Àd
(
uöt8_t
 
cou¡
)

667 vﬁ©ûê
uöt32_t
 
l
;

669 i‡(
cou¡
 == 0) {

670 
cou¡
 = 
ADABOOT
;

674 
öt8_t
 
i
;

675 
i
 = 0; i < 
cou¡
; ++i) {

676 
LED_PORT
 |
	`_BV
(
LED
);

677 
l
 = 0;Ü < (
F_CPU
 / 1000); ++l);

678 
LED_PORT
 &~
	`_BV
(
LED
);

679 
l
 = 0;Ü < (
F_CPU
 / 250); ++l);

682 
l
 = 0;Ü < (
F_CPU
 / 100); ++l);

684 
	}
}

688 
	$Êash_Àd
(
uöt8_t
 
cou¡
)

693 vﬁ©ûê
uöt32_t
 
l
;

695 i‡(
cou¡
 == 0) {

696 
cou¡
 = 3;

699 
öt8_t
 
i
;

700 
i
 = 0; i < 
cou¡
; ++i) {

701 
LED_PORT
 |
	`_BV
(
LED
);

702 
l
 = 0;Ü < (
F_CPU
 / 1000); ++l);

703 
LED_PORT
 &~
	`_BV
(
LED
);

704 
l
 = 0;Ü < (
F_CPU
 / 1000); ++l);

707 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/Arduino.h

1 
	~"WProgøm.h
"

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/HardwareSerial.cpp

23 
	~<°dlib.h
>

24 
	~<°dio.h
>

25 
	~<°rög.h
>

26 
	~<öây≥s.h
>

27 
	~"wúög.h
"

28 
	~"wúög_¥iv©e.h
"

32 #i‡
deföed
(
UBRRH
Ë|| deföed(
UBRR0H
Ë|| deföed(
UBRR1H
Ë|| deföed(
UBRR2H
Ë|| deföed(
UBRR3H
)

34 
	~"H¨dw¨eSîül.h
"

40 
	#RX_BUFFER_SIZE
 128

	)

42 
	srög_buf„r


44 
	mbuf„r
[
RX_BUFFER_SIZE
];

45 
	mhód
;

46 
	mèû
;

49 
rög_buf„r
 
	grx_buf„r
 = { { 0 }, 0, 0 };

51 
ölöe
 
	$°‹e_ch¨
(
c
, 
rög_buf„r
 *
rx_buf„r
)

53 
i
 = ()(
rx_buf„r
->
hód
 + 1Ë& (
RX_BUFFER_SIZE
 -1);

59 i‡(
i
 !
rx_buf„r
->
èû
) {

60 
rx_buf„r
->
buf„r
[rx_buf„r->
hód
] = 
c
;

61 
rx_buf„r
->
hód
 = 
i
;

63 
	}
}

67 
	$SIGNAL
(
USART0_RX_ve˘
)

69 
c
 = 
UDR0
;

70 
	`°‹e_ch¨
(
c
, &
rx_buf„r
);

71 
	}
}

76 
	gH¨dw¨eSîül
::
	$H¨dw¨eSîül
(
rög_buf„r
 *
rx_buf„r
,

77 vﬁ©ûê
uöt8_t
 *
ubºh
, vﬁ©ûêuöt8_à*
ubºl
,

78 vﬁ©ûê
uöt8_t
 *
uc§a
, vﬁ©ûêuöt8_à*
uc§b
,

79 vﬁ©ûê
uöt8_t
 *
udr
,

80 
uöt8_t
 
rxí
, uöt8_à
txí
, uöt8_à
rxcõ
, uöt8_à
udª
, uöt8_à
u2x
)

82 
_rx_buf„r
 = 
rx_buf„r
;

83 
_ubºh
 = 
ubºh
;

84 
_ubºl
 = 
ubºl
;

85 
_uc§a
 = 
uc§a
;

86 
_uc§b
 = 
uc§b
;

87 
_udr
 = 
udr
;

88 
_rxí
 = 
rxí
;

89 
_txí
 = 
txí
;

90 
_rxcõ
 = 
rxcõ
;

91 
_udª
 = 
udª
;

92 
_u2x
 = 
u2x
;

93 
	}
}

97 
	gH¨dw¨eSîül
::
	$begö
(
baud
)

99 
uöt16_t
 
baud_£âög
;

100 
boﬁ
 
u£_u2x
 = 
åue
;

102 #i‡
F_CPU
 == 16000000UL

106 i‡(
baud
 == 57600) {

107 
u£_u2x
 = 
Ál£
;

111 i‡(
u£_u2x
) {

112 *
_uc§a
 = 1 << 
_u2x
;

113 
baud_£âög
 = (
F_CPU
 / 4 / 
baud
 - 1) / 2;

115 *
_uc§a
 = 0;

116 
baud_£âög
 = (
F_CPU
 / 8 / 
baud
 - 1) / 2;

120 *
_ubºh
 = 
baud_£âög
 >> 8;

121 *
_ubºl
 = 
baud_£âög
;

123 
	`sbi
(*
_uc§b
, 
_rxí
);

124 
	`sbi
(*
_uc§b
, 
_txí
);

125 
	`sbi
(*
_uc§b
, 
_rxcõ
);

126 
	}
}

128 
	gH¨dw¨eSîül
::
	$íd
()

130 
	`cbi
(*
_uc§b
, 
_rxí
);

131 
	`cbi
(*
_uc§b
, 
_txí
);

132 
	`cbi
(*
_uc§b
, 
_rxcõ
);

133 
	}
}

135 
	gH¨dw¨eSîül
::
	$avaûabÀ
()

137  ()(
RX_BUFFER_SIZE
 + 
_rx_buf„r
->
hód
 - _rx_buf„r->
èû
) & (RX_BUFFER_SIZE-1);

138 
	}
}

140 
	gH¨dw¨eSîül
::
	$≥ek
()

142 i‡(
_rx_buf„r
->
hód
 =_rx_buf„r->
èû
) {

145  
_rx_buf„r
->
buf„r
[_rx_buf„r->
èû
];

147 
	}
}

149 
	gH¨dw¨eSîül
::
	$ªad
()

152 i‡(
_rx_buf„r
->
hód
 =_rx_buf„r->
èû
) {

155 
c
 = 
_rx_buf„r
->
buf„r
[_rx_buf„r->
èû
];

156 
_rx_buf„r
->
èû
 = ()(_rx_buf„r->èû + 1Ë& (
RX_BUFFER_SIZE
-1);

157  
c
;

159 
	}
}

161 
	gH¨dw¨eSîül
::
	$Êush
()

172 
_rx_buf„r
->
hód
 = _rx_buf„r->
èû
;

173 
	}
}

178 #i‡
ARDUINO
 >= 100

179 
size_t
 
	gH¨dw¨eSîül
::
	$wrôe
(
uöt8_t
 
c
)

181 !((*
_uc§a
Ë& (1 << 
_udª
)))

184 *
_udr
 = 
c
;

185 
	}
}

187 
	gH¨dw¨eSîül
::
	$wrôe
(
uöt8_t
 
c
)

189 !((*
_uc§a
Ë& (1 << 
_udª
)))

192 *
_udr
 = 
c
;

193 
	}
}

199 
H¨dw¨eSîül
 
Sîül
(&
rx_buf„r
, &
UBRR0H
, &
UBRR0L
, &
UCSR0A
, &
UCSR0B
, &
UDR0
, 
RXEN0
, 
TXEN0
, 
RXCIE0
, 
UDRE0
, 
U2X0
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/HardwareSerial.h

22 #i‚de‡
H¨dw¨eSîül_h


23 
	#H¨dw¨eSîül_h


	)

25 
	~<öây≥s.h
>

27 
	~"Såóm.h
"

29 
	grög_buf„r
;

31 ˛as†
	cH¨dw¨eSîül
 : 
public
 
Såóm


33 
¥iv©e
:

34 
rög_buf„r
 *
_rx_buf„r
;

35 vﬁ©ûê
uöt8_t
 *
	m_ubºh
;

36 vﬁ©ûê
uöt8_t
 *
	m_ubºl
;

37 vﬁ©ûê
uöt8_t
 *
	m_uc§a
;

38 vﬁ©ûê
uöt8_t
 *
	m_uc§b
;

39 vﬁ©ûê
uöt8_t
 *
	m_udr
;

40 
uöt8_t
 
	m_rxí
;

41 
uöt8_t
 
	m_txí
;

42 
uöt8_t
 
	m_rxcõ
;

43 
uöt8_t
 
	m_udª
;

44 
uöt8_t
 
	m_u2x
;

45 
	mpublic
:

46 
H¨dw¨eSîül
(
rög_buf„r
 *
rx_buf„r
,

47 vﬁ©ûê
uöt8_t
 *
ubºh
, vﬁ©ûêuöt8_à*
ubºl
,

48 vﬁ©ûê
uöt8_t
 *
uc§a
, vﬁ©ûêuöt8_à*
uc§b
,

49 vﬁ©ûê
uöt8_t
 *
udr
,

50 
uöt8_t
 
rxí
, uöt8_à
txí
, uöt8_à
rxcõ
, uöt8_à
udª
, uöt8_à
u2x
);

51 
begö
();

52 
íd
();

53 
vútuÆ
 
avaûabÀ
();

54 
vútuÆ
 
≥ek
();

55 
vútuÆ
 
ªad
();

56 
vútuÆ
 
Êush
();

61 #i‡
ARDUINO
 >= 100

62 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
);

64 
vútuÆ
 
wrôe
(
uöt8_t
);

69 
usög
 
	mPröt
::
wrôe
;

72 #i‡
deföed
(
UBRRH
Ë|| deföed(
UBRR0H
)

73 
H¨dw¨eSîül
 
Sîül
;

74 #ñi‡
deföed
(
USBCON
)

75 
	~"usb_≠i.h
"

77 #i‡
deföed
(
UBRR1H
)

78 
H¨dw¨eSîül
 
Sîül1
;

80 #i‡
deföed
(
UBRR2H
)

81 
H¨dw¨eSîül
 
Sîül2
;

83 #i‡
deföed
(
UBRR3H
)

84 
H¨dw¨eSîül
 
Sîül3
;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/Print.cpp

22 
	~<°dlib.h
>

23 
	~<°dio.h
>

24 
	~<°rög.h
>

25 
	~<m©h.h
>

26 
	~"wúög.h
"

28 
	~"Pröt.h
"

33 
	gPröt
::
	$wrôe
(c⁄° *
°r
)

35 *
°r
)

36 
	`wrôe
(*
°r
++);

37 
	}
}

40 
	gPröt
::
	$wrôe
(c⁄° 
uöt8_t
 *
buf„r
, 
size_t
 
size
)

42 
size
--)

43 
	`wrôe
(*
buf„r
++);

44 
	}
}

46 
	gPröt
::
	$¥öt
(c⁄° 
Såög
 &
s
)

48 
i
 = 0; i < 
s
.
	`Àngth
(); i++) {

49 
	`wrôe
(
s
[
i
]);

51 
	}
}

53 
	gPröt
::
	$¥öt
(c⁄° 
°r
[])

55 
	`wrôe
(
°r
);

56 
	}
}

58 
	gPröt
::
	$¥öt
(
c
, 
ba£
)

60 
	`¥öt
((Ë
c
, 
ba£
);

61 
	}
}

63 
	gPröt
::
	$¥öt
(
b
, 
ba£
)

65 
	`¥öt
((Ë
b
, 
ba£
);

66 
	}
}

68 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

70 
	`¥öt
((Ë
n
, 
ba£
);

71 
	}
}

73 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

75 
	`¥öt
((Ë
n
, 
ba£
);

76 
	}
}

78 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

80 i‡(
ba£
 == 0) {

81 
	`wrôe
(
n
);

82 } i‡(
ba£
 == 10) {

83 i‡(
n
 < 0) {

84 
	`¥öt
('-');

85 
n
 = -n;

87 
	`¥ötNumbî
(
n
, 10);

89 
	`¥ötNumbî
(
n
, 
ba£
);

91 
	}
}

93 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

95 i‡(
ba£
 =0Ë
	`wrôe
(
n
);

96 
	`¥ötNumbî
(
n
, 
ba£
);

97 
	}
}

99 
	gPröt
::
	$¥öt
(
n
, 
digôs
)

101 
	`¥ötFlﬂt
(
n
, 
digôs
);

102 
	}
}

104 
	gPröt
::
	$¥öén
()

106 
	`¥öt
('\r');

107 
	`¥öt
('\n');

108 
	}
}

110 
	gPröt
::
	$¥öén
(c⁄° 
Såög
 &
s
)

112 
	`¥öt
(
s
);

113 
	`¥öén
();

114 
	}
}

116 
	gPröt
::
	$¥öén
(c⁄° 
c
[])

118 
	`¥öt
(
c
);

119 
	`¥öén
();

120 
	}
}

122 
	gPröt
::
	$¥öén
(
c
, 
ba£
)

124 
	`¥öt
(
c
, 
ba£
);

125 
	`¥öén
();

126 
	}
}

128 
	gPröt
::
	$¥öén
(
b
, 
ba£
)

130 
	`¥öt
(
b
, 
ba£
);

131 
	`¥öén
();

132 
	}
}

134 
	gPröt
::
	$¥öén
(
n
, 
ba£
)

136 
	`¥öt
(
n
, 
ba£
);

137 
	`¥öén
();

138 
	}
}

140 
	gPröt
::
	$¥öén
(
n
, 
ba£
)

142 
	`¥öt
(
n
, 
ba£
);

143 
	`¥öén
();

144 
	}
}

146 
	gPröt
::
	$¥öén
(
n
, 
ba£
)

148 
	`¥öt
(
n
, 
ba£
);

149 
	`¥öén
();

150 
	}
}

152 
	gPröt
::
	$¥öén
(
n
, 
ba£
)

154 
	`¥öt
(
n
, 
ba£
);

155 
	`¥öén
();

156 
	}
}

158 
	gPröt
::
	$¥öén
(
n
, 
digôs
)

160 
	`¥öt
(
n
, 
digôs
);

161 
	`¥öén
();

162 
	}
}

166 
	gPröt
::
	$¥ötNumbî
(
n
, 
uöt8_t
 
ba£
)

168 
buf
[8 * ()];

169 
i
 = 0;

171 i‡(
n
 == 0) {

172 
	`¥öt
('0');

176 
n
 > 0) {

177 
buf
[
i
++] = 
n
 % 
ba£
;

178 
n
 /
ba£
;

181 ; 
i
 > 0; i--)

182 
	`¥öt
((Ë(
buf
[
i
 - 1] < 10 ?

183 '0' + 
buf
[
i
 - 1] :

184 'A' + 
buf
[
i
 - 1] - 10));

185 
	}
}

187 
	gPröt
::
	$¥ötFlﬂt
(
numbî
, 
uöt8_t
 
digôs
)

190 i‡(
numbî
 < 0.0)

192 
	`¥öt
('-');

193 
numbî
 = -number;

197 
roundög
 = 0.5;

198 
uöt8_t
 
i
=0; i<
digôs
; ++i)

199 
roundög
 /= 10.0;

201 
numbî
 +
roundög
;

204 
öt_∑π
 = ()
numbî
;

205 
ªmaödî
 = 
numbî
 - ()
öt_∑π
;

206 
	`¥öt
(
öt_∑π
);

209 i‡(
digôs
 > 0)

210 
	`¥öt
(".");

213 
digôs
-- > 0)

215 
ªmaödî
 *= 10.0;

216 
toPröt
 = (
ªmaödî
);

217 
	`¥öt
(
toPröt
);

218 
ªmaödî
 -
toPröt
;

220 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/Print.h

20 #i‚de‡
Pröt_h


21 
	#Pröt_h


	)

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

26 
	~"WSåög.h
"

28 
	#DEC
 10

	)

29 
	#HEX
 16

	)

30 
	#OCT
 8

	)

31 
	#BIN
 2

	)

32 
	#BYTE
 0

	)

34 ˛as†
	cPröt


36 
	m¥iv©e
:

37 
¥ötNumbî
(, 
uöt8_t
);

38 
¥ötFlﬂt
(, 
uöt8_t
);

39 
	mpublic
:

44 #i‡
ARDUINO
 >= 100

45 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
) = 0;

47 
vútuÆ
 
wrôe
(
uöt8_t
) = 0;

52 
vútuÆ
 
wrôe
(c⁄° *
°r
);

53 
vútuÆ
 
wrôe
(c⁄° 
uöt8_t
 *
buf„r
, 
size_t
 
size
);

55 
¥öt
(c⁄° 
Såög
 &);

56 
¥öt
(const []);

57 
¥öt
(, 
BYTE
);

58 
¥öt
(, 
BYTE
);

59 
¥öt
(, 
DEC
);

60 
¥öt
(, 
DEC
);

61 
¥öt
(, 
DEC
);

62 
¥öt
(, 
DEC
);

63 
¥öt
(, = 2);

65 
¥öén
(c⁄° 
Såög
 &
s
);

66 
¥öén
(const []);

67 
¥öén
(, 
BYTE
);

68 
¥öén
(, 
BYTE
);

69 
¥öén
(, 
DEC
);

70 
¥öén
(, 
DEC
);

71 
¥öén
(, 
DEC
);

72 
¥öén
(, 
DEC
);

73 
¥öén
(, = 2);

74 
¥öén
();

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/Stream.h

20 #i‚de‡
Såóm_h


21 
	#Såóm_h


	)

23 
	~<öây≥s.h
>

24 
	~"Pröt.h
"

26 ˛as†
	cSåóm
 : 
public
 
Pröt


28 
public
:

29 
vútuÆ
 
avaûabÀ
() = 0;

30 
vútuÆ
 
ªad
() = 0;

31 
vútuÆ
 
≥ek
() = 0;

32 
vútuÆ
 
Êush
() = 0;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/Tone.cpp

34 
	~<avr/öãºu±.h
>

35 
	~<avr/pgm•a˚.h
>

36 
	~"wúög.h
"

37 
	~"pös_¨duöo.h
"

39 #i‡
deföed
(
__AVR_ATmega8__
Ë|| deföed(
__AVR_ATmega128__
)

40 
	#TCCR2A
 
TCCR2


	)

41 
	#TCCR2B
 
TCCR2


	)

42 
	#COM2A1
 
COM21


	)

43 
	#COM2A0
 
COM20


	)

44 
	#OCR2A
 
OCR2


	)

45 
	#TIMSK2
 
TIMSK


	)

46 
	#OCIE2A
 
OCIE2


	)

47 
	#TIMER2_COMPA_ve˘
 
TIMER2_COMP_ve˘


	)

48 
	#TIMSK1
 
TIMSK


	)

56 #i‡!
deföed
(
__AVR_ATmega8__
)

57 vﬁ©ûê
	gtimî0_toggÀ_cou¡
;

58 vﬁ©ûê
uöt8_t
 *
	gtimî0_pö_p‹t
;

59 vﬁ©ûê
uöt8_t
 
	gtimî0_pö_mask
;

62 vﬁ©ûê
	gtimî1_toggÀ_cou¡
;

63 vﬁ©ûê
uöt8_t
 *
	gtimî1_pö_p‹t
;

64 vﬁ©ûê
uöt8_t
 
	gtimî1_pö_mask
;

65 vﬁ©ûê
	gtimî2_toggÀ_cou¡
;

66 vﬁ©ûê
uöt8_t
 *
	gtimî2_pö_p‹t
;

67 vﬁ©ûê
uöt8_t
 
	gtimî2_pö_mask
;

69 #i‡
deföed
(
TIMSK3
)

70 vﬁ©ûê
	gtimî3_toggÀ_cou¡
;

71 vﬁ©ûê
uöt8_t
 *
	gtimî3_pö_p‹t
;

72 vﬁ©ûê
uöt8_t
 
	gtimî3_pö_mask
;

75 #i‡
deföed
(
TIMSK4
)

76 vﬁ©ûê
	gtimî4_toggÀ_cou¡
;

77 vﬁ©ûê
uöt8_t
 *
	gtimî4_pö_p‹t
;

78 vﬁ©ûê
uöt8_t
 
	gtimî4_pö_mask
;

81 #i‡
deföed
(
TIMSK5
)

82 vﬁ©ûê
	gtimî5_toggÀ_cou¡
;

83 vﬁ©ûê
uöt8_t
 *
	gtimî5_pö_p‹t
;

84 vﬁ©ûê
uöt8_t
 
	gtimî5_pö_mask
;

89 #i‡
deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega2560__
)

91 
	#AVAILABLE_TONE_PINS
 1

	)

93 c⁄° 
uöt8_t
 
PROGMEM
 
	gt⁄e_pö_to_timî_PGM
[] = { 2 };

94 
uöt8_t
 
	gt⁄e_pös
[
AVAILABLE_TONE_PINS
] = { 255 };

96 #ñi‡
deföed
(
__AVR_ATmega8__
)

98 
	#AVAILABLE_TONE_PINS
 1

	)

100 c⁄° 
uöt8_t
 
PROGMEM
 
	gt⁄e_pö_to_timî_PGM
[] = { 2 };

101 
uöt8_t
 
	gt⁄e_pös
[
AVAILABLE_TONE_PINS
] = { 255 };

105 
	#AVAILABLE_TONE_PINS
 1

	)

108 c⁄° 
uöt8_t
 
PROGMEM
 
	gt⁄e_pö_to_timî_PGM
[] = { 2 };

109 
uöt8_t
 
	gt⁄e_pös
[
AVAILABLE_TONE_PINS
] = { 255 };

115 
öt8_t
 
	$t⁄eBegö
(
uöt8_t
 
_pö
)

117 
öt8_t
 
_timî
 = -1;

120 
i
 = 0; i < 
AVAILABLE_TONE_PINS
; i++) {

121 i‡(
t⁄e_pös
[
i
] =
_pö
) {

122  
	`pgm_ªad_byã
(
t⁄e_pö_to_timî_PGM
 + 
i
);

127 
i
 = 0; i < 
AVAILABLE_TONE_PINS
; i++) {

128 i‡(
t⁄e_pös
[
i
] == 255) {

129 
t⁄e_pös
[
i
] = 
_pö
;

130 
_timî
 = 
	`pgm_ªad_byã
(
t⁄e_pö_to_timî_PGM
 + 
i
);

135 i‡(
_timî
 != -1)

141 
_timî
)

143 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
TCCR0B
)

146 
TCCR0A
 = 0;

147 
TCCR0B
 = 0;

148 
	`bôWrôe
(
TCCR0A
, 
WGM01
, 1);

149 
	`bôWrôe
(
TCCR0B
, 
CS00
, 1);

150 
timî0_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

151 
timî0_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

155 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
TCCR1B
Ë&& deföed(
WGM12
)

158 
TCCR1A
 = 0;

159 
TCCR1B
 = 0;

160 
	`bôWrôe
(
TCCR1B
, 
WGM12
, 1);

161 
	`bôWrôe
(
TCCR1B
, 
CS10
, 1);

162 
timî1_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

163 
timî1_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

167 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
TCCR2B
)

170 
TCCR2A
 = 0;

171 
TCCR2B
 = 0;

172 
	`bôWrôe
(
TCCR2A
, 
WGM21
, 1);

173 
	`bôWrôe
(
TCCR2B
, 
CS20
, 1);

174 
timî2_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

175 
timî2_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

179 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
TCCR3B
Ë&& deföed(
TIMSK3
)

182 
TCCR3A
 = 0;

183 
TCCR3B
 = 0;

184 
	`bôWrôe
(
TCCR3B
, 
WGM32
, 1);

185 
	`bôWrôe
(
TCCR3B
, 
CS30
, 1);

186 
timî3_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

187 
timî3_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

191 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
TCCR4B
Ë&& deföed(
TIMSK4
)

194 
TCCR4A
 = 0;

195 
TCCR4B
 = 0;

196 #i‡
	`deföed
(
WGM42
)

197 
	`bôWrôe
(
TCCR4B
, 
WGM42
, 1);

198 #ñi‡
	`deföed
(
CS43
)

199 #w¨nög 
this
 
may
 
nŸ
 
be
 
c‹ª˘


201 
	`bôWrôe
(
TCCR4B
, 
CS43
, 1);

203 
	`bôWrôe
(
TCCR4B
, 
CS40
, 1);

204 
timî4_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

205 
timî4_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

209 #i‡
	`deföed
(
TCCR5A
Ë&& deföed(
TCCR5B
Ë&& deföed(
TIMSK5
)

212 
TCCR5A
 = 0;

213 
TCCR5B
 = 0;

214 
	`bôWrôe
(
TCCR5B
, 
WGM52
, 1);

215 
	`bôWrôe
(
TCCR5B
, 
CS50
, 1);

216 
timî5_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

217 
timî5_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

223  
_timî
;

224 
	}
}

230 
	$t⁄e
(
uöt8_t
 
_pö
, 
‰equícy
, 
duøti⁄
)

232 
uöt8_t
 
¥esˇœrbôs
 = 0b001;

233 
toggÀ_cou¡
 = 0;

234 
uöt32_t
 
o¸
 = 0;

235 
öt8_t
 
_timî
;

237 
_timî
 = 
	`t⁄eBegö
(
_pö
);

239 i‡(
_timî
 >= 0)

242 
	`pöMode
(
_pö
, 
OUTPUT
);

245 i‡(
_timî
 == 0 || _timer == 2)

247 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 - 1;

248 
¥esˇœrbôs
 = 0b001;

249 i‡(
o¸
 > 255)

251 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 8 - 1;

252 
¥esˇœrbôs
 = 0b010;

254 i‡(
_timî
 =2 && 
o¸
 > 255)

256 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 32 - 1;

257 
¥esˇœrbôs
 = 0b011;

260 i‡(
o¸
 > 255)

262 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 64 - 1;

263 
¥esˇœrbôs
 = 
_timî
 == 0 ? 0b011 : 0b100;

265 i‡(
_timî
 =2 && 
o¸
 > 255)

267 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 128 - 1;

268 
¥esˇœrbôs
 = 0b101;

271 i‡(
o¸
 > 255)

273 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 256 - 1;

274 
¥esˇœrbôs
 = 
_timî
 == 0 ? 0b100 : 0b110;

275 i‡(
o¸
 > 255)

278 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 1024 - 1;

279 
¥esˇœrbôs
 = 
_timî
 == 0 ? 0b101 : 0b111;

285 #i‡
	`deföed
(
TCCR0B
)

286 i‡(
_timî
 == 0)

288 
TCCR0B
 = 
¥esˇœrbôs
;

292 #i‡
	`deföed
(
TCCR2B
)

294 
TCCR2B
 = 
¥esˇœrbôs
;

305 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 - 1;

307 
¥esˇœrbôs
 = 0b001;

308 i‡(
o¸
 > 0xffff)

310 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 64 - 1;

311 
¥esˇœrbôs
 = 0b011;

314 i‡(
_timî
 == 1)

316 #i‡
	`deföed
(
TCCR1B
)

317 
TCCR1B
 = (TCCR1B & 0b11111000Ë| 
¥esˇœrbôs
;

320 #i‡
	`deföed
(
TCCR3B
)

321 i‡(
_timî
 == 3)

322 
TCCR3B
 = (TCCR3B & 0b11111000Ë| 
¥esˇœrbôs
;

324 #i‡
	`deföed
(
TCCR4B
)

325 i‡(
_timî
 == 4)

326 
TCCR4B
 = (TCCR4B & 0b11111000Ë| 
¥esˇœrbôs
;

328 #i‡
	`deföed
(
TCCR5B
)

329 i‡(
_timî
 == 5)

330 
TCCR5B
 = (TCCR5B & 0b11111000Ë| 
¥esˇœrbôs
;

337 i‡(
duøti⁄
 > 0)

339 
toggÀ_cou¡
 = 2 * 
‰equícy
 * 
duøti⁄
 / 1000;

343 
toggÀ_cou¡
 = -1;

349 
_timî
)

352 #i‡
	`deföed
(
OCR0A
Ë&& deföed(
TIMSK0
Ë&& deföed(
OCIE0A
)

354 
OCR0A
 = 
o¸
;

355 
timî0_toggÀ_cou¡
 = 
toggÀ_cou¡
;

356 
	`bôWrôe
(
TIMSK0
, 
OCIE0A
, 1);

361 #i‡
	`deföed
(
OCR1A
Ë&& deföed(
TIMSK1
Ë&& deföed(
OCIE1A
)

362 
OCR1A
 = 
o¸
;

363 
timî1_toggÀ_cou¡
 = 
toggÀ_cou¡
;

364 
	`bôWrôe
(
TIMSK1
, 
OCIE1A
, 1);

365 #ñi‡
	`deföed
(
OCR1A
Ë&& deföed(
TIMSK
Ë&& deföed(
OCIE1A
)

367 
OCR1A
 = 
o¸
;

368 
timî1_toggÀ_cou¡
 = 
toggÀ_cou¡
;

369 
	`bôWrôe
(
TIMSK
, 
OCIE1A
, 1);

373 #i‡
	`deföed
(
OCR2A
Ë&& deföed(
TIMSK2
Ë&& deföed(
OCIE2A
)

375 
OCR2A
 = 
o¸
;

376 
timî2_toggÀ_cou¡
 = 
toggÀ_cou¡
;

377 
	`bôWrôe
(
TIMSK2
, 
OCIE2A
, 1);

381 #i‡
	`deföed
(
TIMSK3
)

383 
OCR3A
 = 
o¸
;

384 
timî3_toggÀ_cou¡
 = 
toggÀ_cou¡
;

385 
	`bôWrôe
(
TIMSK3
, 
OCIE3A
, 1);

389 #i‡
	`deföed
(
TIMSK4
)

391 
OCR4A
 = 
o¸
;

392 
timî4_toggÀ_cou¡
 = 
toggÀ_cou¡
;

393 
	`bôWrôe
(
TIMSK4
, 
OCIE4A
, 1);

397 #i‡
	`deföed
(
OCR5A
Ë&& deföed(
TIMSK5
Ë&& deföed(
OCIE5A
)

399 
OCR5A
 = 
o¸
;

400 
timî5_toggÀ_cou¡
 = 
toggÀ_cou¡
;

401 
	`bôWrôe
(
TIMSK5
, 
OCIE5A
, 1);

407 
	}
}

413 
	$dißbÀTimî
(
uöt8_t
 
_timî
)

415 
_timî
)

418 #i‡
	`deföed
(
TIMSK0
)

419 
TIMSK0
 = 0;

420 #ñi‡
	`deföed
(
TIMSK
)

421 
TIMSK
 = 0;

425 #i‡
	`deföed
(
TIMSK1
Ë&& deföed(
OCIE1A
)

427 
	`bôWrôe
(
TIMSK1
, 
OCIE1A
, 0);

432 #i‡
	`deföed
(
TIMSK2
Ë&& deföed(
OCIE2A
)

433 
	`bôWrôe
(
TIMSK2
, 
OCIE2A
, 0);

435 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
WGM20
)

436 
TCCR2A
 = (1 << 
WGM20
);

438 #i‡
	`deföed
(
TCCR2B
Ë&& deföed(
CS22
)

439 
TCCR2B
 = (TCCR2B & 0b11111000Ë| (1 << 
CS22
);

441 #i‡
	`deföed
(
OCR2A
)

442 
OCR2A
 = 0;

446 #i‡
	`deföed
(
TIMSK3
)

448 
TIMSK3
 = 0;

452 #i‡
	`deföed
(
TIMSK4
)

454 
TIMSK4
 = 0;

458 #i‡
	`deföed
(
TIMSK5
)

460 
TIMSK5
 = 0;

464 
	}
}

467 
	$noT⁄e
(
uöt8_t
 
_pö
)

469 
öt8_t
 
_timî
 = -1;

471 
i
 = 0; i < 
AVAILABLE_TONE_PINS
; i++) {

472 i‡(
t⁄e_pös
[
i
] =
_pö
) {

473 
_timî
 = 
	`pgm_ªad_byã
(
t⁄e_pö_to_timî_PGM
 + 
i
);

474 
t⁄e_pös
[
i
] = 255;

478 
	`dißbÀTimî
(
_timî
);

480 
	`digôÆWrôe
(
_pö
, 0);

481 
	}
}

484 #i‡!
deföed
(
__AVR_ATmega8__
)

485 
	$ISR
(
TIMER0_COMPA_ve˘
)

487 i‡(
timî0_toggÀ_cou¡
 != 0)

490 *
timî0_pö_p‹t
 ^
timî0_pö_mask
;

492 i‡(
timî0_toggÀ_cou¡
 > 0)

493 
timî0_toggÀ_cou¡
--;

497 
	`dißbÀTimî
(0);

498 *
timî0_pö_p‹t
 &~(
timî0_pö_mask
);

500 
	}
}

504 
	$ISR
(
TIMER1_COMPA_ve˘
)

506 i‡(
timî1_toggÀ_cou¡
 != 0)

509 *
timî1_pö_p‹t
 ^
timî1_pö_mask
;

511 i‡(
timî1_toggÀ_cou¡
 > 0)

512 
timî1_toggÀ_cou¡
--;

516 
	`dißbÀTimî
(1);

517 *
timî1_pö_p‹t
 &~(
timî1_pö_mask
);

519 
	}
}

523 
	$ISR
(
TIMER2_COMPA_ve˘
)

526 i‡(
timî2_toggÀ_cou¡
 != 0)

529 *
timî2_pö_p‹t
 ^
timî2_pö_mask
;

531 i‡(
timî2_toggÀ_cou¡
 > 0)

532 
timî2_toggÀ_cou¡
--;

539 
	`noT⁄e
(
t⁄e_pös
[0]);

543 
	}
}

550 
	$ISR
(
TIMER3_COMPA_ve˘
)

552 i‡(
timî3_toggÀ_cou¡
 != 0)

555 *
timî3_pö_p‹t
 ^
timî3_pö_mask
;

557 i‡(
timî3_toggÀ_cou¡
 > 0)

558 
timî3_toggÀ_cou¡
--;

562 
	`dißbÀTimî
(3);

563 *
timî3_pö_p‹t
 &~(
timî3_pö_mask
);

565 
	}
}

567 
	$ISR
(
TIMER4_COMPA_ve˘
)

569 i‡(
timî4_toggÀ_cou¡
 != 0)

572 *
timî4_pö_p‹t
 ^
timî4_pö_mask
;

574 i‡(
timî4_toggÀ_cou¡
 > 0)

575 
timî4_toggÀ_cou¡
--;

579 
	`dißbÀTimî
(4);

580 *
timî4_pö_p‹t
 &~(
timî4_pö_mask
);

582 
	}
}

584 
	$ISR
(
TIMER5_COMPA_ve˘
)

586 i‡(
timî5_toggÀ_cou¡
 != 0)

589 *
timî5_pö_p‹t
 ^
timî5_pö_mask
;

591 i‡(
timî5_toggÀ_cou¡
 > 0)

592 
timî5_toggÀ_cou¡
--;

596 
	`dißbÀTimî
(5);

597 *
timî5_pö_p‹t
 &~(
timî5_pö_mask
);

599 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/WCharacter.h

20 #i‚de‡
Ch¨a˘î_h


21 
	#Ch¨a˘î_h


	)

23 
	~<˘y≥.h
>

26 
ölöe
 
boﬁón
 
	$isAÕhaNumîic
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

27 
ölöe
 
boﬁón
 
	$isAÕha
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
ölöe
 
boﬁón
 
	$isAscii
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

29 
ölöe
 
boﬁón
 
	$isWhôe•a˚
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

30 
ölöe
 
boﬁón
 
	$isC⁄åﬁ
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

31 
ölöe
 
boﬁón
 
	$isDigô
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

32 
ölöe
 
boﬁón
 
	$isGøph
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

33 
ölöe
 
boﬁón
 
	$isLowîCa£
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

34 
ölöe
 
boﬁón
 
	$isPröèbÀ
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

35 
ölöe
 
boﬁón
 
	$isPun˘
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

36 
ölöe
 
boﬁón
 
	$isS∑˚
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

37 
ölöe
 
boﬁón
 
	$isUµîCa£
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

38 
ölöe
 
boﬁón
 
	$isHexadecimÆDigô
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

39 
ölöe
 
	$toAscii
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

40 
ölöe
 
	$toLowîCa£
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

41 
ölöe
 
	$toUµîCa£
(
c
)
	`__©åibuã__
((
Æways_ölöe
));

46 
ölöe
 
boﬁón
 
	$isAÕhaNumîic
(
c
)

48  ( 
	`iß um
(
c
Ë=0 ? 
Ál£
 : 
åue
);

49 
	}
}

54 
ölöe
 
boﬁón
 
	$isAÕha
(
c
)

56  ( 
	`ißÕha
(
c
Ë=0 ? 
Ál£
 : 
åue
);

57 
	}
}

62 
ölöe
 
boﬁón
 
	$isAscii
(
c
)

64  ( 
	`ißscii
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

65 
	}
}

69 
ölöe
 
boﬁón
 
	$isWhôe•a˚
(
c
)

71  ( 
	`isbœnk
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

72 
	}
}

76 
ölöe
 
boﬁón
 
	$isC⁄åﬁ
(
c
)

78  ( 
	`is˙ål
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

79 
	}
}

83 
ölöe
 
boﬁón
 
	$isDigô
(
c
)

85  ( 
	`isdigô
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

86 
	}
}

90 
ölöe
 
boﬁón
 
	$isGøph
(
c
)

92  ( 
	`isgøph
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

93 
	}
}

97 
ölöe
 
boﬁón
 
	$isLowîCa£
(
c
)

99  (
	`i¶owî
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

100 
	}
}

104 
ölöe
 
boﬁón
 
	$isPröèbÀ
(
c
)

106  ( 
	`i•röt
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

107 
	}
}

112 
ölöe
 
boﬁón
 
	$isPun˘
(
c
)

114  ( 
	`i•un˘
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

115 
	}
}

121 
ölöe
 
boﬁón
 
	$isS∑˚
(
c
)

123  ( 
	`is•a˚
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

124 
	}
}

128 
ölöe
 
boﬁón
 
	$isUµîCa£
(
c
)

130  ( 
	`isuµî
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

131 
	}
}

136 
ölöe
 
boﬁón
 
	$isHexadecimÆDigô
(
c
)

138  ( 
	`isxdigô
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

139 
	}
}

144 
ölöe
 
	$toAscii
(
c
)

146  
	`tﬂscii
 (
c
);

147 
	}
}

156 
ölöe
 
	$toLowîCa£
(
c
)

158  
	`tﬁowî
 (
c
);

159 
	}
}

163 
ölöe
 
	$toUµîCa£
(
c
)

165  
	`touµî
 (
c
);

166 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/WConstants.h

1 
	~"wúög.h
"

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/WInterrupts.c

27 
	~<öây≥s.h
>

28 
	~<avr/io.h
>

29 
	~<avr/öãºu±.h
>

30 
	~<avr/pgm•a˚.h
>

31 
	~<°dio.h
>

33 
	~"WC⁄°™ts.h
"

34 
	~"wúög_¥iv©e.h
"

36 vﬁ©ûê
voidFuncPå
 
	götFunc
[
EXTERNAL_NUM_INTERRUPTS
];

39 
©èchI¡îru±
(
uöt8_t
 
öãºu±Num
, (*
u£rFunc
)(), 
mode
) {

40 if(
öãºu±Num
 < 
EXTERNAL_NUM_INTERRUPTS
) {

41 
ötFunc
[
öãºu±Num
] = 
u£rFunc
;

50 
öãºu±Num
) {

51 #i‡
	`deföed
(
EICRA
Ë&& deföed(
EICRB
Ë&& deföed(
EIMSK
)

53 
EICRA
 = (EICRA & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

54 
EIMSK
 |(1 << 
INT0
);

57 
EICRA
 = (EICRA & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

58 
EIMSK
 |(1 << 
INT1
);

61 
EICRA
 = (EICRA & ~((1 << 
ISC20
Ë| (1 << 
ISC21
))Ë| (
mode
 << ISC20);

62 
EIMSK
 |(1 << 
INT2
);

65 
EICRA
 = (EICRA & ~((1 << 
ISC30
Ë| (1 << 
ISC31
))Ë| (
mode
 << ISC30);

66 
EIMSK
 |(1 << 
INT3
);

69 
EICRB
 = (EICRB & ~((1 << 
ISC40
Ë| (1 << 
ISC41
))Ë| (
mode
 << ISC40);

70 
EIMSK
 |(1 << 
INT4
);

73 
EICRB
 = (EICRB & ~((1 << 
ISC50
Ë| (1 << 
ISC51
))Ë| (
mode
 << ISC50);

74 
EIMSK
 |(1 << 
INT5
);

77 
EICRB
 = (EICRB & ~((1 << 
ISC60
Ë| (1 << 
ISC61
))Ë| (
mode
 << ISC60);

78 
EIMSK
 |(1 << 
INT6
);

81 
EICRB
 = (EICRB & ~((1 << 
ISC70
Ë| (1 << 
ISC71
))Ë| (
mode
 << ISC70);

82 
EIMSK
 |(1 << 
INT7
);

86 #i‡
	`deföed
(
EICRA
Ë&& deföed(
ISC00
Ë&& deföed(
EIMSK
)

87 
EICRA
 = (EICRA & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

88 
EIMSK
 |(1 << 
INT0
);

89 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC00
Ë&& deföed(
GICR
)

90 
MCUCR
 = (MCUCR & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

91 
GICR
 |(1 << 
INT0
);

92 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC00
Ë&& deföed(
GIMSK
)

93 
MCUCR
 = (MCUCR & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

94 
GIMSK
 |(1 << 
INT0
);

96 #îr‹ 
©èchI¡îru±
 
nŸ
 
föished
 
this
 
	`CPU
 (0)

101 #i‡
	`deföed
(
EICRA
Ë&& deföed(
ISC10
Ë&& deföed(
ISC11
Ë&& deföed(
EIMSK
)

102 
EICRA
 = (EICRA & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

103 
EIMSK
 |(1 << 
INT1
);

104 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC10
Ë&& deföed(
ISC11
Ë&& deföed(
GICR
)

105 
MCUCR
 = (MCUCR & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

106 
GICR
 |(1 << 
INT1
);

107 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC10
Ë&& deföed(
GIMSK
) && defined(GIMSK)

108 
MCUCR
 = (MCUCR & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

109 
GIMSK
 |(1 << 
INT1
);

111 #w¨nög 
©èchI¡îru±
 
may
 
√ed
 
some
 
m‹e
 
w‹k
 
this
 
	`˝u
 (1)

117 
	}
}

119 
	$dëachI¡îru±
(
uöt8_t
 
öãºu±Num
) {

120 if(
öãºu±Num
 < 
EXTERNAL_NUM_INTERRUPTS
) {

124 
öãºu±Num
) {

125 #i‡
	`deföed
(
EICRA
Ë&& deföed(
EICRB
Ë&& deföed(
EIMSK
)

127 
EIMSK
 &~(1 << 
INT0
);

130 
EIMSK
 &~(1 << 
INT1
);

133 
EIMSK
 &~(1 << 
INT2
);

136 
EIMSK
 &~(1 << 
INT3
);

139 
EIMSK
 &~(1 << 
INT4
);

142 
EIMSK
 &~(1 << 
INT5
);

145 
EIMSK
 &~(1 << 
INT6
);

148 
EIMSK
 &~(1 << 
INT7
);

152 #i‡
	`deföed
(
EIMSK
Ë&& deföed(
INT0
)

153 
EIMSK
 &~(1 << 
INT0
);

154 #ñi‡
	`deföed
(
GICR
Ë&& deföed(
ISC00
)

155 
GICR
 &~(1 << 
INT0
);

156 #ñi‡
	`deföed
(
GIMSK
Ë&& deföed(
INT0
)

157 
GIMSK
 &~(1 << 
INT0
);

159 #îr‹ 
dëachI¡îru±
 
nŸ
 
föished
 
this
 
˝u


164 #i‡
	`deföed
(
EIMSK
Ë&& deföed(
INT1
)

165 
EIMSK
 &~(1 << 
INT1
);

166 #ñi‡
	`deföed
(
GICR
Ë&& deföed(
INT1
)

167 
GICR
 &~(1 << 
INT1
);

168 #ñi‡
	`deföed
(
GIMSK
Ë&& deföed(
INT1
)

169 
GIMSK
 &~(1 << 
INT1
);

171 #w¨nög 
dëachI¡îru±
 
may
 
√ed
 
some
 
m‹e
 
w‹k
 
this
 
	`˝u
 (1)

177 
ötFunc
[
öãºu±Num
] = 0;

179 
	}
}

187 #i‡
deföed
(
EICRA
Ë&& deföed(
EICRB
)

189 
	$SIGNAL
(
INT0_ve˘
) {

190 if(
ötFunc
[
EXTERNAL_INT_2
])

191 
ötFunc
[
EXTERNAL_INT_2
]();

192 
	}
}

194 
	$SIGNAL
(
INT1_ve˘
) {

195 if(
ötFunc
[
EXTERNAL_INT_3
])

196 
ötFunc
[
EXTERNAL_INT_3
]();

197 
	}
}

199 
	$SIGNAL
(
INT2_ve˘
) {

200 if(
ötFunc
[
EXTERNAL_INT_4
])

201 
ötFunc
[
EXTERNAL_INT_4
]();

202 
	}
}

204 
	$SIGNAL
(
INT3_ve˘
) {

205 if(
ötFunc
[
EXTERNAL_INT_5
])

206 
ötFunc
[
EXTERNAL_INT_5
]();

207 
	}
}

209 
	$SIGNAL
(
INT4_ve˘
) {

210 if(
ötFunc
[
EXTERNAL_INT_0
])

211 
ötFunc
[
EXTERNAL_INT_0
]();

212 
	}
}

214 
	$SIGNAL
(
INT5_ve˘
) {

215 if(
ötFunc
[
EXTERNAL_INT_1
])

216 
ötFunc
[
EXTERNAL_INT_1
]();

217 
	}
}

219 
	$SIGNAL
(
INT6_ve˘
) {

220 if(
ötFunc
[
EXTERNAL_INT_6
])

221 
ötFunc
[
EXTERNAL_INT_6
]();

222 
	}
}

224 
	$SIGNAL
(
INT7_ve˘
) {

225 if(
ötFunc
[
EXTERNAL_INT_7
])

226 
ötFunc
[
EXTERNAL_INT_7
]();

227 
	}
}

231 
	$SIGNAL
(
INT0_ve˘
) {

232 if(
ötFunc
[
EXTERNAL_INT_0
])

233 
ötFunc
[
EXTERNAL_INT_0
]();

234 
	}
}

236 
	$SIGNAL
(
INT1_ve˘
) {

237 if(
ötFunc
[
EXTERNAL_INT_1
])

238 
ötFunc
[
EXTERNAL_INT_1
]();

239 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/WMath.cpp

27 
	~"°dlib.h
"

30 
	$øndomSìd
(
£ed
)

32 i‡(
£ed
 != 0) {

33 
	`§™dom
(
£ed
);

35 
	}
}

37 
	$øndom
(
howbig
)

39 i‡(
howbig
 == 0) {

42  
	`øndom
(Ë% 
howbig
;

43 
	}
}

45 
	$øndom
(
howsmÆl
, 
howbig
)

47 i‡(
howsmÆl
 >
howbig
) {

48  
howsmÆl
;

50 
diff
 = 
howbig
 - 
howsmÆl
;

51  
	`øndom
(
diff
Ë+ 
howsmÆl
;

52 
	}
}

54 
	$m≠
(
x
, 
ö_mö
, 
ö_max
, 
out_mö
, 
out_max
)

56  (
x
 - 
ö_mö
Ë* (
out_max
 - 
out_mö
Ë/ (
ö_max
 - in_min) + out_min;

57 
	}
}

59 
	$makeW‹d
(
w
Ë{  w; 
	}
}

60 
	$makeW‹d
(
h
, 
l
Ë{  (h << 8Ë|Ü; 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/WProgram.h

1 #i‚de‡
WProgøm_h


2 
	#WProgøm_h


	)

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<m©h.h
>

8 
	~<avr/öãºu±.h
>

10 
	~"wúög.h
"

12 #ifde‡
__˝lu•lus


13 
	~"WCh¨a˘î.h
"

14 
	~"WSåög.h
"

15 
	~"H¨dw¨eSîül.h
"

17 
uöt16_t
 
makeW‹d
(uöt16_à
w
);

18 
uöt16_t
 
makeW‹d
(
byã
 
h
, byã 
l
);

20 
	#w‹d
(...Ë
	`makeW‹d
(
__VA_ARGS__
)

	)

22 
pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
 = 1000000L);

24 
t⁄e
(
uöt8_t
 
_pö
, 
‰equícy
, 
duøti⁄
 = 0);

25 
noT⁄e
(
uöt8_t
 
_pö
);

28 
øndom
();

29 
øndom
(, );

30 
øndomSìd
();

31 
m≠
(, , , , );

33 #i‡
deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega2560__
)

34 c⁄° 
uöt8_t
 
	gA0
 = 54;

35 c⁄° 
uöt8_t
 
	gA1
 = 55;

36 c⁄° 
uöt8_t
 
	gA2
 = 56;

37 c⁄° 
uöt8_t
 
	gA3
 = 57;

38 c⁄° 
uöt8_t
 
	gA4
 = 58;

39 c⁄° 
uöt8_t
 
	gA5
 = 59;

40 c⁄° 
uöt8_t
 
	gA6
 = 60;

41 c⁄° 
uöt8_t
 
	gA7
 = 61;

42 c⁄° 
uöt8_t
 
	gA8
 = 62;

43 c⁄° 
uöt8_t
 
	gA9
 = 63;

44 c⁄° 
uöt8_t
 
	gA10
 = 64;

45 c⁄° 
uöt8_t
 
	gA11
 = 65;

46 c⁄° 
uöt8_t
 
	gA12
 = 66;

47 c⁄° 
uöt8_t
 
	gA13
 = 67;

48 c⁄° 
uöt8_t
 
	gA14
 = 68;

49 c⁄° 
uöt8_t
 
	gA15
 = 69;

51 c⁄° 
uöt8_t
 
	gA0
 = 14;

52 c⁄° 
uöt8_t
 
	gA1
 = 15;

53 c⁄° 
uöt8_t
 
	gA2
 = 16;

54 c⁄° 
uöt8_t
 
	gA3
 = 17;

55 c⁄° 
uöt8_t
 
	gA4
 = 18;

56 c⁄° 
uöt8_t
 
	gA5
 = 19;

57 c⁄° 
uöt8_t
 
	gA6
 = 20;

58 c⁄° 
uöt8_t
 
	gA7
 = 21;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/WString.cpp

20 
	~<°dlib.h
>

21 
	~"WProgøm.h
"

22 
	~"WSåög.h
"

25 
	gSåög
::
	$Såög
–c⁄° *
vÆue
 )

27 i‡–
vÆue
 =
NULL
 )

28 
vÆue
 = "";

29 
	`gëBuf„r
–
_Àngth
 = 
	`°æí
–
vÆue
 ) );

30 i‡–
_buf„r
 !
NULL
 )

31 
	`°r˝y
–
_buf„r
, 
vÆue
 );

32 
	}
}

34 
	gSåög
::
	$Såög
–c⁄° 
Såög
 &
vÆue
 )

36 
	`gëBuf„r
–
_Àngth
 = 
vÆue
._length );

37 i‡–
_buf„r
 !
NULL
 )

38 
	`°r˝y
–
_buf„r
, 
vÆue
._buffer );

39 
	}
}

41 
	gSåög
::
	$Såög
–c⁄° 
vÆue
 )

43 
_Àngth
 = 1;

44 
	`gëBuf„r
(1);

45 i‡–
_buf„r
 !
NULL
 ) {

46 
_buf„r
[0] = 
vÆue
;

47 
_buf„r
[1] = 0;

49 
	}
}

51 
	gSåög
::
	$Såög
–c⁄° 
vÆue
 )

53 
_Àngth
 = 1;

54 
	`gëBuf„r
(1);

55 i‡–
_buf„r
 !
NULL
) {

56 
_buf„r
[0] = 
vÆue
;

57 
_buf„r
[1] = 0;

59 
	}
}

61 
	gSåög
::
	$Såög
–c⁄° 
vÆue
, c⁄° 
ba£
 )

63 
buf
[33];

64 
	`ôﬂ
((sig√d )
vÆue
, 
buf
, 
ba£
);

65 
	`gëBuf„r
–
_Àngth
 = 
	`°æí
(
buf
) );

66 i‡–
_buf„r
 !
NULL
 )

67 
	`°r˝y
–
_buf„r
, 
buf
 );

68 
	}
}

70 
	gSåög
::
	$Såög
–c⁄° 
vÆue
, c⁄° 
ba£
 )

72 
buf
[33];

73 
	`u…ﬂ
(()
vÆue
, 
buf
, 
ba£
);

74 
	`gëBuf„r
–
_Àngth
 = 
	`°æí
(
buf
) );

75 i‡–
_buf„r
 !
NULL
 )

76 
	`°r˝y
–
_buf„r
, 
buf
 );

77 
	}
}

79 
	gSåög
::
	$Såög
–c⁄° 
vÆue
, c⁄° 
ba£
 )

81 
buf
[33];

82 
	`…ﬂ
(
vÆue
, 
buf
, 
ba£
);

83 
	`gëBuf„r
–
_Àngth
 = 
	`°æí
(
buf
) );

84 i‡–
_buf„r
 !
NULL
 )

85 
	`°r˝y
–
_buf„r
, 
buf
 );

86 
	}
}

88 
	gSåög
::
	$Såög
–c⁄° 
vÆue
, c⁄° 
ba£
 )

90 
buf
[33];

91 
	`u…ﬂ
(
vÆue
, 
buf
, 10);

92 
	`gëBuf„r
–
_Àngth
 = 
	`°æí
(
buf
) );

93 i‡–
_buf„r
 !
NULL
 )

94 
	`°r˝y
–
_buf„r
, 
buf
 );

95 
	}
}

97 
	gSåög
::
	$ch¨At
–
loc
 ) const

99  
›î©‹
[]–
loc
 );

100 
	}
}

102 
	gSåög
::
	$£tCh¨At
–
loc
, c⁄° 
aCh¨
 )

104 if(
_buf„r
 =
NULL
) ;

105 if(
_Àngth
 > 
loc
) {

106 
_buf„r
[
loc
] = 
aCh¨
;

108 
	}
}

110 
	gSåög
::
	$com∑ªTo
–c⁄° 
Såög
 &
s2
 ) const

112  
	`°rcmp
–
_buf„r
, 
s2
._buffer );

113 
	}
}

115 c⁄° 
	gSåög
 & Såög::
	$c⁄ˇt
–c⁄° 
Såög
 &
s2
 )

117  (*
this
Ë+
s2
;

118 
	}
}

120 c⁄° 
	gSåög
 & Såög::
›î©‹
=–c⁄° 
Såög
 &
rhs
 )

122 i‡–
this
 =&
rhs
 )

123  *
this
;

125 i‡–
	grhs
.
	g_Àngth
 > _length )

127 
‰ì
(
_buf„r
);

128 
gëBuf„r
–
rhs
.
_Àngth
 );

131 i‡–
	g_buf„r
 !
NULL
 ) {

132 
_Àngth
 = 
rhs
._length;

133 
°r˝y
–
_buf„r
, 
rhs
._buffer );

135  *
	gthis
;

148 c⁄° 
	gSåög
 & Såög::
›î©‹
+=–c⁄° 
Såög
 &
Ÿhî
 )

150 
_Àngth
 +
Ÿhî
._length;

151 i‡–
	g_Àngth
 > 
	g_ˇ∑côy
 )

153 *
	gãmp
 = (*)
ªÆloc
(
_buf„r
, 
_Àngth
 + 1);

154 i‡–
	gãmp
 !
NULL
 ) {

155 
_buf„r
 = 
ãmp
;

156 
	g_ˇ∑côy
 = 
_Àngth
;

158 
	g_Àngth
 -
Ÿhî
.
_Àngth
;

159  *
	gthis
;

162 
°rˇt
–
_buf„r
, 
Ÿhî
._buffer );

163  *
	gthis
;

167 
	gSåög
::
›î©‹
==–c⁄° 
Såög
 &
rhs
 ) const

169  ( 
_Àngth
 =
rhs
._Àngth && 
°rcmp
–
_buf„r
,Ñhs._buffer ) == 0 );

172 
	gSåög
::
›î©‹
!=–c⁄° 
Såög
 &
rhs
 ) const

174  ( 
_Àngth
 !
rhs
.
Àngth
(Ë|| 
°rcmp
–
_buf„r
,Ñhs._buffer ) != 0 );

177 
	gSåög
::
›î©‹
<–c⁄° 
Såög
 &
rhs
 ) const

179  
°rcmp
–
_buf„r
, 
rhs
._buffer ) < 0;

182 
	gSåög
::
›î©‹
>–c⁄° 
Såög
 &
rhs
 ) const

184  
°rcmp
–
_buf„r
, 
rhs
._buffer ) > 0;

187 
	gSåög
::
›î©‹
<=–c⁄° 
Såög
 &
rhs
 ) const

189  
°rcmp
–
_buf„r
, 
rhs
._buffer ) <= 0;

192 
	gSåög
::
›î©‹
>=–c⁄° 
Såög
 & 
rhs
 ) const

194  
°rcmp
–
_buf„r
, 
rhs
._buffer ) >= 0;

197 & 
	gSåög
::
›î©‹
[]–
ödex
 )

199 
dummy_wrôabÀ_ch¨
;

200 i‡(
	gödex
 >
_Àngth
 || !
_buf„r
) {

201 
dummy_wrôabÀ_ch¨
 = 0;

202  
	gdummy_wrôabÀ_ch¨
;

204  
	g_buf„r
[ 
ödex
 ];

207 
	gSåög
::
›î©‹
[]–
ödex
 ) const

210  
_buf„r
[ 
ödex
 ];

213 
boﬁón
 
	gSåög
::
	$ídsWôh
–c⁄° 
Såög
 &
s2
 ) const

215 i‡–
_Àngth
 < 
s2
._length )

218  
	`°rcmp
–&
_buf„r
[ 
_Àngth
 - 
s2
._length], s2._buffer ) == 0;

219 
	}
}

221 
boﬁón
 
	gSåög
::
	$equÆs
–c⁄° 
Såög
 &
s2
 ) const

223  ( 
_Àngth
 =
s2
._Àngth && 
	`°rcmp
–
_buf„r
,s2._buffer ) == 0 );

224 
	}
}

226 
boﬁón
 
	gSåög
::
	$equÆsIgn‹eCa£
–c⁄° 
Såög
 &
s2
 ) const

228 i‡–
this
 =&
s2
 )

229  
åue
;

230 i‡–
_Àngth
 !
s2
._length )

231  
Ál£
;

233  
	`°rcmp
(
	`toLowîCa£
().
_buf„r
, 
s2
.toLowerCase()._buffer) == 0;

234 
	}
}

236 
Såög
 
	gSåög
::
	$ª∂a˚
–
födCh¨
, 
ª∂a˚Ch¨
 )

238 i‡–
_buf„r
 =
NULL
 )  *
this
;

239 
Såög
 
theRëu∫
 = 
_buf„r
;

240 * 
ãmp
 = 
theRëu∫
.
_buf„r
;

241  (
ãmp
 = 
	`°rchr
–ãmp, 
födCh¨
 )) != 0 )

242 *
ãmp
 = 
ª∂a˚Ch¨
;

244  
theRëu∫
;

245 
	}
}

247 
Såög
 
	gSåög
::
	$ª∂a˚
–c⁄° 
Såög
& 
m©ch
, c⁄° Såög& 
ª∂a˚
 )

249 i‡–
_buf„r
 =
NULL
 )  *
this
;

250 
Såög
 
ãmp
 = 
_buf„r
, 
√wSåög
;

252 
loc
;

253  (
loc
 = 
ãmp
.
	`ödexOf
–
m©ch
 )) != -1 )

255 
√wSåög
 +
ãmp
.
	`sub°rög
–0, 
loc
 );

256 
√wSåög
 +
ª∂a˚
;

257 
ãmp
 =Åemp.
	`sub°rög
–
loc
 + 
m©ch
.
_Àngth
 );

259 
√wSåög
 +
ãmp
;

260  
√wSåög
;

261 
	}
}

263 
	gSåög
::
	$ödexOf
–
ãmp
 ) const

265  
	`ödexOf
–
ãmp
, 0 );

266 
	}
}

268 
	gSåög
::
	$ödexOf
–
ch
, 
‰omIndex
 ) const

270 i‡–
‰omIndex
 >
_Àngth
 )

273 c⁄° * 
ãmp
 = 
	`°rchr
–&
_buf„r
[
‰omIndex
], 
ch
 );

274 i‡–
ãmp
 =
NULL
 )

277  
ãmp
 - 
_buf„r
;

278 
	}
}

280 
	gSåög
::
	$ödexOf
–c⁄° 
Såög
 &
s2
 ) const

282  
	`ödexOf
–
s2
, 0 );

283 
	}
}

285 
	gSåög
::
	$ödexOf
–c⁄° 
Såög
 &
s2
, 
‰omIndex
 ) const

287 i‡–
‰omIndex
 >
_Àngth
 )

290 c⁄° *
theFöd
 = 
	`°r°r
–&
_buf„r
[ 
‰omIndex
 ], 
s2
._buffer );

292 i‡–
theFöd
 =
NULL
 )

295  
theFöd
 - 
_buf„r
;

296 
	}
}

298 
	gSåög
::
	$œ°IndexOf
–
theCh¨
 ) const

300  
	`œ°IndexOf
–
theCh¨
, 
_Àngth
 - 1 );

301 
	}
}

303 
	gSåög
::
	$œ°IndexOf
–
ch
, 
‰omIndex
 ) const

305 i‡–
‰omIndex
 >
_Àngth
 )

308 
ãmpch¨
 = 
_buf„r
[
‰omIndex
 + 1];

309 
_buf„r
[
‰omIndex
 + 1] = '\0';

310 * 
ãmp
 = 
	`°ºchr
–
_buf„r
, 
ch
 );

311 
_buf„r
[
‰omIndex
 + 1] = 
ãmpch¨
;

313 i‡–
ãmp
 =
NULL
 )

316  
ãmp
 - 
_buf„r
;

317 
	}
}

319 
	gSåög
::
	$œ°IndexOf
–c⁄° 
Såög
 &
s2
 ) const

321  
	`œ°IndexOf
–
s2
, 
_Àngth
 - s2._length );

322 
	}
}

324 
	gSåög
::
	$œ°IndexOf
–c⁄° 
Såög
 &
s2
, 
‰omIndex
 ) const

327 i‡–
s2
.
_Àngth
 =0 || s2._Àngth - 1 > 
‰omIndex
 || fromIndex >= _length )

331 
ãmp
 = 
s2
[ 0 ];

333  
i
 = 
‰omIndex
; i >= 0; i-- )

335 i‡–
_buf„r
[ 
i
 ] =
ãmp
 && (*
this
).
	`sub°rög
–i, i + 
s2
.
_Àngth
 ).
	`equÆs
( s2 ) )

336  
i
;

339 
	}
}

341 
boﬁón
 
	gSåög
::
	$°¨tsWôh
–c⁄° 
Såög
 &
s2
 ) const

343 i‡–
_Àngth
 < 
s2
._length )

346  
	`°¨tsWôh
–
s2
, 0 );

347 
	}
}

349 
boﬁón
 
	gSåög
::
	$°¨tsWôh
–c⁄° 
Såög
 &
s2
, 
off£t
 ) const

351 i‡–
off£t
 > 
_Àngth
 - 
s2
._length )

354  
	`°∫cmp
–&
_buf„r
[
off£t
], 
s2
._buf„r, s2.
_Àngth
 ) == 0;

355 
	}
}

357 
Såög
 
	gSåög
::
	$sub°rög
–
À·
 ) const

359  
	`sub°rög
–
À·
, 
_Àngth
 );

360 
	}
}

362 
Såög
 
	gSåög
::
	$sub°rög
–
À·
, 
right
 ) const

364 i‡–
À·
 > 
right
 )

366 
ãmp
 = 
right
;

367 
right
 = 
À·
;

368 
À·
 = 
ãmp
;

371 i‡–
right
 > 
_Àngth
 )

373 
right
 = 
_Àngth
;

376 
ãmp
 = 
_buf„r
[ 
right
 ];

377 
_buf„r
[ 
right
 ] = '\0';

378 
Såög
 
outPut
 = ( 
_buf„r
 + 
À·
 );

379 
_buf„r
[ 
right
 ] = 
ãmp
;

380  
outPut
;

381 
	}
}

383 
Såög
 
	gSåög
::
	$toLowîCa£
() const

385 
Såög
 
ãmp
 = 
_buf„r
;

387  
i
 = 0; i < 
_Àngth
; i++ )

388 
ãmp
.
_buf„r
[ 
i
 ] = ()
	`tﬁowî
(Åemp._buffer[ i ] );

389  
ãmp
;

390 
	}
}

392 
Såög
 
	gSåög
::
	$toUµîCa£
() const

394 
Såög
 
ãmp
 = 
_buf„r
;

396  
i
 = 0; i < 
_Àngth
; i++ )

397 
ãmp
.
_buf„r
[ 
i
 ] = ()
	`touµî
(Åemp._buffer[ i ] );

398  
ãmp
;

399 
	}
}

401 
Såög
 
	gSåög
::
	$åim
() const

403 i‡–
_buf„r
 =
NULL
 )  *
this
;

404 
Såög
 
ãmp
 = 
_buf„r
;

405 
i
,
j
;

407  
i
 = 0; i < 
_Àngth
; i++ )

409 i‡–!
	`is•a˚
(
_buf„r
[
i
]) )

413  
j
 = 
ãmp
.
_Àngth
 - 1; j > 
i
; j-- )

415 i‡–!
	`is•a˚
(
_buf„r
[
j
]) )

419  
ãmp
.
	`sub°rög
–
i
, 
j
 + 1);

420 
	}
}

422 
	gSåög
::
	$gëByãs
(*
buf
, 
bufsize
)

424 i‡(!
bufsize
 || !
buf
) ;

425 
Àn
 = 
bufsize
 - 1;

426 i‡(
Àn
 > 
_Àngth
)Üen = _length;

427 
	`°∫˝y
((*)
buf
, 
_buf„r
, 
Àn
);

428 
buf
[
Àn
] = 0;

429 
	}
}

431 
	gSåög
::
	$toCh¨Aºay
(*
buf
, 
bufsize
)

433 i‡(!
bufsize
 || !
buf
) ;

434 
Àn
 = 
bufsize
 - 1;

435 i‡(
Àn
 > 
_Àngth
)Üen = _length;

436 
	`°∫˝y
(
buf
, 
_buf„r
, 
Àn
);

437 
buf
[
Àn
] = 0;

438 
	}
}

441 
	gSåög
::
	$toI¡
() {

442  
	`©ﬁ
(
_buf„r
);

443 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/WString.h

20 #i‚de‡
Såög_h


21 
	#Såög_h


	)

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<˘y≥.h
>

28 ˛as†
	cSåög


30 
	mpublic
:

32 
Såög
–c⁄° *
vÆue
 = "" );

33 
Såög
–c⁄° Såög &
vÆue
 );

34 
Såög
( const );

35 
Såög
( const );

36 
Såög
–c⁄° , c⁄° 
ba£
=10);

37 
Såög
–c⁄° , c⁄° 
ba£
=10 );

38 
Såög
–c⁄° , c⁄° 
ba£
=10 );

39 
Såög
–c⁄° , c⁄° 
ba£
=10 );

40 ~
	$Såög
(Ë{ 
	`‰ì
(
_buf„r
); 
_Àngth
 = 
_ˇ∑côy
 = 0;}

43 c⁄° 
Såög
 & 
›î©‹
 = ( c⁄° Såög &
rhs
 );

44 c⁄° 
Såög
 & 
›î©‹
 +=–c⁄° Såög &
rhs
 );

46 
›î©‹
 ==–c⁄° 
Såög
 &
rhs
 ) const;

47 
›î©‹
 !=–c⁄° 
Såög
 &
rhs
 ) const;

48 
›î©‹
 < ( c⁄° 
Såög
 &
rhs
 ) const;

49 
›î©‹
 > ( c⁄° 
Såög
 &
rhs
 ) const;

50 
›î©‹
 <=–c⁄° 
Såög
 &
rhs
 ) const;

51 
›î©‹
 >=–c⁄° 
Såög
 &
rhs
 ) const;

52 
›î©‹
 []–
ödex
 ) const;

53 & 
›î©‹
 []–
ödex
 );

57 
	$ch¨At
–
ödex
 ) const;

58 
	$com∑ªTo
–c⁄° 
Såög
 &
™ŸhîSåög
 ) const;

59 
	$ídsWôh
–c⁄° 
Såög
 &
suffix
 ) const;

60 
	$equÆs
–c⁄° 
Såög
 &
™Obje˘
 ) const;

61 
	$equÆsIgn‹eCa£
–c⁄° 
Såög
 &
™ŸhîSåög
 ) const;

62 
	$ödexOf
–
ch
 ) const;

63 
	$ödexOf
–
ch
, 
‰omIndex
 ) const;

64 
	$ödexOf
–c⁄° 
Såög
 &
°r
 ) const;

65 
	$ödexOf
–c⁄° 
Såög
 &
°r
, 
‰omIndex
 ) const;

66 
	$œ°IndexOf
–
ch
 ) const;

67 
	$œ°IndexOf
–
ch
, 
‰omIndex
 ) const;

68 
	$œ°IndexOf
–c⁄° 
Såög
 &
°r
 ) const;

69 
	$œ°IndexOf
–c⁄° 
Såög
 &
°r
, 
‰omIndex
 ) const;

70 c⁄° 
	$Àngth
–Ëc⁄° {  
_Àngth
; 
	}
}

71 
£tCh¨At
(
ödex
, c⁄° 
ch
);

72 
	$°¨tsWôh
–c⁄° 
Såög
 &
¥efix
 ) const;

73 
	$°¨tsWôh
–c⁄° 
Såög
 &
¥efix
, 
toff£t
 ) const;

74 
Såög
 
	$sub°rög
–
begöIndex
 ) const;

75 
Såög
 
	$sub°rög
–
begöIndex
, 
ídIndex
 ) const;

76 
Såög
 
	$toLowîCa£
( ) const;

77 
Såög
 
	$toUµîCa£
( ) const;

78 
Såög
 
	$åim
( ) const;

79 
	`gëByãs
(*
buf
, 
bufsize
);

80 
	`toCh¨Aºay
(*
buf
, 
bufsize
);

81 
	`toI¡
( );

82 c⁄° 
Såög
& 
	`c⁄ˇt
–c⁄° Såög &
°r
 );

83 
Såög
 
	`ª∂a˚
–
ﬁdCh¨
, 
√wCh¨
 );

84 
Såög
 
	`ª∂a˚
–c⁄° Såög& 
m©ch
, c⁄° Såög& 
ª∂a˚
 );

85 
‰õnd
 
Såög
 
›î©‹
 + ( Såög 
lhs
, c⁄° Såög &
rhs
 );

87 
¥Ÿe˘ed
:

88 *
_buf„r
;

89 
_ˇ∑côy
;

90 
_Àngth
;

92 
	`gëBuf„r
(
maxSåLí
);

94 
¥iv©e
:

96 
	}
};

99 
ölöe
 
	gSåög
::
	$gëBuf„r
(
maxSåLí
)

101 
_ˇ∑côy
 = 
maxSåLí
;

102 
_buf„r
 = (*Ë
	`mÆloc
(
_ˇ∑côy
 + 1);

103 i‡(
_buf„r
 =
NULL
Ë
_Àngth
 = 
_ˇ∑côy
 = 0;

104 
	}
}

106 
ölöe
 
Såög
 
	g›î©‹
+–Såög 
	glhs
, c⁄° 
	gSåög
 &
	grhs
 )

108  
	glhs
 +
rhs
;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/binary.h

1 #i‚de‡
Bö¨y_h


2 
	#Bö¨y_h


	)

4 
	#B0
 0

	)

5 
	#B00
 0

	)

6 
	#B000
 0

	)

7 
	#B0000
 0

	)

8 
	#B00000
 0

	)

9 
	#B000000
 0

	)

10 
	#B0000000
 0

	)

11 
	#B00000000
 0

	)

12 
	#B1
 1

	)

13 
	#B01
 1

	)

14 
	#B001
 1

	)

15 
	#B0001
 1

	)

16 
	#B00001
 1

	)

17 
	#B000001
 1

	)

18 
	#B0000001
 1

	)

19 
	#B00000001
 1

	)

20 
	#B10
 2

	)

21 
	#B010
 2

	)

22 
	#B0010
 2

	)

23 
	#B00010
 2

	)

24 
	#B000010
 2

	)

25 
	#B0000010
 2

	)

26 
	#B00000010
 2

	)

27 
	#B11
 3

	)

28 
	#B011
 3

	)

29 
	#B0011
 3

	)

30 
	#B00011
 3

	)

31 
	#B000011
 3

	)

32 
	#B0000011
 3

	)

33 
	#B00000011
 3

	)

34 
	#B100
 4

	)

35 
	#B0100
 4

	)

36 
	#B00100
 4

	)

37 
	#B000100
 4

	)

38 
	#B0000100
 4

	)

39 
	#B00000100
 4

	)

40 
	#B101
 5

	)

41 
	#B0101
 5

	)

42 
	#B00101
 5

	)

43 
	#B000101
 5

	)

44 
	#B0000101
 5

	)

45 
	#B00000101
 5

	)

46 
	#B110
 6

	)

47 
	#B0110
 6

	)

48 
	#B00110
 6

	)

49 
	#B000110
 6

	)

50 
	#B0000110
 6

	)

51 
	#B00000110
 6

	)

52 
	#B111
 7

	)

53 
	#B0111
 7

	)

54 
	#B00111
 7

	)

55 
	#B000111
 7

	)

56 
	#B0000111
 7

	)

57 
	#B00000111
 7

	)

58 
	#B1000
 8

	)

59 
	#B01000
 8

	)

60 
	#B001000
 8

	)

61 
	#B0001000
 8

	)

62 
	#B00001000
 8

	)

63 
	#B1001
 9

	)

64 
	#B01001
 9

	)

65 
	#B001001
 9

	)

66 
	#B0001001
 9

	)

67 
	#B00001001
 9

	)

68 
	#B1010
 10

	)

69 
	#B01010
 10

	)

70 
	#B001010
 10

	)

71 
	#B0001010
 10

	)

72 
	#B00001010
 10

	)

73 
	#B1011
 11

	)

74 
	#B01011
 11

	)

75 
	#B001011
 11

	)

76 
	#B0001011
 11

	)

77 
	#B00001011
 11

	)

78 
	#B1100
 12

	)

79 
	#B01100
 12

	)

80 
	#B001100
 12

	)

81 
	#B0001100
 12

	)

82 
	#B00001100
 12

	)

83 
	#B1101
 13

	)

84 
	#B01101
 13

	)

85 
	#B001101
 13

	)

86 
	#B0001101
 13

	)

87 
	#B00001101
 13

	)

88 
	#B1110
 14

	)

89 
	#B01110
 14

	)

90 
	#B001110
 14

	)

91 
	#B0001110
 14

	)

92 
	#B00001110
 14

	)

93 
	#B1111
 15

	)

94 
	#B01111
 15

	)

95 
	#B001111
 15

	)

96 
	#B0001111
 15

	)

97 
	#B00001111
 15

	)

98 
	#B10000
 16

	)

99 
	#B010000
 16

	)

100 
	#B0010000
 16

	)

101 
	#B00010000
 16

	)

102 
	#B10001
 17

	)

103 
	#B010001
 17

	)

104 
	#B0010001
 17

	)

105 
	#B00010001
 17

	)

106 
	#B10010
 18

	)

107 
	#B010010
 18

	)

108 
	#B0010010
 18

	)

109 
	#B00010010
 18

	)

110 
	#B10011
 19

	)

111 
	#B010011
 19

	)

112 
	#B0010011
 19

	)

113 
	#B00010011
 19

	)

114 
	#B10100
 20

	)

115 
	#B010100
 20

	)

116 
	#B0010100
 20

	)

117 
	#B00010100
 20

	)

118 
	#B10101
 21

	)

119 
	#B010101
 21

	)

120 
	#B0010101
 21

	)

121 
	#B00010101
 21

	)

122 
	#B10110
 22

	)

123 
	#B010110
 22

	)

124 
	#B0010110
 22

	)

125 
	#B00010110
 22

	)

126 
	#B10111
 23

	)

127 
	#B010111
 23

	)

128 
	#B0010111
 23

	)

129 
	#B00010111
 23

	)

130 
	#B11000
 24

	)

131 
	#B011000
 24

	)

132 
	#B0011000
 24

	)

133 
	#B00011000
 24

	)

134 
	#B11001
 25

	)

135 
	#B011001
 25

	)

136 
	#B0011001
 25

	)

137 
	#B00011001
 25

	)

138 
	#B11010
 26

	)

139 
	#B011010
 26

	)

140 
	#B0011010
 26

	)

141 
	#B00011010
 26

	)

142 
	#B11011
 27

	)

143 
	#B011011
 27

	)

144 
	#B0011011
 27

	)

145 
	#B00011011
 27

	)

146 
	#B11100
 28

	)

147 
	#B011100
 28

	)

148 
	#B0011100
 28

	)

149 
	#B00011100
 28

	)

150 
	#B11101
 29

	)

151 
	#B011101
 29

	)

152 
	#B0011101
 29

	)

153 
	#B00011101
 29

	)

154 
	#B11110
 30

	)

155 
	#B011110
 30

	)

156 
	#B0011110
 30

	)

157 
	#B00011110
 30

	)

158 
	#B11111
 31

	)

159 
	#B011111
 31

	)

160 
	#B0011111
 31

	)

161 
	#B00011111
 31

	)

162 
	#B100000
 32

	)

163 
	#B0100000
 32

	)

164 
	#B00100000
 32

	)

165 
	#B100001
 33

	)

166 
	#B0100001
 33

	)

167 
	#B00100001
 33

	)

168 
	#B100010
 34

	)

169 
	#B0100010
 34

	)

170 
	#B00100010
 34

	)

171 
	#B100011
 35

	)

172 
	#B0100011
 35

	)

173 
	#B00100011
 35

	)

174 
	#B100100
 36

	)

175 
	#B0100100
 36

	)

176 
	#B00100100
 36

	)

177 
	#B100101
 37

	)

178 
	#B0100101
 37

	)

179 
	#B00100101
 37

	)

180 
	#B100110
 38

	)

181 
	#B0100110
 38

	)

182 
	#B00100110
 38

	)

183 
	#B100111
 39

	)

184 
	#B0100111
 39

	)

185 
	#B00100111
 39

	)

186 
	#B101000
 40

	)

187 
	#B0101000
 40

	)

188 
	#B00101000
 40

	)

189 
	#B101001
 41

	)

190 
	#B0101001
 41

	)

191 
	#B00101001
 41

	)

192 
	#B101010
 42

	)

193 
	#B0101010
 42

	)

194 
	#B00101010
 42

	)

195 
	#B101011
 43

	)

196 
	#B0101011
 43

	)

197 
	#B00101011
 43

	)

198 
	#B101100
 44

	)

199 
	#B0101100
 44

	)

200 
	#B00101100
 44

	)

201 
	#B101101
 45

	)

202 
	#B0101101
 45

	)

203 
	#B00101101
 45

	)

204 
	#B101110
 46

	)

205 
	#B0101110
 46

	)

206 
	#B00101110
 46

	)

207 
	#B101111
 47

	)

208 
	#B0101111
 47

	)

209 
	#B00101111
 47

	)

210 
	#B110000
 48

	)

211 
	#B0110000
 48

	)

212 
	#B00110000
 48

	)

213 
	#B110001
 49

	)

214 
	#B0110001
 49

	)

215 
	#B00110001
 49

	)

216 
	#B110010
 50

	)

217 
	#B0110010
 50

	)

218 
	#B00110010
 50

	)

219 
	#B110011
 51

	)

220 
	#B0110011
 51

	)

221 
	#B00110011
 51

	)

222 
	#B110100
 52

	)

223 
	#B0110100
 52

	)

224 
	#B00110100
 52

	)

225 
	#B110101
 53

	)

226 
	#B0110101
 53

	)

227 
	#B00110101
 53

	)

228 
	#B110110
 54

	)

229 
	#B0110110
 54

	)

230 
	#B00110110
 54

	)

231 
	#B110111
 55

	)

232 
	#B0110111
 55

	)

233 
	#B00110111
 55

	)

234 
	#B111000
 56

	)

235 
	#B0111000
 56

	)

236 
	#B00111000
 56

	)

237 
	#B111001
 57

	)

238 
	#B0111001
 57

	)

239 
	#B00111001
 57

	)

240 
	#B111010
 58

	)

241 
	#B0111010
 58

	)

242 
	#B00111010
 58

	)

243 
	#B111011
 59

	)

244 
	#B0111011
 59

	)

245 
	#B00111011
 59

	)

246 
	#B111100
 60

	)

247 
	#B0111100
 60

	)

248 
	#B00111100
 60

	)

249 
	#B111101
 61

	)

250 
	#B0111101
 61

	)

251 
	#B00111101
 61

	)

252 
	#B111110
 62

	)

253 
	#B0111110
 62

	)

254 
	#B00111110
 62

	)

255 
	#B111111
 63

	)

256 
	#B0111111
 63

	)

257 
	#B00111111
 63

	)

258 
	#B1000000
 64

	)

259 
	#B01000000
 64

	)

260 
	#B1000001
 65

	)

261 
	#B01000001
 65

	)

262 
	#B1000010
 66

	)

263 
	#B01000010
 66

	)

264 
	#B1000011
 67

	)

265 
	#B01000011
 67

	)

266 
	#B1000100
 68

	)

267 
	#B01000100
 68

	)

268 
	#B1000101
 69

	)

269 
	#B01000101
 69

	)

270 
	#B1000110
 70

	)

271 
	#B01000110
 70

	)

272 
	#B1000111
 71

	)

273 
	#B01000111
 71

	)

274 
	#B1001000
 72

	)

275 
	#B01001000
 72

	)

276 
	#B1001001
 73

	)

277 
	#B01001001
 73

	)

278 
	#B1001010
 74

	)

279 
	#B01001010
 74

	)

280 
	#B1001011
 75

	)

281 
	#B01001011
 75

	)

282 
	#B1001100
 76

	)

283 
	#B01001100
 76

	)

284 
	#B1001101
 77

	)

285 
	#B01001101
 77

	)

286 
	#B1001110
 78

	)

287 
	#B01001110
 78

	)

288 
	#B1001111
 79

	)

289 
	#B01001111
 79

	)

290 
	#B1010000
 80

	)

291 
	#B01010000
 80

	)

292 
	#B1010001
 81

	)

293 
	#B01010001
 81

	)

294 
	#B1010010
 82

	)

295 
	#B01010010
 82

	)

296 
	#B1010011
 83

	)

297 
	#B01010011
 83

	)

298 
	#B1010100
 84

	)

299 
	#B01010100
 84

	)

300 
	#B1010101
 85

	)

301 
	#B01010101
 85

	)

302 
	#B1010110
 86

	)

303 
	#B01010110
 86

	)

304 
	#B1010111
 87

	)

305 
	#B01010111
 87

	)

306 
	#B1011000
 88

	)

307 
	#B01011000
 88

	)

308 
	#B1011001
 89

	)

309 
	#B01011001
 89

	)

310 
	#B1011010
 90

	)

311 
	#B01011010
 90

	)

312 
	#B1011011
 91

	)

313 
	#B01011011
 91

	)

314 
	#B1011100
 92

	)

315 
	#B01011100
 92

	)

316 
	#B1011101
 93

	)

317 
	#B01011101
 93

	)

318 
	#B1011110
 94

	)

319 
	#B01011110
 94

	)

320 
	#B1011111
 95

	)

321 
	#B01011111
 95

	)

322 
	#B1100000
 96

	)

323 
	#B01100000
 96

	)

324 
	#B1100001
 97

	)

325 
	#B01100001
 97

	)

326 
	#B1100010
 98

	)

327 
	#B01100010
 98

	)

328 
	#B1100011
 99

	)

329 
	#B01100011
 99

	)

330 
	#B1100100
 100

	)

331 
	#B01100100
 100

	)

332 
	#B1100101
 101

	)

333 
	#B01100101
 101

	)

334 
	#B1100110
 102

	)

335 
	#B01100110
 102

	)

336 
	#B1100111
 103

	)

337 
	#B01100111
 103

	)

338 
	#B1101000
 104

	)

339 
	#B01101000
 104

	)

340 
	#B1101001
 105

	)

341 
	#B01101001
 105

	)

342 
	#B1101010
 106

	)

343 
	#B01101010
 106

	)

344 
	#B1101011
 107

	)

345 
	#B01101011
 107

	)

346 
	#B1101100
 108

	)

347 
	#B01101100
 108

	)

348 
	#B1101101
 109

	)

349 
	#B01101101
 109

	)

350 
	#B1101110
 110

	)

351 
	#B01101110
 110

	)

352 
	#B1101111
 111

	)

353 
	#B01101111
 111

	)

354 
	#B1110000
 112

	)

355 
	#B01110000
 112

	)

356 
	#B1110001
 113

	)

357 
	#B01110001
 113

	)

358 
	#B1110010
 114

	)

359 
	#B01110010
 114

	)

360 
	#B1110011
 115

	)

361 
	#B01110011
 115

	)

362 
	#B1110100
 116

	)

363 
	#B01110100
 116

	)

364 
	#B1110101
 117

	)

365 
	#B01110101
 117

	)

366 
	#B1110110
 118

	)

367 
	#B01110110
 118

	)

368 
	#B1110111
 119

	)

369 
	#B01110111
 119

	)

370 
	#B1111000
 120

	)

371 
	#B01111000
 120

	)

372 
	#B1111001
 121

	)

373 
	#B01111001
 121

	)

374 
	#B1111010
 122

	)

375 
	#B01111010
 122

	)

376 
	#B1111011
 123

	)

377 
	#B01111011
 123

	)

378 
	#B1111100
 124

	)

379 
	#B01111100
 124

	)

380 
	#B1111101
 125

	)

381 
	#B01111101
 125

	)

382 
	#B1111110
 126

	)

383 
	#B01111110
 126

	)

384 
	#B1111111
 127

	)

385 
	#B01111111
 127

	)

386 
	#B10000000
 128

	)

387 
	#B10000001
 129

	)

388 
	#B10000010
 130

	)

389 
	#B10000011
 131

	)

390 
	#B10000100
 132

	)

391 
	#B10000101
 133

	)

392 
	#B10000110
 134

	)

393 
	#B10000111
 135

	)

394 
	#B10001000
 136

	)

395 
	#B10001001
 137

	)

396 
	#B10001010
 138

	)

397 
	#B10001011
 139

	)

398 
	#B10001100
 140

	)

399 
	#B10001101
 141

	)

400 
	#B10001110
 142

	)

401 
	#B10001111
 143

	)

402 
	#B10010000
 144

	)

403 
	#B10010001
 145

	)

404 
	#B10010010
 146

	)

405 
	#B10010011
 147

	)

406 
	#B10010100
 148

	)

407 
	#B10010101
 149

	)

408 
	#B10010110
 150

	)

409 
	#B10010111
 151

	)

410 
	#B10011000
 152

	)

411 
	#B10011001
 153

	)

412 
	#B10011010
 154

	)

413 
	#B10011011
 155

	)

414 
	#B10011100
 156

	)

415 
	#B10011101
 157

	)

416 
	#B10011110
 158

	)

417 
	#B10011111
 159

	)

418 
	#B10100000
 160

	)

419 
	#B10100001
 161

	)

420 
	#B10100010
 162

	)

421 
	#B10100011
 163

	)

422 
	#B10100100
 164

	)

423 
	#B10100101
 165

	)

424 
	#B10100110
 166

	)

425 
	#B10100111
 167

	)

426 
	#B10101000
 168

	)

427 
	#B10101001
 169

	)

428 
	#B10101010
 170

	)

429 
	#B10101011
 171

	)

430 
	#B10101100
 172

	)

431 
	#B10101101
 173

	)

432 
	#B10101110
 174

	)

433 
	#B10101111
 175

	)

434 
	#B10110000
 176

	)

435 
	#B10110001
 177

	)

436 
	#B10110010
 178

	)

437 
	#B10110011
 179

	)

438 
	#B10110100
 180

	)

439 
	#B10110101
 181

	)

440 
	#B10110110
 182

	)

441 
	#B10110111
 183

	)

442 
	#B10111000
 184

	)

443 
	#B10111001
 185

	)

444 
	#B10111010
 186

	)

445 
	#B10111011
 187

	)

446 
	#B10111100
 188

	)

447 
	#B10111101
 189

	)

448 
	#B10111110
 190

	)

449 
	#B10111111
 191

	)

450 
	#B11000000
 192

	)

451 
	#B11000001
 193

	)

452 
	#B11000010
 194

	)

453 
	#B11000011
 195

	)

454 
	#B11000100
 196

	)

455 
	#B11000101
 197

	)

456 
	#B11000110
 198

	)

457 
	#B11000111
 199

	)

458 
	#B11001000
 200

	)

459 
	#B11001001
 201

	)

460 
	#B11001010
 202

	)

461 
	#B11001011
 203

	)

462 
	#B11001100
 204

	)

463 
	#B11001101
 205

	)

464 
	#B11001110
 206

	)

465 
	#B11001111
 207

	)

466 
	#B11010000
 208

	)

467 
	#B11010001
 209

	)

468 
	#B11010010
 210

	)

469 
	#B11010011
 211

	)

470 
	#B11010100
 212

	)

471 
	#B11010101
 213

	)

472 
	#B11010110
 214

	)

473 
	#B11010111
 215

	)

474 
	#B11011000
 216

	)

475 
	#B11011001
 217

	)

476 
	#B11011010
 218

	)

477 
	#B11011011
 219

	)

478 
	#B11011100
 220

	)

479 
	#B11011101
 221

	)

480 
	#B11011110
 222

	)

481 
	#B11011111
 223

	)

482 
	#B11100000
 224

	)

483 
	#B11100001
 225

	)

484 
	#B11100010
 226

	)

485 
	#B11100011
 227

	)

486 
	#B11100100
 228

	)

487 
	#B11100101
 229

	)

488 
	#B11100110
 230

	)

489 
	#B11100111
 231

	)

490 
	#B11101000
 232

	)

491 
	#B11101001
 233

	)

492 
	#B11101010
 234

	)

493 
	#B11101011
 235

	)

494 
	#B11101100
 236

	)

495 
	#B11101101
 237

	)

496 
	#B11101110
 238

	)

497 
	#B11101111
 239

	)

498 
	#B11110000
 240

	)

499 
	#B11110001
 241

	)

500 
	#B11110010
 242

	)

501 
	#B11110011
 243

	)

502 
	#B11110100
 244

	)

503 
	#B11110101
 245

	)

504 
	#B11110110
 246

	)

505 
	#B11110111
 247

	)

506 
	#B11111000
 248

	)

507 
	#B11111001
 249

	)

508 
	#B11111010
 250

	)

509 
	#B11111011
 251

	)

510 
	#B11111100
 252

	)

511 
	#B11111101
 253

	)

512 
	#B11111110
 254

	)

513 
	#B11111111
 255

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/main.cpp

1 
	~<WProgøm.h
>

3 
	$maö
()

5 
	`öô
();

7 
	`£tup
();

10 
	`lo›
();

13 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/pins_arduino.c

25 
	~<avr/io.h
>

26 
	~"wúög_¥iv©e.h
"

27 
	~"pös_¨duöo.h
"

59 
	#PA
 1

	)

60 
	#PB
 2

	)

61 
	#PC
 3

	)

62 
	#PD
 4

	)

67 c⁄° 
uöt8_t
 
PROGMEM
 
	gp‹t_to_mode_PGM
[] =

69 
NOT_A_PORT
,

70 (
uöt8_t
Ë(
uöt16_t
Ë&
DDRA
,

71 (
uöt8_t
Ë(
uöt16_t
Ë&
DDRB
,

72 (
uöt8_t
Ë(
uöt16_t
Ë&
DDRC
,

73 (
uöt8_t
Ë(
uöt16_t
Ë&
DDRD
,

76 c⁄° 
uöt8_t
 
PROGMEM
 
	gp‹t_to_ouçut_PGM
[] =

78 
NOT_A_PORT
,

79 (
uöt8_t
Ë(
uöt16_t
Ë&
PORTA
,

80 (
uöt8_t
Ë(
uöt16_t
Ë&
PORTB
,

81 (
uöt8_t
Ë(
uöt16_t
Ë&
PORTC
,

82 (
uöt8_t
Ë(
uöt16_t
Ë&
PORTD
,

85 c⁄° 
uöt8_t
 
PROGMEM
 
	gp‹t_to_öput_PGM
[] =

87 
NOT_A_PORT
,

88 (
uöt8_t
Ë(
uöt16_t
Ë&
PINA
,

89 (
uöt8_t
Ë(
uöt16_t
Ë&
PINB
,

90 (
uöt8_t
Ë(
uöt16_t
Ë&
PINC
,

91 (
uöt8_t
Ë(
uöt16_t
Ë&
PIND
,

94 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_p‹t_PGM
[] =

96 
PB
,

97 
PB
,

98 
PB
,

99 
PB
,

100 
PB
,

101 
PB
,

102 
PB
,

103 
PB
,

104 
PD
,

105 
PD
,

106 
PD
,

107 
PD
,

108 
PD
,

109 
PD
,

110 
PD
,

111 
PD
,

112 
PC
,

113 
PC
,

114 
PC
,

115 
PC
,

116 
PC
,

117 
PC
,

118 
PC
,

119 
PC
,

120 
PA
,

121 
PA
,

122 
PA
,

123 
PA
,

124 
PA
,

125 
PA
,

126 
PA
,

127 
PA


130 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_bô_mask_PGM
[] =

132 
_BV
(0),

133 
_BV
(1),

134 
_BV
(2),

135 
_BV
(3),

136 
_BV
(4),

137 
_BV
(5),

138 
_BV
(6),

139 
_BV
(7),

140 
_BV
(0),

141 
_BV
(1),

142 
_BV
(2),

143 
_BV
(3),

144 
_BV
(4),

145 
_BV
(5),

146 
_BV
(6),

147 
_BV
(7),

148 
_BV
(0),

149 
_BV
(1),

150 
_BV
(2),

151 
_BV
(3),

152 
_BV
(4),

153 
_BV
(5),

154 
_BV
(6),

155 
_BV
(7),

156 
_BV
(7),

157 
_BV
(6),

158 
_BV
(5),

159 
_BV
(4),

160 
_BV
(3),

161 
_BV
(2),

162 
_BV
(1),

163 
_BV
(0)

166 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_timî_PGM
[] =

168 
NOT_ON_TIMER
,

169 
NOT_ON_TIMER
,

170 
NOT_ON_TIMER
,

171 
TIMER0A
,

172 
TIMER0B
,

173 
NOT_ON_TIMER
,

174 
NOT_ON_TIMER
,

175 
NOT_ON_TIMER
,

176 
NOT_ON_TIMER
,

177 
NOT_ON_TIMER
,

178 
NOT_ON_TIMER
,

179 
NOT_ON_TIMER
,

180 
TIMER1B
,

181 
TIMER1A
,

182 
TIMER2B
,

183 
TIMER2A
,

184 
NOT_ON_TIMER
,

185 
NOT_ON_TIMER
,

186 
NOT_ON_TIMER
,

187 
NOT_ON_TIMER
,

188 
NOT_ON_TIMER
,

189 
NOT_ON_TIMER
,

190 
NOT_ON_TIMER
,

191 
NOT_ON_TIMER
,

192 
NOT_ON_TIMER
,

193 
NOT_ON_TIMER
,

194 
NOT_ON_TIMER
,

195 
NOT_ON_TIMER
,

196 
NOT_ON_TIMER
,

197 
NOT_ON_TIMER
,

198 
NOT_ON_TIMER
,

199 
NOT_ON_TIMER


	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/pins_arduino.h

25 #i‚de‡
Pös_Arduöo_h


26 
	#Pös_Arduöo_h


	)

28 
	~<avr/pgm•a˚.h
>

30 
	#NOT_A_PIN
 0

	)

31 
	#NOT_A_PORT
 0

	)

33 
	#NOT_ON_TIMER
 0

	)

34 
	#TIMER0A
 1

	)

35 
	#TIMER0B
 2

	)

36 
	#TIMER1A
 3

	)

37 
	#TIMER1B
 4

	)

38 
	#TIMER2
 5

	)

39 
	#TIMER2A
 6

	)

40 
	#TIMER2B
 7

	)

42 c⁄° 
uöt8_t
 
PROGMEM
 
p‹t_to_mode_PGM
[];

43 c⁄° 
uöt8_t
 
PROGMEM
 
p‹t_to_öput_PGM
[];

44 c⁄° 
uöt8_t
 
PROGMEM
 
p‹t_to_ouçut_PGM
[];

46 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_p‹t_PGM
[];

47 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_bô_PGM
[];

48 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_bô_mask_PGM
[];

50 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_timî_PGM
[];

57 
	#digôÆPöToP‹t
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_p‹t_PGM
 + (PËË)

	)

58 
	#digôÆPöToBôMask
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_bô_mask_PGM
 + (PËË)

	)

59 
	#digôÆPöToTimî
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_timî_PGM
 + (PËË)

	)

60 
	#™ÆogInPöToBô
(
P
Ë(P)

	)

61 
	#p‹tOuçutRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–(
uöt16_t
Ë
	`pgm_ªad_byã
–
p‹t_to_ouçut_PGM
 + (P))Ë)

	)

62 
	#p‹tI≈utRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–(
uöt16_t
Ë
	`pgm_ªad_byã
–
p‹t_to_öput_PGM
 + (P))Ë)

	)

63 
	#p‹tModeRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–(
uöt16_t
Ë
	`pgm_ªad_byã
–
p‹t_to_mode_PGM
 + (P))Ë)

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/wiring.c

25 
	~"wúög_¥iv©e.h
"

29 
	#MICROSECONDS_PER_TIMER0_OVERFLOW
 (
	`˛ockCy˛esToMi¸o£c⁄ds
(64 * 256))

	)

32 
	#MILLIS_INC
 (
MICROSECONDS_PER_TIMER0_OVERFLOW
 / 1000)

	)

37 
	#FRACT_INC
 ((
MICROSECONDS_PER_TIMER0_OVERFLOW
 % 1000Ë>> 3)

	)

38 
	#FRACT_MAX
 (1000 >> 3)

	)

40 vﬁ©ûê
	gtimî0_ovîÊow_cou¡
 = 0;

41 vﬁ©ûê
	gtimî0_mûlis
 = 0;

42 
	gtimî0_‰a˘
 = 0;

44 
	$SIGNAL
(
TIMER0_OVF_ve˘
)

48 
m
 = 
timî0_mûlis
;

49 
f
 = 
timî0_‰a˘
;

51 
m
 +
MILLIS_INC
;

52 
f
 +
FRACT_INC
;

53 i‡(
f
 >
FRACT_MAX
) {

54 
f
 -
FRACT_MAX
;

55 
m
 += 1;

58 
timî0_‰a˘
 = 
f
;

59 
timî0_mûlis
 = 
m
;

60 
timî0_ovîÊow_cou¡
++;

61 
	}
}

63 
	$mûlis
()

65 
m
;

66 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

70 
	`˛i
();

71 
m
 = 
timî0_mûlis
;

72 
SREG
 = 
ﬁdSREG
;

74  
m
;

75 
	}
}

77 
	$mi¸os
() {

78 
m
;

79 
uöt8_t
 
ﬁdSREG
 = 
SREG
, 
t
;

81 
	`˛i
();

82 
m
 = 
timî0_ovîÊow_cou¡
;

83 #i‡
	`deföed
(
TCNT0
)

84 
t
 = 
TCNT0
;

85 #ñi‡
	`deföed
(
TCNT0L
)

86 
t
 = 
TCNT0L
;

88 #îr‹ 
TIMER
 0 
nŸ
 
deföed


92 #ifde‡
TIFR0


93 i‡((
TIFR0
 & 
	`_BV
(
TOV0
)Ë&& (
t
 < 255))

94 
m
++;

96 i‡((
TIFR
 & 
	`_BV
(
TOV0
)Ë&& (
t
 < 255))

97 
m
++;

100 
SREG
 = 
ﬁdSREG
;

102  ((
m
 << 8Ë+ 
t
Ë* (64 / 
	`˛ockCy˛esPîMi¸o£c⁄d
());

103 
	}
}

105 
	$dñay
(
ms
)

107 
uöt16_t
 
°¨t
 = (uöt16_t)
	`mi¸os
();

109 
ms
 > 0) {

110 i‡(((
uöt16_t
)
	`mi¸os
(Ë- 
°¨t
) >= 1000) {

111 
ms
--;

112 
°¨t
 += 1000;

115 
	}
}

118 
	$dñayMi¸o£c⁄ds
(
us
)

124 #i‡
F_CPU
 >= 16000000L

129 i‡(--
us
 == 0)

135 
us
 <<= 2;

138 
us
 -= 2;

145 i‡(--
us
 == 0)

147 i‡(--
us
 == 0)

153 
us
 <<= 1;

157 
us
--;

161 
__asm__
 
	`__vﬁ©ûe__
 (

163 "b∫ê1b" : "=w" (
us
) : "0" (us)

165 
	}
}

167 
	$öô
()

171 
	`£i
();

176 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
WGM01
)

177 
	`sbi
(
TCCR0A
, 
WGM01
);

178 
	`sbi
(
TCCR0A
, 
WGM00
);

182 #i‡
	`deföed
(
__AVR_ATmega128__
)

184 
	`sbi
(
TCCR0
, 
CS02
);

185 #ñi‡
	`deföed
(
TCCR0
Ë&& deföed(
CS01
Ë&& deföed(
CS00
)

187 
	`sbi
(
TCCR0
, 
CS01
);

188 
	`sbi
(
TCCR0
, 
CS00
);

189 #ñi‡
	`deföed
(
TCCR0B
Ë&& deföed(
CS01
Ë&& deföed(
CS00
)

191 
	`sbi
(
TCCR0B
, 
CS01
);

192 
	`sbi
(
TCCR0B
, 
CS00
);

193 #ñi‡
	`deföed
(
TCCR0A
Ë&& deföed(
CS01
Ë&& deföed(
CS00
)

195 
	`sbi
(
TCCR0A
, 
CS01
);

196 
	`sbi
(
TCCR0A
, 
CS00
);

198 #îr‹ 
Timî
 0 
¥esˇÀ
 
Á˘‹
 64 
nŸ
 
£t
 
c‹ª˘ly


202 #i‡
	`deföed
(
TIMSK
Ë&& deföed(
TOIE0
)

203 
	`sbi
(
TIMSK
, 
TOIE0
);

204 #ñi‡
	`deföed
(
TIMSK0
Ë&& deföed(
TOIE0
)

205 
	`sbi
(
TIMSK0
, 
TOIE0
);

207 #îr‹ 
Timî
 0 
ovîÊow
 
öãºu±
 
nŸ
 
£t
 
c‹ª˘ly


215 
TCCR1B
 = 0;

218 #i‡
	`deföed
(
TCCR1B
Ë&& deföed(
CS11
Ë&& deföed(
CS10
)

219 
	`sbi
(
TCCR1B
, 
CS11
);

220 
	`sbi
(
TCCR1B
, 
CS10
);

221 #ñi‡
	`deföed
(
TCCR1
Ë&& deföed(
CS11
Ë&& deföed(
CS10
)

222 
	`sbi
(
TCCR1
, 
CS11
);

223 
	`sbi
(
TCCR1
, 
CS10
);

226 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
WGM10
)

227 
	`sbi
(
TCCR1A
, 
WGM10
);

228 #ñi‡
	`deföed
(
TCCR1
)

229 #w¨nög 
this
 
√eds
 
to
 
be
 
föished


233 #i‡
	`deföed
(
TCCR2
Ë&& deföed(
CS22
)

234 
	`sbi
(
TCCR2
, 
CS22
);

235 #ñi‡
	`deföed
(
TCCR2B
Ë&& deföed(
CS22
)

236 
	`sbi
(
TCCR2B
, 
CS22
);

238 #w¨nög 
Timî
 2 
nŸ
 
	`föished
 (
may
ÇŸ 
be
 
¥e£¡
 
⁄
 
this
 
CPU
)

242 #i‡
	`deföed
(
TCCR2
Ë&& deföed(
WGM20
)

243 
	`sbi
(
TCCR2
, 
WGM20
);

244 #ñi‡
	`deföed
(
TCCR2A
Ë&& deföed(
WGM20
)

245 
	`sbi
(
TCCR2A
, 
WGM20
);

247 #w¨nög 
Timî
 2 
nŸ
 
	`föished
 (
may
ÇŸ 
be
 
¥e£¡
 
⁄
 
this
 
CPU
)

250 #i‡
	`deföed
(
TCCR3B
Ë&& deföed(
CS31
Ë&& deföed(
WGM30
)

251 
	`sbi
(
TCCR3B
, 
CS31
);

252 
	`sbi
(
TCCR3B
, 
CS30
);

253 
	`sbi
(
TCCR3A
, 
WGM30
);

256 #i‡
	`deföed
(
TCCR4B
Ë&& deföed(
CS41
Ë&& deföed(
WGM40
)

257 
	`sbi
(
TCCR4B
, 
CS41
);

258 
	`sbi
(
TCCR4B
, 
CS40
);

259 
	`sbi
(
TCCR4A
, 
WGM40
);

262 #i‡
	`deföed
(
TCCR5B
Ë&& deföed(
CS51
Ë&& deföed(
WGM50
)

263 
	`sbi
(
TCCR5B
, 
CS51
);

264 
	`sbi
(
TCCR5B
, 
CS50
);

265 
	`sbi
(
TCCR5A
, 
WGM50
);

268 #i‡
	`deföed
(
ADCSRA
)

273 
	`sbi
(
ADCSRA
, 
ADPS2
);

274 
	`sbi
(
ADCSRA
, 
ADPS1
);

275 
	`sbi
(
ADCSRA
, 
ADPS0
);

278 
	`sbi
(
ADCSRA
, 
ADEN
);

284 #i‡
	`deföed
(
UCSRB
)

285 
UCSRB
 = 0;

286 #ñi‡
	`deföed
(
UCSR0B
)

287 
UCSR0B
 = 0;

289 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/wiring.h

25 #i‚de‡
Wúög_h


26 
	#Wúög_h


	)

28 
	~<m©h.h
>

29 
	~<avr/io.h
>

30 
	~<°dlib.h
>

31 
	~"bö¨y.h
"

33 #ifde‡
__˝lu•lus


37 
	#HIGH
 0x1

	)

38 
	#LOW
 0x0

	)

40 
	#INPUT
 0x0

	)

41 
	#OUTPUT
 0x1

	)

43 
	#åue
 0x1

	)

44 
	#Ál£
 0x0

	)

46 
	#PI
 3.1415926535897932384626433832795

	)

47 
	#HALF_PI
 1.5707963267948966192313216916398

	)

48 
	#TWO_PI
 6.283185307179586476925286766559

	)

49 
	#DEG_TO_RAD
 0.017453292519943295769236907684886

	)

50 
	#RAD_TO_DEG
 57.295779513082320876798154814105

	)

52 
	#SERIAL
 0x0

	)

53 
	#DISPLAY
 0x1

	)

55 
	#LSBFIRST
 0

	)

56 
	#MSBFIRST
 1

	)

58 
	#CHANGE
 1

	)

59 
	#FALLING
 2

	)

60 
	#RISING
 3

	)

62 #i‡
deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega2560__
)

63 
	#INTERNAL1V1
 2

	)

64 
	#INTERNAL2V56
 3

	)

66 
	#INTERNAL
 3

	)

68 
	#DEFAULT
 1

	)

69 
	#EXTERNAL
 0

	)

72 #ifde‡
abs


73 #unde‡
abs


76 
	#mö
(
a
,
b
Ë(◊)<(b)?◊):(b))

	)

77 
	#max
(
a
,
b
Ë(◊)>(b)?◊):(b))

	)

78 
	#abs
(
x
Ë((x)>0?(x):-(x))

	)

79 
	#c⁄°øö
(
amt
,
low
,
high
Ë(◊mt)<÷ow)?÷ow):(◊mt)>(high)?(high):◊mt)))

	)

80 
	#round
(
x
Ë((x)>=0?()((x)+0.5):()((x)-0.5))

	)

81 
	#ødüns
(
deg
Ë((deg)*
DEG_TO_RAD
)

	)

82 
	#degªes
(
ød
Ë(‘ad)*
RAD_TO_DEG
)

	)

83 
	#sq
(
x
Ë((x)*(x))

	)

85 
	#öãºu±s
(Ë
	`£i
()

	)

86 
	#noI¡îru±s
(Ë
	`˛i
()

	)

88 
	#˛ockCy˛esPîMi¸o£c⁄d
(Ë–
F_CPU
 / 1000000L )

	)

89 
	#˛ockCy˛esToMi¸o£c⁄ds
(
a
Ë–(◊Ë* 1000LË/ (
F_CPU
 / 1000LË)

	)

90 
	#mi¸o£c⁄dsToClockCy˛es
(
a
Ë–(◊Ë* (
F_CPU
 / 1000L)Ë/ 1000L )

	)

92 
	#lowByã
(
w
Ë((
uöt8_t
Ë((wË& 0xff))

	)

93 
	#highByã
(
w
Ë((
uöt8_t
Ë((wË>> 8))

	)

95 
	#bôRód
(
vÆue
, 
bô
Ë(((vÆueË>> (bô)Ë& 0x01)

	)

96 
	#bôSë
(
vÆue
, 
bô
Ë((vÆueË|(1UL << (bô)))

	)

97 
	#bôCÀ¨
(
vÆue
, 
bô
Ë((vÆueË&~(1UL << (bô)))

	)

98 
	#bôWrôe
(
vÆue
, 
bô
, 
bôvÆue
Ë(bôvÆuê? 
	`bôSë
(vÆue, bôË: 
	`bôCÀ¨
(vÆue, bô))

	)

101 
	tw‹d
;

103 
	#bô
(
b
Ë(1UL << (b))

	)

105 
uöt8_t
 
	tboﬁón
;

106 
uöt8_t
 
	tbyã
;

108 
öô
();

110 
pöMode
(
uöt8_t
, uint8_t);

111 
digôÆWrôe
(
uöt8_t
, uint8_t);

112 
digôÆRód
(
uöt8_t
);

113 
™ÆogRód
(
uöt8_t
);

114 
™ÆogRe„ªn˚
(
uöt8_t
 
mode
);

115 
™ÆogWrôe
(
uöt8_t
, );

117 
mûlis
();

118 
mi¸os
();

119 
dñay
();

120 
dñayMi¸o£c⁄ds
(
us
);

121 
pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
);

123 
shi·Out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
, uöt8_à
vÆ
);

124 
uöt8_t
 
shi·In
(uöt8_à
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
);

126 
©èchI¡îru±
(
uöt8_t
, (*)(), 
mode
);

127 
dëachI¡îru±
(
uöt8_t
);

129 
£tup
();

130 
lo›
();

132 #ifde‡
__˝lu•lus


	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/wiring_analog.c

27 
	~"wúög_¥iv©e.h
"

28 
	~"pös_¨duöo.h
"

30 
uöt8_t
 
	g™Æog_ª„ªn˚
 = 
DEFAULT
;

32 
	$™ÆogRe„ªn˚
(
uöt8_t
 
mode
)

37 
™Æog_ª„ªn˚
 = 
mode
;

38 
	}
}

40 
	$™ÆogRód
(
uöt8_t
 
pö
)

42 
uöt8_t
 
low
, 
high
;

44 #i‡
	`deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega2560__
)

45 i‡(
pö
 >= 54)Öin -= 54;

47 i‡(
pö
 >= 14)Öin -= 14;

50 #i‡
	`deföed
(
ADCSRB
Ë&& deföed(
MUX5
)

53 
ADCSRB
 = (ADCSRB & ~(1 << 
MUX5
)Ë| (((
pö
 >> 3) & 0x01) << MUX5);

59 #i‡
	`deföed
(
ADMUX
)

60 
ADMUX
 = (
™Æog_ª„ªn˚
 << 6Ë| (
pö
 & 0x07);

66 #i‡
	`deföed
(
ADCSRA
Ë&& deföed(
ADCL
)

68 
	`sbi
(
ADCSRA
, 
ADSC
);

71 
	`bô_is_£t
(
ADCSRA
, 
ADSC
));

77 
low
 = 
ADCL
;

78 
high
 = 
ADCH
;

81 
low
 = 0;

82 
high
 = 0;

86  (
high
 << 8Ë| 
low
;

87 
	}
}

93 
	$™ÆogWrôe
(
uöt8_t
 
pö
, 
vÆ
)

100 
	`pöMode
(
pö
, 
OUTPUT
);

101 i‡(
vÆ
 == 0)

103 
	`digôÆWrôe
(
pö
, 
LOW
);

105 i‡(
vÆ
 == 255)

107 
	`digôÆWrôe
(
pö
, 
HIGH
);

111 
	`digôÆPöToTimî
(
pö
))

114 #i‡
	`deföed
(
TCCR0
Ë&& deföed(
COM00
Ë&& !deföed(
__AVR_ATmega8__
)

115 
TIMER0A
:

117 
	`sbi
(
TCCR0
, 
COM00
);

118 
OCR0
 = 
vÆ
;

122 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
COM0A1
)

123 
TIMER0A
:

125 
	`sbi
(
TCCR0A
, 
COM0A1
);

126 
OCR0A
 = 
vÆ
;

130 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
COM0B1
)

131 
TIMER0B
:

133 
	`sbi
(
TCCR0A
, 
COM0B1
);

134 
OCR0B
 = 
vÆ
;

138 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
COM1A1
)

139 
TIMER1A
:

141 
	`sbi
(
TCCR1A
, 
COM1A1
);

142 
OCR1A
 = 
vÆ
;

146 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
COM1B1
)

147 
TIMER1B
:

149 
	`sbi
(
TCCR1A
, 
COM1B1
);

150 
OCR1B
 = 
vÆ
;

154 #i‡
	`deföed
(
TCCR2
Ë&& deföed(
COM21
)

155 
TIMER2
:

157 
	`sbi
(
TCCR2
, 
COM21
);

158 
OCR2
 = 
vÆ
;

162 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
COM2A1
)

163 
TIMER2A
:

165 
	`sbi
(
TCCR2A
, 
COM2A1
);

166 
OCR2A
 = 
vÆ
;

170 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
COM2B1
)

171 
TIMER2B
:

173 
	`sbi
(
TCCR2A
, 
COM2B1
);

174 
OCR2B
 = 
vÆ
;

178 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3A1
)

179 
TIMER3A
:

181 
	`sbi
(
TCCR3A
, 
COM3A1
);

182 
OCR3A
 = 
vÆ
;

186 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3B1
)

187 
TIMER3B
:

189 
	`sbi
(
TCCR3A
, 
COM3B1
);

190 
OCR3B
 = 
vÆ
;

194 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3C1
)

195 
TIMER3C
:

197 
	`sbi
(
TCCR3A
, 
COM3C1
);

198 
OCR3C
 = 
vÆ
;

202 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4A1
)

203 
TIMER4A
:

205 
	`sbi
(
TCCR4A
, 
COM4A1
);

206 
OCR4A
 = 
vÆ
;

210 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4B1
)

211 
TIMER4B
:

213 
	`sbi
(
TCCR4A
, 
COM4B1
);

214 
OCR4B
 = 
vÆ
;

218 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4C1
)

219 
TIMER4C
:

221 
	`sbi
(
TCCR4A
, 
COM4C1
);

222 
OCR4C
 = 
vÆ
;

226 #i‡
	`deföed
(
TCCR5A
Ë&& deföed(
COM5A1
)

227 
TIMER5A
:

229 
	`sbi
(
TCCR5A
, 
COM5A1
);

230 
OCR5A
 = 
vÆ
;

234 #i‡
	`deföed
(
TCCR5A
Ë&& deföed(
COM5B1
)

235 
TIMER5B
:

237 
	`sbi
(
TCCR5A
, 
COM5B1
);

238 
OCR5B
 = 
vÆ
;

242 #i‡
	`deföed
(
TCCR5A
Ë&& deföed(
COM5C1
)

243 
TIMER5C
:

245 
	`sbi
(
TCCR5A
, 
COM5C1
);

246 
OCR5C
 = 
vÆ
;

250 
NOT_ON_TIMER
:

252 i‡(
vÆ
 < 128) {

253 
	`digôÆWrôe
(
pö
, 
LOW
);

255 
	`digôÆWrôe
(
pö
, 
HIGH
);

259 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/wiring_digital.c

27 
	~"wúög_¥iv©e.h
"

28 
	~"pös_¨duöo.h
"

30 
	$pöMode
(
uöt8_t
 
pö
, uöt8_à
mode
)

32 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

33 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

34 vﬁ©ûê
uöt8_t
 *
ªg
;

36 i‡(
p‹t
 =
NOT_A_PIN
) ;

39 
ªg
 = 
	`p‹tModeRegi°î
(
p‹t
);

41 i‡(
mode
 =
INPUT
) {

42 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

43 
	`˛i
();

44 *
ªg
 &~
bô
;

45 
SREG
 = 
ﬁdSREG
;

47 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

48 
	`˛i
();

49 *
ªg
 |
bô
;

50 
SREG
 = 
ﬁdSREG
;

52 
	}
}

68 
	$tu∫OffPWM
(
uöt8_t
 
timî
)

70 
timî
)

72 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
COM1A1
)

73 
TIMER1A
: 
	`cbi
(
TCCR1A
, 
COM1A1
); ;

75 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
COM1B1
)

76 
TIMER1B
: 
	`cbi
(
TCCR1A
, 
COM1B1
); ;

79 #i‡
	`deföed
(
TCCR2
Ë&& deföed(
COM21
)

80 
TIMER2
: 
	`cbi
(
TCCR2
, 
COM21
); ;

83 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
COM0A1
)

84 
TIMER0A
: 
	`cbi
(
TCCR0A
, 
COM0A1
); ;

87 #i‡
	`deföed
(
TIMER0B
Ë&& deföed(
COM0B1
)

88 
TIMER0B
: 
	`cbi
(
TCCR0A
, 
COM0B1
); ;

90 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
COM2A1
)

91 
TIMER2A
: 
	`cbi
(
TCCR2A
, 
COM2A1
); ;

93 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
COM2B1
)

94 
TIMER2B
: 
	`cbi
(
TCCR2A
, 
COM2B1
); ;

97 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3A1
)

98 
TIMER3A
: 
	`cbi
(
TCCR3A
, 
COM3A1
); ;

100 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3B1
)

101 
TIMER3B
: 
	`cbi
(
TCCR3A
, 
COM3B1
); ;

103 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3C1
)

104 
TIMER3C
: 
	`cbi
(
TCCR3A
, 
COM3C1
); ;

107 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4A1
)

108 
TIMER4A
: 
	`cbi
(
TCCR4A
, 
COM4A1
); ;

110 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4B1
)

111 
TIMER4B
: 
	`cbi
(
TCCR4A
, 
COM4B1
); ;

113 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4C1
)

114 
TIMER4C
: 
	`cbi
(
TCCR4A
, 
COM4C1
); ;

116 #i‡
	`deföed
(
TCCR5A
)

117 
TIMER5A
: 
	`cbi
(
TCCR5A
, 
COM5A1
); ;

118 
TIMER5B
: 
	`cbi
(
TCCR5A
, 
COM5B1
); ;

119 
TIMER5C
: 
	`cbi
(
TCCR5A
, 
COM5C1
); ;

122 
	}
}

124 
	$digôÆWrôe
(
uöt8_t
 
pö
, uöt8_à
vÆ
)

126 
uöt8_t
 
timî
 = 
	`digôÆPöToTimî
(
pö
);

127 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

128 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

129 vﬁ©ûê
uöt8_t
 *
out
;

131 i‡(
p‹t
 =
NOT_A_PIN
) ;

135 i‡(
timî
 !
NOT_ON_TIMER
Ë
	`tu∫OffPWM
(timer);

137 
out
 = 
	`p‹tOuçutRegi°î
(
p‹t
);

139 i‡(
vÆ
 =
LOW
) {

140 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

141 
	`˛i
();

142 *
out
 &~
bô
;

143 
SREG
 = 
ﬁdSREG
;

145 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

146 
	`˛i
();

147 *
out
 |
bô
;

148 
SREG
 = 
ﬁdSREG
;

150 
	}
}

152 
	$digôÆRód
(
uöt8_t
 
pö
)

154 
uöt8_t
 
timî
 = 
	`digôÆPöToTimî
(
pö
);

155 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

156 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

158 i‡(
p‹t
 =
NOT_A_PIN
Ë 
LOW
;

162 i‡(
timî
 !
NOT_ON_TIMER
Ë
	`tu∫OffPWM
(timer);

164 i‡(*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë 
HIGH
;

165  
LOW
;

166 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/wiring_private.h

25 #i‚de‡
WúögPriv©e_h


26 
	#WúögPriv©e_h


	)

27 
	~<m©h.h
>

28 
	~<avr/io.h
>

29 
	~<avr/öãºu±.h
>

30 
	~<utû/dñay.h
>

31 
	~<°dio.h
>

32 
	~<°d¨g.h
>

34 
	~"wúög.h
"

36 #ifde‡
__˝lu•lus


40 #i‚de‡
cbi


41 
	#cbi
(
s‰
, 
bô
Ë(
	`_SFR_BYTE
(s‰Ë&~
	`_BV
(bô))

	)

43 #i‚de‡
sbi


44 
	#sbi
(
s‰
, 
bô
Ë(
	`_SFR_BYTE
(s‰Ë|
	`_BV
(bô))

	)

47 
	#EXTERNAL_INT_0
 0

	)

48 
	#EXTERNAL_INT_1
 1

	)

49 
	#EXTERNAL_INT_2
 2

	)

50 
	#EXTERNAL_INT_3
 3

	)

51 
	#EXTERNAL_INT_4
 4

	)

52 
	#EXTERNAL_INT_5
 5

	)

53 
	#EXTERNAL_INT_6
 6

	)

54 
	#EXTERNAL_INT_7
 7

	)

56 #i‡
deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega2560__
)

57 
	#EXTERNAL_NUM_INTERRUPTS
 8

	)

59 
	#EXTERNAL_NUM_INTERRUPTS
 2

	)

62 (*
voidFuncPå
)();

64 #ifde‡
__˝lu•lus


	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/wiring_pulse.c

25 
	~"wúög_¥iv©e.h
"

26 
	~"pös_¨duöo.h
"

32 
	$pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
)

37 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

38 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

39 
uöt8_t
 
°©eMask
 = (
°©e
 ? 
bô
 : 0);

40 
width
 = 0;

44 
numlo›s
 = 0;

45 
maxlo›s
 = 
	`mi¸o£c⁄dsToClockCy˛es
(
timeout
) / 16;

48 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë=
°©eMask
)

49 i‡(
numlo›s
++ =
maxlo›s
)

53 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë!
°©eMask
)

54 i‡(
numlo›s
++ =
maxlo›s
)

58 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë=
°©eMask
) {

59 i‡(
numlo›s
++ =
maxlo›s
)

61 
width
++;

68  
	`˛ockCy˛esToMi¸o£c⁄ds
(
width
 * 21 + 16);

69 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/wiring_shift.c

25 
	~"wúög_¥iv©e.h
"

27 
uöt8_t
 
	$shi·In
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
) {

28 
uöt8_t
 
vÆue
 = 0;

29 
uöt8_t
 
i
;

31 
i
 = 0; i < 8; ++i) {

32 
	`digôÆWrôe
(
˛ockPö
, 
HIGH
);

33 i‡(
bôOrdî
 =
LSBFIRST
)

34 
vÆue
 |
	`digôÆRód
(
d©aPö
Ë<< 
i
;

36 
vÆue
 |
	`digôÆRód
(
d©aPö
Ë<< (7 - 
i
);

37 
	`digôÆWrôe
(
˛ockPö
, 
LOW
);

39  
vÆue
;

40 
	}
}

42 
	$shi·Out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
, uöt8_à
vÆ
)

44 
uöt8_t
 
i
;

46 
i
 = 0; i < 8; i++) {

47 i‡(
bôOrdî
 =
LSBFIRST
)

48 
	`digôÆWrôe
(
d©aPö
, !!(
vÆ
 & (1 << 
i
)));

50 
	`digôÆWrôe
(
d©aPö
, !!(
vÆ
 & (1 << (7 - 
i
))));

52 
	`digôÆWrôe
(
˛ockPö
, 
HIGH
);

53 
	`digôÆWrôe
(
˛ockPö
, 
LOW
);

55 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/HardwareSerial.cpp

22 
	~<°dio.h
>

23 
	~<°rög.h
>

24 
	~<öây≥s.h
>

25 
	~"wúög.h
"

26 
	~"wúög_¥iv©e.h
"

28 
	~"H¨dw¨eSîül.h
"

34 
	#RX_BUFFER_SIZE
 128

	)

36 
	srög_buf„r
 {

37 
	mbuf„r
[
RX_BUFFER_SIZE
];

38 
	mhód
;

39 
	mèû
;

42 
rög_buf„r
 
	grx_buf„r
 = { { 0 }, 0, 0 };

44 #ifde‡
UDR1


45 
rög_buf„r
 
	grx_buf„r1
 = { { 0 }, 0, 0 };

48 #ifde‡
UDR2


49 
rög_buf„r
 
	grx_buf„r2
 = { { 0 }, 0, 0 };

51 #ifde‡
UDR3


52 
rög_buf„r
 
	grx_buf„r3
 = { { 0 }, 0, 0 };

55 
ölöe
 
	$°‹e_ch¨
(
c
, 
rög_buf„r
 *
rx_buf„r
)

57 
i
 = (
rx_buf„r
->
hód
 + 1Ë% 
RX_BUFFER_SIZE
;

63 i‡(
i
 !
rx_buf„r
->
èû
) {

64 
rx_buf„r
->
buf„r
[rx_buf„r->
hód
] = 
c
;

65 
rx_buf„r
->
hód
 = 
i
;

67 
	}
}

69 
	$ISR
(
USART0_RX_ve˘
)

71 
c
 = 
UDR0
;

72 
	`°‹e_ch¨
(
c
, &
rx_buf„r
);

73 
	}
}

75 #ifde‡
UDR1


76 
	$ISR
(
USART1_RX_ve˘
)

78 
c
 = 
UDR1
;

79 
	`°‹e_ch¨
(
c
, &
rx_buf„r1
);

80 
	}
}

82 #ifde‡
UDR2


83 
	$ISR
(
USART2_RX_ve˘
)

85 
c
 = 
UDR2
;

86 
	`°‹e_ch¨
(
c
, &
rx_buf„r2
);

87 
	}
}

89 #ifde‡
UDR2


90 
	$ISR
(
USART3_RX_ve˘
)

92 
c
 = 
UDR3
;

93 
	`°‹e_ch¨
(
c
, &
rx_buf„r3
);

94 
	}
}

100 #i‡
deföed
(
__AVR_ATmega8__
)

101 
	$SIGNAL
(
SIG_UART_RECV
)

103 
	$SIGNAL
(
USART_RX_ve˘
)

106 #i‡
	`deföed
(
__AVR_ATmega8__
)

107 
c
 = 
UDR
;

109 
c
 = 
UDR0
;

111 
	`°‹e_ch¨
(
c
, &
rx_buf„r
);

112 
	}
}

118 
	gH¨dw¨eSîül
::
	$H¨dw¨eSîül
(
rög_buf„r
 *
rx_buf„r
,

119 vﬁ©ûê
uöt8_t
 *
ubºh
, vﬁ©ûêuöt8_à*
ubºl
,

120 vﬁ©ûê
uöt8_t
 *
uc§a
, vﬁ©ûêuöt8_à*
uc§b
,

121 vﬁ©ûê
uöt8_t
 *
udr
,

122 
uöt8_t
 
rxí
, uöt8_à
txí
, uöt8_à
rxcõ
, uöt8_à
udª
, uöt8_à
u2x
)

124 
_rx_buf„r
 = 
rx_buf„r
;

125 
_ubºh
 = 
ubºh
;

126 
_ubºl
 = 
ubºl
;

127 
_uc§a
 = 
uc§a
;

128 
_uc§b
 = 
uc§b
;

129 
_udr
 = 
udr
;

130 
_rxí
 = 
rxí
;

131 
_txí
 = 
txí
;

132 
_rxcõ
 = 
rxcõ
;

133 
_udª
 = 
udª
;

134 
_u2x
 = 
u2x
;

135 
	}
}

139 
	gH¨dw¨eSîül
::
	$begö
(
baud
)

141 
uöt16_t
 
baud_£âög
;

142 
boﬁ
 
u£_u2x
;

145 i‡(
baud
 > 
F_CPU
 / 16) {

146 
u£_u2x
 = 
åue
;

152 
uöt8_t
 
n⁄u2x_baud_îr‹
 = 
	`abs
(()(255-((
F_CPU
/(16*(((F_CPU/8/
baud
-1)/2)+1))*255)/baud)));

153 
uöt8_t
 
u2x_baud_îr‹
 = 
	`abs
(()(255-((
F_CPU
/(8*(((F_CPU/4/
baud
-1)/2)+1))*255)/baud)));

156 
u£_u2x
 = (
n⁄u2x_baud_îr‹
 > 
u2x_baud_îr‹
);

159 i‡(
u£_u2x
) {

160 *
_uc§a
 = 1 << 
_u2x
;

161 
baud_£âög
 = (
F_CPU
 / 4 / 
baud
 - 1) / 2;

163 *
_uc§a
 = 0;

164 
baud_£âög
 = (
F_CPU
 / 8 / 
baud
 - 1) / 2;

168 *
_ubºh
 = 
baud_£âög
 >> 8;

169 *
_ubºl
 = 
baud_£âög
;

171 
	`sbi
(*
_uc§b
, 
_rxí
);

172 
	`sbi
(*
_uc§b
, 
_txí
);

173 
	`sbi
(*
_uc§b
, 
_rxcõ
);

174 
	}
}

176 
	gH¨dw¨eSîül
::
	$íd
()

178 
	`cbi
(*
_uc§b
, 
_rxí
);

179 
	`cbi
(*
_uc§b
, 
_txí
);

180 
	`cbi
(*
_uc§b
, 
_rxcõ
);

181 
	}
}

183 
uöt8_t
 
	gH¨dw¨eSîül
::
	$avaûabÀ
()

185  (
RX_BUFFER_SIZE
 + 
_rx_buf„r
->
hód
 - _rx_buf„r->
èû
) % RX_BUFFER_SIZE;

186 
	}
}

188 
	gH¨dw¨eSîül
::
	$ªad
()

191 i‡(
_rx_buf„r
->
hód
 =_rx_buf„r->
èû
) {

194 
c
 = 
_rx_buf„r
->
buf„r
[_rx_buf„r->
èû
];

195 
_rx_buf„r
->
èû
 = (_rx_buf„r->èû + 1Ë% 
RX_BUFFER_SIZE
;

196  
c
;

198 
	}
}

200 
	gH¨dw¨eSîül
::
	$Êush
()

211 
_rx_buf„r
->
hód
 = _rx_buf„r->
èû
;

212 
	}
}

214 
	gH¨dw¨eSîül
::
	$wrôe
(
uöt8_t
 
c
)

216 !((*
_uc§a
Ë& (1 << 
_udª
)))

219 *
_udr
 = 
c
;

220 
	}
}

224 #i‡
deföed
(
__AVR_ATmega8__
)

225 
H¨dw¨eSîül
 
Sîül
(&
rx_buf„r
, &
UBRRH
, &
UBRRL
, &
UCSRA
, &
UCSRB
, &
UDR
, 
RXEN
, 
TXEN
, 
RXCIE
, 
UDRE
, 
U2X
);

227 
H¨dw¨eSîül
 
Sîül
(&
rx_buf„r
, &
UBRR0H
, &
UBRR0L
, &
UCSR0A
, &
UCSR0B
, &
UDR0
, 
RXEN0
, 
TXEN0
, 
RXCIE0
, 
UDRE0
, 
U2X0
);

230 #ifde‡
UDR1


231 
H¨dw¨eSîül
 
Sîül1
(&
rx_buf„r1
, &
UBRR1H
, &
UBRR1L
, &
UCSR1A
, &
UCSR1B
, &
UDR1
, 
RXEN1
, 
TXEN1
, 
RXCIE1
, 
UDRE1
, 
U2X1
);

234 #ifde‡
UDR2


235 
H¨dw¨eSîül
 
Sîül2
(&
rx_buf„r2
, &
UBRR2H
, &
UBRR2L
, &
UCSR2A
, &
UCSR2B
, &
UDR2
, 
RXEN2
, 
TXEN2
, 
RXCIE2
, 
UDRE2
, 
U2X2
);

237 #ifde‡
UDR3


238 
H¨dw¨eSîül
 
Sîül3
(&
rx_buf„r3
, &
UBRR3H
, &
UBRR3L
, &
UCSR3A
, &
UCSR3B
, &
UDR3
, 
RXEN3
, 
TXEN3
, 
RXCIE3
, 
UDRE3
, 
U2X3
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/HardwareSerial.h

20 #i‚de‡
H¨dw¨eSîül_h


21 
	#H¨dw¨eSîül_h


	)

23 
	~<öây≥s.h
>

25 
	~"Pröt.h
"

27 
	grög_buf„r
;

29 ˛as†
	cH¨dw¨eSîül
 : 
public
 
Pröt


31 
¥iv©e
:

32 
rög_buf„r
 *
_rx_buf„r
;

33 vﬁ©ûê
uöt8_t
 *
	m_ubºh
;

34 vﬁ©ûê
uöt8_t
 *
	m_ubºl
;

35 vﬁ©ûê
uöt8_t
 *
	m_uc§a
;

36 vﬁ©ûê
uöt8_t
 *
	m_uc§b
;

37 vﬁ©ûê
uöt8_t
 *
	m_udr
;

38 
uöt8_t
 
	m_rxí
;

39 
uöt8_t
 
	m_txí
;

40 
uöt8_t
 
	m_rxcõ
;

41 
uöt8_t
 
	m_udª
;

42 
uöt8_t
 
	m_u2x
;

43 
	mpublic
:

44 
H¨dw¨eSîül
(
rög_buf„r
 *
rx_buf„r
,

45 vﬁ©ûê
uöt8_t
 *
ubºh
, vﬁ©ûêuöt8_à*
ubºl
,

46 vﬁ©ûê
uöt8_t
 *
uc§a
, vﬁ©ûêuöt8_à*
uc§b
,

47 vﬁ©ûê
uöt8_t
 *
udr
,

48 
uöt8_t
 
rxí
, uöt8_à
txí
, uöt8_à
rxcõ
, uöt8_à
udª
, uöt8_à
u2x
);

49 
begö
();

50 
íd
();

51 
uöt8_t
 
avaûabÀ
();

52 
ªad
();

53 
Êush
();

54 
vútuÆ
 
wrôe
(
uöt8_t
);

55 
usög
 
	mPröt
::
wrôe
;

58 
H¨dw¨eSîül
 
Sîül
;

60 #i‡
deföed
(
__AVR_ATmega644P__
Ë|| deföed(
__AVR_ATmega1280__
)

61 
H¨dw¨eSîül
 
Sîül1
;

64 #i‡
deföed
(
__AVR_ATmega1280__
)

65 
H¨dw¨eSîül
 
Sîül2
;

66 
H¨dw¨eSîül
 
Sîül3
;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/Print.cpp

22 
	~<°dio.h
>

23 
	~<°rög.h
>

24 
	~<öây≥s.h
>

25 
	~<m©h.h
>

26 
	~"wúög.h
"

28 
	~"Pröt.h
"

32 
	gPröt
::
	$¥öt
(
uöt8_t
 
b
)

34 
this
->
	`wrôe
(
b
);

35 
	}
}

37 
	gPröt
::
	$¥öt
(
c
)

39 
	`¥öt
((
byã
Ë
c
);

40 
	}
}

42 
	gPröt
::
	$¥öt
(c⁄° 
c
[])

44 *
c
)

45 
	`¥öt
(*
c
++);

46 
	}
}

48 
	gPröt
::
	$¥öt
(
n
)

50 
	`¥öt
((Ë
n
);

51 
	}
}

53 
	gPröt
::
	$¥öt
(
n
)

55 
	`¥öt
((Ë
n
);

56 
	}
}

58 
	gPröt
::
	$¥öt
(
n
)

60 i‡(
n
 < 0) {

61 
	`¥öt
('-');

62 
n
 = -n;

64 
	`¥ötNumbî
(
n
, 10);

65 
	}
}

67 
	gPröt
::
	$¥öt
(
n
)

69 
	`¥ötNumbî
(
n
, 10);

70 
	}
}

72 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

74 i‡(
ba£
 == 0)

75 
	`¥öt
((Ë
n
);

76 i‡(
ba£
 == 10)

77 
	`¥öt
(
n
);

79 
	`¥ötNumbî
(
n
, 
ba£
);

80 
	}
}

82 
	gPröt
::
	$¥öt
(
n
)

84 
	`¥ötFlﬂt
(
n
, 2);

85 
	}
}

87 
	gPröt
::
	$¥öén
()

89 
	`¥öt
('\r');

90 
	`¥öt
('\n');

91 
	}
}

93 
	gPröt
::
	$¥öén
(
c
)

95 
	`¥öt
(
c
);

96 
	`¥öén
();

97 
	}
}

99 
	gPröt
::
	$¥öén
(c⁄° 
c
[])

101 
	`¥öt
(
c
);

102 
	`¥öén
();

103 
	}
}

105 
	gPröt
::
	$¥öén
(
uöt8_t
 
b
)

107 
	`¥öt
(
b
);

108 
	`¥öén
();

109 
	}
}

111 
	gPröt
::
	$¥öén
(
n
)

113 
	`¥öt
(
n
);

114 
	`¥öén
();

115 
	}
}

117 
	gPröt
::
	$¥öén
(
n
)

119 
	`¥öt
(
n
);

120 
	`¥öén
();

121 
	}
}

123 
	gPröt
::
	$¥öén
(
n
)

125 
	`¥öt
(
n
);

126 
	`¥öén
();

127 
	}
}

129 
	gPröt
::
	$¥öén
(
n
)

131 
	`¥öt
(
n
);

132 
	`¥öén
();

133 
	}
}

135 
	gPröt
::
	$¥öén
(
n
, 
ba£
)

137 
	`¥öt
(
n
, 
ba£
);

138 
	`¥öén
();

139 
	}
}

141 
	gPröt
::
	$¥öén
(
n
)

143 
	`¥öt
(
n
);

144 
	`¥öén
();

145 
	}
}

149 
	gPröt
::
	$¥ötNumbî
(
n
, 
uöt8_t
 
ba£
)

151 
buf
[8 * ()];

152 
i
 = 0;

154 i‡(
n
 == 0) {

155 
	`¥öt
('0');

159 
n
 > 0) {

160 
buf
[
i
++] = 
n
 % 
ba£
;

161 
n
 /
ba£
;

164 ; 
i
 > 0; i--)

165 
	`¥öt
((Ë(
buf
[
i
 - 1] < 10 ?

166 '0' + 
buf
[
i
 - 1] :

167 'A' + 
buf
[
i
 - 1] - 10));

168 
	}
}

170 
	gPröt
::
	$¥ötFlﬂt
(
numbî
, 
uöt8_t
 
digôs
)

173 i‡(
numbî
 < 0.0)

175 
	`¥öt
('-');

176 
numbî
 = -number;

180 
roundög
 = 0.5;

181 
uöt8_t
 
i
=0; i<
digôs
; ++i)

182 
roundög
 /= 10.0;

184 
numbî
 +
roundög
;

187 
öt_∑π
 = ()
numbî
;

188 
ªmaödî
 = 
numbî
 - ()
öt_∑π
;

189 
	`¥öt
(
öt_∑π
);

192 i‡(
digôs
 > 0)

193 
	`¥öt
(".");

196 
digôs
-- > 0)

198 
ªmaödî
 *= 10.0;

199 
toPröt
 = (
ªmaödî
);

200 
	`¥öt
(
toPröt
);

201 
ªmaödî
 -
toPröt
;

203 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/Print.h

20 #i‚de‡
Pröt_h


21 
	#Pröt_h


	)

23 
	~<öây≥s.h
>

25 
	#DEC
 10

	)

26 
	#HEX
 16

	)

27 
	#OCT
 8

	)

28 
	#BIN
 2

	)

29 
	#BYTE
 0

	)

31 ˛as†
	cPröt


33 
	m¥iv©e
:

34 
¥ötNumbî
(, 
uöt8_t
);

35 
¥ötFlﬂt
(, 
uöt8_t
);

36 
	mpublic
:

37 
vútuÆ
 
wrôe
(
uöt8_t
);

38 
¥öt
();

39 
¥öt
(const []);

40 
¥öt
(
uöt8_t
);

41 
¥öt
();

42 
¥öt
();

43 
¥öt
();

44 
¥öt
();

45 
¥öt
(, );

46 
¥öt
();

47 
¥öén
();

48 
¥öén
();

49 
¥öén
(const []);

50 
¥öén
(
uöt8_t
);

51 
¥öén
();

52 
¥öén
();

53 
¥öén
();

54 
¥öén
();

55 
¥öén
(, );

56 
¥öén
();

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/Tone.cpp

34 
	~<avr/öãºu±.h
>

35 
	~<avr/pgm•a˚.h
>

36 
	~<wúög.h
>

37 
	~<pös_¨duöo.h
>

39 #i‡
deföed
(
__AVR_ATmega8__
)

40 
	#TCCR2A
 
TCCR2


	)

41 
	#TCCR2B
 
TCCR2


	)

42 
	#COM2A1
 
COM21


	)

43 
	#COM2A0
 
COM20


	)

44 
	#OCR2A
 
OCR2


	)

45 
	#TIMSK2
 
TIMSK


	)

46 
	#OCIE2A
 
OCIE2


	)

47 
	#TIMER2_COMPA_ve˘
 
TIMER2_COMP_ve˘


	)

48 
	#TIMSK1
 
TIMSK


	)

56 #i‡!
deföed
(
__AVR_ATmega8__
)

57 vﬁ©ûê
	gtimî0_toggÀ_cou¡
;

58 vﬁ©ûê
uöt8_t
 *
	gtimî0_pö_p‹t
;

59 vﬁ©ûê
uöt8_t
 
	gtimî0_pö_mask
;

62 vﬁ©ûê
	gtimî1_toggÀ_cou¡
;

63 vﬁ©ûê
uöt8_t
 *
	gtimî1_pö_p‹t
;

64 vﬁ©ûê
uöt8_t
 
	gtimî1_pö_mask
;

65 vﬁ©ûê
	gtimî2_toggÀ_cou¡
;

66 vﬁ©ûê
uöt8_t
 *
	gtimî2_pö_p‹t
;

67 vﬁ©ûê
uöt8_t
 
	gtimî2_pö_mask
;

69 #i‡
deföed
(
__AVR_ATmega1280__
)

70 vﬁ©ûê
	gtimî3_toggÀ_cou¡
;

71 vﬁ©ûê
uöt8_t
 *
	gtimî3_pö_p‹t
;

72 vﬁ©ûê
uöt8_t
 
	gtimî3_pö_mask
;

73 vﬁ©ûê
	gtimî4_toggÀ_cou¡
;

74 vﬁ©ûê
uöt8_t
 *
	gtimî4_pö_p‹t
;

75 vﬁ©ûê
uöt8_t
 
	gtimî4_pö_mask
;

76 vﬁ©ûê
	gtimî5_toggÀ_cou¡
;

77 vﬁ©ûê
uöt8_t
 *
	gtimî5_pö_p‹t
;

78 vﬁ©ûê
uöt8_t
 
	gtimî5_pö_mask
;

82 #i‡
deföed
(
__AVR_ATmega1280__
)

84 
	#AVAILABLE_TONE_PINS
 1

	)

86 c⁄° 
uöt8_t
 
PROGMEM
 
	gt⁄e_pö_to_timî_PGM
[] = { 2 };

87 
uöt8_t
 
	gt⁄e_pös
[
AVAILABLE_TONE_PINS
] = { 255 };

89 #ñi‡
deföed
(
__AVR_ATmega8__
)

91 
	#AVAILABLE_TONE_PINS
 1

	)

93 c⁄° 
uöt8_t
 
PROGMEM
 
	gt⁄e_pö_to_timî_PGM
[] = { 2 };

94 
uöt8_t
 
	gt⁄e_pös
[
AVAILABLE_TONE_PINS
] = { 255 };

98 
	#AVAILABLE_TONE_PINS
 1

	)

101 c⁄° 
uöt8_t
 
PROGMEM
 
	gt⁄e_pö_to_timî_PGM
[] = { 2 };

102 
uöt8_t
 
	gt⁄e_pös
[
AVAILABLE_TONE_PINS
] = { 255 };

108 
öt8_t
 
	$t⁄eBegö
(
uöt8_t
 
_pö
)

110 
öt8_t
 
_timî
 = -1;

113 
i
 = 0; i < 
AVAILABLE_TONE_PINS
; i++) {

114 i‡(
t⁄e_pös
[
i
] =
_pö
) {

115  
	`pgm_ªad_byã
(
t⁄e_pö_to_timî_PGM
 + 
i
);

120 
i
 = 0; i < 
AVAILABLE_TONE_PINS
; i++) {

121 i‡(
t⁄e_pös
[
i
] == 255) {

122 
t⁄e_pös
[
i
] = 
_pö
;

123 
_timî
 = 
	`pgm_ªad_byã
(
t⁄e_pö_to_timî_PGM
 + 
i
);

128 i‡(
_timî
 != -1)

134 
_timî
)

136 #i‡!
	`deföed
(
__AVR_ATmega8__
)

139 
TCCR0A
 = 0;

140 
TCCR0B
 = 0;

141 
	`bôWrôe
(
TCCR0A
, 
WGM01
, 1);

142 
	`bôWrôe
(
TCCR0B
, 
CS00
, 1);

143 
timî0_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

144 
timî0_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

150 
TCCR1A
 = 0;

151 
TCCR1B
 = 0;

152 
	`bôWrôe
(
TCCR1B
, 
WGM12
, 1);

153 
	`bôWrôe
(
TCCR1B
, 
CS10
, 1);

154 
timî1_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

155 
timî1_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

159 
TCCR2A
 = 0;

160 
TCCR2B
 = 0;

161 
	`bôWrôe
(
TCCR2A
, 
WGM21
, 1);

162 
	`bôWrôe
(
TCCR2B
, 
CS20
, 1);

163 
timî2_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

164 
timî2_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

167 #i‡
	`deföed
(
__AVR_ATmega1280__
)

170 
TCCR3A
 = 0;

171 
TCCR3B
 = 0;

172 
	`bôWrôe
(
TCCR3B
, 
WGM32
, 1);

173 
	`bôWrôe
(
TCCR3B
, 
CS30
, 1);

174 
timî3_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

175 
timî3_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

179 
TCCR4A
 = 0;

180 
TCCR4B
 = 0;

181 
	`bôWrôe
(
TCCR4B
, 
WGM42
, 1);

182 
	`bôWrôe
(
TCCR4B
, 
CS40
, 1);

183 
timî4_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

184 
timî4_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

188 
TCCR5A
 = 0;

189 
TCCR5B
 = 0;

190 
	`bôWrôe
(
TCCR5B
, 
WGM52
, 1);

191 
	`bôWrôe
(
TCCR5B
, 
CS50
, 1);

192 
timî5_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

193 
timî5_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

199  
_timî
;

200 
	}
}

206 
	$t⁄e
(
uöt8_t
 
_pö
, 
‰equícy
, 
duøti⁄
)

208 
uöt8_t
 
¥esˇœrbôs
 = 0b001;

209 
toggÀ_cou¡
 = 0;

210 
uöt32_t
 
o¸
 = 0;

211 
öt8_t
 
_timî
;

213 
_timî
 = 
	`t⁄eBegö
(
_pö
);

215 i‡(
_timî
 >= 0)

218 
	`pöMode
(
_pö
, 
OUTPUT
);

221 i‡(
_timî
 == 0 || _timer == 2)

223 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 - 1;

224 
¥esˇœrbôs
 = 0b001;

225 i‡(
o¸
 > 255)

227 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 8 - 1;

228 
¥esˇœrbôs
 = 0b010;

230 i‡(
_timî
 =2 && 
o¸
 > 255)

232 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 32 - 1;

233 
¥esˇœrbôs
 = 0b011;

236 i‡(
o¸
 > 255)

238 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 64 - 1;

239 
¥esˇœrbôs
 = 
_timî
 == 0 ? 0b011 : 0b100;

241 i‡(
_timî
 =2 && 
o¸
 > 255)

243 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 128 - 1;

244 
¥esˇœrbôs
 = 0b101;

247 i‡(
o¸
 > 255)

249 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 256 - 1;

250 
¥esˇœrbôs
 = 
_timî
 == 0 ? 0b100 : 0b110;

251 i‡(
o¸
 > 255)

254 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 1024 - 1;

255 
¥esˇœrbôs
 = 
_timî
 == 0 ? 0b101 : 0b111;

261 #i‡!
	`deföed
(
__AVR_ATmega8__
)

262 i‡(
_timî
 == 0)

263 
TCCR0B
 = 
¥esˇœrbôs
;

266 
TCCR2B
 = 
¥esˇœrbôs
;

271 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 - 1;

273 
¥esˇœrbôs
 = 0b001;

274 i‡(
o¸
 > 0xffff)

276 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 64 - 1;

277 
¥esˇœrbôs
 = 0b011;

280 i‡(
_timî
 == 1)

281 
TCCR1B
 = (TCCR1B & 0b11111000Ë| 
¥esˇœrbôs
;

282 #i‡
	`deföed
(
__AVR_ATmega1280__
)

283 i‡(
_timî
 == 3)

284 
TCCR3B
 = (TCCR3B & 0b11111000Ë| 
¥esˇœrbôs
;

285 i‡(
_timî
 == 4)

286 
TCCR4B
 = (TCCR4B & 0b11111000Ë| 
¥esˇœrbôs
;

287 i‡(
_timî
 == 5)

288 
TCCR5B
 = (TCCR5B & 0b11111000Ë| 
¥esˇœrbôs
;

295 i‡(
duøti⁄
 > 0)

297 
toggÀ_cou¡
 = 2 * 
‰equícy
 * 
duøti⁄
 / 1000;

301 
toggÀ_cou¡
 = -1;

307 
_timî
)

310 #i‡!
	`deföed
(
__AVR_ATmega8__
)

312 
OCR0A
 = 
o¸
;

313 
timî0_toggÀ_cou¡
 = 
toggÀ_cou¡
;

314 
	`bôWrôe
(
TIMSK0
, 
OCIE0A
, 1);

319 
OCR1A
 = 
o¸
;

320 
timî1_toggÀ_cou¡
 = 
toggÀ_cou¡
;

321 
	`bôWrôe
(
TIMSK1
, 
OCIE1A
, 1);

324 
OCR2A
 = 
o¸
;

325 
timî2_toggÀ_cou¡
 = 
toggÀ_cou¡
;

326 
	`bôWrôe
(
TIMSK2
, 
OCIE2A
, 1);

329 #i‡
	`deföed
(
__AVR_ATmega1280__
)

331 
OCR3A
 = 
o¸
;

332 
timî3_toggÀ_cou¡
 = 
toggÀ_cou¡
;

333 
	`bôWrôe
(
TIMSK3
, 
OCIE3A
, 1);

336 
OCR4A
 = 
o¸
;

337 
timî4_toggÀ_cou¡
 = 
toggÀ_cou¡
;

338 
	`bôWrôe
(
TIMSK4
, 
OCIE4A
, 1);

341 
OCR5A
 = 
o¸
;

342 
timî5_toggÀ_cou¡
 = 
toggÀ_cou¡
;

343 
	`bôWrôe
(
TIMSK5
, 
OCIE5A
, 1);

349 
	}
}

352 
	$noT⁄e
(
uöt8_t
 
_pö
)

354 
öt8_t
 
_timî
 = -1;

356 
i
 = 0; i < 
AVAILABLE_TONE_PINS
; i++) {

357 i‡(
t⁄e_pös
[
i
] =
_pö
) {

358 
_timî
 = 
	`pgm_ªad_byã
(
t⁄e_pö_to_timî_PGM
 + 
i
);

359 
t⁄e_pös
[
i
] = 255;

363 
_timî
)

365 #i‡
	`deföed
(
__AVR_ATmega8__
)

367 
	`bôWrôe
(
TIMSK1
, 
OCIE1A
, 0);

370 
	`bôWrôe
(
TIMSK2
, 
OCIE2A
, 0);

375 
TIMSK0
 = 0;

378 
TIMSK1
 = 0;

381 
TIMSK2
 = 0;

385 #i‡
	`deföed
(
__AVR_ATmega1280__
)

387 
TIMSK3
 = 0;

390 
TIMSK4
 = 0;

393 
TIMSK5
 = 0;

398 
	`digôÆWrôe
(
_pö
, 0);

399 
	}
}

402 #i‡!
deföed
(
__AVR_ATmega8__
)

403 
	$ISR
(
TIMER0_COMPA_ve˘
)

405 i‡(
timî0_toggÀ_cou¡
 != 0)

408 *
timî0_pö_p‹t
 ^
timî0_pö_mask
;

410 i‡(
timî0_toggÀ_cou¡
 > 0)

411 
timî0_toggÀ_cou¡
--;

415 
TIMSK0
 = 0;

416 *
timî0_pö_p‹t
 &~(
timî0_pö_mask
);

418 
	}
}

422 
	$ISR
(
TIMER1_COMPA_ve˘
)

424 i‡(
timî1_toggÀ_cou¡
 != 0)

427 *
timî1_pö_p‹t
 ^
timî1_pö_mask
;

429 i‡(
timî1_toggÀ_cou¡
 > 0)

430 
timî1_toggÀ_cou¡
--;

434 
TIMSK1
 = 0;

435 *
timî1_pö_p‹t
 &~(
timî1_pö_mask
);

437 
	}
}

441 
	$ISR
(
TIMER2_COMPA_ve˘
)

444 i‡(
timî2_toggÀ_cou¡
 != 0)

447 *
timî2_pö_p‹t
 ^
timî2_pö_mask
;

449 i‡(
timî2_toggÀ_cou¡
 > 0)

450 
timî2_toggÀ_cou¡
--;

454 
TIMSK2
 = 0;

455 *
timî2_pö_p‹t
 &~(
timî2_pö_mask
);

457 
	}
}

464 
	$ISR
(
TIMER3_COMPA_ve˘
)

466 i‡(
timî3_toggÀ_cou¡
 != 0)

469 *
timî3_pö_p‹t
 ^
timî3_pö_mask
;

471 i‡(
timî3_toggÀ_cou¡
 > 0)

472 
timî3_toggÀ_cou¡
--;

476 
TIMSK3
 = 0;

477 *
timî3_pö_p‹t
 &~(
timî3_pö_mask
);

479 
	}
}

481 
	$ISR
(
TIMER4_COMPA_ve˘
)

483 i‡(
timî4_toggÀ_cou¡
 != 0)

486 *
timî4_pö_p‹t
 ^
timî4_pö_mask
;

488 i‡(
timî4_toggÀ_cou¡
 > 0)

489 
timî4_toggÀ_cou¡
--;

493 
TIMSK4
 = 0;

494 *
timî4_pö_p‹t
 &~(
timî4_pö_mask
);

496 
	}
}

498 
	$ISR
(
TIMER5_COMPA_ve˘
)

500 i‡(
timî5_toggÀ_cou¡
 != 0)

503 *
timî5_pö_p‹t
 ^
timî5_pö_mask
;

505 i‡(
timî5_toggÀ_cou¡
 > 0)

506 
timî5_toggÀ_cou¡
--;

510 
TIMSK5
 = 0;

511 *
timî5_pö_p‹t
 &~(
timî5_pö_mask
);

513 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/WCharacter.h

20 #i‚de‡
Ch¨a˘î_h


21 
	#Ch¨a˘î_h


	)

23 
	~<˘y≥.h
>

26 
ölöe
 
boﬁón
 
	$isAÕhaNumîic
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

27 
ölöe
 
boﬁón
 
	$isAÕha
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
ölöe
 
boﬁón
 
	$isAscii
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

29 
ölöe
 
boﬁón
 
	$isWhôe•a˚
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

30 
ölöe
 
boﬁón
 
	$isC⁄åﬁ
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

31 
ölöe
 
boﬁón
 
	$isDigô
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

32 
ölöe
 
boﬁón
 
	$isGøph
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

33 
ölöe
 
boﬁón
 
	$isLowîCa£
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

34 
ölöe
 
boﬁón
 
	$isPröèbÀ
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

35 
ölöe
 
boﬁón
 
	$isPun˘
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

36 
ölöe
 
boﬁón
 
	$isS∑˚
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

37 
ölöe
 
boﬁón
 
	$isUµîCa£
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

38 
ölöe
 
boﬁón
 
	$isHexadecimÆDigô
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

39 
ölöe
 
	$toAscii
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

40 
ölöe
 
	$toLowîCa£
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

41 
ölöe
 
	$toUµîCa£
(
c
)
	`__©åibuã__
((
Æways_ölöe
));

46 
ölöe
 
boﬁón
 
	$isAÕhaNumîic
(
c
)

48  ( 
	`iß um
(
c
Ë=0 ? 
Ál£
 : 
åue
);

49 
	}
}

54 
ölöe
 
boﬁón
 
	$isAÕha
(
c
)

56  ( 
	`ißÕha
(
c
Ë=0 ? 
Ál£
 : 
åue
);

57 
	}
}

62 
ölöe
 
boﬁón
 
	$isAscii
(
c
)

64  ( 
	`ißscii
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

65 
	}
}

69 
ölöe
 
boﬁón
 
	$isWhôe•a˚
(
c
)

71  ( 
	`isbœnk
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

72 
	}
}

76 
ölöe
 
boﬁón
 
	$isC⁄åﬁ
(
c
)

78  ( 
	`is˙ål
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

79 
	}
}

83 
ölöe
 
boﬁón
 
	$isDigô
(
c
)

85  ( 
	`isdigô
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

86 
	}
}

90 
ölöe
 
boﬁón
 
	$isGøph
(
c
)

92  ( 
	`isgøph
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

93 
	}
}

97 
ölöe
 
boﬁón
 
	$isLowîCa£
(
c
)

99  (
	`i¶owî
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

100 
	}
}

104 
ölöe
 
boﬁón
 
	$isPröèbÀ
(
c
)

106  ( 
	`i•röt
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

107 
	}
}

112 
ölöe
 
boﬁón
 
	$isPun˘
(
c
)

114  ( 
	`i•un˘
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

115 
	}
}

121 
ölöe
 
boﬁón
 
	$isS∑˚
(
c
)

123  ( 
	`is•a˚
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

124 
	}
}

128 
ölöe
 
boﬁón
 
	$isUµîCa£
(
c
)

130  ( 
	`isuµî
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

131 
	}
}

136 
ölöe
 
boﬁón
 
	$isHexadecimÆDigô
(
c
)

138  ( 
	`isxdigô
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

139 
	}
}

144 
ölöe
 
	$toAscii
(
c
)

146  
	`tﬂscii
 (
c
);

147 
	}
}

156 
ölöe
 
	$toLowîCa£
(
c
)

158  
	`tﬁowî
 (
c
);

159 
	}
}

163 
ölöe
 
	$toUµîCa£
(
c
)

165  
	`touµî
 (
c
);

166 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/WConstants.h

1 
	~"wúög.h
"

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/WInterrupts.c

26 
	~<öây≥s.h
>

27 
	~<avr/io.h
>

28 
	~<avr/öãºu±.h
>

29 
	~<avr/pgm•a˚.h
>

30 
	~<°dio.h
>

32 
	~"WC⁄°™ts.h
"

33 
	~"wúög_¥iv©e.h
"

35 vﬁ©ûê
voidFuncPå
 
	götFunc
[
EXTERNAL_NUM_INTERRUPTS
];

38 
©èchI¡îru±
(
uöt8_t
 
öãºu±Num
, (*
u£rFunc
)(), 
mode
)

40 if(
öãºu±Num
 < 
EXTERNAL_NUM_INTERRUPTS
)

42 
ötFunc
[
öãºu±Num
] = 
u£rFunc
;

45 
EICRA
 &~(
B00000011
 << (
öãºu±Num
 * 2));

48 
EICRA
 |(
mode
 << (
öãºu±Num
 * 2));

51 
EIMSK
 |(1 << 
öãºu±Num
);

53 
	}
}

55 
	$dëachI¡îru±
(
uöt8_t
 
öãºu±Num
)

57 if(
öãºu±Num
 < 
EXTERNAL_NUM_INTERRUPTS
)

60 
EIMSK
 &~(1 << 
öãºu±Num
);

62 
ötFunc
[
öãºu±Num
] = 0;

64 
	}
}

66 
	$ISR
(
INT0_ve˘
) {

67 if(
ötFunc
[
EXTERNAL_INT_0
])

68 
ötFunc
[
EXTERNAL_INT_0
]();

69 
	}
}

71 
	$ISR
(
INT1_ve˘
) {

72 if(
ötFunc
[
EXTERNAL_INT_1
])

73 
ötFunc
[
EXTERNAL_INT_1
]();

74 
	}
}

76 
	$ISR
(
INT2_ve˘
) {

77 if(
ötFunc
[
EXTERNAL_INT_2
])

78 
ötFunc
[
EXTERNAL_INT_2
]();

79 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/WMath.cpp

27 
	~"°dlib.h
"

30 
	$øndomSìd
(
£ed
)

32 i‡(
£ed
 != 0){

33 
	`§™dom
(
£ed
);

35 
	}
}

37 
	$øndom
(
howbig
)

39 i‡(
howbig
 == 0) {

42  
	`øndom
(Ë% 
howbig
;

43 
	}
}

45 
	$øndom
(
howsmÆl
, 
howbig
)

47 i‡(
howsmÆl
 >
howbig
) {

48  
howsmÆl
;

50 
diff
 = 
howbig
 - 
howsmÆl
;

51  
	`øndom
(
diff
Ë+ 
howsmÆl
;

52 
	}
}

54 
	$m≠
(
x
, 
ö_mö
, 
ö_max
, 
out_mö
, 
out_max
)

56  (
x
 - 
ö_mö
Ë* (
out_max
 - 
out_mö
Ë/ (
ö_max
 - in_min) + out_min;

57 
	}
}

59 
	$makeW‹d
(
w
Ë{  w; 
	}
}

60 
	$makeW‹d
(
h
, 
l
Ë{  (h << 8Ë|Ü; 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/WProgram.h

1 #i‚de‡
WProgøm_h


2 
	#WProgøm_h


	)

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<m©h.h
>

8 
	~<avr/öãºu±.h
>

10 
	~"wúög.h
"

12 #ifde‡
__˝lu•lus


13 
	~"WCh¨a˘î.h
"

14 
	~"WSåög.h
"

15 
	~"H¨dw¨eSîül.h
"

17 
uöt16_t
 
makeW‹d
(uöt16_à
w
);

18 
uöt16_t
 
makeW‹d
(
byã
 
h
, byã 
l
);

20 
	#w‹d
(...Ë
	`makeW‹d
(
__VA_ARGS__
)

	)

22 
pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
 = 1000000L);

24 
t⁄e
(
uöt8_t
 
_pö
, 
‰equícy
, 
duøti⁄
 = 0);

25 
noT⁄e
(
uöt8_t
 
_pö
);

28 
øndom
();

29 
øndom
(, );

30 
øndomSìd
();

31 
m≠
(, , , , );

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/WString.cpp

20 
	~<°dlib.h
>

21 
	~"WProgøm.h
"

22 
	~"WSåög.h
"

25 
	gSåög
::
	$Såög
–c⁄° *
vÆue
 )

27 i‡–
vÆue
 =
NULL
 )

28 
vÆue
 = "";

29 
	`gëBuf„r
–
_Àngth
 = 
	`°æí
–
vÆue
 ) );

30 i‡–
_buf„r
 !
NULL
 )

31 
	`°r˝y
–
_buf„r
, 
vÆue
 );

32 
	}
}

34 
	gSåög
::
	$Såög
–c⁄° 
Såög
 &
vÆue
 )

36 
	`gëBuf„r
–
_Àngth
 = 
vÆue
._length );

37 i‡–
_buf„r
 !
NULL
 )

38 
	`°r˝y
–
_buf„r
, 
vÆue
._buffer );

39 
	}
}

41 
	gSåög
::
	$Såög
–c⁄° 
vÆue
 )

43 
_Àngth
 = 1;

44 
	`gëBuf„r
(1);

45 i‡–
_buf„r
 !
NULL
 ) {

46 
_buf„r
[0] = 
vÆue
;

47 
_buf„r
[1] = 0;

49 
	}
}

51 
	gSåög
::
	$Såög
–c⁄° 
vÆue
 )

53 
_Àngth
 = 1;

54 
	`gëBuf„r
(1);

55 i‡–
_buf„r
 !
NULL
) {

56 
_buf„r
[0] = 
vÆue
;

57 
_buf„r
[1] = 0;

59 
	}
}

61 
	gSåög
::
	$Såög
–c⁄° 
vÆue
, c⁄° 
ba£
 )

63 
buf
[33];

64 
	`ôﬂ
((sig√d )
vÆue
, 
buf
, 
ba£
);

65 
	`gëBuf„r
–
_Àngth
 = 
	`°æí
(
buf
) );

66 i‡–
_buf„r
 !
NULL
 )

67 
	`°r˝y
–
_buf„r
, 
buf
 );

68 
	}
}

70 
	gSåög
::
	$Såög
–c⁄° 
vÆue
, c⁄° 
ba£
 )

72 
buf
[33];

73 
	`u…ﬂ
(()
vÆue
, 
buf
, 
ba£
);

74 
	`gëBuf„r
–
_Àngth
 = 
	`°æí
(
buf
) );

75 i‡–
_buf„r
 !
NULL
 )

76 
	`°r˝y
–
_buf„r
, 
buf
 );

77 
	}
}

79 
	gSåög
::
	$Såög
–c⁄° 
vÆue
, c⁄° 
ba£
 )

81 
buf
[33];

82 
	`…ﬂ
(
vÆue
, 
buf
, 
ba£
);

83 
	`gëBuf„r
–
_Àngth
 = 
	`°æí
(
buf
) );

84 i‡–
_buf„r
 !
NULL
 )

85 
	`°r˝y
–
_buf„r
, 
buf
 );

86 
	}
}

88 
	gSåög
::
	$Såög
–c⁄° 
vÆue
, c⁄° 
ba£
 )

90 
buf
[33];

91 
	`u…ﬂ
(
vÆue
, 
buf
, 10);

92 
	`gëBuf„r
–
_Àngth
 = 
	`°æí
(
buf
) );

93 i‡–
_buf„r
 !
NULL
 )

94 
	`°r˝y
–
_buf„r
, 
buf
 );

95 
	}
}

97 
	gSåög
::
	$ch¨At
–
loc
 ) const

99  
›î©‹
[]–
loc
 );

100 
	}
}

102 
	gSåög
::
	$£tCh¨At
–
loc
, c⁄° 
aCh¨
 )

104 if(
_buf„r
 =
NULL
) ;

105 if(
_Àngth
 > 
loc
) {

106 
_buf„r
[
loc
] = 
aCh¨
;

108 
	}
}

110 
	gSåög
::
	$com∑ªTo
–c⁄° 
Såög
 &
s2
 ) const

112  
	`°rcmp
–
_buf„r
, 
s2
._buffer );

113 
	}
}

115 c⁄° 
	gSåög
 & Såög::
	$c⁄ˇt
–c⁄° 
Såög
 &
s2
 )

117  (*
this
Ë+
s2
;

118 
	}
}

120 c⁄° 
	gSåög
 & Såög::
›î©‹
=–c⁄° 
Såög
 &
rhs
 )

122 i‡–
this
 =&
rhs
 )

123  *
this
;

125 i‡–
	grhs
.
	g_Àngth
 > _length )

127 
‰ì
(
_buf„r
);

128 
gëBuf„r
–
rhs
.
_Àngth
 );

131 i‡–
	g_buf„r
 !
NULL
 ) {

132 
_Àngth
 = 
rhs
._length;

133 
°r˝y
–
_buf„r
, 
rhs
._buffer );

135  *
	gthis
;

148 c⁄° 
	gSåög
 & Såög::
›î©‹
+=–c⁄° 
Såög
 &
Ÿhî
 )

150 
_Àngth
 +
Ÿhî
._length;

151 i‡–
	g_Àngth
 > 
	g_ˇ∑côy
 )

153 *
	gãmp
 = (*)
ªÆloc
(
_buf„r
, 
_Àngth
 + 1);

154 i‡–
	gãmp
 !
NULL
 ) {

155 
_buf„r
 = 
ãmp
;

156 
	g_ˇ∑côy
 = 
_Àngth
;

158 
	g_Àngth
 -
Ÿhî
.
_Àngth
;

159  *
	gthis
;

162 
°rˇt
–
_buf„r
, 
Ÿhî
._buffer );

163  *
	gthis
;

167 
	gSåög
::
›î©‹
==–c⁄° 
Såög
 &
rhs
 ) const

169  ( 
_Àngth
 =
rhs
._Àngth && 
°rcmp
–
_buf„r
,Ñhs._buffer ) == 0 );

172 
	gSåög
::
›î©‹
!=–c⁄° 
Såög
 &
rhs
 ) const

174  ( 
_Àngth
 !
rhs
.
Àngth
(Ë|| 
°rcmp
–
_buf„r
,Ñhs._buffer ) != 0 );

177 
	gSåög
::
›î©‹
<–c⁄° 
Såög
 &
rhs
 ) const

179  
°rcmp
–
_buf„r
, 
rhs
._buffer ) < 0;

182 
	gSåög
::
›î©‹
>–c⁄° 
Såög
 &
rhs
 ) const

184  
°rcmp
–
_buf„r
, 
rhs
._buffer ) > 0;

187 
	gSåög
::
›î©‹
<=–c⁄° 
Såög
 &
rhs
 ) const

189  
°rcmp
–
_buf„r
, 
rhs
._buffer ) <= 0;

192 
	gSåög
::
›î©‹
>=–c⁄° 
Såög
 & 
rhs
 ) const

194  
°rcmp
–
_buf„r
, 
rhs
._buffer ) >= 0;

197 & 
	gSåög
::
›î©‹
[]–
ödex
 )

199 
dummy_wrôabÀ_ch¨
;

200 i‡(
	gödex
 >
_Àngth
 || !
_buf„r
) {

201 
dummy_wrôabÀ_ch¨
 = 0;

202  
	gdummy_wrôabÀ_ch¨
;

204  
	g_buf„r
[ 
ödex
 ];

207 
	gSåög
::
›î©‹
[]–
ödex
 ) const

210  
_buf„r
[ 
ödex
 ];

213 
boﬁón
 
	gSåög
::
	$ídsWôh
–c⁄° 
Såög
 &
s2
 ) const

215 i‡–
_Àngth
 < 
s2
._length )

218  
	`°rcmp
–&
_buf„r
[ 
_Àngth
 - 
s2
._length], s2._buffer ) == 0;

219 
	}
}

221 
boﬁón
 
	gSåög
::
	$equÆs
–c⁄° 
Såög
 &
s2
 ) const

223  ( 
_Àngth
 =
s2
._Àngth && 
	`°rcmp
–
_buf„r
,s2._buffer ) == 0 );

224 
	}
}

226 
boﬁón
 
	gSåög
::
	$equÆsIgn‹eCa£
–c⁄° 
Såög
 &
s2
 ) const

228 i‡–
this
 =&
s2
 )

229  
åue
;

230 i‡–
_Àngth
 !
s2
._length )

231  
Ál£
;

233  
	`°rcmp
(
	`toLowîCa£
().
_buf„r
, 
s2
.toLowerCase()._buffer) == 0;

234 
	}
}

236 
Såög
 
	gSåög
::
	$ª∂a˚
–
födCh¨
, 
ª∂a˚Ch¨
 )

238 i‡–
_buf„r
 =
NULL
 )  *
this
;

239 
Såög
 
theRëu∫
 = 
_buf„r
;

240 * 
ãmp
 = 
theRëu∫
.
_buf„r
;

241  (
ãmp
 = 
	`°rchr
–ãmp, 
födCh¨
 )) != 0 )

242 *
ãmp
 = 
ª∂a˚Ch¨
;

244  
theRëu∫
;

245 
	}
}

247 
Såög
 
	gSåög
::
	$ª∂a˚
–c⁄° 
Såög
& 
m©ch
, c⁄° Såög& 
ª∂a˚
 )

249 i‡–
_buf„r
 =
NULL
 )  *
this
;

250 
Såög
 
ãmp
 = 
_buf„r
, 
√wSåög
;

252 
loc
;

253  (
loc
 = 
ãmp
.
	`ödexOf
–
m©ch
 )) != -1 )

255 
√wSåög
 +
ãmp
.
	`sub°rög
–0, 
loc
 );

256 
√wSåög
 +
ª∂a˚
;

257 
ãmp
 =Åemp.
	`sub°rög
–
loc
 + 
m©ch
.
_Àngth
 );

259 
√wSåög
 +
ãmp
;

260  
√wSåög
;

261 
	}
}

263 
	gSåög
::
	$ödexOf
–
ãmp
 ) const

265  
	`ödexOf
–
ãmp
, 0 );

266 
	}
}

268 
	gSåög
::
	$ödexOf
–
ch
, 
‰omIndex
 ) const

270 i‡–
‰omIndex
 >
_Àngth
 )

273 c⁄° * 
ãmp
 = 
	`°rchr
–&
_buf„r
[
‰omIndex
], 
ch
 );

274 i‡–
ãmp
 =
NULL
 )

277  
ãmp
 - 
_buf„r
;

278 
	}
}

280 
	gSåög
::
	$ödexOf
–c⁄° 
Såög
 &
s2
 ) const

282  
	`ödexOf
–
s2
, 0 );

283 
	}
}

285 
	gSåög
::
	$ödexOf
–c⁄° 
Såög
 &
s2
, 
‰omIndex
 ) const

287 i‡–
‰omIndex
 >
_Àngth
 )

290 c⁄° *
theFöd
 = 
	`°r°r
–&
_buf„r
[ 
‰omIndex
 ], 
s2
._buffer );

292 i‡–
theFöd
 =
NULL
 )

295  
theFöd
 - 
_buf„r
;

296 
	}
}

298 
	gSåög
::
	$œ°IndexOf
–
theCh¨
 ) const

300  
	`œ°IndexOf
–
theCh¨
, 
_Àngth
 - 1 );

301 
	}
}

303 
	gSåög
::
	$œ°IndexOf
–
ch
, 
‰omIndex
 ) const

305 i‡–
‰omIndex
 >
_Àngth
 )

308 
ãmpch¨
 = 
_buf„r
[
‰omIndex
 + 1];

309 
_buf„r
[
‰omIndex
 + 1] = '\0';

310 * 
ãmp
 = 
	`°ºchr
–
_buf„r
, 
ch
 );

311 
_buf„r
[
‰omIndex
 + 1] = 
ãmpch¨
;

313 i‡–
ãmp
 =
NULL
 )

316  
ãmp
 - 
_buf„r
;

317 
	}
}

319 
	gSåög
::
	$œ°IndexOf
–c⁄° 
Såög
 &
s2
 ) const

321  
	`œ°IndexOf
–
s2
, 
_Àngth
 - s2._length );

322 
	}
}

324 
	gSåög
::
	$œ°IndexOf
–c⁄° 
Såög
 &
s2
, 
‰omIndex
 ) const

327 i‡–
s2
.
_Àngth
 =0 || s2._Àngth - 1 > 
‰omIndex
 || fromIndex >= _length )

331 
ãmp
 = 
s2
[ 0 ];

333  
i
 = 
‰omIndex
; i >= 0; i-- )

335 i‡–
_buf„r
[ 
i
 ] =
ãmp
 && (*
this
).
	`sub°rög
–i, i + 
s2
.
_Àngth
 ).
	`equÆs
( s2 ) )

336  
i
;

339 
	}
}

341 
boﬁón
 
	gSåög
::
	$°¨tsWôh
–c⁄° 
Såög
 &
s2
 ) const

343 i‡–
_Àngth
 < 
s2
._length )

346  
	`°¨tsWôh
–
s2
, 0 );

347 
	}
}

349 
boﬁón
 
	gSåög
::
	$°¨tsWôh
–c⁄° 
Såög
 &
s2
, 
off£t
 ) const

351 i‡–
off£t
 > 
_Àngth
 - 
s2
._length )

354  
	`°∫cmp
–&
_buf„r
[
off£t
], 
s2
._buf„r, s2.
_Àngth
 ) == 0;

355 
	}
}

357 
Såög
 
	gSåög
::
	$sub°rög
–
À·
 ) const

359  
	`sub°rög
–
À·
, 
_Àngth
 );

360 
	}
}

362 
Såög
 
	gSåög
::
	$sub°rög
–
À·
, 
right
 ) const

364 i‡–
À·
 > 
right
 )

366 
ãmp
 = 
right
;

367 
right
 = 
À·
;

368 
À·
 = 
ãmp
;

371 i‡–
right
 > 
_Àngth
 )

373 
right
 = 
_Àngth
;

376 
ãmp
 = 
_buf„r
[ 
right
 ];

377 
_buf„r
[ 
right
 ] = '\0';

378 
Såög
 
outPut
 = ( 
_buf„r
 + 
À·
 );

379 
_buf„r
[ 
right
 ] = 
ãmp
;

380  
outPut
;

381 
	}
}

383 
Såög
 
	gSåög
::
	$toLowîCa£
() const

385 
Såög
 
ãmp
 = 
_buf„r
;

387  
i
 = 0; i < 
_Àngth
; i++ )

388 
ãmp
.
_buf„r
[ 
i
 ] = ()
	`tﬁowî
(Åemp._buffer[ i ] );

389  
ãmp
;

390 
	}
}

392 
Såög
 
	gSåög
::
	$toUµîCa£
() const

394 
Såög
 
ãmp
 = 
_buf„r
;

396  
i
 = 0; i < 
_Àngth
; i++ )

397 
ãmp
.
_buf„r
[ 
i
 ] = ()
	`touµî
(Åemp._buffer[ i ] );

398  
ãmp
;

399 
	}
}

401 
Såög
 
	gSåög
::
	$åim
() const

403 i‡–
_buf„r
 =
NULL
 )  *
this
;

404 
Såög
 
ãmp
 = 
_buf„r
;

405 
i
,
j
;

407  
i
 = 0; i < 
_Àngth
; i++ )

409 i‡–!
	`is•a˚
(
_buf„r
[
i
]) )

413  
j
 = 
ãmp
.
_Àngth
 - 1; j > 
i
; j-- )

415 i‡–!
	`is•a˚
(
_buf„r
[
j
]) )

419  
ãmp
.
	`sub°rög
–
i
, 
j
 + 1);

420 
	}
}

422 
	gSåög
::
	$gëByãs
(*
buf
, 
bufsize
)

424 i‡(!
bufsize
 || !
buf
) ;

425 
Àn
 = 
bufsize
 - 1;

426 i‡(
Àn
 > 
_Àngth
)Üen = _length;

427 
	`°∫˝y
((*)
buf
, 
_buf„r
, 
Àn
);

428 
buf
[
Àn
] = 0;

429 
	}
}

431 
	gSåög
::
	$toCh¨Aºay
(*
buf
, 
bufsize
)

433 i‡(!
bufsize
 || !
buf
) ;

434 
Àn
 = 
bufsize
 - 1;

435 i‡(
Àn
 > 
_Àngth
)Üen = _length;

436 
	`°∫˝y
(
buf
, 
_buf„r
, 
Àn
);

437 
buf
[
Àn
] = 0;

438 
	}
}

441 
	gSåög
::
	$toI¡
() {

442  
	`©ﬁ
(
_buf„r
);

443 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/WString.h

20 #i‚de‡
Såög_h


21 
	#Såög_h


	)

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<˘y≥.h
>

28 ˛as†
	cSåög


30 
	mpublic
:

32 
Såög
–c⁄° *
vÆue
 = "" );

33 
Såög
–c⁄° Såög &
vÆue
 );

34 
Såög
( const );

35 
Såög
( const );

36 
Såög
–c⁄° , c⁄° 
ba£
=10);

37 
Såög
–c⁄° , c⁄° 
ba£
=10 );

38 
Såög
–c⁄° , c⁄° 
ba£
=10 );

39 
Såög
–c⁄° , c⁄° 
ba£
=10 );

40 ~
	$Såög
(Ë{ 
	`‰ì
(
_buf„r
); 
_Àngth
 = 
_ˇ∑côy
 = 0;}

43 c⁄° 
Såög
 & 
›î©‹
 = ( c⁄° Såög &
rhs
 );

44 c⁄° 
Såög
 & 
›î©‹
 +=–c⁄° Såög &
rhs
 );

46 
›î©‹
 ==–c⁄° 
Såög
 &
rhs
 ) const;

47 
›î©‹
 !=–c⁄° 
Såög
 &
rhs
 ) const;

48 
›î©‹
 < ( c⁄° 
Såög
 &
rhs
 ) const;

49 
›î©‹
 > ( c⁄° 
Såög
 &
rhs
 ) const;

50 
›î©‹
 <=–c⁄° 
Såög
 &
rhs
 ) const;

51 
›î©‹
 >=–c⁄° 
Såög
 &
rhs
 ) const;

52 
›î©‹
 []–
ödex
 ) const;

53 & 
›î©‹
 []–
ödex
 );

57 
	$ch¨At
–
ödex
 ) const;

58 
	$com∑ªTo
–c⁄° 
Såög
 &
™ŸhîSåög
 ) const;

59 
	$ídsWôh
–c⁄° 
Såög
 &
suffix
 ) const;

60 
	$equÆs
–c⁄° 
Såög
 &
™Obje˘
 ) const;

61 
	$equÆsIgn‹eCa£
–c⁄° 
Såög
 &
™ŸhîSåög
 ) const;

62 
	$ödexOf
–
ch
 ) const;

63 
	$ödexOf
–
ch
, 
‰omIndex
 ) const;

64 
	$ödexOf
–c⁄° 
Såög
 &
°r
 ) const;

65 
	$ödexOf
–c⁄° 
Såög
 &
°r
, 
‰omIndex
 ) const;

66 
	$œ°IndexOf
–
ch
 ) const;

67 
	$œ°IndexOf
–
ch
, 
‰omIndex
 ) const;

68 
	$œ°IndexOf
–c⁄° 
Såög
 &
°r
 ) const;

69 
	$œ°IndexOf
–c⁄° 
Såög
 &
°r
, 
‰omIndex
 ) const;

70 c⁄° 
	$Àngth
–Ëc⁄° {  
_Àngth
; 
	}
}

71 
£tCh¨At
(
ödex
, c⁄° 
ch
);

72 
	$°¨tsWôh
–c⁄° 
Såög
 &
¥efix
 ) const;

73 
	$°¨tsWôh
–c⁄° 
Såög
 &
¥efix
, 
toff£t
 ) const;

74 
Såög
 
	$sub°rög
–
begöIndex
 ) const;

75 
Såög
 
	$sub°rög
–
begöIndex
, 
ídIndex
 ) const;

76 
Såög
 
	$toLowîCa£
( ) const;

77 
Såög
 
	$toUµîCa£
( ) const;

78 
Såög
 
	$åim
( ) const;

79 
	`gëByãs
(*
buf
, 
bufsize
);

80 
	`toCh¨Aºay
(*
buf
, 
bufsize
);

81 
	`toI¡
( );

82 c⁄° 
Såög
& 
	`c⁄ˇt
–c⁄° Såög &
°r
 );

83 
Såög
 
	`ª∂a˚
–
ﬁdCh¨
, 
√wCh¨
 );

84 
Såög
 
	`ª∂a˚
–c⁄° Såög& 
m©ch
, c⁄° Såög& 
ª∂a˚
 );

85 
‰õnd
 
Såög
 
›î©‹
 + ( Såög 
lhs
, c⁄° Såög &
rhs
 );

87 
¥Ÿe˘ed
:

88 *
_buf„r
;

89 
_ˇ∑côy
;

90 
_Àngth
;

92 
	`gëBuf„r
(
maxSåLí
);

94 
¥iv©e
:

96 
	}
};

99 
ölöe
 
	gSåög
::
	$gëBuf„r
(
maxSåLí
)

101 
_ˇ∑côy
 = 
maxSåLí
;

102 
_buf„r
 = (*Ë
	`mÆloc
(
_ˇ∑côy
 + 1);

103 i‡(
_buf„r
 =
NULL
Ë
_Àngth
 = 
_ˇ∑côy
 = 0;

104 
	}
}

106 
ölöe
 
Såög
 
	g›î©‹
+–Såög 
	glhs
, c⁄° 
	gSåög
 &
	grhs
 )

108  
	glhs
 +
rhs
;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/binary.h

1 #i‚de‡
Bö¨y_h


2 
	#Bö¨y_h


	)

4 
	#B0
 0

	)

5 
	#B00
 0

	)

6 
	#B000
 0

	)

7 
	#B0000
 0

	)

8 
	#B00000
 0

	)

9 
	#B000000
 0

	)

10 
	#B0000000
 0

	)

11 
	#B00000000
 0

	)

12 
	#B1
 1

	)

13 
	#B01
 1

	)

14 
	#B001
 1

	)

15 
	#B0001
 1

	)

16 
	#B00001
 1

	)

17 
	#B000001
 1

	)

18 
	#B0000001
 1

	)

19 
	#B00000001
 1

	)

20 
	#B10
 2

	)

21 
	#B010
 2

	)

22 
	#B0010
 2

	)

23 
	#B00010
 2

	)

24 
	#B000010
 2

	)

25 
	#B0000010
 2

	)

26 
	#B00000010
 2

	)

27 
	#B11
 3

	)

28 
	#B011
 3

	)

29 
	#B0011
 3

	)

30 
	#B00011
 3

	)

31 
	#B000011
 3

	)

32 
	#B0000011
 3

	)

33 
	#B00000011
 3

	)

34 
	#B100
 4

	)

35 
	#B0100
 4

	)

36 
	#B00100
 4

	)

37 
	#B000100
 4

	)

38 
	#B0000100
 4

	)

39 
	#B00000100
 4

	)

40 
	#B101
 5

	)

41 
	#B0101
 5

	)

42 
	#B00101
 5

	)

43 
	#B000101
 5

	)

44 
	#B0000101
 5

	)

45 
	#B00000101
 5

	)

46 
	#B110
 6

	)

47 
	#B0110
 6

	)

48 
	#B00110
 6

	)

49 
	#B000110
 6

	)

50 
	#B0000110
 6

	)

51 
	#B00000110
 6

	)

52 
	#B111
 7

	)

53 
	#B0111
 7

	)

54 
	#B00111
 7

	)

55 
	#B000111
 7

	)

56 
	#B0000111
 7

	)

57 
	#B00000111
 7

	)

58 
	#B1000
 8

	)

59 
	#B01000
 8

	)

60 
	#B001000
 8

	)

61 
	#B0001000
 8

	)

62 
	#B00001000
 8

	)

63 
	#B1001
 9

	)

64 
	#B01001
 9

	)

65 
	#B001001
 9

	)

66 
	#B0001001
 9

	)

67 
	#B00001001
 9

	)

68 
	#B1010
 10

	)

69 
	#B01010
 10

	)

70 
	#B001010
 10

	)

71 
	#B0001010
 10

	)

72 
	#B00001010
 10

	)

73 
	#B1011
 11

	)

74 
	#B01011
 11

	)

75 
	#B001011
 11

	)

76 
	#B0001011
 11

	)

77 
	#B00001011
 11

	)

78 
	#B1100
 12

	)

79 
	#B01100
 12

	)

80 
	#B001100
 12

	)

81 
	#B0001100
 12

	)

82 
	#B00001100
 12

	)

83 
	#B1101
 13

	)

84 
	#B01101
 13

	)

85 
	#B001101
 13

	)

86 
	#B0001101
 13

	)

87 
	#B00001101
 13

	)

88 
	#B1110
 14

	)

89 
	#B01110
 14

	)

90 
	#B001110
 14

	)

91 
	#B0001110
 14

	)

92 
	#B00001110
 14

	)

93 
	#B1111
 15

	)

94 
	#B01111
 15

	)

95 
	#B001111
 15

	)

96 
	#B0001111
 15

	)

97 
	#B00001111
 15

	)

98 
	#B10000
 16

	)

99 
	#B010000
 16

	)

100 
	#B0010000
 16

	)

101 
	#B00010000
 16

	)

102 
	#B10001
 17

	)

103 
	#B010001
 17

	)

104 
	#B0010001
 17

	)

105 
	#B00010001
 17

	)

106 
	#B10010
 18

	)

107 
	#B010010
 18

	)

108 
	#B0010010
 18

	)

109 
	#B00010010
 18

	)

110 
	#B10011
 19

	)

111 
	#B010011
 19

	)

112 
	#B0010011
 19

	)

113 
	#B00010011
 19

	)

114 
	#B10100
 20

	)

115 
	#B010100
 20

	)

116 
	#B0010100
 20

	)

117 
	#B00010100
 20

	)

118 
	#B10101
 21

	)

119 
	#B010101
 21

	)

120 
	#B0010101
 21

	)

121 
	#B00010101
 21

	)

122 
	#B10110
 22

	)

123 
	#B010110
 22

	)

124 
	#B0010110
 22

	)

125 
	#B00010110
 22

	)

126 
	#B10111
 23

	)

127 
	#B010111
 23

	)

128 
	#B0010111
 23

	)

129 
	#B00010111
 23

	)

130 
	#B11000
 24

	)

131 
	#B011000
 24

	)

132 
	#B0011000
 24

	)

133 
	#B00011000
 24

	)

134 
	#B11001
 25

	)

135 
	#B011001
 25

	)

136 
	#B0011001
 25

	)

137 
	#B00011001
 25

	)

138 
	#B11010
 26

	)

139 
	#B011010
 26

	)

140 
	#B0011010
 26

	)

141 
	#B00011010
 26

	)

142 
	#B11011
 27

	)

143 
	#B011011
 27

	)

144 
	#B0011011
 27

	)

145 
	#B00011011
 27

	)

146 
	#B11100
 28

	)

147 
	#B011100
 28

	)

148 
	#B0011100
 28

	)

149 
	#B00011100
 28

	)

150 
	#B11101
 29

	)

151 
	#B011101
 29

	)

152 
	#B0011101
 29

	)

153 
	#B00011101
 29

	)

154 
	#B11110
 30

	)

155 
	#B011110
 30

	)

156 
	#B0011110
 30

	)

157 
	#B00011110
 30

	)

158 
	#B11111
 31

	)

159 
	#B011111
 31

	)

160 
	#B0011111
 31

	)

161 
	#B00011111
 31

	)

162 
	#B100000
 32

	)

163 
	#B0100000
 32

	)

164 
	#B00100000
 32

	)

165 
	#B100001
 33

	)

166 
	#B0100001
 33

	)

167 
	#B00100001
 33

	)

168 
	#B100010
 34

	)

169 
	#B0100010
 34

	)

170 
	#B00100010
 34

	)

171 
	#B100011
 35

	)

172 
	#B0100011
 35

	)

173 
	#B00100011
 35

	)

174 
	#B100100
 36

	)

175 
	#B0100100
 36

	)

176 
	#B00100100
 36

	)

177 
	#B100101
 37

	)

178 
	#B0100101
 37

	)

179 
	#B00100101
 37

	)

180 
	#B100110
 38

	)

181 
	#B0100110
 38

	)

182 
	#B00100110
 38

	)

183 
	#B100111
 39

	)

184 
	#B0100111
 39

	)

185 
	#B00100111
 39

	)

186 
	#B101000
 40

	)

187 
	#B0101000
 40

	)

188 
	#B00101000
 40

	)

189 
	#B101001
 41

	)

190 
	#B0101001
 41

	)

191 
	#B00101001
 41

	)

192 
	#B101010
 42

	)

193 
	#B0101010
 42

	)

194 
	#B00101010
 42

	)

195 
	#B101011
 43

	)

196 
	#B0101011
 43

	)

197 
	#B00101011
 43

	)

198 
	#B101100
 44

	)

199 
	#B0101100
 44

	)

200 
	#B00101100
 44

	)

201 
	#B101101
 45

	)

202 
	#B0101101
 45

	)

203 
	#B00101101
 45

	)

204 
	#B101110
 46

	)

205 
	#B0101110
 46

	)

206 
	#B00101110
 46

	)

207 
	#B101111
 47

	)

208 
	#B0101111
 47

	)

209 
	#B00101111
 47

	)

210 
	#B110000
 48

	)

211 
	#B0110000
 48

	)

212 
	#B00110000
 48

	)

213 
	#B110001
 49

	)

214 
	#B0110001
 49

	)

215 
	#B00110001
 49

	)

216 
	#B110010
 50

	)

217 
	#B0110010
 50

	)

218 
	#B00110010
 50

	)

219 
	#B110011
 51

	)

220 
	#B0110011
 51

	)

221 
	#B00110011
 51

	)

222 
	#B110100
 52

	)

223 
	#B0110100
 52

	)

224 
	#B00110100
 52

	)

225 
	#B110101
 53

	)

226 
	#B0110101
 53

	)

227 
	#B00110101
 53

	)

228 
	#B110110
 54

	)

229 
	#B0110110
 54

	)

230 
	#B00110110
 54

	)

231 
	#B110111
 55

	)

232 
	#B0110111
 55

	)

233 
	#B00110111
 55

	)

234 
	#B111000
 56

	)

235 
	#B0111000
 56

	)

236 
	#B00111000
 56

	)

237 
	#B111001
 57

	)

238 
	#B0111001
 57

	)

239 
	#B00111001
 57

	)

240 
	#B111010
 58

	)

241 
	#B0111010
 58

	)

242 
	#B00111010
 58

	)

243 
	#B111011
 59

	)

244 
	#B0111011
 59

	)

245 
	#B00111011
 59

	)

246 
	#B111100
 60

	)

247 
	#B0111100
 60

	)

248 
	#B00111100
 60

	)

249 
	#B111101
 61

	)

250 
	#B0111101
 61

	)

251 
	#B00111101
 61

	)

252 
	#B111110
 62

	)

253 
	#B0111110
 62

	)

254 
	#B00111110
 62

	)

255 
	#B111111
 63

	)

256 
	#B0111111
 63

	)

257 
	#B00111111
 63

	)

258 
	#B1000000
 64

	)

259 
	#B01000000
 64

	)

260 
	#B1000001
 65

	)

261 
	#B01000001
 65

	)

262 
	#B1000010
 66

	)

263 
	#B01000010
 66

	)

264 
	#B1000011
 67

	)

265 
	#B01000011
 67

	)

266 
	#B1000100
 68

	)

267 
	#B01000100
 68

	)

268 
	#B1000101
 69

	)

269 
	#B01000101
 69

	)

270 
	#B1000110
 70

	)

271 
	#B01000110
 70

	)

272 
	#B1000111
 71

	)

273 
	#B01000111
 71

	)

274 
	#B1001000
 72

	)

275 
	#B01001000
 72

	)

276 
	#B1001001
 73

	)

277 
	#B01001001
 73

	)

278 
	#B1001010
 74

	)

279 
	#B01001010
 74

	)

280 
	#B1001011
 75

	)

281 
	#B01001011
 75

	)

282 
	#B1001100
 76

	)

283 
	#B01001100
 76

	)

284 
	#B1001101
 77

	)

285 
	#B01001101
 77

	)

286 
	#B1001110
 78

	)

287 
	#B01001110
 78

	)

288 
	#B1001111
 79

	)

289 
	#B01001111
 79

	)

290 
	#B1010000
 80

	)

291 
	#B01010000
 80

	)

292 
	#B1010001
 81

	)

293 
	#B01010001
 81

	)

294 
	#B1010010
 82

	)

295 
	#B01010010
 82

	)

296 
	#B1010011
 83

	)

297 
	#B01010011
 83

	)

298 
	#B1010100
 84

	)

299 
	#B01010100
 84

	)

300 
	#B1010101
 85

	)

301 
	#B01010101
 85

	)

302 
	#B1010110
 86

	)

303 
	#B01010110
 86

	)

304 
	#B1010111
 87

	)

305 
	#B01010111
 87

	)

306 
	#B1011000
 88

	)

307 
	#B01011000
 88

	)

308 
	#B1011001
 89

	)

309 
	#B01011001
 89

	)

310 
	#B1011010
 90

	)

311 
	#B01011010
 90

	)

312 
	#B1011011
 91

	)

313 
	#B01011011
 91

	)

314 
	#B1011100
 92

	)

315 
	#B01011100
 92

	)

316 
	#B1011101
 93

	)

317 
	#B01011101
 93

	)

318 
	#B1011110
 94

	)

319 
	#B01011110
 94

	)

320 
	#B1011111
 95

	)

321 
	#B01011111
 95

	)

322 
	#B1100000
 96

	)

323 
	#B01100000
 96

	)

324 
	#B1100001
 97

	)

325 
	#B01100001
 97

	)

326 
	#B1100010
 98

	)

327 
	#B01100010
 98

	)

328 
	#B1100011
 99

	)

329 
	#B01100011
 99

	)

330 
	#B1100100
 100

	)

331 
	#B01100100
 100

	)

332 
	#B1100101
 101

	)

333 
	#B01100101
 101

	)

334 
	#B1100110
 102

	)

335 
	#B01100110
 102

	)

336 
	#B1100111
 103

	)

337 
	#B01100111
 103

	)

338 
	#B1101000
 104

	)

339 
	#B01101000
 104

	)

340 
	#B1101001
 105

	)

341 
	#B01101001
 105

	)

342 
	#B1101010
 106

	)

343 
	#B01101010
 106

	)

344 
	#B1101011
 107

	)

345 
	#B01101011
 107

	)

346 
	#B1101100
 108

	)

347 
	#B01101100
 108

	)

348 
	#B1101101
 109

	)

349 
	#B01101101
 109

	)

350 
	#B1101110
 110

	)

351 
	#B01101110
 110

	)

352 
	#B1101111
 111

	)

353 
	#B01101111
 111

	)

354 
	#B1110000
 112

	)

355 
	#B01110000
 112

	)

356 
	#B1110001
 113

	)

357 
	#B01110001
 113

	)

358 
	#B1110010
 114

	)

359 
	#B01110010
 114

	)

360 
	#B1110011
 115

	)

361 
	#B01110011
 115

	)

362 
	#B1110100
 116

	)

363 
	#B01110100
 116

	)

364 
	#B1110101
 117

	)

365 
	#B01110101
 117

	)

366 
	#B1110110
 118

	)

367 
	#B01110110
 118

	)

368 
	#B1110111
 119

	)

369 
	#B01110111
 119

	)

370 
	#B1111000
 120

	)

371 
	#B01111000
 120

	)

372 
	#B1111001
 121

	)

373 
	#B01111001
 121

	)

374 
	#B1111010
 122

	)

375 
	#B01111010
 122

	)

376 
	#B1111011
 123

	)

377 
	#B01111011
 123

	)

378 
	#B1111100
 124

	)

379 
	#B01111100
 124

	)

380 
	#B1111101
 125

	)

381 
	#B01111101
 125

	)

382 
	#B1111110
 126

	)

383 
	#B01111110
 126

	)

384 
	#B1111111
 127

	)

385 
	#B01111111
 127

	)

386 
	#B10000000
 128

	)

387 
	#B10000001
 129

	)

388 
	#B10000010
 130

	)

389 
	#B10000011
 131

	)

390 
	#B10000100
 132

	)

391 
	#B10000101
 133

	)

392 
	#B10000110
 134

	)

393 
	#B10000111
 135

	)

394 
	#B10001000
 136

	)

395 
	#B10001001
 137

	)

396 
	#B10001010
 138

	)

397 
	#B10001011
 139

	)

398 
	#B10001100
 140

	)

399 
	#B10001101
 141

	)

400 
	#B10001110
 142

	)

401 
	#B10001111
 143

	)

402 
	#B10010000
 144

	)

403 
	#B10010001
 145

	)

404 
	#B10010010
 146

	)

405 
	#B10010011
 147

	)

406 
	#B10010100
 148

	)

407 
	#B10010101
 149

	)

408 
	#B10010110
 150

	)

409 
	#B10010111
 151

	)

410 
	#B10011000
 152

	)

411 
	#B10011001
 153

	)

412 
	#B10011010
 154

	)

413 
	#B10011011
 155

	)

414 
	#B10011100
 156

	)

415 
	#B10011101
 157

	)

416 
	#B10011110
 158

	)

417 
	#B10011111
 159

	)

418 
	#B10100000
 160

	)

419 
	#B10100001
 161

	)

420 
	#B10100010
 162

	)

421 
	#B10100011
 163

	)

422 
	#B10100100
 164

	)

423 
	#B10100101
 165

	)

424 
	#B10100110
 166

	)

425 
	#B10100111
 167

	)

426 
	#B10101000
 168

	)

427 
	#B10101001
 169

	)

428 
	#B10101010
 170

	)

429 
	#B10101011
 171

	)

430 
	#B10101100
 172

	)

431 
	#B10101101
 173

	)

432 
	#B10101110
 174

	)

433 
	#B10101111
 175

	)

434 
	#B10110000
 176

	)

435 
	#B10110001
 177

	)

436 
	#B10110010
 178

	)

437 
	#B10110011
 179

	)

438 
	#B10110100
 180

	)

439 
	#B10110101
 181

	)

440 
	#B10110110
 182

	)

441 
	#B10110111
 183

	)

442 
	#B10111000
 184

	)

443 
	#B10111001
 185

	)

444 
	#B10111010
 186

	)

445 
	#B10111011
 187

	)

446 
	#B10111100
 188

	)

447 
	#B10111101
 189

	)

448 
	#B10111110
 190

	)

449 
	#B10111111
 191

	)

450 
	#B11000000
 192

	)

451 
	#B11000001
 193

	)

452 
	#B11000010
 194

	)

453 
	#B11000011
 195

	)

454 
	#B11000100
 196

	)

455 
	#B11000101
 197

	)

456 
	#B11000110
 198

	)

457 
	#B11000111
 199

	)

458 
	#B11001000
 200

	)

459 
	#B11001001
 201

	)

460 
	#B11001010
 202

	)

461 
	#B11001011
 203

	)

462 
	#B11001100
 204

	)

463 
	#B11001101
 205

	)

464 
	#B11001110
 206

	)

465 
	#B11001111
 207

	)

466 
	#B11010000
 208

	)

467 
	#B11010001
 209

	)

468 
	#B11010010
 210

	)

469 
	#B11010011
 211

	)

470 
	#B11010100
 212

	)

471 
	#B11010101
 213

	)

472 
	#B11010110
 214

	)

473 
	#B11010111
 215

	)

474 
	#B11011000
 216

	)

475 
	#B11011001
 217

	)

476 
	#B11011010
 218

	)

477 
	#B11011011
 219

	)

478 
	#B11011100
 220

	)

479 
	#B11011101
 221

	)

480 
	#B11011110
 222

	)

481 
	#B11011111
 223

	)

482 
	#B11100000
 224

	)

483 
	#B11100001
 225

	)

484 
	#B11100010
 226

	)

485 
	#B11100011
 227

	)

486 
	#B11100100
 228

	)

487 
	#B11100101
 229

	)

488 
	#B11100110
 230

	)

489 
	#B11100111
 231

	)

490 
	#B11101000
 232

	)

491 
	#B11101001
 233

	)

492 
	#B11101010
 234

	)

493 
	#B11101011
 235

	)

494 
	#B11101100
 236

	)

495 
	#B11101101
 237

	)

496 
	#B11101110
 238

	)

497 
	#B11101111
 239

	)

498 
	#B11110000
 240

	)

499 
	#B11110001
 241

	)

500 
	#B11110010
 242

	)

501 
	#B11110011
 243

	)

502 
	#B11110100
 244

	)

503 
	#B11110101
 245

	)

504 
	#B11110110
 246

	)

505 
	#B11110111
 247

	)

506 
	#B11111000
 248

	)

507 
	#B11111001
 249

	)

508 
	#B11111010
 250

	)

509 
	#B11111011
 251

	)

510 
	#B11111100
 252

	)

511 
	#B11111101
 253

	)

512 
	#B11111110
 254

	)

513 
	#B11111111
 255

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/main.cpp

1 
	~<WProgøm.h
>

3 
	$maö
()

5 
	`öô
();

7 
	`£tup
();

10 
	`lo›
();

13 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/pins_arduino.c

25 
	~<avr/io.h
>

26 
	~"wúög_¥iv©e.h
"

27 
	~"pös_¨duöo.h
"

59 
	#PA
 1

	)

60 
	#PB
 2

	)

61 
	#PC
 3

	)

62 
	#PD
 4

	)

67 c⁄° 
uöt8_t
 
PROGMEM
 
	gp‹t_to_mode_PGM
[] =

69 
NOT_A_PORT
,

70 (
uöt8_t
Ë&
DDRA
,

71 (
uöt8_t
Ë&
DDRB
,

72 (
uöt8_t
Ë&
DDRC
,

73 (
uöt8_t
Ë&
DDRD
,

76 c⁄° 
uöt8_t
 
PROGMEM
 
	gp‹t_to_ouçut_PGM
[] =

78 
NOT_A_PORT
,

79 (
uöt8_t
Ë&
PORTA
,

80 (
uöt8_t
Ë&
PORTB
,

81 (
uöt8_t
Ë&
PORTC
,

82 (
uöt8_t
Ë&
PORTD
,

85 c⁄° 
uöt8_t
 
PROGMEM
 
	gp‹t_to_öput_PGM
[] =

87 
NOT_A_PORT
,

88 (
uöt8_t
Ë&
PINA
,

89 (
uöt8_t
Ë&
PINB
,

90 (
uöt8_t
Ë&
PINC
,

91 (
uöt8_t
Ë&
PIND
,

94 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_p‹t_PGM
[] =

96 
PB
,

97 
PB
,

98 
PB
,

99 
PB
,

100 
PB
,

101 
PB
,

102 
PB
,

103 
PB
,

104 
PD
,

105 
PD
,

106 
PD
,

107 
PD
,

108 
PD
,

109 
PD
,

110 
PD
,

111 
PD
,

112 
PC
,

113 
PC
,

114 
PC
,

115 
PC
,

116 
PC
,

117 
PC
,

118 
PC
,

119 
PC
,

120 
PA
,

121 
PA
,

122 
PA
,

123 
PA
,

124 
PA
,

125 
PA
,

126 
PA
,

127 
PA


130 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_bô_mask_PGM
[] =

132 
_BV
(0),

133 
_BV
(1),

134 
_BV
(2),

135 
_BV
(3),

136 
_BV
(4),

137 
_BV
(5),

138 
_BV
(6),

139 
_BV
(7),

140 
_BV
(0),

141 
_BV
(1),

142 
_BV
(2),

143 
_BV
(3),

144 
_BV
(4),

145 
_BV
(5),

146 
_BV
(6),

147 
_BV
(7),

148 
_BV
(0),

149 
_BV
(1),

150 
_BV
(2),

151 
_BV
(3),

152 
_BV
(4),

153 
_BV
(5),

154 
_BV
(6),

155 
_BV
(7),

156 
_BV
(7),

157 
_BV
(6),

158 
_BV
(5),

159 
_BV
(4),

160 
_BV
(3),

161 
_BV
(2),

162 
_BV
(1),

163 
_BV
(0)

166 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_timî_PGM
[] =

168 
NOT_ON_TIMER
,

169 
NOT_ON_TIMER
,

170 
NOT_ON_TIMER
,

171 
TIMER0A
,

172 
TIMER0B
,

173 
NOT_ON_TIMER
,

174 
NOT_ON_TIMER
,

175 
NOT_ON_TIMER
,

176 
NOT_ON_TIMER
,

177 
NOT_ON_TIMER
,

178 
NOT_ON_TIMER
,

179 
NOT_ON_TIMER
,

180 
TIMER1B
,

181 
TIMER1A
,

182 
TIMER2B
,

183 
TIMER2A
,

184 
NOT_ON_TIMER
,

185 
NOT_ON_TIMER
,

186 
NOT_ON_TIMER
,

187 
NOT_ON_TIMER
,

188 
NOT_ON_TIMER
,

189 
NOT_ON_TIMER
,

190 
NOT_ON_TIMER
,

191 
NOT_ON_TIMER
,

192 
NOT_ON_TIMER
,

193 
NOT_ON_TIMER
,

194 
NOT_ON_TIMER
,

195 
NOT_ON_TIMER
,

196 
NOT_ON_TIMER
,

197 
NOT_ON_TIMER
,

198 
NOT_ON_TIMER
,

199 
NOT_ON_TIMER


	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/pins_arduino.h

25 #i‚de‡
Pös_Arduöo_h


26 
	#Pös_Arduöo_h


	)

28 
	~<avr/pgm•a˚.h
>

30 
	#NOT_A_PIN
 0

	)

31 
	#NOT_A_PORT
 0

	)

33 
	#NOT_ON_TIMER
 0

	)

34 
	#TIMER0A
 1

	)

35 
	#TIMER0B
 2

	)

36 
	#TIMER1A
 3

	)

37 
	#TIMER1B
 4

	)

38 
	#TIMER2
 5

	)

39 
	#TIMER2A
 6

	)

40 
	#TIMER2B
 7

	)

42 c⁄° 
uöt8_t
 
PROGMEM
 
p‹t_to_mode_PGM
[];

43 c⁄° 
uöt8_t
 
PROGMEM
 
p‹t_to_öput_PGM
[];

44 c⁄° 
uöt8_t
 
PROGMEM
 
p‹t_to_ouçut_PGM
[];

46 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_p‹t_PGM
[];

47 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_bô_PGM
[];

48 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_bô_mask_PGM
[];

50 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_timî_PGM
[];

57 
	#digôÆPöToP‹t
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_p‹t_PGM
 + (PËË)

	)

58 
	#digôÆPöToBôMask
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_bô_mask_PGM
 + (PËË)

	)

59 
	#digôÆPöToTimî
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_timî_PGM
 + (PËË)

	)

60 
	#™ÆogInPöToBô
(
P
Ë(P)

	)

61 
	#p‹tOuçutRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–
	`pgm_ªad_byã
–
p‹t_to_ouçut_PGM
 + (P))Ë)

	)

62 
	#p‹tI≈utRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–
	`pgm_ªad_byã
–
p‹t_to_öput_PGM
 + (P))Ë)

	)

63 
	#p‹tModeRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–
	`pgm_ªad_byã
–
p‹t_to_mode_PGM
 + (P))Ë)

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/wiring.c

25 
	~"wúög_¥iv©e.h
"

27 vﬁ©ûê
	gtimî0_ovîÊow_cou¡
 = 0;

28 vﬁ©ûê
	gtimî0_˛ock_cy˛es
 = 0;

29 vﬁ©ûê
	gtimî0_mûlis
 = 0;

31 
	$SIGNAL
(
TIMER0_OVF_ve˘
)

33 
timî0_ovîÊow_cou¡
++;

35 
timî0_˛ock_cy˛es
 += 64UL * 256UL;

36 
timî0_˛ock_cy˛es
 > 
	`˛ockCy˛esPîMi¸o£c⁄d
() * 1000UL) {

37 
timî0_˛ock_cy˛es
 -
	`˛ockCy˛esPîMi¸o£c⁄d
() * 1000UL;

38 
timî0_mûlis
++;

40 
	}
}

42 
	$mûlis
()

44 
m
;

45 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

49 
	`˛i
();

50 
m
 = 
timî0_mûlis
;

51 
SREG
 = 
ﬁdSREG
;

53  
m
;

54 
	}
}

56 
	$mi¸os
() {

57 
m
, 
t
;

58 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

60 
	`˛i
();

61 
t
 = 
TCNT0
;

63 #ifde‡
TIFR0


64 i‡((
TIFR0
 & 
	`_BV
(
TOV0
)Ë&& (
t
 == 0))

65 
t
 = 256;

67 i‡((
TIFR
 & 
	`_BV
(
TOV0
)Ë&& (
t
 == 0))

68 
t
 = 256;

71 
m
 = 
timî0_ovîÊow_cou¡
;

72 
SREG
 = 
ﬁdSREG
;

74  ((
m
 << 8Ë+ 
t
Ë* (64 / 
	`˛ockCy˛esPîMi¸o£c⁄d
());

75 
	}
}

77 
	$dñay
(
ms
)

79 
°¨t
 = 
	`mûlis
();

81 
	`mûlis
(Ë- 
°¨t
 <
ms
)

83 
	}
}

88 
	$dñayMi¸o£c⁄ds
(
us
)

90 
uöt8_t
 
ﬁdSREG
;

96 #i‡
F_CPU
 >= 16000000L

101 i‡(--
us
 == 0)

107 
us
 <<= 2;

110 
us
 -= 2;

117 i‡(--
us
 == 0)

119 i‡(--
us
 == 0)

125 
us
 <<= 1;

129 
us
--;

134 
ﬁdSREG
 = 
SREG
;

135 
	`˛i
();

138 
__asm__
 
	`__vﬁ©ûe__
 (

140 "b∫ê1b" : "=w" (
us
) : "0" (us)

144 
SREG
 = 
ﬁdSREG
;

145 
	}
}

147 
	$öô
()

151 
	`£i
();

156 
	`sbi
(
TCCR0A
, 
WGM01
);

157 
	`sbi
(
TCCR0A
, 
WGM00
);

160 
	`sbi
(
TCCR0B
, 
CS01
);

161 
	`sbi
(
TCCR0B
, 
CS00
);

164 
	`sbi
(
TIMSK0
, 
TOIE0
);

172 
	`sbi
(
TCCR1B
, 
CS11
);

173 
	`sbi
(
TCCR1B
, 
CS10
);

176 
	`sbi
(
TCCR1A
, 
WGM10
);

179 
	`sbi
(
TCCR2B
, 
CS22
);

182 
	`sbi
(
TCCR2A
, 
WGM20
);

188 
	`sbi
(
ADCSRA
, 
ADPS2
);

189 
	`sbi
(
ADCSRA
, 
ADPS1
);

190 
	`sbi
(
ADCSRA
, 
ADPS0
);

193 
	`sbi
(
ADCSRA
, 
ADEN
);

198 
UCSR0B
 = 0;

199 #i‡
	`deföed
(
__AVR_ATmega644P__
)

203 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/wiring.h

25 #i‚de‡
Wúög_h


26 
	#Wúög_h


	)

28 
	~<avr/io.h
>

29 
	~"bö¨y.h
"

31 #ifde‡
__˝lu•lus


35 
	#HIGH
 0x1

	)

36 
	#LOW
 0x0

	)

38 
	#INPUT
 0x0

	)

39 
	#OUTPUT
 0x1

	)

41 
	#åue
 0x1

	)

42 
	#Ál£
 0x0

	)

44 
	#PI
 3.14159265

	)

45 
	#HALF_PI
 1.57079

	)

46 
	#TWO_PI
 6.283185

	)

47 
	#DEG_TO_RAD
 0.01745329

	)

48 
	#RAD_TO_DEG
 57.2957786

	)

50 
	#SERIAL
 0x0

	)

51 
	#DISPLAY
 0x1

	)

53 
	#LSBFIRST
 0

	)

54 
	#MSBFIRST
 1

	)

56 
	#CHANGE
 1

	)

57 
	#FALLING
 2

	)

58 
	#RISING
 3

	)

60 
	#INTERNAL
 3

	)

61 
	#DEFAULT
 1

	)

62 
	#EXTERNAL
 0

	)

65 #ifde‡
abs


66 #unde‡
abs


69 
	#mö
(
a
,
b
Ë(◊)<(b)?◊):(b))

	)

70 
	#max
(
a
,
b
Ë(◊)>(b)?◊):(b))

	)

71 
	#abs
(
x
Ë((x)>0?(x):-(x))

	)

72 
	#c⁄°øö
(
amt
,
low
,
high
Ë(◊mt)<÷ow)?÷ow):(◊mt)>(high)?(high):◊mt)))

	)

73 #i‡
__AVR_LIBC_VERSION__
 < 10701UL

74 
	#round
(
x
Ë((x)>=0?()((x)+0.5):()((x)-0.5))

	)

76 
	#ødüns
(
deg
Ë((deg)*
DEG_TO_RAD
)

	)

77 
	#degªes
(
ød
Ë(‘ad)*
RAD_TO_DEG
)

	)

78 
	#sq
(
x
Ë((x)*(x))

	)

80 
	#öãºu±s
(Ë
	`£i
()

	)

81 
	#noI¡îru±s
(Ë
	`˛i
()

	)

83 
	#˛ockCy˛esPîMi¸o£c⁄d
(Ë–
F_CPU
 / 1000000L )

	)

84 
	#˛ockCy˛esToMi¸o£c⁄ds
(
a
Ë–◊Ë/ 
	`˛ockCy˛esPîMi¸o£c⁄d
(Ë)

	)

85 
	#mi¸o£c⁄dsToClockCy˛es
(
a
Ë–◊Ë* 
	`˛ockCy˛esPîMi¸o£c⁄d
(Ë)

	)

87 
	#lowByã
(
w
Ë((wË& 0xff)

	)

88 
	#highByã
(
w
Ë((wË>> 8)

	)

90 
	#bôRód
(
vÆue
, 
bô
Ë(((vÆueË>> (bô)Ë& 0x01)

	)

91 
	#bôSë
(
vÆue
, 
bô
Ë((vÆueË|(1UL << (bô)))

	)

92 
	#bôCÀ¨
(
vÆue
, 
bô
Ë((vÆueË&~(1UL << (bô)))

	)

93 
	#bôWrôe
(
vÆue
, 
bô
, 
bôvÆue
Ë(bôvÆuê? 
	`bôSë
(vÆue, bôË: 
	`bôCÀ¨
(vÆue, bô))

	)

95 
	tw‹d
;

97 
	#bô
(
b
Ë(1 << (b))

	)

99 
uöt8_t
 
	tboﬁón
;

100 
uöt8_t
 
	tbyã
;

102 
öô
();

104 
pöMode
(
uöt8_t
, uint8_t);

105 
digôÆWrôe
(
uöt8_t
, uint8_t);

106 
digôÆRód
(
uöt8_t
);

107 
™ÆogRód
(
uöt8_t
);

108 
™ÆogRe„ªn˚
(
uöt8_t
 
mode
);

109 
™ÆogWrôe
(
uöt8_t
, );

111 
begöSîül
(
uöt8_t
, );

112 
£rülWrôe
(
uöt8_t
, );

113 
£rülAvaûabÀ
(
uöt8_t
);

114 
£rülRód
(
uöt8_t
);

115 
£rülFlush
(
uöt8_t
);

117 
mûlis
();

118 
mi¸os
();

119 
dñay
();

120 
dñayMi¸o£c⁄ds
(
us
);

121 
pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
);

123 
shi·Out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
, 
byã
 
vÆ
);

125 
©èchI¡îru±
(
uöt8_t
, (*)(), 
mode
);

126 
dëachI¡îru±
(
uöt8_t
);

128 
£tup
();

129 
lo›
();

131 #ifde‡
__˝lu•lus


	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/wiring_analog.c

25 
	~"wúög_¥iv©e.h
"

26 
	~"pös_¨duöo.h
"

28 
uöt8_t
 
	g™Æog_ª„ªn˚
 = 
DEFAULT
;

30 
	$™ÆogRe„ªn˚
(
uöt8_t
 
mode
)

35 
™Æog_ª„ªn˚
 = 
mode
;

36 
	}
}

38 
	$™ÆogRód
(
uöt8_t
 
pö
)

40 
uöt8_t
 
low
, 
high
, 
ch
 = 
	`™ÆogInPöToBô
(
pö
);

46 
ADMUX
 = ((
™Æog_ª„ªn˚
 << 6Ë| (
pö
 & 0x0f)Ë& 
B11000111
;

52 
	`sbi
(
ADCSRA
, 
ADSC
);

55 
	`bô_is_£t
(
ADCSRA
, 
ADSC
));

61 
low
 = 
ADCL
;

62 
high
 = 
ADCH
;

65  (
high
 << 8Ë| 
low
;

66 
	}
}

72 
	$™ÆogWrôe
(
uöt8_t
 
pö
, 
vÆ
)

79 
	`pöMode
(
pö
, 
OUTPUT
);

81 i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER1A
) {

83 
	`sbi
(
TCCR1A
, 
COM1A1
);

85 
OCR1A
 = 
vÆ
;

86 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER1B
) {

88 
	`sbi
(
TCCR1A
, 
COM1B1
);

90 
OCR1B
 = 
vÆ
;

91 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER0A
) {

93 
	`sbi
(
TCCR0A
, 
COM0A1
);

95 
OCR0A
 = 
vÆ
;

96 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER0B
) {

98 
	`sbi
(
TCCR0A
, 
COM0B1
);

100 
OCR0B
 = 
vÆ
;

101 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER2A
) {

103 
	`sbi
(
TCCR2A
, 
COM2A1
);

105 
OCR2A
 = 
vÆ
;

106 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER2B
) {

108 
	`sbi
(
TCCR2A
, 
COM2B1
);

110 
OCR2B
 = 
vÆ
;

111 } i‡(
vÆ
 < 128)

113 
	`digôÆWrôe
(
pö
, 
LOW
);

115 
	`digôÆWrôe
(
pö
, 
HIGH
);

116 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/wiring_digital.c

25 
	~"wúög_¥iv©e.h
"

26 
	~"pös_¨duöo.h
"

28 
	$pöMode
(
uöt8_t
 
pö
, uöt8_à
mode
)

30 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

31 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

32 vﬁ©ûê
uöt8_t
 *
ªg
;

34 i‡(
p‹t
 =
NOT_A_PIN
) ;

37 
ªg
 = 
	`p‹tModeRegi°î
(
p‹t
);

39 i‡(
mode
 =
INPUT
Ë*
ªg
 &~
bô
;

40 *
ªg
 |
bô
;

41 
	}
}

50 
ölöe
 
	$tu∫OffPWM
(
uöt8_t
 
timî
Ë
	`__©åibuã__
 ((
Æways_ölöe
));

51 
ölöe
 
	$tu∫OffPWM
(
uöt8_t
 
timî
)

53 i‡(
timî
 =
TIMER0A
Ë
	`cbi
(
TCCR0A
, 
COM0A1
);

54 i‡(
timî
 =
TIMER0B
Ë
	`cbi
(
TCCR0A
, 
COM0B1
);

55 i‡(
timî
 =
TIMER1A
Ë
	`cbi
(
TCCR1A
, 
COM1A1
);

56 i‡(
timî
 =
TIMER1B
Ë
	`cbi
(
TCCR1A
, 
COM1B1
);

57 i‡(
timî
 =
TIMER2A
Ë
	`cbi
(
TCCR2A
, 
COM2A1
);

58 i‡(
timî
 =
TIMER2B
Ë
	`cbi
(
TCCR2A
, 
COM2B1
);

59 
	}
}

61 
	$digôÆWrôe
(
uöt8_t
 
pö
, uöt8_à
vÆ
)

63 
uöt8_t
 
timî
 = 
	`digôÆPöToTimî
(
pö
);

64 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

65 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

66 vﬁ©ûê
uöt8_t
 *
out
;

68 i‡(
p‹t
 =
NOT_A_PIN
) ;

72 i‡(
timî
 !
NOT_ON_TIMER
Ë
	`tu∫OffPWM
(timer);

74 
out
 = 
	`p‹tOuçutRegi°î
(
p‹t
);

76 i‡(
vÆ
 =
LOW
Ë*
out
 &~
bô
;

77 *
out
 |
bô
;

78 
	}
}

80 
	$digôÆRód
(
uöt8_t
 
pö
)

82 
uöt8_t
 
timî
 = 
	`digôÆPöToTimî
(
pö
);

83 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

84 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

86 i‡(
p‹t
 =
NOT_A_PIN
Ë 
LOW
;

90 i‡(
timî
 !
NOT_ON_TIMER
Ë
	`tu∫OffPWM
(timer);

92 i‡(*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë 
HIGH
;

94  
LOW
;

95 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/wiring_private.h

25 #i‚de‡
WúögPriv©e_h


26 
	#WúögPriv©e_h


	)

28 
	~<avr/io.h
>

29 
	~<avr/öãºu±.h
>

30 
	~<avr/sig«l.h
>

31 
	~<avr/dñay.h
>

32 
	~<°dio.h
>

33 
	~<°d¨g.h
>

35 
	~"wúög.h
"

37 #ifde‡
__˝lu•lus


41 #i‚de‡
cbi


42 
	#cbi
(
s‰
, 
bô
Ë(
	`_SFR_BYTE
(s‰Ë&~
	`_BV
(bô))

	)

44 #i‚de‡
sbi


45 
	#sbi
(
s‰
, 
bô
Ë(
	`_SFR_BYTE
(s‰Ë|
	`_BV
(bô))

	)

48 
	#EXTERNAL_INT_0
 0

	)

49 
	#EXTERNAL_INT_1
 1

	)

50 
	#EXTERNAL_INT_2
 2

	)

52 
	#EXTERNAL_NUM_INTERRUPTS
 3

	)

54 (*
voidFuncPå
)();

56 #ifde‡
__˝lu•lus


	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/wiring_pulse.c

25 
	~"wúög_¥iv©e.h
"

26 
	~"pös_¨duöo.h
"

32 
	$pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
)

37 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

38 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

39 
uöt8_t
 
°©eMask
 = (
°©e
 ? 
bô
 : 0);

40 
width
 = 0;

44 
numlo›s
 = 0;

45 
maxlo›s
 = 
	`mi¸o£c⁄dsToClockCy˛es
(
timeout
) / 16;

48 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë=
°©eMask
)

49 i‡(
numlo›s
++ =
maxlo›s
)

53 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë!
°©eMask
)

54 i‡(
numlo›s
++ =
maxlo›s
)

58 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë=
°©eMask
)

59 
width
++;

65  
	`˛ockCy˛esToMi¸o£c⁄ds
(
width
 * 10 + 16);

66 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/wiring_serial.c

27 
	~"wúög_¥iv©e.h
"

33 
	#RX_BUFFER_SIZE
 128

	)

35 #i‡
deföed
(
__AVR_ATmega644P__
)

36 
	grx_buf„r
[2][
RX_BUFFER_SIZE
];

37 
	grx_buf„r_hód
[2] = {0, 0};

38 
	grx_buf„r_èû
[2] = {0, 0};

40 
	grx_buf„r
[1][
RX_BUFFER_SIZE
];

41 
	grx_buf„r_hód
[1] = {0};

42 
	grx_buf„r_èû
[1] = {0};

46 
	#BEGIN_SERIAL
(
u¨t_
, 
baud_
) \

48 
UBRR
##
u¨t_
##
H
 = ((
F_CPU
 / 16 + 
baud
 / 2) / baud - 1) >> 8; \

49 
UBRR
##
u¨t_
##
L
 = ((
F_CPU
 / 16 + 
baud
 / 2) / baud - 1); \

52 
UCSR
##
u¨t_
##
A
 = 0; \

53 
UCSR
##
u¨t_
##
B
 = 0; \

54 
UCSR
##
u¨t_
##
C
 = 0; \

57 
	`sbi
(
UCSR
##
u¨t_
##
B
, 
RXEN
##uart_);\

58 
	`sbi
(
UCSR
##
u¨t_
##
B
, 
TXEN
##uart_);\

61 
	`sbi
(
UCSR
##
u¨t_
##
B
, 
RXCIE
##uart_); \

62 
UCSR
##
u¨t_
##
C
 = 
	`_BV
(
UCSZ
##uart_##1)|_BV(UCSZ##uart_##0); \

64 }

	)

66 
	$begöSîül
(
uöt8_t
 
u¨t
, 
baud
)

68 i‡(
u¨t
 =0Ë
	`BEGIN_SERIAL
(0, 
baud
)

69 #i‡
	`deföed
(
__AVR_ATmega644P__
)

70 
	`BEGIN_SERIAL
(1, 
baud
)

72 
	}
}

74 
	#SERIAL_WRITE
(
u¨t_
, 
c_
) \

75 !(
UCSR
##
u¨t_
##
A
 & (1 << 
UDRE
##uart_))) \

77 
UDR
##
u¨t_
 = 
c


	)

79 
	$£rülWrôe
(
uöt8_t
 
u¨t
, 
c
)

81 i‡(
u¨t
 == 0) {

82 
	`SERIAL_WRITE
(0, 
c
);

84 #i‡
	`deföed
(
__AVR_ATmega644P__
)

86 
	`SERIAL_WRITE
(1, 
c
);

89 
	}
}

91 
	$£rülAvaûabÀ
(
uöt8_t
 
u¨t
)

93  (
RX_BUFFER_SIZE
 + 
rx_buf„r_hód
[
u¨t
] - 
rx_buf„r_èû
[uart]) % RX_BUFFER_SIZE;

94 
	}
}

96 
	$£rülRód
(
uöt8_t
 
u¨t
)

99 i‡(
rx_buf„r_hód
[
u¨t
] =
rx_buf„r_èû
[uart]) {

102 
c
 = 
rx_buf„r
[
u¨t
][
rx_buf„r_èû
[uart]];

103 
rx_buf„r_èû
[
u¨t
] = (rx_buf„r_èû[u¨t] + 1Ë% 
RX_BUFFER_SIZE
;

104  
c
;

106 
	}
}

108 
	$£rülFlush
(
uöt8_t
 
u¨t
)

115 
rx_buf„r_hód
[
u¨t
] = 
rx_buf„r_èû
[uart];

116 
	}
}

118 
	#UART_ISR
(
u¨t_
) \

119 
	`ISR
(
USART
##
u¨t_
##
_RX_ve˘
) \

121 
c
 = 
UDR
##
u¨t_
; \

123 
i
 = (
rx_buf„r_hód
[
u¨t_
] + 1Ë% 
RX_BUFFER_SIZE
; \

124 \

	)

129 i‡(
	gi
 !
rx_buf„r_èû
[
u¨t_
]) { \

130 
rx_buf„r
[
u¨t_
][
rx_buf„r_hód
[u¨t_]] = 
c
; \

131 
	grx_buf„r_hód
[
u¨t_
] = 
i
; \

135 
	$UART_ISR
(0)

136 #i‡
	`deföed
(
__AVR_ATmega644P__
)

137 
	$UART_ISR
(1)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/wiring_shift.c

25 
	~"wúög_¥iv©e.h
"

27 
	$shi·Out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
, 
byã
 
vÆ
)

29 
i
;

31 
i
 = 0; i < 8; i++) {

32 i‡(
bôOrdî
 =
LSBFIRST
)

33 
	`digôÆWrôe
(
d©aPö
, !!(
vÆ
 & (1 << 
i
)));

35 
	`digôÆWrôe
(
d©aPö
, !!(
vÆ
 & (1 << (7 - 
i
))));

37 
	`digôÆWrôe
(
˛ockPö
, 
HIGH
);

38 
	`digôÆWrôe
(
˛ockPö
, 
LOW
);

40 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/bootloaders/atmega1284p/boot.h

42 #i‚de‡
_AVR_BOOT_H_


43 
	#_AVR_BOOT_H_
 1

	)

115 
	~<avr/ì¥om.h
>

116 
	~<avr/io.h
>

117 
	~<öây≥s.h
>

118 
	~<limôs.h
>

121 #i‡
deföed
 (
SPMCSR
)

122 
	#__SPM_REG
 
SPMCSR


	)

123 #ñi‡
deföed
 (
SPMCR
)

124 
	#__SPM_REG
 
SPMCR


	)

126 #îr‹ 
AVR
 
¥o˚ss‹
 
d€s
 
nŸ
 
¥ovide
 
boŸlﬂdî
 
suµ‹t
!

131 #i‡
deföed
(
SPMEN
)

132 
	#__SPM_ENABLE
 
SPMEN


	)

133 #ñi‡
deföed
(
SELFPRGEN
)

134 
	#__SPM_ENABLE
 
SELFPRGEN


	)

136 #îr‹ 
C™nŸ
 
föd
 
SPM
 
E«bÀ
 
bô
 
deföôi⁄
!

147 
	#BOOTLOADER_SECTION
 
	`__©åibuã__
 ((
	`£˘i⁄
 (".boŸlﬂdî")))

	)

150 #ifde‡
ASB


151 
	#__COMMON_ASB
 
ASB


	)

153 
	#__COMMON_ASB
 
RWWSB


	)

156 #ifde‡
ASRE


157 
	#__COMMON_ASRE
 
ASRE


	)

159 
	#__COMMON_ASRE
 
RWWSRE


	)

164 
	#BLB12
 5

	)

165 
	#BLB11
 4

	)

166 
	#BLB02
 3

	)

167 
	#BLB01
 2

	)

173 
	#boŸ_•m_öãºu±_íabÀ
(Ë(
__SPM_REG
 |(
uöt8_t
)
	`_BV
(
SPMIE
))

	)

179 
	#boŸ_•m_öãºu±_dißbÀ
(Ë(
__SPM_REG
 &(
uöt8_t
)~
	`_BV
(
SPMIE
))

	)

185 
	#boŸ_is_•m_öãºu±
(Ë(
__SPM_REG
 & (
uöt8_t
)
	`_BV
(
SPMIE
))

	)

191 
	#boŸ_rww_busy
(Ë(
__SPM_REG
 & (
uöt8_t
)
	`_BV
(
__COMMON_ASB
))

	)

197 
	#boŸ_•m_busy
(Ë(
__SPM_REG
 & (
uöt8_t
)
	`_BV
(
__SPM_ENABLE
))

	)

203 
	#boŸ_•m_busy_waô
(Ëdo{}
	`boŸ_•m_busy
())

	)

205 
	#__BOOT_PAGE_ERASE
 (
	`_BV
(
__SPM_ENABLE
Ë| _BV(
PGERS
))

	)

206 
	#__BOOT_PAGE_WRITE
 (
	`_BV
(
__SPM_ENABLE
Ë| _BV(
PGWRT
))

	)

207 
	#__BOOT_PAGE_FILL
 
	`_BV
(
__SPM_ENABLE
)

	)

208 
	#__BOOT_RWW_ENABLE
 (
	`_BV
(
__SPM_ENABLE
Ë| _BV(
__COMMON_ASRE
))

	)

209 
	#__BOOT_LOCK_BITS_SET
 (
	`_BV
(
__SPM_ENABLE
Ë| _BV(
BLBSET
))

	)

211 
	#__boŸ_∑ge_fûl_sh‹t
(
addªss
, 
d©a
) \

212 (
	`__exãnsi⁄__
({ \

213 
__asm__
 
__vﬁ©ûe__
 \

220 : "i" (
	`_SFR_IO_ADDR
(
__SPM_REG
)), \

221 "r" ((
uöt8_t
)
__BOOT_PAGE_FILL
), \

222 "z" ((
uöt16_t
)
addªss
), \

223 "r" ((
uöt16_t
)
d©a
) \

226 }))

	)

228 
	#__boŸ_∑ge_fûl_n‹mÆ
(
addªss
, 
d©a
) \

229 (
	`__exãnsi⁄__
({ \

230 
__asm__
 
__vﬁ©ûe__
 \

237 : "i" (
	`_SFR_MEM_ADDR
(
__SPM_REG
)), \

238 "r" ((
uöt8_t
)
__BOOT_PAGE_FILL
), \

239 "z" ((
uöt16_t
)
addªss
), \

240 "r" ((
uöt16_t
)
d©a
) \

243 }))

	)

245 
	#__boŸ_∑ge_fûl_Æã∫©e
(
addªss
, 
d©a
)\

246 (
	`__exãnsi⁄__
({ \

247 
__asm__
 
__vﬁ©ûe__
 \

256 : "i" (
	`_SFR_MEM_ADDR
(
__SPM_REG
)), \

257 "r" ((
uöt8_t
)
__BOOT_PAGE_FILL
), \

258 "z" ((
uöt16_t
)
addªss
), \

259 "r" ((
uöt16_t
)
d©a
) \

262 }))

	)

264 
	#__boŸ_∑ge_fûl_exãnded
(
addªss
, 
d©a
) \

265 (
	`__exãnsi⁄__
({ \

266 
__asm__
 
__vﬁ©ûe__
 \

275 : "i" (
	`_SFR_MEM_ADDR
(
__SPM_REG
)), \

276 "i" (
	`_SFR_MEM_ADDR
(
RAMPZ
)), \

277 "r" ((
uöt8_t
)
__BOOT_PAGE_FILL
), \

278 "r" ((
uöt32_t
)
addªss
), \

279 "r" ((
uöt16_t
)
d©a
) \

282 }))

	)

284 
	#__boŸ_∑ge_fûl_exãnded_sh‹t
(
addªss
, 
d©a
) \

285 (
	`__exãnsi⁄__
({ \

286 
__asm__
 
__vﬁ©ûe__
 \

295 : "i" (
	`_SFR_IO_ADDR
(
__SPM_REG
)), \

296 "i" (
	`_SFR_IO_ADDR
(
RAMPZ
)), \

297 "r" ((
uöt8_t
)
__BOOT_PAGE_FILL
), \

298 "r" ((
uöt32_t
)
addªss
), \

299 "r" ((
uöt16_t
)
d©a
) \

302 }))

	)

304 
	#__boŸ_∑ge_îa£_sh‹t
(
addªss
) \

305 (
	`__exãnsi⁄__
({ \

306 
__asm__
 
__vﬁ©ûe__
 \

311 : "i" (
	`_SFR_IO_ADDR
(
__SPM_REG
)), \

312 "r" ((
uöt8_t
)
__BOOT_PAGE_ERASE
), \

313 "z" ((
uöt16_t
)
addªss
) \

315 }))

	)

318 
	#__boŸ_∑ge_îa£_n‹mÆ
(
addªss
) \

319 (
	`__exãnsi⁄__
({ \

320 
__asm__
 
__vﬁ©ûe__
 \

325 : "i" (
	`_SFR_MEM_ADDR
(
__SPM_REG
)), \

326 "r" ((
uöt8_t
)
__BOOT_PAGE_ERASE
), \

327 "z" ((
uöt16_t
)
addªss
) \

329 }))

	)

331 
	#__boŸ_∑ge_îa£_Æã∫©e
(
addªss
) \

332 (
	`__exãnsi⁄__
({ \

333 
__asm__
 
__vﬁ©ûe__
 \

340 : "i" (
	`_SFR_MEM_ADDR
(
__SPM_REG
)), \

341 "r" ((
uöt8_t
)
__BOOT_PAGE_ERASE
), \

342 "z" ((
uöt16_t
)
addªss
) \

344 }))

	)

346 
	#__boŸ_∑ge_îa£_exãnded
(
addªss
) \

347 (
	`__exãnsi⁄__
({ \

348 
__asm__
 
__vﬁ©ûe__
 \

355 : "i" (
	`_SFR_MEM_ADDR
(
__SPM_REG
)), \

356 "i" (
	`_SFR_MEM_ADDR
(
RAMPZ
)), \

357 "r" ((
uöt8_t
)
__BOOT_PAGE_ERASE
), \

358 "r" ((
uöt32_t
)
addªss
) \

361 }))

	)

362 
	#__boŸ_∑ge_îa£_exãnded_sh‹t
(
addªss
) \

363 (
	`__exãnsi⁄__
({ \

364 
__asm__
 
__vﬁ©ûe__
 \

371 : "i" (
	`_SFR_IO_ADDR
(
__SPM_REG
)), \

372 "i" (
	`_SFR_IO_ADDR
(
RAMPZ
)), \

373 "r" ((
uöt8_t
)
__BOOT_PAGE_ERASE
), \

374 "r" ((
uöt32_t
)
addªss
) \

377 }))

	)

379 
	#__boŸ_∑ge_wrôe_sh‹t
(
addªss
) \

380 (
	`__exãnsi⁄__
({ \

381 
__asm__
 
__vﬁ©ûe__
 \

386 : "i" (
	`_SFR_IO_ADDR
(
__SPM_REG
)), \

387 "r" ((
uöt8_t
)
__BOOT_PAGE_WRITE
), \

388 "z" ((
uöt16_t
)
addªss
) \

390 }))

	)

392 
	#__boŸ_∑ge_wrôe_n‹mÆ
(
addªss
) \

393 (
	`__exãnsi⁄__
({ \

394 
__asm__
 
__vﬁ©ûe__
 \

399 : "i" (
	`_SFR_MEM_ADDR
(
__SPM_REG
)), \

400 "r" ((
uöt8_t
)
__BOOT_PAGE_WRITE
), \

401 "z" ((
uöt16_t
)
addªss
) \

403 }))

	)

405 
	#__boŸ_∑ge_wrôe_Æã∫©e
(
addªss
) \

406 (
	`__exãnsi⁄__
({ \

407 
__asm__
 
__vﬁ©ûe__
 \

414 : "i" (
	`_SFR_MEM_ADDR
(
__SPM_REG
)), \

415 "r" ((
uöt8_t
)
__BOOT_PAGE_WRITE
), \

416 "z" ((
uöt16_t
)
addªss
) \

418 }))

	)

420 
	#__boŸ_∑ge_wrôe_exãnded
(
addªss
) \

421 (
	`__exãnsi⁄__
({ \

422 
__asm__
 
__vﬁ©ûe__
 \

429 : "i" (
	`_SFR_MEM_ADDR
(
__SPM_REG
)), \

430 "i" (
	`_SFR_MEM_ADDR
(
RAMPZ
)), \

431 "r" ((
uöt8_t
)
__BOOT_PAGE_WRITE
), \

432 "r" ((
uöt32_t
)
addªss
) \

435 }))

	)

436 
	#__boŸ_∑ge_wrôe_exãnded_sh‹t
(
addªss
) \

437 (
	`__exãnsi⁄__
({ \

438 
__asm__
 
__vﬁ©ûe__
 \

445 : "i" (
	`_SFR_IO_ADDR
(
__SPM_REG
)), \

446 "i" (
	`_SFR_IO_ADDR
(
RAMPZ
)), \

447 "r" ((
uöt8_t
)
__BOOT_PAGE_WRITE
), \

448 "r" ((
uöt32_t
)
addªss
) \

451 }))

	)

453 
	#__boŸ_rww_íabÀ_sh‹t
() \

454 (
	`__exãnsi⁄__
({ \

455 
__asm__
 
__vﬁ©ûe__
 \

460 : "i" (
	`_SFR_IO_ADDR
(
__SPM_REG
)), \

461 "r" ((
uöt8_t
)
__BOOT_RWW_ENABLE
) \

463 }))

	)

465 
	#__boŸ_rww_íabÀ
() \

466 (
	`__exãnsi⁄__
({ \

467 
__asm__
 
__vﬁ©ûe__
 \

472 : "i" (
	`_SFR_MEM_ADDR
(
__SPM_REG
)), \

473 "r" ((
uöt8_t
)
__BOOT_RWW_ENABLE
) \

475 }))

	)

477 
	#__boŸ_rww_íabÀ_Æã∫©e
() \

478 (
	`__exãnsi⁄__
({ \

479 
__asm__
 
__vﬁ©ûe__
 \

486 : "i" (
	`_SFR_MEM_ADDR
(
__SPM_REG
)), \

487 "r" ((
uöt8_t
)
__BOOT_RWW_ENABLE
) \

489 }))

	)

508 
	#__boŸ_lock_bôs_£t_sh‹t
(
lock_bôs
) \

509 (
	`__exãnsi⁄__
({ \

510 
uöt8_t
 
vÆue
 = (uöt8_t)(~(
lock_bôs
)); \

511 
__asm__
 
__vﬁ©ûe__
 \

519 : "i" (
	`_SFR_IO_ADDR
(
__SPM_REG
)), \

520 "r" ((
uöt8_t
)
__BOOT_LOCK_BITS_SET
), \

521 "r" (
vÆue
) \

524 }))

	)

526 
	#__boŸ_lock_bôs_£t
(
lock_bôs
) \

527 (
	`__exãnsi⁄__
({ \

528 
uöt8_t
 
vÆue
 = (uöt8_t)(~(
lock_bôs
)); \

529 
__asm__
 
__vﬁ©ûe__
 \

537 : "i" (
	`_SFR_MEM_ADDR
(
__SPM_REG
)), \

538 "r" ((
uöt8_t
)
__BOOT_LOCK_BITS_SET
), \

539 "r" (
vÆue
) \

542 }))

	)

544 
	#__boŸ_lock_bôs_£t_Æã∫©e
(
lock_bôs
) \

545 (
	`__exãnsi⁄__
({ \

546 
uöt8_t
 
vÆue
 = (uöt8_t)(~(
lock_bôs
)); \

547 
__asm__
 
__vﬁ©ûe__
 \

557 : "i" (
	`_SFR_MEM_ADDR
(
__SPM_REG
)), \

558 "r" ((
uöt8_t
)
__BOOT_LOCK_BITS_SET
), \

559 "r" (
vÆue
) \

562 }))

	)

587 
	#GET_LOW_FUSE_BITS
 (0x0000)

	)

592 
	#GET_LOCK_BITS
 (0x0001)

	)

597 
	#GET_EXTENDED_FUSE_BITS
 (0x0002)

	)

602 
	#GET_HIGH_FUSE_BITS
 (0x0003)

	)

616 
	#boŸ_lock_fu£_bôs_gë_sh‹t
(
addªss
) \

617 (
	`__exãnsi⁄__
({ \

618 
uöt8_t
 
__ªsu…
; \

619 
__asm__
 
__vﬁ©ûe__
 \

625 : "Ù" (
__ªsu…
) \

626 : "i" (
	`_SFR_IO_ADDR
(
__SPM_REG
)), \

627 "r" ((
uöt8_t
)
__BOOT_LOCK_BITS_SET
), \

628 "M" (
addªss
) \

631 
__ªsu…
; \

632 }))

	)

634 
	#boŸ_lock_fu£_bôs_gë
(
addªss
) \

635 (
	`__exãnsi⁄__
({ \

636 
uöt8_t
 
__ªsu…
; \

637 
__asm__
 
__vﬁ©ûe__
 \

643 : "Ù" (
__ªsu…
) \

644 : "i" (
	`_SFR_MEM_ADDR
(
__SPM_REG
)), \

645 "r" ((
uöt8_t
)
__BOOT_LOCK_BITS_SET
), \

646 "M" (
addªss
) \

649 
__ªsu…
; \

650 }))

	)

663 
	#__BOOT_SIGROW_READ
 (
	`_BV
(
__SPM_ENABLE
Ë| _BV(
SIGRD
))

	)

665 
	#boŸ_sig«tuª_byã_gë_sh‹t
(
addr
) \

666 (
	`__exãnsi⁄__
({ \

667 
uöt16_t
 
__addr16
 = (uöt16_t)(
addr
); \

668 
uöt8_t
 
__ªsu…
; \

669 
__asm__
 
__vﬁ©ûe__
 \

673 : "Ù" (
__ªsu…
) \

674 : "i" (
	`_SFR_IO_ADDR
(
__SPM_REG
)), \

675 "r" ((
uöt8_t
Ë
__BOOT_SIGROW_READ
), \

676 "z" (
__addr16
) \

678 
__ªsu…
; \

679 }))

	)

681 
	#boŸ_sig«tuª_byã_gë
(
addr
) \

682 (
	`__exãnsi⁄__
({ \

683 
uöt16_t
 
__addr16
 = (uöt16_t)(
addr
); \

684 
uöt8_t
 
__ªsu…
; \

685 
__asm__
 
__vﬁ©ûe__
 \

689 : "Ù" (
__ªsu…
) \

690 : "i" (
	`_SFR_MEM_ADDR
(
__SPM_REG
)), \

691 "r" ((
uöt8_t
Ë
__BOOT_SIGROW_READ
), \

692 "z" (
__addr16
) \

694 
__ªsu…
; \

695 }))

	)

758 #i‡
deföed
(
__AVR_ATmega161__
Ë|| deföed(
__AVR_ATmega163__
) \

759 || 
	$deföed
(
__AVR_ATmega323__
)

762 
	#boŸ_∑ge_fûl
(
addªss
, 
d©a
Ë
	`__boŸ_∑ge_fûl_Æã∫©e
◊ddªss, d©a)

	)

763 
	#boŸ_∑ge_îa£
(
addªss
Ë
	`__boŸ_∑ge_îa£_Æã∫©e
◊ddªss)

	)

764 
	#boŸ_∑ge_wrôe
(
addªss
Ë
	`__boŸ_∑ge_wrôe_Æã∫©e
◊ddªss)

	)

765 
	#boŸ_rww_íabÀ
(Ë
	`__boŸ_rww_íabÀ_Æã∫©e
()

	)

766 
	#boŸ_lock_bôs_£t
(
lock_bôs
Ë
	`__boŸ_lock_bôs_£t_Æã∫©e
÷ock_bôs)

	)

768 #ñi‡(
FLASHEND
 > 
USHRT_MAX
)

771 
	#boŸ_∑ge_fûl
(
addªss
, 
d©a
Ë
	`__boŸ_∑ge_fûl_exãnded_sh‹t
◊ddªss, d©a)

	)

772 
	#boŸ_∑ge_îa£
(
addªss
Ë
	`__boŸ_∑ge_îa£_exãnded_sh‹t
◊ddªss)

	)

773 
	#boŸ_∑ge_wrôe
(
addªss
Ë
	`__boŸ_∑ge_wrôe_exãnded_sh‹t
◊ddªss)

	)

774 
	#boŸ_rww_íabÀ
(Ë
	`__boŸ_rww_íabÀ_sh‹t
()

	)

775 
	#boŸ_lock_bôs_£t
(
lock_bôs
Ë
	`__boŸ_lock_bôs_£t_sh‹t
÷ock_bôs)

	)

780 
	#boŸ_∑ge_fûl
(
addªss
, 
d©a
Ë
	`__boŸ_∑ge_fûl_sh‹t
◊ddªss, d©a)

	)

781 
	#boŸ_∑ge_îa£
(
addªss
Ë
	`__boŸ_∑ge_îa£_sh‹t
◊ddªss)

	)

782 
	#boŸ_∑ge_wrôe
(
addªss
Ë
	`__boŸ_∑ge_wrôe_sh‹t
◊ddªss)

	)

783 
	#boŸ_rww_íabÀ
(Ë
	`__boŸ_rww_íabÀ_sh‹t
()

	)

784 
	#boŸ_lock_bôs_£t
(
lock_bôs
Ë
	`__boŸ_lock_bôs_£t_sh‹t
÷ock_bôs)

	)

793 
	#boŸ_∑ge_fûl_ß„
(
addªss
, 
d©a
) \

795 
	`boŸ_•m_busy_waô
(); \

796 
	`ì¥om_busy_waô
(); \

797 
	`boŸ_∑ge_fûl
(
addªss
, 
d©a
); \

798 
	}
} 0)

	)

805 
	#boŸ_∑ge_îa£_ß„
(
addªss
) \

807 
	`boŸ_•m_busy_waô
(); \

808 
	`ì¥om_busy_waô
(); \

809 
	`boŸ_∑ge_îa£
 (
addªss
); \

810 } 0)

	)

817 
	#boŸ_∑ge_wrôe_ß„
(
addªss
) \

819 
	`boŸ_•m_busy_waô
(); \

820 
	`ì¥om_busy_waô
(); \

821 
	`boŸ_∑ge_wrôe
 (
addªss
); \

822 } 0)

	)

829 
	#boŸ_rww_íabÀ_ß„
() \

831 
	`boŸ_•m_busy_waô
(); \

832 
	`ì¥om_busy_waô
(); \

833 
	`boŸ_rww_íabÀ
(); \

834 } 0)

	)

841 
	#boŸ_lock_bôs_£t_ß„
(
lock_bôs
) \

843 
	`boŸ_•m_busy_waô
(); \

844 
	`ì¥om_busy_waô
(); \

845 
	`boŸ_lock_bôs_£t
 (
lock_bôs
); \

846 } 0)

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/bootloaders/atmega1284p/optiboot.c

164 
	#OPTIBOOT_MAJVER
 4

	)

165 
	#OPTIBOOT_MINVER
 5

	)

167 
	#MAKESTR
(
a
Ë#a

	)

168 
	#MAKEVER
(
a
, 
b
Ë
	`MAKESTR
◊*256+b)

	)

170 
asm
(" .section .version\n"

171 "›tiboŸ_vîsi⁄: .w‹d " 
MAKEVER
(
OPTIBOOT_MAJVER
, 
OPTIBOOT_MINVER
) "\n"

174 
	~<öây≥s.h
>

175 
	~<avr/io.h
>

176 
	~<avr/pgm•a˚.h
>

180 
	~"boŸ.h
"

185 
	~"pö_defs.h
"

186 
	~"°k500.h
"

188 #i‚de‡
LED_START_FLASHES


189 
	#LED_START_FLASHES
 0

	)

192 #ifde‡
LUDICROUS_SPEED


193 
	#BAUD_RATE
 230400L

	)

197 #i‚de‡
BAUD_RATE


198 #i‡
F_CPU
 >= 8000000L

199 
	#BAUD_RATE
 115200L

200 #ñsi‡
F_CPU
 >1000000L

	)

201 
	#BAUD_RATE
 9600L

202 #ñsi‡
F_CPU
 >128000L

	)

203 
	#BAUD_RATE
 4800L

204 #ñ£

	)

205 
	#BAUD_RATE
 1200L

208 

	)

217 #i‡(
F_CPU
/
BAUD_RATE
) > 280

218 #i‚de‡
SOFT_UART


219 
	#SOFT_UART


	)

223 #i‡(
F_CPU
 + 
BAUD_RATE
 * 4L) / (BAUD_RATE * 8L) - 1 > 250

224 #îr‹ 
U«chõvabÀ
 
baud
 
øã
 (
too
 
¶ow
Ë
BAUD_RATE


226 #i‡(
F_CPU
 + 
BAUD_RATE
 * 4L) / (BAUD_RATE * 8L) - 1 < 3

227 #îr‹ 
U«chõvabÀ
 
baud
 
øã
 (
too
 
Á°
Ë
BAUD_RATE


232 
	#WATCHDOG_OFF
 (0)

	)

233 
	#WATCHDOG_16MS
 (
	`_BV
(
WDE
))

	)

234 
	#WATCHDOG_32MS
 (
	`_BV
(
WDP0
Ë| _BV(
WDE
))

	)

235 
	#WATCHDOG_64MS
 (
	`_BV
(
WDP1
Ë| _BV(
WDE
))

	)

236 
	#WATCHDOG_125MS
 (
	`_BV
(
WDP1
Ë| _BV(
WDP0
Ë| _BV(
WDE
))

	)

237 
	#WATCHDOG_250MS
 (
	`_BV
(
WDP2
Ë| _BV(
WDE
))

	)

238 
	#WATCHDOG_500MS
 (
	`_BV
(
WDP2
Ë| _BV(
WDP0
Ë| _BV(
WDE
))

	)

239 
	#WATCHDOG_1S
 (
	`_BV
(
WDP2
Ë| _BV(
WDP1
Ë| _BV(
WDE
))

	)

240 
	#WATCHDOG_2S
 (
	`_BV
(
WDP2
Ë| _BV(
WDP1
Ë| _BV(
WDP0
Ë| _BV(
WDE
))

	)

241 #i‚de‡
__AVR_ATmega8__


242 
	#WATCHDOG_4S
 (
	`_BV
(
WDP3
Ë| _BV(
WDE
))

	)

243 
	#WATCHDOG_8S
 (
	`_BV
(
WDP3
Ë| _BV(
WDP0
Ë| _BV(
WDE
))

	)

250 
	$maö
(Ë
	`__©åibuã__
 ((
OS_maö
)Ë__©åibuã__ ((
	`£˘i⁄
 (".init9")));

251 
	`putch
();

252 
uöt8_t
 
	`gëch
();

253 
ölöe
 
	`gëNch
(
uöt8_t
);

254 
	`vîifyS∑˚
();

255 
ölöe
 
	`Êash_Àd
(
uöt8_t
);

256 
uöt8_t
 
	`gëLí
();

257 
ölöe
 
	`w©chdogRe£t
();

258 
	`w©chdogC⁄fig
(
uöt8_t
 
x
);

259 #ifde‡
SOFT_UART


260 
	$u¨tDñay
(Ë
	`__©åibuã__
 ((
«ked
));

262 
	$≠pSèπ
(Ë
	`__©åibuã__
 ((
«ked
));

279 #i‡
	`deföed
(
__AVR_ATmega168__
)

280 
	#RAMSTART
 (0x100)

	)

281 
	#NRWWSTART
 (0x3800)

	)

282 #ñi‡
	`deföed
(
__AVR_ATmega328P__
)

283 
	#RAMSTART
 (0x100)

	)

284 
	#NRWWSTART
 (0x7000)

	)

285 #ñi‡
	`deföed
 (
__AVR_ATmega644P__
)

286 
	#RAMSTART
 (0x100)

	)

287 
	#NRWWSTART
 (0xE000)

	)

288 #ñi‡
	`deföed
 (
__AVR_ATmega1284P__
)

289 
	#RAMSTART
 (0x100)

	)

290 
	#NRWWSTART
 (0xE000)

	)

291 #ñi‡
	`deföed
(
__AVR_ATtöy84__
)

292 
	#RAMSTART
 (0x100)

	)

293 
	#NRWWSTART
 (0x0000)

	)

294 #ñi‡
	`deföed
(
__AVR_ATmega1280__
)

295 
	#RAMSTART
 (0x200)

	)

296 
	#NRWWSTART
 (0xE000)

	)

297 #ñi‡
	`deföed
(
__AVR_ATmega8__
Ë|| deföed(
__AVR_ATmega88__
)

298 
	#RAMSTART
 (0x100)

	)

299 
	#NRWWSTART
 (0x1800)

	)

305 
	#buff
 ((
uöt8_t
*)(
RAMSTART
))

	)

306 #ifde‡
VIRTUAL_BOOT_PARTITION


307 
	#r°Ve˘
 (*(
uöt16_t
*)(
RAMSTART
+
SPM_PAGESIZE
*2+4))

	)

308 
	#wdtVe˘
 (*(
uöt16_t
*)(
RAMSTART
+
SPM_PAGESIZE
*2+6))

	)

312 
	$maö
() {

313 
uöt8_t
 
ch
;

321 
uöt16_t
 
addªss
 = 0;

322 
uöt8_t
 
Àngth
;

333 
asm
 volatile ("clr __zero_reg__");

334 #ifde‡
__AVR_ATmega8__


335 
SP
=
RAMEND
;

339 
ch
 = 
MCUSR
;

340 
MCUSR
 = 0;

341 i‡(!(
ch
 & 
	`_BV
(
EXTRF
))Ë
	`≠pSèπ
();

343 #i‡
LED_START_FLASHES
 > 0

345 
TCCR1B
 = 
	`_BV
(
CS12
Ë| _BV(
CS10
);

347 #i‚de‡
SOFT_UART


348 #ifde‡
__AVR_ATmega8__


349 
UCSRA
 = 
	`_BV
(
U2X
);

350 
UCSRB
 = 
	`_BV
(
RXEN
Ë| _BV(
TXEN
);

351 
UCSRC
 = 
	`_BV
(
URSEL
Ë| _BV(
UCSZ1
Ë| _BV(
UCSZ0
);

352 
UBRRL
 = (
uöt8_t
)–(
F_CPU
 + 
BAUD_RATE
 * 4L) / (BAUD_RATE * 8L) - 1 );

354 
UCSR0A
 = 
	`_BV
(
U2X0
);

355 
UCSR0B
 = 
	`_BV
(
RXEN0
Ë| _BV(
TXEN0
);

356 
UCSR0C
 = 
	`_BV
(
UCSZ00
Ë| _BV(
UCSZ01
);

357 
UBRR0L
 = (
uöt8_t
)–(
F_CPU
 + 
BAUD_RATE
 * 4L) / (BAUD_RATE * 8L) - 1 );

362 
	`w©chdogC⁄fig
(
WATCHDOG_1S
);

365 
LED_DDR
 |
	`_BV
(
LED
);

367 #ifde‡
SOFT_UART


369 
UART_DDR
 |
	`_BV
(
UART_TX_BIT
);

372 #i‡
LED_START_FLASHES
 > 0

374 
	`Êash_Àd
(
LED_START_FLASHES
 * 2);

380 
ch
 = 
	`gëch
();

382 if(
ch
 =
STK_GET_PARAMETER
) {

383 
which
 = 
	`gëch
();

384 
	`vîifyS∑˚
();

385 i‡(
which
 == 0x82) {

389 
	`putch
(
OPTIBOOT_MINVER
);

390 } i‡(
which
 == 0x81) {

391 
	`putch
(
OPTIBOOT_MAJVER
);

397 
	`putch
(0x03);

400 if(
ch
 =
STK_SET_DEVICE
) {

402 
	`gëNch
(20);

404 if(
ch
 =
STK_SET_DEVICE_EXT
) {

406 
	`gëNch
(5);

408 if(
ch
 =
STK_LOAD_ADDRESS
) {

410 
uöt16_t
 
√wAddªss
;

411 
√wAddªss
 = 
	`gëch
();

412 
√wAddªss
 = (√wAddªs†& 0xffË| (
	`gëch
() << 8);

413 #ifde‡
RAMPZ


415 
RAMPZ
 = (
√wAddªss
 & 0x8000) ? 1 : 0;

417 
√wAddªss
 +=ÇewAddress;

418 
addªss
 = 
√wAddªss
;

419 
	`vîifyS∑˚
();

421 if(
ch
 =
STK_UNIVERSAL
) {

423 
	`gëNch
(4);

424 
	`putch
(0x00);

427 if(
ch
 =
STK_PROG_PAGE
) {

429 
uöt8_t
 *
bufPå
;

430 
uöt16_t
 
addrPå
;

432 
	`gëch
();

433 
Àngth
 = 
	`gëch
();

434 
	`gëch
();

437 i‡(
addªss
 < 
NRWWSTART
Ë
	`__boŸ_∑ge_îa£_sh‹t
((
uöt16_t
)(*)address);

440 
bufPå
 = 
buff
;

441 dÿ*
bufPå
++ = 
	`gëch
();

442 --
Àngth
);

446 i‡(
addªss
 >
NRWWSTART
Ë
	`__boŸ_∑ge_îa£_sh‹t
((
uöt16_t
)(*)address);

449 
	`vîifyS∑˚
();

453 
	`boŸ_•m_busy_waô
();

455 #ifde‡
VIRTUAL_BOOT_PARTITION


456 i‡((
uöt16_t
)(*)
addªss
 == 0) {

461 
uöt16_t
 
ve˘
 = 
buff
[0] | (buff[1]<<8);

462 
r°Ve˘
 = 
ve˘
;

463 
wdtVe˘
 = 
buff
[8] | (buff[9]<<8);

464 
ve˘
 -= 4;

465 
buff
[8] = 
ve˘
 & 0xff;

466 
buff
[9] = 
ve˘
 >> 8;

469 
buff
[0] = 0x7f;

470 
buff
[1] = 0xce;

475 
bufPå
 = 
buff
;

476 
addrPå
 = (
uöt16_t
)(*)
addªss
;

477 
ch
 = 
SPM_PAGESIZE
 / 2;

479 
uöt16_t
 
a
;

480 
a
 = *
bufPå
++;

481 
a
 |(*
bufPå
++) << 8;

482 
	`__boŸ_∑ge_fûl_sh‹t
((
uöt16_t
)(*)
addrPå
,
a
);

483 
addrPå
 += 2;

484 } --
ch
);

487 
	`__boŸ_∑ge_wrôe_sh‹t
((
uöt16_t
)(*)
addªss
);

488 
	`boŸ_•m_busy_waô
();

490 #i‡
	`deföed
(
RWWSRE
)

492 
	`boŸ_rww_íabÀ
();

497 if(
ch
 =
STK_READ_PAGE
) {

499 
	`gëch
();

500 
Àngth
 = 
	`gëch
();

501 
	`gëch
();

503 
	`vîifyS∑˚
();

504 #ifde‡
VIRTUAL_BOOT_PARTITION


507 i‡(
addªss
 =0Ë
ch
=
r°Ve˘
 & 0xff;

508 i‡(
addªss
 =1Ë
ch
=
r°Ve˘
 >> 8;

509 i‡(
addªss
 =8Ë
ch
=
wdtVe˘
 & 0xff;

510 i‡(
addªss
 =9Ë
ch
=
wdtVe˘
 >> 8;

511 
ch
 = 
	`pgm_ªad_byã_√¨
(
addªss
);

512 
addªss
++;

513 
	`putch
(
ch
);

514 } --
Àngth
);

516 #ifde‡
RAMPZ


521 
uöt8_t
 
ªsu…
;

522 
	`__asm__
 ("ñpm %0,Z\n":"Ù"(
ªsu…
):"z"(
addªss
));

523 
	`putch
(
ªsu…
);

524 
addªss
++;

526 --
Àngth
);

528 dÿ
	`putch
(
	`pgm_ªad_byã_√¨
(
addªss
++));

529 --
Àngth
);

535 if(
ch
 =
STK_READ_SIGN
) {

537 
	`vîifyS∑˚
();

538 
	`putch
(
SIGNATURE_0
);

539 
	`putch
(
SIGNATURE_1
);

540 
	`putch
(
SIGNATURE_2
);

542 i‡(
ch
 =
STK_LEAVE_PROGMODE
) {

544 
	`w©chdogC⁄fig
(
WATCHDOG_16MS
);

545 
	`vîifyS∑˚
();

549 
	`vîifyS∑˚
();

551 
	`putch
(
STK_OK
);

553 
	}
}

555 
	$putch
(
ch
) {

556 #i‚de‡
SOFT_UART


557 !(
UCSR0A
 & 
	`_BV
(
UDRE0
)));

558 
UDR0
 = 
ch
;

560 
__asm__
 
	`__vﬁ©ûe__
 (

575 [
bô˙t
] "d" (10),

576 [
ch
] "r" (ch),

577 [
u¨tP‹t
] "I" (
	`_SFR_IO_ADDR
(
UART_PORT
)),

578 [
u¨tBô
] "I" (
UART_TX_BIT
)

583 
	}
}

585 
uöt8_t
 
	$gëch
() {

586 
uöt8_t
 
ch
;

588 #ifde‡
LED_DATA_FLASH


589 #ifde‡
__AVR_ATmega8__


590 
LED_PORT
 ^
	`_BV
(
LED
);

592 
LED_PIN
 |
	`_BV
(
LED
);

596 #ifde‡
SOFT_UART


597 
__asm__
 
	`__vﬁ©ûe__
 (

612 [
ch
] "=r" (ch)

614 [
bôC¡
] "d" (9),

615 [
u¨tPö
] "I" (
	`_SFR_IO_ADDR
(
UART_PIN
)),

616 [
u¨tBô
] "I" (
UART_RX_BIT
)

621 !(
UCSR0A
 & 
	`_BV
(
RXC0
)))

623 i‡(!(
UCSR0A
 & 
	`_BV
(
FE0
))) {

632 
	`w©chdogRe£t
();

635 
ch
 = 
UDR0
;

638 #ifde‡
LED_DATA_FLASH


639 #ifde‡
__AVR_ATmega8__


640 
LED_PORT
 ^
	`_BV
(
LED
);

642 
LED_PIN
 |
	`_BV
(
LED
);

646  
ch
;

647 
	}
}

649 #ifde‡
SOFT_UART


652 
	#UART_B_VALUE
 (((
F_CPU
/
BAUD_RATE
)-20)/6)

	)

653 #i‡
UART_B_VALUE
 > 255

654 #îr‹ 
Baud
 
øã
 
too
 
¶ow
 
so·
 
UART


657 
	$u¨tDñay
() {

658 
__asm__
 
	`__vﬁ©ûe__
 (

663 ::[
cou¡
] "M" (
UART_B_VALUE
)

665 
	}
}

668 
	$gëNch
(
uöt8_t
 
cou¡
) {

669 dÿ
	`gëch
(); --
cou¡
);

670 
	`vîifyS∑˚
();

671 
	}
}

673 
	$vîifyS∑˚
() {

674 i‡(
	`gëch
(Ë!
CRC_EOP
) {

675 
	`w©chdogC⁄fig
(
WATCHDOG_16MS
);

679 
	`putch
(
STK_INSYNC
);

680 
	}
}

682 #i‡
LED_START_FLASHES
 > 0

683 
	$Êash_Àd
(
uöt8_t
 
cou¡
) {

685 
TCNT1
 = -(
F_CPU
/(1024*16));

686 
TIFR1
 = 
	`_BV
(
TOV1
);

687 !(
TIFR1
 & 
	`_BV
(
TOV1
)));

688 #ifde‡
__AVR_ATmega8__


689 
LED_PORT
 ^
	`_BV
(
LED
);

691 
LED_PIN
 |
	`_BV
(
LED
);

693 
	`w©chdogRe£t
();

694 } --
cou¡
);

695 
	}
}

699 
	$w©chdogRe£t
() {

700 
__asm__
 
	`__vﬁ©ûe__
 (

703 
	}
}

705 
	$w©chdogC⁄fig
(
uöt8_t
 
x
) {

706 
WDTCSR
 = 
	`_BV
(
WDCE
Ë| _BV(
WDE
);

707 
WDTCSR
 = 
x
;

708 
	}
}

710 
	$≠pSèπ
() {

711 
	`w©chdogC⁄fig
(
WATCHDOG_OFF
);

712 
__asm__
 
	`__vﬁ©ûe__
 (

713 #ifde‡
VIRTUAL_BOOT_PARTITION


724 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/bootloaders/atmega1284p/pin_defs.h

1 #i‡
deföed
(
__AVR_ATmega168__
Ë|| deföed(
__AVR_ATmega328P__
Ë|| deföed(
__AVR_ATmega88
Ë|| deföed(
__AVR_ATmega8__
Ë|| deföed(
__AVR_ATmega88__
)

3 
	#LED_DDR
 
DDRB


	)

4 
	#LED_PORT
 
PORTB


	)

5 
	#LED_PIN
 
PINB


	)

6 
	#LED
 
PINB5


	)

9 #ifde‡
SOFT_UART


10 
	#UART_PORT
 
PORTD


	)

11 
	#UART_PIN
 
PIND


	)

12 
	#UART_DDR
 
DDRD


	)

13 
	#UART_TX_BIT
 1

	)

14 
	#UART_RX_BIT
 0

	)

18 #i‡
deföed
(
__AVR_ATmega8__
)

20 
	#UCSR0A
 
UCSRA


	)

21 
	#UDR0
 
UDR


	)

22 
	#UDRE0
 
UDRE


	)

23 
	#RXC0
 
RXC


	)

24 
	#FE0
 
FE


	)

25 
	#TIFR1
 
TIFR


	)

26 
	#WDTCSR
 
WDTCR


	)

30 #i‡
deföed
(
__AVR_ATtöy84__
)

32 
	#LED_DDR
 
DDRA


	)

33 
	#LED_PORT
 
PORTA


	)

34 
	#LED_PIN
 
PINA


	)

35 
	#LED
 
PINA4


	)

37 #ifde‡
SOFT_UART


38 
	#UART_PORT
 
PORTA


	)

39 
	#UART_PIN
 
PINA


	)

40 
	#UART_DDR
 
DDRA


	)

41 
	#UART_TX_BIT
 2

	)

42 
	#UART_RX_BIT
 3

	)

47 #i‡
deföed
(
__AVR_ATmega644P__
Ë|| deföed(
__AVR_ATmega1284P__
)

49 
	#LED_DDR
 
DDRB


	)

50 
	#LED_PORT
 
PORTB


	)

51 
	#LED_PIN
 
PINB


	)

52 
	#LED
 
PINB0


	)

55 #ifde‡
SOFT_UART


56 
	#UART_PORT
 
PORTD


	)

57 
	#UART_PIN
 
PIND


	)

58 
	#UART_DDR
 
DDRD


	)

59 
	#UART_TX_BIT
 1

	)

60 
	#UART_RX_BIT
 0

	)

65 #i‡
deföed
(
__AVR_ATmega1280__
)

67 
	#LED_DDR
 
DDRB


	)

68 
	#LED_PORT
 
PORTB


	)

69 
	#LED_PIN
 
PINB


	)

70 
	#LED
 
PINB7


	)

73 #ifde‡
SOFT_UART


74 
	#UART_PORT
 
PORTE


	)

75 
	#UART_PIN
 
PINE


	)

76 
	#UART_DDR
 
DDRE


	)

77 
	#UART_TX_BIT
 1

	)

78 
	#UART_RX_BIT
 0

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/bootloaders/atmega1284p/stk500.h

2 
	#STK_OK
 0x10

	)

3 
	#STK_FAILED
 0x11

4 
	#STK_UNKNOWN
 0x12

5 
	#STK_NODEVICE
 0x13

6 
	#STK_INSYNC
 0x14

7 
	#STK_NOSYNC
 0x15

8 
	#ADC_CHANNEL_ERROR
 0x16

9 
	#ADC_MEASURE_OK
 0x17

10 
	#PWM_CHANNEL_ERROR
 0x18

11 
	#PWM_ADJUST_OK
 0x19

12 
	#CRC_EOP
 0x20

13 
	#STK_GET_SYNC
 0x30

14 
	#STK_GET_SIGN_ON
 0x31

15 
	#STK_SET_PARAMETER
 0x40

16 
	#STK_GET_PARAMETER
 0x41

17 
	#STK_SET_DEVICE
 0x42

18 
	#STK_SET_DEVICE_EXT
 0x45

19 
	#STK_ENTER_PROGMODE
 0x50

20 
	#STK_LEAVE_PROGMODE
 0x51

21 
	#STK_CHIP_ERASE
 0x52

22 
	#STK_CHECK_AUTOINC
 0x53

23 
	#STK_LOAD_ADDRESS
 0x55

24 
	#STK_UNIVERSAL
 0x56

25 
	#STK_PROG_FLASH
 0x60

26 
	#STK_PROG_DATA
 0x61

27 
	#STK_PROG_FUSE
 0x62

28 
	#STK_PROG_LOCK
 0x63

29 
	#STK_PROG_PAGE
 0x64

30 
	#STK_PROG_FUSE_EXT
 0x65

31 
	#STK_READ_FLASH
 0x70

32 
	#STK_READ_DATA
 0x71

33 
	#STK_READ_FUSE
 0x72

34 
	#STK_READ_LOCK
 0x73

35 
	#STK_READ_PAGE
 0x74

36 
	#STK_READ_SIGN
 0x75

37 
	#STK_READ_OSCCAL
 0x76

38 
	#STK_READ_FUSE_EXT
 0x77

39 
	#STK_READ_OSCCAL_EXT
 0x78

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/bootloaders/atmega644p/ATmegaBOOT.c

69 
	~<öây≥s.h
>

70 
	~<avr/io.h
>

71 
	~<avr/pgm•a˚.h
>

72 
	~<avr/öãºu±.h
>

73 
	~<avr/wdt.h
>

74 
	~<avr/boŸ.h
>

76 #ifde‡
ADABOOT


77 
	#NUM_LED_FLASHES
 3

	)

78 
	#ADABOOT_VER
 1

	)

83 
	#MAX_ERROR_COUNT
 5

	)

87 
	#BAUD_RATE
 38400

	)

91 
	#HW_VER
 0x02

	)

92 
	#SW_MAJOR
 0x01

	)

93 
	#SW_MINOR
 0x10

	)

97 
	#LED_DDR
 
DDRB


	)

98 
	#LED_PORT
 
PORTB


	)

99 
	#LED_PIN
 
PINB


	)

100 
	#LED
 
PINB0


	)

104 
	#SIG1
 0x1E

105 #i‡
	`deföed
(
__AVR_ATmega644P__
)

	)

106 
	#SIG2
 0x96

	)

107 
	#SIG3
 0x0A

	)

108 #ñi‡
deföed
(
__AVR_ATmega644__
)

109 
	#SIG2
 0x96

	)

110 
	#SIG3
 0x09

	)

111 #ñi‡
deföed
(
__AVR_ATmega324P__
)

112 
	#SIG2
 0x95

	)

113 
	#SIG3
 0x08

	)

115 
	#PAGE_SIZE
 0x080U

116 
	#PAGE_SIZE_BYTES
 0x100U

117 

	)

119 
putch
();

120 
gëch
();

121 
gëNch
(
uöt8_t
);

122 
byã_ª•⁄£
(
uöt8_t
);

123 
nŸhög_ª•⁄£
();

124 
gëhex
();

125 
puthex
();

126 
Êash_Àd
(
uöt8_t
);

129 
	uaddªss_uni⁄


131 
uöt16_t
 
	mw‹d
;

132 
uöt8_t
 
	mbyã
[2];

133 } 
	gaddªss
;

135 
	uÀngth_uni⁄


137 
uöt16_t
 
	mw‹d
;

138 
uöt8_t
 
	mbyã
[2];

139 } 
	gÀngth
;

141 
	sÊags_°ru˘


143 
	mì¥om
 : 1;

144 
	mømpz
 : 1;

145 } 
	gÊags
;

147 
uöt8_t
 
	gbuff
[256];

149 
uöt8_t
 
	gîr‹_cou¡
 = 0;

150 
uöt8_t
 
	g§eg
;

152 (*
≠p_°¨t
)() = 0x0000;

155 
	$maö
()

157 
uöt8_t
 
ch
,
ch2
;

158 
uöt16_t
 
w
;

159 
uöt16_t
 
i
;

161 
asm
 volatile("nop\n\t");

163 #ifde‡
ADABOOT


164 
ch
 = 
MCUSR
;

165 
MCUSR
 = 0;

167 
WDTCSR
 |
	`_BV
(
WDCE
Ë| _BV(
WDE
);

168 
WDTCSR
 = 0;

171 i‡(! (
ch
 & 
	`_BV
(
EXTRF
)))

172 
	`≠p_°¨t
();

177 
UBRR0L
 = (
uöt8_t
)(
F_CPU
/(
BAUD_RATE
*16L)-1);

178 
UBRR0H
 = (
F_CPU
/(
BAUD_RATE
*16L)-1) >> 8;

179 
UCSR0B
 = (1<<
RXEN0
Ë| (1<<
TXEN0
);

180 
UCSR0C
 = (1<<
UCSZ00
Ë| (1<<
UCSZ01
);

185 
DDRD
 &~
	`_BV
(
PIND0
);

186 
PORTD
 |
	`_BV
(
PIND0
);

189 
LED_DDR
 |
	`_BV
(
LED
);

196 
	`Êash_Àd
(
NUM_LED_FLASHES
);

198 #ifdef 
ADABOOT


199 
	`Êash_Àd
(
ADABOOT_VER
);

206 
ch
 = 
	`gëch
();

211 if(
ch
=='0')

212 
	`nŸhög_ª•⁄£
();

218 if(
ch
=='1')

220 i‡(
	`gëch
() == ' ')

222 
	`putch
(0x14);

223 
	`putch
('A');

224 
	`putch
('V');

225 
	`putch
('R');

226 
	`putch
(' ');

227 
	`putch
('I');

228 
	`putch
('S');

229 
	`putch
('P');

230 
	`putch
(0x10);

234 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

235 
	`≠p_°¨t
();

241 if(
ch
=='@')

243 
ch2
 = 
	`gëch
();

244 i‡(
ch2
 > 0x85)

245 
	`gëch
();

246 
	`nŸhög_ª•⁄£
();

251 if(
ch
=='A')

253 
ch2
 = 
	`gëch
();

254 if(
ch2
 == 0x80)

255 
	`byã_ª•⁄£
(
HW_VER
);

256 if(
ch2
==0x81)

257 
	`byã_ª•⁄£
(
SW_MAJOR
);

258 if(
ch2
==0x82)

259 
	`byã_ª•⁄£
(
SW_MINOR
);

260 if(
ch2
==0x98)

261 
	`byã_ª•⁄£
(0x03);

263 
	`byã_ª•⁄£
(0x00);

268 if(
ch
=='B')

270 
	`gëNch
(20);

271 
	`nŸhög_ª•⁄£
();

276 if(
ch
=='E')

278 
	`gëNch
(5);

279 
	`nŸhög_ª•⁄£
();

284 if(
ch
=='P')

286 
	`nŸhög_ª•⁄£
();

291 if(
ch
=='Q')

293 
	`nŸhög_ª•⁄£
();

294 #ifde‡
ADABOOT


296 
WDTCSR
 = 
	`_BV
(
WDE
);

303 if(
ch
=='R')

305 
	`nŸhög_ª•⁄£
();

312 if(
ch
=='U')

314 
addªss
.
byã
[0] = 
	`gëch
();

315 
addªss
.
byã
[1] = 
	`gëch
();

316 
	`nŸhög_ª•⁄£
();

321 if(
ch
=='V')

323 
	`gëNch
(4);

324 
	`byã_ª•⁄£
(0x00);

329 if(
ch
=='d')

331 
Àngth
.
byã
[1] = 
	`gëch
();

332 
Àngth
.
byã
[0] = 
	`gëch
();

334 
Êags
.
ì¥om
 = 0;

335 i‡(
	`gëch
() == 'E')

336 
Êags
.
ì¥om
 = 1;

338 
i
=0; i<
PAGE_SIZE
; i++)

339 
buff
[
i
] = 0;

341 
w
 = 0; w < 
Àngth
.
w‹d
; w++)

344 
buff
[
w
] = 
	`gëch
();

347 i‡(
	`gëch
() == ' ')

349 i‡(
Êags
.
ì¥om
)

352 
w
=0;w<
Àngth
.
w‹d
;w++)

354 
EECR
 & (1<<
EEPE
));

356 
EEAR
 = (
uöt16_t
)(*)
addªss
.
w‹d
;

357 
EEDR
 = 
buff
[
w
];

358 
EECR
 |(1<<
EEMPE
);

359 
EECR
 |(1<<
EEPE
);

361 
addªss
.
w‹d
++;

367 
addªss
.
w‹d
 =áddress.word << 1;

370 i‡((
Àngth
.
byã
[0] & 0x01))

371 
Àngth
.
w‹d
++;

376 
EECR
 & (1<<
EEPE
));

378 
asm
 volatile(

452 : "=m" (
SPMCSR
Ë: "M" (
PAGE_SIZE
) : "r0","r16","r17","r24","r25","r28","r29","r30","r31"

456 
	`putch
(0x14);

457 
	`putch
(0x10);

461 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

462 
	`≠p_°¨t
();

467 if(
ch
=='t')

469 
Àngth
.
byã
[1] = 
	`gëch
();

470 
Àngth
.
byã
[0] = 
	`gëch
();

472 i‡(
	`gëch
() == 'E')

473 
Êags
.
ì¥om
 = 1;

476 
Êags
.
ì¥om
 = 0;

477 
addªss
.
w‹d
 =áddress.word << 1;

481 i‡(
	`gëch
() == ' ')

483 
	`putch
(0x14);

484 
w
=0; w<
Àngth
.
w‹d
; w++)

487 i‡(
Êags
.
ì¥om
)

490 
EECR
 & (1<<
EEPE
));

491 
EEAR
 = (
uöt16_t
)(*)
addªss
.
w‹d
;

492 
EECR
 |(1<<
EERE
);

493 
	`putch
(
EEDR
);

495 
addªss
.
w‹d
++;

499 i‡(!
Êags
.
ømpz
)

500 
	`putch
(
	`pgm_ªad_byã_√¨
(
addªss
.
w‹d
));

502 
addªss
.
w‹d
++;

505 
	`putch
(0x10);

511 if(
ch
=='u')

513 i‡(
	`gëch
() == ' ')

515 
	`putch
(0x14);

516 
	`putch
(
SIG1
);

517 
	`putch
(
SIG2
);

518 
	`putch
(
SIG3
);

519 
	`putch
(0x10);

523 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

524 
	`≠p_°¨t
();

530 if(
ch
=='v')

531 
	`byã_ª•⁄£
(0x00);

533 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

534 
	`≠p_°¨t
();

538 
	}
}

541 
	$gëhex
()

543 
ah
,
Æ
;

545 
ah
 = 
	`gëch
();

546 
	`putch
(
ah
);

547 
Æ
 = 
	`gëch
();

548 
	`putch
(
Æ
);

550 if(
ah
 >= 'a')

551 
ah
 =áh - 'a' + 0x0a;

552 if(
ah
 >= '0')

553 
ah
 -= '0';

554 if(
Æ
 >= 'a')

555 
Æ
 =ál - 'a' + 0x0a;

556 if(
Æ
 >= '0')

557 
Æ
 -= '0';

559  (
ah
 << 4Ë+ 
Æ
;

560 
	}
}

563 
	$puthex
(
ch
)

565 
ah
,
Æ
;

567 
ah
 = (
ch
 & 0xf0) >> 4;

568 if(
ah
 >= 0x0a)

569 
ah
 =áh - 0x0a + 'a';

571 
ah
 += '0';

573 
Æ
 = (
ch
 & 0x0f);

574 if(
Æ
 >= 0x0a)

575 
Æ
 =ál - 0x0a + 'a';

577 
Æ
 += '0';

579 
	`putch
(
ah
);

580 
	`putch
(
Æ
);

581 
	}
}

584 
	$putch
(
ch
)

586 !(
UCSR0A
 & 
	`_BV
(
UDRE0
)));

587 
UDR0
 = 
ch
;

588 
	}
}

593 
	$gëch
()

595 
uöt32_t
 
cou¡
 = 0;

597 #ifde‡
ADABOOT


598 
LED_PORT
 &~
	`_BV
(
LED
);

601 !(
UCSR0A
 & 
	`_BV
(
RXC0
)))

605 
cou¡
++;

606 i‡(
cou¡
 > 
MAX_TIME_COUNT
)

607 
	`≠p_°¨t
();

610 #ifde‡
ADABOOT


611 
LED_PORT
 |
	`_BV
(
LED
);

614  
UDR0
;

615 
	}
}

618 
	$gëNch
(
uöt8_t
 
cou¡
)

620 
uöt8_t
 
i
;

621 
i
=0;i<
cou¡
;i++)

623 !(
UCSR0A
 & 
	`_BV
(
RXC0
)));

624 
UDR0
;

626 
	}
}

629 
	$byã_ª•⁄£
(
uöt8_t
 
vÆ
)

631 i‡(
	`gëch
() == ' ')

633 
	`putch
(0x14);

634 
	`putch
(
vÆ
);

635 
	`putch
(0x10);

639 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

640 
	`≠p_°¨t
();

642 
	}
}

645 
	$nŸhög_ª•⁄£
()

647 i‡(
	`gëch
() == ' ')

649 
	`putch
(0x14);

650 
	`putch
(0x10);

654 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

655 
	`≠p_°¨t
();

657 
	}
}

659 #ifde‡
ADABOOT


661 
	$Êash_Àd
(
uöt8_t
 
cou¡
)

667 vﬁ©ûê
uöt32_t
 
l
;

669 i‡(
cou¡
 == 0) {

670 
cou¡
 = 
ADABOOT
;

674 
öt8_t
 
i
;

675 
i
 = 0; i < 
cou¡
; ++i) {

676 
LED_PORT
 |
	`_BV
(
LED
);

677 
l
 = 0;Ü < (
F_CPU
 / 1000); ++l);

678 
LED_PORT
 &~
	`_BV
(
LED
);

679 
l
 = 0;Ü < (
F_CPU
 / 250); ++l);

682 
l
 = 0;Ü < (
F_CPU
 / 100); ++l);

684 
	}
}

688 
	$Êash_Àd
(
uöt8_t
 
cou¡
)

693 vﬁ©ûê
uöt32_t
 
l
;

695 i‡(
cou¡
 == 0) {

696 
cou¡
 = 3;

699 
öt8_t
 
i
;

700 
i
 = 0; i < 
cou¡
; ++i) {

701 
LED_PORT
 |
	`_BV
(
LED
);

702 
l
 = 0;Ü < (
F_CPU
 / 1000); ++l);

703 
LED_PORT
 &~
	`_BV
(
LED
);

704 
l
 = 0;Ü < (
F_CPU
 / 1000); ++l);

707 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/HardwareSerial.cpp

23 
	~<°dlib.h
>

24 
	~<°dio.h
>

25 
	~<°rög.h
>

26 
	~<öây≥s.h
>

27 
	~"wúög.h
"

28 
	~"wúög_¥iv©e.h
"

32 #i‡
deföed
(
UBRRH
Ë|| deföed(
UBRR0H
Ë|| deföed(
UBRR1H
Ë|| deföed(
UBRR2H
Ë|| deföed(
UBRR3H
)

34 
	~"H¨dw¨eSîül.h
"

40 #i‡(
RAMEND
 < 1000)

41 
	#RX_BUFFER_SIZE
 32

	)

43 
	#RX_BUFFER_SIZE
 128

	)

46 
	srög_buf„r


48 
	mbuf„r
[
RX_BUFFER_SIZE
];

49 
	mhód
;

50 
	mèû
;

53 #i‡
deföed
(
UBRRH
Ë|| deföed(
UBRR0H
)

54 
rög_buf„r
 
	grx_buf„r
 = { { 0 }, 0, 0 };

56 #i‡
deföed
(
UBRR1H
)

57 
rög_buf„r
 
	grx_buf„r1
 = { { 0 }, 0, 0 };

59 #i‡
deföed
(
UBRR2H
)

60 
rög_buf„r
 
	grx_buf„r2
 = { { 0 }, 0, 0 };

62 #i‡
deföed
(
UBRR3H
)

63 
rög_buf„r
 
	grx_buf„r3
 = { { 0 }, 0, 0 };

66 
ölöe
 
	$°‹e_ch¨
(
c
, 
rög_buf„r
 *
rx_buf„r
)

68 
i
 = ()(
rx_buf„r
->
hód
 + 1Ë% 
RX_BUFFER_SIZE
;

74 i‡(
i
 !
rx_buf„r
->
èû
) {

75 
rx_buf„r
->
buf„r
[rx_buf„r->
hód
] = 
c
;

76 
rx_buf„r
->
hód
 = 
i
;

78 
	}
}

80 #i‡
deföed
(
USART_RX_ve˘
)

81 
	$SIGNAL
(
USART_RX_ve˘
)

83 #i‡
	`deföed
(
UDR0
)

84 
c
 = 
UDR0
;

85 #ñi‡
	`deföed
(
UDR
)

86 
c
 = 
UDR
;

88 #îr‹ 
UDR
 
nŸ
 
deföed


90 
	`°‹e_ch¨
(
c
, &
rx_buf„r
);

91 
	}
}

92 #ñi‡
deföed
(
SIG_USART0_RECV
Ë&& deföed(
UDR0
)

93 
	$SIGNAL
(
SIG_USART0_RECV
)

95 
c
 = 
UDR0
;

96 
	`°‹e_ch¨
(
c
, &
rx_buf„r
);

97 
	}
}

98 #ñi‡
deföed
(
SIG_UART0_RECV
Ë&& deföed(
UDR0
)

99 
	$SIGNAL
(
SIG_UART0_RECV
)

101 
c
 = 
UDR0
;

102 
	`°‹e_ch¨
(
c
, &
rx_buf„r
);

103 
	}
}

105 #ñi‡
deföed
(
USART0_RX_ve˘
)

108 
	$SIGNAL
(
USART0_RX_ve˘
)

110 #i‡
	`deföed
(
UDR0
)

111 
c
 = 
UDR0
;

112 #ñi‡
	`deföed
(
UDR
)

113 
c
 = 
UDR
;

115 #îr‹ 
UDR
 
nŸ
 
deföed


117 
	`°‹e_ch¨
(
c
, &
rx_buf„r
);

118 
	}
}

119 #ñi‡
deföed
(
SIG_UART_RECV
)

121 
	$SIGNAL
(
SIG_UART_RECV
)

123 #i‡
	`deföed
(
UDR0
)

124 
c
 = 
UDR0
;

125 #ñi‡
	`deföed
(
UDR
)

126 
c
 = 
UDR
;

128 
	`°‹e_ch¨
(
c
, &
rx_buf„r
);

129 
	}
}

130 #ñi‡
deföed
(
USBCON
)

131 #w¨nög 
No
 
öãºu±
 
h™dÀr
 
ußπ
 0

132 #w¨nög 
Sîül
(0Ë
is
 
⁄
 
USB
 
öãrÁ˚


134 #îr‹ 
No
 
öãºu±
 
h™dÀr
 
ußπ
 0

138 #i‡
deföed
(
USART1_RX_ve˘
)

140 
	$SIGNAL
(
USART1_RX_ve˘
)

142 
c
 = 
UDR1
;

143 
	`°‹e_ch¨
(
c
, &
rx_buf„r1
);

144 
	}
}

145 #ñi‡
deföed
(
SIG_USART1_RECV
)

146 #îr‹ 
SIG_USART1_RECV


149 #i‡
deföed
(
USART2_RX_ve˘
Ë&& deföed(
UDR2
)

150 
	$SIGNAL
(
USART2_RX_ve˘
)

152 
c
 = 
UDR2
;

153 
	`°‹e_ch¨
(
c
, &
rx_buf„r2
);

154 
	}
}

155 #ñi‡
deföed
(
SIG_USART2_RECV
)

156 #îr‹ 
SIG_USART2_RECV


159 #i‡
deföed
(
USART3_RX_ve˘
Ë&& deföed(
UDR3
)

160 
	$SIGNAL
(
USART3_RX_ve˘
)

162 
c
 = 
UDR3
;

163 
	`°‹e_ch¨
(
c
, &
rx_buf„r3
);

164 
	}
}

165 #ñi‡
deföed
(
SIG_USART3_RECV
)

166 #îr‹ 
SIG_USART3_RECV


173 
	gH¨dw¨eSîül
::
	$H¨dw¨eSîül
(
rög_buf„r
 *
rx_buf„r
,

174 vﬁ©ûê
uöt8_t
 *
ubºh
, vﬁ©ûêuöt8_à*
ubºl
,

175 vﬁ©ûê
uöt8_t
 *
uc§a
, vﬁ©ûêuöt8_à*
uc§b
,

176 vﬁ©ûê
uöt8_t
 *
udr
,

177 
uöt8_t
 
rxí
, uöt8_à
txí
, uöt8_à
rxcõ
, uöt8_à
udª
, uöt8_à
u2x
)

179 
_rx_buf„r
 = 
rx_buf„r
;

180 
_ubºh
 = 
ubºh
;

181 
_ubºl
 = 
ubºl
;

182 
_uc§a
 = 
uc§a
;

183 
_uc§b
 = 
uc§b
;

184 
_udr
 = 
udr
;

185 
_rxí
 = 
rxí
;

186 
_txí
 = 
txí
;

187 
_rxcõ
 = 
rxcõ
;

188 
_udª
 = 
udª
;

189 
_u2x
 = 
u2x
;

190 
	}
}

194 
	gH¨dw¨eSîül
::
	$begö
(
baud
)

196 
uöt16_t
 
baud_£âög
;

197 
boﬁ
 
u£_u2x
 = 
åue
;

199 #i‡
F_CPU
 == 16000000UL

203 i‡(
baud
 == 57600) {

204 
u£_u2x
 = 
Ál£
;

208 i‡(
u£_u2x
) {

209 *
_uc§a
 = 1 << 
_u2x
;

210 
baud_£âög
 = (
F_CPU
 / 4 / 
baud
 - 1) / 2;

212 *
_uc§a
 = 0;

213 
baud_£âög
 = (
F_CPU
 / 8 / 
baud
 - 1) / 2;

217 *
_ubºh
 = 
baud_£âög
 >> 8;

218 *
_ubºl
 = 
baud_£âög
;

220 
	`sbi
(*
_uc§b
, 
_rxí
);

221 
	`sbi
(*
_uc§b
, 
_txí
);

222 
	`sbi
(*
_uc§b
, 
_rxcõ
);

223 
	}
}

225 
	gH¨dw¨eSîül
::
	$íd
()

227 
	`cbi
(*
_uc§b
, 
_rxí
);

228 
	`cbi
(*
_uc§b
, 
_txí
);

229 
	`cbi
(*
_uc§b
, 
_rxcõ
);

230 
	}
}

232 
	gH¨dw¨eSîül
::
	$avaûabÀ
()

234  ()(
RX_BUFFER_SIZE
 + 
_rx_buf„r
->
hód
 - _rx_buf„r->
èû
) % RX_BUFFER_SIZE;

235 
	}
}

237 
	gH¨dw¨eSîül
::
	$≥ek
()

239 i‡(
_rx_buf„r
->
hód
 =_rx_buf„r->
èû
) {

242  
_rx_buf„r
->
buf„r
[_rx_buf„r->
èû
];

244 
	}
}

246 
	gH¨dw¨eSîül
::
	$ªad
()

249 i‡(
_rx_buf„r
->
hód
 =_rx_buf„r->
èû
) {

252 
c
 = 
_rx_buf„r
->
buf„r
[_rx_buf„r->
èû
];

253 
_rx_buf„r
->
èû
 = ()(_rx_buf„r->èû + 1Ë% 
RX_BUFFER_SIZE
;

254  
c
;

256 
	}
}

258 
	gH¨dw¨eSîül
::
	$Êush
()

269 
_rx_buf„r
->
hód
 = _rx_buf„r->
èû
;

270 
	}
}

272 
	gH¨dw¨eSîül
::
	$wrôe
(
uöt8_t
 
c
)

274 !((*
_uc§a
Ë& (1 << 
_udª
)))

277 *
_udr
 = 
c
;

278 
	}
}

282 #i‡
deföed
(
UBRRH
Ë&& deföed(
UBRRL
)

283 
H¨dw¨eSîül
 
Sîül
(&
rx_buf„r
, &
UBRRH
, &
UBRRL
, &
UCSRA
, &
UCSRB
, &
UDR
, 
RXEN
, 
TXEN
, 
RXCIE
, 
UDRE
, 
U2X
);

284 #ñi‡
deföed
(
UBRR0H
Ë&& deföed(
UBRR0L
)

285 
H¨dw¨eSîül
 
Sîül
(&
rx_buf„r
, &
UBRR0H
, &
UBRR0L
, &
UCSR0A
, &
UCSR0B
, &
UDR0
, 
RXEN0
, 
TXEN0
, 
RXCIE0
, 
UDRE0
, 
U2X0
);

286 #ñi‡
deföed
(
USBCON
)

287 #w¨nög 
no
 
£rül
 
p‹t
 
deföed
 (port 0)

289 #îr‹ 
no
 
£rül
 
p‹t
 
deföed
 (port 0)

292 #i‡
deföed
(
UBRR1H
)

293 
H¨dw¨eSîül
 
Sîül1
(&
rx_buf„r1
, &
UBRR1H
, &
UBRR1L
, &
UCSR1A
, &
UCSR1B
, &
UDR1
, 
RXEN1
, 
TXEN1
, 
RXCIE1
, 
UDRE1
, 
U2X1
);

295 #i‡
deföed
(
UBRR2H
)

296 
H¨dw¨eSîül
 
Sîül2
(&
rx_buf„r2
, &
UBRR2H
, &
UBRR2L
, &
UCSR2A
, &
UCSR2B
, &
UDR2
, 
RXEN2
, 
TXEN2
, 
RXCIE2
, 
UDRE2
, 
U2X2
);

298 #i‡
deföed
(
UBRR3H
)

299 
H¨dw¨eSîül
 
Sîül3
(&
rx_buf„r3
, &
UBRR3H
, &
UBRR3L
, &
UCSR3A
, &
UCSR3B
, &
UDR3
, 
RXEN3
, 
TXEN3
, 
RXCIE3
, 
UDRE3
, 
U2X3
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/HardwareSerial.h

22 #i‚de‡
H¨dw¨eSîül_h


23 
	#H¨dw¨eSîül_h


	)

25 
	~<öây≥s.h
>

27 
	~"Såóm.h
"

29 
	grög_buf„r
;

31 ˛as†
	cH¨dw¨eSîül
 : 
public
 
Såóm


33 
¥iv©e
:

34 
rög_buf„r
 *
_rx_buf„r
;

35 vﬁ©ûê
uöt8_t
 *
	m_ubºh
;

36 vﬁ©ûê
uöt8_t
 *
	m_ubºl
;

37 vﬁ©ûê
uöt8_t
 *
	m_uc§a
;

38 vﬁ©ûê
uöt8_t
 *
	m_uc§b
;

39 vﬁ©ûê
uöt8_t
 *
	m_udr
;

40 
uöt8_t
 
	m_rxí
;

41 
uöt8_t
 
	m_txí
;

42 
uöt8_t
 
	m_rxcõ
;

43 
uöt8_t
 
	m_udª
;

44 
uöt8_t
 
	m_u2x
;

45 
	mpublic
:

46 
H¨dw¨eSîül
(
rög_buf„r
 *
rx_buf„r
,

47 vﬁ©ûê
uöt8_t
 *
ubºh
, vﬁ©ûêuöt8_à*
ubºl
,

48 vﬁ©ûê
uöt8_t
 *
uc§a
, vﬁ©ûêuöt8_à*
uc§b
,

49 vﬁ©ûê
uöt8_t
 *
udr
,

50 
uöt8_t
 
rxí
, uöt8_à
txí
, uöt8_à
rxcõ
, uöt8_à
udª
, uöt8_à
u2x
);

51 
begö
();

52 
íd
();

53 
vútuÆ
 
avaûabÀ
();

54 
vútuÆ
 
≥ek
();

55 
vútuÆ
 
ªad
();

56 
vútuÆ
 
Êush
();

57 
vútuÆ
 
wrôe
(
uöt8_t
);

58 
usög
 
	mPröt
::
wrôe
;

61 #i‡
deföed
(
UBRRH
Ë|| deföed(
UBRR0H
)

62 
H¨dw¨eSîül
 
Sîül
;

63 #ñi‡
deföed
(
USBCON
)

64 
	~"usb_≠i.h
"

66 #i‡
deföed
(
UBRR1H
)

67 
H¨dw¨eSîül
 
Sîül1
;

69 #i‡
deföed
(
UBRR2H
)

70 
H¨dw¨eSîül
 
Sîül2
;

72 #i‡
deföed
(
UBRR3H
)

73 
H¨dw¨eSîül
 
Sîül3
;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/Print.cpp

22 
	~<°dlib.h
>

23 
	~<°dio.h
>

24 
	~<°rög.h
>

25 
	~<m©h.h
>

26 
	~"wúög.h
"

28 
	~"Pröt.h
"

33 
	gPröt
::
	$wrôe
(c⁄° *
°r
)

35 *
°r
)

36 
	`wrôe
(*
°r
++);

37 
	}
}

40 
	gPröt
::
	$wrôe
(c⁄° 
uöt8_t
 *
buf„r
, 
size_t
 
size
)

42 
size
--)

43 
	`wrôe
(*
buf„r
++);

44 
	}
}

46 
	gPröt
::
	$¥öt
(c⁄° 
Såög
 &
s
)

48 
i
 = 0; i < 
s
.
	`Àngth
(); i++) {

49 
	`wrôe
(
s
[
i
]);

51 
	}
}

53 
	gPröt
::
	$¥öt
(c⁄° 
°r
[])

55 
	`wrôe
(
°r
);

56 
	}
}

58 
	gPröt
::
	$¥öt
(
c
, 
ba£
)

60 
	`¥öt
((Ë
c
, 
ba£
);

61 
	}
}

63 
	gPröt
::
	$¥öt
(
b
, 
ba£
)

65 
	`¥öt
((Ë
b
, 
ba£
);

66 
	}
}

68 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

70 
	`¥öt
((Ë
n
, 
ba£
);

71 
	}
}

73 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

75 
	`¥öt
((Ë
n
, 
ba£
);

76 
	}
}

78 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

80 i‡(
ba£
 == 0) {

81 
	`wrôe
(
n
);

82 } i‡(
ba£
 == 10) {

83 i‡(
n
 < 0) {

84 
	`¥öt
('-');

85 
n
 = -n;

87 
	`¥ötNumbî
(
n
, 10);

89 
	`¥ötNumbî
(
n
, 
ba£
);

91 
	}
}

93 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

95 i‡(
ba£
 =0Ë
	`wrôe
(
n
);

96 
	`¥ötNumbî
(
n
, 
ba£
);

97 
	}
}

99 
	gPröt
::
	$¥öt
(
n
, 
digôs
)

101 
	`¥ötFlﬂt
(
n
, 
digôs
);

102 
	}
}

104 
	gPröt
::
	$¥öén
()

106 
	`¥öt
('\r');

107 
	`¥öt
('\n');

108 
	}
}

110 
	gPröt
::
	$¥öén
(c⁄° 
Såög
 &
s
)

112 
	`¥öt
(
s
);

113 
	`¥öén
();

114 
	}
}

116 
	gPröt
::
	$¥öén
(c⁄° 
c
[])

118 
	`¥öt
(
c
);

119 
	`¥öén
();

120 
	}
}

122 
	gPröt
::
	$¥öén
(
c
, 
ba£
)

124 
	`¥öt
(
c
, 
ba£
);

125 
	`¥öén
();

126 
	}
}

128 
	gPröt
::
	$¥öén
(
b
, 
ba£
)

130 
	`¥öt
(
b
, 
ba£
);

131 
	`¥öén
();

132 
	}
}

134 
	gPröt
::
	$¥öén
(
n
, 
ba£
)

136 
	`¥öt
(
n
, 
ba£
);

137 
	`¥öén
();

138 
	}
}

140 
	gPröt
::
	$¥öén
(
n
, 
ba£
)

142 
	`¥öt
(
n
, 
ba£
);

143 
	`¥öén
();

144 
	}
}

146 
	gPröt
::
	$¥öén
(
n
, 
ba£
)

148 
	`¥öt
(
n
, 
ba£
);

149 
	`¥öén
();

150 
	}
}

152 
	gPröt
::
	$¥öén
(
n
, 
ba£
)

154 
	`¥öt
(
n
, 
ba£
);

155 
	`¥öén
();

156 
	}
}

158 
	gPröt
::
	$¥öén
(
n
, 
digôs
)

160 
	`¥öt
(
n
, 
digôs
);

161 
	`¥öén
();

162 
	}
}

166 
	gPröt
::
	$¥ötNumbî
(
n
, 
uöt8_t
 
ba£
)

168 
buf
[8 * ()];

169 
i
 = 0;

171 i‡(
n
 == 0) {

172 
	`¥öt
('0');

176 
n
 > 0) {

177 
buf
[
i
++] = 
n
 % 
ba£
;

178 
n
 /
ba£
;

181 ; 
i
 > 0; i--)

182 
	`¥öt
((Ë(
buf
[
i
 - 1] < 10 ?

183 '0' + 
buf
[
i
 - 1] :

184 'A' + 
buf
[
i
 - 1] - 10));

185 
	}
}

187 
	gPröt
::
	$¥ötFlﬂt
(
numbî
, 
uöt8_t
 
digôs
)

190 i‡(
numbî
 < 0.0)

192 
	`¥öt
('-');

193 
numbî
 = -number;

197 
roundög
 = 0.5;

198 
uöt8_t
 
i
=0; i<
digôs
; ++i)

199 
roundög
 /= 10.0;

201 
numbî
 +
roundög
;

204 
öt_∑π
 = ()
numbî
;

205 
ªmaödî
 = 
numbî
 - ()
öt_∑π
;

206 
	`¥öt
(
öt_∑π
);

209 i‡(
digôs
 > 0)

210 
	`¥öt
(".");

213 
digôs
-- > 0)

215 
ªmaödî
 *= 10.0;

216 
toPröt
 = (
ªmaödî
);

217 
	`¥öt
(
toPröt
);

218 
ªmaödî
 -
toPröt
;

220 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/Print.h

20 #i‚de‡
Pröt_h


21 
	#Pröt_h


	)

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

26 
	~"WSåög.h
"

28 
	#DEC
 10

	)

29 
	#HEX
 16

	)

30 
	#OCT
 8

	)

31 
	#BIN
 2

	)

32 
	#BYTE
 0

	)

34 ˛as†
	cPröt


36 
	m¥iv©e
:

37 
¥ötNumbî
(, 
uöt8_t
);

38 
¥ötFlﬂt
(, 
uöt8_t
);

39 
	mpublic
:

40 
vútuÆ
 
wrôe
(
uöt8_t
) = 0;

41 
vútuÆ
 
wrôe
(c⁄° *
°r
);

42 
vútuÆ
 
wrôe
(c⁄° 
uöt8_t
 *
buf„r
, 
size_t
 
size
);

44 
¥öt
(c⁄° 
Såög
 &);

45 
¥öt
(const []);

46 
¥öt
(, 
BYTE
);

47 
¥öt
(, 
BYTE
);

48 
¥öt
(, 
DEC
);

49 
¥öt
(, 
DEC
);

50 
¥öt
(, 
DEC
);

51 
¥öt
(, 
DEC
);

52 
¥öt
(, = 2);

54 
¥öén
(c⁄° 
Såög
 &
s
);

55 
¥öén
(const []);

56 
¥öén
(, 
BYTE
);

57 
¥öén
(, 
BYTE
);

58 
¥öén
(, 
DEC
);

59 
¥öén
(, 
DEC
);

60 
¥öén
(, 
DEC
);

61 
¥öén
(, 
DEC
);

62 
¥öén
(, = 2);

63 
¥öén
();

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/Stream.h

20 #i‚de‡
Såóm_h


21 
	#Såóm_h


	)

23 
	~<öây≥s.h
>

24 
	~"Pröt.h
"

26 ˛as†
	cSåóm
 : 
public
 
Pröt


28 
public
:

29 
vútuÆ
 
avaûabÀ
() = 0;

30 
vútuÆ
 
ªad
() = 0;

31 
vútuÆ
 
≥ek
() = 0;

32 
vútuÆ
 
Êush
() = 0;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/Tone.cpp

34 
	~<avr/öãºu±.h
>

35 
	~<avr/pgm•a˚.h
>

36 
	~"wúög.h
"

37 
	~"pös_¨duöo.h
"

39 #i‡
deföed
(
__AVR_ATmega8__
Ë|| deföed(
__AVR_ATmega128__
)

40 
	#TCCR2A
 
TCCR2


	)

41 
	#TCCR2B
 
TCCR2


	)

42 
	#COM2A1
 
COM21


	)

43 
	#COM2A0
 
COM20


	)

44 
	#OCR2A
 
OCR2


	)

45 
	#TIMSK2
 
TIMSK


	)

46 
	#OCIE2A
 
OCIE2


	)

47 
	#TIMER2_COMPA_ve˘
 
TIMER2_COMP_ve˘


	)

48 
	#TIMSK1
 
TIMSK


	)

56 #i‡!
deföed
(
__AVR_ATmega8__
)

57 vﬁ©ûê
	gtimî0_toggÀ_cou¡
;

58 vﬁ©ûê
uöt8_t
 *
	gtimî0_pö_p‹t
;

59 vﬁ©ûê
uöt8_t
 
	gtimî0_pö_mask
;

62 vﬁ©ûê
	gtimî1_toggÀ_cou¡
;

63 vﬁ©ûê
uöt8_t
 *
	gtimî1_pö_p‹t
;

64 vﬁ©ûê
uöt8_t
 
	gtimî1_pö_mask
;

65 vﬁ©ûê
	gtimî2_toggÀ_cou¡
;

66 vﬁ©ûê
uöt8_t
 *
	gtimî2_pö_p‹t
;

67 vﬁ©ûê
uöt8_t
 
	gtimî2_pö_mask
;

69 #i‡
deföed
(
TIMSK3
)

70 vﬁ©ûê
	gtimî3_toggÀ_cou¡
;

71 vﬁ©ûê
uöt8_t
 *
	gtimî3_pö_p‹t
;

72 vﬁ©ûê
uöt8_t
 
	gtimî3_pö_mask
;

75 #i‡
deföed
(
TIMSK4
)

76 vﬁ©ûê
	gtimî4_toggÀ_cou¡
;

77 vﬁ©ûê
uöt8_t
 *
	gtimî4_pö_p‹t
;

78 vﬁ©ûê
uöt8_t
 
	gtimî4_pö_mask
;

81 #i‡
deföed
(
TIMSK5
)

82 vﬁ©ûê
	gtimî5_toggÀ_cou¡
;

83 vﬁ©ûê
uöt8_t
 *
	gtimî5_pö_p‹t
;

84 vﬁ©ûê
uöt8_t
 
	gtimî5_pö_mask
;

89 #i‡
deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega2560__
)

91 
	#AVAILABLE_TONE_PINS
 1

	)

93 c⁄° 
uöt8_t
 
PROGMEM
 
	gt⁄e_pö_to_timî_PGM
[] = { 2 };

94 
uöt8_t
 
	gt⁄e_pös
[
AVAILABLE_TONE_PINS
] = { 255 };

96 #ñi‡
deföed
(
__AVR_ATmega8__
)

98 
	#AVAILABLE_TONE_PINS
 1

	)

100 c⁄° 
uöt8_t
 
PROGMEM
 
	gt⁄e_pö_to_timî_PGM
[] = { 2 };

101 
uöt8_t
 
	gt⁄e_pös
[
AVAILABLE_TONE_PINS
] = { 255 };

105 
	#AVAILABLE_TONE_PINS
 1

	)

108 c⁄° 
uöt8_t
 
PROGMEM
 
	gt⁄e_pö_to_timî_PGM
[] = { 2 };

109 
uöt8_t
 
	gt⁄e_pös
[
AVAILABLE_TONE_PINS
] = { 255 };

115 
öt8_t
 
	$t⁄eBegö
(
uöt8_t
 
_pö
)

117 
öt8_t
 
_timî
 = -1;

120 
i
 = 0; i < 
AVAILABLE_TONE_PINS
; i++) {

121 i‡(
t⁄e_pös
[
i
] =
_pö
) {

122  
	`pgm_ªad_byã
(
t⁄e_pö_to_timî_PGM
 + 
i
);

127 
i
 = 0; i < 
AVAILABLE_TONE_PINS
; i++) {

128 i‡(
t⁄e_pös
[
i
] == 255) {

129 
t⁄e_pös
[
i
] = 
_pö
;

130 
_timî
 = 
	`pgm_ªad_byã
(
t⁄e_pö_to_timî_PGM
 + 
i
);

135 i‡(
_timî
 != -1)

141 
_timî
)

143 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
TCCR0B
)

146 
TCCR0A
 = 0;

147 
TCCR0B
 = 0;

148 
	`bôWrôe
(
TCCR0A
, 
WGM01
, 1);

149 
	`bôWrôe
(
TCCR0B
, 
CS00
, 1);

150 
timî0_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

151 
timî0_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

155 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
TCCR1B
Ë&& deföed(
WGM12
)

158 
TCCR1A
 = 0;

159 
TCCR1B
 = 0;

160 
	`bôWrôe
(
TCCR1B
, 
WGM12
, 1);

161 
	`bôWrôe
(
TCCR1B
, 
CS10
, 1);

162 
timî1_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

163 
timî1_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

167 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
TCCR2B
)

170 
TCCR2A
 = 0;

171 
TCCR2B
 = 0;

172 
	`bôWrôe
(
TCCR2A
, 
WGM21
, 1);

173 
	`bôWrôe
(
TCCR2B
, 
CS20
, 1);

174 
timî2_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

175 
timî2_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

179 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
TCCR3B
Ë&& deföed(
TIMSK3
)

182 
TCCR3A
 = 0;

183 
TCCR3B
 = 0;

184 
	`bôWrôe
(
TCCR3B
, 
WGM32
, 1);

185 
	`bôWrôe
(
TCCR3B
, 
CS30
, 1);

186 
timî3_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

187 
timî3_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

191 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
TCCR4B
Ë&& deföed(
TIMSK4
)

194 
TCCR4A
 = 0;

195 
TCCR4B
 = 0;

196 #i‡
	`deföed
(
WGM42
)

197 
	`bôWrôe
(
TCCR4B
, 
WGM42
, 1);

198 #ñi‡
	`deföed
(
CS43
)

199 #w¨nög 
this
 
may
 
nŸ
 
be
 
c‹ª˘


201 
	`bôWrôe
(
TCCR4B
, 
CS43
, 1);

203 
	`bôWrôe
(
TCCR4B
, 
CS40
, 1);

204 
timî4_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

205 
timî4_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

209 #i‡
	`deföed
(
TCCR5A
Ë&& deföed(
TCCR5B
Ë&& deföed(
TIMSK5
)

212 
TCCR5A
 = 0;

213 
TCCR5B
 = 0;

214 
	`bôWrôe
(
TCCR5B
, 
WGM52
, 1);

215 
	`bôWrôe
(
TCCR5B
, 
CS50
, 1);

216 
timî5_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

217 
timî5_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

223  
_timî
;

224 
	}
}

230 
	$t⁄e
(
uöt8_t
 
_pö
, 
‰equícy
, 
duøti⁄
)

232 
uöt8_t
 
¥esˇœrbôs
 = 0b001;

233 
toggÀ_cou¡
 = 0;

234 
uöt32_t
 
o¸
 = 0;

235 
öt8_t
 
_timî
;

237 
_timî
 = 
	`t⁄eBegö
(
_pö
);

239 i‡(
_timî
 >= 0)

242 
	`pöMode
(
_pö
, 
OUTPUT
);

245 i‡(
_timî
 == 0 || _timer == 2)

247 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 - 1;

248 
¥esˇœrbôs
 = 0b001;

249 i‡(
o¸
 > 255)

251 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 8 - 1;

252 
¥esˇœrbôs
 = 0b010;

254 i‡(
_timî
 =2 && 
o¸
 > 255)

256 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 32 - 1;

257 
¥esˇœrbôs
 = 0b011;

260 i‡(
o¸
 > 255)

262 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 64 - 1;

263 
¥esˇœrbôs
 = 
_timî
 == 0 ? 0b011 : 0b100;

265 i‡(
_timî
 =2 && 
o¸
 > 255)

267 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 128 - 1;

268 
¥esˇœrbôs
 = 0b101;

271 i‡(
o¸
 > 255)

273 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 256 - 1;

274 
¥esˇœrbôs
 = 
_timî
 == 0 ? 0b100 : 0b110;

275 i‡(
o¸
 > 255)

278 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 1024 - 1;

279 
¥esˇœrbôs
 = 
_timî
 == 0 ? 0b101 : 0b111;

285 #i‡
	`deföed
(
TCCR0B
)

286 i‡(
_timî
 == 0)

288 
TCCR0B
 = 
¥esˇœrbôs
;

292 #i‡
	`deföed
(
TCCR2B
)

294 
TCCR2B
 = 
¥esˇœrbôs
;

305 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 - 1;

307 
¥esˇœrbôs
 = 0b001;

308 i‡(
o¸
 > 0xffff)

310 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 64 - 1;

311 
¥esˇœrbôs
 = 0b011;

314 i‡(
_timî
 == 1)

316 #i‡
	`deföed
(
TCCR1B
)

317 
TCCR1B
 = (TCCR1B & 0b11111000Ë| 
¥esˇœrbôs
;

320 #i‡
	`deföed
(
TCCR3B
)

321 i‡(
_timî
 == 3)

322 
TCCR3B
 = (TCCR3B & 0b11111000Ë| 
¥esˇœrbôs
;

324 #i‡
	`deföed
(
TCCR4B
)

325 i‡(
_timî
 == 4)

326 
TCCR4B
 = (TCCR4B & 0b11111000Ë| 
¥esˇœrbôs
;

328 #i‡
	`deföed
(
TCCR5B
)

329 i‡(
_timî
 == 5)

330 
TCCR5B
 = (TCCR5B & 0b11111000Ë| 
¥esˇœrbôs
;

337 i‡(
duøti⁄
 > 0)

339 
toggÀ_cou¡
 = 2 * 
‰equícy
 * 
duøti⁄
 / 1000;

343 
toggÀ_cou¡
 = -1;

349 
_timî
)

352 #i‡
	`deföed
(
OCR0A
Ë&& deföed(
TIMSK0
Ë&& deföed(
OCIE0A
)

354 
OCR0A
 = 
o¸
;

355 
timî0_toggÀ_cou¡
 = 
toggÀ_cou¡
;

356 
	`bôWrôe
(
TIMSK0
, 
OCIE0A
, 1);

361 #i‡
	`deföed
(
OCR1A
Ë&& deföed(
TIMSK1
Ë&& deföed(
OCIE1A
)

362 
OCR1A
 = 
o¸
;

363 
timî1_toggÀ_cou¡
 = 
toggÀ_cou¡
;

364 
	`bôWrôe
(
TIMSK1
, 
OCIE1A
, 1);

365 #ñi‡
	`deföed
(
OCR1A
Ë&& deföed(
TIMSK
Ë&& deföed(
OCIE1A
)

367 
OCR1A
 = 
o¸
;

368 
timî1_toggÀ_cou¡
 = 
toggÀ_cou¡
;

369 
	`bôWrôe
(
TIMSK
, 
OCIE1A
, 1);

373 #i‡
	`deföed
(
OCR2A
Ë&& deföed(
TIMSK2
Ë&& deföed(
OCIE2A
)

375 
OCR2A
 = 
o¸
;

376 
timî2_toggÀ_cou¡
 = 
toggÀ_cou¡
;

377 
	`bôWrôe
(
TIMSK2
, 
OCIE2A
, 1);

381 #i‡
	`deföed
(
TIMSK3
)

383 
OCR3A
 = 
o¸
;

384 
timî3_toggÀ_cou¡
 = 
toggÀ_cou¡
;

385 
	`bôWrôe
(
TIMSK3
, 
OCIE3A
, 1);

389 #i‡
	`deföed
(
TIMSK4
)

391 
OCR4A
 = 
o¸
;

392 
timî4_toggÀ_cou¡
 = 
toggÀ_cou¡
;

393 
	`bôWrôe
(
TIMSK4
, 
OCIE4A
, 1);

397 #i‡
	`deföed
(
OCR5A
Ë&& deföed(
TIMSK5
Ë&& deföed(
OCIE5A
)

399 
OCR5A
 = 
o¸
;

400 
timî5_toggÀ_cou¡
 = 
toggÀ_cou¡
;

401 
	`bôWrôe
(
TIMSK5
, 
OCIE5A
, 1);

407 
	}
}

413 
	$dißbÀTimî
(
uöt8_t
 
_timî
)

415 
_timî
)

418 #i‡
	`deföed
(
TIMSK0
)

419 
TIMSK0
 = 0;

420 #ñi‡
	`deföed
(
TIMSK
)

421 
TIMSK
 = 0;

425 #i‡
	`deföed
(
TIMSK1
Ë&& deföed(
OCIE1A
)

427 
	`bôWrôe
(
TIMSK1
, 
OCIE1A
, 0);

432 #i‡
	`deföed
(
TIMSK2
Ë&& deföed(
OCIE2A
)

433 
	`bôWrôe
(
TIMSK2
, 
OCIE2A
, 0);

435 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
WGM20
)

436 
TCCR2A
 = (1 << 
WGM20
);

438 #i‡
	`deföed
(
TCCR2B
Ë&& deföed(
CS22
)

439 
TCCR2B
 = (TCCR2B & 0b11111000Ë| (1 << 
CS22
);

441 #i‡
	`deföed
(
OCR2A
)

442 
OCR2A
 = 0;

446 #i‡
	`deföed
(
TIMSK3
)

448 
TIMSK3
 = 0;

452 #i‡
	`deföed
(
TIMSK4
)

454 
TIMSK4
 = 0;

458 #i‡
	`deföed
(
TIMSK5
)

460 
TIMSK5
 = 0;

464 
	}
}

467 
	$noT⁄e
(
uöt8_t
 
_pö
)

469 
öt8_t
 
_timî
 = -1;

471 
i
 = 0; i < 
AVAILABLE_TONE_PINS
; i++) {

472 i‡(
t⁄e_pös
[
i
] =
_pö
) {

473 
_timî
 = 
	`pgm_ªad_byã
(
t⁄e_pö_to_timî_PGM
 + 
i
);

474 
t⁄e_pös
[
i
] = 255;

478 
	`dißbÀTimî
(
_timî
);

480 
	`digôÆWrôe
(
_pö
, 0);

481 
	}
}

484 #i‡!
deföed
(
__AVR_ATmega8__
)

485 
	$ISR
(
TIMER0_COMPA_ve˘
)

487 i‡(
timî0_toggÀ_cou¡
 != 0)

490 *
timî0_pö_p‹t
 ^
timî0_pö_mask
;

492 i‡(
timî0_toggÀ_cou¡
 > 0)

493 
timî0_toggÀ_cou¡
--;

497 
	`dißbÀTimî
(0);

498 *
timî0_pö_p‹t
 &~(
timî0_pö_mask
);

500 
	}
}

504 
	$ISR
(
TIMER1_COMPA_ve˘
)

506 i‡(
timî1_toggÀ_cou¡
 != 0)

509 *
timî1_pö_p‹t
 ^
timî1_pö_mask
;

511 i‡(
timî1_toggÀ_cou¡
 > 0)

512 
timî1_toggÀ_cou¡
--;

516 
	`dißbÀTimî
(1);

517 *
timî1_pö_p‹t
 &~(
timî1_pö_mask
);

519 
	}
}

523 
	$ISR
(
TIMER2_COMPA_ve˘
)

526 i‡(
timî2_toggÀ_cou¡
 != 0)

529 *
timî2_pö_p‹t
 ^
timî2_pö_mask
;

531 i‡(
timî2_toggÀ_cou¡
 > 0)

532 
timî2_toggÀ_cou¡
--;

539 
	`noT⁄e
(
t⁄e_pös
[0]);

543 
	}
}

550 
	$ISR
(
TIMER3_COMPA_ve˘
)

552 i‡(
timî3_toggÀ_cou¡
 != 0)

555 *
timî3_pö_p‹t
 ^
timî3_pö_mask
;

557 i‡(
timî3_toggÀ_cou¡
 > 0)

558 
timî3_toggÀ_cou¡
--;

562 
	`dißbÀTimî
(3);

563 *
timî3_pö_p‹t
 &~(
timî3_pö_mask
);

565 
	}
}

567 
	$ISR
(
TIMER4_COMPA_ve˘
)

569 i‡(
timî4_toggÀ_cou¡
 != 0)

572 *
timî4_pö_p‹t
 ^
timî4_pö_mask
;

574 i‡(
timî4_toggÀ_cou¡
 > 0)

575 
timî4_toggÀ_cou¡
--;

579 
	`dißbÀTimî
(4);

580 *
timî4_pö_p‹t
 &~(
timî4_pö_mask
);

582 
	}
}

584 
	$ISR
(
TIMER5_COMPA_ve˘
)

586 i‡(
timî5_toggÀ_cou¡
 != 0)

589 *
timî5_pö_p‹t
 ^
timî5_pö_mask
;

591 i‡(
timî5_toggÀ_cou¡
 > 0)

592 
timî5_toggÀ_cou¡
--;

596 
	`dißbÀTimî
(5);

597 *
timî5_pö_p‹t
 &~(
timî5_pö_mask
);

599 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/WCharacter.h

20 #i‚de‡
Ch¨a˘î_h


21 
	#Ch¨a˘î_h


	)

23 
	~<˘y≥.h
>

26 
ölöe
 
boﬁón
 
	$isAÕhaNumîic
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

27 
ölöe
 
boﬁón
 
	$isAÕha
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
ölöe
 
boﬁón
 
	$isAscii
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

29 
ölöe
 
boﬁón
 
	$isWhôe•a˚
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

30 
ölöe
 
boﬁón
 
	$isC⁄åﬁ
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

31 
ölöe
 
boﬁón
 
	$isDigô
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

32 
ölöe
 
boﬁón
 
	$isGøph
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

33 
ölöe
 
boﬁón
 
	$isLowîCa£
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

34 
ölöe
 
boﬁón
 
	$isPröèbÀ
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

35 
ölöe
 
boﬁón
 
	$isPun˘
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

36 
ölöe
 
boﬁón
 
	$isS∑˚
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

37 
ölöe
 
boﬁón
 
	$isUµîCa£
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

38 
ölöe
 
boﬁón
 
	$isHexadecimÆDigô
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

39 
ölöe
 
	$toAscii
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

40 
ölöe
 
	$toLowîCa£
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

41 
ölöe
 
	$toUµîCa£
(
c
)
	`__©åibuã__
((
Æways_ölöe
));

46 
ölöe
 
boﬁón
 
	$isAÕhaNumîic
(
c
)

48  ( 
	`iß um
(
c
Ë=0 ? 
Ál£
 : 
åue
);

49 
	}
}

54 
ölöe
 
boﬁón
 
	$isAÕha
(
c
)

56  ( 
	`ißÕha
(
c
Ë=0 ? 
Ál£
 : 
åue
);

57 
	}
}

62 
ölöe
 
boﬁón
 
	$isAscii
(
c
)

64  ( 
	`ißscii
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

65 
	}
}

69 
ölöe
 
boﬁón
 
	$isWhôe•a˚
(
c
)

71  ( 
	`isbœnk
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

72 
	}
}

76 
ölöe
 
boﬁón
 
	$isC⁄åﬁ
(
c
)

78  ( 
	`is˙ål
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

79 
	}
}

83 
ölöe
 
boﬁón
 
	$isDigô
(
c
)

85  ( 
	`isdigô
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

86 
	}
}

90 
ölöe
 
boﬁón
 
	$isGøph
(
c
)

92  ( 
	`isgøph
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

93 
	}
}

97 
ölöe
 
boﬁón
 
	$isLowîCa£
(
c
)

99  (
	`i¶owî
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

100 
	}
}

104 
ölöe
 
boﬁón
 
	$isPröèbÀ
(
c
)

106  ( 
	`i•röt
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

107 
	}
}

112 
ölöe
 
boﬁón
 
	$isPun˘
(
c
)

114  ( 
	`i•un˘
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

115 
	}
}

121 
ölöe
 
boﬁón
 
	$isS∑˚
(
c
)

123  ( 
	`is•a˚
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

124 
	}
}

128 
ölöe
 
boﬁón
 
	$isUµîCa£
(
c
)

130  ( 
	`isuµî
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

131 
	}
}

136 
ölöe
 
boﬁón
 
	$isHexadecimÆDigô
(
c
)

138  ( 
	`isxdigô
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

139 
	}
}

144 
ölöe
 
	$toAscii
(
c
)

146  
	`tﬂscii
 (
c
);

147 
	}
}

156 
ölöe
 
	$toLowîCa£
(
c
)

158  
	`tﬁowî
 (
c
);

159 
	}
}

163 
ölöe
 
	$toUµîCa£
(
c
)

165  
	`touµî
 (
c
);

166 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/WConstants.h

1 
	~"wúög.h
"

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/WInterrupts.c

27 
	~<öây≥s.h
>

28 
	~<avr/io.h
>

29 
	~<avr/öãºu±.h
>

30 
	~<avr/pgm•a˚.h
>

31 
	~<°dio.h
>

33 
	~"WC⁄°™ts.h
"

34 
	~"wúög_¥iv©e.h
"

36 vﬁ©ûê
voidFuncPå
 
	götFunc
[
EXTERNAL_NUM_INTERRUPTS
];

39 
©èchI¡îru±
(
uöt8_t
 
öãºu±Num
, (*
u£rFunc
)(), 
mode
) {

40 if(
öãºu±Num
 < 
EXTERNAL_NUM_INTERRUPTS
) {

41 
ötFunc
[
öãºu±Num
] = 
u£rFunc
;

49 
öãºu±Num
) {

50 #i‡
	`deföed
(
EICRA
Ë&& deföed(
EICRB
Ë&& deföed(
EIMSK
)

52 
EICRA
 = (EICRA & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

53 
EIMSK
 |(1 << 
INT0
);

56 
EICRA
 = (EICRA & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

57 
EIMSK
 |(1 << 
INT1
);

60 
EICRA
 = (EICRA & ~((1 << 
ISC20
Ë| (1 << 
ISC21
))Ë| (
mode
 << ISC20);

61 
EIMSK
 |(1 << 
INT2
);

64 
EICRA
 = (EICRA & ~((1 << 
ISC30
Ë| (1 << 
ISC31
))Ë| (
mode
 << ISC30);

65 
EIMSK
 |(1 << 
INT3
);

68 
EICRB
 = (EICRB & ~((1 << 
ISC40
Ë| (1 << 
ISC41
))Ë| (
mode
 << ISC40);

69 
EIMSK
 |(1 << 
INT4
);

72 
EICRB
 = (EICRB & ~((1 << 
ISC50
Ë| (1 << 
ISC51
))Ë| (
mode
 << ISC50);

73 
EIMSK
 |(1 << 
INT5
);

76 
EICRB
 = (EICRB & ~((1 << 
ISC60
Ë| (1 << 
ISC61
))Ë| (
mode
 << ISC60);

77 
EIMSK
 |(1 << 
INT6
);

80 
EICRB
 = (EICRB & ~((1 << 
ISC70
Ë| (1 << 
ISC71
))Ë| (
mode
 << ISC70);

81 
EIMSK
 |(1 << 
INT7
);

83 #ñi‡
	`deföed
(
EICRA
Ë&& deföed(
EIMSK
)

85 
EICRA
 = (EICRA & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

86 
EIMSK
 |(1 << 
INT0
);

89 
EICRA
 = (EICRA & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

90 
EIMSK
 |(1 << 
INT1
);

93 
EICRA
 = (EICRA & ~((1 << 
ISC20
Ë| (1 << 
ISC21
))Ë| (
mode
 << ISC20);

94 
EIMSK
 |(1 << 
INT2
);

98 #i‡
	`deföed
(
EICRA
Ë&& deföed(
ISC00
Ë&& deföed(
EIMSK
)

99 
EICRA
 = (EICRA & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

100 
EIMSK
 |(1 << 
INT0
);

101 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC00
Ë&& deföed(
GICR
)

102 
MCUCR
 = (MCUCR & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

103 
GICR
 |(1 << 
INT0
);

104 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC00
Ë&& deföed(
GIMSK
)

105 
MCUCR
 = (MCUCR & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

106 
GIMSK
 |(1 << 
INT0
);

108 #îr‹ 
©èchI¡îru±
 
nŸ
 
föished
 
this
 
	`CPU
 (0)

113 #i‡
	`deföed
(
EICRA
Ë&& deföed(
ISC10
Ë&& deföed(
ISC11
Ë&& deföed(
EIMSK
)

114 
EICRA
 = (EICRA & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

115 
EIMSK
 |(1 << 
INT1
);

116 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC10
Ë&& deföed(
ISC11
Ë&& deföed(
GICR
)

117 
MCUCR
 = (MCUCR & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

118 
GICR
 |(1 << 
INT1
);

119 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC10
Ë&& deföed(
GIMSK
) && defined(GIMSK)

120 
MCUCR
 = (MCUCR & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

121 
GIMSK
 |(1 << 
INT1
);

123 #w¨nög 
©èchI¡îru±
 
may
 
√ed
 
some
 
m‹e
 
w‹k
 
this
 
	`˝u
 (1)

129 
	}
}

131 
	$dëachI¡îru±
(
uöt8_t
 
öãºu±Num
) {

132 if(
öãºu±Num
 < 
EXTERNAL_NUM_INTERRUPTS
) {

136 
öãºu±Num
) {

137 #i‡
	`deföed
(
EICRA
Ë&& deföed(
EICRB
Ë&& deföed(
EIMSK
)

139 
EIMSK
 &~(1 << 
INT3
);

142 
EIMSK
 &~(1 << 
INT4
);

145 
EIMSK
 &~(1 << 
INT5
);

148 
EIMSK
 &~(1 << 
INT6
);

151 
EIMSK
 &~(1 << 
INT7
);

153 #ñi‡
	`deföed
(
EICRA
Ë&& deföed(
EIMSK
)

155 
EIMSK
 &~(1 << 
INT0
);

158 
EIMSK
 &~(1 << 
INT1
);

161 
EIMSK
 &~(1 << 
INT2
);

166 #i‡
	`deföed
(
EIMSK
Ë&& deföed(
INT0
)

167 
EIMSK
 &~(1 << 
INT0
);

168 #ñi‡
	`deföed
(
GICR
Ë&& deföed(
ISC00
)

169 
GICR
 &~(1 << 
INT0
);

170 #ñi‡
	`deföed
(
GIMSK
Ë&& deföed(
INT0
)

171 
GIMSK
 &~(1 << 
INT0
);

173 #îr‹ 
dëachI¡îru±
 
nŸ
 
föished
 
this
 
˝u


178 #i‡
	`deföed
(
EIMSK
Ë&& deföed(
INT1
)

179 
EIMSK
 &~(1 << 
INT1
);

180 #ñi‡
	`deföed
(
GICR
Ë&& deföed(
INT1
)

181 
GICR
 &~(1 << 
INT1
);

182 #ñi‡
	`deföed
(
GIMSK
Ë&& deföed(
INT1
)

183 
GIMSK
 &~(1 << 
INT1
);

185 #w¨nög 
dëachI¡îru±
 
may
 
√ed
 
some
 
m‹e
 
w‹k
 
this
 
	`˝u
 (1)

191 
ötFunc
[
öãºu±Num
] = 0;

193 
	}
}

202 #i‡
deföed
(
EICRA
Ë&& deföed(
EICRB
)

203 
	$SIGNAL
(
INT0_ve˘
) {

204 if(
ötFunc
[
EXTERNAL_INT_2
])

205 
ötFunc
[
EXTERNAL_INT_2
]();

206 
	}
}

208 
	$SIGNAL
(
INT1_ve˘
) {

209 if(
ötFunc
[
EXTERNAL_INT_3
])

210 
ötFunc
[
EXTERNAL_INT_3
]();

211 
	}
}

213 
	$SIGNAL
(
INT2_ve˘
) {

214 if(
ötFunc
[
EXTERNAL_INT_4
])

215 
ötFunc
[
EXTERNAL_INT_4
]();

216 
	}
}

218 
	$SIGNAL
(
INT3_ve˘
) {

219 if(
ötFunc
[
EXTERNAL_INT_5
])

220 
ötFunc
[
EXTERNAL_INT_5
]();

221 
	}
}

223 
	$SIGNAL
(
INT4_ve˘
) {

224 if(
ötFunc
[
EXTERNAL_INT_0
])

225 
ötFunc
[
EXTERNAL_INT_0
]();

226 
	}
}

228 
	$SIGNAL
(
INT5_ve˘
) {

229 if(
ötFunc
[
EXTERNAL_INT_1
])

230 
ötFunc
[
EXTERNAL_INT_1
]();

231 
	}
}

233 
	$SIGNAL
(
INT6_ve˘
) {

234 if(
ötFunc
[
EXTERNAL_INT_6
])

235 
ötFunc
[
EXTERNAL_INT_6
]();

236 
	}
}

238 
	$SIGNAL
(
INT7_ve˘
) {

239 if(
ötFunc
[
EXTERNAL_INT_7
])

240 
ötFunc
[
EXTERNAL_INT_7
]();

241 
	}
}

243 #ñi‡
deföed
(
EICRA
)

245 
	$SIGNAL
(
INT0_ve˘
) {

246 if(
ötFunc
[
EXTERNAL_INT_0
])

247 
ötFunc
[
EXTERNAL_INT_0
]();

248 
	}
}

250 
	$SIGNAL
(
INT1_ve˘
) {

251 if(
ötFunc
[
EXTERNAL_INT_1
])

252 
ötFunc
[
EXTERNAL_INT_1
]();

253 
	}
}

255 
	$SIGNAL
(
INT2_ve˘
) {

256 if(
ötFunc
[
EXTERNAL_INT_2
])

257 
ötFunc
[
EXTERNAL_INT_2
]();

258 
	}
}

262 
	$SIGNAL
(
INT0_ve˘
) {

263 if(
ötFunc
[
EXTERNAL_INT_0
])

264 
ötFunc
[
EXTERNAL_INT_0
]();

265 
	}
}

267 
	$SIGNAL
(
INT1_ve˘
) {

268 if(
ötFunc
[
EXTERNAL_INT_1
])

269 
ötFunc
[
EXTERNAL_INT_1
]();

270 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/WMath.cpp

27 
	~"°dlib.h
"

30 
	$øndomSìd
(
£ed
)

32 i‡(
£ed
 != 0) {

33 
	`§™dom
(
£ed
);

35 
	}
}

37 
	$øndom
(
howbig
)

39 i‡(
howbig
 == 0) {

42  
	`øndom
(Ë% 
howbig
;

43 
	}
}

45 
	$øndom
(
howsmÆl
, 
howbig
)

47 i‡(
howsmÆl
 >
howbig
) {

48  
howsmÆl
;

50 
diff
 = 
howbig
 - 
howsmÆl
;

51  
	`øndom
(
diff
Ë+ 
howsmÆl
;

52 
	}
}

54 
	$m≠
(
x
, 
ö_mö
, 
ö_max
, 
out_mö
, 
out_max
)

56  (
x
 - 
ö_mö
Ë* (
out_max
 - 
out_mö
Ë/ (
ö_max
 - in_min) + out_min;

57 
	}
}

59 
	$makeW‹d
(
w
Ë{  w; 
	}
}

60 
	$makeW‹d
(
h
, 
l
Ë{  (h << 8Ë|Ü; 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/WProgram.h

1 #i‚de‡
WProgøm_h


2 
	#WProgøm_h


	)

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<m©h.h
>

8 
	~<avr/öãºu±.h
>

10 
	~"wúög.h
"

12 #ifde‡
__˝lu•lus


13 
	~"WCh¨a˘î.h
"

14 
	~"WSåög.h
"

15 
	~"H¨dw¨eSîül.h
"

17 
uöt16_t
 
makeW‹d
(uöt16_à
w
);

18 
uöt16_t
 
makeW‹d
(
byã
 
h
, byã 
l
);

20 
	#w‹d
(...Ë
	`makeW‹d
(
__VA_ARGS__
)

	)

22 
pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
 = 1000000L);

24 
t⁄e
(
uöt8_t
 
_pö
, 
‰equícy
, 
duøti⁄
 = 0);

25 
noT⁄e
(
uöt8_t
 
_pö
);

28 
øndom
();

29 
øndom
(, );

30 
øndomSìd
();

31 
m≠
(, , , , );

33 #i‡
deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega2560__
)

34 c⁄° 
uöt8_t
 
	gA0
 = 54;

35 c⁄° 
uöt8_t
 
	gA1
 = 55;

36 c⁄° 
uöt8_t
 
	gA2
 = 56;

37 c⁄° 
uöt8_t
 
	gA3
 = 57;

38 c⁄° 
uöt8_t
 
	gA4
 = 58;

39 c⁄° 
uöt8_t
 
	gA5
 = 59;

40 c⁄° 
uöt8_t
 
	gA6
 = 60;

41 c⁄° 
uöt8_t
 
	gA7
 = 61;

42 c⁄° 
uöt8_t
 
	gA8
 = 62;

43 c⁄° 
uöt8_t
 
	gA9
 = 63;

44 c⁄° 
uöt8_t
 
	gA10
 = 64;

45 c⁄° 
uöt8_t
 
	gA11
 = 65;

46 c⁄° 
uöt8_t
 
	gA12
 = 66;

47 c⁄° 
uöt8_t
 
	gA13
 = 67;

48 c⁄° 
uöt8_t
 
	gA14
 = 68;

49 c⁄° 
uöt8_t
 
	gA15
 = 69;

51 c⁄° 
uöt8_t
 
	gA0
 = 14;

52 c⁄° 
uöt8_t
 
	gA1
 = 15;

53 c⁄° 
uöt8_t
 
	gA2
 = 16;

54 c⁄° 
uöt8_t
 
	gA3
 = 17;

55 c⁄° 
uöt8_t
 
	gA4
 = 18;

56 c⁄° 
uöt8_t
 
	gA5
 = 19;

57 c⁄° 
uöt8_t
 
	gA6
 = 20;

58 c⁄° 
uöt8_t
 
	gA7
 = 21;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/WString.cpp

20 
	~<°dlib.h
>

21 
	~"WProgøm.h
"

22 
	~"WSåög.h
"

25 
	gSåög
::
	$Såög
–c⁄° *
vÆue
 )

27 i‡–
vÆue
 =
NULL
 )

28 
vÆue
 = "";

29 
	`gëBuf„r
–
_Àngth
 = 
	`°æí
–
vÆue
 ) );

30 i‡–
_buf„r
 !
NULL
 )

31 
	`°r˝y
–
_buf„r
, 
vÆue
 );

32 
	}
}

34 
	gSåög
::
	$Såög
–c⁄° 
Såög
 &
vÆue
 )

36 
	`gëBuf„r
–
_Àngth
 = 
vÆue
._length );

37 i‡–
_buf„r
 !
NULL
 )

38 
	`°r˝y
–
_buf„r
, 
vÆue
._buffer );

39 
	}
}

41 
	gSåög
::
	$Såög
–c⁄° 
vÆue
 )

43 
_Àngth
 = 1;

44 
	`gëBuf„r
(1);

45 i‡–
_buf„r
 !
NULL
 ) {

46 
_buf„r
[0] = 
vÆue
;

47 
_buf„r
[1] = 0;

49 
	}
}

51 
	gSåög
::
	$Såög
–c⁄° 
vÆue
 )

53 
_Àngth
 = 1;

54 
	`gëBuf„r
(1);

55 i‡–
_buf„r
 !
NULL
) {

56 
_buf„r
[0] = 
vÆue
;

57 
_buf„r
[1] = 0;

59 
	}
}

61 
	gSåög
::
	$Såög
–c⁄° 
vÆue
, c⁄° 
ba£
 )

63 
buf
[33];

64 
	`ôﬂ
((sig√d )
vÆue
, 
buf
, 
ba£
);

65 
	`gëBuf„r
–
_Àngth
 = 
	`°æí
(
buf
) );

66 i‡–
_buf„r
 !
NULL
 )

67 
	`°r˝y
–
_buf„r
, 
buf
 );

68 
	}
}

70 
	gSåög
::
	$Såög
–c⁄° 
vÆue
, c⁄° 
ba£
 )

72 
buf
[33];

73 
	`u…ﬂ
(()
vÆue
, 
buf
, 
ba£
);

74 
	`gëBuf„r
–
_Àngth
 = 
	`°æí
(
buf
) );

75 i‡–
_buf„r
 !
NULL
 )

76 
	`°r˝y
–
_buf„r
, 
buf
 );

77 
	}
}

79 
	gSåög
::
	$Såög
–c⁄° 
vÆue
, c⁄° 
ba£
 )

81 
buf
[33];

82 
	`…ﬂ
(
vÆue
, 
buf
, 
ba£
);

83 
	`gëBuf„r
–
_Àngth
 = 
	`°æí
(
buf
) );

84 i‡–
_buf„r
 !
NULL
 )

85 
	`°r˝y
–
_buf„r
, 
buf
 );

86 
	}
}

88 
	gSåög
::
	$Såög
–c⁄° 
vÆue
, c⁄° 
ba£
 )

90 
buf
[33];

91 
	`u…ﬂ
(
vÆue
, 
buf
, 10);

92 
	`gëBuf„r
–
_Àngth
 = 
	`°æí
(
buf
) );

93 i‡–
_buf„r
 !
NULL
 )

94 
	`°r˝y
–
_buf„r
, 
buf
 );

95 
	}
}

97 
	gSåög
::
	$ch¨At
–
loc
 ) const

99  
›î©‹
[]–
loc
 );

100 
	}
}

102 
	gSåög
::
	$£tCh¨At
–
loc
, c⁄° 
aCh¨
 )

104 if(
_buf„r
 =
NULL
) ;

105 if(
_Àngth
 > 
loc
) {

106 
_buf„r
[
loc
] = 
aCh¨
;

108 
	}
}

110 
	gSåög
::
	$com∑ªTo
–c⁄° 
Såög
 &
s2
 ) const

112  
	`°rcmp
–
_buf„r
, 
s2
._buffer );

113 
	}
}

115 c⁄° 
	gSåög
 & Såög::
	$c⁄ˇt
–c⁄° 
Såög
 &
s2
 )

117  (*
this
Ë+
s2
;

118 
	}
}

120 c⁄° 
	gSåög
 & Såög::
›î©‹
=–c⁄° 
Såög
 &
rhs
 )

122 i‡–
this
 =&
rhs
 )

123  *
this
;

125 i‡–
	grhs
.
	g_Àngth
 > _length )

127 
‰ì
(
_buf„r
);

128 
gëBuf„r
–
rhs
.
_Àngth
 );

131 i‡–
	g_buf„r
 !
NULL
 ) {

132 
_Àngth
 = 
rhs
._length;

133 
°r˝y
–
_buf„r
, 
rhs
._buffer );

135  *
	gthis
;

148 c⁄° 
	gSåög
 & Såög::
›î©‹
+=–c⁄° 
Såög
 &
Ÿhî
 )

150 
_Àngth
 +
Ÿhî
._length;

151 i‡–
	g_Àngth
 > 
	g_ˇ∑côy
 )

153 *
	gãmp
 = (*)
ªÆloc
(
_buf„r
, 
_Àngth
 + 1);

154 i‡–
	gãmp
 !
NULL
 ) {

155 
_buf„r
 = 
ãmp
;

156 
	g_ˇ∑côy
 = 
_Àngth
;

158 
	g_Àngth
 -
Ÿhî
.
_Àngth
;

159  *
	gthis
;

162 
°rˇt
–
_buf„r
, 
Ÿhî
._buffer );

163  *
	gthis
;

167 
	gSåög
::
›î©‹
==–c⁄° 
Såög
 &
rhs
 ) const

169  ( 
_Àngth
 =
rhs
._Àngth && 
°rcmp
–
_buf„r
,Ñhs._buffer ) == 0 );

172 
	gSåög
::
›î©‹
!=–c⁄° 
Såög
 &
rhs
 ) const

174  ( 
_Àngth
 !
rhs
.
Àngth
(Ë|| 
°rcmp
–
_buf„r
,Ñhs._buffer ) != 0 );

177 
	gSåög
::
›î©‹
<–c⁄° 
Såög
 &
rhs
 ) const

179  
°rcmp
–
_buf„r
, 
rhs
._buffer ) < 0;

182 
	gSåög
::
›î©‹
>–c⁄° 
Såög
 &
rhs
 ) const

184  
°rcmp
–
_buf„r
, 
rhs
._buffer ) > 0;

187 
	gSåög
::
›î©‹
<=–c⁄° 
Såög
 &
rhs
 ) const

189  
°rcmp
–
_buf„r
, 
rhs
._buffer ) <= 0;

192 
	gSåög
::
›î©‹
>=–c⁄° 
Såög
 & 
rhs
 ) const

194  
°rcmp
–
_buf„r
, 
rhs
._buffer ) >= 0;

197 & 
	gSåög
::
›î©‹
[]–
ödex
 )

199 
dummy_wrôabÀ_ch¨
;

200 i‡(
	gödex
 >
_Àngth
 || !
_buf„r
) {

201 
dummy_wrôabÀ_ch¨
 = 0;

202  
	gdummy_wrôabÀ_ch¨
;

204  
	g_buf„r
[ 
ödex
 ];

207 
	gSåög
::
›î©‹
[]–
ödex
 ) const

210  
_buf„r
[ 
ödex
 ];

213 
boﬁón
 
	gSåög
::
	$ídsWôh
–c⁄° 
Såög
 &
s2
 ) const

215 i‡–
_Àngth
 < 
s2
._length )

218  
	`°rcmp
–&
_buf„r
[ 
_Àngth
 - 
s2
._length], s2._buffer ) == 0;

219 
	}
}

221 
boﬁón
 
	gSåög
::
	$equÆs
–c⁄° 
Såög
 &
s2
 ) const

223  ( 
_Àngth
 =
s2
._Àngth && 
	`°rcmp
–
_buf„r
,s2._buffer ) == 0 );

224 
	}
}

226 
boﬁón
 
	gSåög
::
	$equÆsIgn‹eCa£
–c⁄° 
Såög
 &
s2
 ) const

228 i‡–
this
 =&
s2
 )

229  
åue
;

230 i‡–
_Àngth
 !
s2
._length )

231  
Ál£
;

233  
	`°rcmp
(
	`toLowîCa£
().
_buf„r
, 
s2
.toLowerCase()._buffer) == 0;

234 
	}
}

236 
Såög
 
	gSåög
::
	$ª∂a˚
–
födCh¨
, 
ª∂a˚Ch¨
 )

238 i‡–
_buf„r
 =
NULL
 )  *
this
;

239 
Såög
 
theRëu∫
 = 
_buf„r
;

240 * 
ãmp
 = 
theRëu∫
.
_buf„r
;

241  (
ãmp
 = 
	`°rchr
–ãmp, 
födCh¨
 )) != 0 )

242 *
ãmp
 = 
ª∂a˚Ch¨
;

244  
theRëu∫
;

245 
	}
}

247 
Såög
 
	gSåög
::
	$ª∂a˚
–c⁄° 
Såög
& 
m©ch
, c⁄° Såög& 
ª∂a˚
 )

249 i‡–
_buf„r
 =
NULL
 )  *
this
;

250 
Såög
 
ãmp
 = 
_buf„r
, 
√wSåög
;

252 
loc
;

253  (
loc
 = 
ãmp
.
	`ödexOf
–
m©ch
 )) != -1 )

255 
√wSåög
 +
ãmp
.
	`sub°rög
–0, 
loc
 );

256 
√wSåög
 +
ª∂a˚
;

257 
ãmp
 =Åemp.
	`sub°rög
–
loc
 + 
m©ch
.
_Àngth
 );

259 
√wSåög
 +
ãmp
;

260  
√wSåög
;

261 
	}
}

263 
	gSåög
::
	$ödexOf
–
ãmp
 ) const

265  
	`ödexOf
–
ãmp
, 0 );

266 
	}
}

268 
	gSåög
::
	$ödexOf
–
ch
, 
‰omIndex
 ) const

270 i‡–
‰omIndex
 >
_Àngth
 )

273 c⁄° * 
ãmp
 = 
	`°rchr
–&
_buf„r
[
‰omIndex
], 
ch
 );

274 i‡–
ãmp
 =
NULL
 )

277  
ãmp
 - 
_buf„r
;

278 
	}
}

280 
	gSåög
::
	$ödexOf
–c⁄° 
Såög
 &
s2
 ) const

282  
	`ödexOf
–
s2
, 0 );

283 
	}
}

285 
	gSåög
::
	$ödexOf
–c⁄° 
Såög
 &
s2
, 
‰omIndex
 ) const

287 i‡–
‰omIndex
 >
_Àngth
 )

290 c⁄° *
theFöd
 = 
	`°r°r
–&
_buf„r
[ 
‰omIndex
 ], 
s2
._buffer );

292 i‡–
theFöd
 =
NULL
 )

295  
theFöd
 - 
_buf„r
;

296 
	}
}

298 
	gSåög
::
	$œ°IndexOf
–
theCh¨
 ) const

300  
	`œ°IndexOf
–
theCh¨
, 
_Àngth
 - 1 );

301 
	}
}

303 
	gSåög
::
	$œ°IndexOf
–
ch
, 
‰omIndex
 ) const

305 i‡–
‰omIndex
 >
_Àngth
 )

308 
ãmpch¨
 = 
_buf„r
[
‰omIndex
 + 1];

309 
_buf„r
[
‰omIndex
 + 1] = '\0';

310 * 
ãmp
 = 
	`°ºchr
–
_buf„r
, 
ch
 );

311 
_buf„r
[
‰omIndex
 + 1] = 
ãmpch¨
;

313 i‡–
ãmp
 =
NULL
 )

316  
ãmp
 - 
_buf„r
;

317 
	}
}

319 
	gSåög
::
	$œ°IndexOf
–c⁄° 
Såög
 &
s2
 ) const

321  
	`œ°IndexOf
–
s2
, 
_Àngth
 - s2._length );

322 
	}
}

324 
	gSåög
::
	$œ°IndexOf
–c⁄° 
Såög
 &
s2
, 
‰omIndex
 ) const

327 i‡–
s2
.
_Àngth
 =0 || s2._Àngth - 1 > 
‰omIndex
 || fromIndex >= _length )

331 
ãmp
 = 
s2
[ 0 ];

333  
i
 = 
‰omIndex
; i >= 0; i-- )

335 i‡–
_buf„r
[ 
i
 ] =
ãmp
 && (*
this
).
	`sub°rög
–i, i + 
s2
.
_Àngth
 ).
	`equÆs
( s2 ) )

336  
i
;

339 
	}
}

341 
boﬁón
 
	gSåög
::
	$°¨tsWôh
–c⁄° 
Såög
 &
s2
 ) const

343 i‡–
_Àngth
 < 
s2
._length )

346  
	`°¨tsWôh
–
s2
, 0 );

347 
	}
}

349 
boﬁón
 
	gSåög
::
	$°¨tsWôh
–c⁄° 
Såög
 &
s2
, 
off£t
 ) const

351 i‡–
off£t
 > 
_Àngth
 - 
s2
._length )

354  
	`°∫cmp
–&
_buf„r
[
off£t
], 
s2
._buf„r, s2.
_Àngth
 ) == 0;

355 
	}
}

357 
Såög
 
	gSåög
::
	$sub°rög
–
À·
 ) const

359  
	`sub°rög
–
À·
, 
_Àngth
 );

360 
	}
}

362 
Såög
 
	gSåög
::
	$sub°rög
–
À·
, 
right
 ) const

364 i‡–
À·
 > 
right
 )

366 
ãmp
 = 
right
;

367 
right
 = 
À·
;

368 
À·
 = 
ãmp
;

371 i‡–
right
 > 
_Àngth
 )

373 
right
 = 
_Àngth
;

376 
ãmp
 = 
_buf„r
[ 
right
 ];

377 
_buf„r
[ 
right
 ] = '\0';

378 
Såög
 
outPut
 = ( 
_buf„r
 + 
À·
 );

379 
_buf„r
[ 
right
 ] = 
ãmp
;

380  
outPut
;

381 
	}
}

383 
Såög
 
	gSåög
::
	$toLowîCa£
() const

385 
Såög
 
ãmp
 = 
_buf„r
;

387  
i
 = 0; i < 
_Àngth
; i++ )

388 
ãmp
.
_buf„r
[ 
i
 ] = ()
	`tﬁowî
(Åemp._buffer[ i ] );

389  
ãmp
;

390 
	}
}

392 
Såög
 
	gSåög
::
	$toUµîCa£
() const

394 
Såög
 
ãmp
 = 
_buf„r
;

396  
i
 = 0; i < 
_Àngth
; i++ )

397 
ãmp
.
_buf„r
[ 
i
 ] = ()
	`touµî
(Åemp._buffer[ i ] );

398  
ãmp
;

399 
	}
}

401 
Såög
 
	gSåög
::
	$åim
() const

403 i‡–
_buf„r
 =
NULL
 )  *
this
;

404 
Såög
 
ãmp
 = 
_buf„r
;

405 
i
,
j
;

407  
i
 = 0; i < 
_Àngth
; i++ )

409 i‡–!
	`is•a˚
(
_buf„r
[
i
]) )

413  
j
 = 
ãmp
.
_Àngth
 - 1; j > 
i
; j-- )

415 i‡–!
	`is•a˚
(
_buf„r
[
j
]) )

419  
ãmp
.
	`sub°rög
–
i
, 
j
 + 1);

420 
	}
}

422 
	gSåög
::
	$gëByãs
(*
buf
, 
bufsize
)

424 i‡(!
bufsize
 || !
buf
) ;

425 
Àn
 = 
bufsize
 - 1;

426 i‡(
Àn
 > 
_Àngth
)Üen = _length;

427 
	`°∫˝y
((*)
buf
, 
_buf„r
, 
Àn
);

428 
buf
[
Àn
] = 0;

429 
	}
}

431 
	gSåög
::
	$toCh¨Aºay
(*
buf
, 
bufsize
)

433 i‡(!
bufsize
 || !
buf
) ;

434 
Àn
 = 
bufsize
 - 1;

435 i‡(
Àn
 > 
_Àngth
)Üen = _length;

436 
	`°∫˝y
(
buf
, 
_buf„r
, 
Àn
);

437 
buf
[
Àn
] = 0;

438 
	}
}

441 
	gSåög
::
	$toI¡
() {

442  
	`©ﬁ
(
_buf„r
);

443 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/WString.h

20 #i‚de‡
Såög_h


21 
	#Såög_h


	)

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<˘y≥.h
>

28 ˛as†
	cSåög


30 
	mpublic
:

32 
Såög
–c⁄° *
vÆue
 = "" );

33 
Såög
–c⁄° Såög &
vÆue
 );

34 
Såög
( const );

35 
Såög
( const );

36 
Såög
–c⁄° , c⁄° 
ba£
=10);

37 
Såög
–c⁄° , c⁄° 
ba£
=10 );

38 
Såög
–c⁄° , c⁄° 
ba£
=10 );

39 
Såög
–c⁄° , c⁄° 
ba£
=10 );

40 ~
	$Såög
(Ë{ 
	`‰ì
(
_buf„r
); 
_Àngth
 = 
_ˇ∑côy
 = 0;}

43 c⁄° 
Såög
 & 
›î©‹
 = ( c⁄° Såög &
rhs
 );

44 c⁄° 
Såög
 & 
›î©‹
 +=–c⁄° Såög &
rhs
 );

46 
›î©‹
 ==–c⁄° 
Såög
 &
rhs
 ) const;

47 
›î©‹
 !=–c⁄° 
Såög
 &
rhs
 ) const;

48 
›î©‹
 < ( c⁄° 
Såög
 &
rhs
 ) const;

49 
›î©‹
 > ( c⁄° 
Såög
 &
rhs
 ) const;

50 
›î©‹
 <=–c⁄° 
Såög
 &
rhs
 ) const;

51 
›î©‹
 >=–c⁄° 
Såög
 &
rhs
 ) const;

52 
›î©‹
 []–
ödex
 ) const;

53 & 
›î©‹
 []–
ödex
 );

57 
	$ch¨At
–
ödex
 ) const;

58 
	$com∑ªTo
–c⁄° 
Såög
 &
™ŸhîSåög
 ) const;

59 
	$ídsWôh
–c⁄° 
Såög
 &
suffix
 ) const;

60 
	$equÆs
–c⁄° 
Såög
 &
™Obje˘
 ) const;

61 
	$equÆsIgn‹eCa£
–c⁄° 
Såög
 &
™ŸhîSåög
 ) const;

62 
	$ödexOf
–
ch
 ) const;

63 
	$ödexOf
–
ch
, 
‰omIndex
 ) const;

64 
	$ödexOf
–c⁄° 
Såög
 &
°r
 ) const;

65 
	$ödexOf
–c⁄° 
Såög
 &
°r
, 
‰omIndex
 ) const;

66 
	$œ°IndexOf
–
ch
 ) const;

67 
	$œ°IndexOf
–
ch
, 
‰omIndex
 ) const;

68 
	$œ°IndexOf
–c⁄° 
Såög
 &
°r
 ) const;

69 
	$œ°IndexOf
–c⁄° 
Såög
 &
°r
, 
‰omIndex
 ) const;

70 c⁄° 
	$Àngth
–Ëc⁄° {  
_Àngth
; 
	}
}

71 
£tCh¨At
(
ödex
, c⁄° 
ch
);

72 
	$°¨tsWôh
–c⁄° 
Såög
 &
¥efix
 ) const;

73 
	$°¨tsWôh
–c⁄° 
Såög
 &
¥efix
, 
toff£t
 ) const;

74 
Såög
 
	$sub°rög
–
begöIndex
 ) const;

75 
Såög
 
	$sub°rög
–
begöIndex
, 
ídIndex
 ) const;

76 
Såög
 
	$toLowîCa£
( ) const;

77 
Såög
 
	$toUµîCa£
( ) const;

78 
Såög
 
	$åim
( ) const;

79 
	`gëByãs
(*
buf
, 
bufsize
);

80 
	`toCh¨Aºay
(*
buf
, 
bufsize
);

81 
	`toI¡
( );

82 c⁄° 
Såög
& 
	`c⁄ˇt
–c⁄° Såög &
°r
 );

83 
Såög
 
	`ª∂a˚
–
ﬁdCh¨
, 
√wCh¨
 );

84 
Såög
 
	`ª∂a˚
–c⁄° Såög& 
m©ch
, c⁄° Såög& 
ª∂a˚
 );

85 
‰õnd
 
Såög
 
›î©‹
 + ( Såög 
lhs
, c⁄° Såög &
rhs
 );

87 
¥Ÿe˘ed
:

88 *
_buf„r
;

89 
_ˇ∑côy
;

90 
_Àngth
;

92 
	`gëBuf„r
(
maxSåLí
);

94 
¥iv©e
:

96 
	}
};

99 
ölöe
 
	gSåög
::
	$gëBuf„r
(
maxSåLí
)

101 
_ˇ∑côy
 = 
maxSåLí
;

102 
_buf„r
 = (*Ë
	`mÆloc
(
_ˇ∑côy
 + 1);

103 i‡(
_buf„r
 =
NULL
Ë
_Àngth
 = 
_ˇ∑côy
 = 0;

104 
	}
}

106 
ölöe
 
Såög
 
	g›î©‹
+–Såög 
	glhs
, c⁄° 
	gSåög
 &
	grhs
 )

108  
	glhs
 +
rhs
;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/binary.h

1 #i‚de‡
Bö¨y_h


2 
	#Bö¨y_h


	)

4 
	#B0
 0

	)

5 
	#B00
 0

	)

6 
	#B000
 0

	)

7 
	#B0000
 0

	)

8 
	#B00000
 0

	)

9 
	#B000000
 0

	)

10 
	#B0000000
 0

	)

11 
	#B00000000
 0

	)

12 
	#B1
 1

	)

13 
	#B01
 1

	)

14 
	#B001
 1

	)

15 
	#B0001
 1

	)

16 
	#B00001
 1

	)

17 
	#B000001
 1

	)

18 
	#B0000001
 1

	)

19 
	#B00000001
 1

	)

20 
	#B10
 2

	)

21 
	#B010
 2

	)

22 
	#B0010
 2

	)

23 
	#B00010
 2

	)

24 
	#B000010
 2

	)

25 
	#B0000010
 2

	)

26 
	#B00000010
 2

	)

27 
	#B11
 3

	)

28 
	#B011
 3

	)

29 
	#B0011
 3

	)

30 
	#B00011
 3

	)

31 
	#B000011
 3

	)

32 
	#B0000011
 3

	)

33 
	#B00000011
 3

	)

34 
	#B100
 4

	)

35 
	#B0100
 4

	)

36 
	#B00100
 4

	)

37 
	#B000100
 4

	)

38 
	#B0000100
 4

	)

39 
	#B00000100
 4

	)

40 
	#B101
 5

	)

41 
	#B0101
 5

	)

42 
	#B00101
 5

	)

43 
	#B000101
 5

	)

44 
	#B0000101
 5

	)

45 
	#B00000101
 5

	)

46 
	#B110
 6

	)

47 
	#B0110
 6

	)

48 
	#B00110
 6

	)

49 
	#B000110
 6

	)

50 
	#B0000110
 6

	)

51 
	#B00000110
 6

	)

52 
	#B111
 7

	)

53 
	#B0111
 7

	)

54 
	#B00111
 7

	)

55 
	#B000111
 7

	)

56 
	#B0000111
 7

	)

57 
	#B00000111
 7

	)

58 
	#B1000
 8

	)

59 
	#B01000
 8

	)

60 
	#B001000
 8

	)

61 
	#B0001000
 8

	)

62 
	#B00001000
 8

	)

63 
	#B1001
 9

	)

64 
	#B01001
 9

	)

65 
	#B001001
 9

	)

66 
	#B0001001
 9

	)

67 
	#B00001001
 9

	)

68 
	#B1010
 10

	)

69 
	#B01010
 10

	)

70 
	#B001010
 10

	)

71 
	#B0001010
 10

	)

72 
	#B00001010
 10

	)

73 
	#B1011
 11

	)

74 
	#B01011
 11

	)

75 
	#B001011
 11

	)

76 
	#B0001011
 11

	)

77 
	#B00001011
 11

	)

78 
	#B1100
 12

	)

79 
	#B01100
 12

	)

80 
	#B001100
 12

	)

81 
	#B0001100
 12

	)

82 
	#B00001100
 12

	)

83 
	#B1101
 13

	)

84 
	#B01101
 13

	)

85 
	#B001101
 13

	)

86 
	#B0001101
 13

	)

87 
	#B00001101
 13

	)

88 
	#B1110
 14

	)

89 
	#B01110
 14

	)

90 
	#B001110
 14

	)

91 
	#B0001110
 14

	)

92 
	#B00001110
 14

	)

93 
	#B1111
 15

	)

94 
	#B01111
 15

	)

95 
	#B001111
 15

	)

96 
	#B0001111
 15

	)

97 
	#B00001111
 15

	)

98 
	#B10000
 16

	)

99 
	#B010000
 16

	)

100 
	#B0010000
 16

	)

101 
	#B00010000
 16

	)

102 
	#B10001
 17

	)

103 
	#B010001
 17

	)

104 
	#B0010001
 17

	)

105 
	#B00010001
 17

	)

106 
	#B10010
 18

	)

107 
	#B010010
 18

	)

108 
	#B0010010
 18

	)

109 
	#B00010010
 18

	)

110 
	#B10011
 19

	)

111 
	#B010011
 19

	)

112 
	#B0010011
 19

	)

113 
	#B00010011
 19

	)

114 
	#B10100
 20

	)

115 
	#B010100
 20

	)

116 
	#B0010100
 20

	)

117 
	#B00010100
 20

	)

118 
	#B10101
 21

	)

119 
	#B010101
 21

	)

120 
	#B0010101
 21

	)

121 
	#B00010101
 21

	)

122 
	#B10110
 22

	)

123 
	#B010110
 22

	)

124 
	#B0010110
 22

	)

125 
	#B00010110
 22

	)

126 
	#B10111
 23

	)

127 
	#B010111
 23

	)

128 
	#B0010111
 23

	)

129 
	#B00010111
 23

	)

130 
	#B11000
 24

	)

131 
	#B011000
 24

	)

132 
	#B0011000
 24

	)

133 
	#B00011000
 24

	)

134 
	#B11001
 25

	)

135 
	#B011001
 25

	)

136 
	#B0011001
 25

	)

137 
	#B00011001
 25

	)

138 
	#B11010
 26

	)

139 
	#B011010
 26

	)

140 
	#B0011010
 26

	)

141 
	#B00011010
 26

	)

142 
	#B11011
 27

	)

143 
	#B011011
 27

	)

144 
	#B0011011
 27

	)

145 
	#B00011011
 27

	)

146 
	#B11100
 28

	)

147 
	#B011100
 28

	)

148 
	#B0011100
 28

	)

149 
	#B00011100
 28

	)

150 
	#B11101
 29

	)

151 
	#B011101
 29

	)

152 
	#B0011101
 29

	)

153 
	#B00011101
 29

	)

154 
	#B11110
 30

	)

155 
	#B011110
 30

	)

156 
	#B0011110
 30

	)

157 
	#B00011110
 30

	)

158 
	#B11111
 31

	)

159 
	#B011111
 31

	)

160 
	#B0011111
 31

	)

161 
	#B00011111
 31

	)

162 
	#B100000
 32

	)

163 
	#B0100000
 32

	)

164 
	#B00100000
 32

	)

165 
	#B100001
 33

	)

166 
	#B0100001
 33

	)

167 
	#B00100001
 33

	)

168 
	#B100010
 34

	)

169 
	#B0100010
 34

	)

170 
	#B00100010
 34

	)

171 
	#B100011
 35

	)

172 
	#B0100011
 35

	)

173 
	#B00100011
 35

	)

174 
	#B100100
 36

	)

175 
	#B0100100
 36

	)

176 
	#B00100100
 36

	)

177 
	#B100101
 37

	)

178 
	#B0100101
 37

	)

179 
	#B00100101
 37

	)

180 
	#B100110
 38

	)

181 
	#B0100110
 38

	)

182 
	#B00100110
 38

	)

183 
	#B100111
 39

	)

184 
	#B0100111
 39

	)

185 
	#B00100111
 39

	)

186 
	#B101000
 40

	)

187 
	#B0101000
 40

	)

188 
	#B00101000
 40

	)

189 
	#B101001
 41

	)

190 
	#B0101001
 41

	)

191 
	#B00101001
 41

	)

192 
	#B101010
 42

	)

193 
	#B0101010
 42

	)

194 
	#B00101010
 42

	)

195 
	#B101011
 43

	)

196 
	#B0101011
 43

	)

197 
	#B00101011
 43

	)

198 
	#B101100
 44

	)

199 
	#B0101100
 44

	)

200 
	#B00101100
 44

	)

201 
	#B101101
 45

	)

202 
	#B0101101
 45

	)

203 
	#B00101101
 45

	)

204 
	#B101110
 46

	)

205 
	#B0101110
 46

	)

206 
	#B00101110
 46

	)

207 
	#B101111
 47

	)

208 
	#B0101111
 47

	)

209 
	#B00101111
 47

	)

210 
	#B110000
 48

	)

211 
	#B0110000
 48

	)

212 
	#B00110000
 48

	)

213 
	#B110001
 49

	)

214 
	#B0110001
 49

	)

215 
	#B00110001
 49

	)

216 
	#B110010
 50

	)

217 
	#B0110010
 50

	)

218 
	#B00110010
 50

	)

219 
	#B110011
 51

	)

220 
	#B0110011
 51

	)

221 
	#B00110011
 51

	)

222 
	#B110100
 52

	)

223 
	#B0110100
 52

	)

224 
	#B00110100
 52

	)

225 
	#B110101
 53

	)

226 
	#B0110101
 53

	)

227 
	#B00110101
 53

	)

228 
	#B110110
 54

	)

229 
	#B0110110
 54

	)

230 
	#B00110110
 54

	)

231 
	#B110111
 55

	)

232 
	#B0110111
 55

	)

233 
	#B00110111
 55

	)

234 
	#B111000
 56

	)

235 
	#B0111000
 56

	)

236 
	#B00111000
 56

	)

237 
	#B111001
 57

	)

238 
	#B0111001
 57

	)

239 
	#B00111001
 57

	)

240 
	#B111010
 58

	)

241 
	#B0111010
 58

	)

242 
	#B00111010
 58

	)

243 
	#B111011
 59

	)

244 
	#B0111011
 59

	)

245 
	#B00111011
 59

	)

246 
	#B111100
 60

	)

247 
	#B0111100
 60

	)

248 
	#B00111100
 60

	)

249 
	#B111101
 61

	)

250 
	#B0111101
 61

	)

251 
	#B00111101
 61

	)

252 
	#B111110
 62

	)

253 
	#B0111110
 62

	)

254 
	#B00111110
 62

	)

255 
	#B111111
 63

	)

256 
	#B0111111
 63

	)

257 
	#B00111111
 63

	)

258 
	#B1000000
 64

	)

259 
	#B01000000
 64

	)

260 
	#B1000001
 65

	)

261 
	#B01000001
 65

	)

262 
	#B1000010
 66

	)

263 
	#B01000010
 66

	)

264 
	#B1000011
 67

	)

265 
	#B01000011
 67

	)

266 
	#B1000100
 68

	)

267 
	#B01000100
 68

	)

268 
	#B1000101
 69

	)

269 
	#B01000101
 69

	)

270 
	#B1000110
 70

	)

271 
	#B01000110
 70

	)

272 
	#B1000111
 71

	)

273 
	#B01000111
 71

	)

274 
	#B1001000
 72

	)

275 
	#B01001000
 72

	)

276 
	#B1001001
 73

	)

277 
	#B01001001
 73

	)

278 
	#B1001010
 74

	)

279 
	#B01001010
 74

	)

280 
	#B1001011
 75

	)

281 
	#B01001011
 75

	)

282 
	#B1001100
 76

	)

283 
	#B01001100
 76

	)

284 
	#B1001101
 77

	)

285 
	#B01001101
 77

	)

286 
	#B1001110
 78

	)

287 
	#B01001110
 78

	)

288 
	#B1001111
 79

	)

289 
	#B01001111
 79

	)

290 
	#B1010000
 80

	)

291 
	#B01010000
 80

	)

292 
	#B1010001
 81

	)

293 
	#B01010001
 81

	)

294 
	#B1010010
 82

	)

295 
	#B01010010
 82

	)

296 
	#B1010011
 83

	)

297 
	#B01010011
 83

	)

298 
	#B1010100
 84

	)

299 
	#B01010100
 84

	)

300 
	#B1010101
 85

	)

301 
	#B01010101
 85

	)

302 
	#B1010110
 86

	)

303 
	#B01010110
 86

	)

304 
	#B1010111
 87

	)

305 
	#B01010111
 87

	)

306 
	#B1011000
 88

	)

307 
	#B01011000
 88

	)

308 
	#B1011001
 89

	)

309 
	#B01011001
 89

	)

310 
	#B1011010
 90

	)

311 
	#B01011010
 90

	)

312 
	#B1011011
 91

	)

313 
	#B01011011
 91

	)

314 
	#B1011100
 92

	)

315 
	#B01011100
 92

	)

316 
	#B1011101
 93

	)

317 
	#B01011101
 93

	)

318 
	#B1011110
 94

	)

319 
	#B01011110
 94

	)

320 
	#B1011111
 95

	)

321 
	#B01011111
 95

	)

322 
	#B1100000
 96

	)

323 
	#B01100000
 96

	)

324 
	#B1100001
 97

	)

325 
	#B01100001
 97

	)

326 
	#B1100010
 98

	)

327 
	#B01100010
 98

	)

328 
	#B1100011
 99

	)

329 
	#B01100011
 99

	)

330 
	#B1100100
 100

	)

331 
	#B01100100
 100

	)

332 
	#B1100101
 101

	)

333 
	#B01100101
 101

	)

334 
	#B1100110
 102

	)

335 
	#B01100110
 102

	)

336 
	#B1100111
 103

	)

337 
	#B01100111
 103

	)

338 
	#B1101000
 104

	)

339 
	#B01101000
 104

	)

340 
	#B1101001
 105

	)

341 
	#B01101001
 105

	)

342 
	#B1101010
 106

	)

343 
	#B01101010
 106

	)

344 
	#B1101011
 107

	)

345 
	#B01101011
 107

	)

346 
	#B1101100
 108

	)

347 
	#B01101100
 108

	)

348 
	#B1101101
 109

	)

349 
	#B01101101
 109

	)

350 
	#B1101110
 110

	)

351 
	#B01101110
 110

	)

352 
	#B1101111
 111

	)

353 
	#B01101111
 111

	)

354 
	#B1110000
 112

	)

355 
	#B01110000
 112

	)

356 
	#B1110001
 113

	)

357 
	#B01110001
 113

	)

358 
	#B1110010
 114

	)

359 
	#B01110010
 114

	)

360 
	#B1110011
 115

	)

361 
	#B01110011
 115

	)

362 
	#B1110100
 116

	)

363 
	#B01110100
 116

	)

364 
	#B1110101
 117

	)

365 
	#B01110101
 117

	)

366 
	#B1110110
 118

	)

367 
	#B01110110
 118

	)

368 
	#B1110111
 119

	)

369 
	#B01110111
 119

	)

370 
	#B1111000
 120

	)

371 
	#B01111000
 120

	)

372 
	#B1111001
 121

	)

373 
	#B01111001
 121

	)

374 
	#B1111010
 122

	)

375 
	#B01111010
 122

	)

376 
	#B1111011
 123

	)

377 
	#B01111011
 123

	)

378 
	#B1111100
 124

	)

379 
	#B01111100
 124

	)

380 
	#B1111101
 125

	)

381 
	#B01111101
 125

	)

382 
	#B1111110
 126

	)

383 
	#B01111110
 126

	)

384 
	#B1111111
 127

	)

385 
	#B01111111
 127

	)

386 
	#B10000000
 128

	)

387 
	#B10000001
 129

	)

388 
	#B10000010
 130

	)

389 
	#B10000011
 131

	)

390 
	#B10000100
 132

	)

391 
	#B10000101
 133

	)

392 
	#B10000110
 134

	)

393 
	#B10000111
 135

	)

394 
	#B10001000
 136

	)

395 
	#B10001001
 137

	)

396 
	#B10001010
 138

	)

397 
	#B10001011
 139

	)

398 
	#B10001100
 140

	)

399 
	#B10001101
 141

	)

400 
	#B10001110
 142

	)

401 
	#B10001111
 143

	)

402 
	#B10010000
 144

	)

403 
	#B10010001
 145

	)

404 
	#B10010010
 146

	)

405 
	#B10010011
 147

	)

406 
	#B10010100
 148

	)

407 
	#B10010101
 149

	)

408 
	#B10010110
 150

	)

409 
	#B10010111
 151

	)

410 
	#B10011000
 152

	)

411 
	#B10011001
 153

	)

412 
	#B10011010
 154

	)

413 
	#B10011011
 155

	)

414 
	#B10011100
 156

	)

415 
	#B10011101
 157

	)

416 
	#B10011110
 158

	)

417 
	#B10011111
 159

	)

418 
	#B10100000
 160

	)

419 
	#B10100001
 161

	)

420 
	#B10100010
 162

	)

421 
	#B10100011
 163

	)

422 
	#B10100100
 164

	)

423 
	#B10100101
 165

	)

424 
	#B10100110
 166

	)

425 
	#B10100111
 167

	)

426 
	#B10101000
 168

	)

427 
	#B10101001
 169

	)

428 
	#B10101010
 170

	)

429 
	#B10101011
 171

	)

430 
	#B10101100
 172

	)

431 
	#B10101101
 173

	)

432 
	#B10101110
 174

	)

433 
	#B10101111
 175

	)

434 
	#B10110000
 176

	)

435 
	#B10110001
 177

	)

436 
	#B10110010
 178

	)

437 
	#B10110011
 179

	)

438 
	#B10110100
 180

	)

439 
	#B10110101
 181

	)

440 
	#B10110110
 182

	)

441 
	#B10110111
 183

	)

442 
	#B10111000
 184

	)

443 
	#B10111001
 185

	)

444 
	#B10111010
 186

	)

445 
	#B10111011
 187

	)

446 
	#B10111100
 188

	)

447 
	#B10111101
 189

	)

448 
	#B10111110
 190

	)

449 
	#B10111111
 191

	)

450 
	#B11000000
 192

	)

451 
	#B11000001
 193

	)

452 
	#B11000010
 194

	)

453 
	#B11000011
 195

	)

454 
	#B11000100
 196

	)

455 
	#B11000101
 197

	)

456 
	#B11000110
 198

	)

457 
	#B11000111
 199

	)

458 
	#B11001000
 200

	)

459 
	#B11001001
 201

	)

460 
	#B11001010
 202

	)

461 
	#B11001011
 203

	)

462 
	#B11001100
 204

	)

463 
	#B11001101
 205

	)

464 
	#B11001110
 206

	)

465 
	#B11001111
 207

	)

466 
	#B11010000
 208

	)

467 
	#B11010001
 209

	)

468 
	#B11010010
 210

	)

469 
	#B11010011
 211

	)

470 
	#B11010100
 212

	)

471 
	#B11010101
 213

	)

472 
	#B11010110
 214

	)

473 
	#B11010111
 215

	)

474 
	#B11011000
 216

	)

475 
	#B11011001
 217

	)

476 
	#B11011010
 218

	)

477 
	#B11011011
 219

	)

478 
	#B11011100
 220

	)

479 
	#B11011101
 221

	)

480 
	#B11011110
 222

	)

481 
	#B11011111
 223

	)

482 
	#B11100000
 224

	)

483 
	#B11100001
 225

	)

484 
	#B11100010
 226

	)

485 
	#B11100011
 227

	)

486 
	#B11100100
 228

	)

487 
	#B11100101
 229

	)

488 
	#B11100110
 230

	)

489 
	#B11100111
 231

	)

490 
	#B11101000
 232

	)

491 
	#B11101001
 233

	)

492 
	#B11101010
 234

	)

493 
	#B11101011
 235

	)

494 
	#B11101100
 236

	)

495 
	#B11101101
 237

	)

496 
	#B11101110
 238

	)

497 
	#B11101111
 239

	)

498 
	#B11110000
 240

	)

499 
	#B11110001
 241

	)

500 
	#B11110010
 242

	)

501 
	#B11110011
 243

	)

502 
	#B11110100
 244

	)

503 
	#B11110101
 245

	)

504 
	#B11110110
 246

	)

505 
	#B11110111
 247

	)

506 
	#B11111000
 248

	)

507 
	#B11111001
 249

	)

508 
	#B11111010
 250

	)

509 
	#B11111011
 251

	)

510 
	#B11111100
 252

	)

511 
	#B11111101
 253

	)

512 
	#B11111110
 254

	)

513 
	#B11111111
 255

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/main.cpp

1 
	~<WProgøm.h
>

3 
	$maö
()

5 
	`öô
();

7 
	`£tup
();

10 
	`lo›
();

13 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/pins_arduino.c

28 
	~<avr/io.h
>

29 
	~"wúög_¥iv©e.h
"

30 
	~"pös_¨duöo.h
"

95 
	#PA
 1

	)

96 
	#PB
 2

	)

97 
	#PC
 3

	)

98 
	#PD
 4

	)

99 
	#PE
 5

	)

100 
	#PF
 6

	)

101 
	#PG
 7

	)

102 
	#PH
 8

	)

103 
	#PJ
 10

	)

104 
	#PK
 11

	)

105 
	#PL
 12

	)

108 #i‡
deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega2560__
)

109 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_mode_PGM
[] = {

110 
NOT_A_PORT
,

111 &
DDRA
,

112 &
DDRB
,

113 &
DDRC
,

114 &
DDRD
,

115 &
DDRE
,

116 &
DDRF
,

117 &
DDRG
,

118 &
DDRH
,

119 
NOT_A_PORT
,

120 &
DDRJ
,

121 &
DDRK
,

122 &
DDRL
,

125 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_ouçut_PGM
[] = {

126 
NOT_A_PORT
,

127 &
PORTA
,

128 &
PORTB
,

129 &
PORTC
,

130 &
PORTD
,

131 &
PORTE
,

132 &
PORTF
,

133 &
PORTG
,

134 &
PORTH
,

135 
NOT_A_PORT
,

136 &
PORTJ
,

137 &
PORTK
,

138 &
PORTL
,

141 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_öput_PGM
[] = {

142 
NOT_A_PIN
,

143 &
PINA
,

144 &
PINB
,

145 &
PINC
,

146 &
PIND
,

147 &
PINE
,

148 &
PINF
,

149 &
PING
,

150 &
PINH
,

151 
NOT_A_PIN
,

152 &
PINJ
,

153 &
PINK
,

154 &
PINL
,

157 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_p‹t_PGM
[] = {

160 
PE
 ,

161 
PE
 ,

162 
PE
 ,

163 
PE
 ,

164 
PG
 ,

165 
PE
 ,

166 
PH
 ,

167 
PH
 ,

168 
PH
 ,

169 
PH
 ,

170 
PB
 ,

171 
PB
 ,

172 
PB
 ,

173 
PB
 ,

174 
PJ
 ,

175 
PJ
 ,

176 
PH
 ,

177 
PH
 ,

178 
PD
 ,

179 
PD
 ,

180 
PD
 ,

181 
PD
 ,

182 
PA
 ,

183 
PA
 ,

184 
PA
 ,

185 
PA
 ,

186 
PA
 ,

187 
PA
 ,

188 
PA
 ,

189 
PA
 ,

190 
PC
 ,

191 
PC
 ,

192 
PC
 ,

193 
PC
 ,

194 
PC
 ,

195 
PC
 ,

196 
PC
 ,

197 
PC
 ,

198 
PD
 ,

199 
PG
 ,

200 
PG
 ,

201 
PG
 ,

202 
PL
 ,

203 
PL
 ,

204 
PL
 ,

205 
PL
 ,

206 
PL
 ,

207 
PL
 ,

208 
PL
 ,

209 
PL
 ,

210 
PB
 ,

211 
PB
 ,

212 
PB
 ,

213 
PB
 ,

214 
PF
 ,

215 
PF
 ,

216 
PF
 ,

217 
PF
 ,

218 
PF
 ,

219 
PF
 ,

220 
PF
 ,

221 
PF
 ,

222 
PK
 ,

223 
PK
 ,

224 
PK
 ,

225 
PK
 ,

226 
PK
 ,

227 
PK
 ,

228 
PK
 ,

229 
PK
 ,

232 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_bô_mask_PGM
[] = {

235 
_BV
( 0 ) ,

236 
_BV
( 1 ) ,

237 
_BV
( 4 ) ,

238 
_BV
( 5 ) ,

239 
_BV
( 5 ) ,

240 
_BV
( 3 ) ,

241 
_BV
( 3 ) ,

242 
_BV
( 4 ) ,

243 
_BV
( 5 ) ,

244 
_BV
( 6 ) ,

245 
_BV
( 4 ) ,

246 
_BV
( 5 ) ,

247 
_BV
( 6 ) ,

248 
_BV
( 7 ) ,

249 
_BV
( 1 ) ,

250 
_BV
( 0 ) ,

251 
_BV
( 1 ) ,

252 
_BV
( 0 ) ,

253 
_BV
( 3 ) ,

254 
_BV
( 2 ) ,

255 
_BV
( 1 ) ,

256 
_BV
( 0 ) ,

257 
_BV
( 0 ) ,

258 
_BV
( 1 ) ,

259 
_BV
( 2 ) ,

260 
_BV
( 3 ) ,

261 
_BV
( 4 ) ,

262 
_BV
( 5 ) ,

263 
_BV
( 6 ) ,

264 
_BV
( 7 ) ,

265 
_BV
( 7 ) ,

266 
_BV
( 6 ) ,

267 
_BV
( 5 ) ,

268 
_BV
( 4 ) ,

269 
_BV
( 3 ) ,

270 
_BV
( 2 ) ,

271 
_BV
( 1 ) ,

272 
_BV
( 0 ) ,

273 
_BV
( 7 ) ,

274 
_BV
( 2 ) ,

275 
_BV
( 1 ) ,

276 
_BV
( 0 ) ,

277 
_BV
( 7 ) ,

278 
_BV
( 6 ) ,

279 
_BV
( 5 ) ,

280 
_BV
( 4 ) ,

281 
_BV
( 3 ) ,

282 
_BV
( 2 ) ,

283 
_BV
( 1 ) ,

284 
_BV
( 0 ) ,

285 
_BV
( 3 ) ,

286 
_BV
( 2 ) ,

287 
_BV
( 1 ) ,

288 
_BV
( 0 ) ,

289 
_BV
( 0 ) ,

290 
_BV
( 1 ) ,

291 
_BV
( 2 ) ,

292 
_BV
( 3 ) ,

293 
_BV
( 4 ) ,

294 
_BV
( 5 ) ,

295 
_BV
( 6 ) ,

296 
_BV
( 7 ) ,

297 
_BV
( 0 ) ,

298 
_BV
( 1 ) ,

299 
_BV
( 2 ) ,

300 
_BV
( 3 ) ,

301 
_BV
( 4 ) ,

302 
_BV
( 5 ) ,

303 
_BV
( 6 ) ,

304 
_BV
( 7 ) ,

307 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_timî_PGM
[] = {

310 
NOT_ON_TIMER
 ,

311 
NOT_ON_TIMER
 ,

312 
TIMER3B
 ,

313 
TIMER3C
 ,

314 
TIMER0B
 ,

315 
TIMER3A
 ,

316 
TIMER4A
 ,

317 
TIMER4B
 ,

318 
TIMER4C
 ,

319 
TIMER2B
 ,

320 
TIMER2A
 ,

321 
TIMER1A
 ,

322 
TIMER1B
 ,

323 
TIMER0A
 ,

324 
NOT_ON_TIMER
 ,

325 
NOT_ON_TIMER
 ,

326 
NOT_ON_TIMER
 ,

327 
NOT_ON_TIMER
 ,

328 
NOT_ON_TIMER
 ,

329 
NOT_ON_TIMER
 ,

330 
NOT_ON_TIMER
 ,

331 
NOT_ON_TIMER
 ,

332 
NOT_ON_TIMER
 ,

333 
NOT_ON_TIMER
 ,

334 
NOT_ON_TIMER
 ,

335 
NOT_ON_TIMER
 ,

336 
NOT_ON_TIMER
 ,

337 
NOT_ON_TIMER
 ,

338 
NOT_ON_TIMER
 ,

339 
NOT_ON_TIMER
 ,

340 
NOT_ON_TIMER
 ,

341 
NOT_ON_TIMER
 ,

342 
NOT_ON_TIMER
 ,

343 
NOT_ON_TIMER
 ,

344 
NOT_ON_TIMER
 ,

345 
NOT_ON_TIMER
 ,

346 
NOT_ON_TIMER
 ,

347 
NOT_ON_TIMER
 ,

348 
NOT_ON_TIMER
 ,

349 
NOT_ON_TIMER
 ,

350 
NOT_ON_TIMER
 ,

351 
NOT_ON_TIMER
 ,

352 
NOT_ON_TIMER
 ,

353 
NOT_ON_TIMER
 ,

354 
TIMER5C
 ,

355 
TIMER5B
 ,

356 
TIMER5A
 ,

357 
NOT_ON_TIMER
 ,

358 
NOT_ON_TIMER
 ,

359 
NOT_ON_TIMER
 ,

360 
NOT_ON_TIMER
 ,

361 
NOT_ON_TIMER
 ,

362 
NOT_ON_TIMER
 ,

363 
NOT_ON_TIMER
 ,

364 
NOT_ON_TIMER
 ,

365 
NOT_ON_TIMER
 ,

366 
NOT_ON_TIMER
 ,

367 
NOT_ON_TIMER
 ,

368 
NOT_ON_TIMER
 ,

369 
NOT_ON_TIMER
 ,

370 
NOT_ON_TIMER
 ,

371 
NOT_ON_TIMER
 ,

372 
NOT_ON_TIMER
 ,

373 
NOT_ON_TIMER
 ,

374 
NOT_ON_TIMER
 ,

375 
NOT_ON_TIMER
 ,

376 
NOT_ON_TIMER
 ,

377 
NOT_ON_TIMER
 ,

378 
NOT_ON_TIMER
 ,

379 
NOT_ON_TIMER
 ,

381 #ñi‡
deföed
(
__AVR_ATmega644P__
Ë|| deföed(
__AVR_ATmega1284P__
)

385 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_mode_PGM
[] =

387 
NOT_A_PORT
,

388 &
DDRA
,

389 &
DDRB
,

390 &
DDRC
,

391 &
DDRD
,

394 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_ouçut_PGM
[] =

396 
NOT_A_PORT
,

397 &
PORTA
,

398 &
PORTB
,

399 &
PORTC
,

400 &
PORTD
,

402 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_öput_PGM
[] =

404 
NOT_A_PORT
,

405 &
PINA
,

406 &
PINB
,

407 &
PINC
,

408 &
PIND
,

410 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_p‹t_PGM
[] =

412 
PB
,

413 
PB
,

414 
PB
,

415 
PB
,

416 
PB
,

417 
PB
,

418 
PB
,

419 
PB
,

420 
PD
,

421 
PD
,

422 
PD
,

423 
PD
,

424 
PD
,

425 
PD
,

426 
PD
,

427 
PD
,

428 
PC
,

429 
PC
,

430 
PC
,

431 
PC
,

432 
PC
,

433 
PC
,

434 
PC
,

435 
PC
,

436 
PA
,

437 
PA
,

438 
PA
,

439 
PA
,

440 
PA
,

441 
PA
,

442 
PA
,

443 
PA


445 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_bô_mask_PGM
[] =

447 
_BV
(0),

448 
_BV
(1),

449 
_BV
(2),

450 
_BV
(3),

451 
_BV
(4),

452 
_BV
(5),

453 
_BV
(6),

454 
_BV
(7),

455 
_BV
(0),

456 
_BV
(1),

457 
_BV
(2),

458 
_BV
(3),

459 
_BV
(4),

460 
_BV
(5),

461 
_BV
(6),

462 
_BV
(7),

463 
_BV
(0),

464 
_BV
(1),

465 
_BV
(2),

466 
_BV
(3),

467 
_BV
(4),

468 
_BV
(5),

469 
_BV
(6),

470 
_BV
(7),

471 
_BV
(7),

472 
_BV
(6),

473 
_BV
(5),

474 
_BV
(4),

475 
_BV
(3),

476 
_BV
(2),

477 
_BV
(1),

478 
_BV
(0)

480 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_timî_PGM
[] =

482 
NOT_ON_TIMER
,

483 
NOT_ON_TIMER
,

484 
NOT_ON_TIMER
,

485 
TIMER0A
,

486 
TIMER0B
,

487 
NOT_ON_TIMER
,

488 
NOT_ON_TIMER
,

489 
NOT_ON_TIMER
,

490 
NOT_ON_TIMER
,

491 
NOT_ON_TIMER
,

492 
NOT_ON_TIMER
,

493 
NOT_ON_TIMER
,

494 
TIMER1B
,

495 
TIMER1A
,

496 
TIMER2B
,

497 
TIMER2A
,

498 
NOT_ON_TIMER
,

499 
NOT_ON_TIMER
,

500 
NOT_ON_TIMER
,

501 
NOT_ON_TIMER
,

502 
NOT_ON_TIMER
,

503 
NOT_ON_TIMER
,

504 
NOT_ON_TIMER
,

505 
NOT_ON_TIMER
,

506 
NOT_ON_TIMER
,

507 
NOT_ON_TIMER
,

508 
NOT_ON_TIMER
,

509 
NOT_ON_TIMER
,

510 
NOT_ON_TIMER
,

511 
NOT_ON_TIMER
,

512 
NOT_ON_TIMER
,

513 
NOT_ON_TIMER


520 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_mode_PGM
[] = {

521 
NOT_A_PORT
,

522 
NOT_A_PORT
,

523 &
DDRB
,

524 &
DDRC
,

525 &
DDRD
,

528 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_ouçut_PGM
[] = {

529 
NOT_A_PORT
,

530 
NOT_A_PORT
,

531 &
PORTB
,

532 &
PORTC
,

533 &
PORTD
,

536 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_öput_PGM
[] = {

537 
NOT_A_PORT
,

538 
NOT_A_PORT
,

539 &
PINB
,

540 &
PINC
,

541 &
PIND
,

544 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_p‹t_PGM
[] = {

545 
PD
,

546 
PD
,

547 
PD
,

548 
PD
,

549 
PD
,

550 
PD
,

551 
PD
,

552 
PD
,

553 
PB
,

554 
PB
,

555 
PB
,

556 
PB
,

557 
PB
,

558 
PB
,

559 
PC
,

560 
PC
,

561 
PC
,

562 
PC
,

563 
PC
,

564 
PC
,

567 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_bô_mask_PGM
[] = {

568 
_BV
(0),

569 
_BV
(1),

570 
_BV
(2),

571 
_BV
(3),

572 
_BV
(4),

573 
_BV
(5),

574 
_BV
(6),

575 
_BV
(7),

576 
_BV
(0),

577 
_BV
(1),

578 
_BV
(2),

579 
_BV
(3),

580 
_BV
(4),

581 
_BV
(5),

582 
_BV
(0),

583 
_BV
(1),

584 
_BV
(2),

585 
_BV
(3),

586 
_BV
(4),

587 
_BV
(5),

590 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_timî_PGM
[] = {

591 
NOT_ON_TIMER
,

592 
NOT_ON_TIMER
,

593 
NOT_ON_TIMER
,

595 #i‡
deföed
(
__AVR_ATmega8__
)

596 
NOT_ON_TIMER
,

598 
TIMER2B
,

600 
NOT_ON_TIMER
,

602 #i‡
deföed
(
__AVR_ATmega8__
)

603 
NOT_ON_TIMER
,

604 
NOT_ON_TIMER
,

606 
TIMER0B
,

607 
TIMER0A
,

609 
NOT_ON_TIMER
,

610 
NOT_ON_TIMER
,

611 
TIMER1A
,

612 
TIMER1B
,

613 #i‡
deföed
(
__AVR_ATmega8__
)

614 
TIMER2
,

616 
TIMER2A
,

618 
NOT_ON_TIMER
,

619 
NOT_ON_TIMER
,

620 
NOT_ON_TIMER
,

621 
NOT_ON_TIMER
,

622 
NOT_ON_TIMER
,

623 
NOT_ON_TIMER
,

624 
NOT_ON_TIMER
,

625 
NOT_ON_TIMER
,

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/pins_arduino.h

25 #i‚de‡
Pös_Arduöo_h


26 
	#Pös_Arduöo_h


	)

28 
	~<avr/pgm•a˚.h
>

30 
	#NOT_A_PIN
 0

	)

31 
	#NOT_A_PORT
 0

	)

33 
	#NOT_ON_TIMER
 0

	)

34 
	#TIMER0A
 1

	)

35 
	#TIMER0B
 2

	)

36 
	#TIMER1A
 3

	)

37 
	#TIMER1B
 4

	)

38 
	#TIMER2
 5

	)

39 
	#TIMER2A
 6

	)

40 
	#TIMER2B
 7

	)

42 
	#TIMER3A
 8

	)

43 
	#TIMER3B
 9

	)

44 
	#TIMER3C
 10

	)

45 
	#TIMER4A
 11

	)

46 
	#TIMER4B
 12

	)

47 
	#TIMER4C
 13

	)

48 
	#TIMER5A
 14

	)

49 
	#TIMER5B
 15

	)

50 
	#TIMER5C
 16

	)

52 #i‡
deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega2560__
)

53 c⁄° 
uöt8_t
 
	gSS
 = 53;

54 c⁄° 
uöt8_t
 
	gMOSI
 = 51;

55 c⁄° 
uöt8_t
 
	gMISO
 = 50;

56 c⁄° 
uöt8_t
 
	gSCK
 = 52;

57 #ñi‡
deföed
(
__AVR_ATmega644P__
Ë|| deföed(
__AVR_ATmega1284P__
)

58 c⁄° 
uöt8_t
 
	gSS
 = 4;

59 c⁄° 
uöt8_t
 
	gMOSI
 = 5;

60 c⁄° 
uöt8_t
 
	gMISO
 = 6;

61 c⁄° 
uöt8_t
 
	gSCK
 = 7;

64 c⁄° 
uöt8_t
 
	gSS
 = 10;

65 c⁄° 
uöt8_t
 
	gMOSI
 = 11;

66 c⁄° 
uöt8_t
 
	gMISO
 = 12;

67 c⁄° 
uöt8_t
 
	gSCK
 = 13;

72 c⁄° 
uöt16_t
 
PROGMEM
 
p‹t_to_mode_PGM
[];

73 c⁄° 
uöt16_t
 
PROGMEM
 
p‹t_to_öput_PGM
[];

74 c⁄° 
uöt16_t
 
PROGMEM
 
p‹t_to_ouçut_PGM
[];

76 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_p‹t_PGM
[];

78 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_bô_mask_PGM
[];

79 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_timî_PGM
[];

86 
	#digôÆPöToP‹t
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_p‹t_PGM
 + (PËË)

	)

87 
	#digôÆPöToBôMask
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_bô_mask_PGM
 + (PËË)

	)

88 
	#digôÆPöToTimî
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_timî_PGM
 + (PËË)

	)

89 
	#™ÆogInPöToBô
(
P
Ë(P)

	)

90 
	#p‹tOuçutRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–
	`pgm_ªad_w‹d
–
p‹t_to_ouçut_PGM
 + (P))Ë)

	)

91 
	#p‹tI≈utRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–
	`pgm_ªad_w‹d
–
p‹t_to_öput_PGM
 + (P))Ë)

	)

92 
	#p‹tModeRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–
	`pgm_ªad_w‹d
–
p‹t_to_mode_PGM
 + (P))Ë)

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/wiring.c

25 
	~"wúög_¥iv©e.h
"

29 
	#MICROSECONDS_PER_TIMER0_OVERFLOW
 (
	`˛ockCy˛esToMi¸o£c⁄ds
(64 * 256))

	)

32 
	#MILLIS_INC
 (
MICROSECONDS_PER_TIMER0_OVERFLOW
 / 1000)

	)

37 
	#FRACT_INC
 ((
MICROSECONDS_PER_TIMER0_OVERFLOW
 % 1000Ë>> 3)

	)

38 
	#FRACT_MAX
 (1000 >> 3)

	)

40 vﬁ©ûê
	gtimî0_ovîÊow_cou¡
 = 0;

41 vﬁ©ûê
	gtimî0_mûlis
 = 0;

42 
	gtimî0_‰a˘
 = 0;

44 
	$SIGNAL
(
TIMER0_OVF_ve˘
)

48 
m
 = 
timî0_mûlis
;

49 
f
 = 
timî0_‰a˘
;

51 
m
 +
MILLIS_INC
;

52 
f
 +
FRACT_INC
;

53 i‡(
f
 >
FRACT_MAX
) {

54 
f
 -
FRACT_MAX
;

55 
m
 += 1;

58 
timî0_‰a˘
 = 
f
;

59 
timî0_mûlis
 = 
m
;

60 
timî0_ovîÊow_cou¡
++;

61 
	}
}

63 
	$mûlis
()

65 
m
;

66 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

70 
	`˛i
();

71 
m
 = 
timî0_mûlis
;

72 
SREG
 = 
ﬁdSREG
;

74  
m
;

75 
	}
}

77 
	$mi¸os
() {

78 
m
;

79 
uöt8_t
 
ﬁdSREG
 = 
SREG
, 
t
;

81 
	`˛i
();

82 
m
 = 
timî0_ovîÊow_cou¡
;

83 #i‡
	`deföed
(
TCNT0
)

84 
t
 = 
TCNT0
;

85 #ñi‡
	`deföed
(
TCNT0L
)

86 
t
 = 
TCNT0L
;

88 #îr‹ 
TIMER
 0 
nŸ
 
deföed


92 #ifde‡
TIFR0


93 i‡((
TIFR0
 & 
	`_BV
(
TOV0
)Ë&& (
t
 < 255))

94 
m
++;

96 i‡((
TIFR
 & 
	`_BV
(
TOV0
)Ë&& (
t
 < 255))

97 
m
++;

100 
SREG
 = 
ﬁdSREG
;

102  ((
m
 << 8Ë+ 
t
Ë* (64 / 
	`˛ockCy˛esPîMi¸o£c⁄d
());

103 
	}
}

105 
	$dñay
(
ms
)

107 
uöt16_t
 
°¨t
 = (uöt16_t)
	`mi¸os
();

109 
ms
 > 0) {

110 i‡(((
uöt16_t
)
	`mi¸os
(Ë- 
°¨t
) >= 1000) {

111 
ms
--;

112 
°¨t
 += 1000;

115 
	}
}

118 
	$dñayMi¸o£c⁄ds
(
us
)

124 #i‡
F_CPU
 >= 16000000L

129 i‡(--
us
 == 0)

135 
us
 <<= 2;

138 
us
 -= 2;

145 i‡(--
us
 == 0)

147 i‡(--
us
 == 0)

153 
us
 <<= 1;

157 
us
--;

161 
__asm__
 
	`__vﬁ©ûe__
 (

163 "b∫ê1b" : "=w" (
us
) : "0" (us)

165 
	}
}

167 
	$öô
()

171 
	`£i
();

176 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
WGM01
)

177 
	`sbi
(
TCCR0A
, 
WGM01
);

178 
	`sbi
(
TCCR0A
, 
WGM00
);

182 #i‡
	`deföed
(
__AVR_ATmega128__
)

184 
	`sbi
(
TCCR0
, 
CS02
);

185 #ñi‡
	`deföed
(
TCCR0
Ë&& deföed(
CS01
Ë&& deföed(
CS00
)

187 
	`sbi
(
TCCR0
, 
CS01
);

188 
	`sbi
(
TCCR0
, 
CS00
);

189 #ñi‡
	`deföed
(
TCCR0B
Ë&& deföed(
CS01
Ë&& deföed(
CS00
)

191 
	`sbi
(
TCCR0B
, 
CS01
);

192 
	`sbi
(
TCCR0B
, 
CS00
);

193 #ñi‡
	`deföed
(
TCCR0A
Ë&& deföed(
CS01
Ë&& deföed(
CS00
)

195 
	`sbi
(
TCCR0A
, 
CS01
);

196 
	`sbi
(
TCCR0A
, 
CS00
);

198 #îr‹ 
Timî
 0 
¥esˇÀ
 
Á˘‹
 64 
nŸ
 
£t
 
c‹ª˘ly


202 #i‡
	`deföed
(
TIMSK
Ë&& deföed(
TOIE0
)

203 
	`sbi
(
TIMSK
, 
TOIE0
);

204 #ñi‡
	`deföed
(
TIMSK0
Ë&& deföed(
TOIE0
)

205 
	`sbi
(
TIMSK0
, 
TOIE0
);

207 #îr‹ 
Timî
 0 
ovîÊow
 
öãºu±
 
nŸ
 
£t
 
c‹ª˘ly


215 
TCCR1B
 = 0;

218 #i‡
	`deföed
(
TCCR1B
Ë&& deföed(
CS11
Ë&& deföed(
CS10
)

219 
	`sbi
(
TCCR1B
, 
CS11
);

220 
	`sbi
(
TCCR1B
, 
CS10
);

221 #ñi‡
	`deföed
(
TCCR1
Ë&& deföed(
CS11
Ë&& deföed(
CS10
)

222 
	`sbi
(
TCCR1
, 
CS11
);

223 
	`sbi
(
TCCR1
, 
CS10
);

226 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
WGM10
)

227 
	`sbi
(
TCCR1A
, 
WGM10
);

228 #ñi‡
	`deföed
(
TCCR1
)

229 #w¨nög 
this
 
√eds
 
to
 
be
 
föished


233 #i‡
	`deföed
(
TCCR2
Ë&& deföed(
CS22
)

234 
	`sbi
(
TCCR2
, 
CS22
);

235 #ñi‡
	`deföed
(
TCCR2B
Ë&& deföed(
CS22
)

236 
	`sbi
(
TCCR2B
, 
CS22
);

238 #w¨nög 
Timî
 2 
nŸ
 
	`föished
 (
may
ÇŸ 
be
 
¥e£¡
 
⁄
 
this
 
CPU
)

242 #i‡
	`deföed
(
TCCR2
Ë&& deföed(
WGM20
)

243 
	`sbi
(
TCCR2
, 
WGM20
);

244 #ñi‡
	`deföed
(
TCCR2A
Ë&& deföed(
WGM20
)

245 
	`sbi
(
TCCR2A
, 
WGM20
);

247 #w¨nög 
Timî
 2 
nŸ
 
	`föished
 (
may
ÇŸ 
be
 
¥e£¡
 
⁄
 
this
 
CPU
)

250 #i‡
	`deföed
(
TCCR3B
Ë&& deföed(
CS31
Ë&& deföed(
WGM30
)

251 
	`sbi
(
TCCR3B
, 
CS31
);

252 
	`sbi
(
TCCR3B
, 
CS30
);

253 
	`sbi
(
TCCR3A
, 
WGM30
);

256 #i‡
	`deföed
(
TCCR4B
Ë&& deföed(
CS41
Ë&& deföed(
WGM40
)

257 
	`sbi
(
TCCR4B
, 
CS41
);

258 
	`sbi
(
TCCR4B
, 
CS40
);

259 
	`sbi
(
TCCR4A
, 
WGM40
);

262 #i‡
	`deföed
(
TCCR5B
Ë&& deföed(
CS51
Ë&& deföed(
WGM50
)

263 
	`sbi
(
TCCR5B
, 
CS51
);

264 
	`sbi
(
TCCR5B
, 
CS50
);

265 
	`sbi
(
TCCR5A
, 
WGM50
);

268 #i‡
	`deföed
(
ADCSRA
)

273 
	`sbi
(
ADCSRA
, 
ADPS2
);

274 
	`sbi
(
ADCSRA
, 
ADPS1
);

275 
	`sbi
(
ADCSRA
, 
ADPS0
);

278 
	`sbi
(
ADCSRA
, 
ADEN
);

284 #i‡
	`deföed
(
UCSRB
)

285 
UCSRB
 = 0;

286 #ñi‡
	`deföed
(
UCSR0B
)

287 
UCSR0B
 = 0;

289 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/wiring.h

25 #i‚de‡
Wúög_h


26 
	#Wúög_h


	)

28 
	~<avr/io.h
>

29 
	~<°dlib.h
>

30 
	~"bö¨y.h
"

32 #ifde‡
__˝lu•lus


36 
	#HIGH
 0x1

	)

37 
	#LOW
 0x0

	)

39 
	#INPUT
 0x0

	)

40 
	#OUTPUT
 0x1

	)

42 
	#åue
 0x1

	)

43 
	#Ál£
 0x0

	)

45 
	#PI
 3.1415926535897932384626433832795

	)

46 
	#HALF_PI
 1.5707963267948966192313216916398

	)

47 
	#TWO_PI
 6.283185307179586476925286766559

	)

48 
	#DEG_TO_RAD
 0.017453292519943295769236907684886

	)

49 
	#RAD_TO_DEG
 57.295779513082320876798154814105

	)

51 
	#SERIAL
 0x0

	)

52 
	#DISPLAY
 0x1

	)

54 
	#LSBFIRST
 0

	)

55 
	#MSBFIRST
 1

	)

57 
	#CHANGE
 1

	)

58 
	#FALLING
 2

	)

59 
	#RISING
 3

	)

61 #i‡
deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega2560__
)

62 
	#INTERNAL1V1
 2

	)

63 
	#INTERNAL2V56
 3

	)

65 
	#INTERNAL
 3

	)

67 
	#DEFAULT
 1

	)

68 
	#EXTERNAL
 0

	)

71 #ifde‡
abs


72 #unde‡
abs


75 
	#mö
(
a
,
b
Ë(◊)<(b)?◊):(b))

	)

76 
	#max
(
a
,
b
Ë(◊)>(b)?◊):(b))

	)

77 
	#abs
(
x
Ë((x)>0?(x):-(x))

	)

78 
	#c⁄°øö
(
amt
,
low
,
high
Ë(◊mt)<÷ow)?÷ow):(◊mt)>(high)?(high):◊mt)))

	)

83 
	#ødüns
(
deg
Ë((deg)*
DEG_TO_RAD
)

	)

84 
	#degªes
(
ød
Ë(‘ad)*
RAD_TO_DEG
)

	)

85 
	#sq
(
x
Ë((x)*(x))

	)

87 
	#öãºu±s
(Ë
	`£i
()

	)

88 
	#noI¡îru±s
(Ë
	`˛i
()

	)

90 
	#˛ockCy˛esPîMi¸o£c⁄d
(Ë–
F_CPU
 / 1000000L )

	)

91 
	#˛ockCy˛esToMi¸o£c⁄ds
(
a
Ë–(◊Ë* 1000LË/ (
F_CPU
 / 1000LË)

	)

92 
	#mi¸o£c⁄dsToClockCy˛es
(
a
Ë–(◊Ë* (
F_CPU
 / 1000L)Ë/ 1000L )

	)

94 
	#lowByã
(
w
Ë((
uöt8_t
Ë((wË& 0xff))

	)

95 
	#highByã
(
w
Ë((
uöt8_t
Ë((wË>> 8))

	)

97 
	#bôRód
(
vÆue
, 
bô
Ë(((vÆueË>> (bô)Ë& 0x01)

	)

98 
	#bôSë
(
vÆue
, 
bô
Ë((vÆueË|(1UL << (bô)))

	)

99 
	#bôCÀ¨
(
vÆue
, 
bô
Ë((vÆueË&~(1UL << (bô)))

	)

100 
	#bôWrôe
(
vÆue
, 
bô
, 
bôvÆue
Ë(bôvÆuê? 
	`bôSë
(vÆue, bôË: 
	`bôCÀ¨
(vÆue, bô))

	)

103 
	tw‹d
;

105 
	#bô
(
b
Ë(1UL << (b))

	)

107 
uöt8_t
 
	tboﬁón
;

108 
uöt8_t
 
	tbyã
;

110 
öô
();

112 
pöMode
(
uöt8_t
, uint8_t);

113 
digôÆWrôe
(
uöt8_t
, uint8_t);

114 
digôÆRód
(
uöt8_t
);

115 
™ÆogRód
(
uöt8_t
);

116 
™ÆogRe„ªn˚
(
uöt8_t
 
mode
);

117 
™ÆogWrôe
(
uöt8_t
, );

119 
mûlis
();

120 
mi¸os
();

121 
dñay
();

122 
dñayMi¸o£c⁄ds
(
us
);

123 
pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
);

125 
shi·Out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
, uöt8_à
vÆ
);

126 
uöt8_t
 
shi·In
(uöt8_à
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
);

128 
©èchI¡îru±
(
uöt8_t
, (*)(), 
mode
);

129 
dëachI¡îru±
(
uöt8_t
);

131 
£tup
();

132 
lo›
();

134 #ifde‡
__˝lu•lus


	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/wiring_analog.c

27 
	~"wúög_¥iv©e.h
"

28 
	~"pös_¨duöo.h
"

30 
uöt8_t
 
	g™Æog_ª„ªn˚
 = 
DEFAULT
;

32 
	$™ÆogRe„ªn˚
(
uöt8_t
 
mode
)

37 
™Æog_ª„ªn˚
 = 
mode
;

38 
	}
}

40 
	$™ÆogRód
(
uöt8_t
 
pö
)

42 
uöt8_t
 
low
, 
high
;

44 #i‡
	`deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega2560__
)

45 i‡(
pö
 >= 54)Öin -= 54;

47 i‡(
pö
 >= 14)Öin -= 14;

50 #i‡
	`deföed
(
ADCSRB
Ë&& deföed(
MUX5
)

53 
ADCSRB
 = (ADCSRB & ~(1 << 
MUX5
)Ë| (((
pö
 >> 3) & 0x01) << MUX5);

59 #i‡
	`deföed
(
ADMUX
)

60 
ADMUX
 = (
™Æog_ª„ªn˚
 << 6Ë| (
pö
 & 0x07);

66 #i‡
	`deföed
(
ADCSRA
Ë&& deföed(
ADCL
)

68 
	`sbi
(
ADCSRA
, 
ADSC
);

71 
	`bô_is_£t
(
ADCSRA
, 
ADSC
));

77 
low
 = 
ADCL
;

78 
high
 = 
ADCH
;

81 
low
 = 0;

82 
high
 = 0;

86  (
high
 << 8Ë| 
low
;

87 
	}
}

93 
	$™ÆogWrôe
(
uöt8_t
 
pö
, 
vÆ
)

100 
	`pöMode
(
pö
, 
OUTPUT
);

101 i‡(
vÆ
 == 0)

103 
	`digôÆWrôe
(
pö
, 
LOW
);

105 i‡(
vÆ
 == 255)

107 
	`digôÆWrôe
(
pö
, 
HIGH
);

111 
	`digôÆPöToTimî
(
pö
))

114 #i‡
	`deföed
(
TCCR0
Ë&& deföed(
COM00
Ë&& !deföed(
__AVR_ATmega8__
)

115 
TIMER0A
:

117 
	`sbi
(
TCCR0
, 
COM00
);

118 
OCR0
 = 
vÆ
;

122 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
COM0A1
)

123 
TIMER0A
:

125 
	`sbi
(
TCCR0A
, 
COM0A1
);

126 
OCR0A
 = 
vÆ
;

130 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
COM0B1
)

131 
TIMER0B
:

133 
	`sbi
(
TCCR0A
, 
COM0B1
);

134 
OCR0B
 = 
vÆ
;

138 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
COM1A1
)

139 
TIMER1A
:

141 
	`sbi
(
TCCR1A
, 
COM1A1
);

142 
OCR1A
 = 
vÆ
;

146 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
COM1B1
)

147 
TIMER1B
:

149 
	`sbi
(
TCCR1A
, 
COM1B1
);

150 
OCR1B
 = 
vÆ
;

154 #i‡
	`deföed
(
TCCR2
Ë&& deföed(
COM21
)

155 
TIMER2
:

157 
	`sbi
(
TCCR2
, 
COM21
);

158 
OCR2
 = 
vÆ
;

162 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
COM2A1
)

163 
TIMER2A
:

165 
	`sbi
(
TCCR2A
, 
COM2A1
);

166 
OCR2A
 = 
vÆ
;

170 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
COM2B1
)

171 
TIMER2B
:

173 
	`sbi
(
TCCR2A
, 
COM2B1
);

174 
OCR2B
 = 
vÆ
;

178 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3A1
)

179 
TIMER3A
:

181 
	`sbi
(
TCCR3A
, 
COM3A1
);

182 
OCR3A
 = 
vÆ
;

186 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3B1
)

187 
TIMER3B
:

189 
	`sbi
(
TCCR3A
, 
COM3B1
);

190 
OCR3B
 = 
vÆ
;

194 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3C1
)

195 
TIMER3C
:

197 
	`sbi
(
TCCR3A
, 
COM3C1
);

198 
OCR3C
 = 
vÆ
;

202 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4A1
)

203 
TIMER4A
:

205 
	`sbi
(
TCCR4A
, 
COM4A1
);

206 
OCR4A
 = 
vÆ
;

210 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4B1
)

211 
TIMER4B
:

213 
	`sbi
(
TCCR4A
, 
COM4B1
);

214 
OCR4B
 = 
vÆ
;

218 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4C1
)

219 
TIMER4C
:

221 
	`sbi
(
TCCR4A
, 
COM4C1
);

222 
OCR4C
 = 
vÆ
;

226 #i‡
	`deföed
(
TCCR5A
Ë&& deföed(
COM5A1
)

227 
TIMER5A
:

229 
	`sbi
(
TCCR5A
, 
COM5A1
);

230 
OCR5A
 = 
vÆ
;

234 #i‡
	`deföed
(
TCCR5A
Ë&& deföed(
COM5B1
)

235 
TIMER5B
:

237 
	`sbi
(
TCCR5A
, 
COM5B1
);

238 
OCR5B
 = 
vÆ
;

242 #i‡
	`deföed
(
TCCR5A
Ë&& deföed(
COM5C1
)

243 
TIMER5C
:

245 
	`sbi
(
TCCR5A
, 
COM5C1
);

246 
OCR5C
 = 
vÆ
;

250 
NOT_ON_TIMER
:

252 i‡(
vÆ
 < 128) {

253 
	`digôÆWrôe
(
pö
, 
LOW
);

255 
	`digôÆWrôe
(
pö
, 
HIGH
);

259 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/wiring_digital.c

27 
	~"wúög_¥iv©e.h
"

28 
	~"pös_¨duöo.h
"

30 
	$pöMode
(
uöt8_t
 
pö
, uöt8_à
mode
)

32 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

33 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

34 vﬁ©ûê
uöt8_t
 *
ªg
;

36 i‡(
p‹t
 =
NOT_A_PIN
) ;

39 
ªg
 = 
	`p‹tModeRegi°î
(
p‹t
);

41 i‡(
mode
 =
INPUT
) {

42 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

43 
	`˛i
();

44 *
ªg
 &~
bô
;

45 
SREG
 = 
ﬁdSREG
;

47 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

48 
	`˛i
();

49 *
ªg
 |
bô
;

50 
SREG
 = 
ﬁdSREG
;

52 
	}
}

68 
	$tu∫OffPWM
(
uöt8_t
 
timî
)

70 
timî
)

72 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
COM1A1
)

73 
TIMER1A
: 
	`cbi
(
TCCR1A
, 
COM1A1
); ;

75 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
COM1B1
)

76 
TIMER1B
: 
	`cbi
(
TCCR1A
, 
COM1B1
); ;

79 #i‡
	`deföed
(
TCCR2
Ë&& deföed(
COM21
)

80 
TIMER2
: 
	`cbi
(
TCCR2
, 
COM21
); ;

83 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
COM0A1
)

84 
TIMER0A
: 
	`cbi
(
TCCR0A
, 
COM0A1
); ;

87 #i‡
	`deföed
(
TIMER0B
Ë&& deföed(
COM0B1
)

88 
TIMER0B
: 
	`cbi
(
TCCR0A
, 
COM0B1
); ;

90 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
COM2A1
)

91 
TIMER2A
: 
	`cbi
(
TCCR2A
, 
COM2A1
); ;

93 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
COM2B1
)

94 
TIMER2B
: 
	`cbi
(
TCCR2A
, 
COM2B1
); ;

97 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3A1
)

98 
TIMER3A
: 
	`cbi
(
TCCR3A
, 
COM3A1
); ;

100 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3B1
)

101 
TIMER3B
: 
	`cbi
(
TCCR3A
, 
COM3B1
); ;

103 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3C1
)

104 
TIMER3C
: 
	`cbi
(
TCCR3A
, 
COM3C1
); ;

107 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4A1
)

108 
TIMER4A
: 
	`cbi
(
TCCR4A
, 
COM4A1
); ;

110 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4B1
)

111 
TIMER4B
: 
	`cbi
(
TCCR4A
, 
COM4B1
); ;

113 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4C1
)

114 
TIMER4C
: 
	`cbi
(
TCCR4A
, 
COM4C1
); ;

116 #i‡
	`deföed
(
TCCR5A
)

117 
TIMER5A
: 
	`cbi
(
TCCR5A
, 
COM5A1
); ;

118 
TIMER5B
: 
	`cbi
(
TCCR5A
, 
COM5B1
); ;

119 
TIMER5C
: 
	`cbi
(
TCCR5A
, 
COM5C1
); ;

122 
	}
}

124 
	$digôÆWrôe
(
uöt8_t
 
pö
, uöt8_à
vÆ
)

126 
uöt8_t
 
timî
 = 
	`digôÆPöToTimî
(
pö
);

127 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

128 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

129 vﬁ©ûê
uöt8_t
 *
out
;

131 i‡(
p‹t
 =
NOT_A_PIN
) ;

135 i‡(
timî
 !
NOT_ON_TIMER
Ë
	`tu∫OffPWM
(timer);

137 
out
 = 
	`p‹tOuçutRegi°î
(
p‹t
);

139 i‡(
vÆ
 =
LOW
) {

140 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

141 
	`˛i
();

142 *
out
 &~
bô
;

143 
SREG
 = 
ﬁdSREG
;

145 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

146 
	`˛i
();

147 *
out
 |
bô
;

148 
SREG
 = 
ﬁdSREG
;

150 
	}
}

152 
	$digôÆRód
(
uöt8_t
 
pö
)

154 
uöt8_t
 
timî
 = 
	`digôÆPöToTimî
(
pö
);

155 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

156 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

158 i‡(
p‹t
 =
NOT_A_PIN
Ë 
LOW
;

162 i‡(
timî
 !
NOT_ON_TIMER
Ë
	`tu∫OffPWM
(timer);

164 i‡(*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë 
HIGH
;

165  
LOW
;

166 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/wiring_private.h

25 #i‚de‡
WúögPriv©e_h


26 
	#WúögPriv©e_h


	)

28 
	~<avr/io.h
>

29 
	~<avr/öãºu±.h
>

30 
	~<avr/dñay.h
>

31 
	~<°dio.h
>

32 
	~<°d¨g.h
>

34 
	~"wúög.h
"

36 #ifde‡
__˝lu•lus


40 #i‚de‡
cbi


41 
	#cbi
(
s‰
, 
bô
Ë(
	`_SFR_BYTE
(s‰Ë&~
	`_BV
(bô))

	)

43 #i‚de‡
sbi


44 
	#sbi
(
s‰
, 
bô
Ë(
	`_SFR_BYTE
(s‰Ë|
	`_BV
(bô))

	)

47 
	#EXTERNAL_INT_0
 0

	)

48 
	#EXTERNAL_INT_1
 1

	)

49 
	#EXTERNAL_INT_2
 2

	)

50 
	#EXTERNAL_INT_3
 3

	)

51 
	#EXTERNAL_INT_4
 4

	)

52 
	#EXTERNAL_INT_5
 5

	)

53 
	#EXTERNAL_INT_6
 6

	)

54 
	#EXTERNAL_INT_7
 7

	)

56 #i‡
deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega2560__
)

57 
	#EXTERNAL_NUM_INTERRUPTS
 8

	)

58 #ñi‡
deföed
(
__AVR_ATmega644P__
Ë|| deföed(
__AVR_ATmega1284P__
)

59 
	#EXTERNAL_NUM_INTERRUPTS
 3

	)

61 
	#EXTERNAL_NUM_INTERRUPTS
 2

	)

64 (*
voidFuncPå
)();

66 #ifde‡
__˝lu•lus


	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/wiring_pulse.c

25 
	~"wúög_¥iv©e.h
"

26 
	~"pös_¨duöo.h
"

32 
	$pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
)

37 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

38 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

39 
uöt8_t
 
°©eMask
 = (
°©e
 ? 
bô
 : 0);

40 
width
 = 0;

44 
numlo›s
 = 0;

45 
maxlo›s
 = 
	`mi¸o£c⁄dsToClockCy˛es
(
timeout
) / 16;

48 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë=
°©eMask
)

49 i‡(
numlo›s
++ =
maxlo›s
)

53 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë!
°©eMask
)

54 i‡(
numlo›s
++ =
maxlo›s
)

58 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë=
°©eMask
) {

59 i‡(
numlo›s
++ =
maxlo›s
)

61 
width
++;

68  
	`˛ockCy˛esToMi¸o£c⁄ds
(
width
 * 21 + 16);

69 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/wiring_shift.c

25 
	~"wúög_¥iv©e.h
"

27 
uöt8_t
 
	$shi·In
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
) {

28 
uöt8_t
 
vÆue
 = 0;

29 
uöt8_t
 
i
;

31 
i
 = 0; i < 8; ++i) {

32 
	`digôÆWrôe
(
˛ockPö
, 
HIGH
);

33 i‡(
bôOrdî
 =
LSBFIRST
)

34 
vÆue
 |
	`digôÆRód
(
d©aPö
Ë<< 
i
;

36 
vÆue
 |
	`digôÆRód
(
d©aPö
Ë<< (7 - 
i
);

37 
	`digôÆWrôe
(
˛ockPö
, 
LOW
);

39  
vÆue
;

40 
	}
}

42 
	$shi·Out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
, uöt8_à
vÆ
)

44 
uöt8_t
 
i
;

46 
i
 = 0; i < 8; i++) {

47 i‡(
bôOrdî
 =
LSBFIRST
)

48 
	`digôÆWrôe
(
d©aPö
, !!(
vÆ
 & (1 << 
i
)));

50 
	`digôÆWrôe
(
d©aPö
, !!(
vÆ
 & (1 << (7 - 
i
))));

52 
	`digôÆWrôe
(
˛ockPö
, 
HIGH
);

53 
	`digôÆWrôe
(
˛ockPö
, 
LOW
);

55 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/LiquidCrystal/LiquidCrystal.cpp

1 
	~"LiquidCry°Æ.h
"

3 
	~<°dio.h
>

4 
	~<°rög.h
>

5 
	~<öây≥s.h
>

6 
	~"WProgøm.h
"

27 
	gLiquidCry°Æ
::
	$LiquidCry°Æ
(
uöt8_t
 
rs
, uöt8_à
rw
, uöt8_à
íabÀ
,

28 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
,

29 
uöt8_t
 
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
)

31 
	`öô
(0, 
rs
, 
rw
, 
íabÀ
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
);

32 
	}
}

34 
	gLiquidCry°Æ
::
	$LiquidCry°Æ
(
uöt8_t
 
rs
, uöt8_à
íabÀ
,

35 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
,

36 
uöt8_t
 
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
)

38 
	`öô
(0, 
rs
, 255, 
íabÀ
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
);

39 
	}
}

41 
	gLiquidCry°Æ
::
	$LiquidCry°Æ
(
uöt8_t
 
rs
, uöt8_à
rw
, uöt8_à
íabÀ
,

42 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
)

44 
	`öô
(1, 
rs
, 
rw
, 
íabÀ
, 
d0
, 
d1
, 
d2
, 
d3
, 0, 0, 0, 0);

45 
	}
}

47 
	gLiquidCry°Æ
::
	$LiquidCry°Æ
(
uöt8_t
 
rs
, uöt8_à
íabÀ
,

48 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
)

50 
	`öô
(1, 
rs
, 255, 
íabÀ
, 
d0
, 
d1
, 
d2
, 
d3
, 0, 0, 0, 0);

51 
	}
}

53 
	gLiquidCry°Æ
::
	$öô
(
uöt8_t
 
fourbômode
, uöt8_à
rs
, uöt8_à
rw
, uöt8_à
íabÀ
,

54 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
,

55 
uöt8_t
 
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
)

57 
_rs_pö
 = 
rs
;

58 
_rw_pö
 = 
rw
;

59 
_íabÀ_pö
 = 
íabÀ
;

61 
_d©a_pös
[0] = 
d0
;

62 
_d©a_pös
[1] = 
d1
;

63 
_d©a_pös
[2] = 
d2
;

64 
_d©a_pös
[3] = 
d3
;

65 
_d©a_pös
[4] = 
d4
;

66 
_d©a_pös
[5] = 
d5
;

67 
_d©a_pös
[6] = 
d6
;

68 
_d©a_pös
[7] = 
d7
;

70 
	`pöMode
(
_rs_pö
, 
OUTPUT
);

72 i‡(
_rw_pö
 != 255) {

73 
	`pöMode
(
_rw_pö
, 
OUTPUT
);

75 
	`pöMode
(
_íabÀ_pö
, 
OUTPUT
);

77 i‡(
fourbômode
)

78 
_di•œyfun˘i⁄
 = 
LCD_4BITMODE
 | 
LCD_1LINE
 | 
LCD_5x8DOTS
;

80 
_di•œyfun˘i⁄
 = 
LCD_8BITMODE
 | 
LCD_1LINE
 | 
LCD_5x8DOTS
;

82 
	`begö
(16, 1);

83 
	}
}

85 
	gLiquidCry°Æ
::
	$begö
(
uöt8_t
 
cﬁs
, uöt8_à
löes
, uöt8_à
dŸsize
) {

86 i‡(
löes
 > 1) {

87 
_di•œyfun˘i⁄
 |
LCD_2LINE
;

89 
_numlöes
 = 
löes
;

90 
_cuºlöe
 = 0;

93 i‡((
dŸsize
 !0Ë&& (
löes
 == 1)) {

94 
_di•œyfun˘i⁄
 |
LCD_5x10DOTS
;

100 
	`dñayMi¸o£c⁄ds
(50000);

102 
	`digôÆWrôe
(
_rs_pö
, 
LOW
);

103 
	`digôÆWrôe
(
_íabÀ_pö
, 
LOW
);

104 i‡(
_rw_pö
 != 255) {

105 
	`digôÆWrôe
(
_rw_pö
, 
LOW
);

109 i‡(! (
_di•œyfun˘i⁄
 & 
LCD_8BITMODE
)) {

114 
	`wrôe4bôs
(0x03);

115 
	`dñayMi¸o£c⁄ds
(4500);

118 
	`wrôe4bôs
(0x03);

119 
	`dñayMi¸o£c⁄ds
(4500);

122 
	`wrôe4bôs
(0x03);

123 
	`dñayMi¸o£c⁄ds
(150);

126 
	`wrôe4bôs
(0x02);

132 
	`comm™d
(
LCD_FUNCTIONSET
 | 
_di•œyfun˘i⁄
);

133 
	`dñayMi¸o£c⁄ds
(4500);

136 
	`comm™d
(
LCD_FUNCTIONSET
 | 
_di•œyfun˘i⁄
);

137 
	`dñayMi¸o£c⁄ds
(150);

140 
	`comm™d
(
LCD_FUNCTIONSET
 | 
_di•œyfun˘i⁄
);

144 
	`comm™d
(
LCD_FUNCTIONSET
 | 
_di•œyfun˘i⁄
);

147 
_di•œyc⁄åﬁ
 = 
LCD_DISPLAYON
 | 
LCD_CURSOROFF
 | 
LCD_BLINKOFF
;

148 
	`di•œy
();

151 
	`˛ór
();

154 
_di•œymode
 = 
LCD_ENTRYLEFT
 | 
LCD_ENTRYSHIFTDECREMENT
;

156 
	`comm™d
(
LCD_ENTRYMODESET
 | 
_di•œymode
);

158 
	}
}

161 
	gLiquidCry°Æ
::
	$˛ór
()

163 
	`comm™d
(
LCD_CLEARDISPLAY
);

164 
	`dñayMi¸o£c⁄ds
(2000);

165 
	}
}

167 
	gLiquidCry°Æ
::
	$home
()

169 
	`comm™d
(
LCD_RETURNHOME
);

170 
	`dñayMi¸o£c⁄ds
(2000);

171 
	}
}

173 
	gLiquidCry°Æ
::
	$£tCurs‹
(
uöt8_t
 
cﬁ
, uöt8_à
row
)

175 
row_off£ts
[] = { 0x00, 0x40, 0x14, 0x54 };

176 i‡–
row
 > 
_numlöes
 ) {

177 
row
 = 
_numlöes
-1;

180 
	`comm™d
(
LCD_SETDDRAMADDR
 | (
cﬁ
 + 
row_off£ts
[
row
]));

181 
	}
}

184 
	gLiquidCry°Æ
::
	$noDi•œy
() {

185 
_di•œyc⁄åﬁ
 &~
LCD_DISPLAYON
;

186 
	`comm™d
(
LCD_DISPLAYCONTROL
 | 
_di•œyc⁄åﬁ
);

187 
	}
}

188 
	gLiquidCry°Æ
::
	$di•œy
() {

189 
_di•œyc⁄åﬁ
 |
LCD_DISPLAYON
;

190 
	`comm™d
(
LCD_DISPLAYCONTROL
 | 
_di•œyc⁄åﬁ
);

191 
	}
}

194 
	gLiquidCry°Æ
::
	$noCurs‹
() {

195 
_di•œyc⁄åﬁ
 &~
LCD_CURSORON
;

196 
	`comm™d
(
LCD_DISPLAYCONTROL
 | 
_di•œyc⁄åﬁ
);

197 
	}
}

198 
	gLiquidCry°Æ
::
	$curs‹
() {

199 
_di•œyc⁄åﬁ
 |
LCD_CURSORON
;

200 
	`comm™d
(
LCD_DISPLAYCONTROL
 | 
_di•œyc⁄åﬁ
);

201 
	}
}

204 
	gLiquidCry°Æ
::
	$noBlök
() {

205 
_di•œyc⁄åﬁ
 &~
LCD_BLINKON
;

206 
	`comm™d
(
LCD_DISPLAYCONTROL
 | 
_di•œyc⁄åﬁ
);

207 
	}
}

208 
	gLiquidCry°Æ
::
	$blök
() {

209 
_di•œyc⁄åﬁ
 |
LCD_BLINKON
;

210 
	`comm™d
(
LCD_DISPLAYCONTROL
 | 
_di•œyc⁄åﬁ
);

211 
	}
}

214 
	gLiquidCry°Æ
::
	$s¸ﬁlDi•œyLe·
() {

215 
	`comm™d
(
LCD_CURSORSHIFT
 | 
LCD_DISPLAYMOVE
 | 
LCD_MOVELEFT
);

216 
	}
}

217 
	gLiquidCry°Æ
::
	$s¸ﬁlDi•œyRight
() {

218 
	`comm™d
(
LCD_CURSORSHIFT
 | 
LCD_DISPLAYMOVE
 | 
LCD_MOVERIGHT
);

219 
	}
}

222 
	gLiquidCry°Æ
::
	$À·ToRight
() {

223 
_di•œymode
 |
LCD_ENTRYLEFT
;

224 
	`comm™d
(
LCD_ENTRYMODESET
 | 
_di•œymode
);

225 
	}
}

228 
	gLiquidCry°Æ
::
	$rightToLe·
() {

229 
_di•œymode
 &~
LCD_ENTRYLEFT
;

230 
	`comm™d
(
LCD_ENTRYMODESET
 | 
_di•œymode
);

231 
	}
}

234 
	gLiquidCry°Æ
::
	$autos¸ﬁl
() {

235 
_di•œymode
 |
LCD_ENTRYSHIFTINCREMENT
;

236 
	`comm™d
(
LCD_ENTRYMODESET
 | 
_di•œymode
);

237 
	}
}

240 
	gLiquidCry°Æ
::
	$noAutos¸ﬁl
() {

241 
_di•œymode
 &~
LCD_ENTRYSHIFTINCREMENT
;

242 
	`comm™d
(
LCD_ENTRYMODESET
 | 
_di•œymode
);

243 
	}
}

247 
	gLiquidCry°Æ
::
	$¸óãCh¨
(
uöt8_t
 
loˇti⁄
, uöt8_à
ch¨m≠
[]) {

248 
loˇti⁄
 &= 0x7;

249 
	`comm™d
(
LCD_SETCGRAMADDR
 | (
loˇti⁄
 << 3));

250 
i
=0; i<8; i++) {

251 
	`wrôe
(
ch¨m≠
[
i
]);

253 
	}
}

257 
ölöe
 
	gLiquidCry°Æ
::
	$comm™d
(
uöt8_t
 
vÆue
) {

258 
	`£nd
(
vÆue
, 
LOW
);

259 
	}
}

261 
ölöe
 
	gLiquidCry°Æ
::
	$wrôe
(
uöt8_t
 
vÆue
) {

262 
	`£nd
(
vÆue
, 
HIGH
);

263 
	}
}

268 
	gLiquidCry°Æ
::
	$£nd
(
uöt8_t
 
vÆue
, uöt8_à
mode
) {

269 
	`digôÆWrôe
(
_rs_pö
, 
mode
);

272 i‡(
_rw_pö
 != 255) {

273 
	`digôÆWrôe
(
_rw_pö
, 
LOW
);

276 i‡(
_di•œyfun˘i⁄
 & 
LCD_8BITMODE
) {

277 
	`wrôe8bôs
(
vÆue
);

279 
	`wrôe4bôs
(
vÆue
>>4);

280 
	`wrôe4bôs
(
vÆue
);

282 
	}
}

284 
	gLiquidCry°Æ
::
	$pul£E«bÀ
() {

285 
	`digôÆWrôe
(
_íabÀ_pö
, 
LOW
);

286 
	`dñayMi¸o£c⁄ds
(1);

287 
	`digôÆWrôe
(
_íabÀ_pö
, 
HIGH
);

288 
	`dñayMi¸o£c⁄ds
(1);

289 
	`digôÆWrôe
(
_íabÀ_pö
, 
LOW
);

290 
	`dñayMi¸o£c⁄ds
(100);

291 
	}
}

293 
	gLiquidCry°Æ
::
	$wrôe4bôs
(
uöt8_t
 
vÆue
) {

294 
i
 = 0; i < 4; i++) {

295 
	`pöMode
(
_d©a_pös
[
i
], 
OUTPUT
);

296 
	`digôÆWrôe
(
_d©a_pös
[
i
], (
vÆue
 >> i) & 0x01);

299 
	`pul£E«bÀ
();

300 
	}
}

302 
	gLiquidCry°Æ
::
	$wrôe8bôs
(
uöt8_t
 
vÆue
) {

303 
i
 = 0; i < 8; i++) {

304 
	`pöMode
(
_d©a_pös
[
i
], 
OUTPUT
);

305 
	`digôÆWrôe
(
_d©a_pös
[
i
], (
vÆue
 >> i) & 0x01);

308 
	`pul£E«bÀ
();

309 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/LiquidCrystal/LiquidCrystal.h

1 #i‚de‡
LiquidCry°Æ_h


2 
	#LiquidCry°Æ_h


	)

4 
	~<öây≥s.h
>

5 
	~"Pröt.h
"

8 
	#LCD_CLEARDISPLAY
 0x01

	)

9 
	#LCD_RETURNHOME
 0x02

	)

10 
	#LCD_ENTRYMODESET
 0x04

	)

11 
	#LCD_DISPLAYCONTROL
 0x08

	)

12 
	#LCD_CURSORSHIFT
 0x10

	)

13 
	#LCD_FUNCTIONSET
 0x20

	)

14 
	#LCD_SETCGRAMADDR
 0x40

	)

15 
	#LCD_SETDDRAMADDR
 0x80

	)

18 
	#LCD_ENTRYRIGHT
 0x00

	)

19 
	#LCD_ENTRYLEFT
 0x02

	)

20 
	#LCD_ENTRYSHIFTINCREMENT
 0x01

	)

21 
	#LCD_ENTRYSHIFTDECREMENT
 0x00

	)

24 
	#LCD_DISPLAYON
 0x04

	)

25 
	#LCD_DISPLAYOFF
 0x00

	)

26 
	#LCD_CURSORON
 0x02

	)

27 
	#LCD_CURSOROFF
 0x00

	)

28 
	#LCD_BLINKON
 0x01

	)

29 
	#LCD_BLINKOFF
 0x00

	)

32 
	#LCD_DISPLAYMOVE
 0x08

	)

33 
	#LCD_CURSORMOVE
 0x00

	)

34 
	#LCD_MOVERIGHT
 0x04

	)

35 
	#LCD_MOVELEFT
 0x00

	)

38 
	#LCD_8BITMODE
 0x10

	)

39 
	#LCD_4BITMODE
 0x00

	)

40 
	#LCD_2LINE
 0x08

	)

41 
	#LCD_1LINE
 0x00

	)

42 
	#LCD_5x10DOTS
 0x04

	)

43 
	#LCD_5x8DOTS
 0x00

	)

45 ˛as†
	cLiquidCry°Æ
 : 
public
 
Pröt
 {

46 
public
:

47 
LiquidCry°Æ
(
uöt8_t
 
rs
, uöt8_à
íabÀ
,

48 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
,

49 
uöt8_t
 
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
);

50 
LiquidCry°Æ
(
uöt8_t
 
rs
, uöt8_à
rw
, uöt8_à
íabÀ
,

51 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
,

52 
uöt8_t
 
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
);

53 
LiquidCry°Æ
(
uöt8_t
 
rs
, uöt8_à
rw
, uöt8_à
íabÀ
,

54 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
);

55 
LiquidCry°Æ
(
uöt8_t
 
rs
, uöt8_à
íabÀ
,

56 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
);

58 
öô
(
uöt8_t
 
fourbômode
, uöt8_à
rs
, uöt8_à
rw
, uöt8_à
íabÀ
,

59 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
,

60 
uöt8_t
 
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
);

62 
begö
(
uöt8_t
 
cﬁs
, uöt8_à
rows
, uöt8_à
ch¨size
 = 
LCD_5x8DOTS
);

64 
˛ór
();

65 
home
();

67 
noDi•œy
();

68 
di•œy
();

69 
noBlök
();

70 
blök
();

71 
noCurs‹
();

72 
curs‹
();

73 
s¸ﬁlDi•œyLe·
();

74 
s¸ﬁlDi•œyRight
();

75 
À·ToRight
();

76 
rightToLe·
();

77 
autos¸ﬁl
();

78 
noAutos¸ﬁl
();

80 
¸óãCh¨
(
uöt8_t
, uint8_t[]);

81 
£tCurs‹
(
uöt8_t
, uint8_t);

82 
vútuÆ
 
wrôe
(
uöt8_t
);

83 
comm™d
(
uöt8_t
);

84 
	m¥iv©e
:

85 
£nd
(
uöt8_t
, uint8_t);

86 
wrôe4bôs
(
uöt8_t
);

87 
wrôe8bôs
(
uöt8_t
);

88 
pul£E«bÀ
();

90 
uöt8_t
 
	m_rs_pö
;

91 
uöt8_t
 
	m_rw_pö
;

92 
uöt8_t
 
	m_íabÀ_pö
;

93 
uöt8_t
 
	m_d©a_pös
[8];

95 
uöt8_t
 
	m_di•œyfun˘i⁄
;

96 
uöt8_t
 
	m_di•œyc⁄åﬁ
;

97 
uöt8_t
 
	m_di•œymode
;

99 
uöt8_t
 
	m_öôülized
;

101 
uöt8_t
 
	m_numlöes
,
	m_cuºlöe
;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/SPI/SPI.cpp

11 
	~"pös_¨duöo.h
"

12 
	~"SPI.h
"

14 
SPICœss
 
	gSPI
;

16 
	gSPICœss
::
	$begö
() {

23 
	`pöMode
(
SCK
, 
OUTPUT
);

24 
	`pöMode
(
MOSI
, 
OUTPUT
);

25 
	`pöMode
(
SS
, 
OUTPUT
);

27 
	`digôÆWrôe
(
SCK
, 
LOW
);

28 
	`digôÆWrôe
(
MOSI
, 
LOW
);

29 
	`digôÆWrôe
(
SS
, 
HIGH
);

34 
SPCR
 |
	`_BV
(
MSTR
);

35 
SPCR
 |
	`_BV
(
SPE
);

36 
	}
}

38 
	gSPICœss
::
	$íd
() {

39 
SPCR
 &~
	`_BV
(
SPE
);

40 
	}
}

42 
	gSPICœss
::
	$£tBôOrdî
(
uöt8_t
 
bôOrdî
)

44 if(
bôOrdî
 =
LSBFIRST
) {

45 
SPCR
 |
	`_BV
(
DORD
);

47 
SPCR
 &~(
	`_BV
(
DORD
));

49 
	}
}

51 
	gSPICœss
::
	$£tD©aMode
(
uöt8_t
 
mode
)

53 
SPCR
 = (SPCR & ~
SPI_MODE_MASK
Ë| 
mode
;

54 
	}
}

56 
	gSPICœss
::
	$£tClockDividî
(
uöt8_t
 
øã
)

58 
SPCR
 = (SPCR & ~
SPI_CLOCK_MASK
Ë| (
øã
 & SPI_CLOCK_MASK);

59 
SPSR
 = (SPSR & ~
SPI_2XCLOCK_MASK
Ë| ((
øã
 >> 2) & SPI_2XCLOCK_MASK);

60 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/SPI/SPI.h

11 #i‚de‡
_SPI_H_INCLUDED


12 
	#_SPI_H_INCLUDED


	)

14 
	~<°dio.h
>

15 
	~<WProgøm.h
>

16 
	~<avr/pgm•a˚.h
>

18 
	#SPI_CLOCK_DIV4
 0x00

	)

19 
	#SPI_CLOCK_DIV16
 0x01

	)

20 
	#SPI_CLOCK_DIV64
 0x02

	)

21 
	#SPI_CLOCK_DIV128
 0x03

	)

22 
	#SPI_CLOCK_DIV2
 0x04

	)

23 
	#SPI_CLOCK_DIV8
 0x05

	)

24 
	#SPI_CLOCK_DIV32
 0x06

	)

25 
	#SPI_CLOCK_DIV64
 0x07

	)

27 
	#SPI_MODE0
 0x00

	)

28 
	#SPI_MODE1
 0x04

	)

29 
	#SPI_MODE2
 0x08

	)

30 
	#SPI_MODE3
 0x0C

	)

32 
	#SPI_MODE_MASK
 0x0C

33 
	#SPI_CLOCK_MASK
 0x03

34 
	#SPI_2XCLOCK_MASK
 0x01

35 

	)

36 ˛as†
	cSPICœss
 {

37 
	mpublic
:

38 
ölöe
 
byã
 
å™s„r
(byã 
_d©a
);

42 
ölöe
 
©èchI¡îru±
();

43 
ölöe
 
dëachI¡îru±
();

45 
begö
();

46 
íd
();

48 
£tBôOrdî
(
uöt8_t
);

49 
£tD©aMode
(
uöt8_t
);

50 
£tClockDividî
(
uöt8_t
);

53 
SPICœss
 
SPI
;

55 
byã
 
	gSPICœss
::
	$å™s„r
(
byã
 
_d©a
) {

56 
SPDR
 = 
_d©a
;

57 !(
SPSR
 & 
	`_BV
(
SPIF
)))

59  
SPDR
;

60 
	}
}

62 
	gSPICœss
::
	$©èchI¡îru±
() {

63 
SPCR
 |
	`_BV
(
SPIE
);

64 
	}
}

66 
	gSPICœss
::
	$dëachI¡îru±
() {

67 
SPCR
 &~
	`_BV
(
SPIE
);

68 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/U8glib.cpp

38 
	~"U8glib.h
"

42 
uöt8_t
 
	gU8GLIB
::
	$öôSPI
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
)

44 
	`¥ï¨e
();

45  
	`u8g_InôSPI
(&
u8g
, 
dev
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
);

46 
	}
}

48 
uöt8_t
 
	gU8GLIB
::
	$öôHWSPI
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
)

50 
	`¥ï¨e
();

51  
	`u8g_InôHWSPI
(&
u8g
, 
dev
, 
cs
, 
a0
, 
ª£t
);

52 
	}
}

54 
uöt8_t
 
	gU8GLIB
::
	$öôI2C
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
›ti⁄s
)

56 
	`¥ï¨e
();

57  
	`u8g_InôI2C
(&
u8g
, 
dev
, 
›ti⁄s
);

58 
	}
}

60 
uöt8_t
 
	gU8GLIB
::
	$öô8Bô
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

61 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
, uöt8_à
ª£t
)

63 
	`¥ï¨e
();

64  
	`u8g_Inô8Bô
(&
u8g
, 
dev
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
cs2
, 
di
, 
rw
, 
ª£t
);

65 
	}
}

67 
uöt8_t
 
	gU8GLIB
::
	$öô8BôFixedP‹t
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
í
, uöt8_à
cs
, uöt8_à
di
, uöt8_à
rw
, uöt8_à
ª£t
)

69 
	`¥ï¨e
();

70  
	`u8g_Inô8BôFixedP‹t
(&
u8g
, 
dev
, 
í
, 
cs
, 
di
, 
rw
, 
ª£t
);

71 
	}
}

73 
uöt8_t
 
	gU8GLIB
::
	$öôRW8Bô
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

74 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
wr
, uöt8_à
rd
, uöt8_à
ª£t
)

76 
	`¥ï¨e
();

77  
	`u8g_InôRW8Bô
(&
u8g
, 
dev
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
cs
, 
a0
, 
wr
, 
rd
, 
ª£t
);

78 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/U8glib.h

38 #i‚de‡
_CPP_U8GLIB


39 
	#_CPP_U8GLIB


	)

41 
	~<Pröt.h
>

42 
	~"utûôy/u8g.h
"

45 ˛as†
	cU8GLIB
 : 
public
 
Pröt


47 
¥iv©e
:

48 
u8g_t
 
u8g
;

49 
u8g_uöt_t
 
	mtx
, 
	mty
;

50 
uöt8_t
 
	mis_begö
;

52 
	$¥ï¨e
(Ë{ 
tx
 = 0; 
ty
 = 0; 
is_begö
 = 0; }

53 
	$cbegö
(Ë{ i‡–
is_begö
 =0 ) { is_begö = 1; 
	`u8g_Begö
(&
u8g
); } 
	}
}

54 
uöt8_t
 
öôSPI
(
u8g_dev_t
 *
dev
, uöt8_à
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
);

55 
uöt8_t
 
öôHWSPI
(
u8g_dev_t
 *
dev
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
);

56 
uöt8_t
 
öôI2C
(
u8g_dev_t
 *
dev
, uöt8_à
›ti⁄s
);

57 
	g¥Ÿe˘ed
:

58 
uöt8_t
 
öô8BôFixedP‹t
(
u8g_dev_t
 *
dev
, uöt8_à
í
, uöt8_à
cs
, uöt8_à
di
, uöt8_à
rw
, uöt8_à
ª£t
);

59 
	g¥iv©e
:

60 
uöt8_t
 
öô8Bô
(
u8g_dev_t
 *
dev
, uöt8_à
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

61 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE);

62 
uöt8_t
 
öôRW8Bô
(
u8g_dev_t
 *
dev
, uöt8_à
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

63 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
wr
, uöt8_à
rd
, uöt8_à
ª£t
);

64 
	gpublic
:

67 
	$U8GLIB
()

68 { 
	}
}

69 
	$U8GLIB
(
u8g_dev_t
 *
dev
)

70 { 
	`¥ï¨e
(); 
	`u8g_Inô
(&
u8g
, 
dev
); 
	}
}

71 
	$U8GLIB
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
)

72 { 
	`öôSPI
(
dev
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
); 
	}
}

73 
	$U8GLIB
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
)

74 { 
	`öôHWSPI
(
dev
, 
cs
, 
a0
, 
ª£t
); 
	}
}

75 
	$U8GLIB
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
›ti⁄s
)

76 { 
	`öôI2C
(
dev
, 
›ti⁄s
); 
	}
}

77 
	$U8GLIB
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

78 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
, uöt8_à
ª£t
)

79 { 
	`öô8Bô
(
dev
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
cs2
, 
di
, 
rw
, 
ª£t
); 
	}
}

80 
	$U8GLIB
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

81 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
wr
, uöt8_à
rd
, uöt8_à
ª£t
)

82 { 
	`öôRW8Bô
(
dev
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
cs
, 
a0
, 
wr
, 
rd
, 
ª£t
); 
	}
}

84 
uöt8_t
 
	$begö
(Ë{ 
is_begö
 = 1;  
	`u8g_Begö
(&
u8g
); 
	}
}

86 
	$£tPrötPos
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
Ë{ 
tx
 = x; 
ty
 = y; 
	}
}

87 
u8g_t
 *
	$gëU8g
(Ë{  &
u8g
; 
	}
}

91 #i‡
deföed
(
ARDUINO
) && ARDUINO >= 100

92 
size_t
 
	$wrôe
(
uöt8_t
 
c
Ë{ 
tx
 +
	`u8g_DøwGlyph
(&
u8g
,Åx, 
ty
, c);  1;
	}
}

94 
	$wrôe
(
uöt8_t
 
c
Ë{ 
tx
 +
	`u8g_DøwGlyph
(&
u8g
,Åx, 
ty
, c); 
	}
}

98 
	$undoRŸ©i⁄
(Ë{ 
	`u8g_UndoRŸ©i⁄
(&
u8g
); 
	}
}

99 
	$£tRŸ90
(Ë{ 
	`u8g_SëRŸ90
(&
u8g
); 
	}
}

100 
	$£tRŸ180
(Ë{ 
	`u8g_SëRŸ180
(&
u8g
); 
	}
}

101 
	$£tRŸ270
(Ë{ 
	`u8g_SëRŸ270
(&
u8g
); 
	}
}

104 
	$undoSˇÀ
(Ë{ 
	`u8g_UndoSˇÀ
(&
u8g
); 
	}
}

105 
	$£tSˇÀ2x2
(Ë{ 
	`u8g_SëSˇÀ2x2
(&
u8g
); 
	}
}

108 
	$fú°Page
(Ë{ 
	`cbegö
(); 
	`u8g_Fú°Page
(&
u8g
); 
	}
}

109 
uöt8_t
 
	$√xtPage
(Ë{  
	`u8g_NextPage
(&
u8g
); 
	}
}

112 
uöt8_t
 
	$£tC⁄åa°
(
uöt8_t
 
c⁄åa°
Ë{ 
	`cbegö
();  
	`u8g_SëC⁄åa°
(&
u8g
, c⁄åa°); 
	}
}

113 
	$¶ìpOn
(Ë{ 
	`u8g_SÀïOn
(&
u8g
); 
	}
}

114 
	$¶ìpOff
(Ë{ 
	`u8g_SÀïOff
(&
u8g
); 
	}
}

117 
	$£tCﬁ‹Index
(
uöt8_t
 
cﬁ‹_ödex
Ë{ 
	`u8g_SëCﬁ‹Index
(&
u8g
, cﬁ‹_ödex); 
	}
}

118 
uöt8_t
 
	$gëCﬁ‹Index
(Ë{  
	`u8g_GëCﬁ‹Index
(&
u8g
); 
	}
}

120 
	$£tDeÁu…F‹egroundCﬁ‹
(Ë{ 
	`u8g_SëDeÁu…F‹egroundCﬁ‹
(&
u8g
); 
	}
}

121 
	$£tDeÁu…BackgroundCﬁ‹
(Ë{ 
	`u8g_SëDeÁu…BackgroundCﬁ‹
(&
u8g
); 
	}
}

122 
	$£tDeÁu…MidCﬁ‹
(Ë{ 
	`u8g_SëDeÁu…MidCﬁ‹
(&
u8g
); 
	}
}

124 
u8g_uöt_t
 
	$gëWidth
(Ë{  
	`u8g_GëWidth
(&
u8g
); 
	}
}

125 
u8g_uöt_t
 
	$gëHeight
(Ë{  
	`u8g_GëHeight
(&
u8g
); 
	}
}

126 
uöt8_t
 
	$gëMode
(Ë{  
	`u8g_GëMode
(&
u8g
); 
	}
}

128 
	$døwPixñ
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
Ë{  
	`u8g_DøwPixñ
(&
u8g
, x, y); 
	}
}

129 
	$døwHLöe
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
Ë{ 
	`u8g_DøwHLöe
(&
u8g
, x, y, w); 
	}
}

130 
	$døwVLöe
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
h
Ë{ 
	`u8g_DøwVLöe
(&
u8g
, x, y, h); 
	}
}

131 
	$døwLöe
(
u8g_uöt_t
 
x1
, u8g_uöt_à
y1
, u8g_uöt_à
x2
, u8g_uöt_à
y2
Ë{ 
	`u8g_DøwLöe
(&
u8g
, x1, y1, x2, y2); 
	}
}

133 
	$døwFøme
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
Ë{ 
	`u8g_DøwFøme
(&
u8g
, x, y, w, h); 
	}
}

134 
	$døwRFøme
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, u8g_uöt_à
r
Ë{ 
	`u8g_DøwRFøme
(&
u8g
, x, y, w, h,r); 
	}
}

135 
	$døwBox
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
Ë{ 
	`u8g_DøwBox
(&
u8g
, x, y, w, h); 
	}
}

136 
	$døwRBox
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, u8g_uöt_à
r
Ë{ 
	`u8g_DøwRBox
(&
u8g
, x, y, w, h,r); 
	}
}

138 
	$døwCú˛e
(
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›t
 = 
U8G_DRAW_ALL
Ë{ 
	`u8g_DøwCú˛e
(&
u8g
, x0, y0,Ñad, o±); 
	}
}

139 
	$døwDisc
(
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›t
 = 
U8G_DRAW_ALL
Ë{ 
	`u8g_DøwDisc
(&
u8g
, x0, y0,Ñad, o±); 
	}
}

142 
	$døwBôm≠
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, u8g_uöt_à
h
, c⁄° 
uöt8_t
 *
bôm≠
)

143 { 
	`u8g_DøwBôm≠
(&
u8g
, 
x
, 
y
, 
˙t
, 
h
, 
bôm≠
); 
	}
}

144 
	$døwBôm≠P
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, u8g_uöt_à
h
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
)

145 { 
	`u8g_DøwBôm≠P
(&
u8g
, 
x
, 
y
, 
˙t
, 
h
, 
bôm≠
); 
	}
}

147 
	$døwXBM
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, c⁄° 
uöt8_t
 *
bôm≠
)

148 { 
	`u8g_DøwXBM
(&
u8g
, 
x
, 
y
, 
w
, 
h
, 
bôm≠
); 
	}
}

149 
	$døwXBMP
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
)

150 { 
	`u8g_DøwXBMP
(&
u8g
, 
x
, 
y
, 
w
, 
h
, 
bôm≠
); 
	}
}

154 
	$£tF⁄t
(c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
Ë{
	`u8g_SëF⁄t
(&
u8g
, f⁄t); 
	}
}

155 
öt8_t
 
	$gëF⁄tAs˚¡
(Ë{  
	`u8g_GëF⁄tAs˚¡
(&
u8g
); 
	}
}

156 
öt8_t
 
	$gëF⁄tDes˚¡
(Ë{  
	`u8g_GëF⁄tDes˚¡
(&
u8g
); 
	}
}

157 
öt8_t
 
	$gëF⁄tLöeS∑cög
(Ë{  
	`u8g_GëF⁄tLöeS∑cög
(&
u8g
); 
	}
}

159 
u8g_uöt_t
 
	$døwSå
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° *
s
Ë{  
	`u8g_DøwSå
(&
u8g
, x, y, s); 
	}
}

160 
u8g_uöt_t
 
	$døwSå90
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° *
s
Ë{  
	`u8g_DøwSå90
(&
u8g
, x, y, s); 
	}
}

161 
u8g_uöt_t
 
	$døwSå180
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° *
s
Ë{  
	`u8g_DøwSå180
(&
u8g
, x, y, s); 
	}
}

162 
u8g_uöt_t
 
	$døwSå270
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° *
s
Ë{  
	`u8g_DøwSå270
(&
u8g
, x, y, s); 
	}
}

163 
u8g_uöt_t
 
	$døwSåP
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
Ë{  
	`u8g_DøwSåP
(&
u8g
, x, y, s); 
	}
}

164 
u8g_uöt_t
 
	$døwSå90P
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
Ë{  
	`u8g_DøwSå90P
(&
u8g
, x, y, s); 
	}
}

165 
u8g_uöt_t
 
	$døwSå180P
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
Ë{  
	`u8g_DøwSå180P
(&
u8g
, x, y, s); 
	}
}

166 
u8g_uöt_t
 
	$døwSå270P
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
Ë{  
	`u8g_DøwSå270P
(&
u8g
, x, y, s); 
	}
}

168 
	$£tF⁄tPosBa£löe
(Ë{ 
	`u8g_SëF⁄tPosBa£löe
(&
u8g
); 
	}
}

169 
	$£tF⁄tPosBŸtom
(Ë{ 
	`u8g_SëF⁄tPosBŸtom
(&
u8g
); 
	}
}

170 
	$£tF⁄tPosCíãr
(Ë{ 
	`u8g_SëF⁄tPosCíãr
(&
u8g
); 
	}
}

171 
	$£tF⁄tPosT›
(Ë{ 
	`u8g_SëF⁄tPosT›
(&
u8g
); 
	}
}

173 
	$£tF⁄tRefHeightText
(Ë{ 
	`u8g_SëF⁄tRefHeightText
(&
u8g
); 
	}
}

174 
	$£tF⁄tRefHeightExãndedText
(Ë{ 
	`u8g_SëF⁄tRefHeightExãndedText
(&
u8g
); 
	}
}

175 
	$£tF⁄tRefHeightAŒ
(Ë{ 
	`u8g_SëF⁄tRefHeightAŒ
(&
u8g
); 
	}
}

176 
	$£tF⁄tLöeS∑cögFa˘‹
(
uöt8_t
 
Á˘‹
Ë{ 
	`u8g_SëF⁄tLöeS∑cögFa˘‹
(&
u8g
, fa˘‹); 
	}
}

179 
u8g_uöt_t
 
	$gëSåPixñWidth
(c⁄° *
s
Ë{  
	`u8g_GëSåPixñWidth
(&
u8g
, s); 
	}
}

180 
u8g_uöt_t
 
	$gëSåPixñWidthP
(
u8g_pgm_uöt8_t
 *
s
Ë{  
	`u8g_GëSåPixñWidthP
(&
u8g
, s); 
	}
}

181 
u8g_uöt_t
 
	$gëSåWidth
(c⁄° *
s
Ë{  
	`u8g_GëSåWidth
(&
u8g
, s); 
	}
}

182 
u8g_uöt_t
 
	$gëSåWidthP
(
u8g_pgm_uöt8_t
 *
s
Ë{  
	`u8g_GëSåWidthP
(&
u8g
, s); 
	}
}

184 
	$£tH¨dw¨eBackup
(
u8g_°©e_cb
 
backup_cb
Ë{ 
	`u8g_SëH¨dw¨eBackup
(&
u8g
, backup_cb); 
	}
}

186 #i‡
deföed
(
ARDUINO
) && ARDUINO >= 100

189 
u8g_uöt_t
 
	$døwSå
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
__FœshSåögHñ≥r
 *
s
Ë{  
	`u8g_DøwSåP
(&
u8g
, x, y, (
u8g_pgm_uöt8_t
 *)s); 
	}
}

190 
u8g_uöt_t
 
	$døwSå90
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
__FœshSåögHñ≥r
 *
s
Ë{  
	`u8g_DøwSå90P
(&
u8g
, x, y, (
u8g_pgm_uöt8_t
 *)s); 
	}
}

191 
u8g_uöt_t
 
	$døwSå180
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
__FœshSåögHñ≥r
 *
s
Ë{  
	`u8g_DøwSå180P
(&
u8g
, x, y, (
u8g_pgm_uöt8_t
 *)s); 
	}
}

192 
u8g_uöt_t
 
	$døwSå270
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
__FœshSåögHñ≥r
 *
s
Ë{  
	`u8g_DøwSå270P
(&
u8g
, x, y, (
u8g_pgm_uöt8_t
 *)s); 
	}
}

194 
u8g_uöt_t
 
	$gëSåPixñWidth
(c⁄° 
__FœshSåögHñ≥r
 *
s
Ë{  
	`u8g_GëSåPixñWidthP
(&
u8g
, (
u8g_pgm_uöt8_t
 *)s); 
	}
}

195 
u8g_uöt_t
 
	$gëSåWidth
(c⁄° 
__FœshSåögHñ≥r
 *
s
Ë{  
	`u8g_GëSåWidthP
(&
u8g
, (
u8g_pgm_uöt8_t
 *)s); 
	}
}

199 
	$£tCurs‹F⁄t
(c⁄° 
u8g_pgm_uöt8_t
 *
curs‹_f⁄t
Ë{ 
	`u8g_SëCurs‹F⁄t
(&
u8g
, curs‹_f⁄t); 
	}
}

200 
	$£tCurs‹StyÀ
(
uöt8_t
 
ícodög
Ë{ 
	`u8g_SëCurs‹StyÀ
(&
u8g
,Éncodög); 
	}
}

201 
	$£tCurs‹Pos
(
u8g_uöt_t
 
curs‹_x
, u8g_uöt_à
curs‹_y
Ë{ 
	`u8g_SëCurs‹Pos
(&
u8g
, curs‹_x, curs‹_y); 
	}
}

202 
	$£tCurs‹Cﬁ‹
(
uöt8_t
 
fg
, uöt8_à
bg
Ë{ 
	`u8g_SëCurs‹Cﬁ‹
(&
u8g
, fg, bg); 
	}
}

203 
	$íabÀCurs‹
(Ë{ 
	`u8g_E«bÀCurs‹
(&
u8g
); 
	}
}

204 
	$dißbÀCurs‹
(Ë{ 
	`u8g_DißbÀCurs‹
(&
u8g
); 
	}
}

205 
	$døwCurs‹
(Ë{ 
	`u8g_DøwCurs‹
(&
u8g
); 
	}
}

209 
	$£tVútuÆS¸ìnDimísi⁄
(
u8g_uöt_t
 
width
, u8g_uöt_à
height
Ë{ 
	`u8g_SëVútuÆS¸ìnDimísi⁄
(&
u8g
, width, height); 
	}
}

210 
uöt8_t
 
	$addToVútuÆS¸ìn
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
U8GLIB
 &
chûd_u8g
Ë{  
	`u8g_AddToVútuÆS¸ìn
(&
u8g
, x, y, &chûd_u8g.u8g); 
	}
}

215 ˛as†
	cU8GLIB_DOGS102
 : 
public
 
U8GLIB


217 
public
:

218 
	$U8GLIB_DOGS102
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

219 : 
	$U8GLIB
(&
u8g_dev_uc1701_dogs102_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

221 
	$U8GLIB_DOGS102
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

222 : 
	$U8GLIB
(&
u8g_dev_uc1701_dogs102_hw_•i
, 
cs
, 
a0
, 
ª£t
)

223 { 
	}
}

226 ˛as†
	cU8GLIB_MINI12864
 : 
public
 
U8GLIB


228 
public
:

229 
	$U8GLIB_MINI12864
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

230 : 
	$U8GLIB
(&
u8g_dev_uc1701_möi12864_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

232 
	$U8GLIB_MINI12864
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

233 : 
	$U8GLIB
(&
u8g_dev_uc1701_möi12864_hw_•i
, 
cs
, 
a0
, 
ª£t
)

234 { 
	}
}

237 ˛as†
	cU8GLIB_DOGM132
 : 
public
 
U8GLIB


239 
public
:

240 
	$U8GLIB_DOGM132
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

241 : 
	$U8GLIB
(&
u8g_dev_°7565_dogm132_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

243 
	$U8GLIB_DOGM132
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

244 : 
	$U8GLIB
(&
u8g_dev_°7565_dogm132_hw_•i
, 
cs
, 
a0
, 
ª£t
)

245 { 
	}
}

248 ˛as†
	cU8GLIB_NHD_C12832
 : 
public
 
U8GLIB


250 
public
:

251 
	$U8GLIB_NHD_C12832
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

252 : 
	$U8GLIB
(&
u8g_dev_°7565_nhd_c12832_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

254 
	$U8GLIB_NHD_C12832
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

255 : 
	$U8GLIB
(&
u8g_dev_°7565_nhd_c12832_hw_•i
, 
cs
, 
a0
, 
ª£t
)

256 { 
	}
}

257 
	$U8GLIB_NHD_C12832
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

258 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

259 : 
	$U8GLIB
(&
u8g_dev_°7565_nhd_c12832_∑øŒñ
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
U8G_PIN_NONE
, 
di
, 
rw
, 
ª£t
)

260 { 
	}
}

263 ˛as†
	cU8GLIB_DOGM128
 : 
public
 
U8GLIB


265 
public
:

266 
	$U8GLIB_DOGM128
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

267 : 
	$U8GLIB
(&
u8g_dev_°7565_dogm128_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

269 
	$U8GLIB_DOGM128
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

270 : 
	$U8GLIB
(&
u8g_dev_°7565_dogm128_hw_•i
, 
cs
, 
a0
, 
ª£t
)

271 { 
	}
}

274 ˛as†
	cU8GLIB_LM6059
 : 
public
 
U8GLIB


276 
public
:

277 
	$U8GLIB_LM6059
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

278 : 
	$U8GLIB
(&
u8g_dev_°7565_lm6059_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

280 
	$U8GLIB_LM6059
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

281 : 
	$U8GLIB
(&
u8g_dev_°7565_lm6059_hw_•i
, 
cs
, 
a0
, 
ª£t
)

282 { 
	}
}

285 ˛as†
	cU8GLIB_LM6063
 : 
public
 
U8GLIB


287 
public
:

288 
	$U8GLIB_LM6063
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

289 : 
	$U8GLIB
(&
u8g_dev_°7565_lm6063_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

291 
	$U8GLIB_LM6063
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

292 : 
	$U8GLIB
(&
u8g_dev_°7565_lm6063_hw_•i
, 
cs
, 
a0
, 
ª£t
)

293 { 
	}
}

296 ˛as†
	cU8GLIB_64128N
 : 
public
 
U8GLIB


298 
public
:

299 
	$U8GLIB_64128N
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

300 : 
	$U8GLIB
(&
u8g_dev_°7565_64128n_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

302 
	$U8GLIB_64128N
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

303 : 
	$U8GLIB
(&
u8g_dev_°7565_64128n_hw_•i
, 
cs
, 
a0
, 
ª£t
)

304 { 
	}
}

307 ˛as†
	cU8GLIB_NHD_C12864
 : 
public
 
U8GLIB


309 
public
:

310 
	$U8GLIB_NHD_C12864
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

311 : 
	$U8GLIB
(&
u8g_dev_°7565_nhd_c12864_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

313 
	$U8GLIB_NHD_C12864
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

314 : 
	$U8GLIB
(&
u8g_dev_°7565_nhd_c12864_hw_•i
, 
cs
, 
a0
, 
ª£t
)

315 { 
	}
}

319 ˛as†
	cU8GLIB_ST7920_128X64
 : 
public
 
U8GLIB


321 
public
:

322 
	$U8GLIB_ST7920_128X64
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

323 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

325 
	$U8GLIB_ST7920_128X64
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

326 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_hw_•i
, 
cs
, 
a0
, 
ª£t
)

327 { 
	}
}

328 
	$U8GLIB_ST7920_128X64
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

329 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

330 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
cs2
, 
di
, 
rw
, 
ª£t
)

331 { 
	}
}

337 ˛as†
	cU8GLIB_ST7920_128X64_1X
 : 
public
 
U8GLIB


339 
public
:

340 
	$U8GLIB_ST7920_128X64_1X
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

341 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_sw_•i
, 
sck
, 
mosi
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

343 
	$U8GLIB_ST7920_128X64_1X
(
uöt8_t
 
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

344 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_hw_•i
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

345 { 
	}
}

346 
	$U8GLIB_ST7920_128X64_1X
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

347 
uöt8_t
 
í
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

348 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
U8G_PIN_NONE
, U8G_PIN_NONE, 
di
, 
rw
, 
ª£t
)

349 { 
	}
}

352 ˛as†
	cU8GLIB_ST7920_128X64_4X
 : 
public
 
U8GLIB


354 
public
:

355 
	$U8GLIB_ST7920_128X64_4X
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

356 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_4x_sw_•i
, 
sck
, 
mosi
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

358 
	$U8GLIB_ST7920_128X64_4X
(
uöt8_t
 
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

359 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_4x_hw_•i
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

360 { 
	}
}

361 
	$U8GLIB_ST7920_128X64_4X
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

362 
uöt8_t
 
í
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

363 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_4x_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
U8G_PIN_NONE
, U8G_PIN_NONE, 
di
, 
rw
, 
ª£t
)

364 { 
	}
}

369 ˛as†
	cU8GLIB_ST7920_192X32
 : 
public
 
U8GLIB


371 
public
:

372 
	$U8GLIB_ST7920_192X32
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

373 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

375 
	$U8GLIB_ST7920_192X32
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

376 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_hw_•i
, 
cs
, 
a0
, 
ª£t
)

377 { 
	}
}

378 
	$U8GLIB_ST7920_192X32
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

379 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

380 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
cs2
, 
di
, 
rw
, 
ª£t
)

381 { 
	}
}

384 ˛as†
	cU8GLIB_ST7920_192X32_1X
 : 
public
 
U8GLIB


386 
public
:

387 
	$U8GLIB_ST7920_192X32_1X
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

388 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_sw_•i
, 
sck
, 
mosi
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

390 
	$U8GLIB_ST7920_192X32_1X
(
uöt8_t
 
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

391 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_hw_•i
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

392 { 
	}
}

393 
	$U8GLIB_ST7920_192X32_1X
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

394 
uöt8_t
 
í
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

395 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
U8G_PIN_NONE
, U8G_PIN_NONE, 
di
, 
rw
, 
ª£t
)

396 { 
	}
}

399 ˛as†
	cU8GLIB_ST7920_192X32_4X
 : 
public
 
U8GLIB


401 
public
:

402 
	$U8GLIB_ST7920_192X32_4X
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

403 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_4x_sw_•i
, 
sck
, 
mosi
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

405 
	$U8GLIB_ST7920_192X32_4X
(
uöt8_t
 
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

406 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_4x_hw_•i
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

407 { 
	}
}

408 
	$U8GLIB_ST7920_192X32_4X
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

409 
uöt8_t
 
í
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

410 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_4x_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
U8G_PIN_NONE
, U8G_PIN_NONE, 
di
, 
rw
, 
ª£t
)

411 { 
	}
}

415 ˛as†
	cU8GLIB_ST7920_202X32
 : 
public
 
U8GLIB


417 
public
:

418 
	$U8GLIB_ST7920_202X32
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

419 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

421 
	$U8GLIB_ST7920_202X32
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

422 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_hw_•i
, 
cs
, 
a0
, 
ª£t
)

423 { 
	}
}

424 
	$U8GLIB_ST7920_202X32
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

425 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

426 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
cs2
, 
di
, 
rw
, 
ª£t
)

427 { 
	}
}

430 ˛as†
	cU8GLIB_ST7920_202X32_1X
 : 
public
 
U8GLIB


432 
public
:

433 
	$U8GLIB_ST7920_202X32_1X
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

434 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_sw_•i
, 
sck
, 
mosi
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

436 
	$U8GLIB_ST7920_202X32_1X
(
uöt8_t
 
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

437 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_hw_•i
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

438 { 
	}
}

439 
	$U8GLIB_ST7920_202X32_1X
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

440 
uöt8_t
 
í
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

441 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
U8G_PIN_NONE
, U8G_PIN_NONE, 
di
, 
rw
, 
ª£t
)

442 { 
	}
}

445 ˛as†
	cU8GLIB_ST7920_202X32_4X
 : 
public
 
U8GLIB


447 
public
:

448 
	$U8GLIB_ST7920_202X32_4X
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

449 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_4x_sw_•i
, 
sck
, 
mosi
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

451 
	$U8GLIB_ST7920_202X32_4X
(
uöt8_t
 
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

452 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_4x_hw_•i
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

453 { 
	}
}

454 
	$U8GLIB_ST7920_202X32_4X
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

455 
uöt8_t
 
í
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

456 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_4x_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
U8G_PIN_NONE
, U8G_PIN_NONE, 
di
, 
rw
, 
ª£t
)

457 { 
	}
}

461 ˛as†
	cU8GLIB_LC7981_160X80
 : 
public
 
U8GLIB


463 
public
:

464 
	$U8GLIB_LC7981_160X80
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

465 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

466 : 
	$U8GLIB
(&
u8g_dev_lc7981_160x80_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
U8G_PIN_NONE
, 
di
, 
rw
, 
ª£t
)

468 
	}
};

470 ˛as†
	cU8GLIB_LC7981_240X64
 : 
public
 
U8GLIB


472 
public
:

473 
	$U8GLIB_LC7981_240X64
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

474 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

475 : 
	$U8GLIB
(&
u8g_dev_lc7981_240x64_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
U8G_PIN_NONE
, 
di
, 
rw
, 
ª£t
)

477 
	}
};

479 ˛as†
	cU8GLIB_LC7981_240X128
 : 
public
 
U8GLIB


481 
public
:

482 
	$U8GLIB_LC7981_240X128
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

483 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

484 : 
	$U8GLIB
(&
u8g_dev_lc7981_240x128_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
U8G_PIN_NONE
, 
di
, 
rw
, 
ª£t
)

486 
	}
};

489 ˛as†
	cU8GLIB_LC7981_320X64
 : 
public
 
U8GLIB


491 
public
:

492 
	$U8GLIB_LC7981_320X64
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

493 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

494 : 
	$U8GLIB
(&
u8g_dev_lc7981_320x64_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
U8G_PIN_NONE
, 
di
, 
rw
, 
ª£t
)

496 
	}
};

500 ˛as†
	cU8GLIB_DOGXL160_BW
 : 
public
 
U8GLIB


502 
public
:

503 
	$U8GLIB_DOGXL160_BW
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

504 : 
	$U8GLIB
(&
u8g_dev_uc1610_dogxl160_bw_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

506 
	$U8GLIB_DOGXL160_BW
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

507 : 
	$U8GLIB
(&
u8g_dev_uc1610_dogxl160_bw_hw_•i
, 
cs
, 
a0
, 
ª£t
)

508 { 
	}
}

511 ˛as†
	cU8GLIB_DOGXL160_GR
 : 
public
 
U8GLIB


513 
public
:

514 
	$U8GLIB_DOGXL160_GR
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

515 : 
	$U8GLIB
(&
u8g_dev_uc1610_dogxl160_gr_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

517 
	$U8GLIB_DOGXL160_GR
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

518 : 
	$U8GLIB
(&
u8g_dev_uc1610_dogxl160_gr_hw_•i
, 
cs
, 
a0
, 
ª£t
)

519 { 
	}
}

522 ˛as†
	cU8GLIB_DOGXL160_2X_BW
 : 
public
 
U8GLIB


524 
public
:

525 
	$U8GLIB_DOGXL160_2X_BW
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

526 : 
	$U8GLIB
(&
u8g_dev_uc1610_dogxl160_2x_bw_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

528 
	$U8GLIB_DOGXL160_2X_BW
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

529 : 
	$U8GLIB
(&
u8g_dev_uc1610_dogxl160_2x_bw_hw_•i
, 
cs
, 
a0
, 
ª£t
)

530 { 
	}
}

533 ˛as†
	cU8GLIB_DOGXL160_2X_GR
 : 
public
 
U8GLIB


535 
public
:

536 
	$U8GLIB_DOGXL160_2X_GR
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

537 : 
	$U8GLIB
(&
u8g_dev_uc1610_dogxl160_2x_gr_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

539 
	$U8GLIB_DOGXL160_2X_GR
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

540 : 
	$U8GLIB
(&
u8g_dev_uc1610_dogxl160_2x_gr_hw_•i
, 
cs
, 
a0
, 
ª£t
)

541 { 
	}
}

545 ˛as†
	cU8GLIB_NHD27OLED_BW
 : 
public
 
U8GLIB


547 
public
:

548 
	$U8GLIB_NHD27OLED_BW
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

549 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_bw_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

551 
	$U8GLIB_NHD27OLED_BW
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

552 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_bw_hw_•i
, 
cs
, 
a0
, 
ª£t
)

553 { 
	}
}

554 
	$U8GLIB_NHD27OLED_BW
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

555 
uöt8_t
 
cs
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

556 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_bw_∑øŒñ
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
U8G_PIN_NONE
, 
cs
, U8G_PIN_NONE, 
di
, 
rw
, 
ª£t
)

557 { 
	}
}

560 ˛as†
	cU8GLIB_NHD27OLED_2X_BW
 : 
public
 
U8GLIB


562 
public
:

563 
	$U8GLIB_NHD27OLED_2X_BW
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

564 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

566 
	$U8GLIB_NHD27OLED_2X_BW
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

567 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_hw_•i
, 
cs
, 
a0
, 
ª£t
)

568 { 
	}
}

569 
	$U8GLIB_NHD27OLED_2X_BW
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

570 
uöt8_t
 
cs
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

571 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_∑øŒñ
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
U8G_PIN_NONE
, 
cs
, U8G_PIN_NONE, 
di
, 
rw
, 
ª£t
)

572 { 
	}
}

575 ˛as†
	cU8GLIB_NHD31OLED_BW
 : 
public
 
U8GLIB


577 
public
:

578 
	$U8GLIB_NHD31OLED_BW
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

579 : 
	$U8GLIB
(&
u8g_dev_ssd1322_nhd31ﬁed_bw_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

581 
	$U8GLIB_NHD31OLED_BW
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

582 : 
	$U8GLIB
(&
u8g_dev_ssd1322_nhd31ﬁed_bw_hw_•i
, 
cs
, 
a0
, 
ª£t
)

583 { 
	}
}

586 ˛as†
	cU8GLIB_NHD31OLED_2X_BW
 : 
public
 
U8GLIB


588 
public
:

589 
	$U8GLIB_NHD31OLED_2X_BW
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

590 : 
	$U8GLIB
(&
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

592 
	$U8GLIB_NHD31OLED_2X_BW
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

593 : 
	$U8GLIB
(&
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_hw_•i
, 
cs
, 
a0
, 
ª£t
)

594 { 
	}
}

597 ˛as†
	cU8GLIB_NHD31OLED_GR
 : 
public
 
U8GLIB


599 
public
:

600 
	$U8GLIB_NHD31OLED_GR
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

601 : 
	$U8GLIB
(&
u8g_dev_ssd1322_nhd31ﬁed_gr_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

603 
	$U8GLIB_NHD31OLED_GR
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

604 : 
	$U8GLIB
(&
u8g_dev_ssd1322_nhd31ﬁed_gr_hw_•i
, 
cs
, 
a0
, 
ª£t
)

605 { 
	}
}

608 ˛as†
	cU8GLIB_NHD31OLED_2X_GR
 : 
public
 
U8GLIB


610 
public
:

611 
	$U8GLIB_NHD31OLED_2X_GR
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

612 : 
	$U8GLIB
(&
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

614 
	$U8GLIB_NHD31OLED_2X_GR
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

615 : 
	$U8GLIB
(&
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_hw_•i
, 
cs
, 
a0
, 
ª£t
)

616 { 
	}
}

620 ˛as†
	cU8GLIB_SSD1306_128X64
 : 
public
 
U8GLIB


622 
public
:

623 
	$U8GLIB_SSD1306_128X64
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

624 : 
	$U8GLIB
(&
u8g_dev_ssd1306_128x64_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

626 
	$U8GLIB_SSD1306_128X64
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

627 : 
	$U8GLIB
(&
u8g_dev_ssd1306_128x64_hw_•i
, 
cs
, 
a0
, 
ª£t
)

628 { 
	}
}

629 
	$U8GLIB_SSD1306_128X64
(
uöt8_t
 
›ti⁄s
 = 
U8G_I2C_OPT_NONE
)

630 : 
	$U8GLIB
(&
u8g_dev_ssd1306_128x64_i2c
, 
›ti⁄s
)

631 { 
	}
}

635 ˛as†
	cU8GLIB_SSD1309_128X64
 : 
public
 
U8GLIB


637 
public
:

638 
	$U8GLIB_SSD1309_128X64
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

639 : 
	$U8GLIB
(&
u8g_dev_ssd1309_128x64_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

641 
	$U8GLIB_SSD1309_128X64
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

642 : 
	$U8GLIB
(&
u8g_dev_ssd1309_128x64_hw_•i
, 
cs
, 
a0
, 
ª£t
)

643 { 
	}
}

644 
	$U8GLIB_SSD1309_128X64
(
uöt8_t
 
›ti⁄s
 = 
U8G_I2C_OPT_NONE
)

645 : 
	$U8GLIB
(&
u8g_dev_ssd1309_128x64_i2c
, 
›ti⁄s
)

646 { 
	}
}

650 ˛as†
	cU8GLIB_SSD1306_128X32
 : 
public
 
U8GLIB


652 
public
:

653 
	$U8GLIB_SSD1306_128X32
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

654 : 
	$U8GLIB
(&
u8g_dev_ssd1306_128x32_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

656 
	$U8GLIB_SSD1306_128X32
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

657 : 
	$U8GLIB
(&
u8g_dev_ssd1306_128x32_hw_•i
, 
cs
, 
a0
, 
ª£t
)

658 { 
	}
}

659 
	$U8GLIB_SSD1306_128X32
(
uöt8_t
 
›ti⁄s
 = 
U8G_I2C_OPT_NONE
)

660 : 
	$U8GLIB
(&
u8g_dev_ssd1306_128x32_i2c
, 
›ti⁄s
)

661 { 
	}
}

666 ˛as†
	cU8GLIB_NHD27OLED_GR
 : 
public
 
U8GLIB


668 
public
:

669 
	$U8GLIB_NHD27OLED_GR
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

670 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_gr_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

672 
	$U8GLIB_NHD27OLED_GR
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

673 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_gr_hw_•i
, 
cs
, 
a0
, 
ª£t
)

674 { 
	}
}

677 ˛as†
	cU8GLIB_NHD27OLED_2X_GR
 : 
public
 
U8GLIB


679 
public
:

680 
	$U8GLIB_NHD27OLED_2X_GR
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

681 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_2x_gr_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

683 
	$U8GLIB_NHD27OLED_2X_GR
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

684 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_2x_gr_hw_•i
, 
cs
, 
a0
, 
ª£t
)

685 { 
	}
}

688 ˛as†
	cU8GLIB_SSD1327_96X96_GR
 : 
public
 
U8GLIB


690 
public
:

691 
	$U8GLIB_SSD1327_96X96_GR
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

692 : 
	$U8GLIB
(&
u8g_dev_ssd1327_96x96_gr_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

694 
	$U8GLIB_SSD1327_96X96_GR
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

695 : 
	$U8GLIB
(&
u8g_dev_ssd1327_96x96_gr_hw_•i
, 
cs
, 
a0
, 
ª£t
)

696 { 
	}
}

697 
	$U8GLIB_SSD1327_96X96_GR
(
uöt8_t
 
›ti⁄s
 = 
U8G_I2C_OPT_NONE
)

698 : 
	$U8GLIB
(&
u8g_dev_ssd1327_96x96_gr_i2c
, 
›ti⁄s
)

699 { 
	}
}

702 ˛as†
	cU8GLIB_SSD1327_96X96_2X_GR
 : 
public
 
U8GLIB


704 
public
:

705 
	$U8GLIB_SSD1327_96X96_2X_GR
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

706 : 
	$U8GLIB
(&
u8g_dev_ssd1327_96x96_2x_gr_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

708 
	$U8GLIB_SSD1327_96X96_2X_GR
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

709 : 
	$U8GLIB
(&
u8g_dev_ssd1327_96x96_2x_gr_hw_•i
, 
cs
, 
a0
, 
ª£t
)

710 { 
	}
}

711 
	$U8GLIB_SSD1327_96X96_2X_GR
(
uöt8_t
 
›ti⁄s
 = 
U8G_I2C_OPT_NONE
)

712 : 
	$U8GLIB
(&
u8g_dev_ssd1327_96x96_2x_gr_i2c
, 
›ti⁄s
)

713 { 
	}
}

716 ˛as†
	cU8GLIB_PCF8812
 : 
public
 
U8GLIB


718 
public
:

719 
	$U8GLIB_PCF8812
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

720 : 
	$U8GLIB
(&
u8g_dev_pcf8812_96x65_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

722 
	}
};

724 ˛as†
	cU8GLIB_PCD8544
 : 
public
 
U8GLIB


726 
public
:

727 
	$U8GLIB_PCD8544
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

728 : 
	$U8GLIB
(&
u8g_dev_pcd8544_84x48_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

730 
	}
};

732 ˛as†
	cU8GLIB_TLS8204_84X48
 : 
public
 
U8GLIB


734 
public
:

735 
	$U8GLIB_TLS8204_84X48
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

736 : 
	$U8GLIB
(&
u8g_dev_és8204_84x48_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

738 
	}
};

740 ˛as†
	cU8GLIB_KS0108_128
 : 
public
 
U8GLIB


742 
public
:

743 
	$U8GLIB_KS0108_128
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

744 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

745 : 
	$U8GLIB
(&
u8g_dev_ks0108_128x64_Á°
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
cs2
, 
di
, 
rw
, 
ª£t
)

747 
	}
};

749 ˛as†
	cU8GLIB_SBN1661_122X32
 : 
public
 
U8GLIB


751 
public
:

752 
	$U8GLIB_SBN1661_122X32
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

753 
uöt8_t
 
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

754 : 
	$U8GLIB
(&
u8g_dev_sbn1661_122x32
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
U8G_PIN_NONE
, 
cs1
, 
cs2
, 
di
, 
rw
, 
ª£t
)

756 
	}
};

758 ˛as†
	cU8GLIB_T6963_240X128
 : 
public
 
U8GLIB


760 
public
:

761 
	$U8GLIB_T6963_240X128
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

762 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
wr
, uöt8_à
rd
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

763 : 
	$U8GLIB
(&
u8g_dev_t6963_240x128_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
cs
, 
a0
, 
wr
, 
rd
, 
ª£t
)

765 
	}
};

767 ˛as†
	cU8GLIB_T6963_240X64
 : 
public
 
U8GLIB


769 
public
:

770 
	$U8GLIB_T6963_240X64
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

771 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
wr
, uöt8_à
rd
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

772 : 
	$U8GLIB
(&
u8g_dev_t6963_240x64_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
cs
, 
a0
, 
wr
, 
rd
, 
ª£t
)

774 
	}
};

776 ˛as†
	cU8GLIB_T6963_128X64
 : 
public
 
U8GLIB


778 
public
:

779 
	$U8GLIB_T6963_128X64
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

780 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
wr
, uöt8_à
rd
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

781 : 
	$U8GLIB
(&
u8g_dev_t6963_128x64_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
cs
, 
a0
, 
wr
, 
rd
, 
ª£t
)

783 
	}
};

786 ˛as†
	cU8GLIB_ST7687_C144MVGD
: 
public
 
U8GLIB


788 
public
:

789 
	$U8GLIB_ST7687_C144MVGD
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

790 : 
	$U8GLIB
(&
u8g_dev_°7687_c144mvgd_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

792 
	$U8GLIB_ST7687_C144MVGD
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

793 
uöt8_t
 
í
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

794 : 
	$U8GLIB
(&
u8g_dev_ks0108_128x64_Á°
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs
, 
U8G_PIN_NONE
, 
a0
, 
rw
, 
ª£t
)

795 { 
	}
}

798 ˛as†
	cU8GLIB_ILI9325D_320x240
 : 
public
 
U8GLIB


800 
public
:

807 
	$U8GLIB_ILI9325D_320x240
–
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

808 { 
	`öô8BôFixedP‹t
(&
u8g_dev_ûi9325d_320x240_8bô
, 
í
, 
cs1
, 
di
, 
rw
, 
ª£t
); }

809 
	}
};

811 ˛as†
	cU8GLIB_FLIPDISC_2X7
 : 
public
 
U8GLIB


813 
public
:

814 
	$U8GLIB_FLIPDISC_2X7
(Ë: 
	$U8GLIB
(&
u8g_dev_Êùdisc_2x7
)

816 
	}
};

818 ˛as†
	cU8GLIB_VS
 : 
public
 
U8GLIB


820 
public
:

821 
	$U8GLIB_VS
(Ë: 
	$U8GLIB
(&
u8g_dev_vs
)

823 
	}
};

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/chessengine.c

103 
	~"u8g.h
"

118 
	#PIECE_NONE
 0

	)

119 
	#PIECE_PAWN
 1

	)

120 
	#PIECE_KNIGHT
 2

	)

121 
	#PIECE_BISHOP
 3

	)

122 
	#PIECE_ROOK
 4

	)

123 
	#PIECE_QUEEN
 5

	)

124 
	#PIECE_KING
 6

	)

127 
	#COLOR_WHITE
 0

	)

128 
	#COLOR_BLACK
 1

	)

131 
	#COLOR_PIECE_MASK
 0x01f

	)

133 
	#CP_MARK_MASK
 0x20

	)

135 
	#ILLEGAL_POSITION
 255

	)

140 
	#STACK_MAX_SIZE
 5

	)

143 
	#CHM_USER_SIZE
 6

	)

147 
	#CHM_LIST_SIZE
 (
STACK_MAX_SIZE
+
CHM_USER_SIZE
+2)

	)

149 
öt16_t
 
	tevÆ_t
;

151 
	#EVAL_T_MIN
 -32767

	)

152 
	#EVAL_T_MAX
 32767

	)

156 
	s_°ack_ñemít_°ru˘


159 
uöt8_t
 
	mcuºít_pos
;

160 
uöt8_t
 
	mcuºít_˝
;

161 
uöt8_t
 
	mcuºít_cﬁ‹
;

164 
uöt8_t
 
	mbe°_‰om_pos
;

165 
uöt8_t
 
	mbe°_to_pos
;

167 
evÆ_t
 
	mbe°_evÆ
;

169 
_°ack_ñemít_°ru˘
 
	t°ack_ñemít_t
;

170 
_°ack_ñemít_°ru˘
 *
	t°ack_ñemít_p
;

173 
	s_chm_°ru˘


175 
uöt8_t
 
	mmaö_˝
;

176 
uöt8_t
 
	mmaö_§c
;

177 
uöt8_t
 
	mmaö_de°
;

179 
uöt8_t
 
	mŸhî_˝
;

180 
uöt8_t
 
	mŸhî_§c
;

181 
uöt8_t
 
	mŸhî_de°
;

187 
uöt8_t
 
	m∑wn_dbl_move
[2];

197 
uöt8_t
 
	mˇ°lög_possibÀ
;

200 
_chm_°ru˘
 
	tchm_t
;

201 
_chm_°ru˘
 *
	tchm_p
;

204 
	s_Ãc_°ru˘


209 
uöt8_t
 
	m∂y_cou¡
;

212 
uöt8_t
 
	mchm_pos
;

216 
uöt8_t
 
	mbﬂrd
[64];

220 
uöt8_t
 
	m∑wn_dbl_move
[2];

229 
uöt8_t
 
	mˇ°lög_possibÀ
;

235 
uöt8_t
 
	m‹õ¡©i⁄
;

240 
uöt8_t
 
	m°rike_out_cﬁ‹
;

244 
uöt8_t
 
	mis_game_íd
;

248 
uöt8_t
 
	mlo°_side_cﬁ‹
;

256 
uöt8_t
 
	mcheck_§c_pos
;

257 
uöt8_t
 
	mcheck_mode
;

261 
uöt8_t
 
	mföd_põ˚_˙t
[2];

264 
uöt8_t
 
	mföd_põ˚_weight
[2];

269 
uöt8_t
 
	mcuº_dïth
;

270 
uöt8_t
 
	mmax_dïth
;

271 
°ack_ñemít_p
 
	mcuº_ñemít
;

274 
°ack_ñemít_t
 
	m°ack_mem‹y
[
STACK_MAX_SIZE
];

277 
chm_t
 
	mchm_li°
[
CHM_LIST_SIZE
];

279 
_Ãc_°ru˘
 
	tÃc_t
;

281 
	#CHECK_MODE_NONE
 0

	)

282 
	#CHECK_MODE_MOVEABLE
 1

	)

283 
	#CHECK_MODE_TARGET_MOVE
 2

	)

291 
u8g_t
 *
	gÃc_u8g
;

293 
Ãc_t
 
	gÃc_obj
;

308 
uöt8_t
 
	$°ack_Push
(
uöt8_t
 
cﬁ‹
Ë
U8G_NOINLINE
;

309 
	$°ack_P›
(Ë
U8G_NOINLINE
;

310 
	$°ack_InôCuºEÀmít
(Ë
U8G_NOINLINE
;

311 
	$°ack_Inô
(
uöt8_t
 
max
Ë
U8G_NOINLINE
;

312 
	$°ack_SëMove
(
evÆ_t
 
vÆ
, 
uöt8_t
 
to_pos
Ë
U8G_NOINLINE
;

313 
uöt8_t
 
	$cu_NextPos
(
uöt8_t
 
pos
Ë
U8G_NOINLINE
;

314 
uöt8_t
 
	`cu_gpos2bpos
(uöt8_à
gpos
);

315 
uöt8_t
 
	`˝_C⁄°ru˘
(uöt8_à
cﬁ‹
, uöt8_à
põ˚
);

316 
uöt8_t
 
	`˝_GëPõ˚
(uöt8_à
˝
);

317 
uöt8_t
 
	`˝_GëCﬁ‹
(uöt8_à
˝
);

318 
uöt8_t
 
	$˝_GëFromBﬂrd
(
uöt8_t
 
pos
Ë
U8G_NOINLINE
;

319 
	$˝_SëOnBﬂrd
(
uöt8_t
 
pos
, uöt8_à
˝
Ë
U8G_NOINLINE
;

321 
	$cu_CÀ¨Bﬂrd
(Ë
U8G_NOINLINE
;

322 
	$chess_SëupBﬂrd
(Ë
U8G_NOINLINE
;

323 
evÆ_t
 
	`˚_EvÆ
();

325 
	$cu_CÀ¨MoveHi°‹y
(Ë
U8G_NOINLINE
;

326 
	$cu_Redu˚Hi°‹yByFuŒMove
(Ë
U8G_NOINLINE
;

327 
	$cu_UndoHÆfMove
(Ë
U8G_NOINLINE
;

328 
chm_p
 
	$cu_PushHÆfMove
(Ë
U8G_NOINLINE
;

331 
	`˚_CÆcuœãPosôi⁄Weight
(
uöt8_t
 
pos
);

332 
uöt8_t
 
	`˚_GëPosôi⁄AâackWeight
(uöt8_à
pos
, uöt8_à
cﬁ‹
);

334 
	`chess_Thökög
();

335 
	`˚_Lo›Põ˚s
();

343 
°ack_ñemít_p
 
	$°ack_GëCuºEÀmít
()

345  
Ãc_obj
.
cuº_ñemít
;

346 
	}
}

348 
uöt8_t
 
	$°ack_Push
(
uöt8_t
 
cﬁ‹
)

350 i‡–
Ãc_obj
.
cuº_dïth
 =Ãc_obj.
max_dïth
 )

352 
Ãc_obj
.
cuº_dïth
++;

353 
Ãc_obj
.
cuº_ñemít
 =Ürc_obj.
°ack_mem‹y
+Ãc_obj.
cuº_dïth
;

356 
cﬁ‹
 ^= 1;

357 
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
 = 
cﬁ‹
;

360 
	}
}

362 
	$°ack_P›
()

364 
Ãc_obj
.
cuº_dïth
--;

365 
Ãc_obj
.
cuº_ñemít
 =Ürc_obj.
°ack_mem‹y
+Ãc_obj.
cuº_dïth
;

366 
	}
}

369 
	$°ack_InôCuºEÀmít
()

371 
°ack_ñemít_p
 
e
 = 
	`°ack_GëCuºEÀmít
();

372 
e
->
be°_evÆ
 = 
EVAL_T_MIN
;

373 
e
->
be°_‰om_pos
 = 
ILLEGAL_POSITION
;

374 
e
->
be°_to_pos
 = 
ILLEGAL_POSITION
;

375 
	}
}

378 
	$°ack_Inô
(
uöt8_t
 
max
)

380 
Ãc_obj
.
cuº_dïth
 = 0;

381 
Ãc_obj
.
cuº_ñemít
 =Ürc_obj.
°ack_mem‹y
;

382 
Ãc_obj
.
max_dïth
 = 
max
;

383 
Ãc_obj
.
check_mode
 = 
CHECK_MODE_NONE
;

384 
	`°ack_InôCuºEÀmít
();

385 
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
 = 
Ãc_obj
.
∂y_cou¡
;

386 
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
 &= 1;

387 
	}
}

391 
	$°ack_SëMove
(
evÆ_t
 
vÆ
, 
uöt8_t
 
to_pos
)

393 
°ack_ñemít_p
 
e
 = 
	`°ack_GëCuºEÀmít
();

394 i‡–
e
->
be°_evÆ
 < 
vÆ
 )

396 
e
->
be°_evÆ
 = 
vÆ
;

397 
e
->
be°_‰om_pos
 =É->
cuºít_pos
;

398 
e
->
be°_to_pos
 = 
to_pos
;

400 
	}
}

414 
uöt8_t
 
	$cu_NextPos
(
uöt8_t
 
pos
)

417 
pos
++;

418 i‡––
pos
 & 0x08 ) != 0 )

420 
pos
+= 0x10;

421 
pos
&= 0xf0;

423 i‡––
pos
 & 0x80 ) != 0 )

424 
pos
 = 0;

425  
pos
;

426 
	}
}

428 
uöt8_t
 
	$cu_PªvPos
(
uöt8_t
 
pos
)

431 
pos
--;

432 i‡––
pos
 & 0x80 ) != 0 )

433 
pos
 = 0x077;

434 i‡––
pos
 & 0x08 ) != 0 )

436 
pos
 &= 0xf0;

437 
pos
 |= 0x07;

439  
pos
;

440 
	}
}

456 
uöt8_t
 
	$cu_gpos2bpos
(
uöt8_t
 
gpos
)

458 
uöt8_t
 
bpos
 = 
gpos
;

459 
bpos
 &= 0xf0;

460 
bpos
 >>= 1;

461 
gpos
 &= 0x0f;

462 
bpos
 |
gpos
;

463  
bpos
;

464 
	}
}

466 
	#gpos_IsIŒegÆ
(
gpos
Ë((gposË& 0x088)

	)

473 
	#˝_IsM¨ked
(
˝
Ë((˝Ë& 
CP_MARK_MASK
)

	)

482 
uöt8_t
 
	$˝_C⁄°ru˘
(
uöt8_t
 
cﬁ‹
, uöt8_à
põ˚
)

484 
cﬁ‹
 <<= 4;

485 
cﬁ‹
 |
põ˚
;

486  
cﬁ‹
;

487 
	}
}

490 
uöt8_t
 
	$˝_GëPõ˚
(
uöt8_t
 
˝
)

492 
˝
 &= 0x0f;

493  
˝
;

494 
	}
}

501 
uöt8_t
 
	$˝_GëCﬁ‹
(
uöt8_t
 
˝
)

503 
˝
 >>= 4;

504 
˝
 &= 1;

505  
˝
;

506 
	}
}

512 
uöt8_t
 
	$˝_GëFromBﬂrd
(
uöt8_t
 
pos
)

514  
Ãc_obj
.
bﬂrd
[
	`cu_gpos2bpos
(
pos
)];

515 
	}
}

521 
	$˝_SëOnBﬂrd
(
uöt8_t
 
pos
, uöt8_à
˝
)

524 
Ãc_obj
.
bﬂrd
[
	`cu_gpos2bpos
(
pos
)] = 
˝
;

525 
	}
}

531 
	$cu_CÀ¨Bﬂrd
()

533 
uöt8_t
 
i
;

535  
i
 = 0; i < 64; i++ )

536 
Ãc_obj
.
bﬂrd
[
i
] = 
PIECE_NONE
;

538 
Ãc_obj
.
∂y_cou¡
 = 0;

539 
Ãc_obj
.
‹õ¡©i⁄
 = 
COLOR_WHITE
;

541 
Ãc_obj
.
∑wn_dbl_move
[0] = 
ILLEGAL_POSITION
;

542 
Ãc_obj
.
∑wn_dbl_move
[1] = 
ILLEGAL_POSITION
;

544 
Ãc_obj
.
ˇ°lög_possibÀ
 = 0x0f;

546 
Ãc_obj
.
is_game_íd
 = 0;

547 
Ãc_obj
.
lo°_side_cﬁ‹
 = 0;

550 
	`cu_CÀ¨MoveHi°‹y
();

552 
	}
}

558 
	$chess_SëupBﬂrdTe°01
()

560 
	`cu_CÀ¨Bﬂrd
();

561 
Ãc_obj
.
bﬂrd
[7+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_KING
);

562 
Ãc_obj
.
bﬂrd
[7+5*8] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_PAWN
);

563 
Ãc_obj
.
bﬂrd
[3] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_KING
);

564 
Ãc_obj
.
bﬂrd
[0+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_ROOK
);

565 
Ãc_obj
.
bﬂrd
[6] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_QUEEN
);

566 
	}
}

569 
	$chess_SëupBﬂrd
()

571 
uöt8_t
 
i
;

572 
uöt8_t
 
bp
, 
wp
;

575 
	`cu_CÀ¨Bﬂrd
();

578 
wp
 = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_PAWN
);

579 
bp
 = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_PAWN
);

582  
i
 = 0; i < 8; i++ )

584 
Ãc_obj
.
bﬂrd
[
i
+8] = 
wp
;

585 
Ãc_obj
.
bﬂrd
[
i
+6*8] = 
bp
;

590 
Ãc_obj
.
bﬂrd
[0] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_ROOK
);

591 
Ãc_obj
.
bﬂrd
[1] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_KNIGHT
);

592 
Ãc_obj
.
bﬂrd
[2] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_BISHOP
);

593 
Ãc_obj
.
bﬂrd
[3] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_QUEEN
);

594 
Ãc_obj
.
bﬂrd
[4] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_KING
);

595 
Ãc_obj
.
bﬂrd
[5] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_BISHOP
);

596 
Ãc_obj
.
bﬂrd
[6] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_KNIGHT
);

597 
Ãc_obj
.
bﬂrd
[7] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_ROOK
);

599 
Ãc_obj
.
bﬂrd
[0+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_ROOK
);

600 
Ãc_obj
.
bﬂrd
[1+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_KNIGHT
);

601 
Ãc_obj
.
bﬂrd
[2+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_BISHOP
);

602 
Ãc_obj
.
bﬂrd
[3+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_QUEEN
);

603 
Ãc_obj
.
bﬂrd
[4+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_KING
);

604 
Ãc_obj
.
bﬂrd
[5+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_BISHOP
);

605 
Ãc_obj
.
bﬂrd
[6+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_KNIGHT
);

606 
Ãc_obj
.
bﬂrd
[7+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_ROOK
);

610 
	}
}

621 
uöt8_t
 
	$cu_IsIŒegÆPosôi⁄
(
uöt8_t
 
pos
, uöt8_à
my_cﬁ‹
)

623 
uöt8_t
 
bﬂrd_˝
;

625 i‡–
	`gpos_IsIŒegÆ
(
pos
) != 0 )

628 
bﬂrd_˝
 = 
	`˝_GëFromBﬂrd
(
pos
);

630 i‡–
bﬂrd_˝
 != 0 )

631 i‡–
	`˝_GëCﬁ‹
(
bﬂrd_˝
Ë=
my_cﬁ‹
 )

635 
	}
}

656 
uöt8_t
 
	g˚_põ˚_weight
[] = { 0, 1, 3, 3, 5, 9, 0 };

657 
uöt8_t
 
	g˚_pos_weight
[] = { 0, 1, 1, 2, 2, 1, 1, 0};

661 
evÆ_t
 
	$˚_EvÆ
()

663 
uöt8_t
 
˝
;

664 
uöt8_t
 
is_my_kög_¥e£¡
 = 0;

665 
uöt8_t
 
is_›posô_kög_¥e£¡
 = 0;

666 
evÆ_t
 
m©îül_my_cﬁ‹
 = 0;

667 
evÆ_t
 
m©îül_›posô_cﬁ‹
 = 0;

668 
evÆ_t
 
posôi⁄_my_cﬁ‹
 = 0;

669 
evÆ_t
 
posôi⁄_›posô_cﬁ‹
 = 0;

670 
evÆ_t
 
ªsu…
;

671 
uöt8_t
 
pos
;

673 
pos
 = 0;

677 
˝
 = 
	`˝_GëFromBﬂrd
(
pos
);

679 i‡–
	`˝_GëPõ˚
(
˝
Ë!
PIECE_NONE
 )

681 i‡–
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
 =
	`˝_GëCﬁ‹
(
˝
) )

685 i‡–
	`˝_GëPõ˚
(
˝
Ë=
PIECE_KING
 )

686 
is_my_kög_¥e£¡
 = 1;

687 
m©îül_my_cﬁ‹
 +
˚_põ˚_weight
[
	`˝_GëPõ˚
(
˝
)];

688 i‡–
	`˝_GëPõ˚
(
˝
Ë=
PIECE_PAWN
 || cp_GëPõ˚(˝Ë=
PIECE_KNIGHT
 )

690 
posôi⁄_my_cﬁ‹
 +
˚_pos_weight
[
pos
&7]*ce_pos_weight[(pos>>4)&7];

696 i‡–
	`˝_GëPõ˚
(
˝
Ë=
PIECE_KING
 )

697 
is_›posô_kög_¥e£¡
 = 1;

698 
m©îül_›posô_cﬁ‹
 +
˚_põ˚_weight
[
	`˝_GëPõ˚
(
˝
)];

699 i‡–
	`˝_GëPõ˚
(
˝
Ë=
PIECE_PAWN
 || cp_GëPõ˚(˝Ë=
PIECE_KNIGHT
 )

701 
posôi⁄_›posô_cﬁ‹
 +
˚_pos_weight
[
pos
&7]*ce_pos_weight[(pos>>4)&7];

705 
pos
 = 
	`cu_NextPos
(pos);

706 }  
pos
 != 0 );

710 i‡–
is_my_kög_¥e£¡
 == 0 )

711  
EVAL_T_MIN
;

712 i‡–
is_›posô_kög_¥e£¡
 == 0 )

713  
EVAL_T_MAX
;

717 
ªsu…
 = 
m©îül_my_cﬁ‹
 - 
m©îül_›posô_cﬁ‹
;

718 
ªsu…
 <<= 3;

719 
ªsu…
 +
posôi⁄_my_cﬁ‹
 - 
posôi⁄_›posô_cﬁ‹
;

720  
ªsu…
;

721 
	}
}

731 
	$cu_CÀ¨MoveHi°‹y
()

733 
Ãc_obj
.
chm_pos
 = 0;

734 
	}
}

736 
	$cu_Redu˚Hi°‹yByFuŒMove
()

738 
uöt8_t
 
i
;

739  
Ãc_obj
.
chm_pos
 > 
CHM_USER_SIZE
 )

741 
i
 = 0;

744 i‡–
i
+2 >
Ãc_obj
.
chm_pos
 )

746 
Ãc_obj
.
chm_li°
[
i
] =Ürc_obj.chm_list[i+2];

747 
i
++;

749 
Ãc_obj
.
chm_pos
 -= 2;

751 
	}
}

753 
	$cu_UndoHÆfMove
()

755 
chm_p
 
chm
;

757 i‡–
Ãc_obj
.
chm_pos
 == 0 )

760 
Ãc_obj
.
chm_pos
--;

762 
chm
 = 
Ãc_obj
.
chm_li°
+Ãc_obj.
chm_pos
;

764 
Ãc_obj
.
∑wn_dbl_move
[0] = 
chm
->pawn_dbl_move[0];

765 
Ãc_obj
.
∑wn_dbl_move
[1] = 
chm
->pawn_dbl_move[1];

766 
Ãc_obj
.
ˇ°lög_possibÀ
 = 
chm
->castling_possible;

768 
	`˝_SëOnBﬂrd
(
chm
->
maö_§c
, chm->
maö_˝
);

769 
	`˝_SëOnBﬂrd
(
chm
->
maö_de°
, 
PIECE_NONE
);

771 i‡–
chm
->
Ÿhî_§c
 !
ILLEGAL_POSITION
 )

772 
	`˝_SëOnBﬂrd
(
chm
->
Ÿhî_§c
, chm->
Ÿhî_˝
);

773 i‡–
chm
->
Ÿhî_de°
 !
ILLEGAL_POSITION
 )

774 
	`˝_SëOnBﬂrd
(
chm
->
Ÿhî_de°
, 
PIECE_NONE
);

776 
	}
}

789 
chm_p
 
	$cu_PushHÆfMove
()

791 
chm_p
 
chm
;

793 
chm
 = 
Ãc_obj
.
chm_li°
+Ãc_obj.
chm_pos
;

794 i‡–
Ãc_obj
.
chm_pos
 < 
CHM_LIST_SIZE
-1)

795 
Ãc_obj
.
chm_pos
++;

797 
chm
->
∑wn_dbl_move
[0] = 
Ãc_obj
.pawn_dbl_move[0];

798 
chm
->
∑wn_dbl_move
[1] = 
Ãc_obj
.pawn_dbl_move[1];

799 
chm
->
ˇ°lög_possibÀ
 = 
Ãc_obj
.castling_possible;

800  
chm
;

801 
	}
}

804 
	gchess_põ˚_to_ch¨
[] = "NBRQK";

812 
	$cu_add_pos
(*
s
, 
uöt8_t
 
pos
Ë
U8G_NOINLINE
;

814 
	$cu_add_pos
(*
s
, 
uöt8_t
 
pos
)

816 *
s
 = 
pos
;

817 *
s
 >>= 4;

818 *
s
 += 'a';

819 
s
++;

820 *
s
 = 
pos
;

821 *
s
 &= 15;

822 *
s
 += '1';

823 
	}
}

825 c⁄° *
	$cu_GëHÆfMoveSå
(
uöt8_t
 
idx
)

827 
chm_p
 
chm
;

828 
buf
[7];

829 *
p
 = 
buf
;

830 
chm
 = 
Ãc_obj
.
chm_li°
+
idx
;

832 i‡–
	`˝_GëPõ˚
(
chm
->
maö_˝
Ë!
PIECE_NONE
 )

834 i‡–
	`˝_GëPõ˚
(
chm
->
maö_˝
Ë> 
PIECE_PAWN
 )

836 *
p
++ = 
chess_põ˚_to_ch¨
[
	`˝_GëPõ˚
(
chm
->
maö_˝
)-2];

838 
	`cu_add_pos
(
p
, 
chm
->
maö_§c
);

839 
p
+=2;

840 i‡–
	`˝_GëPõ˚
(
chm
->
Ÿhî_˝
Ë=
PIECE_NONE
 )

841 *
p
++ = '-';

843 *
p
++ = 'x';

844 
	`cu_add_pos
(
p
, 
chm
->
maö_de°
);

845 
p
+=2;

847 *
p
 = '\0';

848  
buf
;

849 
	}
}

881 
	$cu_Move
(
uöt8_t
 
§c
, uöt8_à
de°
)

884 
chm_p
 
chm
 = 
	`cu_PushHÆfMove
();

887 
uöt8_t
 
˝_§c
, 
˝_de°
;

890 
uöt8_t
 
˛r_pos2
;

891 
uöt8_t
 
£t_pos2
;

892 
uöt8_t
 
£t_˝2
;

895 
˝_§c
 = 
	`˝_GëFromBﬂrd
(
§c
);

896 
˝_de°
 = 
	`˝_GëFromBﬂrd
(
de°
);

900 
chm
->
maö_˝
 = 
˝_§c
;

901 
chm
->
maö_§c
 = 
§c
;

902 
chm
->
maö_de°
 = 
de°
;

904 
chm
->
Ÿhî_˝
 = 
˝_de°
;

905 
chm
->
Ÿhî_§c
 = 
de°
;

906 
chm
->
Ÿhî_de°
 = 
ILLEGAL_POSITION
;

910 
˛r_pos2
 = 
ILLEGAL_POSITION
;

911 
£t_pos2
 = 
ILLEGAL_POSITION
;

912 
£t_˝2
 = 
PIECE_NONE
;

915 i‡–
	`˝_GëPõ˚
(
˝_§c
Ë=
PIECE_PAWN
 )

919 i‡–(
§c
 - 
de°
 == 32) || ( dest - src == 32 ) )

922 
Ãc_obj
.
∑wn_dbl_move
[
	`˝_GëCﬁ‹
(
˝_§c
)] = 
de°
;

926 i‡–(
de°
>>4) == 0 || (dest>>4) == 7 )

929 
˝_§c
 &~
PIECE_PAWN
;

930 
˝_§c
 |
PIECE_QUEEN
;

935 i‡–((
§c
 + 
de°
) & 1) != 0 )

938 i‡–
	`˝_GëPõ˚
(
˝_de°
Ë=
PIECE_NONE
 )

943 
˛r_pos2
 = 
Ãc_obj
.
∑wn_dbl_move
[
	`˝_GëCﬁ‹
(
˝_§c
) ^ 1];

944 
chm
->
Ÿhî_§c
 = 
˛r_pos2
;

945 
chm
->
Ÿhî_˝
 = 
	`˝_GëFromBﬂrd
(
˛r_pos2
);

951 i‡–
	`˝_GëPõ˚
(
˝_§c
Ë=
PIECE_KING
 )

954 i‡–
	`˝_GëCﬁ‹
(
˝_§c
Ë=
COLOR_WHITE
 )

957 
Ãc_obj
.
ˇ°lög_possibÀ
 &= 0x0c;

962 
Ãc_obj
.
ˇ°lög_possibÀ
 &= 0x03;

966 i‡–
§c
 - 
de°
 == 2 )

969 
£t_pos2
 = 
§c
-1;

970 
£t_˝2
 = 
	`˝_GëFromBﬂrd
(
§c
-4);

973 
˛r_pos2
 = 
§c
-4;

975 
chm
->
Ÿhî_˝
 = 
£t_˝2
;

976 
chm
->
Ÿhî_§c
 = 
˛r_pos2
;

977 
chm
->
Ÿhî_de°
 = 
£t_pos2
;

981 i‡–
de°
 - 
§c
 == 2 )

984 
£t_pos2
 = 
§c
+1;

985 
£t_˝2
 = 
	`˝_GëFromBﬂrd
(
§c
+3);

988 
˛r_pos2
 = 
§c
+3;

990 
chm
->
Ÿhî_˝
 = 
£t_˝2
;

991 
chm
->
Ÿhî_§c
 = 
˛r_pos2
;

992 
chm
->
Ÿhî_de°
 = 
£t_pos2
;

999 i‡–
	`˝_GëPõ˚
(
˝_§c
Ë=
PIECE_ROOK
 )

1002 i‡–
§c
 == 0x00 )

1003 
Ãc_obj
.
ˇ°lög_possibÀ
 &= ~0x01;

1005 i‡–
§c
 == 0x07 )

1006 
Ãc_obj
.
ˇ°lög_possibÀ
 &= ~0x02;

1008 i‡–
§c
 == 0x70 )

1009 
Ãc_obj
.
ˇ°lög_possibÀ
 &= ~0x04;

1011 i‡–
§c
 == 0x77 )

1012 
Ãc_obj
.
ˇ°lög_possibÀ
 &= ~0x08;

1018 
	`˝_SëOnBﬂrd
(
de°
, 
˝_§c
);

1020 i‡–
£t_pos2
 !
ILLEGAL_POSITION
 )

1021 
	`˝_SëOnBﬂrd
(
£t_pos2
, 
£t_˝2
);

1023 
	`˝_SëOnBﬂrd
(
§c
, 
PIECE_NONE
);

1025 i‡–
˛r_pos2
 !
ILLEGAL_POSITION
 )

1026 
	`˝_SëOnBﬂrd
(
˛r_pos2
, 
PIECE_NONE
);

1029 
	}
}

1036 
uöt8_t
 
	$˚_Lo›Recur
(
uöt8_t
 
pos
)

1038 
evÆ_t
 
evÆ
;

1042 i‡–
	`cu_IsIŒegÆPosôi⁄
(
pos
, 
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
) != 0 )

1046 
	`cu_Move
(
	`°ack_GëCuºEÀmít
()->
cuºít_pos
, 
pos
);

1053 i‡–
	`°ack_Push
(
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
) == 0 )

1055 
evÆ
 = 
	`˚_EvÆ
();

1060 
	`°ack_InôCuºEÀmít
();

1062 
	`˚_Lo›Põ˚s
();

1064 
evÆ
 = -
	`°ack_GëCuºEÀmít
()->
be°_evÆ
;

1065 
	`°ack_P›
();

1069 
	`°ack_SëMove
(
evÆ
, 
pos
);

1072 
	`cu_UndoHÆfMove
();

1077 i‡–
Ãc_obj
.
check_mode
 != 0 )

1079 
°ack_ñemít_p
 
e
 = 
	`°ack_GëCuºEÀmít
();

1080 i‡–
Ãc_obj
.
check_mode
 =
CHECK_MODE_MOVEABLE
 )

1082 
	`˝_SëOnBﬂrd
(
e
->
cuºít_pos
,É->
cuºít_˝
 | 
CP_MARK_MASK
 );

1084 i‡–
Ãc_obj
.
check_mode
 =
CHECK_MODE_TARGET_MOVE
 )

1086 i‡–
e
->
cuºít_pos
 =
Ãc_obj
.
check_§c_pos
 )

1088 
	`˝_SëOnBﬂrd
(
pos
, 
	`˝_GëFromBﬂrd
’osË| 
CP_MARK_MASK
 );

1093 
	}
}

1107 c⁄° 
uöt8_t
 
	g˚_dú_off£t_rook
[] 
	gPROGMEM
 = { 1, 16, -16, -1, 0 };

1108 c⁄° 
uöt8_t
 
	g˚_dú_off£t_bish›
[] 
	gPROGMEM
 = { 15, 17, -17, -15, 0 };

1109 c⁄° 
uöt8_t
 
	g˚_dú_off£t_quìn
[] 
	gPROGMEM
 = { 1, 16, -16, -1, 15, 17, -17, -15, 0 };

1110 c⁄° 
uöt8_t
 
	g˚_dú_off£t_knight
[] 
	gPROGMEM
 = {14, -14, 18, -18, 31, -31, 33, -33, 0};

1112 
	$˚_Lo›DúsSögÀMu…iSãp
(c⁄° 
uöt8_t
 *
d
, uöt8_à
is_mu…i_°ï
)

1114 
uöt8_t
 
lo›_pos
;

1119 i‡–
	`u8g_pgm_ªad
(
d
) == 0 )

1123 
lo›_pos
 = 
	`°ack_GëCuºEÀmít
()->
cuºít_pos
;

1129 
lo›_pos
 +
	`u8g_pgm_ªad
(
d
);

1136 i‡–
	`˚_Lo›Recur
(
lo›_pos
) == 0 )

1140 i‡–
	`˝_GëPõ˚
(
	`˝_GëFromBﬂrd
(
lo›_pos
)Ë!
PIECE_NONE
 )

1142 }  
is_mu…i_°ï
 );

1143 
d
++;

1145 
	}
}

1147 
	$˚_Lo›Rook
()

1149 
	`˚_Lo›DúsSögÀMu…iSãp
(
˚_dú_off£t_rook
, 1);

1150 
	}
}

1152 
	$˚_Lo›Bish›
()

1154 
	`˚_Lo›DúsSögÀMu…iSãp
(
˚_dú_off£t_bish›
, 1);

1155 
	}
}

1157 
	$˚_Lo›Quìn
()

1159 
	`˚_Lo›DúsSögÀMu…iSãp
(
˚_dú_off£t_quìn
, 1);

1160 
	}
}

1162 
	$˚_Lo›Knight
()

1164 
	`˚_Lo›DúsSögÀMu…iSãp
(
˚_dú_off£t_knight
, 0);

1165 
	}
}

1173 
uöt8_t
 
	$cu_IsKögCa°lög
(
uöt8_t
 
mask
, 
öt8_t
 
dúe˘i⁄
, uöt8_à
˙t
Ë
U8G_NOINLINE
;

1183 
uöt8_t
 
	$cu_IsKögCa°lög
(
uöt8_t
 
mask
, 
öt8_t
 
dúe˘i⁄
, uöt8_à
˙t
)

1185 
uöt8_t
 
pos
;

1186 
uöt8_t
 
›p⁄ít_cﬁ‹
;

1189 i‡–(
Ãc_obj
.
ˇ°lög_possibÀ
 & 
mask
) == 0 )

1193 
pos
 = 
	`°ack_GëCuºEÀmít
()->
cuºít_pos
;

1196 
›p⁄ít_cﬁ‹
 = 1;

1197 
›p⁄ít_cﬁ‹
 -
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
;

1200 i‡–
	`˚_GëPosôi⁄AâackWeight
(
pos
, 
›p⁄ít_cﬁ‹
) > 0 )

1208 
pos
 +
dúe˘i⁄
;

1210 i‡–
	`˝_GëPõ˚
(
	`˝_GëFromBﬂrd
(
pos
)Ë!
PIECE_NONE
 )

1214 i‡–
	`˚_GëPosôi⁄AâackWeight
(
pos
, 
›p⁄ít_cﬁ‹
) > 0 )

1217 
˙t
--;

1218 i‡–
˙t
 == 0 )

1222 
	}
}

1224 
	$˚_Lo›Kög
()

1234 i‡–
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
 =
COLOR_WHITE
 )

1237 i‡–
	`cu_IsKögCa°lög
(1, -1, 3) != 0 )

1240 
	`˚_Lo›Recur
(
	`°ack_GëCuºEÀmít
()->
cuºít_pos
-2);

1243 i‡–
	`cu_IsKögCa°lög
(2, 1, 2) != 0 )

1246 
	`˚_Lo›Recur
(
	`°ack_GëCuºEÀmít
()->
cuºít_pos
+2);

1252 i‡–
	`cu_IsKögCa°lög
(4, -1, 3) != 0 )

1255 
	`˚_Lo›Recur
(
	`°ack_GëCuºEÀmít
()->
cuºít_pos
-2);

1258 i‡–
	`cu_IsKögCa°lög
(8, 1, 2) != 0 )

1261 
	`˚_Lo›Recur
(
	`°ack_GëCuºEÀmít
()->
cuºít_pos
+2);

1266 
	`˚_Lo›DúsSögÀMu…iSãp
(
˚_dú_off£t_quìn
, 0);

1267 
	}
}

1278 
	$˚_Lo›PawnSideC≠tuª
(
uöt8_t
 
lo›_pos
)

1280 i‡–
	`gpos_IsIŒegÆ
(
lo›_pos
) == 0 )

1284 i‡–
	`˝_GëPõ˚
(
	`˝_GëFromBﬂrd
(
lo›_pos
)Ë!
PIECE_NONE
 )

1287 
	`˚_Lo›Recur
(
lo›_pos
);

1293 i‡–
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
 =
COLOR_WHITE
 )

1295 i‡–
Ãc_obj
.
∑wn_dbl_move
[
COLOR_BLACK
]+16 =
lo›_pos
 )

1297 
	`˚_Lo›Recur
(
lo›_pos
);

1303 i‡–
Ãc_obj
.
∑wn_dbl_move
[
COLOR_WHITE
] =
lo›_pos
+16 )

1305 
	`˚_Lo›Recur
(
lo›_pos
);

1311 
	}
}

1313 
	$˚_Lo›Pawn
()

1315 
uöt8_t
 
öôül_pos
 = 
	`°ack_GëCuºEÀmít
()->
cuºít_pos
;

1316 
uöt8_t
 
my_cﬁ‹
 = 
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
;

1318 
uöt8_t
 
lo›_pos
;

1319 
uöt8_t
 
löe
;

1323 
lo›_pos
 = 
öôül_pos
;

1324 
löe
 = 
öôül_pos
;

1325 
löe
 >>= 4;

1326 i‡–
my_cﬁ‹
 =
COLOR_WHITE
 )

1327 
lo›_pos
 += 16;

1329 
lo›_pos
 -= 16;

1330 i‡–
	`gpos_IsIŒegÆ
(
lo›_pos
) == 0 )

1333 i‡–
	`˝_GëPõ˚
(
	`˝_GëFromBﬂrd
(
lo›_pos
)Ë=
PIECE_NONE
 )

1336 
	`˚_Lo›Recur
(
lo›_pos
);

1341 i‡–(
my_cﬁ‹
 =
COLOR_WHITE
 && 
löe
 =1Ë|| (my_cﬁ‹ =
COLOR_BLACK
 &&Üine == 6 ) )

1345 i‡–
my_cﬁ‹
 =
COLOR_WHITE
 )

1346 
lo›_pos
 += 16;

1348 
lo›_pos
 -= 16;

1349 i‡–
	`˝_GëPõ˚
(
	`˝_GëFromBﬂrd
(
lo›_pos
)Ë=
PIECE_NONE
 )

1352 
	`˚_Lo›Recur
(
lo›_pos
);

1360 
lo›_pos
 = 
öôül_pos
;

1361 i‡–
my_cﬁ‹
 =
COLOR_WHITE
 )

1362 
lo›_pos
 += 15;

1364 
lo›_pos
 -= 15;

1365 
	`˚_Lo›PawnSideC≠tuª
(
lo›_pos
);

1368 
lo›_pos
 = 
öôül_pos
;

1369 i‡–
my_cﬁ‹
 =
COLOR_WHITE
 )

1370 
lo›_pos
 += 17;

1372 
lo›_pos
 -= 17;

1373 
	`˚_Lo›PawnSideC≠tuª
(
lo›_pos
);

1374 
	}
}

1391 
	$˚_FödPõ˚BySãp
(
uöt8_t
 
°¨t_pos
, uöt8_à
põ˚
, c⁄° uöt8_à*
d
, uöt8_à
is_mu…i_°ï
)

1393 
uöt8_t
 
lo›_pos
, 
˝
;

1398 i‡–
	`u8g_pgm_ªad
(
d
) == 0 )

1402 
lo›_pos
 = 
°¨t_pos
;

1408 
lo›_pos
 +
	`u8g_pgm_ªad
(
d
);

1411 i‡–(
lo›_pos
 & 0x088) != 0 )

1415 
˝
 = 
	`˝_GëFromBﬂrd
(
lo›_pos
);

1418 i‡–
	`˝_GëPõ˚
(
˝
Ë!
PIECE_NONE
 )

1421 i‡–
	`˝_GëPõ˚
(
˝
Ë=
põ˚
 )

1423 
Ãc_obj
.
föd_põ˚_weight
[
	`˝_GëCﬁ‹
(
˝
)] +
˚_põ˚_weight
[
põ˚
];

1424 
Ãc_obj
.
föd_põ˚_˙t
[
	`˝_GëCﬁ‹
(
˝
)]++;

1429 }  
is_mu…i_°ï
 );

1430 
d
++;

1432 
	}
}

1434 
	$˚_FödPawnPõ˚
(
uöt8_t
 
de°_pos
, uöt8_à
cﬁ‹
)

1436 
uöt8_t
 
˝
;

1438 i‡–(
de°_pos
 & 0x088) == 0 )

1441 
˝
 = 
	`˝_GëFromBﬂrd
(
de°_pos
);

1443 i‡–
	`˝_GëPõ˚
(
˝
Ë=
PIECE_PAWN
 )

1445 i‡–
	`˝_GëCﬁ‹
(
˝
Ë=
cﬁ‹
 )

1448 
Ãc_obj
.
föd_põ˚_weight
[
cﬁ‹
] += 1;

1449 
Ãc_obj
.
föd_põ˚_˙t
[
cﬁ‹
]++;

1453 
	}
}

1476 
	$˚_CÆcuœãPosôi⁄Weight
(
uöt8_t
 
pos
)

1479 
Ãc_obj
.
föd_põ˚_weight
[0] = 0;

1480 
Ãc_obj
.
föd_põ˚_weight
[1] = 0;

1481 
Ãc_obj
.
föd_põ˚_˙t
[0] = 0;

1482 
Ãc_obj
.
föd_põ˚_˙t
[1] = 0;

1484 i‡–(
pos
 & 0x088) != 0 )

1487 
	`˚_FödPõ˚BySãp
(
pos
, 
PIECE_ROOK
, 
˚_dú_off£t_rook
, 1);

1488 
	`˚_FödPõ˚BySãp
(
pos
, 
PIECE_BISHOP
, 
˚_dú_off£t_bish›
, 1);

1489 
	`˚_FödPõ˚BySãp
(
pos
, 
PIECE_QUEEN
, 
˚_dú_off£t_quìn
, 1);

1490 
	`˚_FödPõ˚BySãp
(
pos
, 
PIECE_KNIGHT
, 
˚_dú_off£t_knight
, 0);

1491 
	`˚_FödPõ˚BySãp
(
pos
, 
PIECE_KING
, 
˚_dú_off£t_quìn
, 0);

1493 
	`˚_FödPawnPõ˚
(
pos
+17, 
COLOR_BLACK
);

1494 
	`˚_FödPawnPõ˚
(
pos
+15, 
COLOR_BLACK
);

1495 
	`˚_FödPawnPõ˚
(
pos
-17, 
COLOR_WHITE
);

1496 
	`˚_FödPawnPõ˚
(
pos
-15, 
COLOR_WHITE
);

1497 
	}
}

1507 
uöt8_t
 
	$˚_GëPosôi⁄AâackWeight
(
uöt8_t
 
pos
, uöt8_à
cﬁ‹
)

1509 
	`˚_CÆcuœãPosôi⁄Weight
(
pos
);

1510  
Ãc_obj
.
föd_põ˚_weight
[
cﬁ‹
];

1511 
	}
}

1513 
uöt8_t
 
	$˚_GëPosôi⁄AâackCou¡
(
uöt8_t
 
pos
, uöt8_à
cﬁ‹
)

1515 
	`˚_CÆcuœãPosôi⁄Weight
(
pos
);

1516  
Ãc_obj
.
föd_põ˚_˙t
[
cﬁ‹
];

1517 
	}
}

1524 
	$˚_Lo›Põ˚s
()

1526 
°ack_ñemít_p
 
e
 = 
	`°ack_GëCuºEÀmít
();

1528 
e
->
cuºít_pos
 = 0;

1531 
e
->
cuºít_˝
 = 
	`˝_GëFromBﬂrd
”->
cuºít_pos
);

1533 i‡–
e
->
cuºít_˝
 != 0 )

1536 i‡–
e
->
cuºít_cﬁ‹
 =
	`˝_GëCﬁ‹
”->
cuºít_˝
) )

1538 
	`chess_Thökög
();

1541 
	`˝_GëPõ˚
(
e
->
cuºít_˝
))

1543 
PIECE_NONE
:

1545 
PIECE_PAWN
:

1546 
	`˚_Lo›Pawn
();

1548 
PIECE_KNIGHT
:

1549 
	`˚_Lo›Knight
();

1551 
PIECE_BISHOP
:

1552 
	`˚_Lo›Bish›
();

1554 
PIECE_ROOK
:

1555 
	`˚_Lo›Rook
();

1557 
PIECE_QUEEN
:

1558 
	`˚_Lo›Quìn
();

1560 
PIECE_KING
:

1561 
	`˚_Lo›Kög
();

1566 
e
->
cuºít_pos
 = 
	`cu_NextPos
(e->current_pos);

1567 }  
e
->
cuºít_pos
 != 0 );

1568 
	}
}

1585 
	$chess_CÀ¨M¨ks
()

1587 
uöt8_t
 
i
;

1588  
i
 = 0; i < 64; i++ )

1589 
Ãc_obj
.
bﬂrd
[
i
] &~
CP_MARK_MASK
;

1590 
	}
}

1595 
	$chess_M¨kMovabÀ
()

1597 
	`°ack_Inô
(0);

1599 
Ãc_obj
.
check_mode
 = 
CHECK_MODE_MOVEABLE
;

1600 
	`˚_Lo›Põ˚s
();

1601 
	}
}

1608 
	$chess_M¨kT¨gëMoves
(
uöt8_t
 
§c_pos
)

1610 
	`°ack_Inô
(0);

1611 
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
 = 
	`˝_GëCﬁ‹
(
	`˝_GëFromBﬂrd
(
§c_pos
));

1612 
Ãc_obj
.
check_§c_pos
 = 
§c_pos
;

1613 
Ãc_obj
.
check_mode
 = 
CHECK_MODE_TARGET_MOVE
;

1614 
	`˚_Lo›Põ˚s
();

1615 
	}
}

1623 
uöt8_t
 
	$chess_GëNextM¨ked
(
uöt8_t
 
¨g
, uöt8_à
is_¥ev
)

1625 
uöt8_t
 
i
;

1626 
uöt8_t
 
pos
 = 
¨g
;

1627 
i
 = 0; i < 64; i++)

1629 i‡–
is_¥ev
 != 0 )

1630 
pos
 = 
	`cu_PªvPos
(pos);

1632 
pos
 = 
	`cu_NextPos
(pos);

1633 i‡–
¨g
 !255 && 
pos
 == 0 )

1635 i‡–
	`˝_IsM¨ked
(
	`˝_GëFromBﬂrd
(
pos
)) )

1636  
pos
;

1639 
	}
}

1643 
	$chess_M™uÆMove
(
uöt8_t
 
§c
, uöt8_à
de°
)

1645 
uöt8_t
 
˝
;

1651 
˝
 = 
	`˝_GëFromBﬂrd
(
de°
);

1652 i‡–
	`˝_GëPõ˚
(
˝
Ë=
PIECE_KING
 )

1654 
Ãc_obj
.
is_game_íd
 = 1;

1655 
Ãc_obj
.
lo°_side_cﬁ‹
 = 
	`˝_GëCﬁ‹
(
˝
);

1660 
	`cu_Redu˚Hi°‹yByFuŒMove
();

1662 
	`cu_Move
(
§c
, 
de°
);

1665 
Ãc_obj
.
∑wn_dbl_move
[Ãc_obj.
∂y_cou¡
&1] = 
ILLEGAL_POSITION
;

1668 
Ãc_obj
.
∂y_cou¡
++;

1676 
	`°ack_Inô
(1);

1677 
	`˚_Lo›Põ˚s
();

1684 i‡–
	`°ack_GëCuºEÀmít
()->
be°_‰om_pos
 =
ILLEGAL_POSITION
 )

1686 
uöt8_t
 
cﬁ‹
;

1693 
uöt8_t
 
i
 = 0;

1694 
cﬁ‹
 = 
Ãc_obj
.
∂y_cou¡
;

1695 
cﬁ‹
 &= 1;

1698 
˝
 = 
	`˝_GëFromBﬂrd
(
i
);

1700 i‡–
	`˝_GëPõ˚
(
˝
Ë=
PIECE_KING
 )

1702 i‡–
	`˝_GëCﬁ‹
(
˝
Ë=
cﬁ‹
 )

1705 i‡–
	`˚_GëPosôi⁄AâackCou¡
(
i
, 
cﬁ‹
^1) != 0 )

1708 
Ãc_obj
.
is_game_íd
 = 1;

1709 
Ãc_obj
.
lo°_side_cﬁ‹
 = 
cﬁ‹
;

1714 
Ãc_obj
.
is_game_íd
 = 1;

1715 
Ãc_obj
.
lo°_side_cﬁ‹
 = 2;

1721 
i
 = 
	`cu_NextPos
(i);

1722 }  
i
 != 0 );

1724 
	}
}

1727 
	$chess_CompuãrMove
(
uöt8_t
 
dïth
)

1729 
	`°ack_Inô
(
dïth
);

1734 
	`cu_Redu˚Hi°‹yByFuŒMove
();

1735 
	`˚_Lo›Põ˚s
();

1737 
	`chess_M™uÆMove
(
	`°ack_GëCuºEÀmít
()->
be°_‰om_pos
, sèck_GëCuºEÀmít()->
be°_to_pos
);

1738 
	}
}

1745 #ifde‡
UNIX_MAIN


1747 
	~<°dio.h
>

1748 
	~<°rög.h
>

1750 *
	gpõ˚_°r
[] = {

1795 
	$chess_Thökög
()

1797 
uöt8_t
 
i
;

1798 
uöt8_t
 
˝
 = 
	`˝_GëPõ˚
(
	`°ack_GëCuºEÀmít
()->
cuºít_˝
);

1800 
	`¥ötf
("Thökög: ", 
põ˚_°r
[
˝
], 
	`°ack_GëCuºEÀmít
()->
cuºít_pos
);

1802  
i
 = 0; i <
Ãc_obj
.
cuº_dïth
; i++ )

1803 
	`¥ötf
("%†", 
põ˚_°r
[(
Ãc_obj
.
°ack_mem‹y
+
i
)->
cuºít_˝
]);

1805 
	`¥ötf
(" \r");

1806 
	}
}

1808 
	$bﬂrd_Show
()

1810 
uöt8_t
 
i
, 
j
, 
˝
;

1811 
buf
[10];

1812  
i
 = 0; i < 8; i++ )

1814 
	`¥ötf
("%1d ", 7-
i
);

1815  
j
 = 0; j < 8; j++ )

1818 
˝
 = 
Ãc_obj
.
bﬂrd
[(7-
i
)*8+
j
];

1819 
	`°r˝y
(
buf
, 
põ˚_°r
[
˝
&
COLOR_PIECE_MASK
]);

1821 i‡–(
˝
 & 
CP_MARK_MASK
) != 0 )

1823 
buf
[0] = '#';

1827 
˝
 &
COLOR_PIECE_MASK
;

1828 
	`¥ötf
("%†%02x ", 
buf
, 
˝
);

1831 
	`¥ötf
("\n");

1833 
	}
}

1835 
	$maö
()

1837 
uöt8_t
 
dïth
 = 3;

1838 
	`chess_SëupBﬂrd
();

1839 
	`bﬂrd_Show
();

1840 
	`puts
("");

1849 
	`chess_M™uÆMove
(0x006, 0x066);

1851 
	`¥ötf
("Ãc_obj.is_game_íd: %d\n" , 
Ãc_obj
.
is_game_íd
);

1852 
	`¥ötf
("Ãc_obj.lo°_side_cﬁ‹: %d\n" , 
Ãc_obj
.
lo°_side_cﬁ‹
);

1854 
	`chess_CompuãrMove
(2);

1856 
	`¥ötf
("Ãc_obj.is_game_íd: %d\n" , 
Ãc_obj
.
is_game_íd
);

1857 
	`¥ötf
("Ãc_obj.lo°_side_cﬁ‹: %d\n" , 
Ãc_obj
.
lo°_side_cﬁ‹
);

1859 
	`bﬂrd_Show
();

1861 
	}
}

1872 
	#MNU_FONT
 
u8g_f⁄t_5x8r


	)

1874 
	#MNU_ENTRY_HEIGHT
 9

	)

1876 *
	gmnu_tôÀ
 = "Little Rook Chess";

1877 *
	gmnu_li°
[] = { "New Game (White)", "New Game (Black)", "Undo Move", "Return" };

1878 
uöt8_t
 
	gmnu_pos
 = 0;

1879 
uöt8_t
 
	gmnu_max
 = 4;

1881 
	$mnu_DøwHome
(
uöt8_t
 
is_highlight
)

1883 
uöt8_t
 
x
 = 
Ãc_u8g
->
width
 - 35;

1884 
uöt8_t
 
y
 = (
Ãc_u8g
->
height
-1);

1885 
uöt8_t
 
t
;

1887 
	`u8g_SëF⁄t
(
Ãc_u8g
, 
u8g_f⁄t_5x7r
);

1888 
	`u8g_SëDeÁu…F‹egroundCﬁ‹
(
Ãc_u8g
);

1889 
t
 = 
	`u8g_DøwSåP
(
Ãc_u8g
, 
x
, 
y
 -1, 
	`U8G_PSTR
("Options"));

1891 i‡–
is_highlight
 )

1892 
	`u8g_DøwFøme
(
Ãc_u8g
, 
x
-1, 
y
 - 
MNU_ENTRY_HEIGHT
 +1, 
t
, MNU_ENTRY_HEIGHT);

1893 
	}
}

1895 
	$mnu_DøwE¡ry
(
uöt8_t
 
y
, *
°r
, uöt8_à
is_˛r_background
, uöt8_à
is_highlight
)

1897 
uöt8_t
 
t
, 
x
;

1898 
	`u8g_SëF⁄t
(
Ãc_u8g
, 
MNU_FONT
);

1899 
t
 = 
	`u8g_GëSåWidth
(
Ãc_u8g
, 
°r
);

1900 
x
 = 
	`u8g_GëWidth
(
Ãc_u8g
);

1901 
x
 -
t
;

1902 
x
 >>= 1;

1904 i‡–
is_˛r_background
 )

1906 
	`u8g_SëDeÁu…BackgroundCﬁ‹
(
Ãc_u8g
);

1907 
	`u8g_DøwBox
(
Ãc_u8g
, 
x
-3, (Ãc_u8g->
height
-1Ë- (
y
+
MNU_ENTRY_HEIGHT
-1+2), 
t
+5, MNU_ENTRY_HEIGHT+4);

1910 
	`u8g_SëDeÁu…F‹egroundCﬁ‹
(
Ãc_u8g
);

1911 
	`u8g_DøwSå
(
Ãc_u8g
, 
x
, (Ãc_u8g->
height
-1Ë- 
y
, 
°r
);

1913 i‡–
is_highlight
 )

1915 
	`u8g_DøwFøme
(
Ãc_u8g
, 
x
-1, (Ãc_u8g->
height
-1Ë- 
y
 -
MNU_ENTRY_HEIGHT
 +1, 
t
, MNU_ENTRY_HEIGHT);

1917 
	}
}

1919 
	$mnu_Døw
()

1921 
uöt8_t
 
i
;

1922 
uöt8_t
 
t
,
y
;

1924 
y
 = 
mnu_max
;

1925 
y
++;

1926 
y
++;

1927 
y
 *
MNU_ENTRY_HEIGHT
;

1930 
t
 = 
	`u8g_GëHeight
(
Ãc_u8g
);

1931 
t
 -
y
;

1934 
t
 >>= 1;

1935 
y
 = 
	`u8g_GëHeight
(
Ãc_u8g
);

1936 
y
 -
t
;

1938 
y
 -
MNU_ENTRY_HEIGHT
;

1939 
	`mnu_DøwE¡ry
(
y
, 
mnu_tôÀ
, 0, 0);

1941 
y
 -
MNU_ENTRY_HEIGHT
;

1944  
i
 = 0; i < 
mnu_max
; i++ )

1946 
y
 -
MNU_ENTRY_HEIGHT
;

1947 
	`mnu_DøwE¡ry
(
y
, 
mnu_li°
[
i
], 0, i =
mnu_pos
);

1949 
	}
}

1951 
	$mnu_Sãp
(
uöt8_t
 
key_cmd
)

1953 i‡–
key_cmd
 =
CHESS_KEY_NEXT
 )

1955 i‡–
mnu_pos
+1 < 
mnu_max
 )

1956 
mnu_pos
++;

1958 i‡–
key_cmd
 =
CHESS_KEY_PREV
 )

1960 i‡–
mnu_pos
 > 0 )

1961 
mnu_pos
--;

1963 
	}
}

1968 
uöt8_t
 
	gchess_key_code
 = 0;

1969 
uöt8_t
 
	gchess_key_cmd
 = 0;

1970 
	#CHESS_STATE_MENU
 0

	)

1971 
	#CHESS_STATE_SELECT_START
 1

	)

1972 
	#CHESS_STATE_SELECT_PIECE
 2

	)

1973 
	#CHESS_STATE_SELECT_TARGET_POS
 3

	)

1974 
	#CHESS_STATE_THINKING
 4

	)

1975 
	#CHESS_STATE_GAME_END
 5

	)

1976 
uöt8_t
 
	gchess_°©e
 = 
CHESS_STATE_MENU
;

1977 
uöt8_t
 
	gchess_sour˚_pos
 = 255;

1978 
uöt8_t
 
	gchess_èrgë_pos
 = 255;

1980 c⁄° 
uöt8_t
 
	gchess_põ˚s_body_bm
[] 
	gPROGMEM
 =

1990 #ifde‡
NOT_REQUIRED


1992 c⁄° 
uöt8_t
 
	gchess_whôe_põ˚s_bm
[] 
	gPROGMEM
 =

2003 c⁄° 
uöt8_t
 
	gchess_bœck_põ˚s_bm
[] 
	gPROGMEM
 =

2014 #i‡
deföed
(
DOGXL160_HW_GR
)

2015 
	#BOXSIZE
 13

	)

2016 
	#BOXOFFSET
 3

	)

2018 
	#BOXSIZE
 8

	)

2019 
	#BOXOFFSET
 1

	)

2022 
u8g_uöt_t
 
	gchess_low_edge
;

2023 
uöt8_t
 
	gchess_boxsize
 = 8;

2024 
uöt8_t
 
	gchess_boxoff£t
 = 1;

2027 
	$chess_DøwFøme
(
uöt8_t
 
pos
, uöt8_à
is_bﬁd
)

2029 
u8g_uöt_t
 
x0
, 
y0
;

2031 
x0
 = 
pos
;

2032 
x0
 &= 15;

2033 i‡–
Ãc_obj
.
‹õ¡©i⁄
 !
COLOR_WHITE
 )

2034 
x0
 ^= 7;

2036 
y0
 = 
pos
;

2037 
y0
>>= 4;

2038 i‡–
Ãc_obj
.
‹õ¡©i⁄
 !
COLOR_WHITE
 )

2039 
y0
 ^= 7;

2041 
x0
 *
chess_boxsize
;

2042 
y0
 *
chess_boxsize
;

2044 
	`u8g_SëDeÁu…F‹egroundCﬁ‹
(
Ãc_u8g
);

2045 
	`u8g_DøwFøme
(
Ãc_u8g
, 
x0
, 
chess_low_edge
 - 
y0
 - 
chess_boxsize
+1, chess_boxsize, chess_boxsize);

2048 i‡–
is_bﬁd
 )

2050 
x0
--;

2051 
y0
++;

2053 
	`u8g_DøwFøme
(
Ãc_u8g
, 
x0
, 
chess_low_edge
 - 
y0
 - 
chess_boxsize
 +1, chess_boxsize+2, chess_boxsize+2);

2055 
	}
}

2058 
	$chess_DøwBﬂrd
()

2060 
uöt8_t
 
i
, 
j
, 
˝
;

2061 c⁄° 
uöt8_t
 *
±r
;

2063 i‡–
	`U8G_MODE_GET_BITS_PER_PIXEL
(
	`u8g_GëMode
(
Ãc_u8g
)) > 1 )

2065  
i
 = 0; i < 8; i++ )

2066  
j
 = 0; j < 8; j++ )

2068 
uöt8_t
 
x
,
y
;

2069 
x
 = 
i
;

2070 
x
*=
chess_boxsize
;

2071 
y
 = 
j
;

2072 
y
*=
chess_boxsize
;

2073 i‡–((
i
^
j
) & 1) == 0 )

2074 
	`u8g_SëDeÁu…MidCﬁ‹
(
Ãc_u8g
);

2076 
	`u8g_SëDeÁu…BackgroundCﬁ‹
(
Ãc_u8g
);

2077 
	`u8g_DøwBox
(
Ãc_u8g
, 
x
,
chess_low_edge
-
y
-
chess_boxsize
+1,chess_boxsize,chess_boxsize);

2083 
uöt8_t
 
x_off£t
 = 1;

2084 
	`u8g_SëDeÁu…F‹egroundCﬁ‹
(
Ãc_u8g
);

2085  
i
 = 0; i < 8*8; i+=8 )

2087  
j
 = 0; j < 8*8; j+=8 )

2089 i‡–((
i
^
j
) & 8) == 0 )

2091 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+0+
x_off£t
, 
chess_low_edge
 - 
i
-0);

2092 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+0+
x_off£t
, 
chess_low_edge
 - 
i
-2);

2093 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+0+
x_off£t
, 
chess_low_edge
 - 
i
-4);

2094 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+0+
x_off£t
, 
chess_low_edge
 - 
i
-6);

2095 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+2+
x_off£t
, 
chess_low_edge
 - 
i
-0);

2096 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+2+
x_off£t
, 
chess_low_edge
 - 
i
-6);

2097 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+4+
x_off£t
, 
chess_low_edge
 - 
i
-0);

2098 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+4+
x_off£t
, 
chess_low_edge
 - 
i
-6);

2099 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+6+
x_off£t
, 
chess_low_edge
 - 
i
-0);

2100 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+6+
x_off£t
, 
chess_low_edge
 - 
i
-2);

2101 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+6+
x_off£t
, 
chess_low_edge
 - 
i
-4);

2102 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+6+
x_off£t
, 
chess_low_edge
 - 
i
-6);

2108  
i
 = 0; i < 8; i++ )

2110  
j
 = 0; j < 8; j++ )

2113 i‡–
Ãc_obj
.
‹õ¡©i⁄
 =
COLOR_WHITE
 )

2115 
˝
 = 
Ãc_obj
.
bﬂrd
[
i
*8+
j
];

2119 
˝
 = 
Ãc_obj
.
bﬂrd
[(7-
i
)*8+7-
j
];

2121 i‡–
	`˝_GëPõ˚
(
˝
Ë!
PIECE_NONE
 )

2123 
±r
 = 
chess_bœck_põ˚s_bm
;

2124 
±r
 +(
	`˝_GëPõ˚
(
˝
)-1)*8;

2125 
	`u8g_SëDeÁu…F‹egroundCﬁ‹
(
Ãc_u8g
);

2126 
	`u8g_DøwBôm≠P
(
Ãc_u8g
, 
j
*
chess_boxsize
+
chess_boxoff£t
-1, 
chess_low_edge
 - (
i
*chess_boxsize+chess_boxsize-chess_boxoff£t), 1, 8, 
±r
);

2128 i‡–
	`˝_GëCﬁ‹
(
˝
Ë=
Ãc_obj
.
°rike_out_cﬁ‹
 )

2130 
±r
 = 
chess_põ˚s_body_bm
;

2131 
±r
 +(
	`˝_GëPõ˚
(
˝
)-1)*8;

2132 
	`u8g_SëDeÁu…BackgroundCﬁ‹
(
Ãc_u8g
);

2133 
	`u8g_DøwBôm≠P
(
Ãc_u8g
, 
j
*
chess_boxsize
+
chess_boxoff£t
-1, 
chess_low_edge
 - (
i
*chess_boxsize+chess_boxsize-chess_boxoff£t), 1, 8, 
±r
);

2139 i‡–(
chess_sour˚_pos
 & 0x88) == 0 )

2141 
	`chess_DøwFøme
(
chess_sour˚_pos
, 1);

2144 i‡–(
chess_èrgë_pos
 & 0x88) == 0 )

2146 
	`chess_DøwFøme
(
chess_èrgë_pos
, 0);

2149 
	}
}

2152 
	$chess_Thökög
()

2154 
	}
}

2156 
	$chess_Inô
(
u8g_t
 *
u8g
, 
uöt8_t
 
body_cﬁ‹
)

2158 
Ãc_u8g
 = 
u8g
;

2160 
chess_low_edge
 = 
	`u8g_GëHeight
(
Ãc_u8g
);

2161 
chess_low_edge
--;

2164 i‡–
	`U8G_MODE_GET_BITS_PER_PIXEL
(
	`u8g_GëMode
(
Ãc_u8g
)) == 1 )

2167 
chess_boxsize
 = 8;

2168 
chess_boxoff£t
 = 1;

2179  i‡–
	`u8g_GëHeight
(
Ãc_u8g
) >= 11*8 )

2181 
chess_boxsize
 = 10;

2182 
chess_boxoff£t
 = 2;

2186 
chess_boxsize
 = 8;

2187 
chess_boxoff£t
 = 1;

2190 i‡–
	`u8g_GëHeight
(
Ãc_u8g
) > 64 )

2191 
chess_low_edge
 -(
	`u8g_GëHeight
(
Ãc_u8g
)-
chess_boxsize
*8) / 2;

2195 
Ãc_obj
.
°rike_out_cﬁ‹
 = 
body_cﬁ‹
;

2196 
	`chess_SëupBﬂrd
();

2197 
	}
}

2201 
	$chess_Døw
()

2203 i‡–
chess_°©e
 =
CHESS_STATE_MENU
 )

2205 i‡–
Ãc_obj
.
∂y_cou¡
 == 0)

2206 
mnu_max
 = 2;

2208 
mnu_max
 = 4;

2209 
	`mnu_Døw
();

2213 
	`chess_DøwBﬂrd
();

2216 
uöt8_t
 
i
;

2217 
uöt8_t
 
íåõs
 = 
Ãc_obj
.
chm_pos
;

2218 i‡–
íåõs
 > 4 )

2219 
íåõs
 = 4;

2221 
	`u8g_SëF⁄t
(
Ãc_u8g
, 
u8g_f⁄t_5x7
);

2222 
	`u8g_SëDeÁu…F‹egroundCﬁ‹
(
Ãc_u8g
);

2223  
i
 = 0; i < 
íåõs
; i++ )

2226 #i‡
	`deföed
(
DOGXL160_HW_GR
Ë|| deföed(
DOGXL160_HW_BW
)

2227 
	`dog_DøwSå
(
	`u8g_GëWidth
(
Ãc_u8g
)-35, 
	`u8g_GëHeight
÷rc_u8g)-8*(
i
+1), 
f⁄t_5x7
, 
	`cu_GëHÆfMoveSå
(
Ãc_obj
.
chm_pos
-
íåõs
+i));

2229 
	`u8g_DøwSå
(
Ãc_u8g
, 
	`u8g_GëWidth
÷rc_u8g)-35, 8*(
i
+1), 
	`cu_GëHÆfMoveSå
(
Ãc_obj
.
chm_pos
-
íåõs
+i));

2236 i‡–
chess_°©e
 =
CHESS_STATE_SELECT_PIECE
 )

2237 
	`mnu_DøwHome
(
chess_sour˚_pos
 == 255);

2238 i‡–
chess_°©e
 =
CHESS_STATE_SELECT_TARGET_POS
 )

2239 
	`mnu_DøwHome
(
chess_èrgë_pos
 == 255);

2241 
	`mnu_DøwHome
(0);

2243 i‡–
chess_°©e
 =
CHESS_STATE_GAME_END
 )

2245  
Ãc_obj
.
lo°_side_cﬁ‹
 )

2247 
COLOR_WHITE
:

2248 
	`mnu_DøwE¡ry
(
	`u8g_GëHeight
(
Ãc_u8g
) / 2-2, "Black wins", 1, 1);

2250 
COLOR_BLACK
:

2251 
	`mnu_DøwE¡ry
(
	`u8g_GëHeight
(
Ãc_u8g
) / 2-2, "White wins", 1, 1);

2254 
	`mnu_DøwE¡ry
(
	`u8g_GëHeight
(
Ãc_u8g
) / 2-2, "Stalemate", 1, 1);

2259 
	}
}

2262 
	$chess_Sãp
(
uöt8_t
 
keycode
)

2264 i‡–
keycode
 =
CHESS_KEY_NONE
 )

2266 
chess_key_cmd
 = 
chess_key_code
;

2267 
chess_key_code
 = 
CHESS_KEY_NONE
;

2271 
chess_key_cmd
 = 
CHESS_KEY_NONE
;

2272 
chess_key_code
 = 
keycode
;

2275 
chess_°©e
)

2277 
CHESS_STATE_MENU
:

2278 
	`mnu_Sãp
(
chess_key_cmd
);

2279 i‡–
chess_key_cmd
 =
CHESS_KEY_SELECT
 )

2281 i‡–
mnu_pos
 == 0 )

2283 
	`chess_SëupBﬂrd
();

2284 
Ãc_obj
.
‹õ¡©i⁄
 = 0;

2285 
chess_°©e
 = 
CHESS_STATE_SELECT_START
;

2287 i‡–
mnu_pos
 == 1 )

2289 
	`chess_SëupBﬂrd
();

2290 
Ãc_obj
.
‹õ¡©i⁄
 = 1;

2291 
chess_°©e
 = 
CHESS_STATE_THINKING
;

2293 i‡–
mnu_pos
 == 2 )

2295 i‡–
Ãc_obj
.
∂y_cou¡
 >= 2 )

2297 
	`cu_UndoHÆfMove
();

2298 
	`cu_UndoHÆfMove
();

2299 
Ãc_obj
.
∂y_cou¡
-=2;

2300 i‡–
Ãc_obj
.
∂y_cou¡
 == 0 )

2301 
mnu_pos
 = 0;

2303 
chess_°©e
 = 
CHESS_STATE_SELECT_START
;

2305 i‡–
mnu_pos
 == 3 )

2307 
chess_°©e
 = 
CHESS_STATE_SELECT_START
;

2311 
CHESS_STATE_SELECT_START
:

2312 
	`chess_CÀ¨M¨ks
();

2313 
	`chess_M¨kMovabÀ
();

2314 
chess_sour˚_pos
 = 
	`chess_GëNextM¨ked
(255, 0);

2315 
chess_èrgë_pos
 = 
ILLEGAL_POSITION
;

2316 
chess_°©e
 = 
CHESS_STATE_SELECT_PIECE
;

2319 
CHESS_STATE_SELECT_PIECE
:

2320 i‡–
chess_key_cmd
 =
CHESS_KEY_NEXT
 )

2322 
chess_sour˚_pos
 = 
	`chess_GëNextM¨ked
(chess_source_pos, 0);

2324 i‡–
chess_key_cmd
 =
CHESS_KEY_PREV
 )

2326 
chess_sour˚_pos
 = 
	`chess_GëNextM¨ked
(chess_source_pos, 1);

2328 i‡–
chess_key_cmd
 =
CHESS_KEY_SELECT
 )

2330 i‡–
chess_sour˚_pos
 == 255 )

2332 
chess_°©e
 = 
CHESS_STATE_MENU
;

2336 
	`chess_CÀ¨M¨ks
();

2337 
	`chess_M¨kT¨gëMoves
(
chess_sour˚_pos
);

2338 
chess_èrgë_pos
 = 
	`chess_GëNextM¨ked
(255, 0);

2339 
chess_°©e
 = 
CHESS_STATE_SELECT_TARGET_POS
;

2343 
CHESS_STATE_SELECT_TARGET_POS
:

2344 i‡–
chess_key_cmd
 =
CHESS_KEY_NEXT
 )

2346 
chess_èrgë_pos
 = 
	`chess_GëNextM¨ked
(chess_target_pos, 0);

2348 i‡–
chess_key_cmd
 =
CHESS_KEY_PREV
 )

2350 
chess_èrgë_pos
 = 
	`chess_GëNextM¨ked
(chess_target_pos, 1);

2352 i‡–
chess_key_cmd
 =
CHESS_KEY_BACK
 )

2354 
	`chess_CÀ¨M¨ks
();

2355 
	`chess_M¨kMovabÀ
();

2356 
chess_èrgë_pos
 = 
ILLEGAL_POSITION
;

2357 
chess_°©e
 = 
CHESS_STATE_SELECT_PIECE
;

2359 i‡–
chess_key_cmd
 =
CHESS_KEY_SELECT
 )

2361 
	`chess_M™uÆMove
(
chess_sour˚_pos
, 
chess_èrgë_pos
);

2362 i‡–
Ãc_obj
.
is_game_íd
 != 0 )

2363 
chess_°©e
 = 
CHESS_STATE_GAME_END
;

2365 
chess_°©e
 = 
CHESS_STATE_THINKING
;

2367 
chess_sour˚_pos
 = 
ILLEGAL_POSITION
;

2368 
chess_èrgë_pos
 = 
ILLEGAL_POSITION
;

2369 
	`chess_CÀ¨M¨ks
();

2372 
CHESS_STATE_THINKING
:

2373 
	`chess_CompuãrMove
(2);

2374 i‡–
Ãc_obj
.
is_game_íd
 != 0 )

2375 
chess_°©e
 = 
CHESS_STATE_GAME_END
;

2377 
chess_°©e
 = 
CHESS_STATE_SELECT_START
;

2379 
CHESS_STATE_GAME_END
:

2380 i‡–
chess_key_cmd
 !
CHESS_KEY_NONE
 )

2382 
chess_°©e
 = 
CHESS_STATE_MENU
;

2383 
	`chess_SëupBﬂrd
();

2388 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g.h

36 #i‚de‡
_U8G_H


37 
	#_U8G_H


	)

41 
	~<°ddef.h
>

43 #ifde‡
__18CXX


44 
	tuöt8_t
;

45 sig√d 
	töt8_t
;

46 
	tuöt16_t
;

47 sig√d 
	töt16_t
;

49 
	~<°döt.h
>

52 #i‡
deföed
(
__AVR__
)

53 
	~<avr/pgm•a˚.h
>

56 #ifde‡
__˝lu•lus


62 #ifde‡
__GNUC__


63 
	#U8G_NOINLINE
 
	`__©åibuã__
((
noölöe
))

	)

64 
	#U8G_PURE
 
	`__©åibuã__
 ((
puª
))

	)

65 
	#U8G_NOCOMMON
 
	`__©åibuã__
 ((
nocomm⁄
))

	)

66 
	#U8G_SECTION
(
«me
Ë
	`__©åibuã__
 ((
	`£˘i⁄
 («me)))

	)

68 
	#U8G_NOINLINE


	)

69 
	#U8G_PURE


	)

70 
	#U8G_NOCOMMON


	)

71 
	#U8G_SECTION
(
«me
)

	)

77 #i‡
deföed
(
__AVR__
)

79 
	#U8G_PROGMEM
 
	`U8G_SECTION
(".¥ogmem.d©a")

	)

80 
uöt8_t
 
	tPROGMEM
 
	tu8g_pgm_uöt8_t
;

81 
uöt8_t
 
	tu8g_‚çgm_uöt8_t
;

82 
	#u8g_pgm_ªad
(
adr
Ë
	`pgm_ªad_byã_√¨
◊dr)

	)

83 
	#U8G_PSTR
(
s
Ë((
u8g_pgm_uöt8_t
 *)
	`PSTR
(s))

	)

85 
	#U8G_PROGMEM


	)

86 
	#PROGMEM


	)

87 
uöt8_t
 
	tu8g_pgm_uöt8_t
;

88 
uöt8_t
 
	tu8g_‚çgm_uöt8_t
;

89 
	#u8g_pgm_ªad
(
adr
Ë(*(c⁄° 
u8g_pgm_uöt8_t
 *)◊dr))

	)

90 
	#U8G_PSTR
(
s
Ë((
u8g_pgm_uöt8_t
 *)(s))

	)

95 
_u8g_t
 
	tu8g_t
;

96 
_u8g_dev_t
 
	tu8g_dev_t
;

98 
_u8g_dev_¨g_pixñ_t
 
	tu8g_dev_¨g_pixñ_t
;

99 
_u8g_dev_¨g_bbx_t
 
	tu8g_dev_¨g_bbx_t
;

100 
_u8g_box_t
 
	tu8g_box_t
;

105 #i‡
deföed
(
U8G_16BIT
)

106 
uöt16_t
 
	tu8g_uöt_t
;

107 
öt16_t
 
	tu8g_öt_t
;

109 
uöt8_t
 
	tu8g_uöt_t
;

110 
öt8_t
 
	tu8g_öt_t
;

113 #ifde‡
OBSOLETE


114 
	s_u8g_box_t


116 
u8g_uöt_t
 
x0
, 
y0
, 
x1
, 
y1
;

118 
_u8g_box_t
 
	tu8g_box_t
;

125 #ifde‡
__XC8


127 
uöt8_t
 (*
	tu8g_dev_‚±r
)(*
	tu8g
, *
	tdev
, 
	tuöt8_t
 
	tmsg
, *
	t¨g
);

130 
uöt8_t
 (*
	tu8g_com_‚±r
)(*
	tu8g
, 
	tuöt8_t
 
	tmsg
, uöt8_à
	t¨g_vÆ
, *
	t¨g_±r
);

133 
uöt8_t
 (*
	tu8g_dev_‚±r
)(
	tu8g_t
 *
	tu8g
, 
	tu8g_dev_t
 *
	tdev
, 
	tuöt8_t
 
	tmsg
, *
	t¨g
);

136 
uöt8_t
 (*
	tu8g_com_‚±r
)(
	tu8g_t
 *
	tu8g
, 
	tuöt8_t
 
	tmsg
, uöt8_à
	t¨g_vÆ
, *
	t¨g_±r
);

141 
	s_u8g_dev_t


143 
u8g_dev_‚±r
 
dev_‚
;

144 *
dev_mem
;

145 
u8g_com_‚±r
 
com_‚
;

153 
u8g_dev_t
 
u8g_dev_sdl_1bô
;

154 
u8g_dev_t
 
u8g_dev_sdl_1bô_h
;

155 
u8g_dev_t
 
u8g_dev_sdl_2bô
;

156 
u8g_dev_t
 
u8g_dev_sdl_2bô_doubÀ_mem
;

157 
u8g_dev_t
 
u8g_dev_sdl_8bô
;

158 
u8g_sdl_gë_key
();

161 
u8g_dev_t
 
u8g_dev_°dout
;

164 
u8g_dev_t
 
u8g_dev_pbm
;

165 
u8g_dev_t
 
u8g_dev_pbm_8h1
;

166 
u8g_dev_t
 
u8g_dev_pbm_8h2
;

169 
u8g_dev_t
 
u8g_dev_g¥of
;

172 
u8g_dev_t
 
u8g_dev_uc1701_dogs102_sw_•i
;

173 
u8g_dev_t
 
u8g_dev_uc1701_dogs102_hw_•i
;

176 
u8g_dev_t
 
u8g_dev_uc1701_möi12864_sw_•i
;

177 
u8g_dev_t
 
u8g_dev_uc1701_möi12864_hw_•i
;

180 
u8g_dev_t
 
u8g_dev_°7565_dogm132_sw_•i
;

181 
u8g_dev_t
 
u8g_dev_°7565_dogm132_hw_•i
;

184 
u8g_dev_t
 
u8g_dev_°7565_dogm128_sw_•i
;

185 
u8g_dev_t
 
u8g_dev_°7565_dogm128_hw_•i
;

187 
u8g_dev_t
 
u8g_dev_°7565_lm6063_sw_•i
;

188 
u8g_dev_t
 
u8g_dev_°7565_lm6063_hw_•i
;

190 
u8g_dev_t
 
u8g_dev_°7565_lm6059_sw_•i
;

191 
u8g_dev_t
 
u8g_dev_°7565_lm6059_hw_•i
;

193 
u8g_dev_t
 
u8g_dev_°7565_nhd_c12864_sw_•i
;

194 
u8g_dev_t
 
u8g_dev_°7565_nhd_c12864_hw_•i
;

196 
u8g_dev_t
 
u8g_dev_°7565_nhd_c12832_sw_•i
;

197 
u8g_dev_t
 
u8g_dev_°7565_nhd_c12832_hw_•i
;

198 
u8g_dev_t
 
u8g_dev_°7565_nhd_c12832_∑øŒñ
;

200 
u8g_dev_t
 
u8g_dev_°7565_64128n_sw_•i
;

201 
u8g_dev_t
 
u8g_dev_°7565_64128n_hw_•i
;

204 
u8g_dev_t
 
u8g_dev_°7920_128x64_sw_•i
;

205 
u8g_dev_t
 
u8g_dev_°7920_128x64_hw_•i
;

206 
u8g_dev_t
 
u8g_dev_°7920_128x64_8bô
;

208 
u8g_dev_t
 
u8g_dev_°7920_128x64_4x_sw_•i
;

209 
u8g_dev_t
 
u8g_dev_°7920_128x64_4x_hw_•i
;

210 
u8g_dev_t
 
u8g_dev_°7920_128x64_4x_8bô
;

213 
u8g_dev_t
 
u8g_dev_°7920_192x32_sw_•i
;

214 
u8g_dev_t
 
u8g_dev_°7920_192x32_hw_•i
;

215 
u8g_dev_t
 
u8g_dev_°7920_192x32_8bô
;

217 
u8g_dev_t
 
u8g_dev_°7920_192x32_4x_sw_•i
;

218 
u8g_dev_t
 
u8g_dev_°7920_192x32_4x_hw_•i
;

219 
u8g_dev_t
 
u8g_dev_°7920_192x32_4x_8bô
;

222 
u8g_dev_t
 
u8g_dev_°7920_202x32_sw_•i
;

223 
u8g_dev_t
 
u8g_dev_°7920_202x32_hw_•i
;

224 
u8g_dev_t
 
u8g_dev_°7920_202x32_8bô
;

226 
u8g_dev_t
 
u8g_dev_°7920_202x32_4x_sw_•i
;

227 
u8g_dev_t
 
u8g_dev_°7920_202x32_4x_hw_•i
;

228 
u8g_dev_t
 
u8g_dev_°7920_202x32_4x_8bô
;

231 
u8g_dev_t
 
u8g_dev_lc7981_160x80_8bô
;

233 
u8g_dev_t
 
u8g_dev_lc7981_240x64_8bô
;

235 
u8g_dev_t
 
u8g_dev_lc7981_240x128_8bô
;

237 
u8g_dev_t
 
u8g_dev_lc7981_320x64_8bô
;

240 
u8g_dev_t
 
u8g_dev_t6963_240x128_8bô
;

241 
u8g_dev_t
 
u8g_dev_t6963_240x64_8bô
;

242 
u8g_dev_t
 
u8g_dev_t6963_128x64_8bô
;

245 
u8g_dev_t
 
u8g_dev_uc1610_dogxl160_bw_sw_•i
;

246 
u8g_dev_t
 
u8g_dev_uc1610_dogxl160_bw_hw_•i
;

247 
u8g_dev_t
 
u8g_dev_uc1610_dogxl160_gr_sw_•i
;

248 
u8g_dev_t
 
u8g_dev_uc1610_dogxl160_gr_hw_•i
;

250 
u8g_dev_t
 
u8g_dev_uc1610_dogxl160_2x_bw_sw_•i
;

251 
u8g_dev_t
 
u8g_dev_uc1610_dogxl160_2x_bw_hw_•i
;

252 
u8g_dev_t
 
u8g_dev_uc1610_dogxl160_2x_gr_sw_•i
;

253 
u8g_dev_t
 
u8g_dev_uc1610_dogxl160_2x_gr_hw_•i
;

256 
u8g_dev_t
 
u8g_dev_ks0108_128x64
;

257 
u8g_dev_t
 
u8g_dev_ks0108_128x64_Á°
;

260 
u8g_dev_t
 
u8g_dev_pcd8544_84x48_sw_•i
;

261 
u8g_dev_t
 
u8g_dev_és8204_84x48_sw_•i
;

264 
u8g_dev_t
 
u8g_dev_pcf8812_96x65_sw_•i
;

267 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_bw_sw_•i
;

268 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_bw_hw_•i
;

269 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_bw_∑øŒñ
;

270 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_gr_sw_•i
;

271 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_gr_hw_•i
;

273 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_sw_•i
;

274 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_hw_•i
;

275 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_∑øŒñ
;

276 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_2x_gr_sw_•i
;

277 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_2x_gr_hw_•i
;

280 
u8g_dev_t
 
u8g_dev_ssd1327_96x96_gr_sw_•i
;

281 
u8g_dev_t
 
u8g_dev_ssd1327_96x96_gr_hw_•i
;

282 
u8g_dev_t
 
u8g_dev_ssd1327_96x96_gr_i2c
;

284 
u8g_dev_t
 
u8g_dev_ssd1327_96x96_2x_gr_sw_•i
;

285 
u8g_dev_t
 
u8g_dev_ssd1327_96x96_2x_gr_hw_•i
;

286 
u8g_dev_t
 
u8g_dev_ssd1327_96x96_2x_gr_i2c
;

289 
u8g_dev_t
 
u8g_dev_ssd1322_nhd31ﬁed_bw_sw_•i
;

290 
u8g_dev_t
 
u8g_dev_ssd1322_nhd31ﬁed_bw_hw_•i
;

291 
u8g_dev_t
 
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_sw_•i
;

292 
u8g_dev_t
 
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_hw_•i
;

294 
u8g_dev_t
 
u8g_dev_ssd1322_nhd31ﬁed_gr_sw_•i
;

295 
u8g_dev_t
 
u8g_dev_ssd1322_nhd31ﬁed_gr_hw_•i
;

296 
u8g_dev_t
 
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_sw_•i
;

297 
u8g_dev_t
 
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_hw_•i
;

300 
u8g_dev_t
 
u8g_dev_ssd1306_128x64_sw_•i
;

301 
u8g_dev_t
 
u8g_dev_ssd1306_128x64_hw_•i
;

302 
u8g_dev_t
 
u8g_dev_ssd1306_128x64_i2c
;

305 
u8g_dev_t
 
u8g_dev_ssd1309_128x64_sw_•i
;

306 
u8g_dev_t
 
u8g_dev_ssd1309_128x64_hw_•i
;

307 
u8g_dev_t
 
u8g_dev_ssd1309_128x64_i2c
;

310 
u8g_dev_t
 
u8g_dev_ssd1306_128x32_sw_•i
;

311 
u8g_dev_t
 
u8g_dev_ssd1306_128x32_hw_•i
;

312 
u8g_dev_t
 
u8g_dev_ssd1306_128x32_i2c
;

315 
u8g_dev_t
 
u8g_dev_°7687_c144mvgd_sw_•i
;

316 
u8g_dev_t
 
u8g_dev_°7687_c144mvgd_8bô
;

319 
u8g_dev_t
 
u8g_dev_sbn1661_122x32
;

322 
u8g_dev_t
 
u8g_dev_Êùdisc_2x7
;

323 
u8g_SëFlùDiscCÆlback
(
u8g_t
 *
u8g
, (*
cb
)(
uöt8_t
 
id
, uöt8_à
∑ge
, uöt8_à
width
, uöt8_à*
row1
, uöt8_à*
row2
));

326 
u8g_dev_t
 
u8g_dev_ûi9325d_320x240_8bô
;

329 
u8g_dev_t
 
u8g_dev_vs
;

335 
	s_u8g_dev_¨g_pixñ_t


337 
u8g_uöt_t
 
	gx
, 
	gy
;

338 
uöt8_t
 
	gpixñ
;

339 
uöt8_t
 
	gdú
;

340 
uöt8_t
 
	gcﬁ‹
;

344 
	s_u8g_dev_¨g_bbx_t


346 
u8g_uöt_t
 
	gx
, 
	gy
, 
	gw
, 
	gh
;

350 
	s_u8g_box_t


352 
u8g_uöt_t
 
	gx0
, 
	gy0
, 
	gx1
, 
	gy1
;

357 
	#U8G_DEV_MSG_INIT
 10

	)

358 
	#U8G_DEV_MSG_STOP
 11

	)

361 
	#U8G_DEV_MSG_CONTRAST
 15

	)

363 
	#U8G_DEV_MSG_SLEEP_ON
 16

	)

364 
	#U8G_DEV_MSG_SLEEP_OFF
 17

	)

366 
	#U8G_DEV_MSG_PAGE_FIRST
 20

	)

367 
	#U8G_DEV_MSG_PAGE_NEXT
 21

	)

374 
	#U8G_DEV_MSG_GET_PAGE_BOX
 23

	)

382 
	#U8G_DEV_MSG_SET_PIXEL
 50

	)

383 
	#U8G_DEV_MSG_SET_8PIXEL
 59

	)

385 
	#U8G_DEV_MSG_SET_COLOR_INDEX
 60

	)

387 
	#U8G_DEV_MSG_SET_XY_CB
 61

	)

389 
	#U8G_DEV_MSG_GET_WIDTH
 70

	)

390 
	#U8G_DEV_MSG_GET_HEIGHT
 71

	)

391 
	#U8G_DEV_MSG_GET_MODE
 72

	)

395 
	#U8G_MODE
(
is_cﬁ‹
, 
bôs_≥r_pixñ
Ë(((is_cﬁ‹)<<4)|(bôs_≥r_pixñ))

	)

397 
	#U8G_MODE_UNKNOWN
 0

	)

398 
	#U8G_MODE_BW
 
	`U8G_MODE
(0, 1)

	)

399 
	#U8G_MODE_GRAY2BIT
 
	`U8G_MODE
(0, 2)

	)

400 
	#U8G_MODE_R3G3B2
 
	`U8G_MODE
(1, 8)

	)

402 
	#U8G_MODE_GET_BITS_PER_PIXEL
(
mode
Ë((mode)&15)

	)

403 
	#U8G_MODE_IS_COLOR
(
mode
Ë(((mode)&16)==0?0:1)

	)

414 
	#U8G_COM_MSG_STOP
 0

	)

415 
	#U8G_COM_MSG_INIT
 1

	)

417 
	#U8G_COM_MSG_ADDRESS
 2

	)

420 
	#U8G_COM_MSG_CHIP_SELECT
 3

	)

422 
	#U8G_COM_MSG_RESET
 4

	)

424 
	#U8G_COM_MSG_WRITE_BYTE
 5

	)

425 
	#U8G_COM_MSG_WRITE_SEQ
 6

	)

426 
	#U8G_COM_MSG_WRITE_SEQ_P
 7

	)

430 
uöt8_t
 
u8g_com_nuŒ_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

431 
uöt8_t
 
u8g_com_¨duöo_°d_sw_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

432 
uöt8_t
 
u8g_com_¨duöo_sw_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

433 
uöt8_t
 
u8g_com_¨duöo_hw_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

434 
uöt8_t
 
u8g_com_¨duöo_°7920_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

435 
uöt8_t
 
u8g_com_¨duöo_°7920_hw_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

436 
uöt8_t
 
u8g_com_¨duöo_∑øŒñ_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

437 
uöt8_t
 
u8g_com_¨duöo_Á°_∑øŒñ_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

438 
uöt8_t
 
u8g_com_¨duöo_p‹t_d_wr_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

439 
uöt8_t
 
u8g_com_¨duöo_no_í_∑øŒñ_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

440 
uöt8_t
 
u8g_com_¨duöo_ssd_i2c_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

441 
uöt8_t
 
u8g_com_¨duöo_t6963_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

444 
uöt8_t
 
u8g_com_©mega_hw_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

445 
uöt8_t
 
u8g_com_©mega_sw_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

446 
uöt8_t
 
u8g_com_©mega_°7920_sw_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

447 
uöt8_t
 
u8g_com_©mega_°7920_hw_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

448 
uöt8_t
 
u8g_com_©mega_∑øŒñ_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

465 #i‡
deföed
(
ARDUINO
)

466 #i‡
deföed
(
__AVR__
)

467 
	#U8G_COM_HW_SPI
 
u8g_com_¨duöo_hw_•i_‚


	)

468 
	#U8G_COM_ST7920_HW_SPI
 
u8g_com_¨duöo_°7920_hw_•i_‚


	)

469 #ñi‡
deföed
(
__18CXX
Ë|| deföed(
__PIC32MX
)

470 
	#U8G_COM_HW_SPI
 
u8g_com_nuŒ_‚


	)

471 
	#U8G_COM_ST7920_HW_SPI
 
u8g_com_nuŒ_‚


	)

475 #i‚de‡
U8G_COM_HW_SPI


476 #i‡
deföed
(
__AVR__
)

477 
	#U8G_COM_HW_SPI
 
u8g_com_©mega_hw_•i_‚


	)

478 
	#U8G_COM_ST7920_HW_SPI
 
u8g_com_©mega_°7920_hw_•i_‚


	)

481 #i‚de‡
U8G_COM_HW_SPI


482 
	#U8G_COM_HW_SPI
 
u8g_com_nuŒ_‚


	)

483 
	#U8G_COM_ST7920_HW_SPI
 
u8g_com_nuŒ_‚


	)

487 #i‡
deföed
(
ARDUINO
)

488 #i‡
deföed
(
__AVR__
)

489 
	#U8G_COM_SW_SPI
 
u8g_com_¨duöo_sw_•i_‚


	)

490 
	#U8G_COM_ST7920_SW_SPI
 
u8g_com_¨duöo_°7920_•i_‚


	)

491 #ñi‡
deföed
(
__18CXX
Ë|| deföed(
__PIC32MX
)

492 
	#U8G_COM_SW_SPI
 
u8g_com_¨duöo_sw_•i_‚


	)

493 
	#U8G_COM_ST7920_SW_SPI
 
u8g_com_¨duöo_°7920_•i_‚


	)

494 #ñi‡
deföed
(
__¨m__
)

495 
	#U8G_COM_SW_SPI
 
u8g_com_¨duöo_°d_sw_•i_‚


	)

496 
	#U8G_COM_ST7920_SW_SPI
 
u8g_com_¨duöo_°7920_•i_‚


	)

500 #i‚de‡
U8G_COM_SW_SPI


502 #i‡
deföed
(
__AVR__
)

503 
	#U8G_COM_SW_SPI
 
u8g_com_©mega_sw_•i_‚


	)

504 
	#U8G_COM_ST7920_SW_SPI
 
u8g_com_©mega_°7920_sw_•i_‚


	)

507 #i‚de‡
U8G_COM_SW_SPI


508 
	#U8G_COM_SW_SPI
 
u8g_com_nuŒ_‚


	)

509 
	#U8G_COM_ST7920_SW_SPI
 
u8g_com_nuŒ_‚


	)

513 #i‡
deföed
(
ARDUINO
)

514 #i‡
deföed
(
__AVR__
)

515 
	#U8G_COM_PARALLEL
 
u8g_com_¨duöo_∑øŒñ_‚


	)

516 
	#U8G_COM_FAST_PARALLEL
 
u8g_com_¨duöo_Á°_∑øŒñ_‚


	)

517 
	#U8G_COM_T6963
 
u8g_com_¨duöo_t6963_‚


	)

519 
	#U8G_COM_PARALLEL
 
u8g_com_¨duöo_∑øŒñ_‚


	)

520 
	#U8G_COM_FAST_PARALLEL
 
u8g_com_¨duöo_∑øŒñ_‚


	)

521 
	#U8G_COM_T6963
 
u8g_com_nuŒ_‚


	)

524 #i‚de‡
U8G_COM_PARALLEL


525 #i‡
deföed
(
__AVR__
)

526 
	#U8G_COM_PARALLEL
 
u8g_com_©mega_∑øŒñ_‚


	)

527 
	#U8G_COM_FAST_PARALLEL
 
u8g_com_©mega_∑øŒñ_‚


	)

528 
	#U8G_COM_T6963
 
u8g_com_nuŒ_‚


	)

531 #i‚de‡
U8G_COM_PARALLEL


532 
	#U8G_COM_PARALLEL
 
u8g_com_nuŒ_‚


	)

533 
	#U8G_COM_FAST_PARALLEL
 
u8g_com_nuŒ_‚


	)

534 
	#U8G_COM_T6963
 
u8g_com_nuŒ_‚


	)

537 #i‡
deföed
(
ARDUINO
)

538 #i‡
deföed
(
__AVR__
)

539 
	#U8G_COM_SSD_I2C
 
u8g_com_¨duöo_ssd_i2c_‚


	)

543 #i‚de‡
U8G_COM_SSD_I2C


544 #i‡
deföed
(
__AVR__
)

546 
	#U8G_COM_SSD_I2C
 
u8g_com_¨duöo_ssd_i2c_‚


	)

549 #i‚de‡
U8G_COM_SSD_I2C


550 
	#U8G_COM_SSD_I2C
 
u8g_com_nuŒ_‚


	)

557 
uöt8_t
 
u8g_InôCom
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

558 
u8g_St›Com
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

559 
u8g_E«bÀCom
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

560 
u8g_DißbÀCom
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

561 
u8g_SëChùSñe˘
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
cs
);

562 
u8g_SëRe£tLow
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

563 
u8g_SëRe£tHigh
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

564 
u8g_SëAddªss
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
addªss
);

565 
uöt8_t
 
u8g_WrôeByã
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
vÆ
);

566 
uöt8_t
 
u8g_WrôeSequí˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
˙t
, uöt8_à*
£q
);

567 
uöt8_t
 
u8g_WrôeSequí˚P
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
˙t
, c⁄° uöt8_à*
£q
);

571 
	#U8G_ESC_DLY
(
x
Ë255, ((xË& 0x7f)

	)

572 
	#U8G_ESC_CS
(
x
Ë255, (0xd0 | ((x)&0x0f))

	)

573 
	#U8G_ESC_ADR
(
x
Ë255, (0xe0 | ((x)&0x0f))

	)

574 
	#U8G_ESC_RST
(
x
Ë255, (0xc0 | ((x)&0x0f))

	)

575 
	#U8G_ESC_VCC
(
x
Ë255, (0xbê| ((x)&0x01))

	)

576 
	#U8G_ESC_END
 255, 254

	)

577 
	#U8G_ESC_255
 255, 255

	)

579 
uöt8_t
 
u8g_WrôeEscSeqP
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, c⁄° uöt8_à*
esc_£q
);

583 
uöt8_t
 
u8g_WrôeByãBWTo16GrDevi˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
b
);

584 
uöt8_t
 
u8g_WrôeSequí˚BWTo16GrDevi˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
˙t
, uöt8_à*
±r
);

585 
uöt8_t
 
u8g_WrôeByã4LTo16GrDevi˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
b
);

586 
uöt8_t
 
u8g_WrôeSequí˚4LTo16GrDevi˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
˙t
, uöt8_à*
±r
);

591 
u8g_com_¨duöo_digôÆ_wrôe
(
u8g_t
 *
u8g
, 
uöt8_t
 
pö_ödex
, uöt8_à
vÆue
);

592 
u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g_t
 *
u8g
);

598 
uöt8_t
 
u8g_Pö
(uöt8_à
p‹t
, uöt8_à
bôpos
);

599 
	#PN
(
p‹t
,
bôpos
Ë
	`u8g_Pö
’‹t,bôpos)

	)

602 
u8g_SëPöOuçut
(
uöt8_t
 
öã∫Æ_pö_numbî
);

603 
u8g_SëPöLevñ
(
uöt8_t
 
öã∫Æ_pö_numbî
, uöt8_à
Àvñ
);

604 
u8g_SëPöI≈ut
(
uöt8_t
 
öã∫Æ_pö_numbî
);

605 
uöt8_t
 
u8g_GëPöLevñ
(uöt8_à
öã∫Æ_pö_numbî
);

608 
u8g_SëPIOuçut
(
u8g_t
 *
u8g
, 
uöt8_t
 
pi
);

609 
u8g_SëPILevñ
(
u8g_t
 *
u8g
, 
uöt8_t
 
pi
, uöt8_à
Àvñ
);

614 
	s_u8g_∑ge_t


616 
u8g_uöt_t
 
	g∑ge_height
;

617 
u8g_uöt_t
 
	gtŸÆ_height
;

618 
u8g_uöt_t
 
	g∑ge_y0
;

619 
u8g_uöt_t
 
	g∑ge_y1
;

620 
uöt8_t
 
	g∑ge
;

622 
_u8g_∑ge_t
 
	tu8g_∑ge_t
;

624 
u8g_∑ge_Fú°
(
u8g_∑ge_t
 *
p
Ë
	gU8G_NOINLINE
;

625 
u8g_∑ge_Inô
(
u8g_∑ge_t
 *
p
, 
u8g_uöt_t
 
∑ge_height
, u8g_uöt_à
tŸÆ_height
 ) 
	gU8G_NOINLINE
;

626 
uöt8_t
 
u8g_∑ge_Next
(
u8g_∑ge_t
 *
p
Ë
	gU8G_NOINLINE
;

631 
	s_u8g_pb_t


633 
u8g_∑ge_t
 
	gp
;

634 
u8g_uöt_t
 
	gwidth
;

635 *
	gbuf
;

637 
_u8g_pb_t
 
	tu8g_pb_t
;

641 
u8g_pb_CÀ¨
(
u8g_pb_t
 *
b
);

642 
uöt8_t
 
u8g_pb_IsYI¡î£˘i⁄
(
u8g_pb_t
 *
pb
, 
u8g_uöt_t
 
v0
, u8g_uöt_à
v1
);

643 
uöt8_t
 
u8g_pb_IsXI¡î£˘i⁄
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
v0
, u8g_uöt_à
v1
);

644 
uöt8_t
 
u8g_pb_IsI¡î£˘i⁄
(
u8g_pb_t
 *
pb
, 
u8g_dev_¨g_bbx_t
 *
bbx
);

645 
u8g_pb_GëPageBox
(
u8g_pb_t
 *
pb
, 
u8g_box_t
 *
box
);

646 
uöt8_t
 
u8g_pb_Is8PixñVisibÀ
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
);

647 
uöt8_t
 
u8g_pb_WrôeBuf„r
(
u8g_pb_t
 *
b
, 
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

662 
	#U8G_PB_DEV
(
«me
, 
width
, 
height
, 
∑ge_height
, 
dev_‚
, 
com_‚
) \

663 
uöt8_t
 
«me
##
_buf
[
width
] 
U8G_NOCOMMON
 ; \

664 
u8g_pb_t
 
«me
##
_pb
 = { {
∑ge_height
, 
height
, 0, 0, 0}, 
width
,Çame##
_buf
}; \

665 
u8g_dev_t
 
«me
 = { 
dev_‚
, &«me##
_pb
, 
com_‚
 }

	)

668 
u8g_pb8v1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
Ë
	gU8G_NOINLINE
;

669 
u8g_pb8v1_CÀ¨
(
u8g_pb_t
 *
b
Ë
	gU8G_NOINLINE
;

671 
uöt8_t
 
u8g_pb8v1_IsYI¡î£˘i⁄
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
v0
, u8g_uöt_à
v1
);

672 
uöt8_t
 
u8g_pb8v1_IsXI¡î£˘i⁄
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
v0
, u8g_uöt_à
v1
);

673 
uöt8_t
 
u8g_pb8v1_WrôeBuf„r
(
u8g_pb_t
 *
b
, 
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

675 
uöt8_t
 
u8g_dev_pb8v1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

678 
uöt8_t
 
u8g_dev_pb16v1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

681 
uöt8_t
 
u8g_dev_pb14v1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

684 
uöt8_t
 
u8g_dev_pb8v2_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

687 
uöt8_t
 
u8g_dev_pb16v2_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

691 
uöt8_t
 
u8g_dev_pb8h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

694 
uöt8_t
 
u8g_dev_pb16h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

697 
uöt8_t
 
u8g_dev_pb32h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

701 
uöt8_t
 
u8g_dev_pb8h2_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

704 
uöt8_t
 
u8g_dev_pb16h2_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

709 
uöt8_t
 
u8g_dev_pb8h1f_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

712 
uöt8_t
 
u8g_dev_pb8h8_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

720 (*
	gu8g_døw_curs‹_‚
)(
	tu8g_t
 *
	tu8g
);

723 
u8g_uöt_t
 (*
	tu8g_f⁄t_ˇlc_vªf_‚±r
)(
	tu8g_t
 *
	tu8g
);

726 (*
	gu8g_°©e_cb
)(
	tuöt8_t
 
	tmsg
);

732 
	#U8G_PI_RESET
 0

	)

735 
	#U8G_PI_A0
 1

	)

736 
	#U8G_PI_DI
 1

	)

739 
	#U8G_PI_CS
 2

	)

740 
	#U8G_PI_CS1
 2

	)

741 
	#U8G_PI_CS2
 3

	)

743 
	#U8G_PI_A0_STATE
 3

	)

746 
	#U8G_PI_EN
 4

	)

747 
	#U8G_PI_CS_STATE
 4

	)

748 
	#U8G_PI_SCK
 4

	)

749 
	#U8G_PI_SCL
 4

	)

750 
	#U8G_PI_RD
 4

	)

754 
	#U8G_PI_D0
 5

	)

755 
	#U8G_PI_MOSI
 5

	)

756 
	#U8G_PI_SDA
 5

	)

757 
	#U8G_PI_D1
 6

	)

758 
	#U8G_PI_MISO
 6

	)

759 
	#U8G_PI_D2
 7

	)

760 
	#U8G_PI_D3
 8

	)

761 
	#U8G_PI_SET_A0
 8

	)

762 
	#U8G_PI_D4
 9

	)

763 
	#U8G_PI_D5
 10

	)

764 
	#U8G_PI_I2C_OPTION
 11

	)

765 
	#U8G_PI_D6
 11

	)

766 
	#U8G_PI_D7
 12

	)

769 
	#U8G_PI_WR
 13

	)

770 
	#U8G_PI_RW
 13

	)

772 
	#U8G_PIN_LIST_LEN
 14

	)

775 
	#U8G_PIN_NONE
 255

	)

777 
	#U8G_FONT_HEIGHT_MODE_TEXT
 0

	)

778 
	#U8G_FONT_HEIGHT_MODE_XTEXT
 1

	)

779 
	#U8G_FONT_HEIGHT_MODE_ALL
 2

	)

781 
	s_u8g_t


783 
u8g_uöt_t
 
	gwidth
;

784 
u8g_uöt_t
 
	gheight
;

787 
u8g_dev_t
 *
	gdev
;

788 c⁄° 
u8g_pgm_uöt8_t
 *
	gf⁄t
;

789 c⁄° 
u8g_pgm_uöt8_t
 *
	gcurs‹_f⁄t
;

790 
uöt8_t
 
	gcurs‹_fg_cﬁ‹
, 
	gcurs‹_bg_cﬁ‹
;

791 
uöt8_t
 
	gcurs‹_ícodög
;

792 
uöt8_t
 
	gmode
;

793 
u8g_uöt_t
 
	gcurs‹_x
;

794 
u8g_uöt_t
 
	gcurs‹_y
;

795 
u8g_døw_curs‹_‚
 
	gcurs‹_‚
;

797 
öt8_t
 
	gglyph_dx
;

798 
öt8_t
 
	gglyph_x
;

799 
öt8_t
 
	gglyph_y
;

800 
uöt8_t
 
	gglyph_width
;

801 
uöt8_t
 
	gglyph_height
;

803 
u8g_f⁄t_ˇlc_vªf_‚±r
 
	gf⁄t_ˇlc_vªf
;

804 
uöt8_t
 
	gf⁄t_height_mode
;

805 
öt8_t
 
	gf⁄t_ªf_as˚¡
;

806 
öt8_t
 
	gf⁄t_ªf_des˚¡
;

807 
uöt8_t
 
	gf⁄t_löe_•acög_Á˘‹
;

808 
uöt8_t
 
	glöe_•acög
;

810 
u8g_dev_¨g_pixñ_t
 
	g¨g_pixñ
;

813 
uöt8_t
 
	gpö_li°
[
U8G_PIN_LIST_LEN
];

815 
u8g_°©e_cb
 
	g°©e_cb
;

817 
u8g_box_t
 
	gcuºít_∑ge
;

821 
	#u8g_GëF⁄tAs˚¡
(
u8g
Ë((u8g)->
f⁄t_ªf_as˚¡
)

	)

822 
	#u8g_GëF⁄tDes˚¡
(
u8g
Ë((u8g)->
f⁄t_ªf_des˚¡
)

	)

823 
	#u8g_GëF⁄tLöeS∑cög
(
u8g
Ë((u8g)->
löe_•acög
)

	)

825 
uöt8_t
 
u8g_ˇŒ_dev_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

827 
uöt8_t
 
u8g_InôLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

828 
u8g_Fú°PageLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

829 
uöt8_t
 
u8g_NextPageLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

830 
uöt8_t
 
u8g_SëC⁄åa°LL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
c⁄åa°
);

831 
u8g_DøwPixñLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
);

832 
u8g_Døw8PixñLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
pixñ
);

833 
uöt8_t
 
u8g_IsBBXI¡î£˘i⁄LL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
);

834 
u8g_uöt_t
 
u8g_GëWidthLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

835 
u8g_uöt_t
 
u8g_GëHeightLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

837 
u8g_Upd©eDimísi⁄
(
u8g_t
 *
u8g
);

838 
uöt8_t
 
u8g_Begö
(
u8g_t
 *
u8g
);

839 
uöt8_t
 
u8g_Inô
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

840 
uöt8_t
 
u8g_InôSPI
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
);

841 
uöt8_t
 
u8g_InôHWSPI
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
);

842 
uöt8_t
 
u8g_InôI2C
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
›ti⁄s
);

843 
uöt8_t
 
u8g_Inô8BôFixedP‹t
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
í
, uöt8_à
cs
, uöt8_à
di
, uöt8_à
rw
, uöt8_à
ª£t
);

844 
uöt8_t
 
u8g_Inô8Bô
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

845 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
, uöt8_à
ª£t
);

846 
uöt8_t
 
u8g_InôRW8Bô
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

847 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
wr
, uöt8_à
rd
, uöt8_à
ª£t
);

848 
u8g_Fú°Page
(
u8g_t
 *
u8g
);

849 
uöt8_t
 
u8g_NextPage
(
u8g_t
 *
u8g
);

850 
uöt8_t
 
u8g_SëC⁄åa°
(
u8g_t
 *
u8g
, uöt8_à
c⁄åa°
);

851 
u8g_SÀïOn
(
u8g_t
 *
u8g
);

852 
u8g_SÀïOff
(
u8g_t
 *
u8g
);

853 
u8g_DøwPixñ
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
);

854 
u8g_Døw8Pixñ
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
pixñ
);

856 
uöt8_t
 
u8g_St›
(
u8g_t
 *
u8g
);

857 
u8g_SëCﬁ‹Index
(
u8g_t
 *
u8g
, 
uöt8_t
 
idx
);

858 
uöt8_t
 
u8g_GëCﬁ‹Index
(
u8g_t
 *
u8g
);

860 
uöt8_t
 
u8g_GëDeÁu…F‹egroundCﬁ‹
(
u8g_t
 *
u8g
);

861 
u8g_SëDeÁu…F‹egroundCﬁ‹
(
u8g_t
 *
u8g
);

863 
uöt8_t
 
u8g_GëDeÁu…BackgroundCﬁ‹
(
u8g_t
 *
u8g
);

864 
u8g_SëDeÁu…BackgroundCﬁ‹
(
u8g_t
 *
u8g
);

866 
uöt8_t
 
u8g_GëDeÁu…MidCﬁ‹
(
u8g_t
 *
u8g
);

867 
u8g_SëDeÁu…MidCﬁ‹
(
u8g_t
 *
u8g
);

869 
	#u8g_GëWidth
(
u8g
Ë((u8g)->
width
)

	)

870 
	#u8g_GëHeight
(
u8g
Ë((u8g)->
height
)

	)

871 
	#u8g_GëMode
(
u8g
Ë((u8g)->
mode
)

	)

878 
	#U8G_STATE_ENV_IDX
 0

	)

879 
	#U8G_STATE_U8G_IDX
 1

	)

880 
	#U8G_STATE_RESTORE
 0

	)

881 
	#U8G_STATE_BACKUP
 1

	)

882 
	#U8G_STATE_MSG_COMPOSE
(
cmd
,
idx
Ë(((cmd)<<1Ë| (idx))

	)

884 
	#U8G_STATE_MSG_RESTORE_ENV
 
	`U8G_STATE_MSG_COMPOSE
(
U8G_STATE_RESTORE
,
U8G_STATE_ENV_IDX
)

	)

885 
	#U8G_STATE_MSG_BACKUP_ENV
 
	`U8G_STATE_MSG_COMPOSE
(
U8G_STATE_BACKUP
,
U8G_STATE_ENV_IDX
)

	)

886 
	#U8G_STATE_MSG_RESTORE_U8G
 
	`U8G_STATE_MSG_COMPOSE
(
U8G_STATE_RESTORE
,
U8G_STATE_U8G_IDX
)

	)

887 
	#U8G_STATE_MSG_BACKUP_U8G
 
	`U8G_STATE_MSG_COMPOSE
(
U8G_STATE_BACKUP
,
U8G_STATE_U8G_IDX
)

	)

889 
	#U8G_STATE_MSG_GET_IDX
(
msg
Ë((msg)&1)

	)

890 
	#U8G_STATE_MSG_IS_BACKUP
(
msg
Ë((msg)&2)

	)

894 
u8g_°©e_dummy_cb
(
uöt8_t
 
msg
);

895 
u8g_backup_avr_•i
(
uöt8_t
 
msg
);

897 
u8g_SëH¨dw¨eBackup
(
u8g_t
 *
u8g
, 
u8g_°©e_cb
 
backup_cb
);

901 
uöt8_t
 
u8g_IsBBXI¡î£˘i⁄
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
);

906 
u8g_UndoRŸ©i⁄
(
u8g_t
 *
u8g
);

907 
u8g_SëRŸ90
(
u8g_t
 *
u8g
);

908 
u8g_SëRŸ180
(
u8g_t
 *
u8g
);

909 
u8g_SëRŸ270
(
u8g_t
 *
u8g
);

913 
u8g_UndoSˇÀ
(
u8g_t
 *
u8g
);

914 
u8g_SëSˇÀ2x2
(
u8g_t
 *
u8g
);

919 
size_t
 
u8g_f⁄t_GëSize
(c⁄° *
f⁄t
);

920 
uöt8_t
 
u8g_f⁄t_GëF⁄tSèπEncodög
(c⁄° *
f⁄t
Ë
	gU8G_NOINLINE
;

921 
uöt8_t
 
u8g_f⁄t_GëF⁄tEndEncodög
(c⁄° *
f⁄t
Ë
	gU8G_NOINLINE
;

923 
u8g_SëF⁄t
(
u8g_t
 *
u8g
, c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
);

925 
uöt8_t
 
u8g_GëF⁄tBBXWidth
(
u8g_t
 *
u8g
);

926 
uöt8_t
 
u8g_GëF⁄tBBXHeight
(
u8g_t
 *
u8g
);

927 
öt8_t
 
u8g_GëF⁄tBBXOffX
(
u8g_t
 *
u8g
);

928 
öt8_t
 
u8g_GëF⁄tBBXOffY
(
u8g_t
 *
u8g
);

929 
uöt8_t
 
u8g_GëF⁄tC≠ôÆAHeight
(
u8g_t
 *
u8g
);

931 
uöt8_t
 
u8g_IsGlyph
(
u8g_t
 *
u8g
, uöt8_à
ªque°ed_ícodög
);

932 
öt8_t
 
u8g_GëGlyphDñèX
(
u8g_t
 *
u8g
, 
uöt8_t
 
ªque°ed_ícodög
);

934 
öt8_t
 
u8g_døw_glyph
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
);

936 
öt8_t
 
u8g_DøwGlyphDú
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
ícodög
);

937 
öt8_t
 
u8g_DøwGlyph
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
);

938 
öt8_t
 
u8g_DøwGlyph90
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
);

939 
öt8_t
 
u8g_DøwGlyph180
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
);

940 
öt8_t
 
u8g_DøwGlyph270
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
);

941 
öt8_t
 
u8g_DøwGlyphF⁄tBBX
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
ícodög
);

943 
u8g_uöt_t
 
u8g_DøwSå
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, c⁄° *
s
);

944 
u8g_uöt_t
 
u8g_DøwSå90
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, c⁄° *
s
);

945 
u8g_uöt_t
 
u8g_DøwSå180
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, c⁄° *
s
);

946 
u8g_uöt_t
 
u8g_DøwSå270
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, c⁄° *
s
);

948 
u8g_uöt_t
 
u8g_DøwSåDú
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, c⁄° *
s
);

951 
u8g_uöt_t
 
u8g_DøwSåP
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
);

952 
u8g_uöt_t
 
u8g_DøwSå90P
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
);

953 
u8g_uöt_t
 
u8g_DøwSå180P
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
);

954 
u8g_uöt_t
 
u8g_DøwSå270P
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
);

957 
u8g_SëF⁄tRefHeightText
(
u8g_t
 *
u8g
);

958 
u8g_SëF⁄tRefHeightExãndedText
(
u8g_t
 *
u8g
);

959 
u8g_SëF⁄tRefHeightAŒ
(
u8g_t
 *
u8g
);

960 
u8g_SëF⁄tLöeS∑cögFa˘‹
(
u8g_t
 *
u8g
, 
uöt8_t
 
Á˘‹
);

962 
u8g_uöt_t
 
u8g_f⁄t_ˇlc_vªf_f⁄t
(
u8g_t
 *
u8g
);

963 
u8g_uöt_t
 
u8g_f⁄t_ˇlc_vªf_bŸtom
(
u8g_t
 *
u8g
);

964 
u8g_uöt_t
 
u8g_f⁄t_ˇlc_vªf_t›
(
u8g_t
 *
u8g
);

965 
u8g_uöt_t
 
u8g_f⁄t_ˇlc_vªf_˚¡î
(
u8g_t
 *
u8g
);

967 
u8g_SëF⁄tPosBa£löe
(
u8g_t
 *
u8g
);

968 
u8g_SëF⁄tPosBŸtom
(
u8g_t
 *
u8g
);

969 
u8g_SëF⁄tPosCíãr
(
u8g_t
 *
u8g
);

970 
u8g_SëF⁄tPosT›
(
u8g_t
 *
u8g
);

973 
u8g_uöt_t
 
u8g_GëSåPixñWidth
(
u8g_t
 *
u8g
, c⁄° *
s
);

974 
u8g_uöt_t
 
u8g_GëSåPixñWidthP
(
u8g_t
 *
u8g
, c⁄° 
u8g_pgm_uöt8_t
 *
s
);

975 
öt8_t
 
u8g_GëSåX
(
u8g_t
 *
u8g
, c⁄° *
s
);

976 
öt8_t
 
u8g_GëSåXP
(
u8g_t
 *
u8g
, c⁄° 
u8g_pgm_uöt8_t
 *
s
);

977 
u8g_uöt_t
 
u8g_GëSåWidth
(
u8g_t
 *
u8g
, c⁄° *
s
);

978 
u8g_uöt_t
 
u8g_GëSåWidthP
(
u8g_t
 *
u8g
, c⁄° 
u8g_pgm_uöt8_t
 *
s
);

980 
u8g_uöt_t
 
u8g_DøwSåF⁄tBBX
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, c⁄° *
s
);

982 
u8g_GëSåMöBox
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_uöt_t
 *
x
, u8g_uöt_à*
y
, u8g_uöt_à*
width
, u8g_uöt_à*
height
);

983 
u8g_GëSåAMöBox
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_uöt_t
 *
x
, u8g_uöt_à*
y
, u8g_uöt_à*
width
, u8g_uöt_à*
height
);

987 
u8g_døw_box
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
Ë
	gU8G_NOINLINE
;

989 
u8g_DøwHLöe
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
);

990 
u8g_DøwVLöe
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
);

991 
u8g_DøwFøme
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
);

992 
u8g_DøwBox
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
);

994 
u8g_DøwRFøme
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, u8g_uöt_à
r
);

995 
u8g_DøwRBox
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, u8g_uöt_à
r
);

999 
u8g_DøwHBôm≠
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, c⁄° 
uöt8_t
 *
bôm≠
);

1000 
u8g_DøwHBôm≠P
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
);

1001 
u8g_DøwBôm≠
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, u8g_uöt_à
h
, c⁄° 
uöt8_t
 *
bôm≠
);

1002 
u8g_DøwBôm≠P
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, u8g_uöt_à
h
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
);

1004 
u8g_DøwXBM
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, c⁄° 
uöt8_t
 *
bôm≠
);

1005 
u8g_DøwXBMP
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
);

1009 
u8g_DøwLöe
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x1
, u8g_uöt_à
y1
, u8g_uöt_à
x2
, u8g_uöt_à
y2
);

1025 
	#U8G_DRAW_UPPER_RIGHT
 0x01

	)

1026 
	#U8G_DRAW_UPPER_LEFT
 0x02

	)

1027 
	#U8G_DRAW_LOWER_LEFT
 0x04

	)

1028 
	#U8G_DRAW_LOWER_RIGHT
 0x08

	)

1029 
	#U8G_DRAW_ALL
 (
U8G_DRAW_UPPER_RIGHT
|
U8G_DRAW_UPPER_LEFT
|
U8G_DRAW_LOWER_RIGHT
|
U8G_DRAW_LOWER_LEFT
)

	)

1031 
u8g_døw_cú˛e
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
Ë
	gU8G_NOINLINE
;

1032 
u8g_døw_disc
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
Ë
	gU8G_NOINLINE
;

1034 
u8g_DøwCú˛e
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
);

1035 
u8g_DøwDisc
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
);

1038 
uöt8_t
 
u8g_is_box_bbx_öãr£˘i⁄
(
u8g_box_t
 *
box
, 
u8g_dev_¨g_bbx_t
 *
bbx
);

1042 
u8g_SëCurs‹F⁄t
(
u8g_t
 *
u8g
, c⁄° 
u8g_pgm_uöt8_t
 *
curs‹_f⁄t
);

1043 
u8g_SëCurs‹StyÀ
(
u8g_t
 *
u8g
, 
uöt8_t
 
ícodög
);

1044 
u8g_SëCurs‹Pos
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
curs‹_x
, u8g_uöt_à
curs‹_y
);

1045 
u8g_SëCurs‹Cﬁ‹
(
u8g_t
 *
u8g
, 
uöt8_t
 
fg
, uöt8_à
bg
);

1046 
u8g_E«bÀCurs‹
(
u8g_t
 *
u8g
);

1047 
u8g_DißbÀCurs‹
(
u8g_t
 *
u8g
);

1048 
u8g_DøwCurs‹
(
u8g_t
 *
u8g
);

1054 
u8g_SëVútuÆS¸ìnDimísi⁄
(
u8g_t
 *
vs_u8g
, 
u8g_uöt_t
 
width
, u8g_uöt_à
height
);

1055 
uöt8_t
 
u8g_AddToVútuÆS¸ìn
(
u8g_t
 *
vs_u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_à*
chûd_u8g
);

1058 
°_Døw
(
uöt8_t
 
Âs
);

1059 
°_Sãp
(
uöt8_t
 
∂ayî_pos
, uöt8_à
is_auto_fúe
, uöt8_à
is_fúe
);

1065 
	#U8G_I2C_OPT_NONE
 0

	)

1068 
	#U8G_I2C_ERR_NONE
 0x00

	)

1070 
	#U8G_I2C_ERR_TIMEOUT
 0x01

	)

1071 
	#U8G_I2C_ERR_BUS
 0x02

	)

1073 
u8g_i2c_˛ór_îr‹
(Ë
	gU8G_NOINLINE
;

1074 
uöt8_t
 
u8g_i2c_gë_îr‹
(Ë
	gU8G_NOINLINE
;

1075 
uöt8_t
 
u8g_i2c_gë_îr_pos
(Ë
	gU8G_NOINLINE
;

1076 
u8g_i2c_öô
(
uöt8_t
 
›ti⁄s
Ë
	gU8G_NOINLINE
;

1077 
uöt8_t
 
u8g_i2c_waô
(uöt8_à
mask
, uöt8_à
pos
Ë
	gU8G_NOINLINE
;

1078 
uöt8_t
 
u8g_i2c_°¨t
(uöt8_à
¶a
Ë
	gU8G_NOINLINE
;

1079 
uöt8_t
 
u8g_i2c_£nd_byã
(uöt8_à
d©a
Ë
	gU8G_NOINLINE
;

1080 
u8g_i2c_°›
(Ë
	gU8G_NOINLINE
;

1086 c⁄° *
u8g_u8tﬂ
(
uöt8_t
 
v
, uöt8_à
d
);

1090 c⁄° *
u8g_u16tﬂ
(
uöt16_t
 
v
, 
uöt8_t
 
d
);

1096 
u8g_Dñay
(
uöt16_t
 
vÆ
);

1099 
u8g_Mi¸oDñay
();

1102 
u8g_10Mi¸oDñay
();

1106 
	#CHESS_KEY_NONE
 0

	)

1107 
	#CHESS_KEY_NEXT
 1

	)

1108 
	#CHESS_KEY_PREV
 2

	)

1109 
	#CHESS_KEY_SELECT
 3

	)

1110 
	#CHESS_KEY_BACK
 4

	)

1112 
chess_Inô
(
u8g_t
 *
u8g
, 
uöt8_t
 
em±y_body_cﬁ‹
);

1113 
chess_Døw
();

1114 
chess_Sãp
(
uöt8_t
 
keycode
);

1119 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_m2ic⁄_5
[] 
U8G_SECTION
(".progmem.u8g_font_m2icon_5");

1120 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_m2ic⁄_7
[] 
U8G_SECTION
(".progmem.u8g_font_m2icon_7");

1121 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_m2ic⁄_9
[] 
U8G_SECTION
(".progmem.u8g_font_m2icon_9");

1123 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_u8glib_4
[] 
U8G_SECTION
(".progmem.u8g_font_u8glib_4");

1124 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_u8glib_4r
[] 
U8G_SECTION
(".progmem.u8g_font_u8glib_4r");

1127 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x12_75r
[] 
U8G_SECTION
(".progmem.u8g_font_6x12_75r");

1128 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13_75r
[] 
U8G_SECTION
(".progmem.u8g_font_6x13_75r");

1129 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13_75r
[] 
U8G_SECTION
(".progmem.u8g_font_7x13_75r");

1130 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_8x13_75r
[] 
U8G_SECTION
(".progmem.u8g_font_8x13_75r");

1131 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x15_75r
[] 
U8G_SECTION
(".progmem.u8g_font_9x15_75r");

1132 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x18_75r
[] 
U8G_SECTION
(".progmem.u8g_font_9x18_75r");

1133 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_cu12_75r
[] 
U8G_SECTION
(".progmem.u8g_font_cu12_75r");

1134 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_75r
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_75r");

1135 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_10x20_75r
[] 
U8G_SECTION
(".progmem.u8g_font_10x20_75r");

1137 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_10x20_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_10x20_67_75");

1138 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_10x20_78_79
[] 
U8G_SECTION
(".progmem.u8g_font_10x20_78_79");

1139 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_10x20
[] 
U8G_SECTION
(".progmem.u8g_font_10x20");

1140 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_10x20r
[] 
U8G_SECTION
(".progmem.u8g_font_10x20r");

1141 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_4x6
[] 
U8G_SECTION
(".progmem.u8g_font_4x6");

1142 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_4x6r
[] 
U8G_SECTION
(".progmem.u8g_font_4x6r");

1144 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_5x7
[] 
U8G_SECTION
(".progmem.u8g_font_5x7");

1145 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_5x7r
[] 
U8G_SECTION
(".progmem.u8g_font_5x7r");

1146 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_5x8
[] 
U8G_SECTION
(".progmem.u8g_font_5x8");

1147 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_5x8r
[] 
U8G_SECTION
(".progmem.u8g_font_5x8r");

1148 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x10
[] 
U8G_SECTION
(".progmem.u8g_font_6x10");

1149 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x10r
[] 
U8G_SECTION
(".progmem.u8g_font_6x10r");

1150 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x12_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_6x12_67_75");

1151 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x12_78_79
[] 
U8G_SECTION
(".progmem.u8g_font_6x12_78_79");

1152 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x12
[] 
U8G_SECTION
(".progmem.u8g_font_6x12");

1153 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x12r
[] 
U8G_SECTION
(".progmem.u8g_font_6x12r");

1154 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_6x13_67_75");

1155 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13_78_79
[] 
U8G_SECTION
(".progmem.u8g_font_6x13_78_79");

1156 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13B
[] 
U8G_SECTION
(".progmem.u8g_font_6x13B");

1157 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13Br
[] 
U8G_SECTION
(".progmem.u8g_font_6x13Br");

1158 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13
[] 
U8G_SECTION
(".progmem.u8g_font_6x13");

1159 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13r
[] 
U8G_SECTION
(".progmem.u8g_font_6x13r");

1160 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13O
[] 
U8G_SECTION
(".progmem.u8g_font_6x13O");

1161 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13Or
[] 
U8G_SECTION
(".progmem.u8g_font_6x13Or");

1162 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_7x13_67_75");

1163 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13_78_79
[] 
U8G_SECTION
(".progmem.u8g_font_7x13_78_79");

1164 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13B
[] 
U8G_SECTION
(".progmem.u8g_font_7x13B");

1165 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13Br
[] 
U8G_SECTION
(".progmem.u8g_font_7x13Br");

1166 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13
[] 
U8G_SECTION
(".progmem.u8g_font_7x13");

1167 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13r
[] 
U8G_SECTION
(".progmem.u8g_font_7x13r");

1168 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13O
[] 
U8G_SECTION
(".progmem.u8g_font_7x13O");

1169 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13Or
[] 
U8G_SECTION
(".progmem.u8g_font_7x13Or");

1170 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x14B
[] 
U8G_SECTION
(".progmem.u8g_font_7x14B");

1171 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x14Br
[] 
U8G_SECTION
(".progmem.u8g_font_7x14Br");

1172 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x14
[] 
U8G_SECTION
(".progmem.u8g_font_7x14");

1173 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x14r
[] 
U8G_SECTION
(".progmem.u8g_font_7x14r");

1174 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_8x13_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_8x13_67_75");

1175 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_8x13B
[] 
U8G_SECTION
(".progmem.u8g_font_8x13B");

1176 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_8x13Br
[] 
U8G_SECTION
(".progmem.u8g_font_8x13Br");

1177 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_8x13
[] 
U8G_SECTION
(".progmem.u8g_font_8x13");

1178 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_8x13r
[] 
U8G_SECTION
(".progmem.u8g_font_8x13r");

1179 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_8x13O
[] 
U8G_SECTION
(".progmem.u8g_font_8x13O");

1180 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_8x13Or
[] 
U8G_SECTION
(".progmem.u8g_font_8x13Or");

1182 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x15_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_9x15_67_75");

1183 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x15_78_79
[] 
U8G_SECTION
(".progmem.u8g_font_9x15_78_79");

1184 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x15B
[] 
U8G_SECTION
(".progmem.u8g_font_9x15B");

1185 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x15Br
[] 
U8G_SECTION
(".progmem.u8g_font_9x15Br");

1186 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x15
[] 
U8G_SECTION
(".progmem.u8g_font_9x15");

1187 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x15r
[] 
U8G_SECTION
(".progmem.u8g_font_9x15r");

1189 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x18_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_9x18_67_75");

1190 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x18_78_79
[] 
U8G_SECTION
(".progmem.u8g_font_9x18_78_79");

1191 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x18B
[] 
U8G_SECTION
(".progmem.u8g_font_9x18B");

1192 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x18
[] 
U8G_SECTION
(".progmem.u8g_font_9x18");

1193 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x18Br
[] 
U8G_SECTION
(".progmem.u8g_font_9x18Br");

1194 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x18r
[] 
U8G_SECTION
(".progmem.u8g_font_9x18r");

1196 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_curs‹
[] 
U8G_SECTION
(".progmem.u8g_font_cursor");

1197 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_curs‹r
[] 
U8G_SECTION
(".progmem.u8g_font_cursorr");

1198 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_mi¸o
[] 
U8G_SECTION
(".progmem.u8g_font_micro");

1200 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_cu12_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_cu12_67_75");

1201 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_cu12_78_79
[] 
U8G_SECTION
(".progmem.u8g_font_cu12_78_79");

1202 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_cu12
[] 
U8G_SECTION
(".progmem.u8g_font_cu12");

1211 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub11
[] 
U8G_SECTION
(".progmem.u8g_font_fub11");

1212 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub11r
[] 
U8G_SECTION
(".progmem.u8g_font_fub11r");

1213 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub11n
[] 
U8G_SECTION
(".progmem.u8g_font_fub11n");

1214 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub14
[] 
U8G_SECTION
(".progmem.u8g_font_fub14");

1215 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub14r
[] 
U8G_SECTION
(".progmem.u8g_font_fub14r");

1216 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub14n
[] 
U8G_SECTION
(".progmem.u8g_font_fub14n");

1217 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub17
[] 
U8G_SECTION
(".progmem.u8g_font_fub17");

1218 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub17r
[] 
U8G_SECTION
(".progmem.u8g_font_fub17r");

1219 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub17n
[] 
U8G_SECTION
(".progmem.u8g_font_fub17n");

1220 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub20
[] 
U8G_SECTION
(".progmem.u8g_font_fub20");

1221 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub20r
[] 
U8G_SECTION
(".progmem.u8g_font_fub20r");

1222 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub20n
[] 
U8G_SECTION
(".progmem.u8g_font_fub20n");

1223 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub25
[] 
U8G_SECTION
(".progmem.u8g_font_fub25");

1224 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub25r
[] 
U8G_SECTION
(".progmem.u8g_font_fub25r");

1225 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub25n
[] 
U8G_SECTION
(".progmem.u8g_font_fub25n");

1226 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub30
[] 
U8G_SECTION
(".progmem.u8g_font_fub30");

1227 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub30r
[] 
U8G_SECTION
(".progmem.u8g_font_fub30r");

1228 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub30n
[] 
U8G_SECTION
(".progmem.u8g_font_fub30n");

1229 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub35n
[] 
U8G_SECTION
(".progmem.u8g_font_fub35n");

1230 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub42n
[] 
U8G_SECTION
(".progmem.u8g_font_fub42n");

1231 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub49n
[] 
U8G_SECTION
(".progmem.u8g_font_fub49n");

1240 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur11
[] 
U8G_SECTION
(".progmem.u8g_font_fur11");

1241 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur11r
[] 
U8G_SECTION
(".progmem.u8g_font_fur11r");

1242 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur11n
[] 
U8G_SECTION
(".progmem.u8g_font_fur11n");

1243 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur14
[] 
U8G_SECTION
(".progmem.u8g_font_fur14");

1244 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur14r
[] 
U8G_SECTION
(".progmem.u8g_font_fur14r");

1245 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur14n
[] 
U8G_SECTION
(".progmem.u8g_font_fur14n");

1246 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur17
[] 
U8G_SECTION
(".progmem.u8g_font_fur17");

1247 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur17r
[] 
U8G_SECTION
(".progmem.u8g_font_fur17r");

1248 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur17n
[] 
U8G_SECTION
(".progmem.u8g_font_fur17n");

1249 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur20
[] 
U8G_SECTION
(".progmem.u8g_font_fur20");

1250 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur20r
[] 
U8G_SECTION
(".progmem.u8g_font_fur20r");

1251 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur20n
[] 
U8G_SECTION
(".progmem.u8g_font_fur20n");

1252 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur25
[] 
U8G_SECTION
(".progmem.u8g_font_fur25");

1253 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur25r
[] 
U8G_SECTION
(".progmem.u8g_font_fur25r");

1254 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur25n
[] 
U8G_SECTION
(".progmem.u8g_font_fur25n");

1255 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur30
[] 
U8G_SECTION
(".progmem.u8g_font_fur30");

1256 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur30r
[] 
U8G_SECTION
(".progmem.u8g_font_fur30r");

1257 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur30n
[] 
U8G_SECTION
(".progmem.u8g_font_fur30n");

1258 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur35n
[] 
U8G_SECTION
(".progmem.u8g_font_fur35n");

1259 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur42n
[] 
U8G_SECTION
(".progmem.u8g_font_fur42n");

1260 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur49n
[] 
U8G_SECTION
(".progmem.u8g_font_fur49n");

1269 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb11
[] 
U8G_SECTION
(".progmem.u8g_font_gdb11");

1270 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb12
[] 
U8G_SECTION
(".progmem.u8g_font_gdb12");

1271 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb14
[] 
U8G_SECTION
(".progmem.u8g_font_gdb14");

1272 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb17
[] 
U8G_SECTION
(".progmem.u8g_font_gdb17");

1273 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb20
[] 
U8G_SECTION
(".progmem.u8g_font_gdb20");

1274 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb25
[] 
U8G_SECTION
(".progmem.u8g_font_gdb25");

1275 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb30
[] 
U8G_SECTION
(".progmem.u8g_font_gdb30");

1277 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb11r
[] 
U8G_SECTION
(".progmem.u8g_font_gdb11r");

1278 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb12r
[] 
U8G_SECTION
(".progmem.u8g_font_gdb12r");

1279 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb14r
[] 
U8G_SECTION
(".progmem.u8g_font_gdb14r");

1280 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb17r
[] 
U8G_SECTION
(".progmem.u8g_font_gdb17r");

1281 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb20r
[] 
U8G_SECTION
(".progmem.u8g_font_gdb20r");

1282 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb25r
[] 
U8G_SECTION
(".progmem.u8g_font_gdb25r");

1283 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb30r
[] 
U8G_SECTION
(".progmem.u8g_font_gdb30r");

1285 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb11n
[] 
U8G_SECTION
(".progmem.u8g_font_gdb11n");

1286 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb12n
[] 
U8G_SECTION
(".progmem.u8g_font_gdb12n");

1287 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb14n
[] 
U8G_SECTION
(".progmem.u8g_font_gdb14n");

1288 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb17n
[] 
U8G_SECTION
(".progmem.u8g_font_gdb17n");

1289 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb20n
[] 
U8G_SECTION
(".progmem.u8g_font_gdb20n");

1290 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb25n
[] 
U8G_SECTION
(".progmem.u8g_font_gdb25n");

1291 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb30n
[] 
U8G_SECTION
(".progmem.u8g_font_gdb30n");

1300 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr9
[] 
U8G_SECTION
(".progmem.u8g_font_gdr9");

1301 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr10
[] 
U8G_SECTION
(".progmem.u8g_font_gdr10");

1302 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr11
[] 
U8G_SECTION
(".progmem.u8g_font_gdr11");

1303 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr12
[] 
U8G_SECTION
(".progmem.u8g_font_gdr12");

1304 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr14
[] 
U8G_SECTION
(".progmem.u8g_font_gdr14");

1305 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr17
[] 
U8G_SECTION
(".progmem.u8g_font_gdr17");

1306 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr20
[] 
U8G_SECTION
(".progmem.u8g_font_gdr20");

1307 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr25
[] 
U8G_SECTION
(".progmem.u8g_font_gdr25");

1308 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr30
[] 
U8G_SECTION
(".progmem.u8g_font_gdr30");

1310 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr9r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr9r");

1311 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr10r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr10r");

1312 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr11r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr11r");

1313 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr12r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr12r");

1314 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr14r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr14r");

1315 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr17r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr17r");

1316 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr20r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr20r");

1317 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr25r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr25r");

1318 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr30r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr30r");

1320 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr9n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr9n");

1321 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr10n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr10n");

1322 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr11n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr11n");

1323 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr12n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr12n");

1324 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr14n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr14n");

1325 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr17n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr17n");

1326 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr20n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr20n");

1327 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr25n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr25n");

1328 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr30n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr30n");

1337 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb18
[] 
U8G_SECTION
(".progmem.u8g_font_osb18");

1338 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb21
[] 
U8G_SECTION
(".progmem.u8g_font_osb21");

1339 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb26
[] 
U8G_SECTION
(".progmem.u8g_font_osb26");

1340 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb29
[] 
U8G_SECTION
(".progmem.u8g_font_osb29");

1341 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb35
[] 
U8G_SECTION
(".progmem.u8g_font_osb35");

1343 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb18r
[] 
U8G_SECTION
(".progmem.u8g_font_osb18r");

1344 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb21r
[] 
U8G_SECTION
(".progmem.u8g_font_osb21r");

1345 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb26r
[] 
U8G_SECTION
(".progmem.u8g_font_osb26r");

1346 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb29r
[] 
U8G_SECTION
(".progmem.u8g_font_osb29r");

1347 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb35r
[] 
U8G_SECTION
(".progmem.u8g_font_osb35r");

1349 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb18n
[] 
U8G_SECTION
(".progmem.u8g_font_osb18n");

1350 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb21n
[] 
U8G_SECTION
(".progmem.u8g_font_osb21n");

1351 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb26n
[] 
U8G_SECTION
(".progmem.u8g_font_osb26n");

1352 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb29n
[] 
U8G_SECTION
(".progmem.u8g_font_osb29n");

1353 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb35n
[] 
U8G_SECTION
(".progmem.u8g_font_osb35n");

1362 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§18
[] 
U8G_SECTION
(".progmem.u8g_font_osr18");

1363 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§21
[] 
U8G_SECTION
(".progmem.u8g_font_osr21");

1364 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§26
[] 
U8G_SECTION
(".progmem.u8g_font_osr26");

1365 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§29
[] 
U8G_SECTION
(".progmem.u8g_font_osr29");

1366 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§35
[] 
U8G_SECTION
(".progmem.u8g_font_osr35");

1368 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§18r
[] 
U8G_SECTION
(".progmem.u8g_font_osr18r");

1369 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§21r
[] 
U8G_SECTION
(".progmem.u8g_font_osr21r");

1370 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§26r
[] 
U8G_SECTION
(".progmem.u8g_font_osr26r");

1371 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§29r
[] 
U8G_SECTION
(".progmem.u8g_font_osr29r");

1372 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§35r
[] 
U8G_SECTION
(".progmem.u8g_font_osr35r");

1374 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§18n
[] 
U8G_SECTION
(".progmem.u8g_font_osr18n");

1375 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§21n
[] 
U8G_SECTION
(".progmem.u8g_font_osr21n");

1376 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§26n
[] 
U8G_SECTION
(".progmem.u8g_font_osr26n");

1377 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§29n
[] 
U8G_SECTION
(".progmem.u8g_font_osr29n");

1378 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§35n
[] 
U8G_SECTION
(".progmem.u8g_font_osr35n");

1384 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_18_19
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_18_19");

1385 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_72_73
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_72_73");

1386 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_67_75");

1387 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_76
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_76");

1388 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_77
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_77");

1389 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_78_79
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_78_79");

1390 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_86
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_86");

1391 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t
[] 
U8G_SECTION
(".progmem.u8g_font_unifont");

1392 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄å
[] 
U8G_SECTION
(".progmem.u8g_font_unifontr");

1393 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_0_8
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_0_8");

1394 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_2_3
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_2_3");

1395 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_4_5
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_4_5");

1396 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_8_9
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_8_9");

1397 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_12_13
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_12_13");

1402 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_03b
[] 
U8G_SECTION
(".progmem.u8g_font_04b_03b");

1403 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_03bn
[] 
U8G_SECTION
(".progmem.u8g_font_04b_03bn");

1404 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_03br
[] 
U8G_SECTION
(".progmem.u8g_font_04b_03br");

1405 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_03
[] 
U8G_SECTION
(".progmem.u8g_font_04b_03");

1406 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_03n
[] 
U8G_SECTION
(".progmem.u8g_font_04b_03n");

1407 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_03r
[] 
U8G_SECTION
(".progmem.u8g_font_04b_03r");

1408 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_24
[] 
U8G_SECTION
(".progmem.u8g_font_04b_24");

1409 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_24n
[] 
U8G_SECTION
(".progmem.u8g_font_04b_24n");

1410 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_24r
[] 
U8G_SECTION
(".progmem.u8g_font_04b_24r");

1414 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_‹gv01
[] 
U8G_SECTION
(".progmem.u8g_font_orgv01");

1415 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_‹gv01r
[] 
U8G_SECTION
(".progmem.u8g_font_orgv01r");

1416 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_‹gv01n
[] 
U8G_SECTION
(".progmem.u8g_font_orgv01n");

1418 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fixed_v0
[] 
U8G_SECTION
(".progmem.u8g_font_fixed_v0");

1419 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fixed_v0r
[] 
U8G_SECTION
(".progmem.u8g_font_fixed_v0r");

1420 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fixed_v0n
[] 
U8G_SECTION
(".progmem.u8g_font_fixed_v0n");

1422 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_çssb
[] 
U8G_SECTION
(".progmem.u8g_font_tpssb");

1423 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_çssbr
[] 
U8G_SECTION
(".progmem.u8g_font_tpssbr");

1424 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_çssbn
[] 
U8G_SECTION
(".progmem.u8g_font_tpssbn");

1426 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_çss
[] 
U8G_SECTION
(".progmem.u8g_font_tpss");

1427 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_çs§
[] 
U8G_SECTION
(".progmem.u8g_font_tpssr");

1428 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_çs¢
[] 
U8G_SECTION
(".progmem.u8g_font_tpssn");

1432 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_‰ìdoomr25n
[] 
U8G_SECTION
(".progmem.u8g_font_freedoomr25n");

1433 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_‰ìdoomr10r
[] 
U8G_SECTION
(".progmem.u8g_font_freedoomr10r");

1436 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB08
[] 
U8G_SECTION
(".progmem.u8g_font_courB08");

1437 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB08r
[] 
U8G_SECTION
(".progmem.u8g_font_courB08r");

1438 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB10
[] 
U8G_SECTION
(".progmem.u8g_font_courB10");

1439 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB10r
[] 
U8G_SECTION
(".progmem.u8g_font_courB10r");

1440 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB12
[] 
U8G_SECTION
(".progmem.u8g_font_courB12");

1441 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB12r
[] 
U8G_SECTION
(".progmem.u8g_font_courB12r");

1442 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB14
[] 
U8G_SECTION
(".progmem.u8g_font_courB14");

1443 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB14r
[] 
U8G_SECTION
(".progmem.u8g_font_courB14r");

1444 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB18
[] 
U8G_SECTION
(".progmem.u8g_font_courB18");

1445 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB18r
[] 
U8G_SECTION
(".progmem.u8g_font_courB18r");

1446 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB24
[] 
U8G_SECTION
(".progmem.u8g_font_courB24");

1447 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB24r
[] 
U8G_SECTION
(".progmem.u8g_font_courB24r");

1448 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB24n
[] 
U8G_SECTION
(".progmem.u8g_font_courB24n");

1450 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR08
[] 
U8G_SECTION
(".progmem.u8g_font_courR08");

1451 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR08r
[] 
U8G_SECTION
(".progmem.u8g_font_courR08r");

1452 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR10
[] 
U8G_SECTION
(".progmem.u8g_font_courR10");

1453 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR10r
[] 
U8G_SECTION
(".progmem.u8g_font_courR10r");

1454 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR12
[] 
U8G_SECTION
(".progmem.u8g_font_courR12");

1455 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR12r
[] 
U8G_SECTION
(".progmem.u8g_font_courR12r");

1456 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR14
[] 
U8G_SECTION
(".progmem.u8g_font_courR14");

1457 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR14r
[] 
U8G_SECTION
(".progmem.u8g_font_courR14r");

1458 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR18
[] 
U8G_SECTION
(".progmem.u8g_font_courR18");

1459 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR18r
[] 
U8G_SECTION
(".progmem.u8g_font_courR18r");

1460 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR24
[] 
U8G_SECTION
(".progmem.u8g_font_courR24");

1461 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR24r
[] 
U8G_SECTION
(".progmem.u8g_font_courR24r");

1462 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR24n
[] 
U8G_SECTION
(".progmem.u8g_font_courR24n");

1464 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB08
[] 
U8G_SECTION
(".progmem.u8g_font_helvB08");

1465 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB08r
[] 
U8G_SECTION
(".progmem.u8g_font_helvB08r");

1466 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB10
[] 
U8G_SECTION
(".progmem.u8g_font_helvB10");

1467 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB10r
[] 
U8G_SECTION
(".progmem.u8g_font_helvB10r");

1468 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB12
[] 
U8G_SECTION
(".progmem.u8g_font_helvB12");

1469 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB12r
[] 
U8G_SECTION
(".progmem.u8g_font_helvB12r");

1470 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB14
[] 
U8G_SECTION
(".progmem.u8g_font_helvB14");

1471 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB14r
[] 
U8G_SECTION
(".progmem.u8g_font_helvB14r");

1472 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB18
[] 
U8G_SECTION
(".progmem.u8g_font_helvB18");

1473 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB18r
[] 
U8G_SECTION
(".progmem.u8g_font_helvB18r");

1474 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB24
[] 
U8G_SECTION
(".progmem.u8g_font_helvB24");

1475 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB24r
[] 
U8G_SECTION
(".progmem.u8g_font_helvB24r");

1476 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB24n
[] 
U8G_SECTION
(".progmem.u8g_font_helvB24n");

1478 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR08
[] 
U8G_SECTION
(".progmem.u8g_font_helvR08");

1479 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR08r
[] 
U8G_SECTION
(".progmem.u8g_font_helvR08r");

1480 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR10
[] 
U8G_SECTION
(".progmem.u8g_font_helvR10");

1481 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR10r
[] 
U8G_SECTION
(".progmem.u8g_font_helvR10r");

1482 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR12
[] 
U8G_SECTION
(".progmem.u8g_font_helvR12");

1483 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR12r
[] 
U8G_SECTION
(".progmem.u8g_font_helvR12r");

1484 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR14
[] 
U8G_SECTION
(".progmem.u8g_font_helvR14");

1485 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR14r
[] 
U8G_SECTION
(".progmem.u8g_font_helvR14r");

1486 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR18
[] 
U8G_SECTION
(".progmem.u8g_font_helvR18");

1487 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR18r
[] 
U8G_SECTION
(".progmem.u8g_font_helvR18r");

1488 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR24
[] 
U8G_SECTION
(".progmem.u8g_font_helvR24");

1489 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR24r
[] 
U8G_SECTION
(".progmem.u8g_font_helvR24r");

1490 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR24n
[] 
U8G_SECTION
(".progmem.u8g_font_helvR24n");

1492 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB08
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB08");

1493 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB08r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB08r");

1494 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB10
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB10");

1495 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB10r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB10r");

1496 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB12
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB12");

1497 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB12r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB12r");

1498 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB14
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB14");

1499 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB14r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB14r");

1500 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB18
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB18");

1501 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB18r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB18r");

1502 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB24
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB24");

1503 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB24r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB24r");

1504 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB24n
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB24n");

1506 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR08
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR08");

1507 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR08r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR08r");

1508 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR10
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR10");

1509 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR10r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR10r");

1510 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR12
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR12");

1511 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR12r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR12r");

1512 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR14
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR14");

1513 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR14r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR14r");

1514 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR18
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR18");

1515 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR18r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR18r");

1516 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR24
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR24");

1517 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR24r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR24r");

1518 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR24n
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR24n");

1520 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb08
[] 
U8G_SECTION
(".progmem.u8g_font_symb08");

1521 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb08r
[] 
U8G_SECTION
(".progmem.u8g_font_symb08r");

1522 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb10
[] 
U8G_SECTION
(".progmem.u8g_font_symb10");

1523 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb10r
[] 
U8G_SECTION
(".progmem.u8g_font_symb10r");

1524 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb12
[] 
U8G_SECTION
(".progmem.u8g_font_symb12");

1525 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb12r
[] 
U8G_SECTION
(".progmem.u8g_font_symb12r");

1526 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb14
[] 
U8G_SECTION
(".progmem.u8g_font_symb14");

1527 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb14r
[] 
U8G_SECTION
(".progmem.u8g_font_symb14r");

1528 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb18
[] 
U8G_SECTION
(".progmem.u8g_font_symb18");

1529 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb18r
[] 
U8G_SECTION
(".progmem.u8g_font_symb18r");

1530 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb24
[] 
U8G_SECTION
(".progmem.u8g_font_symb24");

1531 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb24r
[] 
U8G_SECTION
(".progmem.u8g_font_symb24r");

1533 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB08
[] 
U8G_SECTION
(".progmem.u8g_font_timB08");

1534 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB08r
[] 
U8G_SECTION
(".progmem.u8g_font_timB08r");

1535 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB10
[] 
U8G_SECTION
(".progmem.u8g_font_timB10");

1536 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB10r
[] 
U8G_SECTION
(".progmem.u8g_font_timB10r");

1537 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB12
[] 
U8G_SECTION
(".progmem.u8g_font_timB12");

1538 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB12r
[] 
U8G_SECTION
(".progmem.u8g_font_timB12r");

1539 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB14
[] 
U8G_SECTION
(".progmem.u8g_font_timB14");

1540 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB14r
[] 
U8G_SECTION
(".progmem.u8g_font_timB14r");

1541 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB18
[] 
U8G_SECTION
(".progmem.u8g_font_timB18");

1542 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB18r
[] 
U8G_SECTION
(".progmem.u8g_font_timB18r");

1543 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB24
[] 
U8G_SECTION
(".progmem.u8g_font_timB24");

1544 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB24r
[] 
U8G_SECTION
(".progmem.u8g_font_timB24r");

1545 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB24n
[] 
U8G_SECTION
(".progmem.u8g_font_timB24n");

1547 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR08
[] 
U8G_SECTION
(".progmem.u8g_font_timR08");

1548 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR08r
[] 
U8G_SECTION
(".progmem.u8g_font_timR08r");

1549 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR10
[] 
U8G_SECTION
(".progmem.u8g_font_timR10");

1550 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR10r
[] 
U8G_SECTION
(".progmem.u8g_font_timR10r");

1551 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR12
[] 
U8G_SECTION
(".progmem.u8g_font_timR12");

1552 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR12r
[] 
U8G_SECTION
(".progmem.u8g_font_timR12r");

1553 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR14
[] 
U8G_SECTION
(".progmem.u8g_font_timR14");

1554 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR14r
[] 
U8G_SECTION
(".progmem.u8g_font_timR14r");

1555 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR18
[] 
U8G_SECTION
(".progmem.u8g_font_timR18");

1556 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR18r
[] 
U8G_SECTION
(".progmem.u8g_font_timR18r");

1557 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR24
[] 
U8G_SECTION
(".progmem.u8g_font_timR24");

1558 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR24r
[] 
U8G_SECTION
(".progmem.u8g_font_timR24r");

1559 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR24n
[] 
U8G_SECTION
(".progmem.u8g_font_timR24n");

1563 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_p01ty≥
[] 
U8G_SECTION
(".progmem.u8g_font_p01type");

1564 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_p01ty≥r
[] 
U8G_SECTION
(".progmem.u8g_font_p01typer");

1565 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_p01ty≥n
[] 
U8G_SECTION
(".progmem.u8g_font_p01typen");

1567 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_luˇsf⁄t_Æã∫©e
[] 
U8G_SECTION
(".progmem.u8g_font_lucasfont_alternate");

1568 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_luˇsf⁄t_Æã∫©î
[] 
U8G_SECTION
(".progmem.u8g_font_lucasfont_alternater");

1569 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_luˇsf⁄t_Æã∫©í
[] 
U8G_SECTION
(".progmem.u8g_font_lucasfont_alternaten");

1575 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_chikôa
[] 
U8G_SECTION
(".progmem.u8g_font_chikita");

1576 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_chikô¨
[] 
U8G_SECTION
(".progmem.u8g_font_chikitar");

1577 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_chikô™
[] 
U8G_SECTION
(".progmem.u8g_font_chikitan");

1579 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_pixñÀ_mi¸o
[] 
U8G_SECTION
(".progmem.u8g_font_pixelle_micro");

1580 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_pixñÀ_mi¸‹
[] 
U8G_SECTION
(".progmem.u8g_font_pixelle_micror");

1581 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_pixñÀ_mi¸⁄
[] 
U8G_SECTION
(".progmem.u8g_font_pixelle_micron");

1583 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_åixñ_squ¨e
[] 
U8G_SECTION
(".progmem.u8g_font_trixel_square");

1584 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_åixñ_squ¨î
[] 
U8G_SECTION
(".progmem.u8g_font_trixel_squarer");

1585 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_åixñ_squ¨í
[] 
U8G_SECTION
(".progmem.u8g_font_trixel_squaren");

1587 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_robŸ_de_núo
[] 
U8G_SECTION
(".progmem.u8g_font_robot_de_niro");

1588 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_robŸ_de_nú‹
[] 
U8G_SECTION
(".progmem.u8g_font_robot_de_niror");

1589 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_robŸ_de_nú⁄
[] 
U8G_SECTION
(".progmem.u8g_font_robot_de_niron");

1591 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_baby
[] 
U8G_SECTION
(".progmem.u8g_font_baby");

1592 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_babyr
[] 
U8G_SECTION
(".progmem.u8g_font_babyr");

1593 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_babyn
[] 
U8G_SECTION
(".progmem.u8g_font_babyn");

1595 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_blù„°_07
[] 
U8G_SECTION
(".progmem.u8g_font_blipfest_07");

1596 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_blù„°_07r
[] 
U8G_SECTION
(".progmem.u8g_font_blipfest_07r");

1597 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_blù„°_07n
[] 
U8G_SECTION
(".progmem.u8g_font_blipfest_07n");

1599 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x10_m¨lö
[] 
U8G_SECTION
(".progmem.u8g_font_6x10_marlin");

1600 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x9
[] 
U8G_SECTION
(".progmem.u8g_font_6x9");

1602 #ifde‡
__˝lu•lus


	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_bitmap.c

37 
	~"u8g.h
"

39 
	$u8g_DøwHBôm≠
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, c⁄° 
uöt8_t
 *
bôm≠
)

41  
˙t
 > 0 )

43 
	`u8g_Døw8Pixñ
(
u8g
, 
x
, 
y
, 0, *
bôm≠
);

44 
bôm≠
++;

45 
˙t
--;

46 
x
+=8;

48 
	}
}

50 
	$u8g_DøwBôm≠
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, u8g_uöt_à
h
, c⁄° 
uöt8_t
 *
bôm≠
)

52 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
˙t
*8, 
h
) == 0 )

54  
h
 > 0 )

56 
	`u8g_DøwHBôm≠
(
u8g
, 
x
, 
y
, 
˙t
, 
bôm≠
);

57 
bôm≠
 +
˙t
;

58 
y
++;

59 
h
--;

61 
	}
}

64 
	$u8g_DøwHBôm≠P
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
)

66  
˙t
 > 0 )

68 
	`u8g_Døw8Pixñ
(
u8g
, 
x
, 
y
, 0, 
	`u8g_pgm_ªad
(
bôm≠
));

69 
bôm≠
++;

70 
˙t
--;

71 
x
+=8;

73 
	}
}

75 
	$u8g_DøwBôm≠P
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, u8g_uöt_à
h
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
)

77 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
˙t
*8, 
h
) == 0 )

79  
h
 > 0 )

81 
	`u8g_DøwHBôm≠P
(
u8g
, 
x
, 
y
, 
˙t
, 
bôm≠
);

82 
bôm≠
 +
˙t
;

83 
y
++;

84 
h
--;

86 
	}
}

90 
	$u8g_DøwHXBM
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, c⁄° 
uöt8_t
 *
bôm≠
)

92 
uöt8_t
 
d
;

93 
x
+=7;

94  
w
 >= 8 )

96 
	`u8g_Døw8Pixñ
(
u8g
, 
x
, 
y
, 2, *
bôm≠
);

97 
bôm≠
++;

98 
w
-= 8;

99 
x
+=8;

101 i‡–
w
 > 0 )

103 
d
 = *
bôm≠
;

104 
x
 -= 7;

107 i‡–
d
 & 1 )

108 
	`u8g_DøwPixñ
(
u8g
, 
x
, 
y
);

109 
x
++;

110 
w
--;

111 
d
 >>= 1;

112 }  
w
 > 0 );

114 
	}
}

116 
	$u8g_DøwXBM
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, c⁄° 
uöt8_t
 *
bôm≠
)

118 
u8g_uöt_t
 
b
;

119 
b
 = 
w
;

120 
b
 += 7;

121 
b
 >>= 3;

123 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
w
, 
h
) == 0 )

126  
h
 > 0 )

128 
	`u8g_DøwHXBM
(
u8g
, 
x
, 
y
, 
w
, 
bôm≠
);

129 
bôm≠
 +
b
;

130 
y
++;

131 
h
--;

133 
	}
}

135 
	$u8g_DøwHXBMP
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
)

137 
uöt8_t
 
d
;

138 
x
+=7;

139  
w
 >= 8 )

141 
	`u8g_Døw8Pixñ
(
u8g
, 
x
, 
y
, 2, 
	`u8g_pgm_ªad
(
bôm≠
));

142 
bôm≠
++;

143 
w
-= 8;

144 
x
+=8;

146 i‡–
w
 > 0 )

148 
d
 = 
	`u8g_pgm_ªad
(
bôm≠
);

149 
x
 -= 7;

152 i‡–
d
 & 1 )

153 
	`u8g_DøwPixñ
(
u8g
, 
x
, 
y
);

154 
x
++;

155 
w
--;

156 
d
 >>= 1;

157 }  
w
 > 0 );

159 
	}
}

161 
	$u8g_DøwXBMP
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
)

163 
u8g_uöt_t
 
b
;

164 
b
 = 
w
;

165 
b
 += 7;

166 
b
 >>= 3;

168 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
w
, 
h
) == 0 )

170  
h
 > 0 )

172 
	`u8g_DøwHXBMP
(
u8g
, 
x
, 
y
, 
w
, 
bôm≠
);

173 
bôm≠
 +
b
;

174 
y
++;

175 
h
--;

177 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_circle.c

43 
	~"u8g.h
"

45 #ifde‡
OLD_CODE


47 
	$cúc_uµîRight
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
) {

48 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
x
, 
y0
 - 
y
);

49 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
y
, 
y0
 - 
x
);

50 
	}
}

52 
	$cúc_uµîLe·
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
) {

53 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
x
, 
y0
 - 
y
);

54 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
y
, 
y0
 - 
x
);

55 
	}
}

57 
	$cúc_lowîRight
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
) {

58 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
x
, 
y0
 + 
y
);

59 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
y
, 
y0
 + 
x
);

60 
	}
}

62 
	$cúc_lowîLe·
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
) {

63 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
x
, 
y0
 + 
y
);

64 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
y
, 
y0
 + 
x
);

65 
	}
}

67 
	$cúc_Æl
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
) {

68 
	`cúc_uµîRight
(
u8g
, 
x
, 
y
, 
x0
, 
y0
);

69 
	`cúc_uµîLe·
(
u8g
, 
x
, 
y
, 
x0
, 
y0
);

70 
	`cúc_lowîRight
(
u8g
, 
x
, 
y
, 
x0
, 
y0
);

71 
	`cúc_lowîLe·
(
u8g
, 
x
, 
y
, 
x0
, 
y0
);

72 
	}
}

74 
	$u8g_DøwEmpCúc
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
)

76 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x0
-
ød
-1, 
y0
-rad-1, 2*rad+1, 2*rad+1) == 0)

79 
f
 = 1 - 
ød
;

80 
ddF_x
 = 1;

81 
ddF_y
 = -2*
ød
;

82 
uöt8_t
 
x
 = 0;

83 
uöt8_t
 
y
 = 
ød
;

85 –*
cúc_utû
 )(
u8g_t
 *, 
u8g_uöt_t
, u8g_uint_t, u8g_uint_t, u8g_uint_t);

87 
›ti⁄
)

89 
U8G_CIRC_UPPER_RIGHT
:

90 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
 - 
ød
);

91 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
ød
, 
y0
);

92 
cúc_utû
 = 
cúc_uµîRight
;

94 
U8G_CIRC_UPPER_LEFT
:

95 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
 - 
ød
);

96 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
ød
, 
y0
);

97 
cúc_utû
 = 
cúc_uµîLe·
;

99 
U8G_CIRC_LOWER_RIGHT
:

100 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
 + 
ød
);

101 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
ød
, 
y0
);

102 
cúc_utû
 = 
cúc_lowîRight
;

104 
U8G_CIRC_LOWER_LEFT
:

105 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
 + 
ød
);

106 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
ød
, 
y0
);

107 
cúc_utû
 = 
cúc_lowîLe·
;

110 
U8G_CIRC_ALL
:

111 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
 + 
ød
);

112 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
 - 
ød
);

113 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
ød
, 
y0
);

114 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
ød
, 
y0
);

115 
cúc_utû
 = 
cúc_Æl
;

119  
x
 < 
y
 )

121 if(
f
 >= 0)

123 
y
--;

124 
ddF_y
 += 2;

125 
f
 +
ddF_y
;

127 
x
++;

128 
ddF_x
 += 2;

129 
f
 +
ddF_x
;

131 
	`cúc_utû
(
u8g
, 
x
, 
y
, 
x0
, 
y0
);

133 
	}
}

136 
	$u8g_DøwFûlCúc
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
)

138 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x0
-
ød
-1, 
y0
-rad-1, 2*rad+1, 2*rad+1) == 0)

141 
f
 = 1 - 
ød
;

142 
ddF_x
 = 1;

143 
ddF_y
 = -2*
ød
;

144 
uöt8_t
 
x
 = 0;

145 
uöt8_t
 
y
 = 
ød
;

150 i‡(
›ti⁄
 =
U8G_CIRC_UPPER_LEFT
 || o±i⁄ =
U8G_CIRC_UPPER_RIGHT
) {

151 
	`u8g_DøwVLöe
(
u8g
, 
x0
, 
y0
 - 
ød
,Ñad+1);

153 i‡(
›ti⁄
 =
U8G_CIRC_LOWER_LEFT
 || o±i⁄ =
U8G_CIRC_LOWER_RIGHT
) {

154 
	`u8g_DøwVLöe
(
u8g
, 
x0
, 
y0
, 
ød
+1);

157 
	`u8g_DøwVLöe
(
u8g
, 
x0
, 
y0
 - 
ød
, 2*rad+1);

160  
x
 < 
y
 )

162 if(
f
 >= 0)

164 
y
--;

165 
ddF_y
 += 2;

166 
f
 +
ddF_y
;

168 
x
++;

169 
ddF_x
 += 2;

170 
f
 +
ddF_x
;

174 
›ti⁄
)

176 
U8G_CIRC_UPPER_RIGHT
:

177 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
x
, 
y0
-
y
, y+1);

178 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
y
, 
y0
-
x
, x+1);

180 
U8G_CIRC_UPPER_LEFT
:

181 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
x
, 
y0
-
y
, y+1);

182 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
y
, 
y0
-
x
, x+1);

184 
U8G_CIRC_LOWER_RIGHT
:

185 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
x
, 
y0
, 
y
+1);

186 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
y
, 
y0
, 
x
+1);

188 
U8G_CIRC_LOWER_LEFT
:

189 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
x
, 
y0
, 
y
+1);

190 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
y
, 
y0
, 
x
+1);

192 
U8G_CIRC_ALL
:

193 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
x
, 
y0
-
y
, 2*y+1);

194 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
x
, 
y0
-
y
, 2*y+1);

195 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
y
, 
y0
-
x
, 2*x+1);

196 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
y
, 
y0
-
x
, 2*x+1);

200 
	}
}

206 
	$u8g_døw_cú˛e_£˘i⁄
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
, 
uöt8_t
 
›ti⁄
Ë
U8G_NOINLINE
;

208 
	$u8g_døw_cú˛e_£˘i⁄
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
, 
uöt8_t
 
›ti⁄
)

211 i‡–
›ti⁄
 & 
U8G_DRAW_UPPER_RIGHT
 )

213 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
x
, 
y0
 - 
y
);

214 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
y
, 
y0
 - 
x
);

218 i‡–
›ti⁄
 & 
U8G_DRAW_UPPER_LEFT
 )

220 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
x
, 
y0
 - 
y
);

221 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
y
, 
y0
 - 
x
);

225 i‡–
›ti⁄
 & 
U8G_DRAW_LOWER_RIGHT
 )

227 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
x
, 
y0
 + 
y
);

228 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
y
, 
y0
 + 
x
);

232 i‡–
›ti⁄
 & 
U8G_DRAW_LOWER_LEFT
 )

234 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
x
, 
y0
 + 
y
);

235 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
y
, 
y0
 + 
x
);

237 
	}
}

239 
	$u8g_døw_cú˛e
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
)

241 
u8g_öt_t
 
f
;

242 
u8g_öt_t
 
ddF_x
;

243 
u8g_öt_t
 
ddF_y
;

244 
u8g_uöt_t
 
x
;

245 
u8g_uöt_t
 
y
;

247 
f
 = 1;

248 
f
 -
ød
;

249 
ddF_x
 = 1;

250 
ddF_y
 = 0;

251 
ddF_y
 -
ød
;

252 
ddF_y
 *= 2;

253 
x
 = 0;

254 
y
 = 
ød
;

256 
	`u8g_døw_cú˛e_£˘i⁄
(
u8g
, 
x
, 
y
, 
x0
, 
y0
, 
›ti⁄
);

258  
x
 < 
y
 )

260 i‡(
f
 >= 0)

262 
y
--;

263 
ddF_y
 += 2;

264 
f
 +
ddF_y
;

266 
x
++;

267 
ddF_x
 += 2;

268 
f
 +
ddF_x
;

270 
	`u8g_døw_cú˛e_£˘i⁄
(
u8g
, 
x
, 
y
, 
x0
, 
y0
, 
›ti⁄
);

272 
	}
}

274 
	$u8g_DøwCú˛e
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
)

278 
u8g_uöt_t
 
ødp
, 
ødp2
;

280 
ødp
 = 
ød
;

281 
ødp
++;

282 
ødp2
 = 
ødp
;

283 
ødp2
 *= 2;

285 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x0
-
ødp
, 
y0
-ødp, 
ødp2
,Ñadp2) == 0)

290 
	`u8g_døw_cú˛e
(
u8g
, 
x0
, 
y0
, 
ød
, 
›ti⁄
);

291 
	}
}

293 
	$u8g_døw_disc_£˘i⁄
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
, 
uöt8_t
 
›ti⁄
Ë
U8G_NOINLINE
;

295 
	$u8g_døw_disc_£˘i⁄
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
, 
uöt8_t
 
›ti⁄
)

298 i‡–
›ti⁄
 & 
U8G_DRAW_UPPER_RIGHT
 )

300 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
x
, 
y0
-
y
, y+1);

301 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
y
, 
y0
-
x
, x+1);

305 i‡–
›ti⁄
 & 
U8G_DRAW_UPPER_LEFT
 )

307 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
x
, 
y0
-
y
, y+1);

308 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
y
, 
y0
-
x
, x+1);

312 i‡–
›ti⁄
 & 
U8G_DRAW_LOWER_RIGHT
 )

314 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
x
, 
y0
, 
y
+1);

315 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
y
, 
y0
, 
x
+1);

319 i‡–
›ti⁄
 & 
U8G_DRAW_LOWER_LEFT
 )

321 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
x
, 
y0
, 
y
+1);

322 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
y
, 
y0
, 
x
+1);

324 
	}
}

326 
	$u8g_døw_disc
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
)

328 
u8g_öt_t
 
f
;

329 
u8g_öt_t
 
ddF_x
;

330 
u8g_öt_t
 
ddF_y
;

331 
u8g_uöt_t
 
x
;

332 
u8g_uöt_t
 
y
;

334 
f
 = 1;

335 
f
 -
ød
;

336 
ddF_x
 = 1;

337 
ddF_y
 = 0;

338 
ddF_y
 -
ød
;

339 
ddF_y
 *= 2;

340 
x
 = 0;

341 
y
 = 
ød
;

343 
	`u8g_døw_disc_£˘i⁄
(
u8g
, 
x
, 
y
, 
x0
, 
y0
, 
›ti⁄
);

345  
x
 < 
y
 )

347 i‡(
f
 >= 0)

349 
y
--;

350 
ddF_y
 += 2;

351 
f
 +
ddF_y
;

353 
x
++;

354 
ddF_x
 += 2;

355 
f
 +
ddF_x
;

357 
	`u8g_døw_disc_£˘i⁄
(
u8g
, 
x
, 
y
, 
x0
, 
y0
, 
›ti⁄
);

359 
	}
}

361 
	$u8g_DøwDisc
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
)

365 
u8g_uöt_t
 
ødp
, 
ødp2
;

367 
ødp
 = 
ød
;

368 
ødp
++;

369 
ødp2
 = 
ødp
;

370 
ødp2
 *= 2;

372 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x0
-
ødp
, 
y0
-ødp, 
ødp2
,Ñadp2) == 0)

377 
	`u8g_døw_disc
(
u8g
, 
x0
, 
y0
, 
ød
, 
›ti⁄
);

378 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_clip.c

59 
	~"u8g.h
"

61 #ifde‡
__GNUC__


62 
	#U8G_ALWAYS_INLINE
 
	`__©åibuã__
((
Æways_ölöe
))

	)

64 
	#U8G_ALWAYS_INLINE


	)

77 #ifde‡
OLD_CODE_WHICH_IS_TOO_SLOW


78 
uöt8_t
 
	$u8g_is_öãr£˘i⁄_boﬁón
(
u8g_uöt_t
 
a0
, u8g_uöt_à
a1
, u8g_uöt_à
v0
, u8g_uöt_à
v1
)

80 
uöt8_t
 
c1
, 
c2
, 
c3
, 
tmp
;

81 
c1
 = 
v0
 <
a1
;

82 
c2
 = 
v1
 >
a0
;

83 
c3
 = 
v0
 > 
v1
;

85 
tmp
 = 
c1
;

86 
c1
 &
c2
;

87 
c2
 &
c3
;

88 
c3
 &
tmp
;

89 
c1
 |
c2
;

90 
c1
 |
c3
;

91  
c1
 & 1;

92 
	}
}

95 
	#U8G_IS_INTERSECTION_MACRO
(
a0
,
a1
,
v0
,
v1
Ë((
uöt8_t
)–(v0Ë<◊1ËË? ( ( (v1Ë>◊0ËË? ( 1 ) : ( (v0Ë> (v1ËËË: ( ( (v1Ë>◊0ËË? ( (v0Ë> (v1ËË: ( 0 ) ))

	)

97 
uöt8_t
 
	$u8g_is_öãr£˘i⁄_decisi⁄_åì
(
u8g_uöt_t
 
a0
, u8g_uöt_à
a1
, u8g_uöt_à
v0
, u8g_uöt_à
v1
Ë
U8G_ALWAYS_INLINE
;

98 
uöt8_t
 
	$u8g_is_öãr£˘i⁄_decisi⁄_åì
(
u8g_uöt_t
 
a0
, u8g_uöt_à
a1
, u8g_uöt_à
v0
, u8g_uöt_à
v1
)

102 i‡–
v0
 <
a1
 )

104 i‡–
v1
 >
a0
 )

110 i‡–
v0
 > 
v1
 )

122 i‡–
v1
 >
a0
 )

124 i‡–
v0
 > 
v1
 )

138 
	}
}

141 
uöt8_t
 
	$u8g_IsBBXI¡î£˘i⁄
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
)

143 
u8g_uöt_t
 
tmp
;

144 
tmp
 = 
y
;

145 
tmp
 +
h
;

146 
tmp
--;

147 i‡–
	`u8g_is_öãr£˘i⁄_decisi⁄_åì
(
u8g
->
cuºít_∑ge
.
y0
, u8g->cuºít_∑ge.
y1
, 
y
, 
tmp
) == 0 )

150 
tmp
 = 
x
;

151 
tmp
 +
w
;

152 
tmp
--;

153  
	`u8g_is_öãr£˘i⁄_decisi⁄_åì
(
u8g
->
cuºít_∑ge
.
x0
, u8g->cuºít_∑ge.
x1
, 
x
, 
tmp
);

154 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_api.c

37 
	~"u8g.h
"

39 
uöt8_t
 
	$u8g_InôCom
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

41  
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_INIT
, 0, 
NULL
);

42 
	}
}

44 
	$u8g_St›Com
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

46 
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_STOP
, 0, 
NULL
);

47 
	}
}

50 
	$u8g_SëChùSñe˘
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
cs
)

52 
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_CHIP_SELECT
, 
cs
, 
NULL
);

53 
	}
}

55 
	$u8g_SëRe£tLow
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

57 
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_RESET
, 0, 
NULL
);

58 
	}
}

60 
	$u8g_SëRe£tHigh
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

62 
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_RESET
, 1, 
NULL
);

63 
	}
}

66 
	$u8g_SëAddªss
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
addªss
)

68 
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_ADDRESS
, 
addªss
, 
NULL
);

69 
	}
}

71 
uöt8_t
 
	$u8g_WrôeByã
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
vÆ
)

73  
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_WRITE_BYTE
, 
vÆ
, 
NULL
);

74 
	}
}

76 
uöt8_t
 
	$u8g_WrôeSequí˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
˙t
, uöt8_à*
£q
)

78  
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_WRITE_SEQ
, 
˙t
, 
£q
);

79 
	}
}

81 
uöt8_t
 
	$u8g_WrôeSequí˚P
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
˙t
, c⁄° uöt8_à*
£q
)

83  
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_WRITE_SEQ_P
, 
˙t
, (*)
£q
);

84 
	}
}

106 
uöt8_t
 
	$u8g_WrôeEscSeqP
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, c⁄° 
uöt8_t
 *
esc_£q
)

108 
uöt8_t
 
is_esˇ≥
 = 0;

109 
uöt8_t
 
vÆue
;

112 
vÆue
 = 
	`u8g_pgm_ªad
(
esc_£q
);

113 i‡–
is_esˇ≥
 == 0 )

115 i‡–
vÆue
 != 255 )

117 i‡–
	`u8g_WrôeByã
(
u8g
, 
dev
, 
vÆue
) == 0 )

122 
is_esˇ≥
 = 1;

127 i‡–
vÆue
 == 255 )

129 i‡–
	`u8g_WrôeByã
(
u8g
, 
dev
, 
vÆue
) == 0 )

132 i‡–
vÆue
 == 254 )

136 i‡–
vÆue
 >= 0x0f0 )

140 i‡–
vÆue
 >= 0xe0 )

142 
	`u8g_SëAddªss
(
u8g
, 
dev
, 
vÆue
 & 0x0f);

144 i‡–
vÆue
 >= 0xd0 )

146 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 
vÆue
 & 0x0f);

148 i‡–
vÆue
 >= 0xc0 )

150 
	`u8g_SëRe£tLow
(
u8g
, 
dev
);

151 
vÆue
 &= 0x0f;

152 
vÆue
 <<= 4;

153 
vÆue
+=2;

154 
	`u8g_Dñay
(
vÆue
);

155 
	`u8g_SëRe£tHigh
(
u8g
, 
dev
);

156 
	`u8g_Dñay
(
vÆue
);

158 i‡–
vÆue
 >= 0xbe )

163 i‡–
vÆue
 <= 127 )

165 
	`u8g_Dñay
(
vÆue
);

167 
is_esˇ≥
 = 0;

169 
esc_£q
++;

172 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_api_16gr.c

41 
	~"u8g.h
"

46 
uöt8_t
 
	$u8g_WrôeByãBWTo16GrDevi˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
b
)

48 
uöt8_t
 
buf
[4];

49 
uöt8_t
 
m≠
[4] = { 0, 0x00f, 0x0f0, 0x0ff };

50 
buf
 [3] = 
m≠
[
b
 & 3];

51 
b
>>=2;

52 
buf
 [2] = 
m≠
[
b
 & 3];

53 
b
>>=2;

54 
buf
 [1] = 
m≠
[
b
 & 3];

55 
b
>>=2;

56 
buf
 [0] = 
m≠
[
b
 & 3];

57  
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_WRITE_SEQ
, 4, 
buf
);

58 
	}
}

60 
uöt8_t
 
	$u8g_WrôeSequí˚BWTo16GrDevi˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
˙t
, uöt8_à*
±r
)

64 i‡–
	`u8g_WrôeByãBWTo16GrDevi˚
(
u8g
, 
dev
, *
±r
++) == 0 )

66 
˙t
--;

67 }  
˙t
 != 0 );

69 
	}
}

72 
uöt8_t
 
	$u8g_WrôeByã4LTo16GrDevi˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
b
)

76 
uöt8_t
 
m≠
[16] = { 0x000, 0x040, 0x0a0, 0x0f0, 0x004, 0x044, 0x0a4, 0x0f4, 0x00a, 0x04a, 0x0aa, 0x0fa, 0x00f, 0x04f, 0x0af, 0x0ff};

77 
uöt8_t
 
bb
;

78 
bb
 = 
b
;

79 
bb
 &= 15;

80 
b
>>=4;

81 
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_WRITE_BYTE
, 
m≠
[
bb
], 
NULL
);

82  
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_WRITE_BYTE
, 
m≠
[
b
], 
NULL
);

83 
	}
}

85 
uöt8_t
 
	$u8g_WrôeSequí˚4LTo16GrDevi˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
˙t
, uöt8_à*
±r
)

89 i‡–
	`u8g_WrôeByã4LTo16GrDevi˚
(
u8g
, 
dev
, *
±r
++) == 0 )

91 
˙t
--;

92 }  
˙t
 != 0 );

94 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_arduino_common.c

39 
	~"u8g.h
"

41 #i‡
deföed
(
ARDUINO
)

43 #i‡
ARDUINO
 < 100

44 
	~<WProgøm.h
>

46 
	~<Arduöo.h
>

49 
	$u8g_com_¨duöo_digôÆ_wrôe
(
u8g_t
 *
u8g
, 
uöt8_t
 
pö_ödex
, uöt8_à
vÆue
)

51 
uöt8_t
 
pö
;

52 
pö
 = 
u8g
->
pö_li°
[
pö_ödex
];

53 i‡–
pö
 !
U8G_PIN_NONE
 )

54 
	`digôÆWrôe
(
pö
, 
vÆue
);

55 
	}
}

58 
	$u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g_t
 *
u8g
)

60 
uöt8_t
 
i
;

62  
i
 = 0; i < 
U8G_PIN_LIST_LEN
-1; i++ )

64 i‡–
u8g
->
pö_li°
[
i
] !
U8G_PIN_NONE
 )

66 
	`pöMode
(
u8g
->
pö_li°
[
i
], 
OUTPUT
);

67 
	`digôÆWrôe
(
u8g
->
pö_li°
[
i
], 
HIGH
);

70 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_arduino_fast_parallel.c

54 
	~"u8g.h
"

56 #i‡ 
deföed
(
ARDUINO
)

58 #i‡
ARDUINO
 < 100

60 
	~<wúög_¥iv©e.h
>

61 
	~<pös_¨duöo.h
>

63 
	~<Arduöo.h
>

67 
	#PIN_D0
 8

	)

68 
	#PIN_D1
 9

	)

69 
	#PIN_D2
 10

	)

70 
	#PIN_D3
 11

	)

71 
	#PIN_D4
 4

	)

72 
	#PIN_D5
 5

	)

73 
	#PIN_D6
 6

	)

74 
	#PIN_D7
 7

	)

76 
	#PIN_CS1
 14

	)

77 
	#PIN_CS2
 15

	)

78 
	#PIN_RW
 16

	)

79 
	#PIN_DI
 17

	)

80 
	#PIN_EN
 18

	)

85 #i‡
deföed
(
__PIC32MX
)

87 vﬁ©ûê
uöt32_t
 *
	gu8g_d©a_p‹t
[8];

88 
uöt32_t
 
	gu8g_d©a_mask
[8];

90 vﬁ©ûê
uöt8_t
 *
	gu8g_d©a_p‹t
[8];

91 
uöt8_t
 
	gu8g_d©a_mask
[8];

96 
	$u8g_com_¨duöo_Á°_∑øŒñ_öô
(
u8g_t
 *
u8g
)

98 
u8g_d©a_p‹t
[0] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D0
]));

99 
u8g_d©a_mask
[0] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D0
]);

100 
u8g_d©a_p‹t
[1] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D1
]));

101 
u8g_d©a_mask
[1] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D1
]);

102 
u8g_d©a_p‹t
[2] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D2
]));

103 
u8g_d©a_mask
[2] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D2
]);

104 
u8g_d©a_p‹t
[3] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D3
]));

105 
u8g_d©a_mask
[3] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D3
]);

107 
u8g_d©a_p‹t
[4] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D4
]));

108 
u8g_d©a_mask
[4] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D4
]);

109 
u8g_d©a_p‹t
[5] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D5
]));

110 
u8g_d©a_mask
[5] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D5
]);

111 
u8g_d©a_p‹t
[6] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D6
]));

112 
u8g_d©a_mask
[6] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D6
]);

113 
u8g_d©a_p‹t
[7] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D7
]));

114 
u8g_d©a_mask
[7] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D7
]);

115 
	}
}

117 
	$u8g_com_¨duöo_Á°_wrôe_d©a_pö
(
uöt8_t
 
pö
, uöt8_à
vÆ
)

119 i‡–
vÆ
 != 0 )

120 *
u8g_d©a_p‹t
[
pö
] |
u8g_d©a_mask
[pin];

122 *
u8g_d©a_p‹t
[
pö
] &~
u8g_d©a_mask
[pin];

123 
	}
}

126 
	$u8g_com_¨duöo_Á°_∑øŒñ_wrôe
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

128 
	`u8g_com_¨duöo_Á°_wrôe_d©a_pö
–0, 
vÆ
&1 );

129 
vÆ
 >>= 1;

130 
	`u8g_com_¨duöo_Á°_wrôe_d©a_pö
–1, 
vÆ
&1 );

131 
vÆ
 >>= 1;

132 
	`u8g_com_¨duöo_Á°_wrôe_d©a_pö
–2, 
vÆ
&1 );

133 
vÆ
 >>= 1;

134 
	`u8g_com_¨duöo_Á°_wrôe_d©a_pö
–3, 
vÆ
&1 );

135 
vÆ
 >>= 1;

137 
	`u8g_com_¨duöo_Á°_wrôe_d©a_pö
–4, 
vÆ
&1 );

138 
vÆ
 >>= 1;

139 
	`u8g_com_¨duöo_Á°_wrôe_d©a_pö
–5, 
vÆ
&1 );

140 
vÆ
 >>= 1;

141 
	`u8g_com_¨duöo_Á°_wrôe_d©a_pö
–6, 
vÆ
&1 );

142 
vÆ
 >>= 1;

143 
	`u8g_com_¨duöo_Á°_wrôe_d©a_pö
–7, 
vÆ
&1 );

144 
vÆ
 >>= 1;

147 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_EN
, 
HIGH
);

148 
	`u8g_Mi¸oDñay
();

149 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_EN
, 
LOW
);

150 
	`u8g_10Mi¸oDñay
();

151 
	`u8g_10Mi¸oDñay
();

152 
	}
}

155 
uöt8_t
 
	$u8g_com_¨duöo_Á°_∑øŒñ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

157 
msg
)

159 
U8G_COM_MSG_INIT
:

160 
	`u8g_com_¨duöo_Á°_∑øŒñ_öô
(
u8g
);

162 i‡–
u8g
->
pö_li°
[
U8G_PI_RW
] !
U8G_PIN_NONE
 )

164 
	`pöMode
(
u8g
->
pö_li°
[
U8G_PI_RW
], 
OUTPUT
);

165 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RW
, 
LOW
);

168 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

170 
U8G_COM_MSG_STOP
:

173 
U8G_COM_MSG_CHIP_SELECT
:

174 i‡–
¨g_vÆ
 == 0 )

177 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
HIGH
);

178 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
HIGH
);

180 i‡–
¨g_vÆ
 == 1 )

183 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
LOW
);

184 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
HIGH
);

186 i‡–
¨g_vÆ
 == 2 )

189 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
HIGH
);

190 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
LOW
);

195 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
LOW
);

196 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
LOW
);

199 
U8G_COM_MSG_WRITE_BYTE
:

200 
	`u8g_com_¨duöo_Á°_∑øŒñ_wrôe
(
u8g
, 
¨g_vÆ
);

202 
U8G_COM_MSG_WRITE_SEQ
:

204 
uöt8_t
 *
±r
 = 
¨g_±r
;

205  
¨g_vÆ
 > 0 )

207 
	`u8g_com_¨duöo_Á°_∑øŒñ_wrôe
(
u8g
, *
±r
++);

208 
¨g_vÆ
--;

212 
U8G_COM_MSG_WRITE_SEQ_P
:

214 
uöt8_t
 *
±r
 = 
¨g_±r
;

215  
¨g_vÆ
 > 0 )

217 
	`u8g_com_¨duöo_Á°_∑øŒñ_wrôe
(
u8g
, 
	`u8g_pgm_ªad
(
±r
));

218 
±r
++;

219 
¨g_vÆ
--;

223 
U8G_COM_MSG_ADDRESS
:

224 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_DI
, 
¨g_vÆ
);

226 
U8G_COM_MSG_RESET
:

227 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

228 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

233 
	}
}

238 
uöt8_t
 
	$u8g_com_¨duöo_Á°_∑øŒñ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

241 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_arduino_hw_spi.c

37 
	~"u8g.h
"

39 #i‡
deföed
(
ARDUINO
)

41 #i‡
deföed
(
__AVR__
)

43 
	~<avr/öãºu±.h
>

44 
	~<avr/io.h
>

46 #i‡
ARDUINO
 < 100

47 
	~<WProgøm.h
>

50 #i‡
deföed
(
__AVR_ATmega644P__
Ë|| deföed(
__AVR_ATmega1284P__
)

51 
	#PIN_SCK
 7

	)

52 
	#PIN_MISO
 6

	)

53 
	#PIN_MOSI
 5

	)

54 
	#PIN_CS
 4

	)

56 
	#PIN_SCK
 13

	)

57 
	#PIN_MISO
 12

	)

58 
	#PIN_MOSI
 11

	)

59 
	#PIN_CS
 10

	)

64 
	~<Arduöo.h
>

67 
	#PIN_SCK
 
SCK


	)

68 
	#PIN_MISO
 
MISO


	)

69 
	#PIN_MOSI
 
MOSI


	)

70 
	#PIN_CS
 
SS


	)

77 
uöt8_t
 
	$u8g_•i_out
(
uöt8_t
 
d©a
)

81 
SPDR
 = 
d©a
;

83 !(
SPSR
 & (1<<
SPIF
)))

86  
SPDR
;

87 
	}
}

90 
uöt8_t
 
	$u8g_com_¨duöo_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

92 
msg
)

94 
U8G_COM_MSG_STOP
:

97 
U8G_COM_MSG_INIT
:

98 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

99 
	`pöMode
(
PIN_SCK
, 
OUTPUT
);

100 
	`digôÆWrôe
(
PIN_SCK
, 
LOW
);

101 
	`pöMode
(
PIN_MOSI
, 
OUTPUT
);

102 
	`digôÆWrôe
(
PIN_MOSI
, 
LOW
);

105 
	`pöMode
(
PIN_CS
, 
OUTPUT
);

106 
	`digôÆWrôe
(
PIN_CS
, 
HIGH
);

117 
SPCR
 = 0;

118 
SPCR
 = (1<<
SPE
Ë| (1<<
MSTR
)|(0<<
SPR1
)|(1<<
SPR0
)|(0<<
CPOL
)|(0<<
CPHA
);

119 #ifde‡
U8G_HW_SPI_2X


120 
SPSR
 = (1 << 
SPI2X
);

125 
U8G_COM_MSG_ADDRESS
:

126 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 
¨g_vÆ
);

129 
U8G_COM_MSG_CHIP_SELECT
:

130 i‡–
¨g_vÆ
 == 0 )

133 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
HIGH
);

138 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_SCK
, 
LOW
);

139 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
LOW
);

143 
U8G_COM_MSG_RESET
:

144 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

145 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

148 
U8G_COM_MSG_WRITE_BYTE
:

149 
	`u8g_•i_out
(
¨g_vÆ
);

152 
U8G_COM_MSG_WRITE_SEQ
:

154 
uöt8_t
 *
±r
 = 
¨g_±r
;

155  
¨g_vÆ
 > 0 )

157 
	`u8g_•i_out
(*
±r
++);

158 
¨g_vÆ
--;

162 
U8G_COM_MSG_WRITE_SEQ_P
:

164 
uöt8_t
 *
±r
 = 
¨g_±r
;

165  
¨g_vÆ
 > 0 )

167 
	`u8g_•i_out
(
	`u8g_pgm_ªad
(
±r
));

168 
±r
++;

169 
¨g_vÆ
--;

175 
	}
}

185 
uöt8_t
 
	$u8g_com_¨duöo_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

188 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_arduino_no_en_parallel.c

54 
	~"u8g.h
"

56 #i‡ 
deföed
(
ARDUINO
)

58 #i‡
ARDUINO
 < 100

60 
	~<wúög_¥iv©e.h
>

61 
	~<pös_¨duöo.h
>

63 
	~<Arduöo.h
>

68 #i‡
deföed
(
__PIC32MX
)

70 vﬁ©ûê
uöt32_t
 *
	gu8g_d©a_p‹t
[8];

71 
uöt32_t
 
	gu8g_d©a_mask
[8];

73 vﬁ©ûê
uöt8_t
 *
	gu8g_d©a_p‹t
[8];

74 
uöt8_t
 
	gu8g_d©a_mask
[8];

79 
	$u8g_com_¨duöo_no_í_∑øŒñ_öô
(
u8g_t
 *
u8g
)

81 
u8g_d©a_p‹t
[0] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D0
]));

82 
u8g_d©a_mask
[0] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D0
]);

83 
u8g_d©a_p‹t
[1] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D1
]));

84 
u8g_d©a_mask
[1] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D1
]);

85 
u8g_d©a_p‹t
[2] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D2
]));

86 
u8g_d©a_mask
[2] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D2
]);

87 
u8g_d©a_p‹t
[3] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D3
]));

88 
u8g_d©a_mask
[3] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D3
]);

90 
u8g_d©a_p‹t
[4] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D4
]));

91 
u8g_d©a_mask
[4] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D4
]);

92 
u8g_d©a_p‹t
[5] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D5
]));

93 
u8g_d©a_mask
[5] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D5
]);

94 
u8g_d©a_p‹t
[6] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D6
]));

95 
u8g_d©a_mask
[6] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D6
]);

96 
u8g_d©a_p‹t
[7] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D7
]));

97 
u8g_d©a_mask
[7] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D7
]);

98 
	}
}

100 
	$u8g_com_¨duöo_no_í_wrôe_d©a_pö
(
uöt8_t
 
pö
, uöt8_à
vÆ
)

102 i‡–
vÆ
 != 0 )

103 *
u8g_d©a_p‹t
[
pö
] |
u8g_d©a_mask
[pin];

105 *
u8g_d©a_p‹t
[
pö
] &~
u8g_d©a_mask
[pin];

106 
	}
}

109 
	$u8g_com_¨duöo_no_í_∑øŒñ_wrôe
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

111 
	`u8g_com_¨duöo_no_í_wrôe_d©a_pö
–0, 
vÆ
&1 );

112 
vÆ
 >>= 1;

113 
	`u8g_com_¨duöo_no_í_wrôe_d©a_pö
–1, 
vÆ
&1 );

114 
vÆ
 >>= 1;

115 
	`u8g_com_¨duöo_no_í_wrôe_d©a_pö
–2, 
vÆ
&1 );

116 
vÆ
 >>= 1;

117 
	`u8g_com_¨duöo_no_í_wrôe_d©a_pö
–3, 
vÆ
&1 );

118 
vÆ
 >>= 1;

120 
	`u8g_com_¨duöo_no_í_wrôe_d©a_pö
–4, 
vÆ
&1 );

121 
vÆ
 >>= 1;

122 
	`u8g_com_¨duöo_no_í_wrôe_d©a_pö
–5, 
vÆ
&1 );

123 
vÆ
 >>= 1;

124 
	`u8g_com_¨duöo_no_í_wrôe_d©a_pö
–6, 
vÆ
&1 );

125 
vÆ
 >>= 1;

126 
	`u8g_com_¨duöo_no_í_wrôe_d©a_pö
–7, 
vÆ
&1 );

127 
vÆ
 >>= 1;

130 i‡–
u8g
->
pö_li°
[
U8G_PI_CS_STATE
] == 1 )

132 
	`u8g_Mi¸oDñay
();

133 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
HIGH
);

134 
	`u8g_Mi¸oDñay
();

135 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
LOW
);

136 
	`u8g_Mi¸oDñay
();

138 i‡–
u8g
->
pö_li°
[
U8G_PI_CS_STATE
] == 2 )

140 
	`u8g_Mi¸oDñay
();

141 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
HIGH
);

142 
	`u8g_Mi¸oDñay
();

143 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
LOW
);

144 
	`u8g_Mi¸oDñay
();

146 
	}
}

149 
uöt8_t
 
	$u8g_com_¨duöo_no_í_∑øŒñ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

151 
msg
)

153 
U8G_COM_MSG_INIT
:

154 
	`u8g_com_¨duöo_no_í_∑øŒñ_öô
(
u8g
);

156 i‡–
u8g
->
pö_li°
[
U8G_PI_RW
] !
U8G_PIN_NONE
 )

158 
	`pöMode
(
u8g
->
pö_li°
[
U8G_PI_RW
], 
OUTPUT
);

159 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RW
, 
LOW
);

162 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

164 
U8G_COM_MSG_STOP
:

167 
U8G_COM_MSG_CHIP_SELECT
:

174 
u8g
->
pö_li°
[
U8G_PI_CS_STATE
] = 
¨g_vÆ
;

176 
U8G_COM_MSG_WRITE_BYTE
:

177 
	`u8g_com_¨duöo_no_í_∑øŒñ_wrôe
(
u8g
, 
¨g_vÆ
);

179 
U8G_COM_MSG_WRITE_SEQ
:

181 
uöt8_t
 *
±r
 = 
¨g_±r
;

182  
¨g_vÆ
 > 0 )

184 
	`u8g_com_¨duöo_no_í_∑øŒñ_wrôe
(
u8g
, *
±r
++);

185 
¨g_vÆ
--;

189 
U8G_COM_MSG_WRITE_SEQ_P
:

191 
uöt8_t
 *
±r
 = 
¨g_±r
;

192  
¨g_vÆ
 > 0 )

194 
	`u8g_com_¨duöo_no_í_∑øŒñ_wrôe
(
u8g
, 
	`u8g_pgm_ªad
(
±r
));

195 
±r
++;

196 
¨g_vÆ
--;

200 
U8G_COM_MSG_ADDRESS
:

201 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_DI
, 
¨g_vÆ
);

203 
U8G_COM_MSG_RESET
:

204 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

205 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

209 
	}
}

214 
uöt8_t
 
	$u8g_com_¨duöo_no_í_∑øŒñ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

217 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_arduino_parallel.c

55 
	~"u8g.h
"

58 #i‡ 
deföed
(
ARDUINO
)

60 #i‡
ARDUINO
 < 100

61 
	~<WProgøm.h
>

63 
	~<Arduöo.h
>

71 
	$u8g_com_¨duöo_∑øŒñ_wrôe
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

73 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_D0
, 
vÆ
&1);

74 
vÆ
 >>= 1;

75 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_D1
, 
vÆ
&1);

76 
vÆ
 >>= 1;

77 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_D2
, 
vÆ
&1);

78 
vÆ
 >>= 1;

79 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_D3
, 
vÆ
&1);

80 
vÆ
 >>= 1;

81 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_D4
, 
vÆ
&1);

82 
vÆ
 >>= 1;

83 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_D5
, 
vÆ
&1);

84 
vÆ
 >>= 1;

85 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_D6
, 
vÆ
&1);

86 
vÆ
 >>= 1;

87 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_D7
, 
vÆ
&1);

91 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_EN
, 
HIGH
);

93 
	`u8g_Mi¸oDñay
();

94 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_EN
, 
LOW
);

95 
	`u8g_10Mi¸oDñay
();

97 
	}
}

100 
uöt8_t
 
	$u8g_com_¨duöo_∑øŒñ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

102 
msg
)

104 
U8G_COM_MSG_INIT
:

106 i‡–
u8g
->
pö_li°
[
U8G_PI_RW
] !
U8G_PIN_NONE
 )

108 
	`pöMode
(
u8g
->
pö_li°
[
U8G_PI_RW
], 
OUTPUT
);

109 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RW
, 
LOW
);

112 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

114 
U8G_COM_MSG_STOP
:

116 
U8G_COM_MSG_CHIP_SELECT
:

117 i‡–
¨g_vÆ
 == 0 )

120 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
HIGH
);

121 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
HIGH
);

123 i‡–
¨g_vÆ
 == 1 )

126 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
LOW
);

127 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
HIGH
);

129 i‡–
¨g_vÆ
 == 2 )

132 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
HIGH
);

133 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
LOW
);

138 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
LOW
);

139 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
LOW
);

142 
U8G_COM_MSG_WRITE_BYTE
:

143 
	`u8g_com_¨duöo_∑øŒñ_wrôe
(
u8g
, 
¨g_vÆ
);

145 
U8G_COM_MSG_WRITE_SEQ
:

147 
uöt8_t
 *
±r
 = 
¨g_±r
;

148  
¨g_vÆ
 > 0 )

150 
	`u8g_com_¨duöo_∑øŒñ_wrôe
(
u8g
, *
±r
++);

151 
¨g_vÆ
--;

155 
U8G_COM_MSG_WRITE_SEQ_P
:

157 
uöt8_t
 *
±r
 = 
¨g_±r
;

158  
¨g_vÆ
 > 0 )

160 
	`u8g_com_¨duöo_∑øŒñ_wrôe
(
u8g
, 
	`u8g_pgm_ªad
(
±r
));

161 
±r
++;

162 
¨g_vÆ
--;

166 
U8G_COM_MSG_ADDRESS
:

167 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_DI
, 
¨g_vÆ
);

169 
U8G_COM_MSG_RESET
:

170 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

171 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

176 
	}
}

181 
uöt8_t
 
	$u8g_com_¨duöo_∑øŒñ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

184 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_arduino_port_d_wr.c

47 
	~"u8g.h
"

50 #i‡ 
deföed
(
ARDUINO
Ë&& deföed(
PORTD
)

52 #i‡
ARDUINO
 < 100

53 
	~<WProgøm.h
>

55 
	~<Arduöo.h
>

63 
	$u8g_com_¨duöo_p‹t_d_8bô_wr
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

65 
PORTD
 = 
vÆ
;

68 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_EN
, 
LOW
);

69 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_EN
, 
HIGH
);

70 
	}
}

73 
uöt8_t
 
	$u8g_com_¨duöo_p‹t_d_wr_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

76 
msg
)

78 
U8G_COM_MSG_INIT
:

80 #ifde‡
UCSR0B


81 
UCSR0B
 = 0;

83 
DDRD
 = 0x0ff;

84 
PORTD
 = 0x0ff;

87 i‡–
u8g
->
pö_li°
[
U8G_PI_RW
] !
U8G_PIN_NONE
 )

89 
	`pöMode
(
u8g
->
pö_li°
[
U8G_PI_RW
], 
OUTPUT
);

90 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RW
, 
HIGH
);

93 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

94 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_EN
, 
HIGH
);

96 
U8G_COM_MSG_STOP
:

98 
U8G_COM_MSG_CHIP_SELECT
:

99 i‡–
¨g_vÆ
 == 0 )

102 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
HIGH
);

103 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
HIGH
);

105 i‡–
¨g_vÆ
 == 1 )

108 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
LOW
);

109 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
HIGH
);

111 i‡–
¨g_vÆ
 == 2 )

114 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
HIGH
);

115 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
LOW
);

120 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
LOW
);

121 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
LOW
);

124 
U8G_COM_MSG_WRITE_BYTE
:

125 
	`u8g_com_¨duöo_p‹t_d_8bô_wr
(
u8g
, 
¨g_vÆ
);

127 
U8G_COM_MSG_WRITE_SEQ
:

129 
uöt8_t
 *
±r
 = 
¨g_±r
;

130  
¨g_vÆ
 > 0 )

132 
	`u8g_com_¨duöo_p‹t_d_8bô_wr
(
u8g
, *
±r
++);

133 
¨g_vÆ
--;

137 
U8G_COM_MSG_WRITE_SEQ_P
:

139 
uöt8_t
 *
±r
 = 
¨g_±r
;

140  
¨g_vÆ
 > 0 )

142 
	`u8g_com_¨duöo_p‹t_d_8bô_wr
(
u8g
, 
	`u8g_pgm_ªad
(
±r
));

143 
±r
++;

144 
¨g_vÆ
--;

148 
U8G_COM_MSG_ADDRESS
:

149 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_DI
, 
¨g_vÆ
);

151 
U8G_COM_MSG_RESET
:

152 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

153 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

157 
	}
}

162 
uöt8_t
 
	$u8g_com_¨duöo_p‹t_d_wr_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

165 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_arduino_ssd_i2c.c

55 
	~"u8g.h
"

57 
	#I2C_SLA
 (0x3c*2)

	)

59 
	#I2C_CMD_MODE
 0x000

	)

60 
	#I2C_DATA_MODE
 0x040

	)

63 
uöt8_t
 
	$u8g_com_¨duöo_ssd_°¨t_£quí˚
(
u8g_t
 *
u8g
)

66 i‡–
u8g
->
pö_li°
[
U8G_PI_SET_A0
] == 0 )

70 i‡–
	`u8g_i2c_°¨t
(
I2C_SLA
) == 0 )

72 i‡–
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] == 0 )

74 i‡–
	`u8g_i2c_£nd_byã
(
I2C_CMD_MODE
) == 0 )

79 i‡–
	`u8g_i2c_£nd_byã
(
I2C_DATA_MODE
) == 0 )

84 
u8g
->
pö_li°
[
U8G_PI_SET_A0
] = 0;

86 
	}
}

88 
uöt8_t
 
	$u8g_com_¨duöo_ssd_i2c_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

90 
msg
)

92 
U8G_COM_MSG_INIT
:

97 
	`u8g_i2c_öô
(
u8g
->
pö_li°
[
U8G_PI_I2C_OPTION
]);

101 
U8G_COM_MSG_STOP
:

104 
U8G_COM_MSG_RESET
:

109 
U8G_COM_MSG_CHIP_SELECT
:

110 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 0;

111 
u8g
->
pö_li°
[
U8G_PI_SET_A0
] = 1;

112 i‡–
¨g_vÆ
 == 0 )

115 
	`u8g_i2c_°›
();

123 
U8G_COM_MSG_WRITE_BYTE
:

125 i‡–
	`u8g_com_¨duöo_ssd_°¨t_£quí˚
(
u8g
) == 0 )

126  
	`u8g_i2c_°›
(), 0;

127 i‡–
	`u8g_i2c_£nd_byã
(
¨g_vÆ
) == 0 )

128  
	`u8g_i2c_°›
(), 0;

132 
U8G_COM_MSG_WRITE_SEQ
:

134 i‡–
	`u8g_com_¨duöo_ssd_°¨t_£quí˚
(
u8g
) == 0 )

135  
	`u8g_i2c_°›
(), 0;

137 
uöt8_t
 *
±r
 = 
¨g_±r
;

138  
¨g_vÆ
 > 0 )

140 i‡–
	`u8g_i2c_£nd_byã
(*
±r
++) == 0 )

141  
	`u8g_i2c_°›
(), 0;

142 
¨g_vÆ
--;

148 
U8G_COM_MSG_WRITE_SEQ_P
:

150 i‡–
	`u8g_com_¨duöo_ssd_°¨t_£quí˚
(
u8g
) == 0 )

151  
	`u8g_i2c_°›
(), 0;

153 
uöt8_t
 *
±r
 = 
¨g_±r
;

154  
¨g_vÆ
 > 0 )

156 i‡–
	`u8g_i2c_£nd_byã
(
	`u8g_pgm_ªad
(
±r
)) == 0 )

158 
±r
++;

159 
¨g_vÆ
--;

165 
U8G_COM_MSG_ADDRESS
:

166 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 
¨g_vÆ
;

167 
u8g
->
pö_li°
[
U8G_PI_SET_A0
] = 1;

169 #ifde‡
OLD_CODE


170 i‡–
i2c_°©e
 != 0 )

172 
	`u8g_i2c_°›
();

173 
i2c_°©e
 = 0;

176 i‡–
	`u8g_com_¨duöo_ssd_°¨t_£quí˚
(
¨g_vÆ
) == 0 )

201 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_arduino_st7920_hw_spi.c

38 
	~"u8g.h
"

40 #i‡
deföed
(
ARDUINO
)

42 #i‡
ARDUINO
 < 100

43 
	~<WProgøm.h
>

44 
	~"wúög_¥iv©e.h
"

45 
	~"pös_¨duöo.h
"

48 
	~<Arduöo.h
>

49 
	~"wúög_¥iv©e.h
"

52 #i‡
deföed
(
__AVR__
)

53 
	#U8G_ARDUINO_ATMEGA_HW_SPI


	)

56 #i‡
__AVR_ARCH__
 == 2

57 #unde‡
U8G_ATMEGA_HW_SPI


59 #i‡
__AVR_ARCH__
 == 25

60 #unde‡
U8G_ATMEGA_HW_SPI


66 #i‡
deföed
(
U8G_ARDUINO_ATMEGA_HW_SPI
)

68 
	~<avr/öãºu±.h
>

69 
	~<avr/io.h
>

71 
uöt8_t
 
	$u8g_¨duöo_°7920_hw_•i_shi·_out
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
Ë
U8G_NOINLINE
;

72 
uöt8_t
 
	$u8g_¨duöo_°7920_hw_•i_shi·_out
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

75 
SPDR
 = 
vÆ
;

77 !(
SPSR
 & (1<<
SPIF
)))

80  
SPDR
;

81 
	}
}

84 
	$u8g_com_¨duöo_°7920_wrôe_byã_hw_•i
(
u8g_t
 *
u8g
, 
uöt8_t
 
rs
, uöt8_à
vÆ
Ë
U8G_NOINLINE
;

85 
	$u8g_com_¨duöo_°7920_wrôe_byã_hw_•i
(
u8g_t
 *
u8g
, 
uöt8_t
 
rs
, uöt8_à
vÆ
)

87 
uöt8_t
 
i
;

89 i‡–
rs
 == 0 )

92 
	`u8g_¨duöo_°7920_hw_•i_shi·_out
(
u8g
, 0x0f8);

94 i‡–
rs
 == 1 )

97 
	`u8g_¨duöo_°7920_hw_•i_shi·_out
(
u8g
, 0x0fa);

104 
	`u8g_¨duöo_°7920_hw_•i_shi·_out
(
u8g
, 
vÆ
 & 0x0f0);

105 
	`u8g_¨duöo_°7920_hw_•i_shi·_out
(
u8g
, 
vÆ
 << 4);

107  
i
 = 0; i < 4; i++ )

108 
	`u8g_10Mi¸oDñay
();

109 
	}
}

112 
uöt8_t
 
	$u8g_com_¨duöo_°7920_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

114 
msg
)

116 
U8G_COM_MSG_INIT
:

117 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

118 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
LOW
);

120 
DDRB
 |
	`_BV
(3);

121 
DDRB
 |
	`_BV
(5);

122 
DDRB
 |
	`_BV
(2);

124 
PORTB
 &~
	`_BV
(3);

125 
PORTB
 &~
	`_BV
(5);

134 
SPCR
 = 0;

137 
SPCR
 = (1<<
SPE
Ë| (1<<
MSTR
)|(0<<
SPR1
)|(0<<
SPR0
)|(1<<
CPOL
)|(1<<
CPHA
);

138 #ifde‡
U8G_HW_SPI_2X


139 
SPSR
 = (1 << 
SPI2X
);

141 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 0;

144 
U8G_COM_MSG_STOP
:

147 
U8G_COM_MSG_RESET
:

148 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

149 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

152 
U8G_COM_MSG_CHIP_SELECT
:

153 i‡–
¨g_vÆ
 == 0 )

156 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
LOW
);

162 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
HIGH
);

166 
U8G_COM_MSG_WRITE_BYTE
:

167 
	`u8g_com_¨duöo_°7920_wrôe_byã_hw_•i
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], 
¨g_vÆ
);

172 
U8G_COM_MSG_WRITE_SEQ
:

174 
uöt8_t
 *
±r
 = 
¨g_±r
;

175  
¨g_vÆ
 > 0 )

177 
	`u8g_com_¨duöo_°7920_wrôe_byã_hw_•i
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], *
±r
++);

179 
¨g_vÆ
--;

184 
U8G_COM_MSG_WRITE_SEQ_P
:

186 
uöt8_t
 *
±r
 = 
¨g_±r
;

187  
¨g_vÆ
 > 0 )

189 
	`u8g_com_¨duöo_°7920_wrôe_byã_hw_•i
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], 
	`u8g_pgm_ªad
(
±r
) );

191 
±r
++;

192 
¨g_vÆ
--;

197 
U8G_COM_MSG_ADDRESS
:

198 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 
¨g_vÆ
;

202 
	}
}

206 
uöt8_t
 
	$u8g_com_¨duöo_°7920_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

209 
	}
}

214 
uöt8_t
 
	$u8g_com_¨duöo_°7920_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

217 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_arduino_st7920_spi.c

38 
	~"u8g.h
"

40 #i‡
deföed
(
ARDUINO
)

42 #i‡
ARDUINO
 < 100

43 
	~<WProgøm.h
>

44 
	~"wúög_¥iv©e.h
"

45 
	~"pös_¨duöo.h
"

48 
	~<Arduöo.h
>

49 
	~"wúög_¥iv©e.h
"

52 #i‡
deföed
(
__AVR__
)

54 
uöt8_t
 
	gu8g_bôD©a
, 
	gu8g_bôNŸD©a
;

55 
uöt8_t
 
	gu8g_bôClock
, 
	gu8g_bôNŸClock
;

56 vﬁ©ûê
uöt8_t
 *
	gu8g_outD©a
;

57 vﬁ©ûê
uöt8_t
 *
	gu8g_outClock
;

59 
	$u8g_com_¨duöo_öô_shi·_out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
)

61 
u8g_outD©a
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
d©aPö
));

62 
u8g_outClock
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
˛ockPö
));

63 
u8g_bôD©a
 = 
	`digôÆPöToBôMask
(
d©aPö
);

64 
u8g_bôClock
 = 
	`digôÆPöToBôMask
(
˛ockPö
);

66 
u8g_bôNŸClock
 = 
u8g_bôClock
;

67 
u8g_bôNŸClock
 ^= 0x0ff;

69 
u8g_bôNŸD©a
 = 
u8g_bôD©a
;

70 
u8g_bôNŸD©a
 ^= 0x0ff;

71 
	}
}

73 
	$u8g_com_¨duöo_do_shi·_out_msb_fú°
(
uöt8_t
 
vÆ
Ë
U8G_NOINLINE
;

74 
	$u8g_com_¨duöo_do_shi·_out_msb_fú°
(
uöt8_t
 
vÆ
)

76 
uöt8_t
 
˙t
 = 8;

77 
uöt8_t
 
bôD©a
 = 
u8g_bôD©a
;

78 
uöt8_t
 
bôNŸD©a
 = 
u8g_bôNŸD©a
;

79 
uöt8_t
 
bôClock
 = 
u8g_bôClock
;

80 
uöt8_t
 
bôNŸClock
 = 
u8g_bôNŸClock
;

81 vﬁ©ûê
uöt8_t
 *
outD©a
 = 
u8g_outD©a
;

82 vﬁ©ûê
uöt8_t
 *
outClock
 = 
u8g_outClock
;

85 i‡–
vÆ
 & 128 )

86 *
outD©a
 |
bôD©a
;

88 *
outD©a
 &
bôNŸD©a
;

97 
vÆ
 <<= 1;

98 *
outClock
 &
bôNŸClock
;

99 
˙t
--;

102 *
outClock
 |
bôClock
;

104 }  
˙t
 != 0 );

105 
	}
}

107 #ñi‡
deföed
(
__18CXX
Ë|| deföed(
__PIC32MX
)

109 
uöt16_t
 
	gdog_bôD©a
, 
	gdog_bôNŸD©a
;

110 
uöt16_t
 
	gdog_bôClock
, 
	gdog_bôNŸClock
;

111 vﬁ©ûê
uöt32_t
 *
	gdog_outD©a
;

112 vﬁ©ûê
uöt32_t
 *
	gdog_outClock
;

113 vﬁ©ûê
uöt32_t
 
	gdog_pic32_•i_tmp
;

115 
	$u8g_com_¨duöo_öô_shi·_out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
)

117 
dog_outD©a
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
d©aPö
));

118 
dog_outClock
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
˛ockPö
));

119 
dog_bôD©a
 = 
	`digôÆPöToBôMask
(
d©aPö
);

120 
dog_bôClock
 = 
	`digôÆPöToBôMask
(
˛ockPö
);

122 
dog_bôNŸClock
 = 
dog_bôClock
;

123 
dog_bôNŸClock
 ^= 0x0ffff;

125 
dog_bôNŸD©a
 = 
dog_bôD©a
;

126 
dog_bôNŸD©a
 ^= 0x0ffff;

127 
	}
}

129 
	$u8g_com_¨duöo_do_shi·_out_msb_fú°
(
uöt8_t
 
vÆ
)

131 
uöt8_t
 
˙t
 = 8;

134 i‡–
vÆ
 & 128 )

135 *
dog_outD©a
 |
dog_bôD©a
;

137 *
dog_outD©a
 &
dog_bôNŸD©a
;

138 
vÆ
 <<= 1;

141 *
dog_outClock
 &
dog_bôNŸClock
;

142 
˙t
--;

143 
	`u8g_Mi¸oDñay
();

145 *
dog_outClock
 |
dog_bôClock
;

146 
	`u8g_Mi¸oDñay
();

148 }  
˙t
 != 0 );

149 
	}
}

155 
uöt8_t
 
	gu8g_d©a_pö
;

156 
uöt8_t
 
	gu8g_˛ock_pö
;

158 
	$u8g_com_¨duöo_öô_shi·_out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
)

160 
u8g_d©a_pö
 = 
d©aPö
;

161 
u8g_˛ock_pö
 = 
˛ockPö
;

162 
	}
}

164 
	$u8g_com_¨duöo_do_shi·_out_msb_fú°
(
uöt8_t
 
vÆ
)

166 
uöt8_t
 
˙t
 = 8;

169 i‡–
vÆ
 & 128 )

170 
	`digôÆWrôe
(
u8g_d©a_pö
, 
HIGH
);

172 
	`digôÆWrôe
(
u8g_d©a_pö
, 
LOW
);

173 
vÆ
 <<= 1;

175 
	`digôÆWrôe
(
u8g_˛ock_pö
, 
LOW
);

176 
˙t
--;

177 
	`u8g_Mi¸oDñay
();

178 
	`digôÆWrôe
(
u8g_˛ock_pö
, 
HIGH
);

179 
	`u8g_Mi¸oDñay
();

180 }  
˙t
 != 0 );

181 
	}
}

188 
	$u8g_com_¨duöo_°7920_wrôe_byã
(
uöt8_t
 
rs
, uöt8_à
vÆ
)

190 
uöt8_t
 
i
;

192 i‡–
rs
 == 0 )

195 
	`u8g_com_¨duöo_do_shi·_out_msb_fú°
(0x0f8);

197 i‡–
rs
 == 1 )

200 
	`u8g_com_¨duöo_do_shi·_out_msb_fú°
(0x0fa);

203 
	`u8g_com_¨duöo_do_shi·_out_msb_fú°
(
vÆ
 & 0x0f0);

204 
	`u8g_com_¨duöo_do_shi·_out_msb_fú°
(
vÆ
 << 4);

206  
i
 = 0; i < 4; i++ )

207 
	`u8g_10Mi¸oDñay
();

209 
	}
}

213 
uöt8_t
 
	$u8g_com_¨duöo_°7920_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

215 
msg
)

217 
U8G_COM_MSG_INIT
:

218 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

219 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
LOW
);

221 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_SCK
, 
HIGH
);

222 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_MOSI
, 
LOW
);

223 
	`u8g_com_¨duöo_öô_shi·_out
(
u8g
->
pö_li°
[
U8G_PI_MOSI
], u8g->pö_li°[
U8G_PI_SCK
]);

224 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 0;

227 
U8G_COM_MSG_STOP
:

230 
U8G_COM_MSG_RESET
:

231 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

232 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

235 
U8G_COM_MSG_CHIP_SELECT
:

236 i‡–
¨g_vÆ
 == 0 )

239 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
LOW
);

245 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
HIGH
);

249 
U8G_COM_MSG_WRITE_BYTE
:

250 
	`u8g_com_¨duöo_°7920_wrôe_byã
–
u8g
->
pö_li°
[
U8G_PI_A0_STATE
], 
¨g_vÆ
);

255 
U8G_COM_MSG_WRITE_SEQ
:

257 
uöt8_t
 *
±r
 = 
¨g_±r
;

258  
¨g_vÆ
 > 0 )

260 
	`u8g_com_¨duöo_°7920_wrôe_byã
(
u8g
->
pö_li°
[
U8G_PI_A0_STATE
], *
±r
++);

262 
¨g_vÆ
--;

267 
U8G_COM_MSG_WRITE_SEQ_P
:

269 
uöt8_t
 *
±r
 = 
¨g_±r
;

270  
¨g_vÆ
 > 0 )

272 
	`u8g_com_¨duöo_°7920_wrôe_byã
(
u8g
->
pö_li°
[
U8G_PI_A0_STATE
], 
	`u8g_pgm_ªad
(
±r
) );

274 
±r
++;

275 
¨g_vÆ
--;

280 
U8G_COM_MSG_ADDRESS
:

281 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 
¨g_vÆ
;

285 
	}
}

289 
uöt8_t
 
	$u8g_com_¨duöo_°7920_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

292 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_arduino_std_sw_spi.c

37 
	~"u8g.h
"

40 #i‡
deföed
(
ARDUINO
)

42 #i‡
ARDUINO
 < 100

43 
	~<WProgøm.h
>

45 
	~<Arduöo.h
>

48 
	$u8g_¨duöo_sw_•i_shi·_out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
vÆ
)

50 
uöt8_t
 
i
 = 8;

53 i‡–
vÆ
 & 128 )

54 
	`digôÆWrôe
(
d©aPö
, 
HIGH
);

56 
	`digôÆWrôe
(
d©aPö
, 
LOW
);

57 
vÆ
 <<= 1;

58 
	`u8g_Mi¸oDñay
();

60 
	`digôÆWrôe
(
˛ockPö
, 
HIGH
);

61 
	`u8g_Mi¸oDñay
();

63 
	`digôÆWrôe
(
˛ockPö
, 
LOW
);

64 
	`u8g_Mi¸oDñay
();

66 
i
--;

67 }  
i
 != 0 );

68 
	}
}

70 
uöt8_t
 
	$u8g_com_¨duöo_°d_sw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

72 
msg
)

74 
U8G_COM_MSG_INIT
:

75 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

76 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_SCK
, 
LOW
);

77 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_MOSI
, 
LOW
);

80 
U8G_COM_MSG_STOP
:

83 
U8G_COM_MSG_RESET
:

84 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

85 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

88 
U8G_COM_MSG_CHIP_SELECT
:

89 i‡–
¨g_vÆ
 == 0 )

92 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
HIGH
);

97 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_SCK
, 
LOW
);

98 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
LOW
);

102 
U8G_COM_MSG_WRITE_BYTE
:

103 
	`u8g_¨duöo_sw_•i_shi·_out
(
u8g
->
pö_li°
[
U8G_PI_MOSI
], u8g->pö_li°[
U8G_PI_SCK
], 
¨g_vÆ
);

106 
U8G_COM_MSG_WRITE_SEQ
:

108 
uöt8_t
 *
±r
 = 
¨g_±r
;

109  
¨g_vÆ
 > 0 )

111 
	`u8g_¨duöo_sw_•i_shi·_out
(
u8g
->
pö_li°
[
U8G_PI_MOSI
], u8g->pö_li°[
U8G_PI_SCK
], *
±r
++);

112 
¨g_vÆ
--;

117 
U8G_COM_MSG_WRITE_SEQ_P
:

119 
uöt8_t
 *
±r
 = 
¨g_±r
;

120  
¨g_vÆ
 > 0 )

122 
	`u8g_¨duöo_sw_•i_shi·_out
(
u8g
->
pö_li°
[
U8G_PI_MOSI
], u8g->pö_li°[
U8G_PI_SCK
], 
	`u8g_pgm_ªad
(
±r
));

123 
±r
++;

124 
¨g_vÆ
--;

129 
U8G_COM_MSG_ADDRESS
:

130 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 
¨g_vÆ
);

134 
	}
}

138 
uöt8_t
 
	$u8g_com_¨duöo_°d_sw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

141 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_arduino_sw_spi.c

37 
	~"u8g.h
"

39 #i‡
deföed
(
ARDUINO
)

41 #i‡
ARDUINO
 < 100

42 
	~<WProgøm.h
>

43 
	~"wúög_¥iv©e.h
"

44 
	~"pös_¨duöo.h
"

47 
	~<Arduöo.h
>

48 
	~"wúög_¥iv©e.h
"

51 #i‡
deföed
(
__AVR__
)

53 
uöt8_t
 
	gu8g_bôD©a
, 
	gu8g_bôNŸD©a
;

54 
uöt8_t
 
	gu8g_bôClock
, 
	gu8g_bôNŸClock
;

55 vﬁ©ûê
uöt8_t
 *
	gu8g_outD©a
;

56 vﬁ©ûê
uöt8_t
 *
	gu8g_outClock
;

58 
	$u8g_com_¨duöo_öô_shi·_out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
)

60 
u8g_outD©a
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
d©aPö
));

61 
u8g_outClock
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
˛ockPö
));

62 
u8g_bôD©a
 = 
	`digôÆPöToBôMask
(
d©aPö
);

63 
u8g_bôClock
 = 
	`digôÆPöToBôMask
(
˛ockPö
);

65 
u8g_bôNŸClock
 = 
u8g_bôClock
;

66 
u8g_bôNŸClock
 ^= 0x0ff;

68 
u8g_bôNŸD©a
 = 
u8g_bôD©a
;

69 
u8g_bôNŸD©a
 ^= 0x0ff;

70 
	}
}

72 
	$u8g_com_¨duöo_do_shi·_out_msb_fú°
(
uöt8_t
 
vÆ
Ë
U8G_NOINLINE
;

73 
	$u8g_com_¨duöo_do_shi·_out_msb_fú°
(
uöt8_t
 
vÆ
)

75 
uöt8_t
 
˙t
 = 8;

76 
uöt8_t
 
bôD©a
 = 
u8g_bôD©a
;

77 
uöt8_t
 
bôNŸD©a
 = 
u8g_bôNŸD©a
;

78 
uöt8_t
 
bôClock
 = 
u8g_bôClock
;

79 
uöt8_t
 
bôNŸClock
 = 
u8g_bôNŸClock
;

80 vﬁ©ûê
uöt8_t
 *
outD©a
 = 
u8g_outD©a
;

81 vﬁ©ûê
uöt8_t
 *
outClock
 = 
u8g_outClock
;

84 i‡–
vÆ
 & 128 )

85 *
outD©a
 |
bôD©a
;

87 *
outD©a
 &
bôNŸD©a
;

89 *
outClock
 |
bôClock
;

90 
vÆ
 <<= 1;

91 
˙t
--;

92 *
outClock
 &
bôNŸClock
;

93 }  
˙t
 != 0 );

94 
	}
}

96 #ñi‡
deföed
(
__18CXX
Ë|| deföed(
__PIC32MX
)

98 
uöt16_t
 
	gdog_bôD©a
, 
	gdog_bôNŸD©a
;

99 
uöt16_t
 
	gdog_bôClock
, 
	gdog_bôNŸClock
;

100 vﬁ©ûê
uöt32_t
 *
	gdog_outD©a
;

101 vﬁ©ûê
uöt32_t
 *
	gdog_outClock
;

102 vﬁ©ûê
uöt32_t
 
	gdog_pic32_•i_tmp
;

104 
	$u8g_com_¨duöo_öô_shi·_out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
)

106 
dog_outD©a
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
d©aPö
));

107 
dog_outClock
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
˛ockPö
));

108 
dog_bôD©a
 = 
	`digôÆPöToBôMask
(
d©aPö
);

109 
dog_bôClock
 = 
	`digôÆPöToBôMask
(
˛ockPö
);

111 
dog_bôNŸClock
 = 
dog_bôClock
;

112 
dog_bôNŸClock
 ^= 0x0ffff;

114 
dog_bôNŸD©a
 = 
dog_bôD©a
;

115 
dog_bôNŸD©a
 ^= 0x0ffff;

116 
	}
}

118 
	$u8g_com_¨duöo_do_shi·_out_msb_fú°
(
uöt8_t
 
vÆ
)

120 
uöt8_t
 
˙t
 = 8;

123 i‡–
vÆ
 & 128 )

124 *
dog_outD©a
 |
dog_bôD©a
;

126 *
dog_outD©a
 &
dog_bôNŸD©a
;

127 
vÆ
 <<= 1;

134 *
dog_outClock
 |
dog_bôClock
;

135 
˙t
--;

136 *
dog_outClock
 &
dog_bôNŸClock
;

141 
dog_pic32_•i_tmp
 = *
dog_outClock
;

142 
dog_pic32_•i_tmp
 = *
dog_outClock
;

143 
dog_pic32_•i_tmp
 = *
dog_outClock
;

144 }  
˙t
 != 0 );

145 
	}
}

150 
	$u8g_com_¨duöo_öô_shi·_out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
)

152 
	}
}

154 
	$u8g_com_¨duöo_do_shi·_out_msb_fú°
(
uöt8_t
 
vÆ
)

156 
	}
}

161 
uöt8_t
 
	$u8g_com_¨duöo_sw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

163 
msg
)

165 
U8G_COM_MSG_INIT
:

166 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

167 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_SCK
, 
LOW
);

168 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_MOSI
, 
LOW
);

169 
	`u8g_com_¨duöo_öô_shi·_out
(
u8g
->
pö_li°
[
U8G_PI_MOSI
], u8g->pö_li°[
U8G_PI_SCK
]);

172 
U8G_COM_MSG_STOP
:

175 
U8G_COM_MSG_RESET
:

176 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

177 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

180 
U8G_COM_MSG_CHIP_SELECT
:

181 i‡–
¨g_vÆ
 == 0 )

184 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
HIGH
);

189 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_SCK
, 
LOW
);

190 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
LOW
);

194 
U8G_COM_MSG_WRITE_BYTE
:

195 
	`u8g_com_¨duöo_do_shi·_out_msb_fú°
–
¨g_vÆ
 );

199 
U8G_COM_MSG_WRITE_SEQ
:

201 
uöt8_t
 *
±r
 = 
¨g_±r
;

202  
¨g_vÆ
 > 0 )

204 
	`u8g_com_¨duöo_do_shi·_out_msb_fú°
(*
±r
++);

206 
¨g_vÆ
--;

211 
U8G_COM_MSG_WRITE_SEQ_P
:

213 
uöt8_t
 *
±r
 = 
¨g_±r
;

214  
¨g_vÆ
 > 0 )

216 
	`u8g_com_¨duöo_do_shi·_out_msb_fú°
–
	`u8g_pgm_ªad
(
±r
) );

218 
±r
++;

219 
¨g_vÆ
--;

224 
U8G_COM_MSG_ADDRESS
:

225 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 
¨g_vÆ
);

229 
	}
}

233 
uöt8_t
 
	$u8g_com_¨duöo_sw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

236 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_arduino_t6963.c

55 
	~"u8g.h
"

57 #i‡ 
deföed
(
ARDUINO
)

59 #i‡
ARDUINO
 < 100

61 
	~<wúög_¥iv©e.h
>

62 
	~<pös_¨duöo.h
>

64 
	~<Arduöo.h
>

68 #i‡
deföed
(
__PIC32MX
)

70 vﬁ©ûê
uöt32_t
 *
	gu8g_ouçut_d©a_p‹t
[8];

71 vﬁ©ûê
uöt32_t
 *
	gu8g_öput_d©a_p‹t
[8];

72 vﬁ©ûê
uöt32_t
 *
	gu8g_mode_p‹t
[8];

73 
uöt32_t
 
	gu8g_d©a_mask
[8];

75 vﬁ©ûê
uöt8_t
 *
	gu8g_ouçut_d©a_p‹t
[8];

76 vﬁ©ûê
uöt8_t
 *
	gu8g_öput_d©a_p‹t
[8];

77 vﬁ©ûê
uöt8_t
 *
	gu8g_mode_p‹t
[8];

78 
uöt8_t
 
	gu8g_d©a_mask
[8];

83 
	$u8g_com_¨duöo_t6963_öô
(
u8g_t
 *
u8g
)

85 
u8g_ouçut_d©a_p‹t
[0] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D0
]));

86 
u8g_öput_d©a_p‹t
[0] = 
	`p‹tI≈utRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D0
]));

87 
u8g_mode_p‹t
[0] = 
	`p‹tModeRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D0
]));

88 
u8g_d©a_mask
[0] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D0
]);

90 
u8g_ouçut_d©a_p‹t
[1] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D1
]));

91 
u8g_öput_d©a_p‹t
[1] = 
	`p‹tI≈utRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D1
]));

92 
u8g_mode_p‹t
[1] = 
	`p‹tModeRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D1
]));

93 
u8g_d©a_mask
[1] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D1
]);

95 
u8g_ouçut_d©a_p‹t
[2] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D2
]));

96 
u8g_öput_d©a_p‹t
[2] = 
	`p‹tI≈utRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D2
]));

97 
u8g_mode_p‹t
[2] = 
	`p‹tModeRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D2
]));

98 
u8g_d©a_mask
[2] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D2
]);

100 
u8g_ouçut_d©a_p‹t
[3] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D3
]));

101 
u8g_öput_d©a_p‹t
[3] = 
	`p‹tI≈utRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D3
]));

102 
u8g_mode_p‹t
[3] = 
	`p‹tModeRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D3
]));

103 
u8g_d©a_mask
[3] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D3
]);

105 
u8g_ouçut_d©a_p‹t
[4] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D4
]));

106 
u8g_öput_d©a_p‹t
[4] = 
	`p‹tI≈utRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D4
]));

107 
u8g_mode_p‹t
[4] = 
	`p‹tModeRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D4
]));

108 
u8g_d©a_mask
[4] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D4
]);

110 
u8g_ouçut_d©a_p‹t
[5] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D5
]));

111 
u8g_öput_d©a_p‹t
[5] = 
	`p‹tI≈utRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D5
]));

112 
u8g_mode_p‹t
[5] = 
	`p‹tModeRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D5
]));

113 
u8g_d©a_mask
[5] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D5
]);

115 
u8g_ouçut_d©a_p‹t
[6] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D6
]));

116 
u8g_öput_d©a_p‹t
[6] = 
	`p‹tI≈utRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D6
]));

117 
u8g_mode_p‹t
[6] = 
	`p‹tModeRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D6
]));

118 
u8g_d©a_mask
[6] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D6
]);

120 
u8g_ouçut_d©a_p‹t
[7] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D7
]));

121 
u8g_öput_d©a_p‹t
[7] = 
	`p‹tI≈utRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D7
]));

122 
u8g_mode_p‹t
[7] = 
	`p‹tModeRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D7
]));

123 
u8g_d©a_mask
[7] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D7
]);

124 
	}
}

126 
	$u8g_com_¨duöo_t6963_wrôe_d©a_pö
(
uöt8_t
 
pö
, uöt8_à
vÆ
)

128 i‡–
vÆ
 != 0 )

129 *
u8g_ouçut_d©a_p‹t
[
pö
] |
u8g_d©a_mask
[pin];

131 *
u8g_ouçut_d©a_p‹t
[
pö
] &~
u8g_d©a_mask
[pin];

132 
	}
}

134 
	$u8g_com_¨duöo_t6963_£t_p‹t_ouçut
()

136 
uöt8_t
 
i
;

137  
i
 = 0; i < 8; i++ )

139 #i‡
	`deföed
(
__PIC32MX
)

141 *
u8g_mode_p‹t
[
i
] |
u8g_d©a_mask
[i];

142 #ñi‡
	`deföed
(
__AVR__
)

143 *
u8g_mode_p‹t
[
i
] |
u8g_d©a_mask
[i];

146 *
u8g_mode_p‹t
[
i
] |
u8g_d©a_mask
[i];

150 
	}
}

152 
	$u8g_com_¨duöo_t6963_£t_p‹t_öput
()

154 
uöt8_t
 
i
;

155  
i
 = 0; i < 8; i++ )

157 #i‡
	`deföed
(
__PIC32MX
)

159 *
u8g_mode_p‹t
[
i
] &~
u8g_d©a_mask
[i];

160 #ñi‡
	`deföed
(
__AVR__
)

162 *
u8g_mode_p‹t
[
i
] &~
u8g_d©a_mask
[i];

163 *
u8g_ouçut_d©a_p‹t
[
i
] &~
u8g_d©a_mask
[i];

166 *
u8g_mode_p‹t
[
i
] &~
u8g_d©a_mask
[i];

167 *
u8g_ouçut_d©a_p‹t
[
i
] &~
u8g_d©a_mask
[i];

170 
	}
}

173 
	$u8g_com_¨duöo_t6963_wrôe
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

175 
	`u8g_com_¨duöo_t6963_wrôe_d©a_pö
–0, 
vÆ
&1 );

176 
vÆ
 >>= 1;

177 
	`u8g_com_¨duöo_t6963_wrôe_d©a_pö
–1, 
vÆ
&1 );

178 
vÆ
 >>= 1;

179 
	`u8g_com_¨duöo_t6963_wrôe_d©a_pö
–2, 
vÆ
&1 );

180 
vÆ
 >>= 1;

181 
	`u8g_com_¨duöo_t6963_wrôe_d©a_pö
–3, 
vÆ
&1 );

182 
vÆ
 >>= 1;

184 
	`u8g_com_¨duöo_t6963_wrôe_d©a_pö
–4, 
vÆ
&1 );

185 
vÆ
 >>= 1;

186 
	`u8g_com_¨duöo_t6963_wrôe_d©a_pö
–5, 
vÆ
&1 );

187 
vÆ
 >>= 1;

188 
	`u8g_com_¨duöo_t6963_wrôe_d©a_pö
–6, 
vÆ
&1 );

189 
vÆ
 >>= 1;

190 
	`u8g_com_¨duöo_t6963_wrôe_d©a_pö
–7, 
vÆ
&1 );

191 
vÆ
 >>= 1;

193 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_WR
, 0);

194 
	`u8g_Mi¸oDñay
();

195 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_WR
, 1);

196 
	`u8g_Mi¸oDñay
();

197 
	}
}

199 
uöt8_t
 
	$u8g_com_¨duöo_t6963_ªad
(
u8g_t
 *
u8g
)

201 
uöt8_t
 
vÆ
 = 0;

203 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RD
, 0);

204 
	`u8g_Mi¸oDñay
();

207 i‡–(*
u8g_öput_d©a_p‹t
[3] & 
u8g_d©a_mask
[3]) != 0 )

208 
vÆ
++;

209 
vÆ
 <<= 1;

210 
vÆ
 <<= 1;

211 i‡–(*
u8g_öput_d©a_p‹t
[1] & 
u8g_d©a_mask
[1]) != 0 )

212 
vÆ
++;

213 
vÆ
 <<= 1;

214 i‡–(*
u8g_öput_d©a_p‹t
[0] & 
u8g_d©a_mask
[0]) != 0 )

215 
vÆ
++;

217 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RD
, 1);

218 
	`u8g_Mi¸oDñay
();

220  
vÆ
;

221 
	}
}

223 
	#U8G_STATUS_TIMEOUT
 50

	)

225 
uöt8_t
 
	$u8g_com_¨duöo_t6963_u¡û_01_ok
(
u8g_t
 *
u8g
)

227 
x
;

229 
	`u8g_com_¨duöo_t6963_£t_p‹t_öput
();

230 
x
 = 
	`mûlis
();

231 
x
 +
U8G_STATUS_TIMEOUT
;

235 i‡–(
	`u8g_com_¨duöo_t6963_ªad
(
u8g
) & 3) == 3 )

237 i‡–
x
 < 
	`mûlis
() )

240 
	`u8g_com_¨duöo_t6963_£t_p‹t_ouçut
();

242 
	}
}

244 
uöt8_t
 
	$u8g_com_¨duöo_t6963_u¡û_3_ok
(
u8g_t
 *
u8g
)

246 
x
;

248 
	`u8g_com_¨duöo_t6963_£t_p‹t_öput
();

249 
x
 = 
	`mûlis
();

250 
x
 +
U8G_STATUS_TIMEOUT
;

254 i‡–(
	`u8g_com_¨duöo_t6963_ªad
(
u8g
) & 8) == 8 )

256 i‡–
x
 < 
	`mûlis
() )

259 
	`u8g_com_¨duöo_t6963_£t_p‹t_ouçut
();

261 
	}
}

263 
uöt8_t
 
	$u8g_com_¨duöo_t6963_wrôe_cmd
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

265 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 1);

266 i‡–
	`u8g_com_¨duöo_t6963_u¡û_01_ok
(
u8g
) == 0 )

268 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 1);

269 
	`u8g_com_¨duöo_t6963_wrôe
(
u8g
, 
vÆ
);

271 
	}
}

273 
uöt8_t
 
	$u8g_com_¨duöo_t6963_wrôe_d©a
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

275 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 1);

276 i‡–
	`u8g_com_¨duöo_t6963_u¡û_01_ok
(
u8g
) == 0 )

278 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 0);

279 
	`u8g_com_¨duöo_t6963_wrôe
(
u8g
, 
vÆ
);

281 
	}
}

283 
uöt8_t
 
	$u8g_com_¨duöo_t6963_wrôe_auto_d©a
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

285 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 1);

286 i‡–
	`u8g_com_¨duöo_t6963_u¡û_3_ok
(
u8g
) == 0 )

288 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 0);

289 
	`u8g_com_¨duöo_t6963_wrôe
(
u8g
, 
vÆ
);

291 
	}
}

294 
uöt8_t
 
	$u8g_com_¨duöo_t6963_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

296 
msg
)

298 
U8G_COM_MSG_INIT
:

299 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 0;

300 
	`u8g_com_¨duöo_t6963_öô
(
u8g
);

302 i‡–
u8g
->
pö_li°
[
U8G_PI_WR
] !
U8G_PIN_NONE
 )

304 
	`pöMode
(
u8g
->
pö_li°
[
U8G_PI_WR
], 
OUTPUT
);

305 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_WR
, 
HIGH
);

308 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

310 
U8G_COM_MSG_STOP
:

313 
U8G_COM_MSG_CHIP_SELECT
:

314 i‡–
¨g_vÆ
 == 0 )

317 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
HIGH
);

322 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
LOW
);

325 
U8G_COM_MSG_WRITE_BYTE
:

326 i‡–
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] == 0 )

328 
	`u8g_com_¨duöo_t6963_wrôe_d©a
(
u8g
, 
¨g_vÆ
);

332 
	`u8g_com_¨duöo_t6963_wrôe_cmd
(
u8g
, 
¨g_vÆ
);

335 
U8G_COM_MSG_WRITE_SEQ
:

337 
uöt8_t
 *
±r
 = 
¨g_±r
;

338 
	`u8g_com_¨duöo_t6963_wrôe_cmd
(
u8g
, 0x0b0);

339  
¨g_vÆ
 > 0 )

341 i‡–
	`u8g_com_¨duöo_t6963_wrôe_auto_d©a
(
u8g
, *
±r
++) == 0 )

343 
¨g_vÆ
--;

345 
	`u8g_com_¨duöo_t6963_wrôe_cmd
(
u8g
, 0x0b2);

348 
U8G_COM_MSG_WRITE_SEQ_P
:

350 
uöt8_t
 *
±r
 = 
¨g_±r
;

351 
	`u8g_com_¨duöo_t6963_wrôe_cmd
(
u8g
, 0x0b0);

352  
¨g_vÆ
 > 0 )

354 i‡–
	`u8g_com_¨duöo_t6963_wrôe_auto_d©a
(
u8g
, 
	`u8g_pgm_ªad
(
±r
)) == 0 )

356 
±r
++;

357 
¨g_vÆ
--;

359 
	`u8g_com_¨duöo_t6963_wrôe_cmd
(
u8g
, 0x0b2);

362 
U8G_COM_MSG_ADDRESS
:

363 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 
¨g_vÆ
;

366 
U8G_COM_MSG_RESET
:

367 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

368 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

373 
	}
}

378 
uöt8_t
 
	$u8g_com_¨duöo_t6963_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

381 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_atmega_hw_spi.c

42 
	~"u8g.h
"

45 #i‡
deföed
(
__AVR__
)

46 
	#U8G_ATMEGA_HW_SPI


	)

49 #i‡
__AVR_ARCH__
 == 2

50 #unde‡
U8G_ATMEGA_HW_SPI


52 #i‡
__AVR_ARCH__
 == 25

53 #unde‡
U8G_ATMEGA_HW_SPI


58 #i‡
deföed
(
U8G_ATMEGA_HW_SPI
)

60 
	~<avr/öãºu±.h
>

61 
	~<avr/io.h
>

64 
uöt8_t
 
	$u8g_©mega_•i_out
(
uöt8_t
 
d©a
)

68 
SPDR
 = 
d©a
;

70 !(
SPSR
 & (1<<
SPIF
)))

73  
SPDR
;

74 
	}
}

77 
uöt8_t
 
	$u8g_com_©mega_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

79 
msg
)

81 
U8G_COM_MSG_STOP
:

84 
U8G_COM_MSG_INIT
:

86 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_CS
);

87 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_A0
);

89 
DDRB
 |
	`_BV
(3);

90 
DDRB
 |
	`_BV
(5);

91 
DDRB
 |
	`_BV
(2);

93 
PORTB
 &~
	`_BV
(3);

94 
PORTB
 &~
	`_BV
(5);

95 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 1);

104 
SPCR
 = 0;

105 
SPCR
 = (1<<
SPE
Ë| (1<<
MSTR
)|(0<<
SPR1
)|(0<<
SPR0
)|(0<<
CPOL
)|(0<<
CPHA
);

106 #ifde‡
U8G_HW_SPI_2X


107 
SPSR
 = (1 << 
SPI2X
);

112 
U8G_COM_MSG_ADDRESS
:

113 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_A0
, 
¨g_vÆ
);

116 
U8G_COM_MSG_CHIP_SELECT
:

118 i‡–
¨g_vÆ
 == 0 )

121 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 1);

125 
PORTB
 &~
	`_BV
(5);

127 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 0);

132 
U8G_COM_MSG_RESET
:

133 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

136 
U8G_COM_MSG_WRITE_BYTE
:

137 
	`u8g_©mega_•i_out
(
¨g_vÆ
);

140 
U8G_COM_MSG_WRITE_SEQ
:

142 
uöt8_t
 *
±r
 = 
¨g_±r
;

143  
¨g_vÆ
 > 0 )

145 
	`u8g_©mega_•i_out
(*
±r
++);

146 
¨g_vÆ
--;

150 
U8G_COM_MSG_WRITE_SEQ_P
:

152 
uöt8_t
 *
±r
 = 
¨g_±r
;

153  
¨g_vÆ
 > 0 )

155 
	`u8g_©mega_•i_out
(
	`u8g_pgm_ªad
(
±r
));

156 
±r
++;

157 
¨g_vÆ
--;

163 
	}
}

167 
uöt8_t
 
	$u8g_com_©mega_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

170 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_atmega_parallel.c

55 
	~"u8g.h
"

57 #i‡
deföed
(
__AVR__
)

59 
	$u8g_com_©mega_∑øŒñ_wrôe
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
Ë
U8G_NOINLINE
;

60 
	$u8g_com_©mega_∑øŒñ_wrôe
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

63 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_D0
, 
vÆ
&1);

64 
vÆ
 >>= 1;

65 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_D1
, 
vÆ
&1);

66 
vÆ
 >>= 1;

67 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_D2
, 
vÆ
&1);

68 
vÆ
 >>= 1;

69 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_D3
, 
vÆ
&1);

70 
vÆ
 >>= 1;

71 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_D4
, 
vÆ
&1);

72 
vÆ
 >>= 1;

73 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_D5
, 
vÆ
&1);

74 
vÆ
 >>= 1;

75 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_D6
, 
vÆ
&1);

76 
vÆ
 >>= 1;

77 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_D7
, 
vÆ
&1);

80 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_EN
, 1);

81 
	`u8g_Mi¸oDñay
();

82 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_EN
, 0);

83 
	`u8g_10Mi¸oDñay
();

84 
	`u8g_10Mi¸oDñay
();

85 
	}
}

88 
uöt8_t
 
	$u8g_com_©mega_∑øŒñ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

90 
msg
)

92 
U8G_COM_MSG_INIT
:

94 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_RW
);

95 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_RW
, 0);

97 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_D0
);

98 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_D1
);

99 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_D2
);

100 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_D3
);

101 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_D4
);

102 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_D5
);

103 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_D6
);

104 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_D7
);

105 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_EN
);

106 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_CS1
);

107 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_CS2
);

108 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_DI
);

109 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS1
, 1);

110 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS2
, 1);

113 
U8G_COM_MSG_STOP
:

115 
U8G_COM_MSG_CHIP_SELECT
:

116 i‡–
¨g_vÆ
 == 0 )

119 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS1
, 1);

120 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS2
, 1);

122 i‡–
¨g_vÆ
 == 1 )

125 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS1
, 0);

126 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS2
, 1);

128 i‡–
¨g_vÆ
 == 2 )

131 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS1
, 1);

132 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS2
, 0);

137 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS1
, 0);

138 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS2
, 0);

141 
U8G_COM_MSG_WRITE_BYTE
:

142 
	`u8g_com_©mega_∑øŒñ_wrôe
(
u8g
, 
¨g_vÆ
);

144 
U8G_COM_MSG_WRITE_SEQ
:

146 
uöt8_t
 *
±r
 = 
¨g_±r
;

147  
¨g_vÆ
 > 0 )

149 
	`u8g_com_©mega_∑øŒñ_wrôe
(
u8g
, *
±r
++);

150 
¨g_vÆ
--;

154 
U8G_COM_MSG_WRITE_SEQ_P
:

156 
uöt8_t
 *
±r
 = 
¨g_±r
;

157  
¨g_vÆ
 > 0 )

159 
	`u8g_com_©mega_∑øŒñ_wrôe
(
u8g
, 
	`u8g_pgm_ªad
(
±r
));

160 
±r
++;

161 
¨g_vÆ
--;

165 
U8G_COM_MSG_ADDRESS
:

166 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_DI
, 
¨g_vÆ
);

168 
U8G_COM_MSG_RESET
:

169 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

173 
	}
}

177 
uöt8_t
 
	$u8g_com_©mega_∑øŒñ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

180 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_atmega_st7920_hw_spi.c

44 
	~"u8g.h
"

46 #i‡
deföed
(
__AVR__
)

47 
	#U8G_ATMEGA_HW_SPI


	)

50 #i‡
__AVR_ARCH__
 == 2

51 #unde‡
U8G_ATMEGA_HW_SPI


53 #i‡
__AVR_ARCH__
 == 25

54 #unde‡
U8G_ATMEGA_HW_SPI


59 #i‡
deföed
(
U8G_ATMEGA_HW_SPI
)

61 
	~<avr/öãºu±.h
>

62 
	~<avr/io.h
>

64 
uöt8_t
 
	$u8g_©mega_°7920_hw_•i_shi·_out
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
Ë
U8G_NOINLINE
;

65 
uöt8_t
 
	$u8g_©mega_°7920_hw_•i_shi·_out
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

68 
SPDR
 = 
vÆ
;

70 !(
SPSR
 & (1<<
SPIF
)))

73  
SPDR
;

74 
	}
}

77 
	$u8g_com_©mega_°7920_wrôe_byã_hw_•i
(
u8g_t
 *
u8g
, 
uöt8_t
 
rs
, uöt8_à
vÆ
Ë
U8G_NOINLINE
;

78 
	$u8g_com_©mega_°7920_wrôe_byã_hw_•i
(
u8g_t
 *
u8g
, 
uöt8_t
 
rs
, uöt8_à
vÆ
)

80 
uöt8_t
 
i
;

82 i‡–
rs
 == 0 )

85 
	`u8g_©mega_°7920_hw_•i_shi·_out
(
u8g
, 0x0f8);

87 i‡–
rs
 == 1 )

90 
	`u8g_©mega_°7920_hw_•i_shi·_out
(
u8g
, 0x0fa);

93 
	`u8g_©mega_°7920_hw_•i_shi·_out
(
u8g
, 
vÆ
 & 0x0f0);

94 
	`u8g_©mega_°7920_hw_•i_shi·_out
(
u8g
, 
vÆ
 << 4);

96  
i
 = 0; i < 4; i++ )

97 
	`u8g_10Mi¸oDñay
();

98 
	}
}

101 
uöt8_t
 
	$u8g_com_©mega_°7920_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

103 
msg
)

105 
U8G_COM_MSG_INIT
:

106 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_CS
);

109 
DDRB
 |
	`_BV
(3);

110 
DDRB
 |
	`_BV
(5);

111 
DDRB
 |
	`_BV
(2);

113 
PORTB
 &~
	`_BV
(3);

114 
PORTB
 &~
	`_BV
(5);

115 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 1);

124 
SPCR
 = 0;

128 
SPCR
 = (1<<
SPE
Ë| (1<<
MSTR
)|(0<<
SPR1
)|(0<<
SPR0
)|(0<<
CPOL
)|(0<<
CPHA
);

129 #ifde‡
U8G_HW_SPI_2X


130 
SPSR
 = (1 << 
SPI2X
);

132 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 0;

135 
U8G_COM_MSG_STOP
:

138 
U8G_COM_MSG_RESET
:

139 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

142 
U8G_COM_MSG_ADDRESS
:

143 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 
¨g_vÆ
;

146 
U8G_COM_MSG_CHIP_SELECT
:

147 i‡–
¨g_vÆ
 == 0 )

150 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 0);

156 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 1);

161 
U8G_COM_MSG_WRITE_BYTE
:

162 
	`u8g_com_©mega_°7920_wrôe_byã_hw_•i
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], 
¨g_vÆ
);

166 
U8G_COM_MSG_WRITE_SEQ
:

168 
uöt8_t
 *
±r
 = 
¨g_±r
;

169  
¨g_vÆ
 > 0 )

171 
	`u8g_com_©mega_°7920_wrôe_byã_hw_•i
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], *
±r
++);

173 
¨g_vÆ
--;

178 
U8G_COM_MSG_WRITE_SEQ_P
:

180 
uöt8_t
 *
±r
 = 
¨g_±r
;

181  
¨g_vÆ
 > 0 )

183 
	`u8g_com_©mega_°7920_wrôe_byã_hw_•i
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], 
	`u8g_pgm_ªad
(
±r
));

185 
±r
++;

186 
¨g_vÆ
--;

192 
	}
}

197 
uöt8_t
 
	$u8g_com_©mega_°7920_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

200 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_atmega_st7920_spi.c

38 
	~"u8g.h
"

40 #i‡
deföed
(
__AVR__
)

42 
	$u8g_©mega_°7920_sw_•i_shi·_out
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
Ë
U8G_NOINLINE
;

43 
	$u8g_©mega_°7920_sw_•i_shi·_out
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

45 
uöt8_t
 
i
 = 8;

48 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_MOSI
, 
vÆ
 & 128 );

49 
vÆ
 <<= 1;

50 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_SCK
, 1 );

51 
	`u8g_Mi¸oDñay
();

52 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_SCK
, 0 );

53 
	`u8g_Mi¸oDñay
();

54 
i
--;

55 }  
i
 != 0 );

56 
	}
}

58 
	$u8g_com_©mega_°7920_wrôe_byã
(
u8g_t
 *
u8g
, 
uöt8_t
 
rs
, uöt8_à
vÆ
Ë
U8G_NOINLINE
;

59 
	$u8g_com_©mega_°7920_wrôe_byã
(
u8g_t
 *
u8g
, 
uöt8_t
 
rs
, uöt8_à
vÆ
)

61 
uöt8_t
 
i
;

63 i‡–
rs
 == 0 )

66 
	`u8g_©mega_°7920_sw_•i_shi·_out
(
u8g
, 0x0f8);

68 i‡–
rs
 == 1 )

71 
	`u8g_©mega_°7920_sw_•i_shi·_out
(
u8g
, 0x0fa);

74 
	`u8g_©mega_°7920_sw_•i_shi·_out
(
u8g
, 
vÆ
 & 0x0f0);

75 
	`u8g_©mega_°7920_sw_•i_shi·_out
(
u8g
, 
vÆ
 << 4);

77  
i
 = 0; i < 4; i++ )

78 
	`u8g_10Mi¸oDñay
();

79 
	}
}

82 
uöt8_t
 
	$u8g_com_©mega_°7920_sw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

84 
msg
)

86 
U8G_COM_MSG_INIT
:

87 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_SCK
);

88 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_MOSI
);

90 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_CS
);

91 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_RESET
);

93 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_SCK
, 0 );

94 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_MOSI
, 0 );

95 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 0 );

98 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 0;

101 
U8G_COM_MSG_STOP
:

104 
U8G_COM_MSG_RESET
:

105 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

108 
U8G_COM_MSG_ADDRESS
:

109 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 
¨g_vÆ
;

112 
U8G_COM_MSG_CHIP_SELECT
:

113 i‡–
¨g_vÆ
 == 0 )

116 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 0);

122 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 1);

127 
U8G_COM_MSG_WRITE_BYTE
:

128 
	`u8g_com_©mega_°7920_wrôe_byã
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], 
¨g_vÆ
);

129 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 2;

132 
U8G_COM_MSG_WRITE_SEQ
:

134 
uöt8_t
 *
±r
 = 
¨g_±r
;

135  
¨g_vÆ
 > 0 )

137 
	`u8g_com_©mega_°7920_wrôe_byã
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], *
±r
++);

138 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 2;

139 
¨g_vÆ
--;

144 
U8G_COM_MSG_WRITE_SEQ_P
:

146 
uöt8_t
 *
±r
 = 
¨g_±r
;

147  
¨g_vÆ
 > 0 )

149 
	`u8g_com_©mega_°7920_wrôe_byã
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], 
	`u8g_pgm_ªad
(
±r
));

150 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 2;

151 
±r
++;

152 
¨g_vÆ
--;

158 
	}
}

163 
uöt8_t
 
	$u8g_com_©mega_°7920_sw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

166 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_atmega_sw_spi.c

37 
	~"u8g.h
"

39 #i‡
deföed
(
__AVR__
)

41 
	$u8g_©mega_sw_•i_shi·_out
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
Ë
U8G_NOINLINE
;

42 
	$u8g_©mega_sw_•i_shi·_out
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

44 
uöt8_t
 
i
 = 8;

47 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_MOSI
, 
vÆ
 & 128 );

48 
vÆ
 <<= 1;

49 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_SCK
, 1 );

50 
	`u8g_Mi¸oDñay
();

51 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_SCK
, 0 );

52 
	`u8g_Mi¸oDñay
();

53 
i
--;

54 }  
i
 != 0 );

55 
	}
}

57 
uöt8_t
 
	$u8g_com_©mega_sw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

59 
msg
)

61 
U8G_COM_MSG_INIT
:

62 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_SCK
);

63 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_MOSI
);

64 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_A0
);

65 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_CS
);

66 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_RESET
);

68 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_SCK
, 0 );

69 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_MOSI
, 0 );

70 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 1 );

71 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_A0
, 0);

74 
U8G_COM_MSG_STOP
:

77 
U8G_COM_MSG_ADDRESS
:

78 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_A0
, 
¨g_vÆ
);

81 
U8G_COM_MSG_CHIP_SELECT
:

83 i‡–
¨g_vÆ
 == 0 )

86 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 1);

90 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_SCK
, 0 );

92 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 0);

96 
U8G_COM_MSG_RESET
:

97 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

101 
U8G_COM_MSG_WRITE_BYTE
:

102 
	`u8g_©mega_sw_•i_shi·_out
(
u8g
, 
¨g_vÆ
);

105 
U8G_COM_MSG_WRITE_SEQ
:

107 
uöt8_t
 *
±r
 = 
¨g_±r
;

108  
¨g_vÆ
 > 0 )

110 
	`u8g_©mega_sw_•i_shi·_out
(
u8g
, *
±r
++);

111 
¨g_vÆ
--;

116 
U8G_COM_MSG_WRITE_SEQ_P
:

118 
uöt8_t
 *
±r
 = 
¨g_±r
;

119  
¨g_vÆ
 > 0 )

121 
	`u8g_©mega_sw_•i_shi·_out
(
u8g
, 
	`u8g_pgm_ªad
(
±r
));

122 
±r
++;

123 
¨g_vÆ
--;

129 
	}
}

134 
uöt8_t
 
	$u8g_com_©mega_sw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

137 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_i2c.c

38 
	~"u8g.h
"

40 
uöt8_t
 
	gu8g_i2c_îr_code
;

47 
uöt8_t
 
	gu8g_i2c_îr_pos
;

50 
	$u8g_i2c_˛ór_îr‹
()

52 
u8g_i2c_îr_code
 = 
U8G_I2C_ERR_NONE
;

53 
u8g_i2c_îr_pos
 = 0;

54 
	}
}

56 
uöt8_t
 
	$u8g_i2c_gë_îr‹
()

58  
u8g_i2c_îr_code
;

59 
	}
}

61 
uöt8_t
 
	$u8g_i2c_gë_îr_pos
()

63  
u8g_i2c_îr_pos
;

64 
	}
}

66 
	$u8g_i2c_£t_îr‹
(
uöt8_t
 
code
, uöt8_à
pos
)

68 i‡–
u8g_i2c_îr_code
 > 0 )

70 
u8g_i2c_îr_code
 |
code
;

71 
u8g_i2c_îr_pos
 = 
pos
;

72 
	}
}

76 #i‡
deföed
(
__AVR__
)

77 
	#U8G_ATMEGA_HW_TWI


	)

80 #i‡
__AVR_ARCH__
 == 2

81 #unde‡
U8G_ATMEGA_HW_TWI


83 #i‡
__AVR_ARCH__
 == 25

84 #unde‡
U8G_ATMEGA_HW_TWI


88 #i‡
deföed
(
U8G_ATMEGA_HW_TWI
)

90 
	~<avr/io.h
>

91 
	~<utû/twi.h
>

95 
	$u8g_i2c_öô
(
uöt8_t
 
›ti⁄s
)

120 
TWSR
 = 0;

121 
TWBR
 = 
F_CPU
/(2*100000)-8;

122 
	`u8g_i2c_˛ór_îr‹
();

123 
	}
}

125 
uöt8_t
 
	$u8g_i2c_waô
(
uöt8_t
 
mask
, uöt8_à
pos
)

127 vﬁ©ûê
uöt16_t
 
˙t
 = 2000;

128  !(
TWCR
 & 
mask
) )

130 i‡–
˙t
 == 0 )

132 
	`u8g_i2c_£t_îr‹
(
U8G_I2C_ERR_TIMEOUT
, 
pos
);

135 
˙t
--;

138 
	}
}

141 
uöt8_t
 
	$u8g_i2c_°¨t
(
uöt8_t
 
¶a
)

143 
uöt8_t
 
°©us
;

146 
TWCR
 = 
	`_BV
(
TWINT
Ë| _BV(
TWSTA
Ë| _BV(
TWEN
);

149 i‡–
	`u8g_i2c_waô
(
	`_BV
(
TWINT
), 1) == 0 )

152 
°©us
 = 
TW_STATUS
;

155 i‡–
°©us
 !
TW_START
 && sètu†!
TW_REP_START
 )

157 
	`u8g_i2c_£t_îr‹
(
U8G_I2C_ERR_BUS
, 1);

162 
TWDR
 = 
¶a
;

165 
TWCR
 = 
	`_BV
(
TWINT
Ë| _BV(
TWEN
);

168 i‡–
	`u8g_i2c_waô
(
	`_BV
(
TWINT
), 2) == 0 )

170 
°©us
 = 
TW_STATUS
;

173 i‡–
°©us
 !
TW_MT_SLA_ACK
 )

175 
	`u8g_i2c_£t_îr‹
(
U8G_I2C_ERR_BUS
, 2);

180 
	}
}

182 
uöt8_t
 
	$u8g_i2c_£nd_byã
(
uöt8_t
 
d©a
)

184 
uöt8_t
 
°©us
;

185 
TWDR
 = 
d©a
;

186 
TWCR
 = 
	`_BV
(
TWINT
Ë| _BV(
TWEN
);

187 i‡–
	`u8g_i2c_waô
(
	`_BV
(
TWINT
), 3) == 0 )

189 
°©us
 = 
TW_STATUS
;

191 i‡–
°©us
 !
TW_MT_DATA_ACK
 )

193 
	`u8g_i2c_£t_îr‹
(
U8G_I2C_ERR_BUS
, 3);

198 
	}
}

200 
	$u8g_i2c_°›
()

203 
TWCR
 = 
	`_BV
(
TWINT
Ë| _BV(
TWEN
Ë| _BV(
TWSTO
);

206 
	`u8g_i2c_waô
(
	`_BV
(
TWSTO
), 4);

208 
	}
}

224 
	$u8g_i2c_öô
(
uöt8_t
 
›ti⁄s
)

226 
	`u8g_i2c_˛ór_îr‹
();

227 
	}
}

229 
uöt8_t
 
	$u8g_i2c_waô
(
uöt8_t
 
mask
, uöt8_à
pos
)

232 
	}
}

234 
uöt8_t
 
	$u8g_i2c_°¨t
(
uöt8_t
 
¶a
)

237 
	}
}

238 
uöt8_t
 
	$u8g_i2c_£nd_byã
(
uöt8_t
 
d©a
)

241 
	}
}

243 
	$u8g_i2c_°›
()

245 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_io.c

39 
	~"u8g.h
"

41 #i‡
deföed
(
__AVR__
)

43 
	~<avr/öãºu±.h
>

44 
	~<avr/io.h
>

46 vﬁ©ûê
	tuöt8_t
 * 
	tIO_PTR
;

49 
uöt8_t
 
	$u8g_Pö
(
uöt8_t
 
p‹t
, uöt8_à
bôpos
)

51 
p‹t
 <<= 3;

52 
p‹t
 +
bôpos
;

53  
p‹t
;

54 
	}
}

56 c⁄° 
IO_PTR
 
	gu8g_avr_ddr_P
[] 
	gPROGMEM
 = {

57 #ifde‡
DDRA


58 &
DDRA
,

62 &
DDRB
,

63 #ifde‡
DDRC


64 &
DDRC
,

65 #ifde‡
DDRD


66 &
DDRD
,

67 #ifde‡
DDRE


68 &
DDRE
,

69 #ifde‡
DDRF


70 &
DDRF
,

71 #ifde‡
DDRG


72 &
DDRG
,

73 #ifde‡
DDRH


74 &
DDRH
,

84 c⁄° 
IO_PTR
 
	gu8g_avr_p‹t_P
[] 
	gPROGMEM
 = {

85 #ifde‡
PORTA


86 &
PORTA
,

90 &
PORTB
,

91 #ifde‡
PORTC


92 &
PORTC
,

93 #ifde‡
PORTD


94 &
PORTD
,

95 #ifde‡
PORTE


96 &
PORTE
,

97 #ifde‡
PORTF


98 &
PORTF
,

99 #ifde‡
PORTG


100 &
PORTG
,

101 #ifde‡
PORTH


102 &
PORTH
,

111 c⁄° 
IO_PTR
 
	gu8g_avr_pö_P
[] 
	gPROGMEM
 = {

112 #ifde‡
PINA


113 &
PINA
,

117 &
PINB
,

118 #ifde‡
PINC


119 &
PINC
,

120 #ifde‡
PIND


121 &
PIND
,

122 #ifde‡
PINE


123 &
PINE
,

124 #ifde‡
PINF


125 &
PINF
,

126 #ifde‡
PING


127 &
PING
,

128 #ifde‡
PINH


129 &
PINH
,

138 vﬁ©ûê
uöt8_t
 *
	$u8g_gë_avr_io_±r
(c⁄° 
IO_PTR
 *
ba£
, 
uöt8_t
 
off£t
)

140 vﬁ©ûê
uöt8_t
 * 
tmp
;

141 
ba£
 +
off£t
;

142 
	`mem˝y_P
(&
tmp
, 
ba£
, (vﬁ©ûê
uöt8_t
 * 
PROGMEM
));

143  
tmp
;

144 
	}
}

147 
	$u8g_SëPöOuçut
(
uöt8_t
 
öã∫Æ_pö_numbî
)

149 *
	`u8g_gë_avr_io_±r
(
u8g_avr_ddr_P
, 
öã∫Æ_pö_numbî
>>3Ë|
	`_BV
(internal_pin_number&7);

150 
	}
}

152 
	$u8g_SëPöI≈ut
(
uöt8_t
 
öã∫Æ_pö_numbî
)

154 *
	`u8g_gë_avr_io_±r
(
u8g_avr_ddr_P
, 
öã∫Æ_pö_numbî
>>3Ë&~
	`_BV
(internal_pin_number&7);

155 
	}
}

157 
	$u8g_SëPöLevñ
(
uöt8_t
 
öã∫Æ_pö_numbî
, uöt8_à
Àvñ
)

159 vﬁ©ûê
uöt8_t
 * 
tmp
 = 
	`u8g_gë_avr_io_±r
(
u8g_avr_p‹t_P
, 
öã∫Æ_pö_numbî
>>3);

161 i‡–
Àvñ
 == 0 )

162 *
tmp
 &~
	`_BV
(
öã∫Æ_pö_numbî
&7);

164 *
tmp
 |
	`_BV
(
öã∫Æ_pö_numbî
&7);

165 
	}
}

167 
uöt8_t
 
	$u8g_GëPöLevñ
(
uöt8_t
 
öã∫Æ_pö_numbî
)

169 vﬁ©ûê
uöt8_t
 * 
tmp
 = 
	`u8g_gë_avr_io_±r
(
u8g_avr_pö_P
, 
öã∫Æ_pö_numbî
>>3);

170 i‡–((*
tmp
Ë& 
	`_BV
(
öã∫Æ_pö_numbî
&7)) != 0 )

173 
	}
}

177 
uöt8_t
 
	$u8g_Pö
(
uöt8_t
 
p‹t
, uöt8_à
bôpos
)

179 
p‹t
 <<= 3;

180 
p‹t
 +
bôpos
;

181  
p‹t
;

182 
	}
}

184 
	$u8g_SëPöOuçut
(
uöt8_t
 
öã∫Æ_pö_numbî
)

186 
	}
}

188 
	$u8g_SëPöI≈ut
(
uöt8_t
 
öã∫Æ_pö_numbî
)

190 
	}
}

192 
	$u8g_SëPöLevñ
(
uöt8_t
 
öã∫Æ_pö_numbî
, uöt8_à
Àvñ
)

194 
	}
}

196 
uöt8_t
 
	$u8g_GëPöLevñ
(
uöt8_t
 
öã∫Æ_pö_numbî
)

199 
	}
}

204 
	$u8g_SëPIOuçut
(
u8g_t
 *
u8g
, 
uöt8_t
 
pi
)

206 
uöt8_t
 
pö
;

207 
pö
 = 
u8g
->
pö_li°
[
pi
];

208 i‡–
pö
 !
U8G_PIN_NONE
 )

209 
	`u8g_SëPöOuçut
(
pö
);

210 
	}
}

212 
	$u8g_SëPILevñ
(
u8g_t
 *
u8g
, 
uöt8_t
 
pi
, uöt8_à
Àvñ
)

214 
uöt8_t
 
pö
;

215 
pö
 = 
u8g
->
pö_li°
[
pi
];

216 i‡–
pö
 !
U8G_PIN_NONE
 )

217 
	`u8g_SëPöLevñ
(
pö
, 
Àvñ
);

218 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_null.c

39 
	~"u8g.h
"

41 
uöt8_t
 
	$u8g_com_nuŒ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

43 
msg
)

45 
U8G_COM_MSG_INIT
:

47 
U8G_COM_MSG_STOP
:

51 
U8G_COM_MSG_CHIP_SELECT
:

56 
U8G_COM_MSG_WRITE_BYTE
:

58 
U8G_COM_MSG_WRITE_SEQ
:

62 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_cursor.c

37 
	~"u8g.h
"

39 
	$u8g_SëCurs‹F⁄t
(
u8g_t
 *
u8g
, c⁄° 
u8g_pgm_uöt8_t
 *
curs‹_f⁄t
)

41 
u8g
->
curs‹_f⁄t
 = cursor_font;

42 
	}
}

44 
	$u8g_SëCurs‹StyÀ
(
u8g_t
 *
u8g
, 
uöt8_t
 
ícodög
)

46 
u8g
->
curs‹_ícodög
 = 
ícodög
;

47 
	}
}

49 
	$u8g_SëCurs‹Cﬁ‹
(
u8g_t
 *
u8g
, 
uöt8_t
 
fg
, uöt8_à
bg
)

51 
u8g
->
curs‹_bg_cﬁ‹
 = 
bg
;

52 
u8g
->
curs‹_fg_cﬁ‹
 = 
fg
;

53 
	}
}

55 
	$u8g_SëCurs‹Pos
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
curs‹_x
, u8g_uöt_à
curs‹_y
)

57 
u8g
->
curs‹_x
 = cursor_x;

58 
u8g
->
curs‹_y
 = cursor_y;

59 
	}
}

61 
	$u8g_E«bÀCurs‹
(
u8g_t
 *
u8g
)

63 
u8g
->
curs‹_‚
 = 
u8g_DøwCurs‹
;

64 
	}
}

66 
	$u8g_DißbÀCurs‹
(
u8g_t
 *
u8g
)

68 
u8g
->
curs‹_‚
 = (
u8g_døw_curs‹_‚
)0;

69 
	}
}

71 
	$u8g_DøwCurs‹
(
u8g_t
 *
u8g
)

73 c⁄° 
u8g_pgm_uöt8_t
 *
f⁄t
;

74 
uöt8_t
 
cﬁ‹
;

75 
uöt8_t
 
ícodög
 = 
u8g
->
curs‹_ícodög
;

78 
cﬁ‹
 = 
	`u8g_GëCﬁ‹Index
(
u8g
);

79 
f⁄t
 = 
u8g
->font;

82 
u8g
->
f⁄t
 = u8g->
curs‹_f⁄t
;

83 
ícodög
++;

84 
	`u8g_SëCﬁ‹Index
(
u8g
, u8g->
curs‹_bg_cﬁ‹
);

87 
	`u8g_døw_glyph
(
u8g
, u8g->
curs‹_x
, u8g->
curs‹_y
, 
ícodög
);

88 
ícodög
--;

89 
	`u8g_SëCﬁ‹Index
(
u8g
, u8g->
curs‹_fg_cﬁ‹
);

93 
	`u8g_døw_glyph
(
u8g
, u8g->
curs‹_x
, u8g->
curs‹_y
, 
ícodög
);

96 
u8g
->
f⁄t
 = font;

97 
	`u8g_SëCﬁ‹Index
(
u8g
, 
cﬁ‹
);

98 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_delay.c

38 
	~"u8g.h
"

42 #i‡
deföed
(
ARDUINO
)

43 #i‡
deföed
(
__AVR__
)

44 
	#USE_AVR_DELAY


	)

45 #ñi‡
deföed
(
__PIC32MX
)

46 
	#USE_PIC32_DELAY


	)

47 #ñi‡
deföed
(
__¨m__
)

48 
	#USE_ARDUINO_DELAY


	)

50 
	#USE_ARDUINO_DELAY


	)

52 #ñi‡
deföed
(
__AVR__
)

53 
	#USE_AVR_DELAY


	)

54 #ñi‡
deföed
(
__18CXX
)

55 
	#USE_PIC18_DELAY


	)

57 
	#USE_DUMMY_DELAY


	)

66 #i‡
deföed
(
USE_AVR_DELAY
)

67 
	~<avr/öãºu±.h
>

68 
	~<avr/io.h
>

69 
	~<utû/dñay.h
>

89 
	$u8g_Dñay
(
uöt16_t
 
vÆ
)

92  
vÆ
 != 0 )

94 
	`_dñay_lo›_2
–(
F_CPU
 / 4000 ) -2);

95 
vÆ
--;

97 
	}
}

100 
	$u8g_Mi¸oDñay
()

102 #i‡(
F_CPU
 / 4000000 ) > 0

103 
	`_dñay_lo›_2
–(
F_CPU
 / 4000000 ) );

105 
	}
}

108 
	$u8g_10Mi¸oDñay
()

110 #i‡(
F_CPU
 / 400000 ) > 0

111 
	`_dñay_lo›_2
–(
F_CPU
 / 400000 ) );

113 
	}
}

120 #i‡
deföed
(
USE_PIC18_DELAY
)

121 
	~<dñays.h
>

122 
	#GëSy°emClock
() (64000000ul)

123 
	#GëIn°ru˘i⁄Clock
(Ë(
	`GëSy°emClock
()/4)

	)

125 
	$u8g_Dñay
(
uöt16_t
 
vÆ
)

131 
	}
}

132 
	$u8g_Mi¸oDñay
()

135 
	}
}

136 
	$u8g_10Mi¸oDñay
()

139 
	}
}

144 #i‡
deföed
(
USE_ARDUINO_DELAY
)

145 
	$u8g_Dñay
(
uöt16_t
 
vÆ
)

147 
	`dñay
(
vÆ
);

148 
	}
}

149 
	$u8g_Mi¸oDñay
()

151 
	`dñayMi¸o£c⁄ds
(1);

152 
	}
}

153 
	$u8g_10Mi¸oDñay
()

155 
	`dñayMi¸o£c⁄ds
(10);

156 
	}
}

159 #i‡
deföed
(
USE_PIC32_DELAY
)

167 
	#CPU_COUNTS_PER_SECOND
 (
F_CPU
/2UL)

	)

168 
	#TICKS_PER_MILLISECOND
 (
CPU_COUNTS_PER_SECOND
/1000UL)

	)

169 
	~"∂ib.h
"

170 
	$u8g_Dñay
(
uöt16_t
 
vÆ
)

172 
uöt32_t
 
d
;

173 
uöt32_t
 
s
;

174 
d
 = 
vÆ
;

175 
d
 *
TICKS_PER_MILLISECOND
;

176 
s
 = 
	`RódC‹eTimî
();

177  (
uöt32_t
)(
	`RódC‹eTimî
(Ë- 
s
Ë< 
d
 )

179 
	}
}

181 
	$u8g_Mi¸oDñay
()

183 
uöt32_t
 
d
;

184 
uöt32_t
 
s
;

185 
d
 = 
TICKS_PER_MILLISECOND
/1000;

186 
s
 = 
	`RódC‹eTimî
();

187  (
uöt32_t
)(
	`RódC‹eTimî
(Ë- 
s
Ë< 
d
 )

189 
	}
}

191 
	$u8g_10Mi¸oDñay
()

193 
uöt32_t
 
d
;

194 
uöt32_t
 
s
;

195 
d
 = 
TICKS_PER_MILLISECOND
/100;

196 
s
 = 
	`RódC‹eTimî
();

197  (
uöt32_t
)(
	`RódC‹eTimî
(Ë- 
s
Ë< 
d
 )

199 
	}
}

204 #i‡
deföed
(
USE_DUMMY_DELAY
)

205 
	$u8g_Dñay
(
uöt16_t
 
vÆ
)

208 
	}
}

209 
	$u8g_Mi¸oDñay
()

211 
	}
}

212 
	$u8g_10Mi¸oDñay
()

214 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_flipdisc_2x7.c

39 
	~"u8g.h
"

41 
	#WIDTH
 28

	)

42 
	#HEIGHT
 14

	)

43 
	#PAGE_HEIGHT
 14

	)

55 
wrôeFlùDiscM©rix
(
uöt8_t
 
id
, uöt8_à
∑ge
, uöt8_à
width
, uöt8_à*
row1
, uöt8_à*
row2
);

59 (*
u8g_wrôe_Êù_disc_m©rix
)(
uöt8_t
 
id
, uöt8_à
∑ge
, uöt8_à
width
, uöt8_à*
row1
, uöt8_à*
row2
);

61 
	`u8g_SëFlùDiscCÆlback
(
u8g_t
 *
u8g
, (*
cb
)(
uöt8_t
 
id
, uöt8_à
∑ge
, uöt8_à
width
, uöt8_à*
row1
, uöt8_à*
row2
))

63 
u8g_wrôe_Êù_disc_m©rix
 = 
cb
;

64 
	}
}

66 
uöt8_t
 
	$u8g_dev_Êùdisc_2x7_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

68 
msg
)

70 
U8G_DEV_MSG_INIT
:

72 
U8G_DEV_MSG_STOP
:

74 
U8G_DEV_MSG_PAGE_NEXT
:

76 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

81 (*
u8g_wrôe_Êù_disc_m©rix
)(0, 
pb
->
p
.
∑ge
, 
WIDTH
,Öb->
buf
,Öb->buf+WIDTH);

84 
U8G_DEV_MSG_CONTRAST
:

87  
	`u8g_dev_pb14v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

88 
	}
}

90 
uöt8_t
 
	gu8g_dev_Êùdisc_2x7_bw_buf
[
WIDTH
*2] 
	gU8G_NOCOMMON
 ;

91 
u8g_pb_t
 
	gu8g_dev_Êùdisc_2x7_bw_pb
 = { {16, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_Êùdisc_2x7_bw_buf
};

92 
u8g_dev_t
 
	gu8g_dev_Êùdisc_2x7
 = { 
u8g_dev_Êùdisc_2x7_bw_‚
, &
u8g_dev_Êùdisc_2x7_bw_pb
, 
u8g_com_nuŒ_‚
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_gprof.c

41 
	~"u8g.h
"

44 
	#WIDTH
 128

	)

45 
	#HEIGHT
 64

	)

46 
	#PAGE_HEIGHT
 8

	)

48 
uöt8_t
 
u8g_dev_g¥of_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

50 
uöt8_t
 
	gu8g_pb_dev_g¥of_buf
[
WIDTH
];

51 
u8g_pb_t
 
	gu8g_pb_dev_g¥of
 = { {
PAGE_HEIGHT
, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_pb_dev_g¥of_buf
 };

53 
u8g_dev_t
 
	gu8g_dev_g¥of
 = { 
u8g_dev_g¥of_‚
, &
u8g_pb_dev_g¥of
, 
NULL
 };

55 
uöt8_t
 
	$u8g_dev_g¥of_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

57 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

59 
msg
)

61 
U8G_DEV_MSG_INIT
:

63 
U8G_DEV_MSG_STOP
:

65 
U8G_DEV_MSG_PAGE_FIRST
:

66 
	`u8g_pb_CÀ¨
(
pb
);

67 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

69 
U8G_DEV_MSG_PAGE_NEXT
:

91 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

96 
	`u8g_pb_CÀ¨
(
pb
);

98 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


99 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

101 
u8g_dev_¨g_bbx_t
 *
bbx
 = (u8g_dev_¨g_bbx_à*)
¨g
;

102 
u8g_uöt_t
 
x2
, 
y2
;

104 
y2
 = 
bbx
->
y
;

105 
y2
 +
bbx
->
h
;

106 
y2
--;

108 i‡–
	`u8g_pb_IsYI¡î£˘i⁄
(
pb
, 
bbx
->
y
, 
y2
) == 0 )

112 
x2
 = 
bbx
->
x
;

113 
x2
 +
bbx
->
w
;

114 
x2
--;

116 i‡–
	`u8g_pb_IsXI¡î£˘i⁄
(
pb
, 
bbx
->
x
, 
x2
) == 0 )

121 
U8G_DEV_MSG_GET_PAGE_BOX
:

122 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

124 
U8G_DEV_MSG_SET_COLOR_INDEX
:

126 
U8G_DEV_MSG_SET_XY_CB
:

129  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

130 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_ili9325d_320x240.c

42 
	~"u8g.h
"

44 
	#WIDTH
 240

	)

46 #i‡
deföed
(
U8G_16BIT
)

47 
	#HEIGHT
 320

	)

50 
	#HEIGHT
 240

	)

52 
	#PAGE_HEIGHT
 4

	)

68 c⁄° 
uöt8_t
 
	gu8g_dev_ûi9325d_320x240_öô_£q
[] 
	gPROGMEM
 = {

69 
U8G_ESC_CS
(0),

70 
U8G_ESC_DLY
(50),

71 
U8G_ESC_RST
(15),

72 
U8G_ESC_DLY
(50),

73 
U8G_ESC_RST
(15),

74 
U8G_ESC_DLY
(50),

75 
U8G_ESC_CS
(1),

76 
U8G_ESC_DLY
(50),

81 
U8G_ESC_ADR
(0), 0x000, 0x001,

82 
U8G_ESC_ADR
(1), 0x001, 0x000,

83 
U8G_ESC_ADR
(0), 0x000, 0x002,

84 
U8G_ESC_ADR
(1), 0x002, 0x000,

85 
U8G_ESC_ADR
(0), 0x000, 0x003,

86 
U8G_ESC_ADR
(1), 0x010, 0x030,

87 
U8G_ESC_ADR
(0), 0x000, 0x004,

88 
U8G_ESC_ADR
(1), 0x000, 0x000,

89 
U8G_ESC_ADR
(0), 0x000, 0x008,

90 
U8G_ESC_ADR
(1), 0x002, 0x007,

92 
U8G_ESC_ADR
(0), 0x000, 0x009,

93 
U8G_ESC_ADR
(1), 0x000, 0x000,

95 
U8G_ESC_ADR
(0), 0x000, 0x00a,

96 
U8G_ESC_ADR
(1), 0x000, 0x000,

97 
U8G_ESC_ADR
(0), 0x000, 0x00c,

98 
U8G_ESC_ADR
(1), 0x000, 0x000,

99 
U8G_ESC_ADR
(0), 0x000, 0x00d,

100 
U8G_ESC_ADR
(1), 0x000, 0x000,

101 
U8G_ESC_ADR
(0), 0x000, 0x00f,

102 
U8G_ESC_ADR
(1), 0x000, 0x000,

103 
U8G_ESC_ADR
(0), 0x000, 0x010,

104 
U8G_ESC_ADR
(1), 0x000, 0x000,

105 
U8G_ESC_ADR
(0), 0x000, 0x011,

106 
U8G_ESC_ADR
(1), 0x000, 0x007,

107 
U8G_ESC_ADR
(0), 0x000, 0x012,

108 
U8G_ESC_ADR
(1), 0x000, 0x000,

109 
U8G_ESC_ADR
(0), 0x000, 0x013,

110 
U8G_ESC_ADR
(1), 0x000, 0x000,

111 
U8G_ESC_ADR
(0), 0x000, 0x007,

112 
U8G_ESC_ADR
(1), 0x000, 0x001,

114 
U8G_ESC_DLY
(100),

115 
U8G_ESC_DLY
(100),

117 
U8G_ESC_ADR
(0), 0x000, 0x010,

118 
U8G_ESC_ADR
(1), 0x016, 0x090,

119 
U8G_ESC_ADR
(0), 0x000, 0x011,

120 
U8G_ESC_ADR
(1), 0x002, 0x027,

122 
U8G_ESC_DLY
(50),

124 
U8G_ESC_ADR
(0), 0x000, 0x012,

125 
U8G_ESC_ADR
(1), 0x000, 0x00d,

127 
U8G_ESC_DLY
(50),

129 
U8G_ESC_ADR
(0), 0x000, 0x013,

130 
U8G_ESC_ADR
(1), 0x012, 0x000,

131 
U8G_ESC_ADR
(0), 0x000, 0x029,

132 
U8G_ESC_ADR
(1), 0x000, 0x00a,

133 
U8G_ESC_ADR
(0), 0x000, 0x02b,

134 
U8G_ESC_ADR
(1), 0x000, 0x00d,

136 
U8G_ESC_DLY
(50),

138 
U8G_ESC_ADR
(0), 0x000, 0x020,

139 
U8G_ESC_ADR
(1), 0x000, 0x000,

140 
U8G_ESC_ADR
(0), 0x000, 0x021,

141 
U8G_ESC_ADR
(1), 0x000, 0x000,

144 
U8G_ESC_ADR
(0), 0x000, 0x030,

145 
U8G_ESC_ADR
(1), 0x000, 0x000,

146 
U8G_ESC_ADR
(0), 0x000, 0x031,

147 
U8G_ESC_ADR
(1), 0x004, 0x004,

148 
U8G_ESC_ADR
(0), 0x000, 0x032,

149 
U8G_ESC_ADR
(1), 0x000, 0x003,

150 
U8G_ESC_ADR
(0), 0x000, 0x035,

151 
U8G_ESC_ADR
(1), 0x004, 0x005,

152 
U8G_ESC_ADR
(0), 0x000, 0x036,

153 
U8G_ESC_ADR
(1), 0x008, 0x008,

154 
U8G_ESC_ADR
(0), 0x000, 0x037,

155 
U8G_ESC_ADR
(1), 0x004, 0x007,

156 
U8G_ESC_ADR
(0), 0x000, 0x038,

157 
U8G_ESC_ADR
(1), 0x003, 0x003,

158 
U8G_ESC_ADR
(0), 0x000, 0x039,

159 
U8G_ESC_ADR
(1), 0x007, 0x007,

160 
U8G_ESC_ADR
(0), 0x000, 0x03c,

161 
U8G_ESC_ADR
(1), 0x005, 0x004,

162 
U8G_ESC_ADR
(0), 0x000, 0x03d,

163 
U8G_ESC_ADR
(1), 0x008, 0x008,

165 
U8G_ESC_ADR
(0), 0x000, 0x050,

166 
U8G_ESC_ADR
(1), 0x000, 0x000,

167 
U8G_ESC_ADR
(0), 0x000, 0x051,

168 
U8G_ESC_ADR
(1), 0x000, 0x0EF,

169 
U8G_ESC_ADR
(0), 0x000, 0x052,

170 
U8G_ESC_ADR
(1), 0x000, 0x000,

171 
U8G_ESC_ADR
(0), 0x000, 0x053,

172 
U8G_ESC_ADR
(1), 0x001, 0x03F,

174 
U8G_ESC_ADR
(0), 0x000, 0x060,

175 
U8G_ESC_ADR
(1), 0x0a7, 0x000,

176 
U8G_ESC_ADR
(0), 0x000, 0x061,

177 
U8G_ESC_ADR
(1), 0x000, 0x001,

178 
U8G_ESC_ADR
(0), 0x000, 0x06a,

179 
U8G_ESC_ADR
(1), 0x000, 0x000,

181 
U8G_ESC_ADR
(0), 0x000, 0x080,

182 
U8G_ESC_ADR
(1), 0x000, 0x000,

183 
U8G_ESC_ADR
(0), 0x000, 0x081,

184 
U8G_ESC_ADR
(1), 0x000, 0x000,

185 
U8G_ESC_ADR
(0), 0x000, 0x082,

186 
U8G_ESC_ADR
(1), 0x000, 0x000,

187 
U8G_ESC_ADR
(0), 0x000, 0x083,

188 
U8G_ESC_ADR
(1), 0x000, 0x000,

189 
U8G_ESC_ADR
(0), 0x000, 0x084,

190 
U8G_ESC_ADR
(1), 0x000, 0x000,

191 
U8G_ESC_ADR
(0), 0x000, 0x085,

192 
U8G_ESC_ADR
(1), 0x000, 0x000,

194 
U8G_ESC_ADR
(0), 0x000, 0x090,

195 
U8G_ESC_ADR
(1), 0x000, 0x010,

196 
U8G_ESC_ADR
(0), 0x000, 0x092,

197 
U8G_ESC_ADR
(1), 0x000, 0x000,

199 
U8G_ESC_ADR
(0), 0x000, 0x007,

200 
U8G_ESC_ADR
(1), 0x001, 0x033,

202 
U8G_ESC_DLY
(10),

205 
U8G_ESC_ADR
(0), 0x000, 0x020,

206 
U8G_ESC_ADR
(1), 0x000, 0x000,

207 
U8G_ESC_ADR
(0), 0x000, 0x021,

208 
U8G_ESC_ADR
(1), 0x000, 0x010,

209 
U8G_ESC_ADR
(0), 0x000, 0x022,

210 
U8G_ESC_ADR
(1), 0x0fe, 0x0fe,

228 
U8G_ESC_CS
(0),

229 
U8G_ESC_END


233 c⁄° 
uöt8_t
 
	gu8g_dev_ûi9325d_320x240_∑ge_£q
[] 
	gPROGMEM
 = {

234 
U8G_ESC_CS
(1),

235 
U8G_ESC_ADR
(0), 0x000, 0x020,

236 
U8G_ESC_ADR
(1), 0x000, 0x000,

237 
U8G_ESC_ADR
(0), 0x000, 0x021,

238 
U8G_ESC_ADR
(1),

239 
U8G_ESC_END


243 
uöt8_t
 
	$u8g_dev_ûi9325d_gë_65K_high_byã
(
uöt8_t
 
cﬁ‹
)

245 
uöt8_t
 
h
;

246 
h
 = 
cﬁ‹
;

247 
h
 &= 0x0e0;

248 
h
 |= h>>3;

249 
h
 &= 0x0f8;

250 
cﬁ‹
>>=2;

251 
cﬁ‹
 &= 7;

252 
h
 |
cﬁ‹
;

253  
h
;

254 
	}
}

257 
uöt8_t
 
	$u8g_dev_ûi9325d_gë_65K_low_byã
(
uöt8_t
 
cﬁ‹
)

259 
uöt8_t
 
l
;

260 
l
 = 
cﬁ‹
;

261 
l
 <<= 3;

262 
cﬁ‹
 &= 3;

263 
cﬁ‹
 <<= 1;

264 
l
 |
cﬁ‹
;

265  
l
;

266 
	}
}

269 
uöt8_t
 
	$u8g_dev_ûi9325d_320x240_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

272 
msg
)

274 
U8G_DEV_MSG_INIT
:

275 
	`u8g_InôCom
(
u8g
, 
dev
);

277 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ûi9325d_320x240_öô_£q
);

280 
U8G_DEV_MSG_STOP
:

282 
U8G_DEV_MSG_PAGE_NEXT
:

284 
uöt8_t
 
i
;

285 
uöt16_t
 
y
, 
j
;

286 
uöt8_t
 *
±r
;

287 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

289 
y
 = 
pb
->
p
.
∑ge_y0
;

290 
±r
 = 
pb
->
buf
;

291  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i ++ )

293 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ûi9325d_320x240_∑ge_£q
);

294 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
y
 >> 8 );

295 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
y
 & 255 );

297 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

298 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0 );

299 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x022 );

301 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

303  
j
 = 0; j < 
pb
->
width
; j++ )

305 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`u8g_dev_ûi9325d_gë_65K_high_byã
(*
±r
) );

306 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`u8g_dev_ûi9325d_gë_65K_low_byã
(*
±r
) );

308 
±r
++;

310 
y
++;

312 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

316  
	`u8g_dev_pb8h8_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

317 
	}
}

319 
uöt8_t
 
	gu8g_ûi9325d_320x240_8h8_buf
[
WIDTH
*
PAGE_HEIGHT
] 
	gU8G_NOCOMMON
 ;

320 
u8g_pb_t
 
u8g_ûi9325d_320x240_8h8_pb
 
	gU8G_NOCOMMON
 = { {
PAGE_HEIGHT
, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_ûi9325d_320x240_8h8_buf
};

321 
u8g_dev_t
 
u8g_dev_ûi9325d_320x240_8bô
 
	gU8G_NOCOMMON
 = { 
u8g_dev_ûi9325d_320x240_‚
, &
u8g_ûi9325d_320x240_8h8_pb
, 
u8g_com_¨duöo_p‹t_d_wr_‚
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_ks0108_128x64.c

47 
	~"u8g.h
"

49 
	#WIDTH
 128

	)

50 
	#HEIGHT
 64

	)

51 
	#PAGE_HEIGHT
 8

	)

53 c⁄° 
uöt8_t
 
	gu8g_dev_ks0108_128x64_öô_£q
[] 
	gPROGMEM
 = {

54 
U8G_ESC_CS
(0),

55 
U8G_ESC_ADR
(0),

56 
U8G_ESC_RST
(1),

57 
U8G_ESC_CS
(1),

60 
U8G_ESC_DLY
(20),

61 
U8G_ESC_CS
(2),

64 
U8G_ESC_DLY
(20),

65 
U8G_ESC_CS
(0),

66 
U8G_ESC_END


70 
uöt8_t
 
	$u8g_dev_ks0108_128x64_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

73 
msg
)

75 
U8G_DEV_MSG_INIT
:

76 
	`u8g_InôCom
(
u8g
, 
dev
);

77 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ks0108_128x64_öô_£q
);

79 
U8G_DEV_MSG_STOP
:

81 
U8G_DEV_MSG_PAGE_NEXT
:

83 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

85 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

86 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 2);

87 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b8 | 
pb
->
p
.
∑ge
);

88 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x040 );

89 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

90 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 64, 
pb
->
buf
);

91 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

93 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

94 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

95 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b8 | 
pb
->
p
.
∑ge
);

96 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x040 );

97 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

98 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 64, 64+(
uöt8_t
 *)
pb
->
buf
);

99 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

104  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

105 
	}
}

107 
U8G_PB_DEV
(
u8g_dev_ks0108_128x64
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ks0108_128x64_‚
, 
U8G_COM_PARALLEL
);

108 
U8G_PB_DEV
(
u8g_dev_ks0108_128x64_Á°
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ks0108_128x64_‚
, 
U8G_COM_FAST_PARALLEL
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_lc7981_160x80.c

37 
	~"u8g.h
"

39 
	#WIDTH
 160

	)

40 
	#HEIGHT
 80

	)

41 
	#PAGE_HEIGHT
 8

	)

52 c⁄° 
uöt8_t
 
	gu8g_dev_lc7981_160x80_öô_£q
[] 
	gPROGMEM
 = {

53 
U8G_ESC_CS
(0),

54 
U8G_ESC_ADR
(1),

55 
U8G_ESC_RST
(15),

56 
U8G_ESC_CS
(1),

57 
U8G_ESC_DLY
(50),

60 
U8G_ESC_ADR
(1),

62 
U8G_ESC_ADR
(0),

65 
U8G_ESC_ADR
(1),

67 
U8G_ESC_ADR
(0),

70 
U8G_ESC_ADR
(1),

72 
U8G_ESC_ADR
(0),

73 
WIDTH
/8-1,

75 
U8G_ESC_ADR
(1),

77 
U8G_ESC_ADR
(0),

80 
U8G_ESC_ADR
(1),

82 
U8G_ESC_ADR
(0),

85 
U8G_ESC_ADR
(1),

87 
U8G_ESC_ADR
(0),

90 
U8G_ESC_DLY
(10),

92 
U8G_ESC_CS
(0),

93 
U8G_ESC_END


96 
uöt8_t
 
	$u8g_dev_lc7981_160x80_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

98 
msg
)

100 
U8G_DEV_MSG_INIT
:

101 
	`u8g_InôCom
(
u8g
, 
dev
);

102 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_lc7981_160x80_öô_£q
);

104 
U8G_DEV_MSG_STOP
:

106 
U8G_DEV_MSG_PAGE_NEXT
:

108 
uöt8_t
 
y
, 
i
;

109 
uöt16_t
 
di•_øm_adr
;

110 
uöt8_t
 *
±r
;

111 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

113 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

114 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

115 
y
 = 
pb
->
p
.
∑ge_y0
;

116 
±r
 = 
pb
->
buf
;

117 
di•_øm_adr
 = 
WIDTH
/8;

118 
di•_øm_adr
 *
y
;

119  
i
 = 0; i < 8; i ++ )

121 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

122 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00a );

123 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

124 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
 & 0x0ff );

126 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

127 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00b );

128 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

129 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
 >> 8 );

131 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

132 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00c );

133 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

134 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

135 
±r
 +
WIDTH
/8;

136 
di•_øm_adr
 +
WIDTH
/8;

138 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

142  
	`u8g_dev_pb8h1f_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

143 
	}
}

145 
U8G_PB_DEV
(
u8g_dev_lc7981_160x80_8bô
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_lc7981_160x80_‚
, 
U8G_COM_FAST_PARALLEL
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_lc7981_240x128.c

39 
	~"u8g.h
"

41 
	#WIDTH
 240

	)

42 
	#HEIGHT
 128

	)

43 
	#PAGE_HEIGHT
 8

	)

50 c⁄° 
uöt8_t
 
	gu8g_dev_lc7981_240x128_öô_£q
[] 
	gPROGMEM
 = {

51 
U8G_ESC_CS
(0),

52 
U8G_ESC_ADR
(1),

53 
U8G_ESC_RST
(15),

54 
U8G_ESC_CS
(1),

55 
U8G_ESC_DLY
(50),

58 
U8G_ESC_ADR
(1),

60 
U8G_ESC_ADR
(0),

63 
U8G_ESC_ADR
(1),

65 
U8G_ESC_ADR
(0),

68 
U8G_ESC_ADR
(1),

70 
U8G_ESC_ADR
(0),

71 
WIDTH
/8-1,

73 
U8G_ESC_ADR
(1),

75 
U8G_ESC_ADR
(0),

78 
U8G_ESC_ADR
(1),

80 
U8G_ESC_ADR
(0),

83 
U8G_ESC_ADR
(1),

85 
U8G_ESC_ADR
(0),

88 
U8G_ESC_DLY
(10),

90 
U8G_ESC_CS
(0),

91 
U8G_ESC_END


94 
uöt8_t
 
	$u8g_dev_lc7981_240x128_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

96 
msg
)

98 
U8G_DEV_MSG_INIT
:

99 
	`u8g_InôCom
(
u8g
, 
dev
);

100 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_lc7981_240x128_öô_£q
);

102 
U8G_DEV_MSG_STOP
:

104 
U8G_DEV_MSG_PAGE_NEXT
:

106 
uöt8_t
 
y
, 
i
;

107 
uöt16_t
 
di•_øm_adr
;

108 
uöt8_t
 *
±r
;

109 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

111 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

112 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

113 
y
 = 
pb
->
p
.
∑ge_y0
;

114 
±r
 = 
pb
->
buf
;

115 
di•_øm_adr
 = 
WIDTH
/8;

116 
di•_øm_adr
 *
y
;

117  
i
 = 0; i < 8; i ++ )

119 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

120 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00a );

121 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

122 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
 & 0x0ff );

124 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

125 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00b );

126 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

127 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
 >> 8 );

129 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

130 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00c );

131 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

132 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

133 
±r
 +
WIDTH
/8;

134 
di•_øm_adr
 +
WIDTH
/8;

136 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

140  
	`u8g_dev_pb8h1f_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

141 
	}
}

143 
U8G_PB_DEV
(
u8g_dev_lc7981_240x128_8bô
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_lc7981_240x128_‚
, 
U8G_COM_FAST_PARALLEL
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_lc7981_240x64.c

39 
	~"u8g.h
"

41 
	#WIDTH
 240

	)

42 
	#HEIGHT
 64

	)

43 
	#PAGE_HEIGHT
 8

	)

50 c⁄° 
uöt8_t
 
	gu8g_dev_lc7981_240x64_öô_£q
[] 
	gPROGMEM
 = {

51 
U8G_ESC_CS
(0),

52 
U8G_ESC_ADR
(1),

53 
U8G_ESC_RST
(15),

54 
U8G_ESC_CS
(1),

55 
U8G_ESC_DLY
(50),

58 
U8G_ESC_ADR
(1),

60 
U8G_ESC_ADR
(0),

63 
U8G_ESC_ADR
(1),

65 
U8G_ESC_ADR
(0),

68 
U8G_ESC_ADR
(1),

70 
U8G_ESC_ADR
(0),

71 
WIDTH
/8-1,

73 
U8G_ESC_ADR
(1),

75 
U8G_ESC_ADR
(0),

78 
U8G_ESC_ADR
(1),

80 
U8G_ESC_ADR
(0),

83 
U8G_ESC_ADR
(1),

85 
U8G_ESC_ADR
(0),

88 
U8G_ESC_DLY
(10),

90 
U8G_ESC_CS
(0),

91 
U8G_ESC_END


94 
uöt8_t
 
	$u8g_dev_lc7981_240x64_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

96 
msg
)

98 
U8G_DEV_MSG_INIT
:

99 
	`u8g_InôCom
(
u8g
, 
dev
);

100 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_lc7981_240x64_öô_£q
);

102 
U8G_DEV_MSG_STOP
:

104 
U8G_DEV_MSG_PAGE_NEXT
:

106 
uöt8_t
 
y
, 
i
;

107 
uöt16_t
 
di•_øm_adr
;

108 
uöt8_t
 *
±r
;

109 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

111 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

112 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

113 
y
 = 
pb
->
p
.
∑ge_y0
;

114 
±r
 = 
pb
->
buf
;

115 
di•_øm_adr
 = 
WIDTH
/8;

116 
di•_øm_adr
 *
y
;

117  
i
 = 0; i < 8; i ++ )

119 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

120 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00a );

121 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

122 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
 & 0x0ff );

124 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

125 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00b );

126 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

127 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
 >> 8 );

129 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

130 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00c );

131 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

132 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

133 
±r
 +
WIDTH
/8;

134 
di•_øm_adr
 +
WIDTH
/8;

136 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

140  
	`u8g_dev_pb8h1f_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

141 
	}
}

143 
U8G_PB_DEV
(
u8g_dev_lc7981_240x64_8bô
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_lc7981_240x64_‚
, 
U8G_COM_FAST_PARALLEL
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_lc7981_320x64.c

41 
	~"u8g.h
"

43 
	#WIDTH
 320

	)

44 
	#HEIGHT
 64

	)

45 
	#PAGE_HEIGHT
 8

	)

52 c⁄° 
uöt8_t
 
	gu8g_dev_lc7981_320x64_öô_£q
[] 
	gPROGMEM
 = {

53 
U8G_ESC_CS
(0),

54 
U8G_ESC_ADR
(1),

55 
U8G_ESC_RST
(15),

56 
U8G_ESC_CS
(1),

57 
U8G_ESC_DLY
(50),

60 
U8G_ESC_ADR
(1),

62 
U8G_ESC_ADR
(0),

65 
U8G_ESC_ADR
(1),

67 
U8G_ESC_ADR
(0),

70 
U8G_ESC_ADR
(1),

72 
U8G_ESC_ADR
(0),

73 
WIDTH
/8-1,

75 
U8G_ESC_ADR
(1),

77 
U8G_ESC_ADR
(0),

80 
U8G_ESC_ADR
(1),

82 
U8G_ESC_ADR
(0),

85 
U8G_ESC_ADR
(1),

87 
U8G_ESC_ADR
(0),

90 
U8G_ESC_DLY
(10),

92 
U8G_ESC_CS
(0),

93 
U8G_ESC_END


96 
uöt8_t
 
	$u8g_dev_lc7981_320x64_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

98 
msg
)

100 
U8G_DEV_MSG_INIT
:

101 
	`u8g_InôCom
(
u8g
, 
dev
);

102 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_lc7981_320x64_öô_£q
);

104 
U8G_DEV_MSG_STOP
:

106 
U8G_DEV_MSG_PAGE_NEXT
:

108 
uöt8_t
 
y
, 
i
;

109 
uöt16_t
 
di•_øm_adr
;

110 
uöt8_t
 *
±r
;

111 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

113 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

114 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

115 
y
 = 
pb
->
p
.
∑ge_y0
;

116 
±r
 = 
pb
->
buf
;

117 
di•_øm_adr
 = 
WIDTH
/8;

118 
di•_øm_adr
 *
y
;

119  
i
 = 0; i < 8; i ++ )

121 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

122 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00a );

123 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

124 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
 & 0x0ff );

126 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

127 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00b );

128 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

129 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
 >> 8 );

131 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

132 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00c );

133 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

134 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

135 
±r
 +
WIDTH
/8;

136 
di•_øm_adr
 +
WIDTH
/8;

138 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

142  
	`u8g_dev_pb8h1f_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

143 
	}
}

145 
U8G_PB_DEV
(
u8g_dev_lc7981_320x64_8bô
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_lc7981_320x64_‚
, 
U8G_COM_FAST_PARALLEL
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_null.c

37 
	~"u8g.h
"

39 
uöt8_t
 
	$u8g_dev_nuŒ
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

41 
msg
)

43 
U8G_DEV_MSG_SET_8PIXEL
:

45 
U8G_DEV_MSG_SET_PIXEL
:

47 
U8G_DEV_MSG_INIT
:

49 
U8G_DEV_MSG_STOP
:

51 
U8G_DEV_MSG_PAGE_FIRST
:

53 
U8G_DEV_MSG_PAGE_NEXT
:

55 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


56 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

59 
U8G_DEV_MSG_GET_PAGE_BOX
:

61 
U8G_DEV_MSG_SET_COLOR_INDEX
:

63 
U8G_DEV_MSG_SET_XY_CB
:

67 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_pcd8544_84x48.c

42 
	~"u8g.h
"

44 
	#WIDTH
 84

	)

45 
	#HEIGHT
 48

	)

46 
	#PAGE_HEIGHT
 8

	)

49 c⁄° 
uöt8_t
 
	gu8g_dev_pcd8544_öô_£q
[] 
	gPROGMEM
 = {

50 
U8G_ESC_CS
(0),

51 
U8G_ESC_ADR
(0),

52 
U8G_ESC_RST
(1),

53 
U8G_ESC_CS
(1),

60 
U8G_ESC_DLY
(100),

63 
U8G_ESC_DLY
(100),

64 
U8G_ESC_DLY
(100),

67 
U8G_ESC_DLY
(100),

68 
U8G_ESC_CS
(0),

69 
U8G_ESC_END


72 
uöt8_t
 
	$u8g_dev_pcd8544_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

74 
msg
)

76 
U8G_DEV_MSG_INIT
:

77 
	`u8g_InôCom
(
u8g
, 
dev
);

78 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_pcd8544_öô_£q
);

80 
U8G_DEV_MSG_STOP
:

82 
U8G_DEV_MSG_PAGE_NEXT
:

84 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

85 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

86 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

87 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x020 );

88 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

89 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x040 | 
pb
->
p
.
∑ge
);

90 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

91 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

93 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

96 
U8G_DEV_MSG_CONTRAST
:

98 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

99 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

100 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x021);

101 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | ( (*(
uöt8_t
 *)
¨g
) >> 1 ) );

102 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

105  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

106 
	}
}

109 
U8G_PB_DEV
(
u8g_dev_pcd8544_84x48_sw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_pcd8544_‚
, 
U8G_COM_SW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_pcf8812_96x65.c

56 
	~"u8g.h
"

58 
	#WIDTH
 96

	)

59 
	#HEIGHT
 65

	)

60 
	#PAGE_HEIGHT
 8

	)

63 c⁄° 
uöt8_t
 
	gu8g_dev_pcf8812_öô_£q
[] 
	gPROGMEM
 = {

64 
U8G_ESC_CS
(0),

65 
U8G_ESC_ADR
(0),

66 
U8G_ESC_RST
(1),

67 
U8G_ESC_CS
(1),

74 
U8G_ESC_DLY
(100),

77 
U8G_ESC_DLY
(100),

78 
U8G_ESC_DLY
(100),

81 
U8G_ESC_DLY
(100),

82 
U8G_ESC_CS
(0),

83 
U8G_ESC_END


86 
uöt8_t
 
	$u8g_dev_pcf8812_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

88 
msg
)

90 
U8G_DEV_MSG_INIT
:

91 
	`u8g_InôCom
(
u8g
, 
dev
);

92 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_pcf8812_öô_£q
);

94 
U8G_DEV_MSG_STOP
:

96 
U8G_DEV_MSG_PAGE_NEXT
:

98 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

99 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

100 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

101 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x020 );

102 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

103 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x040 | 
pb
->
p
.
∑ge
);

104 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

105 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

107 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

110 
U8G_DEV_MSG_CONTRAST
:

112 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

113 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

114 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x021);

115 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | ( (*(
uöt8_t
 *)
¨g
) >> 1 ) );

116 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

119  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

120 
	}
}

123 
U8G_PB_DEV
(
u8g_dev_pcf8812_96x65_sw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_pcf8812_‚
, 
U8G_COM_SW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_sbn1661_122x32.c

40 
	~"u8g.h
"

42 
	#WIDTH
 122

	)

43 
	#HEIGHT
 32

	)

44 
	#PAGE_HEIGHT
 8

	)

47 c⁄° 
uöt8_t
 
	gu8g_dev_sbn1661_122x32_öô_£q
[] 
	gPROGMEM
 = {

48 
U8G_ESC_CS
(0),

49 
U8G_ESC_ADR
(0),

50 
U8G_ESC_RST
(15),

51 
U8G_ESC_CS
(1),

56 
U8G_ESC_CS
(2),

62 
U8G_ESC_CS
(0),

65 
U8G_ESC_END


68 
uöt8_t
 
	$u8g_dev_sbn1661_122x32_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

70 
msg
)

72 
U8G_DEV_MSG_INIT
:

73 
	`u8g_InôCom
(
u8g
, 
dev
);

74 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_sbn1661_122x32_öô_£q
);

76 
U8G_DEV_MSG_STOP
:

78 
U8G_DEV_MSG_PAGE_NEXT
:

80 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

82 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

83 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

84 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b8 | 
pb
->
p
.
∑ge
);

85 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x000 );

86 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

87 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/2, 
pb
->
buf
);

89 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

90 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 2);

91 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b8 | 
pb
->
p
.
∑ge
);

92 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x000 );

93 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

94 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/2, WIDTH/2+(
uöt8_t
 *)
pb
->
buf
);

96 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

100 
U8G_DEV_MSG_CONTRAST
:

103  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

104 
	}
}

107 
U8G_PB_DEV
(
u8g_dev_sbn1661_122x32
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_sbn1661_122x32_‚
, 
u8g_com_¨duöo_no_í_∑øŒñ_‚
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_ssd1306_128x32.c

40 
	~"u8g.h
"

42 
	#WIDTH
 128

	)

43 
	#HEIGHT
 32

	)

44 
	#PAGE_HEIGHT
 8

	)

48 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x32_ada‰uô1_öô_£q
[] 
	gPROGMEM
 = {

49 
U8G_ESC_CS
(0),

50 
U8G_ESC_ADR
(0),

51 
U8G_ESC_RST
(1),

52 
U8G_ESC_CS
(1),

77 
U8G_ESC_CS
(0),

78 
U8G_ESC_END


83 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x32_ada‰uô2_öô_£q
[] 
	gPROGMEM
 = {

84 
U8G_ESC_CS
(0),

85 
U8G_ESC_ADR
(0),

86 
U8G_ESC_RST
(1),

87 
U8G_ESC_CS
(1),

112 
U8G_ESC_CS
(0),

113 
U8G_ESC_END


118 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x32_ada‰uô3_öô_£q
[] 
	gPROGMEM
 = {

119 
U8G_ESC_CS
(0),

120 
U8G_ESC_ADR
(0),

121 
U8G_ESC_RST
(1),

122 
U8G_ESC_CS
(1),

147 
U8G_ESC_CS
(0),

148 
U8G_ESC_END


153 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x32_univisi⁄_öô_£q
[] 
	gPROGMEM
 = {

154 
U8G_ESC_CS
(0),

155 
U8G_ESC_ADR
(0),

156 
U8G_ESC_RST
(1),

157 
U8G_ESC_CS
(1),

175 
U8G_ESC_CS
(0),

176 
U8G_ESC_END


184 
	#u8g_dev_ssd1306_128x32_öô_£q
 
u8g_dev_ssd1306_128x32_ada‰uô3_öô_£q


	)

187 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x32_d©a_°¨t
[] 
	gPROGMEM
 = {

188 
U8G_ESC_ADR
(0),

189 
U8G_ESC_CS
(1),

192 
U8G_ESC_END


195 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_⁄
[] 
	gPROGMEM
 = {

196 
U8G_ESC_ADR
(0),

197 
U8G_ESC_CS
(1),

199 
U8G_ESC_CS
(1),

200 
U8G_ESC_END


203 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_off
[] 
	gPROGMEM
 = {

204 
U8G_ESC_ADR
(0),

205 
U8G_ESC_CS
(1),

207 
U8G_ESC_DLY
(50),

208 
U8G_ESC_CS
(1),

209 
U8G_ESC_END


212 
uöt8_t
 
	$u8g_dev_ssd1306_128x32_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

214 
msg
)

216 
U8G_DEV_MSG_INIT
:

217 
	`u8g_InôCom
(
u8g
, 
dev
);

218 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1306_128x32_öô_£q
);

220 
U8G_DEV_MSG_STOP
:

222 
U8G_DEV_MSG_PAGE_NEXT
:

224 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

225 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1306_128x32_d©a_°¨t
);

226 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

227 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

228 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

230 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

233 
U8G_DEV_MSG_SLEEP_ON
:

234 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

236 
U8G_DEV_MSG_SLEEP_OFF
:

237 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

241  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

242 
	}
}

244 
U8G_PB_DEV
(
u8g_dev_ssd1306_128x32_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1306_128x32_‚
, 
U8G_COM_SW_SPI
);

245 
U8G_PB_DEV
(
u8g_dev_ssd1306_128x32_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1306_128x32_‚
, 
U8G_COM_HW_SPI
);

246 
U8G_PB_DEV
(
u8g_dev_ssd1306_128x32_i2c
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1306_128x32_‚
, 
U8G_COM_SSD_I2C
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_ssd1306_128x64.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

44 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x64_ada‰uô1_öô_£q
[] 
	gPROGMEM
 = {

45 
U8G_ESC_CS
(0),

46 
U8G_ESC_ADR
(0),

47 
U8G_ESC_RST
(1),

48 
U8G_ESC_CS
(1),

73 
U8G_ESC_CS
(0),

74 
U8G_ESC_END


78 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x64_ada‰uô2_öô_£q
[] 
	gPROGMEM
 = {

79 
U8G_ESC_CS
(0),

80 
U8G_ESC_ADR
(0),

81 
U8G_ESC_RST
(1),

82 
U8G_ESC_CS
(1),

107 
U8G_ESC_CS
(0),

108 
U8G_ESC_END


112 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x64_ada‰uô3_öô_£q
[] 
	gPROGMEM
 = {

113 
U8G_ESC_CS
(0),

114 
U8G_ESC_ADR
(0),

115 
U8G_ESC_RST
(1),

116 
U8G_ESC_CS
(1),

141 
U8G_ESC_CS
(0),

142 
U8G_ESC_END


146 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x64_univisi⁄_öô_£q
[] 
	gPROGMEM
 = {

147 
U8G_ESC_CS
(0),

148 
U8G_ESC_ADR
(0),

149 
U8G_ESC_RST
(1),

150 
U8G_ESC_CS
(1),

168 
U8G_ESC_CS
(0),

169 
U8G_ESC_END


176 
	#u8g_dev_ssd1306_128x64_öô_£q
 
u8g_dev_ssd1306_128x64_ada‰uô3_öô_£q


	)

179 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x64_d©a_°¨t
[] 
	gPROGMEM
 = {

180 
U8G_ESC_ADR
(0),

181 
U8G_ESC_CS
(1),

184 
U8G_ESC_END


187 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_⁄
[] 
	gPROGMEM
 = {

188 
U8G_ESC_ADR
(0),

189 
U8G_ESC_CS
(1),

191 
U8G_ESC_CS
(1),

192 
U8G_ESC_END


195 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_off
[] 
	gPROGMEM
 = {

196 
U8G_ESC_ADR
(0),

197 
U8G_ESC_CS
(1),

199 
U8G_ESC_DLY
(50),

200 
U8G_ESC_CS
(1),

201 
U8G_ESC_END


204 
uöt8_t
 
	$u8g_dev_ssd1306_128x64_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

206 
msg
)

208 
U8G_DEV_MSG_INIT
:

209 
	`u8g_InôCom
(
u8g
, 
dev
);

210 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1306_128x64_öô_£q
);

212 
U8G_DEV_MSG_STOP
:

214 
U8G_DEV_MSG_PAGE_NEXT
:

216 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

217 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1306_128x64_d©a_°¨t
);

218 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

219 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

220 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

222 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

225 
U8G_DEV_MSG_SLEEP_ON
:

226 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

228 
U8G_DEV_MSG_SLEEP_OFF
:

229 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

232  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

233 
	}
}

235 
U8G_PB_DEV
(
u8g_dev_ssd1306_128x64_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1306_128x64_‚
, 
U8G_COM_SW_SPI
);

236 
U8G_PB_DEV
(
u8g_dev_ssd1306_128x64_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1306_128x64_‚
, 
U8G_COM_HW_SPI
);

237 
U8G_PB_DEV
(
u8g_dev_ssd1306_128x64_i2c
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1306_128x64_‚
, 
U8G_COM_SSD_I2C
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_ssd1309_128x64.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

45 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1309_128x64_öô_£q
[] 
	gPROGMEM
={

46 
U8G_ESC_CS
(0),

47 
U8G_ESC_ADR
(0),

48 
U8G_ESC_RST
(1),

49 
U8G_ESC_CS
(1),

65 
U8G_ESC_VCC
(1),

66 
U8G_ESC_DLY
(50),

68 
U8G_ESC_DLY
(50),

69 
U8G_ESC_CS
(0),

70 
U8G_ESC_END


74 
	#u8g_dev_ssd1309_128x64_öô_£q
 
u8g_dev_ssd1309_128x64_öô_£q


	)

77 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1309_128x64_d©a_°¨t
[] 
	gPROGMEM
 = {

78 
U8G_ESC_ADR
(0),

79 
U8G_ESC_CS
(1),

82 
U8G_ESC_END


85 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_⁄
[] 
	gPROGMEM
 = {

86 
U8G_ESC_ADR
(0),

87 
U8G_ESC_CS
(1),

89 
U8G_ESC_CS
(1),

90 
U8G_ESC_END


93 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_off
[] 
	gPROGMEM
 = {

94 
U8G_ESC_ADR
(0),

95 
U8G_ESC_CS
(1),

97 
U8G_ESC_DLY
(50),

98 
U8G_ESC_CS
(1),

99 
U8G_ESC_END


102 
uöt8_t
 
	$u8g_dev_ssd1309_128x64_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

104 
msg
)

106 
U8G_DEV_MSG_INIT
:

107 
	`u8g_InôCom
(
u8g
, 
dev
);

108 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1309_128x64_öô_£q
);

110 
U8G_DEV_MSG_STOP
:

112 
U8G_DEV_MSG_PAGE_NEXT
:

114 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

115 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1309_128x64_d©a_°¨t
);

116 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

117 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

118 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

120 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

123 
U8G_DEV_MSG_CONTRAST
:

124 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

125 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

126 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

127 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

128 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

130 
U8G_DEV_MSG_SLEEP_ON
:

131 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

133 
U8G_DEV_MSG_SLEEP_OFF
:

134 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

137  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

138 
	}
}

140 
U8G_PB_DEV
(
u8g_dev_ssd1309_128x64_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1309_128x64_‚
, 
U8G_COM_HW_SPI
);

141 
U8G_PB_DEV
(
u8g_dev_ssd1309_128x64_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1309_128x64_‚
, 
U8G_COM_SW_SPI
);

142 
U8G_PB_DEV
(
u8g_dev_ssd1309_128x64_i2c
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1309_128x64_‚
, 
U8G_COM_SSD_I2C
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_ssd1322_nhd31oled_bw.c

44 
	~"u8g.h
"

47 #i‡
deföed
(
U8G_16BIT
)

48 
	#WIDTH
 256

	)

50 
	#WIDTH
 248

	)

52 
	#HEIGHT
 64

	)

53 
	#PAGE_HEIGHT
 8

	)

60 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1322_1bô_nhd_312_öô_£q
[] 
	gPROGMEM
 = {

61 
U8G_ESC_DLY
(10),

62 
U8G_ESC_CS
(0),

63 
U8G_ESC_ADR
(0),

64 
U8G_ESC_RST
(1),

65 
U8G_ESC_CS
(1),

67 
U8G_ESC_DLY
(100),

68 
U8G_ESC_DLY
(100),

70 
U8G_ESC_ADR
(0),

72 
U8G_ESC_ADR
(1),

75 
U8G_ESC_ADR
(0),

78 
U8G_ESC_ADR
(0),

80 
U8G_ESC_ADR
(1),

83 
U8G_ESC_ADR
(0),

85 
U8G_ESC_ADR
(1),

88 
U8G_ESC_ADR
(0),

90 
U8G_ESC_ADR
(1),

93 
U8G_ESC_ADR
(0),

95 
U8G_ESC_ADR
(1),

98 
U8G_ESC_ADR
(0),

100 
U8G_ESC_ADR
(1),

104 
U8G_ESC_ADR
(0),

106 
U8G_ESC_ADR
(1),

109 
U8G_ESC_ADR
(0),

111 
U8G_ESC_ADR
(1),

115 
U8G_ESC_ADR
(0),

117 
U8G_ESC_ADR
(1),

120 
U8G_ESC_ADR
(0),

122 
U8G_ESC_ADR
(1),

125 
U8G_ESC_ADR
(0),

128 
U8G_ESC_ADR
(0),

130 
U8G_ESC_ADR
(1),

133 
U8G_ESC_ADR
(0),

135 
U8G_ESC_ADR
(1),

139 
U8G_ESC_ADR
(0),

141 
U8G_ESC_ADR
(1),

144 
U8G_ESC_ADR
(0),

146 
U8G_ESC_ADR
(1),

149 
U8G_ESC_ADR
(0),

151 
U8G_ESC_ADR
(1),

154 
U8G_ESC_ADR
(0),

157 
U8G_ESC_ADR
(0),

160 
U8G_ESC_ADR
(0),

164 
U8G_ESC_CS
(0),

165 
U8G_ESC_END


168 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1322_1bô_nhd_312_¥ï¨e_∑ge_£q
[] 
	gPROGMEM
 = {

169 
U8G_ESC_ADR
(0),

170 
U8G_ESC_CS
(1),

172 
U8G_ESC_ADR
(1),

175 
U8G_ESC_ADR
(0),

177 
U8G_ESC_ADR
(1),

178 
U8G_ESC_END


181 
	$u8g_dev_ssd1322_1bô_¥ï¨e_row
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
dñè_row
)

183 
uöt8_t
 
row
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.
∑ge
;

185 
row
 *((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.
∑ge_height
;

186 
row
 +
dñè_row
;

188 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1322_1bô_nhd_312_¥ï¨e_∑ge_£q
);

190 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
row
);

191 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
row
+1);

193 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

194 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x05c);

195 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

196 
	}
}

198 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_⁄
[] 
	gPROGMEM
 = {

199 
U8G_ESC_ADR
(0),

200 
U8G_ESC_CS
(1),

202 
U8G_ESC_CS
(1),

203 
U8G_ESC_END


206 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_off
[] 
	gPROGMEM
 = {

207 
U8G_ESC_ADR
(0),

208 
U8G_ESC_CS
(1),

210 
U8G_ESC_DLY
(50),

211 
U8G_ESC_CS
(1),

212 
U8G_ESC_END


216 
uöt8_t
 
	$u8g_dev_ssd1322_nhd31ﬁed_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

218 
msg
)

220 
U8G_DEV_MSG_INIT
:

221 
	`u8g_InôCom
(
u8g
, 
dev
);

222 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1322_1bô_nhd_312_öô_£q
);

224 
U8G_DEV_MSG_STOP
:

226 
U8G_DEV_MSG_PAGE_NEXT
:

228 
uöt8_t
 
i
;

229 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

230 
uöt8_t
 *
p
 = 
pb
->
buf
;

231 
u8g_uöt_t
 
˙t
;

232 
˙t
 = 
pb
->
width
;

233 
˙t
 >>= 3;

235  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i++ )

237 
	`u8g_dev_ssd1322_1bô_¥ï¨e_row
(
u8g
, 
dev
, 
i
);

238 #i‡!
	`deföed
(
U8G_16BIT
)

239 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0ff);

240 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0ff);

242 
	`u8g_WrôeSequí˚BWTo16GrDevi˚
(
u8g
, 
dev
, 
˙t
, 
p
);

243 #i‡!
	`deföed
(
U8G_16BIT
)

244 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0ff);

245 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0ff);

247 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

248 
p
+=
˙t
;

252 
U8G_DEV_MSG_CONTRAST
:

253 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

254 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

255 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

256 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

257 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

258 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

260 
U8G_DEV_MSG_SLEEP_ON
:

261 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

263 
U8G_DEV_MSG_SLEEP_OFF
:

264 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

267  
	`u8g_dev_pb8h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

268 
	}
}

271 
uöt8_t
 
	$u8g_dev_ssd1322_nhd31ﬁed_2x_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

273 
msg
)

275 
U8G_DEV_MSG_INIT
:

276 
	`u8g_InôCom
(
u8g
, 
dev
);

277 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1322_1bô_nhd_312_öô_£q
);

279 
U8G_DEV_MSG_STOP
:

281 
U8G_DEV_MSG_PAGE_NEXT
:

283 
uöt8_t
 
i
;

284 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

285 
uöt8_t
 *
p
 = 
pb
->
buf
;

286 
u8g_uöt_t
 
˙t
;

287 
˙t
 = 
pb
->
width
;

288 
˙t
 >>= 3;

290  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i++ )

292 
	`u8g_dev_ssd1322_1bô_¥ï¨e_row
(
u8g
, 
dev
, 
i
);

293 #i‡!
	`deföed
(
U8G_16BIT
)

294 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0ff);

295 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0ff);

297 
	`u8g_WrôeSequí˚BWTo16GrDevi˚
(
u8g
, 
dev
, 
˙t
, 
p
);

298 #i‡!
	`deföed
(
U8G_16BIT
)

299 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0ff);

300 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0ff);

302 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

303 
p
+=
˙t
;

307 
U8G_DEV_MSG_CONTRAST
:

308 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

309 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

310 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

311 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

312 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

313 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

315 
U8G_DEV_MSG_SLEEP_ON
:

316 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

318 
U8G_DEV_MSG_SLEEP_OFF
:

319 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

322  
	`u8g_dev_pb16h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

323 
	}
}

326 
U8G_PB_DEV
(
u8g_dev_ssd1322_nhd31ﬁed_bw_sw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1322_nhd31ﬁed_bw_‚
, 
U8G_COM_SW_SPI
);

327 
U8G_PB_DEV
(
u8g_dev_ssd1322_nhd31ﬁed_bw_hw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1322_nhd31ﬁed_bw_‚
, 
U8G_COM_HW_SPI
);

329 
	#DWIDTH
 (
WIDTH
*2)

	)

330 
uöt8_t
 
	gu8g_dev_ssd1322_nhd31ﬁed_2x_bw_buf
[
DWIDTH
] 
	gU8G_NOCOMMON
 ;

331 
u8g_pb_t
 
	gu8g_dev_ssd1322_nhd31ﬁed_2x_bw_pb
 = { {16, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_buf
};

332 
u8g_dev_t
 
	gu8g_dev_ssd1322_nhd31ﬁed_2x_bw_sw_•i
 = { 
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_‚
, &
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_pb
, 
U8G_COM_SW_SPI
 };

333 
u8g_dev_t
 
	gu8g_dev_ssd1322_nhd31ﬁed_2x_bw_hw_•i
 = { 
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_‚
, &
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_pb
, 
U8G_COM_HW_SPI
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_ssd1322_nhd31oled_gr.c

44 
	~"u8g.h
"

47 #i‡
deföed
(
U8G_16BIT
)

48 
	#WIDTH
 256

	)

50 
	#WIDTH
 248

	)

52 
	#HEIGHT
 64

	)

53 
	#PAGE_HEIGHT
 8

	)

60 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1322_2bô_nhd_312_öô_£q
[] 
	gPROGMEM
 = {

61 
U8G_ESC_DLY
(10),

62 
U8G_ESC_CS
(0),

63 
U8G_ESC_ADR
(0),

64 
U8G_ESC_RST
(1),

65 
U8G_ESC_CS
(1),

67 
U8G_ESC_DLY
(100),

68 
U8G_ESC_DLY
(100),

70 
U8G_ESC_ADR
(0),

72 
U8G_ESC_ADR
(1),

75 
U8G_ESC_ADR
(0),

78 
U8G_ESC_ADR
(0),

80 
U8G_ESC_ADR
(1),

83 
U8G_ESC_ADR
(0),

85 
U8G_ESC_ADR
(1),

88 
U8G_ESC_ADR
(0),

90 
U8G_ESC_ADR
(1),

93 
U8G_ESC_ADR
(0),

95 
U8G_ESC_ADR
(1),

98 
U8G_ESC_ADR
(0),

100 
U8G_ESC_ADR
(1),

104 
U8G_ESC_ADR
(0),

106 
U8G_ESC_ADR
(1),

109 
U8G_ESC_ADR
(0),

111 
U8G_ESC_ADR
(1),

115 
U8G_ESC_ADR
(0),

117 
U8G_ESC_ADR
(1),

120 
U8G_ESC_ADR
(0),

122 
U8G_ESC_ADR
(1),

125 
U8G_ESC_ADR
(0),

128 
U8G_ESC_ADR
(0),

130 
U8G_ESC_ADR
(1),

133 
U8G_ESC_ADR
(0),

135 
U8G_ESC_ADR
(1),

139 
U8G_ESC_ADR
(0),

141 
U8G_ESC_ADR
(1),

144 
U8G_ESC_ADR
(0),

146 
U8G_ESC_ADR
(1),

149 
U8G_ESC_ADR
(0),

151 
U8G_ESC_ADR
(1),

154 
U8G_ESC_ADR
(0),

157 
U8G_ESC_ADR
(0),

160 
U8G_ESC_ADR
(0),

164 
U8G_ESC_CS
(0),

165 
U8G_ESC_END


168 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1322_2bô_nhd_312_¥ï¨e_∑ge_£q
[] 
	gPROGMEM
 = {

169 
U8G_ESC_ADR
(0),

170 
U8G_ESC_CS
(1),

172 
U8G_ESC_ADR
(1),

175 
U8G_ESC_ADR
(0),

177 
U8G_ESC_ADR
(1),

178 
U8G_ESC_END


181 
	$u8g_dev_ssd1322_2bô_¥ï¨e_row
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
dñè_row
)

183 
uöt8_t
 
row
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.
∑ge
;

185 
row
 *((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.
∑ge_height
;

186 
row
 +
dñè_row
;

188 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1322_2bô_nhd_312_¥ï¨e_∑ge_£q
);

190 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
row
);

191 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
row
+1);

193 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

194 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x05c);

195 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

196 
	}
}

198 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_⁄
[] 
	gPROGMEM
 = {

199 
U8G_ESC_ADR
(0),

200 
U8G_ESC_CS
(1),

202 
U8G_ESC_CS
(1),

203 
U8G_ESC_END


206 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_off
[] 
	gPROGMEM
 = {

207 
U8G_ESC_ADR
(0),

208 
U8G_ESC_CS
(1),

210 
U8G_ESC_DLY
(50),

211 
U8G_ESC_CS
(1),

212 
U8G_ESC_END


215 
uöt8_t
 
	$u8g_dev_ssd1322_nhd31ﬁed_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

217 
msg
)

219 
U8G_DEV_MSG_INIT
:

220 
	`u8g_InôCom
(
u8g
, 
dev
);

221 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1322_2bô_nhd_312_öô_£q
);

223 
U8G_DEV_MSG_STOP
:

225 
U8G_DEV_MSG_PAGE_NEXT
:

227 
uöt8_t
 
i
;

228 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

229 
uöt8_t
 *
p
 = 
pb
->
buf
;

230 
u8g_uöt_t
 
˙t
;

231 
˙t
 = 
pb
->
width
;

232 
˙t
 >>= 2;

234  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i++ )

236 
	`u8g_dev_ssd1322_2bô_¥ï¨e_row
(
u8g
, 
dev
, 
i
);

237 #i‡!
	`deföed
(
U8G_16BIT
)

238 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00);

239 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00);

241 
	`u8g_WrôeSequí˚4LTo16GrDevi˚
(
u8g
, 
dev
, 
˙t
, 
p
);

242 #i‡!
	`deföed
(
U8G_16BIT
)

243 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00);

244 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00);

246 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

247 
p
+=
˙t
;

251 
U8G_DEV_MSG_CONTRAST
:

252 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

253 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

254 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

255 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

256 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

257 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

259 
U8G_DEV_MSG_SLEEP_ON
:

260 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

262 
U8G_DEV_MSG_SLEEP_OFF
:

263 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

266  
	`u8g_dev_pb8h2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

267 
	}
}

270 
uöt8_t
 
	$u8g_dev_ssd1322_nhd31ﬁed_2x_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

272 
msg
)

274 
U8G_DEV_MSG_INIT
:

275 
	`u8g_InôCom
(
u8g
, 
dev
);

276 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1322_2bô_nhd_312_öô_£q
);

278 
U8G_DEV_MSG_STOP
:

280 
U8G_DEV_MSG_PAGE_NEXT
:

282 
uöt8_t
 
i
;

283 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

284 
uöt8_t
 *
p
 = 
pb
->
buf
;

285 
u8g_uöt_t
 
˙t
;

286 
˙t
 = 
pb
->
width
;

287 
˙t
 >>= 3;

289  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i++ )

291 
	`u8g_dev_ssd1322_2bô_¥ï¨e_row
(
u8g
, 
dev
, 
i
);

292 #i‡!
	`deföed
(
U8G_16BIT
)

293 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00);

294 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00);

296 
	`u8g_WrôeSequí˚4LTo16GrDevi˚
(
u8g
, 
dev
, 
˙t
, 
p
);

297 #i‡!
	`deföed
(
U8G_16BIT
)

298 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00);

299 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00);

301 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

302 
p
+=
˙t
;

306 
U8G_DEV_MSG_CONTRAST
:

307 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

308 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

309 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

310 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

311 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

312 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

314 
U8G_DEV_MSG_SLEEP_ON
:

315 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

317 
U8G_DEV_MSG_SLEEP_OFF
:

318 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

321  
	`u8g_dev_pb16h2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

322 
	}
}

325 
U8G_PB_DEV
(
u8g_dev_ssd1322_nhd31ﬁed_gr_sw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1322_nhd31ﬁed_gr_‚
, 
U8G_COM_SW_SPI
);

326 
U8G_PB_DEV
(
u8g_dev_ssd1322_nhd31ﬁed_gr_hw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1322_nhd31ﬁed_gr_‚
, 
U8G_COM_HW_SPI
);

328 
	#DWIDTH
 (
WIDTH
*2)

	)

329 
uöt8_t
 
	gu8g_dev_ssd1322_nhd31ﬁed_2x_gr_buf
[
DWIDTH
] 
	gU8G_NOCOMMON
 ;

330 
u8g_pb_t
 
	gu8g_dev_ssd1322_nhd31ﬁed_2x_gr_pb
 = { {16, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_buf
};

331 
u8g_dev_t
 
	gu8g_dev_ssd1322_nhd31ﬁed_2x_gr_sw_•i
 = { 
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_‚
, &
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_pb
, 
U8G_COM_SW_SPI
 };

332 
u8g_dev_t
 
	gu8g_dev_ssd1322_nhd31ﬁed_2x_gr_hw_•i
 = { 
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_‚
, &
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_pb
, 
U8G_COM_HW_SPI
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_ssd1325_nhd27oled_bw.c

44 #ifde‡
OBSOLETE_CODE


46 
	~"u8g.h
"

48 
	#WIDTH
 128

	)

49 
	#HEIGHT
 64

	)

50 
	#PAGE_HEIGHT
 8

	)

53 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1325_1bô_nhd_27_12864ucy3_öô_£q
[] 
	gPROGMEM
 = {

54 
U8G_ESC_DLY
(10),

55 
U8G_ESC_CS
(0),

56 
U8G_ESC_ADR
(0),

57 
U8G_ESC_RST
(1),

58 
U8G_ESC_CS
(1),

79 
U8G_ESC_DLY
(100),

80 
U8G_ESC_DLY
(100),

82 
U8G_ESC_CS
(0),

83 
U8G_ESC_END


86 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1325_1bô_nhd_27_12864ucy3_¥ï¨e_∑ge_£q
[] 
	gPROGMEM
 = {

87 
U8G_ESC_ADR
(0),

88 
U8G_ESC_CS
(1),

93 
U8G_ESC_END


97 
	$u8g_dev_ssd1325_1bô_¥ï¨e_∑ge
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

99 
uöt8_t
 
∑ge
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.page;

101 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_1bô_nhd_27_12864ucy3_¥ï¨e_∑ge_£q
);

103 
∑ge
 <<= 3;

104 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

105 
∑ge
 += 7;

106 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

108 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

109 
	}
}

111 
	$u8g_dev_ssd1325_1bô_2x_¥ï¨e_∑ge
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
is_odd
)

113 
uöt8_t
 
∑ge
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.page;

115 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_1bô_nhd_27_12864ucy3_¥ï¨e_∑ge_£q
);

117 
∑ge
 <<= 1;

118 
∑ge
 +
is_odd
;

120 
∑ge
 <<= 3;

121 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

122 
∑ge
 += 7;

123 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

125 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

126 
	}
}

129 #ifde‡
OLD


130 
	$_OLD_u8g_dev_ssd1325_1bô_wrôe_16_pixñ
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
À·
, uöt8_à
right
)

132 
uöt8_t
 
d
, 
˙t
;

133 
˙t
 = 8;

136 
d
 = 0;

137 i‡–
À·
 & 1 )

138 
d
 |= 0x0f0;

139 i‡–
right
 & 1 )

140 
d
 |= 0x00f;

141 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
d
);

142 
À·
 >>= 1;

143 
right
 >>= 1;

144 
˙t
--;

145 } 
˙t
 > 0 );

146 
	}
}

149 
	$u8g_dev_ssd1325_1bô_wrôe_16_pixñ
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
À·
, uöt8_à
right
)

151 
uöt8_t
 
d
, 
˙t
;

152 
uöt8_t
 
buf
[8];

153 
˙t
 = 8;

156 
d
 = 0;

157 i‡–
À·
 & 128 )

158 
d
 |= 0x0f0;

159 i‡–
right
 & 128 )

160 
d
 |= 0x00f;

161 
˙t
--;

162 
buf
[
˙t
] = 
d
;

163 
À·
 <<= 1;

164 
right
 <<= 1;

165 } 
˙t
 > 0 );

166 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 8, 
buf
);

167 
	}
}

169 
	$u8g_dev_ssd1325_1bô_wrôe_buf„r
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
is_odd
)

171 
uöt8_t
 
˙t
, 
À·
, 
right
;

172 
uöt8_t
 *
±r
;

173 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

175 
±r
 = 
pb
->
buf
;

176 
˙t
 = 
pb
->
width
;

177 i‡–
is_odd
 )

178 
±r
 +
˙t
;

179 
˙t
 >>= 1;

182 
À·
 = *
±r
++;

183 
right
 = *
±r
++;

184 
	`u8g_dev_ssd1325_1bô_wrôe_16_pixñ
(
u8g
, 
dev
, 
À·
, 
right
);

185 
˙t
--;

186 }  
˙t
 > 0 );

187 
	}
}

189 
uöt8_t
 
	$u8g_dev_ssd1325_nhd27ﬁed_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

191 
msg
)

193 
U8G_DEV_MSG_INIT
:

194 
	`u8g_InôCom
(
u8g
, 
dev
);

195 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_1bô_nhd_27_12864ucy3_öô_£q
);

197 
U8G_DEV_MSG_STOP
:

199 
U8G_DEV_MSG_PAGE_NEXT
:

201 
	`u8g_dev_ssd1325_1bô_¥ï¨e_∑ge
(
u8g
, 
dev
);

202 
	`u8g_dev_ssd1325_1bô_wrôe_buf„r
(
u8g
, 
dev
, 0);

203 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

206 
U8G_DEV_MSG_CONTRAST
:

207 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

208 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

209 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

210 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

211 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

214  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

215 
	}
}

217 
uöt8_t
 
	$u8g_dev_ssd1325_nhd27ﬁed_2x_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

219 
msg
)

221 
U8G_DEV_MSG_INIT
:

222 
	`u8g_InôCom
(
u8g
, 
dev
);

223 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_1bô_nhd_27_12864ucy3_öô_£q
);

225 
U8G_DEV_MSG_STOP
:

227 
U8G_DEV_MSG_PAGE_NEXT
:

229 
	`u8g_dev_ssd1325_1bô_2x_¥ï¨e_∑ge
(
u8g
, 
dev
, 0);

230 
	`u8g_dev_ssd1325_1bô_wrôe_buf„r
(
u8g
, 
dev
, 0);

231 
	`u8g_dev_ssd1325_1bô_2x_¥ï¨e_∑ge
(
u8g
, 
dev
, 1);

232 
	`u8g_dev_ssd1325_1bô_wrôe_buf„r
(
u8g
, 
dev
, 1);

233 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

236 
U8G_DEV_MSG_CONTRAST
:

237 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

238 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

239 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

240 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

241 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

244  
	`u8g_dev_pb16v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

245 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_ssd1325_nhd27oled_bw_new.c

45 
	~"u8g.h
"

48 
	#WIDTH
 128

	)

49 
	#HEIGHT
 64

	)

52 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1325_nhd_27_12864_öô_£q
[] 
	gPROGMEM
 = {

53 
U8G_ESC_DLY
(10),

54 
U8G_ESC_CS
(0),

55 
U8G_ESC_ADR
(0),

56 
U8G_ESC_RST
(1),

57 
U8G_ESC_CS
(1),

79 
U8G_ESC_DLY
(50),

80 
U8G_ESC_CS
(0),

81 
U8G_ESC_END


84 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1325_¥ï¨e_row_£q
[] 
	gPROGMEM
 = {

85 
U8G_ESC_ADR
(0),

86 
U8G_ESC_CS
(1),

91 
U8G_ESC_END


94 
	$u8g_dev_ssd1325_¥ï¨e_row
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
dñè_row
)

96 
uöt8_t
 
row
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.
∑ge
;

98 
row
 *((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.
∑ge_height
;

99 
row
 +
dñè_row
;

101 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_¥ï¨e_row_£q
);

103 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
row
);

104 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
row
+1);

108 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

109 
	}
}

111 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_⁄
[] 
	gPROGMEM
 = {

112 
U8G_ESC_ADR
(0),

113 
U8G_ESC_CS
(1),

115 
U8G_ESC_CS
(1),

116 
U8G_ESC_END


119 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_off
[] 
	gPROGMEM
 = {

120 
U8G_ESC_ADR
(0),

121 
U8G_ESC_CS
(1),

123 
U8G_ESC_DLY
(50),

124 
U8G_ESC_CS
(1),

125 
U8G_ESC_END


129 
uöt8_t
 
	$u8g_dev_ssd1325_nhd27ﬁed_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

131 
msg
)

135 
U8G_DEV_MSG_INIT
:

136 
	`u8g_InôCom
(
u8g
, 
dev
);

137 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_nhd_27_12864_öô_£q
);

139 
U8G_DEV_MSG_STOP
:

141 
U8G_DEV_MSG_PAGE_NEXT
:

143 
uöt8_t
 
i
;

144 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

145 
uöt8_t
 *
p
 = 
pb
->
buf
;

146 
u8g_uöt_t
 
˙t
;

147 
˙t
 = 
pb
->
width
;

148 
˙t
 >>= 3;

150  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i++ )

152 
	`u8g_dev_ssd1325_¥ï¨e_row
(
u8g
, 
dev
, 
i
);

153 
	`u8g_WrôeSequí˚BWTo16GrDevi˚
(
u8g
, 
dev
, 
˙t
, 
p
);

154 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

155 
p
+=
˙t
;

159 
U8G_DEV_MSG_CONTRAST
:

160 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

161 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

162 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

163 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

164 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

166 
U8G_DEV_MSG_SLEEP_ON
:

167 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

169 
U8G_DEV_MSG_SLEEP_OFF
:

170 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

173  
	`u8g_dev_pb8h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

174 
	}
}

176 
uöt8_t
 
	$u8g_dev_ssd1325_nhd27ﬁed_2x_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

178 
msg
)

180 
U8G_DEV_MSG_INIT
:

181 
	`u8g_InôCom
(
u8g
, 
dev
);

182 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_nhd_27_12864_öô_£q
);

184 
U8G_DEV_MSG_STOP
:

186 
U8G_DEV_MSG_PAGE_NEXT
:

188 
uöt8_t
 
i
;

189 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

190 
uöt8_t
 *
p
 = 
pb
->
buf
;

191 
u8g_uöt_t
 
˙t
;

192 
˙t
 = 
pb
->
width
;

193 
˙t
 >>= 3;

195  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i++ )

197 
	`u8g_dev_ssd1325_¥ï¨e_row
(
u8g
, 
dev
, 
i
);

198 
	`u8g_WrôeSequí˚BWTo16GrDevi˚
(
u8g
, 
dev
, 
˙t
, 
p
);

199 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

200 
p
+=
˙t
;

204 
U8G_DEV_MSG_CONTRAST
:

205 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

206 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

207 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

208 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

209 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

211 
U8G_DEV_MSG_SLEEP_ON
:

212 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

214 
U8G_DEV_MSG_SLEEP_OFF
:

215 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

218  
	`u8g_dev_pb16h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

219 
	}
}

223 
U8G_PB_DEV
(
u8g_dev_ssd1325_nhd27ﬁed_bw_sw_•i
 , 
WIDTH
, 
HEIGHT
, 8, 
u8g_dev_ssd1325_nhd27ﬁed_bw_‚
, 
U8G_COM_SW_SPI
);

224 
U8G_PB_DEV
(
u8g_dev_ssd1325_nhd27ﬁed_bw_hw_•i
 , 
WIDTH
, 
HEIGHT
, 8, 
u8g_dev_ssd1325_nhd27ﬁed_bw_‚
, 
U8G_COM_HW_SPI
);

225 
U8G_PB_DEV
(
u8g_dev_ssd1325_nhd27ﬁed_bw_∑øŒñ
 , 
WIDTH
, 
HEIGHT
, 8, 
u8g_dev_ssd1325_nhd27ﬁed_bw_‚
, 
U8G_COM_FAST_PARALLEL
);

227 
uöt8_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_bw_buf
[
WIDTH
*2] 
	gU8G_NOCOMMON
 ;

228 
u8g_pb_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_bw_pb
 = { {16, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_buf
};

229 
u8g_dev_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_bw_sw_•i
 = { 
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_‚
, &
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_pb
, 
U8G_COM_SW_SPI
 };

230 
u8g_dev_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_bw_hw_•i
 = { 
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_‚
, &
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_pb
, 
U8G_COM_HW_SPI
 };

231 
u8g_dev_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_bw_∑øŒñ
 = { 
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_‚
, &
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_pb
, 
U8G_COM_FAST_PARALLEL
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_ssd1325_nhd27oled_gr.c

44 #ifde‡
OBSOLETE_CODE


46 
	~"u8g.h
"

48 
	#WIDTH
 128

	)

49 
	#HEIGHT
 64

	)

52 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1325_2bô_nhd_27_12864ucy3_öô_£q
[] 
	gPROGMEM
 = {

53 
U8G_ESC_DLY
(10),

54 
U8G_ESC_CS
(0),

55 
U8G_ESC_ADR
(0),

56 
U8G_ESC_RST
(1),

57 
U8G_ESC_CS
(1),

79 
U8G_ESC_DLY
(100),

80 
U8G_ESC_DLY
(100),

82 
U8G_ESC_CS
(0),

83 
U8G_ESC_END


86 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1325_2bô_nhd_27_12864ucy3_¥ï¨e_∑ge_£q
[] 
	gPROGMEM
 = {

87 
U8G_ESC_ADR
(0),

88 
U8G_ESC_CS
(1),

93 
U8G_ESC_END


97 
	$u8g_dev_ssd1325_2bô_¥ï¨e_∑ge
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

99 
uöt8_t
 
∑ge
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.page;

101 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_2bô_nhd_27_12864ucy3_¥ï¨e_∑ge_£q
);

103 
∑ge
 <<= 2;

104 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

105 
∑ge
 += 3;

106 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

108 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

109 
	}
}

111 
	$u8g_dev_ssd1325_2bô_2x_¥ï¨e_∑ge
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
is_odd
)

113 
uöt8_t
 
∑ge
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.page;

115 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_2bô_nhd_27_12864ucy3_¥ï¨e_∑ge_£q
);

117 
∑ge
 <<= 1;

118 
∑ge
 +
is_odd
;

121 
∑ge
 <<= 2;

122 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

123 
∑ge
 += 3;

124 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

126 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

127 
	}
}

130 
	$u8g_dev_ssd1325_2bô_wrôe_4_pixñ
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
À·
, uöt8_à
right
)

132 
uöt8_t
 
d
, 
tmp
, 
˙t
;

133 
˙t
 = 4;

136 
d
 = 
À·
;

137 
d
 &= 3;

138 
d
 <<= 4;

139 
tmp
 = 
right
;

140 
tmp
 &= 3;

141 
d
 |
tmp
;

142 
d
 <<= 2;

143 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
d
);

144 
À·
 >>= 2;

145 
right
 >>= 2;

146 
˙t
--;

147 } 
˙t
 > 0 );

148 
	}
}

150 
	$u8g_dev_ssd1325_2bô_wrôe_buf„r
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

152 
uöt8_t
 
˙t
, 
À·
, 
right
;

153 
uöt8_t
 *
±r
;

154 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

156 
˙t
 = 
pb
->
width
;

157 
˙t
 >>= 1;

158 
±r
 = 
pb
->
buf
;

161 
À·
 = *
±r
++;

162 
right
 = *
±r
++;

163 
	`u8g_dev_ssd1325_2bô_wrôe_4_pixñ
(
u8g
, 
dev
, 
À·
, 
right
);

164 
˙t
--;

165 }  
˙t
 > 0 );

166 
	}
}

168 
	$u8g_dev_ssd1325_2bô_2x_wrôe_buf„r
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
is_odd
)

170 
uöt8_t
 
˙t
, 
À·
, 
right
;

171 
uöt8_t
 *
±r
;

172 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

174 
±r
 = 
pb
->
buf
;

175 
˙t
 = 
pb
->
width
;

176 i‡–
is_odd
 )

177 
±r
 +
˙t
;

178 
˙t
 >>= 1;

181 
À·
 = *
±r
++;

182 
right
 = *
±r
++;

183 
	`u8g_dev_ssd1325_2bô_wrôe_4_pixñ
(
u8g
, 
dev
, 
À·
, 
right
);

184 
˙t
--;

185 }  
˙t
 > 0 );

186 
	}
}

188 
uöt8_t
 
	$u8g_dev_ssd1325_nhd27ﬁed_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

190 
msg
)

192 
U8G_DEV_MSG_INIT
:

193 
	`u8g_InôCom
(
u8g
, 
dev
);

194 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_2bô_nhd_27_12864ucy3_öô_£q
);

196 
U8G_DEV_MSG_STOP
:

198 
U8G_DEV_MSG_PAGE_NEXT
:

200 
	`u8g_dev_ssd1325_2bô_¥ï¨e_∑ge
(
u8g
, 
dev
);

201 
	`u8g_dev_ssd1325_2bô_wrôe_buf„r
(
u8g
, 
dev
);

202 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

205 
U8G_DEV_MSG_CONTRAST
:

206 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

207 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

208 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

209 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

210 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

213  
	`u8g_dev_pb8v2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

214 
	}
}

216 
uöt8_t
 
	$u8g_dev_ssd1325_nhd27ﬁed_2x_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

218 
msg
)

220 
U8G_DEV_MSG_INIT
:

221 
	`u8g_InôCom
(
u8g
, 
dev
);

222 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_2bô_nhd_27_12864ucy3_öô_£q
);

224 
U8G_DEV_MSG_STOP
:

226 
U8G_DEV_MSG_PAGE_NEXT
:

228 
	`u8g_dev_ssd1325_2bô_2x_¥ï¨e_∑ge
(
u8g
, 
dev
, 0);

229 
	`u8g_dev_ssd1325_2bô_2x_wrôe_buf„r
(
u8g
, 
dev
, 0);

230 
	`u8g_dev_ssd1325_2bô_2x_¥ï¨e_∑ge
(
u8g
, 
dev
, 1);

231 
	`u8g_dev_ssd1325_2bô_2x_wrôe_buf„r
(
u8g
, 
dev
, 1);

232 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

235 
U8G_DEV_MSG_CONTRAST
:

236 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

237 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

238 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

239 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

240 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

243  
	`u8g_dev_pb16v2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

244 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_ssd1325_nhd27oled_gr_new.c

45 
	~"u8g.h
"

47 
	#WIDTH
 128

	)

48 
	#HEIGHT
 64

	)

51 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1325_2bô_nhd_27_12864ucy3_öô_£q
[] 
	gPROGMEM
 = {

52 
U8G_ESC_DLY
(10),

53 
U8G_ESC_CS
(0),

54 
U8G_ESC_ADR
(0),

55 
U8G_ESC_RST
(1),

56 
U8G_ESC_CS
(1),

78 
U8G_ESC_DLY
(50),

79 
U8G_ESC_CS
(0),

80 
U8G_ESC_END


83 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1325_2bô_nhd_27_12864ucy3_¥ï¨e_∑ge_£q
[] 
	gPROGMEM
 = {

84 
U8G_ESC_ADR
(0),

85 
U8G_ESC_CS
(1),

90 
U8G_ESC_END


93 
	$u8g_dev_ssd1325_gr_¥ï¨e_row
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
dñè_row
)

95 
uöt8_t
 
row
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.
∑ge
;

97 
row
 *((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.
∑ge_height
;

98 
row
 +
dñè_row
;

100 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_2bô_nhd_27_12864ucy3_¥ï¨e_∑ge_£q
);

102 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
row
);

103 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
row
+1);

107 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

108 
	}
}

110 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_⁄
[] 
	gPROGMEM
 = {

111 
U8G_ESC_ADR
(0),

112 
U8G_ESC_CS
(1),

114 
U8G_ESC_CS
(1),

115 
U8G_ESC_END


118 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_off
[] 
	gPROGMEM
 = {

119 
U8G_ESC_ADR
(0),

120 
U8G_ESC_CS
(1),

122 
U8G_ESC_DLY
(50),

123 
U8G_ESC_CS
(1),

124 
U8G_ESC_END


129 
uöt8_t
 
	$u8g_dev_ssd1325_nhd27ﬁed_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

131 
msg
)

133 
U8G_DEV_MSG_INIT
:

134 
	`u8g_InôCom
(
u8g
, 
dev
);

135 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_2bô_nhd_27_12864ucy3_öô_£q
);

137 
U8G_DEV_MSG_STOP
:

139 
U8G_DEV_MSG_PAGE_NEXT
:

141 
uöt8_t
 
i
;

142 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

143 
uöt8_t
 *
p
 = 
pb
->
buf
;

144 
u8g_uöt_t
 
˙t
;

145 
˙t
 = 
pb
->
width
;

146 
˙t
 >>= 2;

148  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i++ )

150 
	`u8g_dev_ssd1325_gr_¥ï¨e_row
(
u8g
, 
dev
, 
i
);

151 
	`u8g_WrôeSequí˚4LTo16GrDevi˚
(
u8g
, 
dev
, 
˙t
, 
p
);

152 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

153 
p
+=
˙t
;

157 
U8G_DEV_MSG_CONTRAST
:

158 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

159 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

160 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

161 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

162 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

164 
U8G_DEV_MSG_SLEEP_ON
:

165 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

167 
U8G_DEV_MSG_SLEEP_OFF
:

168 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

171  
	`u8g_dev_pb8h2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

172 
	}
}

176 
uöt8_t
 
	$u8g_dev_ssd1325_nhd27ﬁed_2x_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

178 
msg
)

180 
U8G_DEV_MSG_INIT
:

181 
	`u8g_InôCom
(
u8g
, 
dev
);

182 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_2bô_nhd_27_12864ucy3_öô_£q
);

184 
U8G_DEV_MSG_STOP
:

186 
U8G_DEV_MSG_PAGE_NEXT
:

188 
uöt8_t
 
i
;

189 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

190 
uöt8_t
 *
p
 = 
pb
->
buf
;

191 
u8g_uöt_t
 
˙t
;

192 
˙t
 = 
pb
->
width
;

193 
˙t
 >>= 2;

195  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i++ )

197 
	`u8g_dev_ssd1325_gr_¥ï¨e_row
(
u8g
, 
dev
, 
i
);

198 
	`u8g_WrôeSequí˚4LTo16GrDevi˚
(
u8g
, 
dev
, 
˙t
, 
p
);

199 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

200 
p
+=
˙t
;

204 
U8G_DEV_MSG_CONTRAST
:

205 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

206 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

207 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

208 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

209 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

211 
U8G_DEV_MSG_SLEEP_ON
:

212 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

214 
U8G_DEV_MSG_SLEEP_OFF
:

215 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

218  
	`u8g_dev_pb16h2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

219 
	}
}

221 
U8G_PB_DEV
(
u8g_dev_ssd1325_nhd27ﬁed_gr_sw_•i
 , 
WIDTH
, 
HEIGHT
, 4, 
u8g_dev_ssd1325_nhd27ﬁed_gr_‚
, 
U8G_COM_SW_SPI
);

222 
U8G_PB_DEV
(
u8g_dev_ssd1325_nhd27ﬁed_gr_hw_•i
 , 
WIDTH
, 
HEIGHT
, 4, 
u8g_dev_ssd1325_nhd27ﬁed_gr_‚
, 
U8G_COM_HW_SPI
);

224 
uöt8_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_buf
[
WIDTH
*2] 
	gU8G_NOCOMMON
 ;

225 
u8g_pb_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_pb
 = { {8, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_ssd1325_nhd27ﬁed_2x_buf
};

226 
u8g_dev_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_gr_sw_•i
 = { 
u8g_dev_ssd1325_nhd27ﬁed_2x_gr_‚
, &
u8g_dev_ssd1325_nhd27ﬁed_2x_pb
, 
U8G_COM_SW_SPI
 };

227 
u8g_dev_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_gr_hw_•i
 = { 
u8g_dev_ssd1325_nhd27ﬁed_2x_gr_‚
, &
u8g_dev_ssd1325_nhd27ﬁed_2x_pb
, 
U8G_COM_HW_SPI
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_ssd1327_96x96_gr.c

45 
	~"u8g.h
"

47 
	#WIDTH
 96

	)

48 
	#HEIGHT
 96

	)

49 
	#XOFFSET
 8

	)

54 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1327_2bô_96x96_öô_£q
[] 
	gPROGMEM
 = {

55 
U8G_ESC_DLY
(10),

56 
U8G_ESC_CS
(0),

57 
U8G_ESC_ADR
(0),

58 
U8G_ESC_RST
(1),

59 
U8G_ESC_CS
(1),

96 
U8G_ESC_DLY
(100),

98 
U8G_ESC_DLY
(100),

101 
U8G_ESC_DLY
(100),

112 
U8G_ESC_ADR
(1),

118 
U8G_ESC_CS
(0),

119 
U8G_ESC_END


122 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1327_2bô_96x96_¥ï¨e_∑ge_£q
[] 
	gPROGMEM
 = {

123 
U8G_ESC_ADR
(0),

124 
U8G_ESC_CS
(1),

126 
XOFFSET
,

129 
U8G_ESC_END


133 
	$u8g_dev_ssd1327_2bô_¥ï¨e_∑ge
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

135 
uöt8_t
 
∑ge
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.page;

137 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1327_2bô_96x96_¥ï¨e_∑ge_£q
);

139 
∑ge
 <<= 2;

140 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

141 
∑ge
 += 3;

142 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

144 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

145 
	}
}

147 
	$u8g_dev_ssd1327_2bô_2x_¥ï¨e_∑ge
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
is_odd
)

149 
uöt8_t
 
∑ge
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.page;

151 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1327_2bô_96x96_¥ï¨e_∑ge_£q
);

153 
∑ge
 <<= 1;

154 
∑ge
 +
is_odd
;

156 
∑ge
 <<= 2;

157 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

158 
∑ge
 += 3;

159 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

161 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

162 
	}
}

165 
	$u8g_dev_ssd1327_2bô_wrôe_4_pixñ
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
À·
, uöt8_à
right
)

167 
uöt8_t
 
d
, 
tmp
, 
˙t
;

168 
uöt8_t
 
buf
[4];

169 
buf
[0] = 0;

170 
buf
[1] = 0;

171 
buf
[2] = 0;

172 
buf
[3] = 0;

173 
˙t
 = 0;

176 i‡–
À·
 =0 && 
right
 == 0 )

178 
d
 = 
À·
;

179 
d
 &= 3;

180 
d
 <<= 4;

181 
tmp
 = 
right
;

182 
tmp
 &= 3;

183 
d
 |
tmp
;

184 
d
 <<= 2;

185 
buf
[
˙t
] = 
d
;

186 
À·
 >>= 2;

187 
right
 >>= 2;

188 
˙t
++;

189 } 
˙t
 < 4 );

190 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 4, 
buf
);

191 
	}
}

193 
	$u8g_dev_ssd1327_2bô_wrôe_buf„r
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

195 
uöt8_t
 
˙t
, 
À·
, 
right
;

196 
uöt8_t
 *
±r
;

197 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

199 
˙t
 = 
pb
->
width
;

200 
˙t
 >>= 1;

201 
±r
 = 
pb
->
buf
;

204 
À·
 = *
±r
++;

205 
right
 = *
±r
++;

206 
	`u8g_dev_ssd1327_2bô_wrôe_4_pixñ
(
u8g
, 
dev
, 
À·
, 
right
);

207 
˙t
--;

208 }  
˙t
 > 0 );

209 
	}
}

211 
	$u8g_dev_ssd1327_2bô_2x_wrôe_buf„r
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
is_odd
)

213 
uöt8_t
 
˙t
, 
À·
, 
right
;

214 
uöt8_t
 *
±r
;

215 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

217 
±r
 = 
pb
->
buf
;

218 
˙t
 = 
pb
->
width
;

219 i‡–
is_odd
 )

220 
±r
 +
˙t
;

221 
˙t
 >>= 1;

224 
À·
 = *
±r
++;

225 
right
 = *
±r
++;

226 
	`u8g_dev_ssd1327_2bô_wrôe_4_pixñ
(
u8g
, 
dev
, 
À·
, 
right
);

227 
˙t
--;

228 }  
˙t
 > 0 );

229 
	}
}

231 
uöt8_t
 
	$u8g_dev_ssd1327_96x96_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

233 
msg
)

235 
U8G_DEV_MSG_INIT
:

236 
	`u8g_InôCom
(
u8g
, 
dev
);

237 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1327_2bô_96x96_öô_£q
);

239 
U8G_DEV_MSG_STOP
:

241 
U8G_DEV_MSG_PAGE_NEXT
:

243 
	`u8g_dev_ssd1327_2bô_¥ï¨e_∑ge
(
u8g
, 
dev
);

244 
	`u8g_dev_ssd1327_2bô_wrôe_buf„r
(
u8g
, 
dev
);

245 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

248 
U8G_DEV_MSG_CONTRAST
:

249 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

250 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

251 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

252 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

253 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

256  
	`u8g_dev_pb8v2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

257 
	}
}

259 
uöt8_t
 
	$u8g_dev_ssd1327_96x96_2x_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

261 
msg
)

263 
U8G_DEV_MSG_INIT
:

264 
	`u8g_InôCom
(
u8g
, 
dev
);

265 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1327_2bô_96x96_öô_£q
);

267 
U8G_DEV_MSG_STOP
:

269 
U8G_DEV_MSG_PAGE_NEXT
:

271 
	`u8g_dev_ssd1327_2bô_2x_¥ï¨e_∑ge
(
u8g
, 
dev
, 0);

272 
	`u8g_dev_ssd1327_2bô_2x_wrôe_buf„r
(
u8g
, 
dev
, 0);

273 
	`u8g_dev_ssd1327_2bô_2x_¥ï¨e_∑ge
(
u8g
, 
dev
, 1);

274 
	`u8g_dev_ssd1327_2bô_2x_wrôe_buf„r
(
u8g
, 
dev
, 1);

275 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

278 
U8G_DEV_MSG_CONTRAST
:

279 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

280 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

281 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

282 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

283 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

286  
	`u8g_dev_pb16v2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

287 
	}
}

289 
U8G_PB_DEV
(
u8g_dev_ssd1327_96x96_gr_sw_•i
 , 
WIDTH
, 
HEIGHT
, 4, 
u8g_dev_ssd1327_96x96_gr_‚
, 
U8G_COM_SW_SPI
);

290 
U8G_PB_DEV
(
u8g_dev_ssd1327_96x96_gr_hw_•i
 , 
WIDTH
, 
HEIGHT
, 4, 
u8g_dev_ssd1327_96x96_gr_‚
, 
U8G_COM_HW_SPI
);

291 
U8G_PB_DEV
(
u8g_dev_ssd1327_96x96_gr_i2c
 , 
WIDTH
, 
HEIGHT
, 4, 
u8g_dev_ssd1327_96x96_gr_‚
, 
U8G_COM_SSD_I2C
);

293 
	#DWIDTH
 (2*
WIDTH
)

	)

294 
uöt8_t
 
	gu8g_dev_ssd1327_96x96_2x_buf
[
DWIDTH
] 
	gU8G_NOCOMMON
 ;

295 
u8g_pb_t
 
	gu8g_dev_ssd1327_96x96_2x_pb
 = { {8, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_ssd1327_96x96_2x_buf
};

296 
u8g_dev_t
 
	gu8g_dev_ssd1327_96x96_2x_gr_sw_•i
 = { 
u8g_dev_ssd1327_96x96_2x_gr_‚
, &
u8g_dev_ssd1327_96x96_2x_pb
, 
U8G_COM_SW_SPI
 };

297 
u8g_dev_t
 
	gu8g_dev_ssd1327_96x96_2x_gr_hw_•i
 = { 
u8g_dev_ssd1327_96x96_2x_gr_‚
, &
u8g_dev_ssd1327_96x96_2x_pb
, 
U8G_COM_HW_SPI
 };

298 
u8g_dev_t
 
	gu8g_dev_ssd1327_96x96_2x_gr_i2c
 = { 
u8g_dev_ssd1327_96x96_2x_gr_‚
, &
u8g_dev_ssd1327_96x96_2x_pb
, 
U8G_COM_SSD_I2C
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_st7565_64128n.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

44 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_64128n_öô_£q
[] 
	gPROGMEM
 = {

45 
U8G_ESC_CS
(0),

46 
U8G_ESC_ADR
(0),

47 
U8G_ESC_CS
(1),

48 
U8G_ESC_RST
(15),

57 
U8G_ESC_DLY
(50),

60 
U8G_ESC_DLY
(50),

63 
U8G_ESC_DLY
(50),

75 
U8G_ESC_DLY
(100),

77 
U8G_ESC_DLY
(100),

78 
U8G_ESC_DLY
(100),

80 
U8G_ESC_CS
(0),

81 
U8G_ESC_END


84 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_64128n_d©a_°¨t
[] 
	gPROGMEM
 = {

85 
U8G_ESC_ADR
(0),

86 
U8G_ESC_CS
(1),

89 
U8G_ESC_END


92 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_64128n_¶ìp_⁄
[] 
	gPROGMEM
 = {

93 
U8G_ESC_ADR
(0),

94 
U8G_ESC_CS
(1),

99 
U8G_ESC_CS
(1),

100 
U8G_ESC_END


103 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_64128n_¶ìp_off
[] 
	gPROGMEM
 = {

104 
U8G_ESC_ADR
(0),

105 
U8G_ESC_CS
(1),

108 
U8G_ESC_DLY
(50),

109 
U8G_ESC_CS
(1),

110 
U8G_ESC_END


113 
uöt8_t
 
	$u8g_dev_°7565_64128n_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

115 
msg
)

117 
U8G_DEV_MSG_INIT
:

118 
	`u8g_InôCom
(
u8g
, 
dev
);

119 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_64128n_öô_£q
);

121 
U8G_DEV_MSG_STOP
:

123 
U8G_DEV_MSG_PAGE_NEXT
:

125 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

126 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_64128n_d©a_°¨t
);

127 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

128 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

129 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

131 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

134 
U8G_DEV_MSG_CONTRAST
:

135 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

136 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

137 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

138 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

139 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

141 
U8G_DEV_MSG_SLEEP_ON
:

142 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_64128n_¶ìp_⁄
);

144 
U8G_DEV_MSG_SLEEP_OFF
:

145 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_64128n_¶ìp_off
);

148  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

149 
	}
}

151 
U8G_PB_DEV
(
u8g_dev_°7565_64128n_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_64128n_‚
, 
U8G_COM_SW_SPI
);

152 
U8G_PB_DEV
(
u8g_dev_°7565_64128n_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_64128n_‚
, 
U8G_COM_HW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_st7565_dogm128.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

43 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_dogm128_öô_£q
[] 
	gPROGMEM
 = {

44 
U8G_ESC_CS
(0),

45 
U8G_ESC_ADR
(0),

46 
U8G_ESC_RST
(1),

47 
U8G_ESC_CS
(1),

64 
U8G_ESC_DLY
(50),

66 
U8G_ESC_CS
(0),

67 
U8G_ESC_END


70 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_dogm128_d©a_°¨t
[] 
	gPROGMEM
 = {

71 
U8G_ESC_ADR
(0),

72 
U8G_ESC_CS
(1),

75 
U8G_ESC_END


78 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_dogm128_¶ìp_⁄
[] 
	gPROGMEM
 = {

79 
U8G_ESC_ADR
(0),

80 
U8G_ESC_CS
(1),

85 
U8G_ESC_CS
(1),

86 
U8G_ESC_END


89 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_dogm128_¶ìp_off
[] 
	gPROGMEM
 = {

90 
U8G_ESC_ADR
(0),

91 
U8G_ESC_CS
(1),

94 
U8G_ESC_DLY
(50),

95 
U8G_ESC_CS
(1),

96 
U8G_ESC_END


99 
uöt8_t
 
	$u8g_dev_°7565_dogm128_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

101 
msg
)

103 
U8G_DEV_MSG_INIT
:

104 
	`u8g_InôCom
(
u8g
, 
dev
);

105 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_dogm128_öô_£q
);

107 
U8G_DEV_MSG_STOP
:

109 
U8G_DEV_MSG_PAGE_NEXT
:

111 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

112 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_dogm128_d©a_°¨t
);

113 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

114 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

115 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

117 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

120 
U8G_DEV_MSG_CONTRAST
:

121 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

122 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

123 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

124 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

125 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

127 
U8G_DEV_MSG_SLEEP_ON
:

128 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_dogm128_¶ìp_⁄
);

130 
U8G_DEV_MSG_SLEEP_OFF
:

131 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_dogm128_¶ìp_off
);

134  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

135 
	}
}

137 
U8G_PB_DEV
(
u8g_dev_°7565_dogm128_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_dogm128_‚
, 
U8G_COM_SW_SPI
);

138 
U8G_PB_DEV
(
u8g_dev_°7565_dogm128_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_dogm128_‚
, 
U8G_COM_HW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_st7565_dogm132.c

37 
	~"u8g.h
"

39 
	#WIDTH
 132

	)

40 
	#HEIGHT
 32

	)

41 
	#PAGE_HEIGHT
 8

	)

43 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_dogm132_öô_£q
[] 
	gPROGMEM
 = {

44 
U8G_ESC_CS
(0),

45 
U8G_ESC_ADR
(0),

46 
U8G_ESC_RST
(1),

47 
U8G_ESC_CS
(1),

64 #ifde‡
OBSOLETE_DOGM128


80 
U8G_ESC_DLY
(100),

82 
U8G_ESC_DLY
(100),

83 
U8G_ESC_DLY
(100),

85 
U8G_ESC_CS
(0),

86 
U8G_ESC_END


89 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_dogm132_d©a_°¨t
[] 
	gPROGMEM
 = {

90 
U8G_ESC_ADR
(0),

91 
U8G_ESC_CS
(1),

94 
U8G_ESC_END


97 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_dogm132_¶ìp_⁄
[] 
	gPROGMEM
 = {

98 
U8G_ESC_ADR
(0),

99 
U8G_ESC_CS
(1),

104 
U8G_ESC_CS
(1),

105 
U8G_ESC_END


108 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_dogm132_¶ìp_off
[] 
	gPROGMEM
 = {

109 
U8G_ESC_ADR
(0),

110 
U8G_ESC_CS
(1),

113 
U8G_ESC_DLY
(50),

114 
U8G_ESC_CS
(1),

115 
U8G_ESC_END


118 
uöt8_t
 
	$u8g_dev_°7565_dogm132_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

120 
msg
)

122 
U8G_DEV_MSG_INIT
:

123 
	`u8g_InôCom
(
u8g
, 
dev
);

124 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_dogm132_öô_£q
);

126 
U8G_DEV_MSG_STOP
:

128 
U8G_DEV_MSG_PAGE_NEXT
:

130 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

131 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_dogm132_d©a_°¨t
);

132 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

133 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

134 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

136 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

139 
U8G_DEV_MSG_CONTRAST
:

140 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

141 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

142 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

143 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

144 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

146 
U8G_DEV_MSG_SLEEP_ON
:

147 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_dogm132_¶ìp_⁄
);

149 
U8G_DEV_MSG_SLEEP_OFF
:

150 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_dogm132_¶ìp_off
);

153  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

154 
	}
}

156 
U8G_PB_DEV
(
u8g_dev_°7565_dogm132_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_dogm132_‚
, 
U8G_COM_SW_SPI
);

157 
U8G_PB_DEV
(
u8g_dev_°7565_dogm132_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_dogm132_‚
, 
U8G_COM_HW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_st7565_lm6059.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

44 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_lm6059_öô_£q
[] 
	gPROGMEM
 = {

45 
U8G_ESC_CS
(0),

46 
U8G_ESC_ADR
(0),

47 
U8G_ESC_CS
(1),

48 
U8G_ESC_RST
(15),

57 
U8G_ESC_DLY
(50),

60 
U8G_ESC_DLY
(50),

63 
U8G_ESC_DLY
(50),

77 
U8G_ESC_DLY
(100),

79 
U8G_ESC_DLY
(100),

80 
U8G_ESC_DLY
(100),

82 
U8G_ESC_CS
(0),

83 
U8G_ESC_END


86 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_lm6059_d©a_°¨t
[] 
	gPROGMEM
 = {

87 
U8G_ESC_ADR
(0),

88 
U8G_ESC_CS
(1),

91 
U8G_ESC_END


94 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_lm6059_¶ìp_⁄
[] 
	gPROGMEM
 = {

95 
U8G_ESC_ADR
(0),

96 
U8G_ESC_CS
(1),

101 
U8G_ESC_CS
(1),

102 
U8G_ESC_END


105 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_lm6059_¶ìp_off
[] 
	gPROGMEM
 = {

106 
U8G_ESC_ADR
(0),

107 
U8G_ESC_CS
(1),

110 
U8G_ESC_DLY
(50),

111 
U8G_ESC_CS
(1),

112 
U8G_ESC_END


116 
uöt8_t
 
	$u8g_dev_°7565_lm6059_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

118 
msg
)

120 
U8G_DEV_MSG_INIT
:

121 
	`u8g_InôCom
(
u8g
, 
dev
);

122 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_lm6059_öô_£q
);

124 
U8G_DEV_MSG_STOP
:

126 
U8G_DEV_MSG_PAGE_NEXT
:

128 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

129 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_lm6059_d©a_°¨t
);

130 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

131 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

132 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

134 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

137 
U8G_DEV_MSG_CONTRAST
:

138 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

139 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

140 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

141 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

142 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

144 
U8G_DEV_MSG_SLEEP_ON
:

145 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_lm6059_¶ìp_⁄
);

147 
U8G_DEV_MSG_SLEEP_OFF
:

148 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_lm6059_¶ìp_off
);

151  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

152 
	}
}

154 
U8G_PB_DEV
(
u8g_dev_°7565_lm6059_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_lm6059_‚
, 
U8G_COM_SW_SPI
);

155 
U8G_PB_DEV
(
u8g_dev_°7565_lm6059_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_lm6059_‚
, 
U8G_COM_HW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_st7565_lm6063.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

43 #ifde‡
OLD_ADAFRUIT_CODE


44 c⁄° 
uöt8_t
 
	gOLD_u8g_dev_°7565_lm6063_öô_£q
[] 
	gPROGMEM
 = {

45 
U8G_ESC_CS
(0),

46 
U8G_ESC_ADR
(0),

47 
U8G_ESC_RST
(1),

48 
U8G_ESC_CS
(1),

65 
U8G_ESC_DLY
(100),

67 
U8G_ESC_DLY
(100),

68 
U8G_ESC_DLY
(100),

70 
U8G_ESC_CS
(0),

71 
U8G_ESC_END


76 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_lm6063_öô_£q
[] 
	gPROGMEM
 = {

77 
U8G_ESC_CS
(0),

78 
U8G_ESC_ADR
(0),

79 
U8G_ESC_CS
(1),

80 
U8G_ESC_RST
(15),

88 
U8G_ESC_DLY
(50),

91 
U8G_ESC_DLY
(50),

94 
U8G_ESC_DLY
(50),

108 
U8G_ESC_DLY
(100),

110 
U8G_ESC_DLY
(100),

111 
U8G_ESC_DLY
(100),

113 
U8G_ESC_CS
(0),

114 
U8G_ESC_END


117 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_lm6063_d©a_°¨t
[] 
	gPROGMEM
 = {

118 
U8G_ESC_ADR
(0),

119 
U8G_ESC_CS
(1),

122 
U8G_ESC_END


125 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_°7565_¶ìp_⁄
[] 
	gPROGMEM
 = {

126 
U8G_ESC_ADR
(0),

127 
U8G_ESC_CS
(1),

132 
U8G_ESC_CS
(1),

133 
U8G_ESC_END


136 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_°7565_¶ìp_off
[] 
	gPROGMEM
 = {

137 
U8G_ESC_ADR
(0),

138 
U8G_ESC_CS
(1),

141 
U8G_ESC_DLY
(50),

142 
U8G_ESC_CS
(1),

143 
U8G_ESC_END


147 
uöt8_t
 
	$u8g_dev_°7565_lm6063_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

149 
msg
)

151 
U8G_DEV_MSG_INIT
:

152 
	`u8g_InôCom
(
u8g
, 
dev
);

153 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_lm6063_öô_£q
);

155 
U8G_DEV_MSG_STOP
:

157 
U8G_DEV_MSG_PAGE_NEXT
:

159 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

160 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_lm6063_d©a_°¨t
);

161 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

162 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

163 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

165 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

168 
U8G_DEV_MSG_CONTRAST
:

169 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

170 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

171 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

172 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

173 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

175 
U8G_DEV_MSG_SLEEP_ON
:

176 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_°7565_¶ìp_⁄
);

178 
U8G_DEV_MSG_SLEEP_OFF
:

179 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_°7565_¶ìp_off
);

182  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

183 
	}
}

185 
U8G_PB_DEV
(
u8g_dev_°7565_lm6063_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_lm6063_‚
, 
U8G_COM_SW_SPI
);

186 
U8G_PB_DEV
(
u8g_dev_°7565_lm6063_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_lm6063_‚
, 
U8G_COM_HW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_st7565_nhd_c12832.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 32

	)

41 
	#PAGE_HEIGHT
 8

	)

43 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_c12832_öô_£q
[] 
	gPROGMEM
 = {

44 
U8G_ESC_CS
(0),

45 
U8G_ESC_ADR
(0),

46 
U8G_ESC_RST
(1),

47 
U8G_ESC_CS
(1),

65 
U8G_ESC_DLY
(100),

67 
U8G_ESC_DLY
(100),

68 
U8G_ESC_DLY
(100),

70 
U8G_ESC_CS
(0),

71 
U8G_ESC_END


74 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_c12832_d©a_°¨t
[] 
	gPROGMEM
 = {

75 
U8G_ESC_ADR
(0),

76 
U8G_ESC_CS
(1),

79 
U8G_ESC_END


82 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_c12832_¶ìp_⁄
[] 
	gPROGMEM
 = {

83 
U8G_ESC_ADR
(0),

84 
U8G_ESC_CS
(1),

89 
U8G_ESC_CS
(1),

90 
U8G_ESC_END


93 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_c12832_¶ìp_off
[] 
	gPROGMEM
 = {

94 
U8G_ESC_ADR
(0),

95 
U8G_ESC_CS
(1),

98 
U8G_ESC_DLY
(50),

99 
U8G_ESC_CS
(1),

100 
U8G_ESC_END


103 
uöt8_t
 
	$u8g_dev_°7565_c12832_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

105 
msg
)

107 
U8G_DEV_MSG_INIT
:

108 
	`u8g_InôCom
(
u8g
, 
dev
);

109 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_c12832_öô_£q
);

111 
U8G_DEV_MSG_STOP
:

113 
U8G_DEV_MSG_PAGE_NEXT
:

115 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

116 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_c12832_d©a_°¨t
);

117 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

118 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

119 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

121 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

124 
U8G_DEV_MSG_CONTRAST
:

125 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

126 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

127 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

128 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

129 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

131 
U8G_DEV_MSG_SLEEP_ON
:

132 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_c12832_¶ìp_⁄
);

134 
U8G_DEV_MSG_SLEEP_OFF
:

135 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_c12832_¶ìp_off
);

138  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

139 
	}
}

141 
U8G_PB_DEV
(
u8g_dev_°7565_nhd_c12832_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_c12832_‚
, 
U8G_COM_SW_SPI
);

142 
U8G_PB_DEV
(
u8g_dev_°7565_nhd_c12832_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_c12832_‚
, 
U8G_COM_HW_SPI
);

143 
U8G_PB_DEV
(
u8g_dev_°7565_nhd_c12832_∑øŒñ
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_c12832_‚
, 
U8G_COM_PARALLEL
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_st7565_nhd_c12864.c

39 
	~"u8g.h
"

41 
	#WIDTH
 128

	)

42 
	#HEIGHT
 64

	)

43 
	#PAGE_HEIGHT
 8

	)

45 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_nhd_c12864_öô_£q
[] 
	gPROGMEM
 = {

46 
U8G_ESC_CS
(0),

47 
U8G_ESC_ADR
(0),

48 
U8G_ESC_RST
(10),

49 
U8G_ESC_CS
(1),

66 
U8G_ESC_DLY
(100),

68 
U8G_ESC_DLY
(100),

69 
U8G_ESC_DLY
(100),

71 
U8G_ESC_CS
(0),

72 
U8G_ESC_END


75 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_nhd_c12864_d©a_°¨t
[] 
	gPROGMEM
 = {

76 
U8G_ESC_ADR
(0),

77 
U8G_ESC_CS
(1),

80 
U8G_ESC_END


83 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_c12864_¶ìp_⁄
[] 
	gPROGMEM
 = {

84 
U8G_ESC_ADR
(0),

85 
U8G_ESC_CS
(1),

90 
U8G_ESC_CS
(1),

91 
U8G_ESC_END


94 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_c12864_¶ìp_off
[] 
	gPROGMEM
 = {

95 
U8G_ESC_ADR
(0),

96 
U8G_ESC_CS
(1),

99 
U8G_ESC_DLY
(50),

100 
U8G_ESC_CS
(1),

101 
U8G_ESC_END


104 
uöt8_t
 
	$u8g_dev_°7565_nhd_c12864_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

106 
msg
)

108 
U8G_DEV_MSG_INIT
:

109 
	`u8g_InôCom
(
u8g
, 
dev
);

110 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_nhd_c12864_öô_£q
);

112 
U8G_DEV_MSG_STOP
:

114 
U8G_DEV_MSG_PAGE_NEXT
:

116 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

117 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_nhd_c12864_d©a_°¨t
);

118 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

119 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

120 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

122 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

125 
U8G_DEV_MSG_CONTRAST
:

126 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

127 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

128 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

129 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

130 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

132 
U8G_DEV_MSG_SLEEP_ON
:

133 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_c12864_¶ìp_⁄
);

135 
U8G_DEV_MSG_SLEEP_OFF
:

136 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_c12864_¶ìp_off
);

139  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

140 
	}
}

142 
U8G_PB_DEV
(
u8g_dev_°7565_nhd_c12864_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_nhd_c12864_‚
, 
U8G_COM_SW_SPI
);

143 
U8G_PB_DEV
(
u8g_dev_°7565_nhd_c12864_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_nhd_c12864_‚
, 
U8G_COM_HW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_st7687_c144mvgd.c

39 
	~"u8g.h
"

41 
	#WIDTH
 128

	)

42 
	#HEIGHT
 128

	)

43 
	#PAGE_HEIGHT
 8

	)

46 #ifde‡
FIRST_VERSION


52 c⁄° 
uöt8_t
 
	gu8g_dev_°7687_c144mvgd_öô_£q
[] 
	gPROGMEM
 = {

53 
U8G_ESC_CS
(0),

54 
U8G_ESC_ADR
(0),

55 
U8G_ESC_CS
(1),

56 
U8G_ESC_RST
(15),

59 
U8G_ESC_DLY
(200),

62 
U8G_ESC_ADR
(1),

64 
U8G_ESC_ADR
(0),

65 
U8G_ESC_DLY
(100),

68 
U8G_ESC_ADR
(1),

70 
U8G_ESC_ADR
(0),

71 
U8G_ESC_DLY
(100),

73 #ifde‡
NOT_REQUIRED


75 
U8G_ESC_ADR
(1),

77 
U8G_ESC_ADR
(0),

78 
U8G_ESC_DLY
(100),

82 
U8G_ESC_DLY
(100),

85 
U8G_ESC_DLY
(100),

89 
U8G_ESC_DLY
(100),

92 
U8G_ESC_ADR
(1),

95 
U8G_ESC_ADR
(0),

96 
U8G_ESC_DLY
(100),

99 
U8G_ESC_ADR
(1),

101 
U8G_ESC_ADR
(0),

104 
U8G_ESC_ADR
(1),

106 
U8G_ESC_ADR
(0),

109 
U8G_ESC_ADR
(1),

111 
U8G_ESC_ADR
(0),

114 
U8G_ESC_ADR
(1),

116 
U8G_ESC_ADR
(0),

119 
U8G_ESC_ADR
(1),

121 
U8G_ESC_ADR
(0),

124 
U8G_ESC_ADR
(1),

126 
U8G_ESC_ADR
(0),

130 
U8G_ESC_ADR
(1),

132 
U8G_ESC_ADR
(0),

135 
U8G_ESC_ADR
(1),

137 
U8G_ESC_ADR
(0),

140 
U8G_ESC_ADR
(1),

142 
U8G_ESC_ADR
(0),

145 
U8G_ESC_ADR
(1),

147 
U8G_ESC_ADR
(0),

150 
U8G_ESC_ADR
(1),

152 
U8G_ESC_ADR
(0),

155 
U8G_ESC_ADR
(1),

160 
U8G_ESC_ADR
(0),

163 
U8G_ESC_ADR
(1),

180 
U8G_ESC_ADR
(0),

183 
U8G_ESC_ADR
(1),

192 
U8G_ESC_ADR
(0),

196 
U8G_ESC_CS
(0),

197 
U8G_ESC_END


207 c⁄° 
uöt8_t
 
	gu8g_dev_°7687_c144mvgd_öô_£q
[] 
	gPROGMEM
 = {

208 
U8G_ESC_CS
(0),

209 
U8G_ESC_ADR
(0),

210 
U8G_ESC_CS
(1),

211 
U8G_ESC_RST
(15),

214 
U8G_ESC_DLY
(5),

217 
U8G_ESC_ADR
(1),

219 
U8G_ESC_ADR
(0),

223 
U8G_ESC_ADR
(1),

225 
U8G_ESC_ADR
(0),

228 
U8G_ESC_ADR
(1),

230 
U8G_ESC_ADR
(0),

234 
U8G_ESC_ADR
(1),

250 
U8G_ESC_ADR
(0),

253 
U8G_ESC_ADR
(1),

269 
U8G_ESC_ADR
(0),

272 
U8G_ESC_ADR
(1),

275 
U8G_ESC_ADR
(0),

279 
U8G_ESC_ADR
(1),

281 
U8G_ESC_ADR
(0),

284 
U8G_ESC_ADR
(1),

287 
U8G_ESC_ADR
(0),

290 
U8G_ESC_ADR
(1),

292 
U8G_ESC_ADR
(0),

295 
U8G_ESC_ADR
(1),

298 
U8G_ESC_ADR
(0),

301 
U8G_ESC_ADR
(1),

303 
U8G_ESC_ADR
(0),

306 
U8G_ESC_ADR
(1),

311 
U8G_ESC_ADR
(0),

314 
U8G_ESC_ADR
(1),

319 
U8G_ESC_ADR
(0),

322 
U8G_ESC_ADR
(1),

324 
U8G_ESC_ADR
(0),

331 
U8G_ESC_CS
(0),

332 
U8G_ESC_END


342 
uöt8_t
 
	$gë_byã_1
(
uöt8_t
 
v
)

344 
v
 >>= 4;

345 
v
 &= 0x0e;

346  
v
;

347 
	}
}

349 
uöt8_t
 
	$gë_byã_2
(
uöt8_t
 
v
)

351 
uöt8_t
 
w
;

352 
w
 = 
v
;

353 
w
 &= 3;

354 
w
 = (w<<2) | w;

355 
v
 <<= 3;

356 
v
 &= 0x0e0;

357 
w
 |
v
;

358  
w
;

359 
	}
}

361 
uöt8_t
 
	$u8g_dev_°7687_c144mvgd_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

363 
msg
)

365 
U8G_DEV_MSG_INIT
:

366 
	`u8g_InôCom
(
u8g
, 
dev
);

367 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7687_c144mvgd_öô_£q
);

369 
U8G_DEV_MSG_STOP
:

371 
U8G_DEV_MSG_PAGE_NEXT
:

373 
uöt8_t
 
y
, 
i
, 
j
;

374 
uöt8_t
 *
±r
;

375 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

377 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

378 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

379 
y
 = 
pb
->
p
.
∑ge_y0
;

380 
±r
 = 
pb
->
buf
;

382 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

383 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x02a );

384 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

385 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x000 );

386 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
WIDTH
-1 );

387 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

388 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x02b );

389 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

390 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
y
 );

391 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
y
+
PAGE_HEIGHT
-1 );

392 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

393 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x02c );

394 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

396  
i
 = 0; i < 
PAGE_HEIGHT
; i ++ )

399  
j
 = 0; j < 
WIDTH
; j ++ )

401 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`gë_byã_1
(*
±r
) );

402 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`gë_byã_2
(*
±r
) );

403 
±r
++;

406 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

407 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

411  
	`u8g_dev_pb8h8_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

412 
	}
}

415 
uöt8_t
 
	gu8g_°7687_c144mvgd_8h8_buf
[
WIDTH
*8] 
	gU8G_NOCOMMON
 ;

416 
u8g_pb_t
 
	gu8g_°7687_c144mvgd_8h8_pb
 = { {8, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_°7687_c144mvgd_8h8_buf
};

418 
u8g_dev_t
 
	gu8g_dev_°7687_c144mvgd_sw_•i
 = { 
u8g_dev_°7687_c144mvgd_‚
, &
u8g_°7687_c144mvgd_8h8_pb
, 
u8g_com_¨duöo_sw_•i_‚
 };

420 
u8g_dev_t
 
	gu8g_dev_°7687_c144mvgd_8bô
 = { 
u8g_dev_°7687_c144mvgd_‚
, &
u8g_°7687_c144mvgd_8h8_pb
, 
U8G_COM_PARALLEL
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_st7920_128x64.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

45 c⁄° 
uöt8_t
 
	gu8g_dev_°7920_128x64_öô_£q
[] 
	gPROGMEM
 = {

46 
U8G_ESC_CS
(0),

47 
U8G_ESC_ADR
(0),

48 
U8G_ESC_RST
(15),

49 
U8G_ESC_DLY
(100),

50 
U8G_ESC_CS
(1),

51 
U8G_ESC_DLY
(50),

58 
U8G_ESC_DLY
(100),

60 
U8G_ESC_CS
(0),

61 
U8G_ESC_END


64 
uöt8_t
 
	$u8g_dev_°7920_128x64_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

66 
msg
)

68 
U8G_DEV_MSG_INIT
:

69 
	`u8g_InôCom
(
u8g
, 
dev
);

70 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7920_128x64_öô_£q
);

72 
U8G_DEV_MSG_STOP
:

74 
U8G_DEV_MSG_PAGE_NEXT
:

76 
uöt8_t
 
y
, 
i
;

77 
uöt8_t
 *
±r
;

78 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

80 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

81 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

82 
y
 = 
pb
->
p
.
∑ge_y0
;

83 
±r
 = 
pb
->
buf
;

84  
i
 = 0; i < 8; i ++ )

86 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

87 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x03e );

89 i‡–
y
 < 32 )

91 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | 
y
 );

92 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

96 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | (
y
-32) );

97 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | 8);

100 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

101 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

102 
±r
 +
WIDTH
/8;

103 
y
++;

105 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

109  
	`u8g_dev_pb8h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

110 
	}
}

112 
uöt8_t
 
	$u8g_dev_°7920_128x64_4x_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

114 
msg
)

116 
U8G_DEV_MSG_INIT
:

117 
	`u8g_InôCom
(
u8g
, 
dev
);

118 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7920_128x64_öô_£q
);

120 
U8G_DEV_MSG_STOP
:

122 
U8G_DEV_MSG_PAGE_NEXT
:

124 
uöt8_t
 
y
, 
i
;

125 
uöt8_t
 *
±r
;

126 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

128 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

129 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

130 
y
 = 
pb
->
p
.
∑ge_y0
;

131 
±r
 = 
pb
->
buf
;

132  
i
 = 0; i < 32; i ++ )

134 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

135 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x03e );

137 i‡–
y
 < 32 )

139 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | 
y
 );

140 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

144 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | (
y
-32) );

145 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | 8);

148 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

149 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

150 
±r
 +
WIDTH
/8;

151 
y
++;

153 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

157  
	`u8g_dev_pb32h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

158 
	}
}

160 
U8G_PB_DEV
(
u8g_dev_°7920_128x64_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7920_128x64_‚
, 
U8G_COM_ST7920_SW_SPI
);

161 
U8G_PB_DEV
(
u8g_dev_°7920_128x64_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7920_128x64_‚
, 
U8G_COM_ST7920_HW_SPI
);

162 
U8G_PB_DEV
(
u8g_dev_°7920_128x64_8bô
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7920_128x64_‚
, 
U8G_COM_FAST_PARALLEL
);

164 
	#QWIDTH
 (
WIDTH
*4)

	)

165 
uöt8_t
 
	gu8g_dev_°7920_128x64_4x_buf
[
QWIDTH
] 
	gU8G_NOCOMMON
 ;

166 
u8g_pb_t
 
	gu8g_dev_°7920_128x64_4x_pb
 = { {32, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_°7920_128x64_4x_buf
};

167 
u8g_dev_t
 
	gu8g_dev_°7920_128x64_4x_sw_•i
 = { 
u8g_dev_°7920_128x64_4x_‚
, &
u8g_dev_°7920_128x64_4x_pb
, 
U8G_COM_ST7920_SW_SPI
 };

168 
u8g_dev_t
 
	gu8g_dev_°7920_128x64_4x_hw_•i
 = { 
u8g_dev_°7920_128x64_4x_‚
, &
u8g_dev_°7920_128x64_4x_pb
, 
U8G_COM_ST7920_HW_SPI
 };

169 
u8g_dev_t
 
	gu8g_dev_°7920_128x64_4x_8bô
 = { 
u8g_dev_°7920_128x64_4x_‚
, &
u8g_dev_°7920_128x64_4x_pb
, 
U8G_COM_FAST_PARALLEL
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_st7920_192x32.c

37 
	~"u8g.h
"

39 
	#WIDTH
 192

	)

40 
	#HEIGHT
 32

	)

44 c⁄° 
uöt8_t
 
	gu8g_dev_°7920_192x32_öô_£q
[] 
	gPROGMEM
 = {

45 
U8G_ESC_CS
(0),

46 
U8G_ESC_ADR
(0),

47 
U8G_ESC_RST
(15),

48 
U8G_ESC_DLY
(100),

49 
U8G_ESC_CS
(1),

50 
U8G_ESC_DLY
(50),

57 
U8G_ESC_DLY
(100),

59 
U8G_ESC_CS
(0),

60 
U8G_ESC_END


63 
uöt8_t
 
	$u8g_dev_°7920_192x32_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

65 
msg
)

67 
U8G_DEV_MSG_INIT
:

68 
	`u8g_InôCom
(
u8g
, 
dev
);

69 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7920_192x32_öô_£q
);

71 
U8G_DEV_MSG_STOP
:

73 
U8G_DEV_MSG_PAGE_NEXT
:

75 
uöt8_t
 
y
, 
i
;

76 
uöt8_t
 *
±r
;

77 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

79 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

80 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

81 
y
 = 
pb
->
p
.
∑ge_y0
;

82 
±r
 = 
pb
->
buf
;

83  
i
 = 0; i < 8; i ++ )

85 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

86 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x03e );

87 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | 
y
 );

88 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

89 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

90 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

91 
±r
 +
WIDTH
/8;

92 
y
++;

94 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

98  
	`u8g_dev_pb8h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

99 
	}
}

101 
uöt8_t
 
	$u8g_dev_°7920_192x32_4x_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

103 
msg
)

105 
U8G_DEV_MSG_INIT
:

106 
	`u8g_InôCom
(
u8g
, 
dev
);

107 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7920_192x32_öô_£q
);

109 
U8G_DEV_MSG_STOP
:

111 
U8G_DEV_MSG_PAGE_NEXT
:

113 
uöt8_t
 
y
, 
i
;

114 
uöt8_t
 *
±r
;

115 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

117 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

118 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

119 
y
 = 
pb
->
p
.
∑ge_y0
;

120 
±r
 = 
pb
->
buf
;

121  
i
 = 0; i < 32; i ++ )

123 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

124 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x03e );

125 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | 
y
 );

126 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

127 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

128 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

129 
±r
 +
WIDTH
/8;

130 
y
++;

132 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

136  
	`u8g_dev_pb32h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

137 
	}
}

140 
U8G_PB_DEV
(
u8g_dev_°7920_192x32_sw_•i
, 
WIDTH
, 
HEIGHT
, 8, 
u8g_dev_°7920_192x32_‚
, 
U8G_COM_ST7920_SW_SPI
);

141 
U8G_PB_DEV
(
u8g_dev_°7920_192x32_hw_•i
, 
WIDTH
, 
HEIGHT
, 8, 
u8g_dev_°7920_192x32_‚
, 
U8G_COM_ST7920_HW_SPI
);

142 
U8G_PB_DEV
(
u8g_dev_°7920_192x32_8bô
, 
WIDTH
, 
HEIGHT
, 8, 
u8g_dev_°7920_192x32_‚
, 
U8G_COM_FAST_PARALLEL
);

145 
	#QWIDTH
 (
WIDTH
*4)

	)

146 
uöt8_t
 
	gu8g_dev_°7920_192x32_4x_buf
[
QWIDTH
] 
	gU8G_NOCOMMON
 ;

147 
u8g_pb_t
 
	gu8g_dev_°7920_192x32_4x_pb
 = { {32, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_°7920_192x32_4x_buf
};

148 
u8g_dev_t
 
	gu8g_dev_°7920_192x32_4x_sw_•i
 = { 
u8g_dev_°7920_192x32_4x_‚
, &
u8g_dev_°7920_192x32_4x_pb
, 
U8G_COM_ST7920_SW_SPI
 };

149 
u8g_dev_t
 
	gu8g_dev_°7920_192x32_4x_hw_•i
 = { 
u8g_dev_°7920_192x32_4x_‚
, &
u8g_dev_°7920_192x32_4x_pb
, 
U8G_COM_ST7920_HW_SPI
 };

150 
u8g_dev_t
 
	gu8g_dev_°7920_192x32_4x_8bô
 = { 
u8g_dev_°7920_192x32_4x_‚
, &
u8g_dev_°7920_192x32_4x_pb
, 
U8G_COM_FAST_PARALLEL
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_st7920_202x32.c

39 
	~"u8g.h
"

41 
	#WIDTH
 202

	)

42 
	#HEIGHT
 32

	)

43 
	#PAGE_HEIGHT
 8

	)

47 c⁄° 
uöt8_t
 
	gu8g_dev_°7920_202x32_öô_£q
[] 
	gPROGMEM
 = {

48 
U8G_ESC_CS
(0),

49 
U8G_ESC_ADR
(0),

50 
U8G_ESC_RST
(15),

51 
U8G_ESC_DLY
(100),

52 
U8G_ESC_CS
(1),

53 
U8G_ESC_DLY
(50),

60 
U8G_ESC_DLY
(100),

62 
U8G_ESC_CS
(0),

63 
U8G_ESC_END


66 
uöt8_t
 
	$u8g_dev_°7920_202x32_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

68 
msg
)

70 
U8G_DEV_MSG_INIT
:

71 
	`u8g_InôCom
(
u8g
, 
dev
);

72 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7920_202x32_öô_£q
);

74 
U8G_DEV_MSG_STOP
:

76 
U8G_DEV_MSG_PAGE_NEXT
:

78 
uöt8_t
 
y
, 
i
;

79 
uöt8_t
 *
±r
;

80 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

82 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

83 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

84 
y
 = 
pb
->
p
.
∑ge_y0
;

85 
±r
 = 
pb
->
buf
;

86  
i
 = 0; i < 8; i ++ )

88 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

89 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x03e );

90 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | 
y
 );

91 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

92 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

93 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

94 
±r
 +
WIDTH
/8;

95 
y
++;

97 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

101  
	`u8g_dev_pb8h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

102 
	}
}

104 
uöt8_t
 
	$u8g_dev_°7920_202x32_4x_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

106 
msg
)

108 
U8G_DEV_MSG_INIT
:

109 
	`u8g_InôCom
(
u8g
, 
dev
);

110 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7920_202x32_öô_£q
);

112 
U8G_DEV_MSG_STOP
:

114 
U8G_DEV_MSG_PAGE_NEXT
:

116 
uöt8_t
 
y
, 
i
;

117 
uöt8_t
 *
±r
;

118 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

120 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

121 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

122 
y
 = 
pb
->
p
.
∑ge_y0
;

123 
±r
 = 
pb
->
buf
;

124  
i
 = 0; i < 32; i ++ )

126 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

127 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x03e );

128 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | 
y
 );

129 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

130 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

131 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

132 
±r
 +
WIDTH
/8;

133 
y
++;

135 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

139  
	`u8g_dev_pb32h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

140 
	}
}

143 
U8G_PB_DEV
(
u8g_dev_°7920_202x32_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7920_202x32_‚
, 
U8G_COM_ST7920_SW_SPI
);

144 
U8G_PB_DEV
(
u8g_dev_°7920_202x32_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7920_202x32_‚
, 
U8G_COM_ST7920_HW_SPI
);

145 
U8G_PB_DEV
(
u8g_dev_°7920_202x32_8bô
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7920_202x32_‚
, 
U8G_COM_FAST_PARALLEL
);

147 
	#QWIDTH
 (
WIDTH
*4)

	)

148 
uöt8_t
 
	gu8g_dev_°7920_202x32_4x_buf
[
QWIDTH
] 
	gU8G_NOCOMMON
 ;

149 
u8g_pb_t
 
	gu8g_dev_°7920_202x32_4x_pb
 = { {32, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_°7920_202x32_4x_buf
};

150 
u8g_dev_t
 
	gu8g_dev_°7920_202x32_4x_sw_•i
 = { 
u8g_dev_°7920_202x32_4x_‚
, &
u8g_dev_°7920_202x32_4x_pb
, 
U8G_COM_ST7920_SW_SPI
 };

151 
u8g_dev_t
 
	gu8g_dev_°7920_202x32_4x_hw_•i
 = { 
u8g_dev_°7920_202x32_4x_‚
, &
u8g_dev_°7920_202x32_4x_pb
, 
U8G_COM_ST7920_HW_SPI
 };

152 
u8g_dev_t
 
	gu8g_dev_°7920_202x32_4x_8bô
 = { 
u8g_dev_°7920_202x32_4x_‚
, &
u8g_dev_°7920_202x32_4x_pb
, 
U8G_COM_FAST_PARALLEL
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_t6963_128x64.c

51 
	~"u8g.h
"

53 
	#WIDTH
 128

	)

54 
	#HEIGHT
 64

	)

55 
	#PAGE_HEIGHT
 16

	)

59 c⁄° 
uöt8_t
 
	gu8g_dev_t6963_128x64_öô_£q
[] 
	gPROGMEM
 = {

60 
U8G_ESC_CS
(0),

61 
U8G_ESC_ADR
(0),

62 
U8G_ESC_RST
(15),

64 
U8G_ESC_CS
(1),

65 
U8G_ESC_DLY
(50),

67 
U8G_ESC_ADR
(0),

70 
U8G_ESC_ADR
(1),

73 
U8G_ESC_ADR
(0),

76 
U8G_ESC_ADR
(1),

79 
U8G_ESC_ADR
(0),

82 
U8G_ESC_ADR
(1),

85 
U8G_ESC_ADR
(0),

86 
WIDTH
/8,

88 
U8G_ESC_ADR
(1),

91 
U8G_ESC_ADR
(0),

94 
U8G_ESC_ADR
(1),

97 
U8G_ESC_ADR
(0),

98 
WIDTH
/8,

100 
U8G_ESC_ADR
(1),

110 
U8G_ESC_ADR
(1),

113 
U8G_ESC_ADR
(1),

126 
U8G_ESC_ADR
(0),

129 
U8G_ESC_ADR
(1),

133 
U8G_ESC_DLY
(100),

135 
U8G_ESC_ADR
(0),

136 
U8G_ESC_CS
(0),

137 
U8G_ESC_END


140 
uöt8_t
 
	$u8g_dev_t6963_128x64_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

142 
msg
)

144 
U8G_DEV_MSG_INIT
:

145 
	`u8g_InôCom
(
u8g
, 
dev
);

146 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_t6963_128x64_öô_£q
);

148 
U8G_DEV_MSG_STOP
:

150 
U8G_DEV_MSG_PAGE_NEXT
:

152 
uöt8_t
 
y
, 
i
;

153 
uöt16_t
 
di•_øm_adr
;

154 
uöt8_t
 *
±r
;

155 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

158 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

159 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

160 
y
 = 
pb
->
p
.
∑ge_y0
;

161 
±r
 = 
pb
->
buf
;

162 
di•_øm_adr
 = 
WIDTH
/8;

163 
di•_øm_adr
 *
y
;

164  
i
 = 0; i < 
PAGE_HEIGHT
; i ++ )

166 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

167 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
&255 );

168 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
>>8 );

169 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

170 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x024 );

172 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

174 
±r
 +
WIDTH
/8;

175 
di•_øm_adr
 +
WIDTH
/8;

177 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

178 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

182  
	`u8g_dev_pb16h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

183 
	}
}

187 
uöt8_t
 
	gu8g_dev_t6963_128x64_2x_bw_buf
[
WIDTH
/8*
PAGE_HEIGHT
] 
	gU8G_NOCOMMON
 ;

188 
u8g_pb_t
 
	gu8g_dev_t6963_128x64_2x_bw_pb
 = { {
PAGE_HEIGHT
, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_t6963_128x64_2x_bw_buf
};

189 
u8g_dev_t
 
	gu8g_dev_t6963_128x64_8bô
 = { 
u8g_dev_t6963_128x64_‚
, &
u8g_dev_t6963_128x64_2x_bw_pb
, 
U8G_COM_T6963
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_t6963_240x128.c

51 
	~"u8g.h
"

53 
	#WIDTH
 240

	)

54 
	#HEIGHT
 128

	)

55 
	#PAGE_HEIGHT
 16

	)

63 c⁄° 
uöt8_t
 
	gu8g_dev_t6963_240x128_öô_£q
[] 
	gPROGMEM
 = {

64 
U8G_ESC_CS
(0),

65 
U8G_ESC_ADR
(0),

66 
U8G_ESC_RST
(15),

68 
U8G_ESC_CS
(1),

69 
U8G_ESC_DLY
(50),

71 
U8G_ESC_ADR
(0),

74 
U8G_ESC_ADR
(1),

77 
U8G_ESC_ADR
(0),

80 
U8G_ESC_ADR
(1),

83 
U8G_ESC_ADR
(0),

86 
U8G_ESC_ADR
(1),

89 
U8G_ESC_ADR
(0),

90 
WIDTH
/8,

92 
U8G_ESC_ADR
(1),

95 
U8G_ESC_ADR
(0),

98 
U8G_ESC_ADR
(1),

101 
U8G_ESC_ADR
(0),

102 
WIDTH
/8,

104 
U8G_ESC_ADR
(1),

114 
U8G_ESC_ADR
(1),

117 
U8G_ESC_ADR
(1),

130 
U8G_ESC_ADR
(0),

133 
U8G_ESC_ADR
(1),

137 
U8G_ESC_DLY
(100),

139 
U8G_ESC_ADR
(0),

140 
U8G_ESC_CS
(0),

141 
U8G_ESC_END


144 
uöt8_t
 
	$u8g_dev_t6963_240x128_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

146 
msg
)

148 
U8G_DEV_MSG_INIT
:

149 
	`u8g_InôCom
(
u8g
, 
dev
);

150 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_t6963_240x128_öô_£q
);

152 
U8G_DEV_MSG_STOP
:

154 
U8G_DEV_MSG_PAGE_NEXT
:

156 
uöt8_t
 
y
, 
i
;

157 
uöt16_t
 
di•_øm_adr
;

158 
uöt8_t
 *
±r
;

159 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

162 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

163 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

164 
y
 = 
pb
->
p
.
∑ge_y0
;

165 
±r
 = 
pb
->
buf
;

166 
di•_øm_adr
 = 
WIDTH
/8;

167 
di•_øm_adr
 *
y
;

168  
i
 = 0; i < 
PAGE_HEIGHT
; i ++ )

170 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

171 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
&255 );

172 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
>>8 );

173 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

174 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x024 );

176 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

178 
±r
 +
WIDTH
/8;

179 
di•_øm_adr
 +
WIDTH
/8;

181 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

182 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

186  
	`u8g_dev_pb16h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

187 
	}
}

191 
uöt8_t
 
	gu8g_dev_t6963_240x128_2x_bw_buf
[
WIDTH
/8*
PAGE_HEIGHT
] 
	gU8G_NOCOMMON
 ;

192 
u8g_pb_t
 
	gu8g_dev_t6963_240x128_2x_bw_pb
 = { {
PAGE_HEIGHT
, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_t6963_240x128_2x_bw_buf
};

193 
u8g_dev_t
 
	gu8g_dev_t6963_240x128_8bô
 = { 
u8g_dev_t6963_240x128_‚
, &
u8g_dev_t6963_240x128_2x_bw_pb
, 
U8G_COM_T6963
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_t6963_240x64.c

51 
	~"u8g.h
"

53 
	#WIDTH
 240

	)

54 
	#HEIGHT
 64

	)

55 
	#PAGE_HEIGHT
 16

	)

63 c⁄° 
uöt8_t
 
	gu8g_dev_t6963_240x64_öô_£q
[] 
	gPROGMEM
 = {

64 
U8G_ESC_CS
(0),

65 
U8G_ESC_ADR
(0),

66 
U8G_ESC_RST
(15),

68 
U8G_ESC_CS
(1),

69 
U8G_ESC_DLY
(50),

71 
U8G_ESC_ADR
(0),

74 
U8G_ESC_ADR
(1),

77 
U8G_ESC_ADR
(0),

80 
U8G_ESC_ADR
(1),

83 
U8G_ESC_ADR
(0),

86 
U8G_ESC_ADR
(1),

89 
U8G_ESC_ADR
(0),

90 
WIDTH
/8,

92 
U8G_ESC_ADR
(1),

95 
U8G_ESC_ADR
(0),

98 
U8G_ESC_ADR
(1),

101 
U8G_ESC_ADR
(0),

102 
WIDTH
/8,

104 
U8G_ESC_ADR
(1),

114 
U8G_ESC_ADR
(1),

117 
U8G_ESC_ADR
(1),

130 
U8G_ESC_ADR
(0),

133 
U8G_ESC_ADR
(1),

137 
U8G_ESC_DLY
(100),

139 
U8G_ESC_ADR
(0),

140 
U8G_ESC_CS
(0),

141 
U8G_ESC_END


144 
uöt8_t
 
	$u8g_dev_t6963_240x64_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

146 
msg
)

148 
U8G_DEV_MSG_INIT
:

149 
	`u8g_InôCom
(
u8g
, 
dev
);

150 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_t6963_240x64_öô_£q
);

152 
U8G_DEV_MSG_STOP
:

154 
U8G_DEV_MSG_PAGE_NEXT
:

156 
uöt8_t
 
y
, 
i
;

157 
uöt16_t
 
di•_øm_adr
;

158 
uöt8_t
 *
±r
;

159 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

162 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

163 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

164 
y
 = 
pb
->
p
.
∑ge_y0
;

165 
±r
 = 
pb
->
buf
;

166 
di•_øm_adr
 = 
WIDTH
/8;

167 
di•_øm_adr
 *
y
;

168  
i
 = 0; i < 
PAGE_HEIGHT
; i ++ )

170 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

171 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
&255 );

172 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
>>8 );

173 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

174 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x024 );

176 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

178 
±r
 +
WIDTH
/8;

179 
di•_øm_adr
 +
WIDTH
/8;

181 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

182 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

186  
	`u8g_dev_pb16h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

187 
	}
}

191 
uöt8_t
 
	gu8g_dev_t6963_240x64_2x_bw_buf
[
WIDTH
/8*
PAGE_HEIGHT
] 
	gU8G_NOCOMMON
 ;

192 
u8g_pb_t
 
	gu8g_dev_t6963_240x64_2x_bw_pb
 = { {
PAGE_HEIGHT
, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_t6963_240x64_2x_bw_buf
};

193 
u8g_dev_t
 
	gu8g_dev_t6963_240x64_8bô
 = { 
u8g_dev_t6963_240x64_‚
, &
u8g_dev_t6963_240x64_2x_bw_pb
, 
U8G_COM_T6963
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_tls8204_84x48.c

43 
	~"u8g.h
"

45 
	#WIDTH
 84

	)

46 
	#HEIGHT
 48

	)

47 
	#PAGE_HEIGHT
 8

	)

50 c⁄° 
uöt8_t
 
	gu8g_dev_és8204_öô_£q
[] 
	gPROGMEM
 = {

51 
U8G_ESC_CS
(0),

52 
U8G_ESC_ADR
(0),

53 
U8G_ESC_RST
(1),

54 
U8G_ESC_CS
(1),

63 
U8G_ESC_DLY
(100),

66 
U8G_ESC_DLY
(100),

67 
U8G_ESC_DLY
(100),

70 
U8G_ESC_DLY
(100),

71 
U8G_ESC_CS
(0),

72 
U8G_ESC_END


76 
uöt8_t
 
	$u8g_dev_és8204_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

78 
msg
)

80 
U8G_DEV_MSG_INIT
:

81 
	`u8g_InôCom
(
u8g
, 
dev
);

82 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_és8204_öô_£q
);

84 
U8G_DEV_MSG_STOP
:

86 
U8G_DEV_MSG_PAGE_NEXT
:

88 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

89 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

90 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

91 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x020 );

92 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

93 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x040 | 
pb
->
p
.
∑ge
);

94 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

95 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

97 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

100 
U8G_DEV_MSG_CONTRAST
:

102 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

103 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

104 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x021);

105 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | ( (*(
uöt8_t
 *)
¨g
) >> 1 ) );

106 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x020);

107 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

110  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

111 
	}
}

114 
U8G_PB_DEV
(
u8g_dev_és8204_84x48_sw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_és8204_‚
, 
U8G_COM_SW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_uc1610_dogxl160.c

37 
	~"u8g.h
"

39 
	#WIDTH
 160

	)

40 
	#HEIGHT
 104

	)

42 c⁄° 
uöt8_t
 
	gu8g_dev_uc1610_dogxl160_öô_£q
[] 
	gPROGMEM
 = {

43 
U8G_ESC_CS
(0),

44 
U8G_ESC_ADR
(0),

45 
U8G_ESC_RST
(1),

46 
U8G_ESC_CS
(1),

60 
U8G_ESC_DLY
(100),

62 
U8G_ESC_DLY
(100),

63 
U8G_ESC_DLY
(100),

67 
U8G_ESC_CS
(0),

68 
U8G_ESC_END


71 c⁄° 
uöt8_t
 
	gu8g_dev_uc1610_dogxl160_d©a_°¨t
[] 
	gPROGMEM
 = {

72 
U8G_ESC_ADR
(0),

73 
U8G_ESC_CS
(1),

76 
U8G_ESC_END


79 
uöt8_t
 
	$u8g_dev_1to2
(
uöt8_t
 
n
)

81 
uöt8_t
 
a
,
b
,
c
;

82 
a
 = 
n
;

83 
a
 &= 1;

84 
n
 <<= 1;

85 
b
 = 
n
;

86 
b
 &= 4;

87 
n
 <<= 1;

88 
c
 = 
n
;

89 
c
 &= 16;

90 
n
 <<= 1;

91 
n
 &= 64;

92 
n
 |
a
;

93 
n
 |
b
;

94 
n
 |
c
;

95 
n
 |=Ç << 1;

96  
n
;

97 
	}
}

99 
uöt8_t
 
	$u8g_dev_uc1610_dogxl160_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

101 
msg
)

103 
U8G_DEV_MSG_INIT
:

104 
	`u8g_InôCom
(
u8g
, 
dev
);

105 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_öô_£q
);

107 
U8G_DEV_MSG_STOP
:

109 
U8G_DEV_MSG_PAGE_NEXT
:

111 
i
;

112 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

113 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

114 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
*2) );

115 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

116  
i
 = 0; i < 
WIDTH
; i++ )

118 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`u8g_dev_1to2
–((
uöt8_t
 *)(
pb
->
buf
))[
i
] ) );

121 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

122 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
*2+1) );

123 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

124  
i
 = 0; i < 
WIDTH
; i++ )

126 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`u8g_dev_1to2
–((
uöt8_t
 *)(
pb
->
buf
))[
i
] >> 4 ) );

129 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

132 
U8G_DEV_MSG_CONTRAST
:

133 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

134 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

135 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

136 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

137 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

140  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

141 
	}
}

143 
uöt8_t
 
	$u8g_dev_uc1610_dogxl160_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

145 
msg
)

147 
U8G_DEV_MSG_INIT
:

148 
	`u8g_InôCom
(
u8g
, 
dev
);

149 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_öô_£q
);

151 
U8G_DEV_MSG_STOP
:

153 
U8G_DEV_MSG_PAGE_NEXT
:

155 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

156 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

157 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
) );

158 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

159 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

161 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

164 
U8G_DEV_MSG_CONTRAST
:

165 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

166 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

167 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

168 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

169 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

172  
	`u8g_dev_pb8v2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

173 
	}
}

175 
uöt8_t
 
	$u8g_dev_uc1610_dogxl160_2x_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

177 
msg
)

179 
U8G_DEV_MSG_INIT
:

180 
	`u8g_InôCom
(
u8g
, 
dev
);

181 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_öô_£q
);

183 
U8G_DEV_MSG_STOP
:

185 
U8G_DEV_MSG_PAGE_NEXT
:

187 
i
;

188 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

190 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

191 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
*4) );

192 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

193  
i
 = 0; i < 
WIDTH
; i++ )

195 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`u8g_dev_1to2
–((
uöt8_t
 *)(
pb
->
buf
))[
i
] ) );

198 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

199 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
*4+1) );

200 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

201  
i
 = 0; i < 
WIDTH
; i++ )

203 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`u8g_dev_1to2
–((
uöt8_t
 *)(
pb
->
buf
))[
i
] >> 4 ) );

206 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

207 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
*4+2) );

208 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

209  
i
 = 0; i < 
WIDTH
; i++ )

211 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`u8g_dev_1to2
–((
uöt8_t
 *)(
pb
->
buf
+
WIDTH
))[
i
] ) );

214 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

215 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
*4+3) );

216 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

217  
i
 = 0; i < 
WIDTH
; i++ )

219 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`u8g_dev_1to2
–((
uöt8_t
 *)(
pb
->
buf
+
WIDTH
))[
i
] >> 4 ) );

222 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

225 
U8G_DEV_MSG_CONTRAST
:

226 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

227 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

228 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

229 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

230 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

233  
	`u8g_dev_pb16v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

234 
	}
}

236 
uöt8_t
 
	$u8g_dev_uc1610_dogxl160_2x_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

238 
msg
)

240 
U8G_DEV_MSG_INIT
:

241 
	`u8g_InôCom
(
u8g
, 
dev
);

242 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_öô_£q
);

244 
U8G_DEV_MSG_STOP
:

246 
U8G_DEV_MSG_PAGE_NEXT
:

248 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

250 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

251 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
*2) );

252 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

253 i‡–
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
, 
pb
->
buf
) == 0 )

256 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

257 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
*2+1) );

258 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

259 i‡–
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
, 
pb
->
buf
+WIDTH) == 0 )

262 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

265 
U8G_DEV_MSG_CONTRAST
:

266 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

267 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

268 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

269 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

270 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

273  
	`u8g_dev_pb16v2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

274 
	}
}

276 
U8G_PB_DEV
(
u8g_dev_uc1610_dogxl160_bw_sw_•i
, 
WIDTH
, 
HEIGHT
, 8, 
u8g_dev_uc1610_dogxl160_bw_‚
, 
U8G_COM_SW_SPI
);

277 
U8G_PB_DEV
(
u8g_dev_uc1610_dogxl160_bw_hw_•i
, 
WIDTH
, 
HEIGHT
, 8, 
u8g_dev_uc1610_dogxl160_bw_‚
, 
U8G_COM_HW_SPI
);

279 
U8G_PB_DEV
(
u8g_dev_uc1610_dogxl160_gr_sw_•i
, 
WIDTH
, 
HEIGHT
, 4, 
u8g_dev_uc1610_dogxl160_gr_‚
, 
U8G_COM_SW_SPI
);

280 
U8G_PB_DEV
(
u8g_dev_uc1610_dogxl160_gr_hw_•i
, 
WIDTH
, 
HEIGHT
, 4, 
u8g_dev_uc1610_dogxl160_gr_‚
, 
U8G_COM_HW_SPI
);

282 
uöt8_t
 
	gu8g_dev_uc1610_dogxl160_2x_bw_buf
[
WIDTH
*2] 
	gU8G_NOCOMMON
 ;

283 
u8g_pb_t
 
	gu8g_dev_uc1610_dogxl160_2x_bw_pb
 = { {16, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_uc1610_dogxl160_2x_bw_buf
};

284 
u8g_dev_t
 
	gu8g_dev_uc1610_dogxl160_2x_bw_sw_•i
 = { 
u8g_dev_uc1610_dogxl160_2x_bw_‚
, &
u8g_dev_uc1610_dogxl160_2x_bw_pb
, 
U8G_COM_SW_SPI
 };

285 
u8g_dev_t
 
	gu8g_dev_uc1610_dogxl160_2x_bw_hw_•i
 = { 
u8g_dev_uc1610_dogxl160_2x_bw_‚
, &
u8g_dev_uc1610_dogxl160_2x_bw_pb
, 
U8G_COM_HW_SPI
 };

287 
uöt8_t
 
	gu8g_dev_uc1610_dogxl160_2x_gr_buf
[
WIDTH
*2] 
	gU8G_NOCOMMON
 ;

288 
u8g_pb_t
 
	gu8g_dev_uc1610_dogxl160_2x_gr_pb
 = { {8, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_uc1610_dogxl160_2x_gr_buf
};

289 
u8g_dev_t
 
	gu8g_dev_uc1610_dogxl160_2x_gr_sw_•i
 = { 
u8g_dev_uc1610_dogxl160_2x_gr_‚
, &
u8g_dev_uc1610_dogxl160_2x_gr_pb
, 
U8G_COM_SW_SPI
 };

290 
u8g_dev_t
 
	gu8g_dev_uc1610_dogxl160_2x_gr_hw_•i
 = { 
u8g_dev_uc1610_dogxl160_2x_gr_‚
, &
u8g_dev_uc1610_dogxl160_2x_gr_pb
, 
U8G_COM_HW_SPI
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_uc1701_dogs102.c

37 
	~"u8g.h
"

39 
	#WIDTH
 102

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

43 c⁄° 
uöt8_t
 
	gu8g_dev_dogs102_öô_£q
[] 
	gPROGMEM
 = {

44 
U8G_ESC_CS
(0),

45 
U8G_ESC_ADR
(0),

46 
U8G_ESC_RST
(1),

47 
U8G_ESC_CS
(1),

61 
U8G_ESC_DLY
(100),

63 
U8G_ESC_DLY
(100),

64 
U8G_ESC_DLY
(100),

66 
U8G_ESC_CS
(0),

67 
U8G_ESC_END


70 c⁄° 
uöt8_t
 
	gu8g_dev_dogs102_d©a_°¨t
[] 
	gPROGMEM
 = {

71 
U8G_ESC_ADR
(0),

72 
U8G_ESC_CS
(1),

75 
U8G_ESC_END


78 
uöt8_t
 
	$u8g_dev_dogs102_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

80 
msg
)

82 
U8G_DEV_MSG_INIT
:

83 
	`u8g_InôCom
(
u8g
, 
dev
);

84 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_dogs102_öô_£q
);

86 
U8G_DEV_MSG_STOP
:

88 
U8G_DEV_MSG_PAGE_NEXT
:

90 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

91 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_dogs102_d©a_°¨t
);

92 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

93 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

94 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

96 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

99 
U8G_DEV_MSG_CONTRAST
:

100 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

101 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

102 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

103 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

104 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

107  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

108 
	}
}

110 
U8G_PB_DEV
(
u8g_dev_uc1701_dogs102_sw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_dogs102_‚
, 
U8G_COM_SW_SPI
);

111 
U8G_PB_DEV
(
u8g_dev_uc1701_dogs102_hw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_dogs102_‚
, 
U8G_COM_HW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_uc1701_mini12864.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

43 c⁄° 
uöt8_t
 
	gu8g_dev_uc1701_möi12864_öô_£q
[] 
	gPROGMEM
 = {

44 
U8G_ESC_CS
(0),

45 
U8G_ESC_ADR
(0),

46 
U8G_ESC_RST
(1),

47 
U8G_ESC_CS
(1),

64 
U8G_ESC_DLY
(100),

66 
U8G_ESC_DLY
(100),

67 
U8G_ESC_DLY
(100),

69 
U8G_ESC_CS
(0),

70 
U8G_ESC_END


73 c⁄° 
uöt8_t
 
	gu8g_dev_uc1701_möi12864_d©a_°¨t
[] 
	gPROGMEM
 = {

74 
U8G_ESC_ADR
(0),

75 
U8G_ESC_CS
(1),

78 
U8G_ESC_END


81 
uöt8_t
 
	$u8g_dev_uc1701_möi12864_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

83 
msg
)

85 
U8G_DEV_MSG_INIT
:

86 
	`u8g_InôCom
(
u8g
, 
dev
);

87 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1701_möi12864_öô_£q
);

89 
U8G_DEV_MSG_STOP
:

91 
U8G_DEV_MSG_PAGE_NEXT
:

93 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

94 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1701_möi12864_d©a_°¨t
);

95 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

96 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

97 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

99 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

102 
U8G_DEV_MSG_CONTRAST
:

103 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

104 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

105 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

106 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

107 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

110  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

111 
	}
}

113 
U8G_PB_DEV
(
u8g_dev_uc1701_möi12864_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_uc1701_möi12864_‚
, 
U8G_COM_SW_SPI
);

114 
U8G_PB_DEV
(
u8g_dev_uc1701_möi12864_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_uc1701_möi12864_‚
, 
U8G_COM_HW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_ellipse.c

43 
	~"u8g.h
"

46 #ifde‡
WORK_IN_PROGRESS


48 
	$u8g_DøwEŒù£Re˘
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
x1
, u8g_uöt_à
y1
)

50 
a
 = 
	`abs
(
x1
 - 
x0
);

51 
b
 = 
	`abs
(
y1
 - 
y0
);

52 
b1
 = 
b
&1;

53 
dx
 = 4*(1-
a
)*
b
*b;

54 
dy
 = 4*(
b1
+1)*
a
*a;

55 
îr
 = 
dx
+
dy
+
b1
*
a
*a;

56 
e2
;

58 i‡(
x0
 > 
x1
Ë{ x0 = x1; x1 +
a
; }

59 i‡(
y0
 > 
y1
) { y0 = y1; }

60 
y0
 +(
b
+1)/2;

61 
y1
 = 
y0
-
b1
;

62 
a
 *= 8*a;

63 
b1
 = 8*
b
*b;

66 
	`u8g_DøwPixñ
(
u8g
, 
x1
, 
y0
);

67 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
);

68 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y1
);

69 
	`u8g_DøwPixñ
(
u8g
, 
x1
, 
y1
);

70 
e2
 = 2*
îr
;

71 i‡(
e2
 >
dx
) {

72 
x0
++;

73 
x1
--;

74 
îr
 +
dx
 +
b1
;

76 i‡(
e2
 <
dy
) {

77 
y0
++;

78 
y1
--;

79 
îr
 +
dy
 +
a
;

81 } 
x0
 <
x1
);

83 
y0
-
y1
 < 
b
) {

84 
	`u8g_DøwPixñ
(
u8g
, 
x0
-1, 
y0
);

85 
	`u8g_DøwPixñ
(
u8g
, 
x1
+1, 
y0
++);

86 
	`u8g_DøwPixñ
(
u8g
, 
x0
-1, 
y1
);

87 
	`u8g_DøwPixñ
(
u8g
, 
x1
+1, 
y1
--);

89 
	}
}

91 
	$u8g_DøwEŒù£
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
xr
, u8g_uöt_à
yr
)

93 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
+
yr
);

94 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
-
yr
);

95 
	`u8g_DøwPixñ
(
u8g
, 
x0
+
xr
, 
y0
);

96 
	`u8g_DøwPixñ
(
u8g
, 
x0
-
xr
, 
y0
);

97 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_font.c

39 
	~"u8g.h
"

44 * 
	tu8g_glyph_t
;

47 
	#U8G_FONT_DATA_STRUCT_SIZE
 17

	)

72 
u8g_f⁄t_GëSåSize
(c⁄° *
f⁄t
, c⁄° *
s
, 
u8g_uöt_t
 *
width
, u8g_uöt_à*
height
);

73 
u8g_f⁄t_GëSåSizeP
(c⁄° *
f⁄t
, c⁄° *
s
, 
u8g_uöt_t
 *
width
, u8g_uöt_à*
height
);

76 
u8g_f⁄t_Adju°XYToDøw
(c⁄° *
f⁄t
, c⁄° *
s
, 
u8g_uöt_t
 *
x
, u8g_uöt_à*
y
);

77 
u8g_f⁄t_Adju°XYToDøwP
(c⁄° *
f⁄t
, c⁄° *
s
, 
u8g_uöt_t
 *
x
, u8g_uöt_à*
y
);

80 
u8g_f⁄t_GëSåMöBox
(
u8g_t
 *
u8g
, c⁄° *
f⁄t
, c⁄° *
s
, 
u8g_uöt_t
 *
x
, u8g_uöt_à*
y
, u8g_uöt_à*
width
, u8g_uöt_à*
height
);

89 
uöt8_t
 
	$u8g_f⁄t_gë_byã
(c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
, 
uöt8_t
 
off£t
)

91 
f⁄t
 +
off£t
;

92  
	`u8g_pgm_ªad
–(
u8g_pgm_uöt8_t
 *)
f⁄t
 );

93 
	}
}

95 
uöt16_t
 
	$u8g_f⁄t_gë_w‹d
(c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
, 
uöt8_t
 
off£t
Ë
U8G_NOINLINE
;

96 
uöt16_t
 
	$u8g_f⁄t_gë_w‹d
(c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
, 
uöt8_t
 
off£t
)

98 
uöt16_t
 
pos
;

99 
f⁄t
 +
off£t
;

100 
pos
 = 
	`u8g_pgm_ªad
–(
u8g_pgm_uöt8_t
 *)
f⁄t
 );

101 
f⁄t
++;

102 
pos
 <<= 8;

103 
pos
 +
	`u8g_pgm_ªad
–(
u8g_pgm_uöt8_t
 *)
f⁄t
);

104  
pos
;

105 
	}
}

110 
uöt8_t
 
	$u8g_f⁄t_GëF‹m©
(c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
Ë
U8G_NOINLINE
;

111 
uöt8_t
 
	$u8g_f⁄t_GëF‹m©
(c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
)

113  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 0);

114 
	}
}

116 
uöt8_t
 
	$u8g_f⁄t_GëF⁄tGlyphSåu˘uªSize
(c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
Ë
U8G_NOINLINE
;

117 
uöt8_t
 
	$u8g_f⁄t_GëF⁄tGlyphSåu˘uªSize
(c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
)

119 
	`u8g_f⁄t_GëF‹m©
(
f⁄t
))

125 
	}
}

127 
uöt8_t
 
	$u8g_f⁄t_GëBBXWidth
(c⁄° *
f⁄t
)

129  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 1);

130 
	}
}

132 
uöt8_t
 
	$u8g_f⁄t_GëBBXHeight
(c⁄° *
f⁄t
)

134  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 2);

135 
	}
}

137 
öt8_t
 
	$u8g_f⁄t_GëBBXOffX
(c⁄° *
f⁄t
)

139  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 3);

140 
	}
}

142 
öt8_t
 
	$u8g_f⁄t_GëBBXOffY
(c⁄° *
f⁄t
)

144  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 4);

145 
	}
}

147 
uöt8_t
 
	$u8g_f⁄t_GëC≠ôÆAHeight
(c⁄° *
f⁄t
)

149  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 5);

150 
	}
}

152 
uöt16_t
 
	$u8g_f⁄t_GëEncodög65Pos
(c⁄° *
f⁄t
Ë
U8G_NOINLINE
;

153 
uöt16_t
 
	$u8g_f⁄t_GëEncodög65Pos
(c⁄° *
f⁄t
)

155  
	`u8g_f⁄t_gë_w‹d
(
f⁄t
, 6);

156 
	}
}

158 
uöt16_t
 
	$u8g_f⁄t_GëEncodög97Pos
(c⁄° *
f⁄t
Ë
U8G_NOINLINE
;

159 
uöt16_t
 
	$u8g_f⁄t_GëEncodög97Pos
(c⁄° *
f⁄t
)

161  
	`u8g_f⁄t_gë_w‹d
(
f⁄t
, 8);

162 
	}
}

164 
uöt8_t
 
	$u8g_f⁄t_GëF⁄tSèπEncodög
(c⁄° *
f⁄t
)

166  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 10);

167 
	}
}

169 
uöt8_t
 
	$u8g_f⁄t_GëF⁄tEndEncodög
(c⁄° *
f⁄t
)

171  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 11);

172 
	}
}

174 
öt8_t
 
	$u8g_f⁄t_GëLowîGDes˚¡
(c⁄° *
f⁄t
)

176  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 12);

177 
	}
}

179 
öt8_t
 
	$u8g_f⁄t_GëF⁄tAs˚¡
(c⁄° *
f⁄t
)

181  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 13);

182 
	}
}

184 
öt8_t
 
	$u8g_f⁄t_GëF⁄tDes˚¡
(c⁄° *
f⁄t
)

186  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 14);

187 
	}
}

189 
öt8_t
 
	$u8g_f⁄t_GëF⁄tXAs˚¡
(c⁄° *
f⁄t
)

191  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 15);

192 
	}
}

194 
öt8_t
 
	$u8g_f⁄t_GëF⁄tXDes˚¡
(c⁄° *
f⁄t
)

196  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 16);

197 
	}
}

201 
uöt8_t
 *
	$u8g_f⁄t_GëGlyphD©aSèπ
(c⁄° *
f⁄t
, 
u8g_glyph_t
 
g
)

203  ((
u8g_‚çgm_uöt8_t
 *)
g
Ë+ 
	`u8g_f⁄t_GëF⁄tGlyphSåu˘uªSize
(
f⁄t
);

204 
	}
}

207 
size_t
 
	$u8g_f⁄t_GëSize
(c⁄° *
f⁄t
)

209 
uöt8_t
 *
p
 = (uöt8_à*)(
f⁄t
);

210 
uöt8_t
 
f⁄t_f‹m©
 = 
	`u8g_f⁄t_GëF‹m©
(
f⁄t
);

211 
uöt8_t
 
d©a_°ru˘uª_size
 = 
	`u8g_f⁄t_GëF⁄tGlyphSåu˘uªSize
(
f⁄t
);

212 
uöt8_t
 
°¨t
, 
íd
;

213 
uöt8_t
 
i
;

214 
uöt8_t
 
mask
 = 255;

216 
°¨t
 = 
	`u8g_f⁄t_GëF⁄tSèπEncodög
(
f⁄t
);

217 
íd
 = 
	`u8g_f⁄t_GëF⁄tEndEncodög
(
f⁄t
);

219 i‡–
f⁄t_f‹m©
 == 1 )

220 
mask
 = 15;

222 
p
 +
U8G_FONT_DATA_STRUCT_SIZE
;

224 
i
 = 
°¨t
;

227 i‡–
	`u8g_pgm_ªad
((
u8g_pgm_uöt8_t
 *)(
p
)) == 255 )

229 
p
 += 1;

233 
p
 +
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)’)Ë+ 2 ) & 
mask
;

234 
p
 +
d©a_°ru˘uª_size
;

236 i‡–
i
 =
íd
 )

238 
i
++;

241  
p
 - (
uöt8_t
 *)
f⁄t
;

242 
	}
}

247 
uöt8_t
 
	$u8g_GëF⁄tBBXWidth
(
u8g_t
 *
u8g
)

249  
	`u8g_f⁄t_GëBBXWidth
(
u8g
->
f⁄t
);

250 
	}
}

252 
uöt8_t
 
	$u8g_GëF⁄tBBXHeight
(
u8g_t
 *
u8g
)

254  
	`u8g_f⁄t_GëBBXHeight
(
u8g
->
f⁄t
);

255 
	}
}

257 
öt8_t
 
	$u8g_GëF⁄tBBXOffX
(
u8g_t
 *
u8g
Ë
U8G_NOINLINE
;

258 
öt8_t
 
	$u8g_GëF⁄tBBXOffX
(
u8g_t
 *
u8g
)

260  
	`u8g_f⁄t_GëBBXOffX
(
u8g
->
f⁄t
);

261 
	}
}

263 
öt8_t
 
	$u8g_GëF⁄tBBXOffY
(
u8g_t
 *
u8g
Ë
U8G_NOINLINE
;

264 
öt8_t
 
	$u8g_GëF⁄tBBXOffY
(
u8g_t
 *
u8g
)

266  
	`u8g_f⁄t_GëBBXOffY
(
u8g
->
f⁄t
);

267 
	}
}

269 
uöt8_t
 
	$u8g_GëF⁄tC≠ôÆAHeight
(
u8g_t
 *
u8g
Ë
U8G_NOINLINE
;

270 
uöt8_t
 
	$u8g_GëF⁄tC≠ôÆAHeight
(
u8g_t
 *
u8g
)

272  
	`u8g_f⁄t_GëC≠ôÆAHeight
(
u8g
->
f⁄t
);

273 
	}
}

278 
	$u8g_C›yGlyphD©aToCache
(
u8g_t
 *
u8g
, 
u8g_glyph_t
 
g
)

280 
uöt8_t
 
tmp
;

281  
	`u8g_f⁄t_GëF‹m©
(
u8g
->
f⁄t
) )

296 
u8g
->
glyph_width
 = 
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)
g
) + 0 );

297 
u8g
->
glyph_height
 = 
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)
g
) + 1 );

298 
u8g
->
glyph_dx
 = 
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)
g
) + 3 );

299 
u8g
->
glyph_x
 = 
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)
g
) + 4 );

300 
u8g
->
glyph_y
 = 
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)
g
) + 5 );

315 
tmp
 = 
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)
g
) + 0 );

316 
u8g
->
glyph_y
 = 
tmp
 & 15;

317 
u8g
->
glyph_y
-=2;

318 
tmp
 >>= 4;

319 
u8g
->
glyph_x
 = 
tmp
;

321 
tmp
 = 
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)
g
) + 1 );

322 
u8g
->
glyph_height
 = 
tmp
 & 15;

323 
tmp
 >>= 4;

324 
u8g
->
glyph_width
 = 
tmp
;

326 
tmp
 = 
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)
g
) + 2 );

327 
tmp
 >>= 4;

328 
u8g
->
glyph_dx
 = 
tmp
;

333 
	}
}

336 
	$u8g_FûlEm±yGlyphCache
(
u8g_t
 *
u8g
)

338 
u8g
->
glyph_dx
 = 0;

339 
u8g
->
glyph_width
 = 0;

340 
u8g
->
glyph_height
 = 0;

341 
u8g
->
glyph_x
 = 0;

342 
u8g
->
glyph_y
 = 0;

343 
	}
}

349 
u8g_glyph_t
 
	$u8g_GëGlyph
(
u8g_t
 *
u8g
, 
uöt8_t
 
ªque°ed_ícodög
)

351 
uöt8_t
 *
p
 = (uöt8_à*)(
u8g
->
f⁄t
);

352 
uöt8_t
 
f⁄t_f‹m©
 = 
	`u8g_f⁄t_GëF‹m©
(
u8g
->
f⁄t
);

353 
uöt8_t
 
d©a_°ru˘uª_size
 = 
	`u8g_f⁄t_GëF⁄tGlyphSåu˘uªSize
(
u8g
->
f⁄t
);

354 
uöt8_t
 
°¨t
, 
íd
;

355 
uöt16_t
 
pos
;

356 
uöt8_t
 
i
;

357 
uöt8_t
 
mask
 = 255;

359 i‡–
f⁄t_f‹m©
 == 1 )

360 
mask
 = 15;

362 
°¨t
 = 
	`u8g_f⁄t_GëF⁄tSèπEncodög
(
u8g
->
f⁄t
);

363 
íd
 = 
	`u8g_f⁄t_GëF⁄tEndEncodög
(
u8g
->
f⁄t
);

365 
pos
 = 
	`u8g_f⁄t_GëEncodög97Pos
(
u8g
->
f⁄t
);

366 i‡–
ªque°ed_ícodög
 >97 && 
pos
 > 0 )

368 
p
+
pos
;

369 
°¨t
 = 97;

373 
pos
 = 
	`u8g_f⁄t_GëEncodög65Pos
(
u8g
->
f⁄t
);

374 i‡–
ªque°ed_ícodög
 >65 && 
pos
 > 0 )

376 
p
+
pos
;

377 
°¨t
 = 65;

380 
p
 +
U8G_FONT_DATA_STRUCT_SIZE
;

383 i‡–
ªque°ed_ícodög
 > 
íd
 )

385 
	`u8g_FûlEm±yGlyphCache
(
u8g
);

386  
NULL
;

389 
i
 = 
°¨t
;

390 i‡–
i
 <
íd
 )

394 i‡–
	`u8g_pgm_ªad
((
u8g_pgm_uöt8_t
 *)(
p
)) == 255 )

396 
p
 += 1;

400 i‡–
i
 =
ªque°ed_ícodög
 )

402 
	`u8g_C›yGlyphD©aToCache
(
u8g
, 
p
);

403  
p
;

405 
p
 +
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)’)Ë+ 2 ) & 
mask
;

406 
p
 +
d©a_°ru˘uª_size
;

408 i‡–
i
 =
íd
 )

410 
i
++;

414 
	`u8g_FûlEm±yGlyphCache
(
u8g
);

416  
NULL
;

417 
	}
}

419 
uöt8_t
 
	$u8g_IsGlyph
(
u8g_t
 *
u8g
, 
uöt8_t
 
ªque°ed_ícodög
)

421 i‡–
	`u8g_GëGlyph
(
u8g
, 
ªque°ed_ícodög
Ë!
NULL
 )

424 
	}
}

426 
öt8_t
 
	$u8g_GëGlyphDñèX
(
u8g_t
 *
u8g
, 
uöt8_t
 
ªque°ed_ícodög
)

428 i‡–
	`u8g_GëGlyph
(
u8g
, 
ªque°ed_ícodög
Ë=
NULL
 )

430  
u8g
->
glyph_dx
;

431 
	}
}

437 #ifde‡
OBSOLETE


442 
öt8_t
 
	$u8g_DøwGlyphDú
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
ícodög
)

444 
u8g_glyph_t
 
g
;

445 
uöt8_t
 
w
, 
h
, 
i
, 
j
;

446 c⁄° 
u8g_pgm_uöt8_t
 *
d©a
;

447 
uöt8_t
 
byãs_≥r_löe
;

448 
u8g_uöt_t
 
ix
, 
iy
;

450 
g
 = 
	`u8g_GëGlyph
(
u8g
, 
ícodög
);

451 i‡–
g
 =
NULL
 )

453 
w
 = 
u8g
->
glyph_width
;

454 
h
 = 
u8g
->
glyph_height
;

456 
byãs_≥r_löe
 = 
w
;

457 
byãs_≥r_löe
 += 7;

458 
byãs_≥r_löe
 /= 8;

460 
d©a
 = 
	`u8g_f⁄t_GëGlyphD©aSèπ
(
u8g
->
f⁄t
, 
g
);

462 
dú
)

465 
x
 +
u8g
->
glyph_x
;

466 
y
 -
u8g
->
glyph_y
;

467 
y
--;

469 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
-
h
+1, 
w
, h) == 0 )

470  
u8g
->
glyph_dx
;

472 
iy
 = 
y
;

473 
iy
 -
h
;

474 
iy
++;

476  
j
 = 0; j < 
h
; j++ )

478 
ix
 = 
x
;

479  
i
 = 0; i < 
byãs_≥r_löe
; i++ )

481 
	`u8g_Døw8Pixñ
(
u8g
, 
ix
, 
iy
, 
dú
, 
	`u8g_pgm_ªad
(
d©a
));

482 
d©a
++;

483 
ix
+=8;

485 
iy
++;

489 
x
 +
u8g
->
glyph_y
;

490 
x
++;

491 
y
 +
u8g
->
glyph_x
;

494 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
h
, 
w
) == 0 )

495  
u8g
->
glyph_dx
;

497 
ix
 = 
x
;

498 
ix
 +
h
;

499 
ix
--;

500  
j
 = 0; j < 
h
; j++ )

502 
iy
 = 
y
;

503  
i
 = 0; i < 
byãs_≥r_löe
; i++ )

505 
	`u8g_Døw8Pixñ
(
u8g
, 
ix
, 
iy
, 
dú
, 
	`u8g_pgm_ªad
(
d©a
));

506 
d©a
++;

507 
iy
+=8;

509 
ix
--;

513 
x
 -
u8g
->
glyph_x
;

514 
y
 +
u8g
->
glyph_y
;

515 
y
++;

516 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
-
w
-1, 
y
, w, 
h
) == 0 )

517  
u8g
->
glyph_dx
;

519 
iy
 = 
y
;

520 
iy
 +
h
;

521 
iy
--;

522  
j
 = 0; j < 
h
; j++ )

524 
ix
 = 
x
;

525  
i
 = 0; i < 
byãs_≥r_löe
; i++ )

527 
	`u8g_Døw8Pixñ
(
u8g
, 
ix
, 
iy
, 
dú
, 
	`u8g_pgm_ªad
(
d©a
));

528 
d©a
++;

529 
ix
-=8;

531 
iy
--;

535 
x
 -
u8g
->
glyph_y
;

536 
x
--;

537 
y
 -
u8g
->
glyph_x
;

539 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
-
h
-1, 
y
-
w
-1, h, w) == 0 )

540  
u8g
->
glyph_dx
;

542 
ix
 = 
x
;

543 
ix
 -
h
;

544 
ix
++;

546  
j
 = 0; j < 
h
; j++ )

548 
iy
 = 
y
;

549  
i
 = 0; i < 
byãs_≥r_löe
; i++ )

551 
	`u8g_Døw8Pixñ
(
u8g
, 
ix
, 
iy
, 
dú
, 
	`u8g_pgm_ªad
(
d©a
));

552 
d©a
++;

553 
iy
-=8;

555 
ix
++;

559  
u8g
->
glyph_dx
;

560 
	}
}

563 
öt8_t
 
	$u8g_døw_glyph
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
)

565 c⁄° 
u8g_pgm_uöt8_t
 *
d©a
;

566 
uöt8_t
 
w
, 
h
;

567 
uöt8_t
 
i
, 
j
;

568 
u8g_uöt_t
 
ix
, 
iy
;

571 
u8g_glyph_t
 
g
 = 
	`u8g_GëGlyph
(
u8g
, 
ícodög
);

572 i‡–
g
 =
NULL
 )

574 
d©a
 = 
	`u8g_f⁄t_GëGlyphD©aSèπ
(
u8g
->
f⁄t
, 
g
);

577 
w
 = 
u8g
->
glyph_width
;

578 
h
 = 
u8g
->
glyph_height
;

580 
x
 +
u8g
->
glyph_x
;

581 
y
 -
u8g
->
glyph_y
;

582 
y
--;

584 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
-
h
+1, 
w
, h) == 0 )

585  
u8g
->
glyph_dx
;

588 
w
 += 7;

589 
w
 /= 8;

591 
iy
 = 
y
;

592 
iy
 -
h
;

593 
iy
++;

595  
j
 = 0; j < 
h
; j++ )

597 
ix
 = 
x
;

598  
i
 = 0; i < 
w
; i++ )

600 
	`u8g_Døw8Pixñ
(
u8g
, 
ix
, 
iy
, 0, 
	`u8g_pgm_ªad
(
d©a
));

601 
d©a
++;

602 
ix
+=8;

604 
iy
++;

606  
u8g
->
glyph_dx
;

607 
	}
}

609 
öt8_t
 
	$u8g_DøwGlyph
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
)

611 
y
 +
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

612  
	`u8g_døw_glyph
(
u8g
, 
x
, 
y
, 
ícodög
);

613 
	}
}

615 
öt8_t
 
	$u8g_døw_glyph90
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
)

617 c⁄° 
u8g_pgm_uöt8_t
 *
d©a
;

618 
uöt8_t
 
w
, 
h
;

619 
uöt8_t
 
i
, 
j
;

620 
u8g_uöt_t
 
ix
, 
iy
;

623 
u8g_glyph_t
 
g
 = 
	`u8g_GëGlyph
(
u8g
, 
ícodög
);

624 i‡–
g
 =
NULL
 )

626 
d©a
 = 
	`u8g_f⁄t_GëGlyphD©aSèπ
(
u8g
->
f⁄t
, 
g
);

629 
w
 = 
u8g
->
glyph_width
;

630 
h
 = 
u8g
->
glyph_height
;

632 
x
 +
u8g
->
glyph_y
;

633 
x
++;

634 
y
 +
u8g
->
glyph_x
;

636 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
h
, 
w
) == 0 )

637  
u8g
->
glyph_dx
;

640 
w
 += 7;

641 
w
 /= 8;

643 
ix
 = 
x
;

644 
ix
 +
h
;

645 
ix
--;

646  
j
 = 0; j < 
h
; j++ )

648 
iy
 = 
y
;

649  
i
 = 0; i < 
w
; i++ )

651 
	`u8g_Døw8Pixñ
(
u8g
, 
ix
, 
iy
, 1, 
	`u8g_pgm_ªad
(
d©a
));

652 
d©a
++;

653 
iy
+=8;

655 
ix
--;

657  
u8g
->
glyph_dx
;

658 
	}
}

660 
öt8_t
 
	$u8g_DøwGlyph90
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
)

662 
x
 -
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

663  
	`u8g_døw_glyph90
(
u8g
, 
x
, 
y
, 
ícodög
);

664 
	}
}

667 
öt8_t
 
	$u8g_døw_glyph180
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
)

669 c⁄° 
u8g_pgm_uöt8_t
 *
d©a
;

670 
uöt8_t
 
w
, 
h
;

671 
uöt8_t
 
i
, 
j
;

672 
u8g_uöt_t
 
ix
, 
iy
;

675 
u8g_glyph_t
 
g
 = 
	`u8g_GëGlyph
(
u8g
, 
ícodög
);

676 i‡–
g
 =
NULL
 )

678 
d©a
 = 
	`u8g_f⁄t_GëGlyphD©aSèπ
(
u8g
->
f⁄t
, 
g
);

681 
w
 = 
u8g
->
glyph_width
;

682 
h
 = 
u8g
->
glyph_height
;

684 
x
 -
u8g
->
glyph_x
;

685 
y
 +
u8g
->
glyph_y
;

686 
y
++;

688 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
-(
w
-1), 
y
, w, 
h
) == 0 )

689  
u8g
->
glyph_dx
;

692 
w
 += 7;

693 
w
 /= 8;

695 
iy
 = 
y
;

696 
iy
 +
h
;

697 
iy
--;

698  
j
 = 0; j < 
h
; j++ )

700 
ix
 = 
x
;

701  
i
 = 0; i < 
w
; i++ )

703 
	`u8g_Døw8Pixñ
(
u8g
, 
ix
, 
iy
, 2, 
	`u8g_pgm_ªad
(
d©a
));

704 
d©a
++;

705 
ix
-=8;

707 
iy
--;

709  
u8g
->
glyph_dx
;

710 
	}
}

712 
öt8_t
 
	$u8g_DøwGlyph180
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
)

714 
y
 -
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

715  
	`u8g_døw_glyph180
(
u8g
, 
x
, 
y
, 
ícodög
);

716 
	}
}

719 
öt8_t
 
	$u8g_døw_glyph270
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
)

721 c⁄° 
u8g_pgm_uöt8_t
 *
d©a
;

722 
uöt8_t
 
w
, 
h
;

723 
uöt8_t
 
i
, 
j
;

724 
u8g_uöt_t
 
ix
, 
iy
;

727 
u8g_glyph_t
 
g
 = 
	`u8g_GëGlyph
(
u8g
, 
ícodög
);

728 i‡–
g
 =
NULL
 )

730 
d©a
 = 
	`u8g_f⁄t_GëGlyphD©aSèπ
(
u8g
->
f⁄t
, 
g
);

733 
w
 = 
u8g
->
glyph_width
;

734 
h
 = 
u8g
->
glyph_height
;

736 
x
 -
u8g
->
glyph_y
;

737 
x
--;

738 
y
 -
u8g
->
glyph_x
;

740 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
-(
h
-1), 
y
-(
w
-1), h, w) == 0 )

741  
u8g
->
glyph_dx
;

745 
w
 += 7;

746 
w
 /= 8;

748 
ix
 = 
x
;

749 
ix
 -
h
;

750 
ix
++;

752  
j
 = 0; j < 
h
; j++ )

754 
iy
 = 
y
;

755  
i
 = 0; i < 
w
; i++ )

757 
	`u8g_Døw8Pixñ
(
u8g
, 
ix
, 
iy
, 3, 
	`u8g_pgm_ªad
(
d©a
));

758 
d©a
++;

759 
iy
-=8;

761 
ix
++;

763  
u8g
->
glyph_dx
;

764 
	}
}

766 
öt8_t
 
	$u8g_DøwGlyph270
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
)

768 
x
 +
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

769  
	`u8g_døw_glyph270
(
u8g
, 
x
, 
y
, 
ícodög
);

770 
	}
}

774 #ifde‡
OBSOLETE


779 
öt8_t
 
	$u8g_DøwGlyphF⁄tBBX
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
ícodög
)

782 
x
 -
	`u8g_GëF⁄tBBXOffX
(
u8g
);

783 
y
 +
	`u8g_GëF⁄tBBXOffY
(
u8g
);

784  
	`u8g_DøwGlyphDú
(
u8g
, 
x
, 
y
, 
dú
, 
ícodög
);

785 
	}
}

792 
u8g_uöt_t
 
	$u8g_DøwSå
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° *
s
)

794 
u8g_uöt_t
 
t
 = 0;

795 
öt8_t
 
d
;

800 
y
 +
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

802  *
s
 != '\0' )

804 
d
 = 
	`u8g_døw_glyph
(
u8g
, 
x
, 
y
, *
s
);

805 
x
 +
d
;

806 
t
 +
d
;

807 
s
++;

809  
t
;

810 
	}
}

812 
u8g_uöt_t
 
	$u8g_DøwSå90
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° *
s
)

814 
u8g_uöt_t
 
t
 = 0;

815 
öt8_t
 
d
;

817 
x
 -
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

819  *
s
 != '\0' )

821 
d
 = 
	`u8g_døw_glyph90
(
u8g
, 
x
, 
y
, *
s
);

822 
y
 +
d
;

823 
t
 +
d
;

824 
s
++;

826  
t
;

827 
	}
}

829 
u8g_uöt_t
 
	$u8g_DøwSå180
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° *
s
)

831 
u8g_uöt_t
 
t
 = 0;

832 
öt8_t
 
d
;

834 
y
 -
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

836  *
s
 != '\0' )

838 
d
 = 
	`u8g_døw_glyph180
(
u8g
, 
x
, 
y
, *
s
);

839 
x
 -
d
;

840 
t
 +
d
;

841 
s
++;

843  
t
;

844 
	}
}

846 
u8g_uöt_t
 
	$u8g_DøwSå270
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° *
s
)

848 
u8g_uöt_t
 
t
 = 0;

849 
öt8_t
 
d
;

851 
x
 +
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

853  *
s
 != '\0' )

855 
d
 = 
	`u8g_døw_glyph270
(
u8g
, 
x
, 
y
, *
s
);

856 
y
 -
d
;

857 
t
 +
d
;

858 
s
++;

860  
t
;

861 
	}
}

863 
u8g_uöt_t
 
	$u8g_DøwSåDú
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, c⁄° *
s
)

865 
dú
)

868  
	`u8g_DøwSå
(
u8g
, 
x
, 
y
, 
s
);

870  
	`u8g_DøwSå90
(
u8g
, 
x
, 
y
, 
s
);

872  
	`u8g_DøwSå180
(
u8g
, 
x
, 
y
, 
s
);

874  
	`u8g_DøwSå270
(
u8g
, 
x
, 
y
, 
s
);

877 
	}
}

879 
u8g_uöt_t
 
	$u8g_DøwSåP
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
)

881 
u8g_uöt_t
 
t
 = 0;

882 
öt8_t
 
d
;

883 
uöt8_t
 
c
;

885 
y
 +
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

889 
c
 = 
	`u8g_pgm_ªad
(
s
);

890 i‡–
c
 == '\0' )

892 
d
 = 
	`u8g_døw_glyph
(
u8g
, 
x
, 
y
, 
c
);

893 
x
 +
d
;

894 
t
 +
d
;

895 
s
++;

897  
t
;

898 
	}
}

900 
u8g_uöt_t
 
	$u8g_DøwSå90P
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
)

902 
u8g_uöt_t
 
t
 = 0;

903 
öt8_t
 
d
;

905 
x
 -
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

907  *
s
 != '\0' )

909 
d
 = 
	`u8g_DøwGlyph90
(
u8g
, 
x
, 
y
, 
	`u8g_pgm_ªad
(
s
));

910 
y
 +
d
;

911 
t
 +
d
;

912 
s
++;

914  
t
;

915 
	}
}

917 
u8g_uöt_t
 
	$u8g_DøwSå180P
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
)

919 
u8g_uöt_t
 
t
 = 0;

920 
öt8_t
 
d
;

922 
y
 -
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

924  *
s
 != '\0' )

926 
d
 = 
	`u8g_DøwGlyph180
(
u8g
, 
x
, 
y
, 
	`u8g_pgm_ªad
(
s
));

927 
x
 -
d
;

928 
t
 +
d
;

929 
s
++;

931  
t
;

932 
	}
}

934 
u8g_uöt_t
 
	$u8g_DøwSå270P
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
)

936 
u8g_uöt_t
 
t
 = 0;

937 
öt8_t
 
d
;

939 
x
 +
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

941  *
s
 != '\0' )

943 
d
 = 
	`u8g_DøwGlyph270
(
u8g
, 
x
, 
y
, 
	`u8g_pgm_ªad
(
s
));

944 
y
 -
d
;

945 
t
 +
d
;

946 
s
++;

948  
t
;

949 
	}
}

951 
u8g_uöt_t
 
	$u8g_DøwSåF⁄tBBX
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, c⁄° *
s
)

953 
x
 -
	`u8g_GëF⁄tBBXOffX
(
u8g
);

954 
y
 +
	`u8g_GëF⁄tBBXOffY
(
u8g
);

955  
	`u8g_DøwSåDú
(
u8g
, 
x
, 
y
, 
dú
, 
s
);

956 
	}
}

959 
öt8_t
 
	$u8g_DøwGlyphF⁄tBBX
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
ícodög
)

961 
x
 -
	`u8g_GëF⁄tBBXOffX
(
u8g
);

962 
y
 +
	`u8g_GëF⁄tBBXOffY
(
u8g
);

963 
	`u8g_døw_glyph
(
u8g
, 
x
, 
y
, 
ícodög
);

964 
	}
}

970 
	$u8g_Upd©eRefHeight
(
u8g_t
 *
u8g
)

972 
uöt16_t
 
ls
;

973 i‡–
u8g
->
f⁄t
 =
NULL
 )

975 i‡–
u8g
->
f⁄t_height_mode
 =
U8G_FONT_HEIGHT_MODE_TEXT
 )

977 
u8g
->
f⁄t_ªf_as˚¡
 = 
	`u8g_f⁄t_GëC≠ôÆAHeight
(u8g->
f⁄t
);

978 
u8g
->
f⁄t_ªf_des˚¡
 = 
	`u8g_f⁄t_GëLowîGDes˚¡
(u8g->
f⁄t
);

980 i‡–
u8g
->
f⁄t_height_mode
 =
U8G_FONT_HEIGHT_MODE_XTEXT
 )

982 
u8g
->
f⁄t_ªf_as˚¡
 = 
	`u8g_f⁄t_GëF⁄tXAs˚¡
(u8g->
f⁄t
);

983 
u8g
->
f⁄t_ªf_des˚¡
 = 
	`u8g_f⁄t_GëF⁄tXDes˚¡
(u8g->
f⁄t
);

987 
u8g
->
f⁄t_ªf_as˚¡
 = 
	`u8g_f⁄t_GëF⁄tAs˚¡
(u8g->
f⁄t
);

988 
u8g
->
f⁄t_ªf_des˚¡
 = 
	`u8g_f⁄t_GëF⁄tDes˚¡
(u8g->
f⁄t
);

991 
ls
 = 
u8g
->
f⁄t_ªf_as˚¡
 - u8g->
f⁄t_ªf_des˚¡
;

992 i‡–
u8g
->
f⁄t_löe_•acög_Á˘‹
 != 64 )

994 
ls
 &= 255;

995 
ls
 *
u8g
->
f⁄t_löe_•acög_Á˘‹
;

996 
ls
 >>= 6;

998 
u8g
->
löe_•acög
 = 
ls
;

999 
	}
}

1001 
	$u8g_SëF⁄tRefHeightText
(
u8g_t
 *
u8g
)

1003 
u8g
->
f⁄t_height_mode
 = 
U8G_FONT_HEIGHT_MODE_TEXT
;

1004 
	`u8g_Upd©eRefHeight
(
u8g
);

1005 
	}
}

1007 
	$u8g_SëF⁄tRefHeightExãndedText
(
u8g_t
 *
u8g
)

1009 
u8g
->
f⁄t_height_mode
 = 
U8G_FONT_HEIGHT_MODE_XTEXT
;

1010 
	`u8g_Upd©eRefHeight
(
u8g
);

1011 
	}
}

1014 
	$u8g_SëF⁄tRefHeightAŒ
(
u8g_t
 *
u8g
)

1016 
u8g
->
f⁄t_height_mode
 = 
U8G_FONT_HEIGHT_MODE_ALL
;

1017 
	`u8g_Upd©eRefHeight
(
u8g
);

1018 
	}
}

1021 
	$u8g_SëF⁄tLöeS∑cögFa˘‹
(
u8g_t
 *
u8g
, 
uöt8_t
 
Á˘‹
)

1023 
u8g
->
f⁄t_löe_•acög_Á˘‹
 = 
Á˘‹
;

1024 
	`u8g_Upd©eRefHeight
(
u8g
);

1025 
	}
}

1032 
u8g_uöt_t
 
	$u8g_f⁄t_ˇlc_vªf_f⁄t
(
u8g_t
 *
u8g
)

1035 
	}
}

1037 
	$u8g_SëF⁄tPosBa£löe
(
u8g_t
 *
u8g
)

1039 
u8g
->
f⁄t_ˇlc_vªf
 = 
u8g_f⁄t_ˇlc_vªf_f⁄t
;

1040 
	}
}

1043 
u8g_uöt_t
 
	$u8g_f⁄t_ˇlc_vªf_bŸtom
(
u8g_t
 *
u8g
)

1046  (
u8g_uöt_t
)(
u8g_öt_t
)(
u8g
->
f⁄t_ªf_des˚¡
);

1047 
	}
}

1049 
	$u8g_SëF⁄tPosBŸtom
(
u8g_t
 *
u8g
)

1051 
u8g
->
f⁄t_ˇlc_vªf
 = 
u8g_f⁄t_ˇlc_vªf_bŸtom
;

1052 
	}
}

1054 
u8g_uöt_t
 
	$u8g_f⁄t_ˇlc_vªf_t›
(
u8g_t
 *
u8g
)

1056 
u8g_uöt_t
 
tmp
;

1063 
tmp
 = (
u8g_uöt_t
)(
u8g_öt_t
)(
u8g
->
f⁄t_ªf_as˚¡
);

1064 
tmp
++;

1065  
tmp
;

1066 
	}
}

1068 
	$u8g_SëF⁄tPosT›
(
u8g_t
 *
u8g
)

1070 
u8g
->
f⁄t_ˇlc_vªf
 = 
u8g_f⁄t_ˇlc_vªf_t›
;

1071 
	}
}

1073 
u8g_uöt_t
 
	$u8g_f⁄t_ˇlc_vªf_˚¡î
(
u8g_t
 *
u8g
)

1075 
öt8_t
 
tmp
;

1076 
tmp
 = 
u8g
->
f⁄t_ªf_as˚¡
;

1077 
tmp
 -
u8g
->
f⁄t_ªf_des˚¡
;

1078 
tmp
 /= 2;

1079 
tmp
 +
u8g
->
f⁄t_ªf_des˚¡
;

1081  
tmp
;

1082 
	}
}

1084 
	$u8g_SëF⁄tPosCíãr
(
u8g_t
 *
u8g
)

1086 
u8g
->
f⁄t_ˇlc_vªf
 = 
u8g_f⁄t_ˇlc_vªf_˚¡î
;

1087 
	}
}

1092 
	$u8g_f⁄t_gë_ch¨
(c⁄° *
s
)

1094  *(c⁄° *)(
s
);

1095 
	}
}

1097 
	$u8g_f⁄t_gë_ch¨P
(c⁄° *
s
)

1099  
	`u8g_pgm_ªad
(
s
);

1100 
	}
}

1102 (*
	tu8g_f⁄t_gë_ch¨_‚
)(c⁄° *
	ts
);

1105 
u8g_uöt_t
 
	$u8g_f⁄t_ˇlc_°r_pixñ_width
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_f⁄t_gë_ch¨_‚
 
gë_ch¨
 )

1107 
u8g_uöt_t
 
w
;

1108 
uöt8_t
 
íc
;

1111 
w
 = 0;

1113 
íc
 = 
	`gë_ch¨
(
s
);

1116 i‡–
íc
 == '\0' )

1118  
w
;

1123 
	`u8g_GëGlyph
(
u8g
, 
íc
);

1131 
w
 = -
u8g
->
glyph_x
;

1136 
s
++;

1137 i‡–
	`gë_ch¨
(
s
) == '\0' )

1141 
w
 +
u8g
->
glyph_dx
;

1144 
íc
 = 
	`gë_ch¨
(
s
);

1147 
	`u8g_GëGlyph
(
u8g
, 
íc
);

1152 i‡–
íc
 != ' ' )

1155 
w
 +
u8g
->
glyph_width
;

1156 
w
 +
u8g
->
glyph_x
;

1160 
w
 +
u8g
->
glyph_dx
;

1164  
w
;

1165 
	}
}

1167 
u8g_uöt_t
 
	$u8g_GëSåPixñWidth
(
u8g_t
 *
u8g
, c⁄° *
s
)

1169  
	`u8g_f⁄t_ˇlc_°r_pixñ_width
(
u8g
, 
s
, 
u8g_f⁄t_gë_ch¨
);

1170 
	}
}

1172 
u8g_uöt_t
 
	$u8g_GëSåPixñWidthP
(
u8g_t
 *
u8g
, c⁄° 
u8g_pgm_uöt8_t
 *
s
)

1174  
	`u8g_f⁄t_ˇlc_°r_pixñ_width
(
u8g
, (c⁄° *)
s
, 
u8g_f⁄t_gë_ch¨P
);

1175 
	}
}

1177 
öt8_t
 
	$u8g_GëSåX
(
u8g_t
 *
u8g
, c⁄° *
s
)

1179 
	`u8g_GëGlyph
(
u8g
, *
s
);

1180  
u8g
->
glyph_x
;

1181 
	}
}

1183 
öt8_t
 
	$u8g_GëSåXP
(
u8g_t
 *
u8g
, c⁄° 
u8g_pgm_uöt8_t
 *
s
)

1185 
	`u8g_GëGlyph
(
u8g
, 
	`u8g_pgm_ªad
(
s
));

1186  
u8g
->
glyph_x
;

1187 
	}
}

1192 
u8g_uöt_t
 
	$u8g_GëSåWidth
(
u8g_t
 *
u8g
, c⁄° *
s
)

1194 
u8g_uöt_t
 
w
;

1195 
uöt8_t
 
ícodög
;

1198 
w
 = 0;

1202 
ícodög
 = *
s
;

1203 i‡–
ícodög
 == 0 )

1207 
	`u8g_GëGlyph
(
u8g
, 
ícodög
);

1208 
w
 +
u8g
->
glyph_dx
;

1211 
s
++;

1214  
w
;

1215 
	}
}

1218 
u8g_uöt_t
 
	$u8g_GëSåWidthP
(
u8g_t
 *
u8g
, c⁄° 
u8g_pgm_uöt8_t
 *
s
)

1220 
u8g_uöt_t
 
w
;

1221 
uöt8_t
 
ícodög
;

1224 
w
 = 0;

1228 
ícodög
 = 
	`u8g_pgm_ªad
(
s
);

1229 i‡–
ícodög
 == 0 )

1233 
	`u8g_GëGlyph
(
u8g
, 
ícodög
);

1234 
w
 +
u8g
->
glyph_dx
;

1237 
s
++;

1240  
w
;

1241 
	}
}

1256 
	su8g_°r_size_°ru˘


1258 
öt8_t
 
	my_mö
;

1259 
öt8_t
 
	my_max
;

1260 
öt8_t
 
	mx
, 
	my
;

1261 
u8g_uöt_t
 
	mw
;

1263 
u8g_°r_size_°ru˘
 
	tu8g_°r_size_t
;

1265 
	$u8g_f⁄t_ˇlc_°r_mö_box
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_°r_size_t
 *
buf
)

1268 
öt8_t
 
tmp
;

1271 
buf
->
w
 = 0;

1274 i‡–*
s
 == '\0' )

1276 
buf
->
y_mö
 = 0;

1277 
buf
->
y_max
 = 0;

1278 
buf
->
x
 = 0;

1279 
buf
->
y
 = 0;

1285 
buf
->
y_mö
 = 127;

1288 
buf
->
y_max
 = -128;

1291 
	`u8g_GëGlyph
(
u8g
, *
s
);

1300 
buf
->
w
 = - 
u8g
->
glyph_x
;

1303 
buf
->
x
 = 
u8g
->
glyph_x
;

1304 
buf
->
y
 = 
u8g
->
glyph_y
;

1312 
tmp
 = 
u8g
->
glyph_y
;

1313 i‡–
buf
->
y_mö
 > 
tmp
 )

1314 
buf
->
y_mö
 = 
tmp
;

1316 
tmp
 +=
u8g
->
glyph_height
;

1317 i‡–
buf
->
y_max
 < 
tmp
 )

1318 
buf
->
y_max
 = 
tmp
;

1321 
s
++;

1322 i‡–*
s
 == '\0' )

1326 
buf
->
w
 +
u8g
->
glyph_dx
;

1329 
	`u8g_GëGlyph
(
u8g
, *
s
);

1334 
buf
->
w
 +
u8g
->
glyph_width
;

1337 
buf
->
w
 +
u8g
->
glyph_x
;

1338 
	}
}

1341 
	$u8g_f⁄t_box_mö
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_°r_size_t
 *
buf
)

1343 
	`u8g_f⁄t_ˇlc_°r_mö_box
(
u8g
, 
s
, 
buf
);

1344 
	}
}

1347 
	$u8g_f⁄t_box_À·_gA
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_°r_size_t
 *
buf
)

1350 
	}
}

1353 
	$u8g_f⁄t_box_Æl_gA
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_°r_size_t
 *
buf
)

1356 
	}
}

1359 
	$u8g_f⁄t_gë_°r_box_fûl_¨gs
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_°r_size_t
 *
buf
, 
u8g_uöt_t
 *
x
, u8g_uöt_à*
y
, u8g_uöt_à*
width
, u8g_uöt_à*
height
)

1365 
	`u8g_GëGlyph
(
u8g
, *
s
);

1366 *
x
 +
u8g
->
glyph_x
;

1367 *
width
 = 
buf
->
w
;

1368 *
y
 -
buf
->
y_max
;

1373 *
height
 = 
buf
->
y_max
;

1374 *
height
 -
buf
->
y_mö
;

1375 
	}
}

1378 
	$u8g_GëSåMöBox
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_uöt_t
 *
x
, u8g_uöt_à*
y
, u8g_uöt_à*
width
, u8g_uöt_à*
height
)

1380 
u8g_°r_size_t
 
buf
;

1382 i‡–*
s
 == '\0' )

1384 *
width
= 0;

1385 *
height
 = 0;

1389 
	`u8g_f⁄t_ˇlc_°r_mö_box
(
u8g
, 
s
, &
buf
);

1390 
	`u8g_f⁄t_gë_°r_box_fûl_¨gs
(
u8g
, 
s
, &
buf
, 
x
, 
y
, 
width
, 
height
);

1391 
	}
}

1394 
	$u8g_GëSåAMöBox
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_uöt_t
 *
x
, u8g_uöt_à*
y
, u8g_uöt_à*
width
, u8g_uöt_à*
height
)

1396 
u8g_°r_size_t
 
buf
;

1397 
uöt8_t
 
ˇp_a
;

1399 i‡–*
s
 == '\0' )

1401 *
width
= 0;

1402 *
height
 = 0;

1406 
ˇp_a
 = 
	`u8g_f⁄t_GëC≠ôÆAHeight
(
u8g
->
f⁄t
);

1407 
	`u8g_f⁄t_ˇlc_°r_mö_box
(
u8g
, 
s
, &
buf
);

1408 i‡–
buf
.
y_max
 < 
ˇp_a
 )

1409 
buf
.
y_max
 = 
ˇp_a
;

1410 
	`u8g_f⁄t_gë_°r_box_fûl_¨gs
(
u8g
, 
s
, &
buf
, 
x
, 
y
, 
width
, 
height
);

1411 
	}
}

1413 
	$u8g_SëF⁄t
(
u8g_t
 *
u8g
, c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
)

1415 i‡–
u8g
->
f⁄t
 != font )

1417 
u8g
->
f⁄t
 = font;

1418 
	`u8g_Upd©eRefHeight
(
u8g
);

1419 
	`u8g_SëF⁄tPosBa£löe
(
u8g
);

1421 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_font_data.c

12 
	~"u8g.h
"

13 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_03b
[826] 
U8G_SECTION
(".progmem.u8g_font_04b_03b") = {

77 
	~"u8g.h
"

78 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_03bn
[130] 
U8G_SECTION
(".progmem.u8g_font_04b_03bn") = {

99 
	~"u8g.h
"

100 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_03br
[696] 
U8G_SECTION
(".progmem.u8g_font_04b_03br") = {

156 
	~"u8g.h
"

157 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_03
[859] 
U8G_SECTION
(".progmem.u8g_font_04b_03") = {

223 
	~"u8g.h
"

224 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_03n
[130] 
U8G_SECTION
(".progmem.u8g_font_04b_03n") = {

245 
	~"u8g.h
"

246 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_03r
[729] 
U8G_SECTION
(".progmem.u8g_font_04b_03r") = {

304 
	~"u8g.h
"

305 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_24
[912] 
U8G_SECTION
(".progmem.u8g_font_04b_24") = {

375 
	~"u8g.h
"

376 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_24n
[130] 
U8G_SECTION
(".progmem.u8g_font_04b_24n") = {

397 
	~"u8g.h
"

398 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_24r
[735] 
U8G_SECTION
(".progmem.u8g_font_04b_24r") = {

456 
	~"u8g.h
"

457 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_10x20_67_75
[4734] 
U8G_SECTION
(".progmem.u8g_font_10x20_67_75") = {

765 
	~"u8g.h
"

766 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_10x20_75r
[693] 
U8G_SECTION
(".progmem.u8g_font_10x20_75r") = {

822 
	~"u8g.h
"

823 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_10x20_78_79
[2638] 
U8G_SECTION
(".progmem.u8g_font_10x20_78_79") = {

1000 
	~"u8g.h
"

1001 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_10x20
[3453] 
U8G_SECTION
(".progmem.u8g_font_10x20") = {

1229 
	~"u8g.h
"

1230 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_10x20r
[1667] 
U8G_SECTION
(".progmem.u8g_font_10x20r") = {

1347 
	~"u8g.h
"

1348 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_4x6
[1500] 
U8G_SECTION
(".progmem.u8g_font_4x6") = {

1454 
	~"u8g.h
"

1455 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_4x6r
[734] 
U8G_SECTION
(".progmem.u8g_font_4x6r") = {

1513 
	~"u8g.h
"

1514 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_5x7
[1624] 
U8G_SECTION
(".progmem.u8g_font_5x7") = {

1628 
	~"u8g.h
"

1629 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_5x7r
[789] 
U8G_SECTION
(".progmem.u8g_font_5x7r") = {

1691 
	~"u8g.h
"

1692 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_5x8
[1693] 
U8G_SECTION
(".progmem.u8g_font_5x8") = {

1810 
	~"u8g.h
"

1811 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_5x8r
[805] 
U8G_SECTION
(".progmem.u8g_font_5x8r") = {

1874 
	~"u8g.h
"

1875 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x10
[1866] 
U8G_SECTION
(".progmem.u8g_font_6x10") = {

2004 
	~"u8g.h
"

2005 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x10r
[889] 
U8G_SECTION
(".progmem.u8g_font_6x10r") = {

2073 
	~"u8g.h
"

2074 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x12_67_75
[2382] 
U8G_SECTION
(".progmem.u8g_font_6x12_67_75") = {

2235 
	~"u8g.h
"

2236 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x12_75r
[427] 
U8G_SECTION
(".progmem.u8g_font_6x12_75r") = {

2275 
	~"u8g.h
"

2276 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x12_78_79
[2316] 
U8G_SECTION
(".progmem.u8g_font_6x12_78_79") = {

2433 
	~"u8g.h
"

2434 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x12
[1933] 
U8G_SECTION
(".progmem.u8g_font_6x12") = {

2567 
	~"u8g.h
"

2568 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x12r
[898] 
U8G_SECTION
(".progmem.u8g_font_6x12r") = {

2637 
	~"u8g.h
"

2638 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13_67_75
[2236] 
U8G_SECTION
(".progmem.u8g_font_6x13_67_75") = {

2790 
	~"u8g.h
"

2791 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13_75r
[447] 
U8G_SECTION
(".progmem.u8g_font_6x13_75r") = {

2831 
	~"u8g.h
"

2832 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13_78_79
[1470] 
U8G_SECTION
(".progmem.u8g_font_6x13_78_79") = {

2936 
	~"u8g.h
"

2937 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13B
[2171] 
U8G_SECTION
(".progmem.u8g_font_6x13B") = {

3085 
	~"u8g.h
"

3086 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13Br
[1040] 
U8G_SECTION
(".progmem.u8g_font_6x13Br") = {

3164 
	~"u8g.h
"

3165 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13
[2160] 
U8G_SECTION
(".progmem.u8g_font_6x13") = {

3313 
	~"u8g.h
"

3314 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13O
[2162] 
U8G_SECTION
(".progmem.u8g_font_6x13O") = {

3462 
	~"u8g.h
"

3463 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13Or
[1043] 
U8G_SECTION
(".progmem.u8g_font_6x13Or") = {

3541 
	~"u8g.h
"

3542 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13r
[1041] 
U8G_SECTION
(".progmem.u8g_font_6x13r") = {

3620 
	~"u8g.h
"

3621 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x13_67_75
[2197] 
U8G_SECTION
(".progmem.u8g_font_7x13_67_75") = {

3771 
	~"u8g.h
"

3772 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x13_75r
[471] 
U8G_SECTION
(".progmem.u8g_font_7x13_75r") = {

3814 
	~"u8g.h
"

3815 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x13B
[2172] 
U8G_SECTION
(".progmem.u8g_font_7x13B") = {

3963 
	~"u8g.h
"

3964 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x13Br
[1041] 
U8G_SECTION
(".progmem.u8g_font_7x13Br") = {

4042 
	~"u8g.h
"

4043 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x13
[2157] 
U8G_SECTION
(".progmem.u8g_font_7x13") = {

4190 
	~"u8g.h
"

4191 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x13O
[2158] 
U8G_SECTION
(".progmem.u8g_font_7x13O") = {

4338 
	~"u8g.h
"

4339 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x13Or
[1035] 
U8G_SECTION
(".progmem.u8g_font_7x13Or") = {

4416 
	~"u8g.h
"

4417 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x13r
[1034] 
U8G_SECTION
(".progmem.u8g_font_7x13r") = {

4494 
	~"u8g.h
"

4495 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x14B
[2390] 
U8G_SECTION
(".progmem.u8g_font_7x14B") = {

4657 
	~"u8g.h
"

4658 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x14Br
[1151] 
U8G_SECTION
(".progmem.u8g_font_7x14Br") = {

4742 
	~"u8g.h
"

4743 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x14
[2374] 
U8G_SECTION
(".progmem.u8g_font_7x14") = {

4904 
	~"u8g.h
"

4905 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x14r
[1151] 
U8G_SECTION
(".progmem.u8g_font_7x14r") = {

4989 
	~"u8g.h
"

4990 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_8x13_67_75
[2420] 
U8G_SECTION
(".progmem.u8g_font_8x13_67_75") = {

5154 
	~"u8g.h
"

5155 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_8x13_75r
[496] 
U8G_SECTION
(".progmem.u8g_font_8x13_75r") = {

5199 
	~"u8g.h
"

5200 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_8x13B
[2302] 
U8G_SECTION
(".progmem.u8g_font_8x13B") = {

5356 
	~"u8g.h
"

5357 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_8x13Br
[1123] 
U8G_SECTION
(".progmem.u8g_font_8x13Br") = {

5440 
	~"u8g.h
"

5441 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_8x13
[2152] 
U8G_SECTION
(".progmem.u8g_font_8x13") = {

5588 
	~"u8g.h
"

5589 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_8x13O
[2153] 
U8G_SECTION
(".progmem.u8g_font_8x13O") = {

5736 
	~"u8g.h
"

5737 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_8x13Or
[1029] 
U8G_SECTION
(".progmem.u8g_font_8x13Or") = {

5814 
	~"u8g.h
"

5815 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_8x13r
[1028] 
U8G_SECTION
(".progmem.u8g_font_8x13r") = {

5892 
	~"u8g.h
"

5893 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x15_67_75
[3804] 
U8G_SECTION
(".progmem.u8g_font_9x15_67_75") = {

6143 
	~"u8g.h
"

6144 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x15_75r
[792] 
U8G_SECTION
(".progmem.u8g_font_9x15_75r") = {

6206 
	~"u8g.h
"

6207 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x15_78_79
[3795] 
U8G_SECTION
(".progmem.u8g_font_9x15_78_79") = {

6457 
	~"u8g.h
"

6458 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x15B
[2990] 
U8G_SECTION
(".progmem.u8g_font_9x15B") = {

6657 
	~"u8g.h
"

6658 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x15Br
[1423] 
U8G_SECTION
(".progmem.u8g_font_9x15Br") = {

6759 
	~"u8g.h
"

6760 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x15
[2959] 
U8G_SECTION
(".progmem.u8g_font_9x15") = {

6957 
	~"u8g.h
"

6958 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x15r
[1427] 
U8G_SECTION
(".progmem.u8g_font_9x15r") = {

7060 
	~"u8g.h
"

7061 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x18_67_75
[3936] 
U8G_SECTION
(".progmem.u8g_font_9x18_67_75") = {

7320 
	~"u8g.h
"

7321 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x18_75r
[792] 
U8G_SECTION
(".progmem.u8g_font_9x18_75r") = {

7383 
	~"u8g.h
"

7384 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x18_78_79
[3336] 
U8G_SECTION
(".progmem.u8g_font_9x18_78_79") = {

7605 
	~"u8g.h
"

7606 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x18B
[3026] 
U8G_SECTION
(".progmem.u8g_font_9x18B") = {

7808 
	~"u8g.h
"

7809 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x18Br
[1434] 
U8G_SECTION
(".progmem.u8g_font_9x18Br") = {

7911 
	~"u8g.h
"

7912 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x18
[3011] 
U8G_SECTION
(".progmem.u8g_font_9x18") = {

8113 
	~"u8g.h
"

8114 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x18r
[1424] 
U8G_SECTION
(".progmem.u8g_font_9x18r") = {

8216 
	~"u8g.h
"

8217 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_baby
[2227] 
U8G_SECTION
(".progmem.u8g_font_baby") = {

8369 
	~"u8g.h
"

8370 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_babyn
[180] 
U8G_SECTION
(".progmem.u8g_font_babyn") = {

8394 
	~"u8g.h
"

8395 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_babyr
[1040] 
U8G_SECTION
(".progmem.u8g_font_babyr") = {

8473 
	~"u8g.h
"

8474 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_blù„°_07
[948] 
U8G_SECTION
(".progmem.u8g_font_blipfest_07") = {

8546 
	~"u8g.h
"

8547 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_blù„°_07n
[160] 
U8G_SECTION
(".progmem.u8g_font_blipfest_07n") = {

8570 
	~"u8g.h
"

8571 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_blù„°_07r
[820] 
U8G_SECTION
(".progmem.u8g_font_blipfest_07r") = {

8635 
	~"u8g.h
"

8636 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_chikôa
[2236] 
U8G_SECTION
(".progmem.u8g_font_chikita") = {

8788 
	~"u8g.h
"

8789 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_chikô™
[180] 
U8G_SECTION
(".progmem.u8g_font_chikitan") = {

8813 
	~"u8g.h
"

8814 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_chikô¨
[1032] 
U8G_SECTION
(".progmem.u8g_font_chikitar") = {

8891 
	~"u8g.h
"

8892 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB08
[2425] 
U8G_SECTION
(".progmem.u8g_font_courB08") = {

9056 
	~"u8g.h
"

9057 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB08r
[1145] 
U8G_SECTION
(".progmem.u8g_font_courB08r") = {

9141 
	~"u8g.h
"

9142 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB10
[3355] 
U8G_SECTION
(".progmem.u8g_font_courB10") = {

9364 
	~"u8g.h
"

9365 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB10r
[1551] 
U8G_SECTION
(".progmem.u8g_font_courB10r") = {

9474 
	~"u8g.h
"

9475 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB12
[3959] 
U8G_SECTION
(".progmem.u8g_font_courB12") = {

9735 
	~"u8g.h
"

9736 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB12r
[1857] 
U8G_SECTION
(".progmem.u8g_font_courB12r") = {

9865 
	~"u8g.h
"

9866 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB14
[4784] 
U8G_SECTION
(".progmem.u8g_font_courB14") = {

10178 
	~"u8g.h
"

10179 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB14r
[2167] 
U8G_SECTION
(".progmem.u8g_font_courB14r") = {

10327 
	~"u8g.h
"

10328 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB18
[6429] 
U8G_SECTION
(".progmem.u8g_font_courB18") = {

10742 
	~"u8g.h
"

10743 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB18r
[3001] 
U8G_SECTION
(".progmem.u8g_font_courB18r") = {

10943 
	~"u8g.h
"

10944 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB24
[10502] 
U8G_SECTION
(".progmem.u8g_font_courB24") = {

11613 
	~"u8g.h
"

11614 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB24r
[4775] 
U8G_SECTION
(".progmem.u8g_font_courB24r") = {

11925 
	~"u8g.h
"

11926 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB24n
[686] 
U8G_SECTION
(".progmem.u8g_font_courB24n") = {

11981 
	~"u8g.h
"

11982 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR08
[2433] 
U8G_SECTION
(".progmem.u8g_font_courR08") = {

12147 
	~"u8g.h
"

12148 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR08r
[1157] 
U8G_SECTION
(".progmem.u8g_font_courR08r") = {

12233 
	~"u8g.h
"

12234 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR10
[3052] 
U8G_SECTION
(".progmem.u8g_font_courR10") = {

12437 
	~"u8g.h
"

12438 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR10r
[1443] 
U8G_SECTION
(".progmem.u8g_font_courR10r") = {

12541 
	~"u8g.h
"

12542 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR12
[3471] 
U8G_SECTION
(".progmem.u8g_font_courR12") = {

12771 
	~"u8g.h
"

12772 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR12r
[1592] 
U8G_SECTION
(".progmem.u8g_font_courR12r") = {

12884 
	~"u8g.h
"

12885 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR14
[4276] 
U8G_SECTION
(".progmem.u8g_font_courR14") = {

13165 
	~"u8g.h
"

13166 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR14r
[1988] 
U8G_SECTION
(".progmem.u8g_font_courR14r") = {

13303 
	~"u8g.h
"

13304 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR18
[6152] 
U8G_SECTION
(".progmem.u8g_font_courR18") = {

13701 
	~"u8g.h
"

13702 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR18r
[2862] 
U8G_SECTION
(".progmem.u8g_font_courR18r") = {

13893 
	~"u8g.h
"

13894 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR24
[8729] 
U8G_SECTION
(".progmem.u8g_font_courR24") = {

14452 
	~"u8g.h
"

14453 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR24n
[638] 
U8G_SECTION
(".progmem.u8g_font_courR24n") = {

14505 
	~"u8g.h
"

14506 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR24r
[3991] 
U8G_SECTION
(".progmem.u8g_font_courR24r") = {

14768 
	~"u8g.h
"

14769 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_cu12_67_75
[3981] 
U8G_SECTION
(".progmem.u8g_font_cu12_67_75") = {

15030 
	~"u8g.h
"

15031 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_cu12_75r
[1123] 
U8G_SECTION
(".progmem.u8g_font_cu12_75r") = {

15114 
	~"u8g.h
"

15115 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_cu12
[3993] 
U8G_SECTION
(".progmem.u8g_font_cu12") = {

15377 
	~"u8g.h
"

15378 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_curs‹
[5286] 
U8G_SECTION
(".progmem.u8g_font_cursor") = {

15721 
	~"u8g.h
"

15722 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_curs‹r
[492] 
U8G_SECTION
(".progmem.u8g_font_cursorr") = {

15765 
	~"u8g.h
"

15766 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fixed_v0
[1702] 
U8G_SECTION
(".progmem.u8g_font_fixed_v0") = {

15885 
	~"u8g.h
"

15886 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fixed_v0n
[159] 
U8G_SECTION
(".progmem.u8g_font_fixed_v0n") = {

15908 
	~"u8g.h
"

15909 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fixed_v0r
[878] 
U8G_SECTION
(".progmem.u8g_font_fixed_v0r") = {

15976 
	~"u8g.h
"

15977 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_‰ìdoomr10r
[1042] 
U8G_SECTION
(".progmem.u8g_font_freedoomr10r") = {

16055 
	~"u8g.h
"

16056 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_‰ìdoomr25n
[943] 
U8G_SECTION
(".progmem.u8g_font_freedoomr25n") = {

16127 
	~"u8g.h
"

16128 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub11
[3948] 
U8G_SECTION
(".progmem.u8g_font_fub11") = {

16387 
	~"u8g.h
"

16388 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub11n
[266] 
U8G_SECTION
(".progmem.u8g_font_fub11n") = {

16417 
	~"u8g.h
"

16418 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub11r
[1829] 
U8G_SECTION
(".progmem.u8g_font_fub11r") = {

16545 
	~"u8g.h
"

16546 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub14
[5788] 
U8G_SECTION
(".progmem.u8g_font_fub14") = {

16920 
	~"u8g.h
"

16921 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub14n
[436] 
U8G_SECTION
(".progmem.u8g_font_fub14n") = {

16961 
	~"u8g.h
"

16962 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub14r
[2680] 
U8G_SECTION
(".progmem.u8g_font_fub14r") = {

17142 
	~"u8g.h
"

17143 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub17
[6938] 
U8G_SECTION
(".progmem.u8g_font_fub17") = {

17589 
	~"u8g.h
"

17590 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub17n
[512] 
U8G_SECTION
(".progmem.u8g_font_fub17n") = {

17635 
	~"u8g.h
"

17636 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub17r
[3222] 
U8G_SECTION
(".progmem.u8g_font_fub17r") = {

17850 
	~"u8g.h
"

17851 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub20
[8916] 
U8G_SECTION
(".progmem.u8g_font_fub20") = {

18421 
	~"u8g.h
"

18422 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub20n
[583] 
U8G_SECTION
(".progmem.u8g_font_fub20n") = {

18471 
	~"u8g.h
"

18472 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub20r
[4022] 
U8G_SECTION
(".progmem.u8g_font_fub20r") = {

18736 
	~"u8g.h
"

18737 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub25
[12908] 
U8G_SECTION
(".progmem.u8g_font_fub25") = {

19556 
	~"u8g.h
"

19557 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub25n
[957] 
U8G_SECTION
(".progmem.u8g_font_fub25n") = {

19629 
	~"u8g.h
"

19630 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub25r
[5936] 
U8G_SECTION
(".progmem.u8g_font_fub25r") = {

20014 
	~"u8g.h
"

20015 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub30
[16953] 
U8G_SECTION
(".progmem.u8g_font_fub30") = {

21087 
	~"u8g.h
"

21088 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub30n
[1179] 
U8G_SECTION
(".progmem.u8g_font_fub30n") = {

21174 
	~"u8g.h
"

21175 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub30r
[7686] 
U8G_SECTION
(".progmem.u8g_font_fub30r") = {

21668 
	~"u8g.h
"

21669 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub35n
[1667] 
U8G_SECTION
(".progmem.u8g_font_fub35n") = {

21786 
	~"u8g.h
"

21787 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub42n
[2235] 
U8G_SECTION
(".progmem.u8g_font_fub42n") = {

21939 
	~"u8g.h
"

21940 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub49n
[3074] 
U8G_SECTION
(".progmem.u8g_font_fub49n") = {

22145 
	~"u8g.h
"

22146 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur11
[3712] 
U8G_SECTION
(".progmem.u8g_font_fur11") = {

22391 
	~"u8g.h
"

22392 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur11n
[265] 
U8G_SECTION
(".progmem.u8g_font_fur11n") = {

22421 
	~"u8g.h
"

22422 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur11r
[1729] 
U8G_SECTION
(".progmem.u8g_font_fur11r") = {

22543 
	~"u8g.h
"

22544 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur14
[5349] 
U8G_SECTION
(".progmem.u8g_font_fur14") = {

22891 
	~"u8g.h
"

22892 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur14n
[405] 
U8G_SECTION
(".progmem.u8g_font_fur14n") = {

22930 
	~"u8g.h
"

22931 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur14r
[2489] 
U8G_SECTION
(".progmem.u8g_font_fur14r") = {

23099 
	~"u8g.h
"

23100 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur17
[6799] 
U8G_SECTION
(".progmem.u8g_font_fur17") = {

23537 
	~"u8g.h
"

23538 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur17n
[510] 
U8G_SECTION
(".progmem.u8g_font_fur17n") = {

23582 
	~"u8g.h
"

23583 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur17r
[3146] 
U8G_SECTION
(".progmem.u8g_font_fur17r") = {

23792 
	~"u8g.h
"

23793 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur20
[8654] 
U8G_SECTION
(".progmem.u8g_font_fur20") = {

24346 
	~"u8g.h
"

24347 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur20n
[596] 
U8G_SECTION
(".progmem.u8g_font_fur20n") = {

24397 
	~"u8g.h
"

24398 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur20r
[3976] 
U8G_SECTION
(".progmem.u8g_font_fur20r") = {

24659 
	~"u8g.h
"

24660 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur25
[11949] 
U8G_SECTION
(".progmem.u8g_font_fur25") = {

25419 
	~"u8g.h
"

25420 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur25n
[774] 
U8G_SECTION
(".progmem.u8g_font_fur25n") = {

25481 
	~"u8g.h
"

25482 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur25r
[5389] 
U8G_SECTION
(".progmem.u8g_font_fur25r") = {

25831 
	~"u8g.h
"

25832 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur30
[16505] 
U8G_SECTION
(".progmem.u8g_font_fur30") = {

26876 
	~"u8g.h
"

26877 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur30n
[1175] 
U8G_SECTION
(".progmem.u8g_font_fur30n") = {

26963 
	~"u8g.h
"

26964 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur30r
[7380] 
U8G_SECTION
(".progmem.u8g_font_fur30r") = {

27438 
	~"u8g.h
"

27439 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur35n
[1417] 
U8G_SECTION
(".progmem.u8g_font_fur35n") = {

27540 
	~"u8g.h
"

27541 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur42n
[2135] 
U8G_SECTION
(".progmem.u8g_font_fur42n") = {

27687 
	~"u8g.h
"

27688 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur49n
[2643] 
U8G_SECTION
(".progmem.u8g_font_fur49n") = {

27866 
	~"u8g.h
"

27867 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb11
[4313] 
U8G_SECTION
(".progmem.u8g_font_gdb11") = {

28149 
	~"u8g.h
"

28150 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb11n
[263] 
U8G_SECTION
(".progmem.u8g_font_gdb11n") = {

28179 
	~"u8g.h
"

28180 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb11r
[2001] 
U8G_SECTION
(".progmem.u8g_font_gdb11r") = {

28318 
	~"u8g.h
"

28319 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb12
[4626] 
U8G_SECTION
(".progmem.u8g_font_gdb12") = {

28621 
	~"u8g.h
"

28622 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb12n
[286] 
U8G_SECTION
(".progmem.u8g_font_gdb12n") = {

28652 
	~"u8g.h
"

28653 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb12r
[2190] 
U8G_SECTION
(".progmem.u8g_font_gdb12r") = {

28802 
	~"u8g.h
"

28803 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb14
[6044] 
U8G_SECTION
(".progmem.u8g_font_gdb14") = {

29193 
	~"u8g.h
"

29194 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb14n
[448] 
U8G_SECTION
(".progmem.u8g_font_gdb14n") = {

29235 
	~"u8g.h
"

29236 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb14r
[2842] 
U8G_SECTION
(".progmem.u8g_font_gdb14r") = {

29426 
	~"u8g.h
"

29427 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb17
[7600] 
U8G_SECTION
(".progmem.u8g_font_gdb17") = {

29915 
	~"u8g.h
"

29916 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb17n
[542] 
U8G_SECTION
(".progmem.u8g_font_gdb17n") = {

29962 
	~"u8g.h
"

29963 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb17r
[3540] 
U8G_SECTION
(".progmem.u8g_font_gdb17r") = {

30197 
	~"u8g.h
"

30198 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb20
[10077] 
U8G_SECTION
(".progmem.u8g_font_gdb20") = {

30840 
	~"u8g.h
"

30841 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb20n
[624] 
U8G_SECTION
(".progmem.u8g_font_gdb20n") = {

30893 
	~"u8g.h
"

30894 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb20r
[4680] 
U8G_SECTION
(".progmem.u8g_font_gdb20r") = {

31199 
	~"u8g.h
"

31200 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb25
[14643] 
U8G_SECTION
(".progmem.u8g_font_gdb25") = {

32128 
	~"u8g.h
"

32129 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb25n
[960] 
U8G_SECTION
(".progmem.u8g_font_gdb25n") = {

32202 
	~"u8g.h
"

32203 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb25r
[6779] 
U8G_SECTION
(".progmem.u8g_font_gdb25r") = {

32639 
	~"u8g.h
"

32640 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb30
[19508] 
U8G_SECTION
(".progmem.u8g_font_gdb30") = {

33872 
	~"u8g.h
"

33873 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb30n
[1275] 
U8G_SECTION
(".progmem.u8g_font_gdb30n") = {

33965 
	~"u8g.h
"

33966 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb30r
[9112] 
U8G_SECTION
(".progmem.u8g_font_gdb30r") = {

34548 
	~"u8g.h
"

34549 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr10
[3670] 
U8G_SECTION
(".progmem.u8g_font_gdr10") = {

34791 
	~"u8g.h
"

34792 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr10n
[249] 
U8G_SECTION
(".progmem.u8g_font_gdr10n") = {

34820 
	~"u8g.h
"

34821 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr10r
[1723] 
U8G_SECTION
(".progmem.u8g_font_gdr10r") = {

34941 
	~"u8g.h
"

34942 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr11
[3977] 
U8G_SECTION
(".progmem.u8g_font_gdr11") = {

35203 
	~"u8g.h
"

35204 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr11n
[262] 
U8G_SECTION
(".progmem.u8g_font_gdr11n") = {

35233 
	~"u8g.h
"

35234 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr11r
[1868] 
U8G_SECTION
(".progmem.u8g_font_gdr11r") = {

35363 
	~"u8g.h
"

35364 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr12
[4200] 
U8G_SECTION
(".progmem.u8g_font_gdr12") = {

35639 
	~"u8g.h
"

35640 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr12n
[270] 
U8G_SECTION
(".progmem.u8g_font_gdr12n") = {

35669 
	~"u8g.h
"

35670 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr12r
[1992] 
U8G_SECTION
(".progmem.u8g_font_gdr12r") = {

35807 
	~"u8g.h
"

35808 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr14
[5942] 
U8G_SECTION
(".progmem.u8g_font_gdr14") = {

36192 
	~"u8g.h
"

36193 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr14n
[445] 
U8G_SECTION
(".progmem.u8g_font_gdr14n") = {

36233 
	~"u8g.h
"

36234 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr14r
[2791] 
U8G_SECTION
(".progmem.u8g_font_gdr14r") = {

36421 
	~"u8g.h
"

36422 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr17
[7056] 
U8G_SECTION
(".progmem.u8g_font_gdr17") = {

36876 
	~"u8g.h
"

36877 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr17n
[539] 
U8G_SECTION
(".progmem.u8g_font_gdr17n") = {

36923 
	~"u8g.h
"

36924 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr17r
[3380] 
U8G_SECTION
(".progmem.u8g_font_gdr17r") = {

37148 
	~"u8g.h
"

37149 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr20
[9119] 
U8G_SECTION
(".progmem.u8g_font_gdr20") = {

37731 
	~"u8g.h
"

37732 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr20n
[619] 
U8G_SECTION
(".progmem.u8g_font_gdr20n") = {

37783 
	~"u8g.h
"

37784 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr20r
[4232] 
U8G_SECTION
(".progmem.u8g_font_gdr20r") = {

38061 
	~"u8g.h
"

38062 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr25
[13042] 
U8G_SECTION
(".progmem.u8g_font_gdr25") = {

38890 
	~"u8g.h
"

38891 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr25n
[810] 
U8G_SECTION
(".progmem.u8g_font_gdr25n") = {

38954 
	~"u8g.h
"

38955 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr25r
[6239] 
U8G_SECTION
(".progmem.u8g_font_gdr25r") = {

39357 
	~"u8g.h
"

39358 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr30
[18369] 
U8G_SECTION
(".progmem.u8g_font_gdr30") = {

40519 
	~"u8g.h
"

40520 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr30n
[1252] 
U8G_SECTION
(".progmem.u8g_font_gdr30n") = {

40611 
	~"u8g.h
"

40612 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr30r
[8588] 
U8G_SECTION
(".progmem.u8g_font_gdr30r") = {

41161 
	~"u8g.h
"

41162 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr9
[3248] 
U8G_SECTION
(".progmem.u8g_font_gdr9") = {

41378 
	~"u8g.h
"

41379 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr9n
[235] 
U8G_SECTION
(".progmem.u8g_font_gdr9n") = {

41406 
	~"u8g.h
"

41407 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr9r
[1553] 
U8G_SECTION
(".progmem.u8g_font_gdr9r") = {

41517 
	~"u8g.h
"

41518 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB08
[2677] 
U8G_SECTION
(".progmem.u8g_font_helvB08") = {

41698 
	~"u8g.h
"

41699 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB08r
[1287] 
U8G_SECTION
(".progmem.u8g_font_helvB08r") = {

41792 
	~"u8g.h
"

41793 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB10
[3692] 
U8G_SECTION
(".progmem.u8g_font_helvB10") = {

42036 
	~"u8g.h
"

42037 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB10r
[1720] 
U8G_SECTION
(".progmem.u8g_font_helvB10r") = {

42157 
	~"u8g.h
"

42158 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB12
[4077] 
U8G_SECTION
(".progmem.u8g_font_helvB12") = {

42425 
	~"u8g.h
"

42426 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB12r
[1914] 
U8G_SECTION
(".progmem.u8g_font_helvB12r") = {

42558 
	~"u8g.h
"

42559 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB14
[5489] 
U8G_SECTION
(".progmem.u8g_font_helvB14") = {

42915 
	~"u8g.h
"

42916 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB14r
[2548] 
U8G_SECTION
(".progmem.u8g_font_helvB14r") = {

43088 
	~"u8g.h
"

43089 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB18
[7527] 
U8G_SECTION
(".progmem.u8g_font_helvB18") = {

43572 
	~"u8g.h
"

43573 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB18r
[3453] 
U8G_SECTION
(".progmem.u8g_font_helvB18r") = {

43801 
	~"u8g.h
"

43802 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB24
[11554] 
U8G_SECTION
(".progmem.u8g_font_helvB24") = {

44537 
	~"u8g.h
"

44538 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB24n
[720] 
U8G_SECTION
(".progmem.u8g_font_helvB24n") = {

44596 
	~"u8g.h
"

44597 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB24r
[5214] 
U8G_SECTION
(".progmem.u8g_font_helvB24r") = {

44935 
	~"u8g.h
"

44936 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR08
[2687] 
U8G_SECTION
(".progmem.u8g_font_helvR08") = {

45116 
	~"u8g.h
"

45117 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR08r
[1276] 
U8G_SECTION
(".progmem.u8g_font_helvR08r") = {

45209 
	~"u8g.h
"

45210 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR10
[3527] 
U8G_SECTION
(".progmem.u8g_font_helvR10") = {

45443 
	~"u8g.h
"

45444 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR10r
[1648] 
U8G_SECTION
(".progmem.u8g_font_helvR10r") = {

45560 
	~"u8g.h
"

45561 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR12
[4077] 
U8G_SECTION
(".progmem.u8g_font_helvR12") = {

45828 
	~"u8g.h
"

45829 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR12r
[1907] 
U8G_SECTION
(".progmem.u8g_font_helvR12r") = {

45961 
	~"u8g.h
"

45962 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR14
[4920] 
U8G_SECTION
(".progmem.u8g_font_helvR14") = {

46282 
	~"u8g.h
"

46283 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR14r
[2281] 
U8G_SECTION
(".progmem.u8g_font_helvR14r") = {

46438 
	~"u8g.h
"

46439 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR18
[7307] 
U8G_SECTION
(".progmem.u8g_font_helvR18") = {

46908 
	~"u8g.h
"

46909 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR18r
[3381] 
U8G_SECTION
(".progmem.u8g_font_helvR18r") = {

47133 
	~"u8g.h
"

47134 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR24
[10931] 
U8G_SECTION
(".progmem.u8g_font_helvR24") = {

47830 
	~"u8g.h
"

47831 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR24n
[702] 
U8G_SECTION
(".progmem.u8g_font_helvR24n") = {

47887 
	~"u8g.h
"

47888 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR24r
[4992] 
U8G_SECTION
(".progmem.u8g_font_helvR24r") = {

48213 
	~"u8g.h
"

48214 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_luˇsf⁄t_Æã∫©e
[2193] 
U8G_SECTION
(".progmem.u8g_font_lucasfont_alternate") = {

48364 
	~"u8g.h
"

48365 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_luˇsf⁄t_Æã∫©í
[206] 
U8G_SECTION
(".progmem.u8g_font_lucasfont_alternaten") = {

48390 
	~"u8g.h
"

48391 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_luˇsf⁄t_Æã∫©î
[1138] 
U8G_SECTION
(".progmem.u8g_font_lucasfont_alternater") = {

48475 
	~"u8g.h
"

48476 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_m2ic⁄_5
[221] 
U8G_SECTION
(".progmem.u8g_font_m2icon_5") = {

48502 
	~"u8g.h
"

48503 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_m2ic⁄_7
[275] 
U8G_SECTION
(".progmem.u8g_font_m2icon_7") = {

48533 
	~"u8g.h
"

48534 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_m2ic⁄_9
[471] 
U8G_SECTION
(".progmem.u8g_font_m2icon_9") = {

48576 
	~"u8g.h
"

48577 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_mi¸o
[855] 
U8G_SECTION
(".progmem.u8g_font_micro") = {

48643 
	~"u8g.h
"

48644 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB08
[2760] 
U8G_SECTION
(".progmem.u8g_font_ncenB08") = {

48829 
	~"u8g.h
"

48830 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB08r
[1315] 
U8G_SECTION
(".progmem.u8g_font_ncenB08r") = {

48925 
	~"u8g.h
"

48926 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB10
[4003] 
U8G_SECTION
(".progmem.u8g_font_ncenB10") = {

49189 
	~"u8g.h
"

49190 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB10r
[1853] 
U8G_SECTION
(".progmem.u8g_font_ncenB10r") = {

49318 
	~"u8g.h
"

49319 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB12
[4735] 
U8G_SECTION
(".progmem.u8g_font_ncenB12") = {

49627 
	~"u8g.h
"

49628 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB12r
[2194] 
U8G_SECTION
(".progmem.u8g_font_ncenB12r") = {

49778 
	~"u8g.h
"

49779 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB14
[5558] 
U8G_SECTION
(".progmem.u8g_font_ncenB14") = {

50139 
	~"u8g.h
"

50140 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB14r
[2603] 
U8G_SECTION
(".progmem.u8g_font_ncenB14r") = {

50315 
	~"u8g.h
"

50316 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB18
[8114] 
U8G_SECTION
(".progmem.u8g_font_ncenB18") = {

50836 
	~"u8g.h
"

50837 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB18r
[3736] 
U8G_SECTION
(".progmem.u8g_font_ncenB18r") = {

51083 
	~"u8g.h
"

51084 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB24
[12964] 
U8G_SECTION
(".progmem.u8g_font_ncenB24") = {

51907 
	~"u8g.h
"

51908 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB24n
[846] 
U8G_SECTION
(".progmem.u8g_font_ncenB24n") = {

51973 
	~"u8g.h
"

51974 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB24r
[5937] 
U8G_SECTION
(".progmem.u8g_font_ncenB24r") = {

52358 
	~"u8g.h
"

52359 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR08
[2642] 
U8G_SECTION
(".progmem.u8g_font_ncenR08") = {

52537 
	~"u8g.h
"

52538 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR08r
[1266] 
U8G_SECTION
(".progmem.u8g_font_ncenR08r") = {

52630 
	~"u8g.h
"

52631 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR10
[3813] 
U8G_SECTION
(".progmem.u8g_font_ncenR10") = {

52882 
	~"u8g.h
"

52883 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR10r
[1781] 
U8G_SECTION
(".progmem.u8g_font_ncenR10r") = {

53007 
	~"u8g.h
"

53008 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR12
[4247] 
U8G_SECTION
(".progmem.u8g_font_ncenR12") = {

53286 
	~"u8g.h
"

53287 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR12r
[1976] 
U8G_SECTION
(".progmem.u8g_font_ncenR12r") = {

53423 
	~"u8g.h
"

53424 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR14
[5319] 
U8G_SECTION
(".progmem.u8g_font_ncenR14") = {

53769 
	~"u8g.h
"

53770 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR14r
[2534] 
U8G_SECTION
(".progmem.u8g_font_ncenR14r") = {

53941 
	~"u8g.h
"

53942 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR18
[7488] 
U8G_SECTION
(".progmem.u8g_font_ncenR18") = {

54423 
	~"u8g.h
"

54424 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR18r
[3477] 
U8G_SECTION
(".progmem.u8g_font_ncenR18r") = {

54654 
	~"u8g.h
"

54655 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR24
[11729] 
U8G_SECTION
(".progmem.u8g_font_ncenR24") = {

55401 
	~"u8g.h
"

55402 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR24n
[722] 
U8G_SECTION
(".progmem.u8g_font_ncenR24n") = {

55460 
	~"u8g.h
"

55461 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR24r
[5367] 
U8G_SECTION
(".progmem.u8g_font_ncenR24r") = {

55809 
	~"u8g.h
"

55810 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_‹gv01
[1535] 
U8G_SECTION
(".progmem.u8g_font_orgv01") = {

55918 
	~"u8g.h
"

55919 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_‹gv01n
[130] 
U8G_SECTION
(".progmem.u8g_font_orgv01n") = {

55940 
	~"u8g.h
"

55941 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_‹gv01r
[719] 
U8G_SECTION
(".progmem.u8g_font_orgv01r") = {

55998 
	~"u8g.h
"

55999 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb18
[7637] 
U8G_SECTION
(".progmem.u8g_font_osb18") = {

56489 
	~"u8g.h
"

56490 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb18n
[600] 
U8G_SECTION
(".progmem.u8g_font_osb18n") = {

56540 
	~"u8g.h
"

56541 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb18r
[3611] 
U8G_SECTION
(".progmem.u8g_font_osb18r") = {

56779 
	~"u8g.h
"

56780 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb21
[9612] 
U8G_SECTION
(".progmem.u8g_font_osb21") = {

57393 
	~"u8g.h
"

57394 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb21n
[703] 
U8G_SECTION
(".progmem.u8g_font_osb21n") = {

57450 
	~"u8g.h
"

57451 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb21r
[4521] 
U8G_SECTION
(".progmem.u8g_font_osb21r") = {

57746 
	~"u8g.h
"

57747 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb26
[12640] 
U8G_SECTION
(".progmem.u8g_font_osb26") = {

58550 
	~"u8g.h
"

58551 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb26n
[880] 
U8G_SECTION
(".progmem.u8g_font_osb26n") = {

58619 
	~"u8g.h
"

58620 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb26r
[5950] 
U8G_SECTION
(".progmem.u8g_font_osb26r") = {

59004 
	~"u8g.h
"

59005 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb29
[15818] 
U8G_SECTION
(".progmem.u8g_font_osb29") = {

60006 
	~"u8g.h
"

60007 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb29n
[1232] 
U8G_SECTION
(".progmem.u8g_font_osb29n") = {

60097 
	~"u8g.h
"

60098 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb29r
[7481] 
U8G_SECTION
(".progmem.u8g_font_osb29r") = {

60578 
	~"u8g.h
"

60579 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb35
[22095] 
U8G_SECTION
(".progmem.u8g_font_osb35") = {

61972 
	~"u8g.h
"

61973 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb35n
[1539] 
U8G_SECTION
(".progmem.u8g_font_osb35n") = {

62082 
	~"u8g.h
"

62083 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb35r
[10245] 
U8G_SECTION
(".progmem.u8g_font_osb35r") = {

62736 
	~"u8g.h
"

62737 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§18
[7816] 
U8G_SECTION
(".progmem.u8g_font_osr18") = {

63238 
	~"u8g.h
"

63239 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§18n
[595] 
U8G_SECTION
(".progmem.u8g_font_osr18n") = {

63289 
	~"u8g.h
"

63290 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§18r
[3683] 
U8G_SECTION
(".progmem.u8g_font_osr18r") = {

63533 
	~"u8g.h
"

63534 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§21
[9530] 
U8G_SECTION
(".progmem.u8g_font_osr21") = {

64142 
	~"u8g.h
"

64143 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§21n
[702] 
U8G_SECTION
(".progmem.u8g_font_osr21n") = {

64199 
	~"u8g.h
"

64200 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§21r
[4396] 
U8G_SECTION
(".progmem.u8g_font_osr21r") = {

64487 
	~"u8g.h
"

64488 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§26
[13186] 
U8G_SECTION
(".progmem.u8g_font_osr26") = {

65325 
	~"u8g.h
"

65326 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§26n
[932] 
U8G_SECTION
(".progmem.u8g_font_osr26n") = {

65397 
	~"u8g.h
"

65398 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§26r
[6049] 
U8G_SECTION
(".progmem.u8g_font_osr26r") = {

65789 
	~"u8g.h
"

65790 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§29
[16232] 
U8G_SECTION
(".progmem.u8g_font_osr29") = {

66817 
	~"u8g.h
"

66818 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§29n
[1201] 
U8G_SECTION
(".progmem.u8g_font_osr29n") = {

66906 
	~"u8g.h
"

66907 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§29r
[7573] 
U8G_SECTION
(".progmem.u8g_font_osr29r") = {

67393 
	~"u8g.h
"

67394 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§35
[22370] 
U8G_SECTION
(".progmem.u8g_font_osr35") = {

68805 
	~"u8g.h
"

68806 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§35n
[1560] 
U8G_SECTION
(".progmem.u8g_font_osr35n") = {

68916 
	~"u8g.h
"

68917 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§35r
[10371] 
U8G_SECTION
(".progmem.u8g_font_osr35r") = {

69578 
	~"u8g.h
"

69579 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_p01ty≥
[1163] 
U8G_SECTION
(".progmem.u8g_font_p01type") = {

69664 
	~"u8g.h
"

69665 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_p01ty≥n
[177] 
U8G_SECTION
(".progmem.u8g_font_p01typen") = {

69689 
	~"u8g.h
"

69690 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_p01ty≥r
[938] 
U8G_SECTION
(".progmem.u8g_font_p01typer") = {

69761 
	~"u8g.h
"

69762 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_pixñÀ_mi¸o
[1140] 
U8G_SECTION
(".progmem.u8g_font_pixelle_micro") = {

69846 
	~"u8g.h
"

69847 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_pixñÀ_mi¸⁄
[180] 
U8G_SECTION
(".progmem.u8g_font_pixelle_micron") = {

69871 
	~"u8g.h
"

69872 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_pixñÀ_mi¸‹
[1012] 
U8G_SECTION
(".progmem.u8g_font_pixelle_micror") = {

69948 
	~"u8g.h
"

69949 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_robŸ_de_núo
[1376] 
U8G_SECTION
(".progmem.u8g_font_robot_de_niro") = {

70048 
	~"u8g.h
"

70049 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_robŸ_de_nú⁄
[178] 
U8G_SECTION
(".progmem.u8g_font_robot_de_niron") = {

70073 
	~"u8g.h
"

70074 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_robŸ_de_nú‹
[1041] 
U8G_SECTION
(".progmem.u8g_font_robot_de_niror") = {

70152 
	~"u8g.h
"

70153 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb08
[2612] 
U8G_SECTION
(".progmem.u8g_font_symb08") = {

70329 
	~"u8g.h
"

70330 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb08r
[1211] 
U8G_SECTION
(".progmem.u8g_font_symb08r") = {

70418 
	~"u8g.h
"

70419 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb10
[3433] 
U8G_SECTION
(".progmem.u8g_font_symb10") = {

70646 
	~"u8g.h
"

70647 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb10r
[1633] 
U8G_SECTION
(".progmem.u8g_font_symb10r") = {

70762 
	~"u8g.h
"

70763 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb12
[4136] 
U8G_SECTION
(".progmem.u8g_font_symb12") = {

71034 
	~"u8g.h
"

71035 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb12r
[1985] 
U8G_SECTION
(".progmem.u8g_font_symb12r") = {

71172 
	~"u8g.h
"

71173 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb14
[4665] 
U8G_SECTION
(".progmem.u8g_font_symb14") = {

71477 
	~"u8g.h
"

71478 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb14r
[2261] 
U8G_SECTION
(".progmem.u8g_font_symb14r") = {

71632 
	~"u8g.h
"

71633 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb18
[6604] 
U8G_SECTION
(".progmem.u8g_font_symb18") = {

72058 
	~"u8g.h
"

72059 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb18r
[3303] 
U8G_SECTION
(".progmem.u8g_font_symb18r") = {

72278 
	~"u8g.h
"

72279 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb24
[10727] 
U8G_SECTION
(".progmem.u8g_font_symb24") = {

72962 
	~"u8g.h
"

72963 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb24r
[5335] 
U8G_SECTION
(".progmem.u8g_font_symb24r") = {

73309 
	~"u8g.h
"

73310 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB08
[2551] 
U8G_SECTION
(".progmem.u8g_font_timB08") = {

73482 
	~"u8g.h
"

73483 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB08r
[1221] 
U8G_SECTION
(".progmem.u8g_font_timB08r") = {

73572 
	~"u8g.h
"

73573 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB10
[3539] 
U8G_SECTION
(".progmem.u8g_font_timB10") = {

73807 
	~"u8g.h
"

73808 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB10r
[1632] 
U8G_SECTION
(".progmem.u8g_font_timB10r") = {

73923 
	~"u8g.h
"

73924 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB12
[3887] 
U8G_SECTION
(".progmem.u8g_font_timB12") = {

74179 
	~"u8g.h
"

74180 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB12r
[1834] 
U8G_SECTION
(".progmem.u8g_font_timB12r") = {

74307 
	~"u8g.h
"

74308 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB14
[4851] 
U8G_SECTION
(".progmem.u8g_font_timB14") = {

74624 
	~"u8g.h
"

74625 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB14r
[2295] 
U8G_SECTION
(".progmem.u8g_font_timB14r") = {

74781 
	~"u8g.h
"

74782 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB18
[7223] 
U8G_SECTION
(".progmem.u8g_font_timB18") = {

75246 
	~"u8g.h
"

75247 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB18r
[3355] 
U8G_SECTION
(".progmem.u8g_font_timB18r") = {

75469 
	~"u8g.h
"

75470 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB24
[10820] 
U8G_SECTION
(".progmem.u8g_font_timB24") = {

76159 
	~"u8g.h
"

76160 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB24n
[701] 
U8G_SECTION
(".progmem.u8g_font_timB24n") = {

76216 
	~"u8g.h
"

76217 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB24r
[5003] 
U8G_SECTION
(".progmem.u8g_font_timB24r") = {

76542 
	~"u8g.h
"

76543 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR08
[2512] 
U8G_SECTION
(".progmem.u8g_font_timR08") = {

76713 
	~"u8g.h
"

76714 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR08r
[1198] 
U8G_SECTION
(".progmem.u8g_font_timR08r") = {

76801 
	~"u8g.h
"

76802 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR10
[3359] 
U8G_SECTION
(".progmem.u8g_font_timR10") = {

77024 
	~"u8g.h
"

77025 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR10r
[1571] 
U8G_SECTION
(".progmem.u8g_font_timR10r") = {

77136 
	~"u8g.h
"

77137 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR12
[3905] 
U8G_SECTION
(".progmem.u8g_font_timR12") = {

77394 
	~"u8g.h
"

77395 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR12r
[1784] 
U8G_SECTION
(".progmem.u8g_font_timR12r") = {

77519 
	~"u8g.h
"

77520 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR14
[4577] 
U8G_SECTION
(".progmem.u8g_font_timR14") = {

77819 
	~"u8g.h
"

77820 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR14r
[2156] 
U8G_SECTION
(".progmem.u8g_font_timR14r") = {

77967 
	~"u8g.h
"

77968 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR18
[6850] 
U8G_SECTION
(".progmem.u8g_font_timR18") = {

78409 
	~"u8g.h
"

78410 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR18r
[3208] 
U8G_SECTION
(".progmem.u8g_font_timR18r") = {

78623 
	~"u8g.h
"

78624 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR24
[10419] 
U8G_SECTION
(".progmem.u8g_font_timR24") = {

79288 
	~"u8g.h
"

79289 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR24n
[696] 
U8G_SECTION
(".progmem.u8g_font_timR24n") = {

79345 
	~"u8g.h
"

79346 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR24r
[4764] 
U8G_SECTION
(".progmem.u8g_font_timR24r") = {

79656 
	~"u8g.h
"

79657 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_çssb
[2656] 
U8G_SECTION
(".progmem.u8g_font_tpssb") = {

79836 
	~"u8g.h
"

79837 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_çssbn
[230] 
U8G_SECTION
(".progmem.u8g_font_tpssbn") = {

79864 
	~"u8g.h
"

79865 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_çssbr
[1346] 
U8G_SECTION
(".progmem.u8g_font_tpssbr") = {

79962 
	~"u8g.h
"

79963 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_çss
[2605] 
U8G_SECTION
(".progmem.u8g_font_tpss") = {

80138 
	~"u8g.h
"

80139 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_çs¢
[228] 
U8G_SECTION
(".progmem.u8g_font_tpssn") = {

80166 
	~"u8g.h
"

80167 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_çs§
[1317] 
U8G_SECTION
(".progmem.u8g_font_tpssr") = {

80262 
	~"u8g.h
"

80263 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_åixñ_squ¨e
[1236] 
U8G_SECTION
(".progmem.u8g_font_trixel_square") = {

80353 
	~"u8g.h
"

80354 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_åixñ_squ¨í
[178] 
U8G_SECTION
(".progmem.u8g_font_trixel_squaren") = {

80378 
	~"u8g.h
"

80379 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_åixñ_squ¨î
[994] 
U8G_SECTION
(".progmem.u8g_font_trixel_squarer") = {

80454 
	~"u8g.h
"

80455 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_u8glib_4
[1660] 
U8G_SECTION
(".progmem.u8g_font_u8glib_4") = {

80571 
	~"u8g.h
"

80572 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_u8glib_4r
[664] 
U8G_SECTION
(".progmem.u8g_font_u8glib_4r") = {

80626 
	~"u8g.h
"

80627 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_0_8
[4239] 
U8G_SECTION
(".progmem.u8g_font_unifont_0_8") = {

80904 
	~"u8g.h
"

80905 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_12_13
[3934] 
U8G_SECTION
(".progmem.u8g_font_unifont_12_13") = {

81163 
	~"u8g.h
"

81164 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_18_19
[6498] 
U8G_SECTION
(".progmem.u8g_font_unifont_18_19") = {

81583 
	~"u8g.h
"

81584 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_2_3
[4628] 
U8G_SECTION
(".progmem.u8g_font_unifont_2_3") = {

81886 
	~"u8g.h
"

81887 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_4_5
[3783] 
U8G_SECTION
(".progmem.u8g_font_unifont_4_5") = {

82136 
	~"u8g.h
"

82137 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_67_75
[3556] 
U8G_SECTION
(".progmem.u8g_font_unifont_67_75") = {

82372 
	~"u8g.h
"

82373 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_72_73
[7240] 
U8G_SECTION
(".progmem.u8g_font_unifont_72_73") = {

82838 
	~"u8g.h
"

82839 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_75r
[580] 
U8G_SECTION
(".progmem.u8g_font_unifont_75r") = {

82888 
	~"u8g.h
"

82889 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_76
[2532] 
U8G_SECTION
(".progmem.u8g_font_unifont_76") = {

83060 
	~"u8g.h
"

83061 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_77
[1587] 
U8G_SECTION
(".progmem.u8g_font_unifont_77") = {

83173 
	~"u8g.h
"

83174 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_78_79
[6975] 
U8G_SECTION
(".progmem.u8g_font_unifont_78_79") = {

83622 
	~"u8g.h
"

83623 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_86
[1876] 
U8G_SECTION
(".progmem.u8g_font_unifont_86") = {

83753 
	~"u8g.h
"

83754 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_8_9
[4272] 
U8G_SECTION
(".progmem.u8g_font_unifont_8_9") = {

84034 
	~"u8g.h
"

84035 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t
[5516] 
U8G_SECTION
(".progmem.u8g_font_unifont") = {

84392 
	~"u8g.h
"

84393 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄å
[1483] 
U8G_SECTION
(".progmem.u8g_font_unifontr") = {

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_line.c

36 
	~"u8g.h
"

38 
	$u8g_DøwLöe
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x1
, u8g_uöt_à
y1
, u8g_uöt_à
x2
, u8g_uöt_à
y2
)

40 
u8g_uöt_t
 
tmp
;

41 
u8g_uöt_t
 
x
,
y
;

42 
u8g_uöt_t
 
dx
, 
dy
;

43 
u8g_öt_t
 
îr
;

44 
u8g_öt_t
 
y°ï
;

46 
uöt8_t
 
sw≠xy
 = 0;

50 i‡–
x1
 > 
x2
 ) 
dx
 = x1-x2; dx = x2-x1;

51 i‡–
y1
 > 
y2
 ) 
dy
 = y1-y2; dy = y2-y1;

53 i‡–
dy
 > 
dx
 )

55 
sw≠xy
 = 1;

56 
tmp
 = 
dx
; dx =
dy
; dy =Åmp;

57 
tmp
 = 
x1
; x1 =
y1
; y1 =Åmp;

58 
tmp
 = 
x2
; x2 =
y2
; y2 =Åmp;

60 i‡–
x1
 > 
x2
 )

62 
tmp
 = 
x1
; x1 =
x2
; x2 =Åmp;

63 
tmp
 = 
y1
; y1 =
y2
; y2 =Åmp;

65 
îr
 = 
dx
 >> 1;

66 i‡–
y2
 > 
y1
 ) 
y°ï
 = 1; ystep = -1;

67 
y
 = 
y1
;

68  
x
 = 
x1
; x <
x2
; x++ )

70 i‡–
sw≠xy
 == 0 )

71 
	`u8g_DøwPixñ
(
u8g
, 
x
, 
y
);

73 
	`u8g_DøwPixñ
(
u8g
, 
y
, 
x
);

74 
îr
 -(
uöt8_t
)
dy
;

75 i‡–
îr
 < 0 )

77 
y
 +(
u8g_uöt_t
)
y°ï
;

78 
îr
 +(
u8g_uöt_t
)
dx
;

81 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_ll_api.c

39 
	~<°ddef.h
>

40 
	~"u8g.h
"

42 
uöt8_t
 
	$u8g_ˇŒ_dev_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

44  
dev
->
	`dev_‚
(
u8g
, dev, 
msg
, 
¨g
);

45 
	}
}

49 
uöt8_t
 
	$u8g_InôLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

51 
uöt8_t
 
r
;

52 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_BACKUP_ENV
);

53 
r
 = 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_INIT
, 
NULL
);

54 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_BACKUP_U8G
);

55 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_RESTORE_ENV
);

56  
r
;

57 
	}
}

59 
	$u8g_Fú°PageLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

61 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_BACKUP_ENV
);

62 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_RESTORE_U8G
);

63 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_PAGE_FIRST
, 
NULL
);

64 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_GET_PAGE_BOX
, &(u8g->
cuºít_∑ge
));

65 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_RESTORE_ENV
);

66 
	}
}

68 
uöt8_t
 
	$u8g_NextPageLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

70 
uöt8_t
 
r
;

71 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_BACKUP_ENV
);

72 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_RESTORE_U8G
);

73 
r
 = 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_PAGE_NEXT
, 
NULL
);

74 i‡–
r
 != 0 )

76 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_GET_PAGE_BOX
, &(u8g->
cuºít_∑ge
));

78 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_RESTORE_ENV
);

79  
r
;

80 
	}
}

82 
uöt8_t
 
	$u8g_SëC⁄åa°LL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
c⁄åa°
)

84  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_CONTRAST
, &
c⁄åa°
);

85 
	}
}

87 
	$u8g_DøwPixñLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
)

89 
u8g_dev_¨g_pixñ_t
 *
¨g
 = &(
u8g
->
¨g_pixñ
);

90 
¨g
->
x
 = x;

91 
¨g
->
y
 = y;

92 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_SET_PIXEL
, 
¨g
);

93 
	}
}

95 
	$u8g_Døw8PixñLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
pixñ
)

97 
u8g_dev_¨g_pixñ_t
 *
¨g
 = &(
u8g
->
¨g_pixñ
);

98 
¨g
->
x
 = x;

99 
¨g
->
y
 = y;

100 
¨g
->
dú
 = dir;

101 
¨g
->
pixñ
 =Öixel;

102 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_SET_8PIXEL
, 
¨g
);

103 
	}
}

105 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


106 
uöt8_t
 
	$u8g_IsBBXI¡î£˘i⁄LL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
)

108  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_IS_BBX_INTERSECTION
, &
¨g
);

109 
	}
}

114 
u8g_uöt_t
 
	$u8g_GëWidthLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

116 
u8g_uöt_t
 
r
;

117 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_GET_WIDTH
, &
r
);

118  
r
;

119 
	}
}

121 
u8g_uöt_t
 
	$u8g_GëHeightLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

123 
u8g_uöt_t
 
r
;

124 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_GET_HEIGHT
, &
r
);

125  
r
;

126 
	}
}

128 
u8g_uöt_t
 
	$u8g_GëModeLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

130  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_GET_MODE
, 
NULL
);

131 
	}
}

137 
	$u8g_Upd©eDimísi⁄
(
u8g_t
 *
u8g
)

139 
u8g
->
width
 = 
	`u8g_GëWidthLL
(u8g, u8g->
dev
);

140 
u8g
->
height
 = 
	`u8g_GëHeightLL
(u8g, u8g->
dev
);

141 
u8g
->
mode
 = 
	`u8g_GëModeLL
(u8g, u8g->
dev
);

143 
	`u8g_ˇŒ_dev_‚
(
u8g
, u8g->
dev
, 
U8G_DEV_MSG_GET_PAGE_BOX
, &(u8g->
cuºít_∑ge
));

144 
	}
}

146 
	$u8g_öô_d©a
(
u8g_t
 *
u8g
)

148 
uöt8_t
 
i
;

149 
u8g
->
f⁄t
 = 
NULL
;

150 
u8g
->
curs‹_f⁄t
 = 
NULL
;

151 
u8g
->
curs‹_bg_cﬁ‹
 = 0;

152 
u8g
->
curs‹_fg_cﬁ‹
 = 1;

153 
u8g
->
curs‹_ícodög
 = 34;

154 
u8g
->
curs‹_‚
 = (
u8g_døw_curs‹_‚
)0;

156  
i
 = 0; i < 
U8G_PIN_LIST_LEN
; i++ )

157 
u8g
->
pö_li°
[
i
] = 
U8G_PIN_NONE
;

159 
	`u8g_SëCﬁ‹Index
(
u8g
, 1);

161 
	`u8g_SëF⁄tPosBa£löe
(
u8g
);

163 
u8g
->
f⁄t_height_mode
 = 
U8G_FONT_HEIGHT_MODE_XTEXT
;

164 
u8g
->
f⁄t_ªf_as˚¡
 = 0;

165 
u8g
->
f⁄t_ªf_des˚¡
 = 0;

166 
u8g
->
f⁄t_löe_•acög_Á˘‹
 = 64;

167 
u8g
->
löe_•acög
 = 0;

169 
u8g
->
°©e_cb
 = 
u8g_°©e_dummy_cb
;

171 
	}
}

173 
uöt8_t
 
	$u8g_Begö
(
u8g_t
 *
u8g
)

176 i‡–
	`u8g_InôLL
(
u8g
, u8g->
dev
) == 0 )

179 
	`u8g_Upd©eDimísi⁄
(
u8g
);

181 
	}
}

183 
uöt8_t
 
	$u8g_Inô
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

185 
	`u8g_öô_d©a
(
u8g
);

186 
u8g
->
dev
 = dev;

192  
	`u8g_Begö
(
u8g
);

193 
	}
}

195 
uöt8_t
 
	$u8g_InôSPI
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
)

199 
	`u8g_öô_d©a
(
u8g
);

200 
u8g
->
dev
 = dev;

203 
u8g
->
pö_li°
[
U8G_PI_SCK
] = 
sck
;

204 
u8g
->
pö_li°
[
U8G_PI_MOSI
] = 
mosi
;

205 
u8g
->
pö_li°
[
U8G_PI_CS
] = 
cs
;

206 
u8g
->
pö_li°
[
U8G_PI_A0
] = 
a0
;

207 
u8g
->
pö_li°
[
U8G_PI_RESET
] = 
ª£t
;

213  
	`u8g_Begö
(
u8g
);

214 
	}
}

216 
uöt8_t
 
	$u8g_InôHWSPI
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
)

219 
	`u8g_öô_d©a
(
u8g
);

220 
u8g
->
dev
 = dev;

224 
u8g
->
pö_li°
[
U8G_PI_CS
] = 
cs
;

225 
u8g
->
pö_li°
[
U8G_PI_A0
] = 
a0
;

226 
u8g
->
pö_li°
[
U8G_PI_RESET
] = 
ª£t
;

228  
	`u8g_Begö
(
u8g
);

229 
	}
}

231 
uöt8_t
 
	$u8g_InôI2C
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
›ti⁄s
)

234 
	`u8g_öô_d©a
(
u8g
);

235 
u8g
->
dev
 = dev;

237 
u8g
->
pö_li°
[
U8G_PI_I2C_OPTION
] = 
›ti⁄s
;

239  
	`u8g_Begö
(
u8g
);

240 
	}
}

243 
uöt8_t
 
	$u8g_Inô8BôFixedP‹t
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
í
, uöt8_à
cs
, uöt8_à
di
, uöt8_à
rw
, uöt8_à
ª£t
)

247 
	`u8g_öô_d©a
(
u8g
);

248 
u8g
->
dev
 = dev;

252 
u8g
->
pö_li°
[
U8G_PI_EN
] = 
í
;

253 
u8g
->
pö_li°
[
U8G_PI_CS
] = 
cs
;

254 
u8g
->
pö_li°
[
U8G_PI_DI
] = 
di
;

255 
u8g
->
pö_li°
[
U8G_PI_RW
] = 
rw
;

256 
u8g
->
pö_li°
[
U8G_PI_RESET
] = 
ª£t
;

258  
	`u8g_Begö
(
u8g
);

259 
	}
}

261 
uöt8_t
 
	$u8g_Inô8Bô
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

262 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
, uöt8_à
ª£t
)

266 
	`u8g_öô_d©a
(
u8g
);

267 
u8g
->
dev
 = dev;

271 
u8g
->
pö_li°
[
U8G_PI_D0
] = 
d0
;

272 
u8g
->
pö_li°
[
U8G_PI_D1
] = 
d1
;

273 
u8g
->
pö_li°
[
U8G_PI_D2
] = 
d2
;

274 
u8g
->
pö_li°
[
U8G_PI_D3
] = 
d3
;

275 
u8g
->
pö_li°
[
U8G_PI_D4
] = 
d4
;

276 
u8g
->
pö_li°
[
U8G_PI_D5
] = 
d5
;

277 
u8g
->
pö_li°
[
U8G_PI_D6
] = 
d6
;

278 
u8g
->
pö_li°
[
U8G_PI_D7
] = 
d7
;

280 
u8g
->
pö_li°
[
U8G_PI_EN
] = 
í
;

281 
u8g
->
pö_li°
[
U8G_PI_CS1
] = 
cs1
;

282 
u8g
->
pö_li°
[
U8G_PI_CS2
] = 
cs2
;

283 
u8g
->
pö_li°
[
U8G_PI_DI
] = 
di
;

284 
u8g
->
pö_li°
[
U8G_PI_RW
] = 
rw
;

285 
u8g
->
pö_li°
[
U8G_PI_RESET
] = 
ª£t
;

287  
	`u8g_Begö
(
u8g
);

288 
	}
}

312 
uöt8_t
 
	$u8g_InôRW8Bô
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

313 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
wr
, uöt8_à
rd
, uöt8_à
ª£t
)

317 
	`u8g_öô_d©a
(
u8g
);

318 
u8g
->
dev
 = dev;

322 
u8g
->
pö_li°
[
U8G_PI_D0
] = 
d0
;

323 
u8g
->
pö_li°
[
U8G_PI_D1
] = 
d1
;

324 
u8g
->
pö_li°
[
U8G_PI_D2
] = 
d2
;

325 
u8g
->
pö_li°
[
U8G_PI_D3
] = 
d3
;

326 
u8g
->
pö_li°
[
U8G_PI_D4
] = 
d4
;

327 
u8g
->
pö_li°
[
U8G_PI_D5
] = 
d5
;

328 
u8g
->
pö_li°
[
U8G_PI_D6
] = 
d6
;

329 
u8g
->
pö_li°
[
U8G_PI_D7
] = 
d7
;

331 
u8g
->
pö_li°
[
U8G_PI_CS
] = 
cs
;

332 
u8g
->
pö_li°
[
U8G_PI_A0
] = 
a0
;

333 
u8g
->
pö_li°
[
U8G_PI_WR
] = 
wr
;

334 
u8g
->
pö_li°
[
U8G_PI_RD
] = 
rd
;

335 
u8g
->
pö_li°
[
U8G_PI_RESET
] = 
ª£t
;

337  
	`u8g_Begö
(
u8g
);

338 
	}
}

340 
	$u8g_Fú°Page
(
u8g_t
 *
u8g
)

342 
	`u8g_Fú°PageLL
(
u8g
, u8g->
dev
);

343 
	}
}

345 
uöt8_t
 
	$u8g_NextPage
(
u8g_t
 *
u8g
)

347 i‡–
u8g
->
curs‹_‚
 !(
u8g_døw_curs‹_‚
)0 )

349 
u8g
->
	`curs‹_‚
(u8g);

351  
	`u8g_NextPageLL
(
u8g
, u8g->
dev
);

352 
	}
}

354 
uöt8_t
 
	$u8g_SëC⁄åa°
(
u8g_t
 *
u8g
, 
uöt8_t
 
c⁄åa°
)

356  
	`u8g_SëC⁄åa°LL
(
u8g
, u8g->
dev
, 
c⁄åa°
);

357 
	}
}

359 
	$u8g_SÀïOn
(
u8g_t
 *
u8g
)

361 
	`u8g_ˇŒ_dev_‚
(
u8g
, u8g->
dev
, 
U8G_DEV_MSG_SLEEP_ON
, 
NULL
);

362 
	}
}

364 
	$u8g_SÀïOff
(
u8g_t
 *
u8g
)

366 
	`u8g_ˇŒ_dev_‚
(
u8g
, u8g->
dev
, 
U8G_DEV_MSG_SLEEP_OFF
, 
NULL
);

367 
	}
}

370 
	$u8g_DøwPixñ
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
)

372 
	`u8g_DøwPixñLL
(
u8g
, u8g->
dev
, 
x
, 
y
);

373 
	}
}

375 
	$u8g_Døw8Pixñ
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
pixñ
)

377 
	`u8g_Døw8PixñLL
(
u8g
, u8g->
dev
, 
x
, 
y
, 
dú
, 
pixñ
);

378 
	}
}

381 #ifde‡
OBSOLETE_CODE


382 
uöt8_t
 
	$u8g_IsBBXI¡î£˘i⁄
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
)

385 
u8g_dev_¨g_bbx_t
 
¨g
;

386 
¨g
.
x
 = x;

387 
¨g
.
y
 = y;

388 
¨g
.
w
 = w;

389 
¨g
.
h
 = h;

390  
	`u8g_is_box_bbx_öãr£˘i⁄
(&(
u8g
->
cuºít_∑ge
), &
¨g
);

394 
	}
}

397 
	$u8g_SëCﬁ‹Index
(
u8g_t
 *
u8g
, 
uöt8_t
 
idx
)

399 
u8g
->
¨g_pixñ
.
cﬁ‹
 = 
idx
;

401 
	}
}

403 
uöt8_t
 
	$u8g_GëCﬁ‹Index
(
u8g_t
 *
u8g
)

405  
u8g
->
¨g_pixñ
.
cﬁ‹
;

406 
	}
}

408 
uöt8_t
 
	$u8g_GëDeÁu…F‹egroundCﬁ‹
(
u8g_t
 *
u8g
)

410 
uöt8_t
 
mode
;

411 
mode
 = 
	`u8g_GëMode
(
u8g
);

412 i‡–
mode
 =
U8G_MODE_R3G3B2
 )

414 i‡–
	`u8g_GëMode
(
u8g
Ë=
U8G_MODE_GRAY2BIT
 )

419 
	}
}

421 
	$u8g_SëDeÁu…F‹egroundCﬁ‹
(
u8g_t
 *
u8g
)

423 
	`u8g_SëCﬁ‹Index
(
u8g
, 
	`u8g_GëDeÁu…F‹egroundCﬁ‹
(u8g));

424 
	}
}

426 
uöt8_t
 
	$u8g_GëDeÁu…BackgroundCﬁ‹
(
u8g_t
 *
u8g
)

429 
	}
}

431 
	$u8g_SëDeÁu…BackgroundCﬁ‹
(
u8g_t
 *
u8g
)

433 
	`u8g_SëCﬁ‹Index
(
u8g
, 
	`u8g_GëDeÁu…BackgroundCﬁ‹
(u8g));

434 
	}
}

436 
uöt8_t
 
	$u8g_GëDeÁu…MidCﬁ‹
(
u8g_t
 *
u8g
)

438 
uöt8_t
 
mode
;

439 
mode
 = 
	`u8g_GëMode
(
u8g
);

440 i‡–
mode
 =
U8G_MODE_R3G3B2
 )

442 i‡–
	`u8g_GëMode
(
u8g
Ë=
U8G_MODE_GRAY2BIT
 )

447 
	}
}

449 
	$u8g_SëDeÁu…MidCﬁ‹
(
u8g_t
 *
u8g
)

451 
	`u8g_SëCﬁ‹Index
(
u8g
, 
	`u8g_GëDeÁu…MidCﬁ‹
(u8g));

452 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_page.c

39 
	~"u8g.h
"

45 
	$u8g_∑ge_Inô
(
u8g_∑ge_t
 *
p
, 
u8g_uöt_t
 
∑ge_height
, u8g_uöt_à
tŸÆ_height
 )

47 
p
->
∑ge_height
 =Öage_height;

48 
p
->
tŸÆ_height
 =Åotal_height;

49 
p
->
∑ge
 = 0;

50 
	`u8g_∑ge_Fú°
(
p
);

51 
	}
}

53 
	$u8g_∑ge_Fú°
(
u8g_∑ge_t
 *
p
)

55 
p
->
∑ge_y0
 = 0;

56 
p
->
∑ge_y1
 =Ö->
∑ge_height
;

57 
p
->
∑ge_y1
--;

58 
p
->
∑ge
 = 0;

59 
	}
}

61 
uöt8_t
 
	$u8g_∑ge_Next
(
u8g_∑ge_t
 * 
p
)

63 
u8g_uöt_t
 
y1
;

64 
p
->
∑ge_y0
 +p->
∑ge_height
;

65 i‡–
p
->
∑ge_y0
 >p->
tŸÆ_height
 )

67 
p
->
∑ge
++;

68 
y1
 = 
p
->
∑ge_y1
;

69 
y1
 +
p
->
∑ge_height
;

70 i‡–
y1
 >
p
->
tŸÆ_height
 )

72 
y1
 = 
p
->
tŸÆ_height
;

73 
y1
--;

75 
p
->
∑ge_y1
 = 
y1
;

78 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_pb.c

39 
	~"u8g.h
"

41 
	$u8g_pb_CÀ¨
(
u8g_pb_t
 *
b
)

43 
uöt8_t
 *
±r
 = (uöt8_à*)
b
->
buf
;

44 
uöt8_t
 *
íd_±r
 = 
±r
;

45 
íd_±r
 +
b
->
width
;

48 *
±r
++ = 0;

49 }  
±r
 !
íd_±r
 );

50 
	}
}

90 
uöt8_t
 
	$u8g_pb_IsYI¡î£˘i⁄
(
u8g_pb_t
 *
pb
, 
u8g_uöt_t
 
v0
, u8g_uöt_à
v1
)

92 
uöt8_t
 
c1
, 
c2
, 
c3
, 
tmp
;

93 
c1
 = 
v0
 <
pb
->
p
.
∑ge_y1
;

94 
c2
 = 
v1
 >
pb
->
p
.
∑ge_y0
;

95 
c3
 = 
v0
 > 
v1
;

106 
tmp
 = 
c1
;

107 
c1
 &
c2
;

108 
c2
 &
c3
;

109 
c3
 &
tmp
;

110 
c1
 |
c2
;

111 
c1
 |
c3
;

112  
c1
 & 1;

113 
	}
}

116 
uöt8_t
 
	$u8g_pb_IsXI¡î£˘i⁄
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
v0
, u8g_uöt_à
v1
)

118 
uöt8_t
 
c2
, 
c3
;

127 
c2
 = 
v0
 > 
b
->
width
;

128 
c3
 = 
v1
 > 
b
->
width
;

130 i‡–
c2
 && 
c3
 )  0;

133 
	}
}

135 
uöt8_t
 
	$u8g_pb_IsI¡î£˘i⁄
(
u8g_pb_t
 *
pb
, 
u8g_dev_¨g_bbx_t
 *
bbx
)

137 
u8g_uöt_t
 
tmp
;

139 
tmp
 = 
bbx
->
y
;

140 
tmp
 +
bbx
->
h
;

141 
tmp
--;

143 i‡–
	`u8g_pb_IsYI¡î£˘i⁄
(
pb
, 
bbx
->
y
, 
tmp
) == 0 )

147 
tmp
 = 
bbx
->
x
;

148 
tmp
 +
bbx
->
w
;

149 
tmp
--;

151  
	`u8g_pb_IsXI¡î£˘i⁄
(
pb
, 
bbx
->
x
, 
tmp
);

152 
	}
}

154 
	$u8g_pb_GëPageBox
(
u8g_pb_t
 *
pb
, 
u8g_box_t
 *
box
)

156 
box
->
x0
 = 0;

157 
box
->
y0
 = 
pb
->
p
.
∑ge_y0
;

158 
box
->
x1
 = 
pb
->
width
;

159 
box
->
x1
--;

160 
box
->
y1
 = 
pb
->
p
.
∑ge_y1
;

161 
	}
}

164 
uöt8_t
 
	$u8g_pb_Is8PixñVisibÀ
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

166 
u8g_uöt_t
 
v0
, 
v1
;

167 
v0
 = 
¨g_pixñ
->
y
;

168 
v1
 = 
v0
;

169  
¨g_pixñ
->
dú
 )

174 
v1
 += 8;

179 
v0
 -= 8;

182  
	`u8g_pb_IsYI¡î£˘i⁄
(
b
, 
v0
, 
v1
);

183 
	}
}

187 
uöt8_t
 
	$u8g_pb_WrôeBuf„r
(
u8g_pb_t
 *
b
, 
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

189  
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
b
->
width
, b->
buf
);

190 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_pb14v1.c

40 
	~"u8g.h
"

41 
	~<°rög.h
>

44 
	$u8g_pb14v1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
Ë
U8G_NOINLINE
;

45 
	$u8g_pb14v1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

46 
	$u8g_pb14v1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
Ë
U8G_NOINLINE
 ;

47 
	$u8g_pb14v1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
Ë
U8G_NOINLINE
;

50 
	$u8g_pb14v1_CÀ¨
(
u8g_pb_t
 *
b
)

52 
uöt8_t
 *
±r
 = (uöt8_à*)
b
->
buf
;

53 
uöt8_t
 *
íd_±r
 = 
±r
;

54 
íd_±r
 +
b
->
width
*2;

57 *
±r
++ = 0;

58 }  
±r
 !
íd_±r
 );

59 
	}
}

62 
	$u8g_pb14v1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

64 
b
->
buf
 = buf;

65 
b
->
width
 = width;

66 
	`u8g_pb14v1_CÀ¨
(
b
);

67 
	}
}

69 
	$u8g_pb14v1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

71 
uöt8_t
 
mask
;

72 
uöt8_t
 *
±r
 = 
b
->
buf
;

74 
y
 -
b
->
p
.
∑ge_y0
;

75 i‡–
y
 >= 7 )

77 
±r
 +
b
->
width
;

78 
y
 -= 7;

80 
mask
 = 1;

81 
mask
 <<
y
;

82 
±r
 +
x
;

83 i‡–
cﬁ‹_ödex
 )

85 *
±r
 |
mask
;

89 
mask
 ^=0xff;

90 *
±r
 &
mask
;

92 
	}
}

95 
	$u8g_pb14v1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

97 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

99 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

101 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

103 
	`u8g_pb14v1_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

104 
	}
}

106 
	$u8g_pb14v1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

108 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

111 i‡–
pixñ
 & 128 )

113 
	`u8g_pb14v1_SëPixñ
(
b
, 
¨g_pixñ
);

115  
¨g_pixñ
->
dú
 )

117 0: 
¨g_pixñ
->
x
++; ;

118 1: 
¨g_pixñ
->
y
++; ;

119 2: 
¨g_pixñ
->
x
--; ;

120 3: 
¨g_pixñ
->
y
--; ;

122 
pixñ
 <<= 1;

123 }  
pixñ
 != 0 );

124 
	}
}

127 
	$u8g_pb14v1_Së8PixñO±2
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

129 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

130 
u8g_uöt_t
 
dx
 = 0;

131 
u8g_uöt_t
 
dy
 = 0;

133  
¨g_pixñ
->
dú
 )

135 0: 
dx
++; ;

136 1: 
dy
++; ;

137 2: 
dx
--; ;

138 3: 
dy
--; ;

143 i‡–
pixñ
 & 128 )

144 
	`u8g_pb14v1_SëPixñ
(
b
, 
¨g_pixñ
);

145 
¨g_pixñ
->
x
 +
dx
;

146 
¨g_pixñ
->
y
 +
dy
;

147 
pixñ
 <<= 1;

148 }  
pixñ
 != 0 );

150 
	}
}

152 
uöt8_t
 
	$u8g_dev_pb14v1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

154 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

155 
msg
)

157 
U8G_DEV_MSG_SET_8PIXEL
:

158 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

159 
	`u8g_pb14v1_Së8PixñO±2
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

161 
U8G_DEV_MSG_SET_PIXEL
:

162 
	`u8g_pb14v1_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

164 
U8G_DEV_MSG_INIT
:

166 
U8G_DEV_MSG_STOP
:

168 
U8G_DEV_MSG_PAGE_FIRST
:

169 
	`u8g_pb14v1_CÀ¨
(
pb
);

170 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

172 
U8G_DEV_MSG_PAGE_NEXT
:

173 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

175 
	`u8g_pb14v1_CÀ¨
(
pb
);

177 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


178 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

179  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

181 
U8G_DEV_MSG_GET_PAGE_BOX
:

182 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

184 
U8G_DEV_MSG_GET_WIDTH
:

185 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

187 
U8G_DEV_MSG_GET_HEIGHT
:

188 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

190 
U8G_DEV_MSG_SET_COLOR_INDEX
:

192 
U8G_DEV_MSG_SET_XY_CB
:

194 
U8G_DEV_MSG_GET_MODE
:

195  
U8G_MODE_BW
;

198 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_pb16h1.c

43 
	~"u8g.h
"

44 
	~<°rög.h
>

47 
	$u8g_pb16h1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
Ë
U8G_NOINLINE
;

48 
	$u8g_pb16h1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

49 
	$u8g_pb16h1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
Ë
U8G_NOINLINE
 ;

50 
	$u8g_pb16h1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
Ë
U8G_NOINLINE
;

51 
uöt8_t
 
	`u8g_dev_pb8h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

53 
	$u8g_pb16h1_CÀ¨
(
u8g_pb_t
 *
b
)

55 
uöt8_t
 *
±r
 = (uöt8_à*)
b
->
buf
;

56 
uöt8_t
 *
íd_±r
 = 
±r
;

57 
íd_±r
 +
b
->
width
*2;

60 *
±r
++ = 0;

61 }  
±r
 !
íd_±r
 );

62 
	}
}

66 
	$u8g_pb16h1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

68 
b
->
buf
 = buf;

69 
b
->
width
 = width;

70 
	`u8g_pb16h1_CÀ¨
(
b
);

71 
	}
}

75 
	$u8g_pb16h1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

77 
uöt8_t
 
mask
;

78 
u8g_uöt_t
 
tmp
;

79 
uöt8_t
 *
±r
 = 
b
->
buf
;

81 
y
 -
b
->
p
.
∑ge_y0
;

82 i‡–
y
 >= 8 )

84 
±r
 +
b
->
width
;

85 
y
 &= 0x07;

87 
tmp
 = 
b
->
width
;

88 
tmp
 >>= 3;

89 
tmp
 *(
uöt8_t
)
y
;

90 
±r
 +
tmp
;

92 
mask
 = 0x080;

93 
mask
 >>
x
 & 7;

94 
x
 >>= 3;

95 
±r
 +
x
;

96 i‡–
cﬁ‹_ödex
 )

98 *
±r
 |
mask
;

102 
mask
 ^=0xff;

103 *
±r
 &
mask
;

106 
	}
}

109 
	$u8g_pb16h1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

111 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

113 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

115 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

117 
	`u8g_pb16h1_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

118 
	}
}

120 
	$u8g_pb16h1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

122 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

125 i‡–
pixñ
 & 128 )

127 
	`u8g_pb16h1_SëPixñ
(
b
, 
¨g_pixñ
);

129  
¨g_pixñ
->
dú
 )

131 0: 
¨g_pixñ
->
x
++; ;

132 1: 
¨g_pixñ
->
y
++; ;

133 2: 
¨g_pixñ
->
x
--; ;

134 3: 
¨g_pixñ
->
y
--; ;

136 
pixñ
 <<= 1;

137 }  
pixñ
 != 0 );

138 
	}
}

140 
	$u8g_pb16h1_Së8PixñO±2
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

142 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

143 
u8g_uöt_t
 
dx
 = 0;

144 
u8g_uöt_t
 
dy
 = 0;

146  
¨g_pixñ
->
dú
 )

148 0: 
dx
++; ;

149 1: 
dy
++; ;

150 2: 
dx
--; ;

151 3: 
dy
--; ;

156 i‡–
pixñ
 & 128 )

157 
	`u8g_pb16h1_SëPixñ
(
b
, 
¨g_pixñ
);

158 
¨g_pixñ
->
x
 +
dx
;

159 
¨g_pixñ
->
y
 +
dy
;

160 
pixñ
 <<= 1;

161 }  
pixñ
 != 0 );

162 
	}
}

165 
uöt8_t
 
	$u8g_dev_pb16h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

167 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

168 
msg
)

170 
U8G_DEV_MSG_SET_8PIXEL
:

171 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

172 
	`u8g_pb16h1_Së8PixñO±2
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

174 
U8G_DEV_MSG_SET_PIXEL
:

175 
	`u8g_pb16h1_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

177 
U8G_DEV_MSG_INIT
:

179 
U8G_DEV_MSG_STOP
:

181 
U8G_DEV_MSG_PAGE_FIRST
:

182 
	`u8g_pb16h1_CÀ¨
(
pb
);

183 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

185 
U8G_DEV_MSG_PAGE_NEXT
:

186 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

188 
	`u8g_pb16h1_CÀ¨
(
pb
);

190 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


191 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

192  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

194 
U8G_DEV_MSG_GET_PAGE_BOX
:

195 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

197 
U8G_DEV_MSG_GET_WIDTH
:

198 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

200 
U8G_DEV_MSG_GET_HEIGHT
:

201 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

203 
U8G_DEV_MSG_SET_COLOR_INDEX
:

205 
U8G_DEV_MSG_SET_XY_CB
:

207 
U8G_DEV_MSG_GET_MODE
:

208  
U8G_MODE_BW
;

211 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_pb16h2.c

40 
	~"u8g.h
"

41 
	~<°rög.h
>

43 
	$u8g_pb16h2_CÀ¨
(
u8g_pb_t
 *
b
)

45 
uöt8_t
 *
±r
 = (uöt8_à*)
b
->
buf
;

46 
uöt8_t
 *
íd_±r
 = 
±r
;

49 
íd_±r
 +
b
->
width
;

50 
íd_±r
 +
b
->
width
;

54 *
±r
++ = 0;

55 }  
±r
 !
íd_±r
 );

56 
	}
}

58 
	$u8g_pb16h2_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

60 
b
->
buf
 = buf;

61 
b
->
width
 = width;

62 
	`u8g_pb16h2_CÀ¨
(
b
);

63 
	}
}

65 
	$u8g_pb16h2_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

66 
	$u8g_pb16h2_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

68 
uöt8_t
 
mask
;

69 
uöt16_t
 
tmp
;

71 
uöt8_t
 *
±r
 = 
b
->
buf
;

73 
y
 -
b
->
p
.
∑ge_y0
;

75 
tmp
 = 
b
->
width
;

76 
tmp
 >>= 2;

77 
tmp
 *(
uöt8_t
)
y
;

78 
±r
 +
tmp
;

80 
tmp
 = 
x
;

81 
tmp
 >>= 2;

82 
±r
 +
tmp
;

84 
tmp
 = 
x
;

85 
tmp
 &= 3;

86 
tmp
 <<= 1;

87 
mask
 = 3;

88 
mask
 <<
tmp
;

89 
mask
 = ~mask;

90 
cﬁ‹_ödex
 &= 3;

91 
cﬁ‹_ödex
 <<
tmp
;

93 *
±r
 &
mask
;

94 *
±r
 |
cﬁ‹_ödex
;

95 
	}
}

98 
	$u8g_pb16h2_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

100 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

102 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

104 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

106 
	`u8g_pb16h2_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

107 
	}
}

110 
	$u8g_pb16h2_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

112 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

115 i‡–
pixñ
 & 128 )

117 
	`u8g_pb16h2_SëPixñ
(
b
, 
¨g_pixñ
);

119  
¨g_pixñ
->
dú
 )

121 0: 
¨g_pixñ
->
x
++; ;

122 1: 
¨g_pixñ
->
y
++; ;

123 2: 
¨g_pixñ
->
x
--; ;

124 3: 
¨g_pixñ
->
y
--; ;

126 
pixñ
 <<= 1;

127 }  
pixñ
 != 0 );

128 
	}
}

132 
uöt8_t
 
	$u8g_dev_pb16h2_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

134 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

135 
msg
)

137 
U8G_DEV_MSG_SET_8PIXEL
:

138 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

140 
	`u8g_pb16h2_Së8PixñStd
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

143 
U8G_DEV_MSG_SET_PIXEL
:

144 
	`u8g_pb16h2_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

146 
U8G_DEV_MSG_INIT
:

148 
U8G_DEV_MSG_STOP
:

150 
U8G_DEV_MSG_PAGE_FIRST
:

151 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

152 
	`u8g_pb16h2_CÀ¨
(
pb
);

154 
U8G_DEV_MSG_PAGE_NEXT
:

155 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

157 
	`u8g_pb16h2_CÀ¨
(
pb
);

159 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


160 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

161  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

163 
U8G_DEV_MSG_GET_PAGE_BOX
:

164 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

166 
U8G_DEV_MSG_GET_WIDTH
:

167 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

169 
U8G_DEV_MSG_GET_HEIGHT
:

170 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

172 
U8G_DEV_MSG_SET_COLOR_INDEX
:

174 
U8G_DEV_MSG_SET_XY_CB
:

176 
U8G_DEV_MSG_GET_MODE
:

177  
U8G_MODE_GRAY2BIT
;

180 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_pb16v1.c

40 
	~"u8g.h
"

41 
	~<°rög.h
>

44 
	$u8g_pb16v1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
Ë
U8G_NOINLINE
;

45 
	$u8g_pb16v1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

46 
	$u8g_pb16v1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
Ë
U8G_NOINLINE
 ;

47 
	$u8g_pb16v1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
Ë
U8G_NOINLINE
;

50 
	$u8g_pb16v1_CÀ¨
(
u8g_pb_t
 *
b
)

52 
uöt8_t
 *
±r
 = (uöt8_à*)
b
->
buf
;

53 
uöt8_t
 *
íd_±r
 = 
±r
;

54 
íd_±r
 +
b
->
width
*2;

57 *
±r
++ = 0;

58 }  
±r
 !
íd_±r
 );

59 
	}
}

62 
	$u8g_pb16v1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

64 
b
->
buf
 = buf;

65 
b
->
width
 = width;

66 
	`u8g_pb16v1_CÀ¨
(
b
);

67 
	}
}

69 
	$u8g_pb16v1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

71 
uöt8_t
 
mask
;

72 
uöt8_t
 *
±r
 = 
b
->
buf
;

74 
y
 -
b
->
p
.
∑ge_y0
;

75 i‡–
y
 >= 8 )

77 
±r
 +
b
->
width
;

78 
y
 &= 0x07;

80 
mask
 = 1;

81 
mask
 <<
y
;

82 
±r
 +
x
;

83 i‡–
cﬁ‹_ödex
 )

85 *
±r
 |
mask
;

89 
mask
 ^=0xff;

90 *
±r
 &
mask
;

92 
	}
}

95 
	$u8g_pb16v1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

97 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

99 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

101 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

103 
	`u8g_pb16v1_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

104 
	}
}

106 
	$u8g_pb16v1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

108 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

111 i‡–
pixñ
 & 128 )

113 
	`u8g_pb16v1_SëPixñ
(
b
, 
¨g_pixñ
);

115  
¨g_pixñ
->
dú
 )

117 0: 
¨g_pixñ
->
x
++; ;

118 1: 
¨g_pixñ
->
y
++; ;

119 2: 
¨g_pixñ
->
x
--; ;

120 3: 
¨g_pixñ
->
y
--; ;

122 
pixñ
 <<= 1;

123 }  
pixñ
 != 0 );

124 
	}
}

127 
	$u8g_pb16v1_Së8PixñO±2
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

129 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

130 
u8g_uöt_t
 
dx
 = 0;

131 
u8g_uöt_t
 
dy
 = 0;

133  
¨g_pixñ
->
dú
 )

135 0: 
dx
++; ;

136 1: 
dy
++; ;

137 2: 
dx
--; ;

138 3: 
dy
--; ;

143 i‡–
pixñ
 & 128 )

144 
	`u8g_pb16v1_SëPixñ
(
b
, 
¨g_pixñ
);

145 
¨g_pixñ
->
x
 +
dx
;

146 
¨g_pixñ
->
y
 +
dy
;

147 
pixñ
 <<= 1;

148 }  
pixñ
 != 0 );

150 
	}
}

152 
uöt8_t
 
	$u8g_dev_pb16v1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

154 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

155 
msg
)

157 
U8G_DEV_MSG_SET_8PIXEL
:

158 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

159 
	`u8g_pb16v1_Së8PixñO±2
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

161 
U8G_DEV_MSG_SET_PIXEL
:

162 
	`u8g_pb16v1_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

164 
U8G_DEV_MSG_INIT
:

166 
U8G_DEV_MSG_STOP
:

168 
U8G_DEV_MSG_PAGE_FIRST
:

169 
	`u8g_pb16v1_CÀ¨
(
pb
);

170 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

172 
U8G_DEV_MSG_PAGE_NEXT
:

173 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

175 
	`u8g_pb16v1_CÀ¨
(
pb
);

177 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


178 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

179  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

181 
U8G_DEV_MSG_GET_PAGE_BOX
:

182 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

184 
U8G_DEV_MSG_GET_WIDTH
:

185 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

187 
U8G_DEV_MSG_GET_HEIGHT
:

188 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

190 
U8G_DEV_MSG_SET_COLOR_INDEX
:

192 
U8G_DEV_MSG_SET_XY_CB
:

194 
U8G_DEV_MSG_GET_MODE
:

195  
U8G_MODE_BW
;

198 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_pb16v2.c

40 
	~"u8g.h
"

41 
	~<°rög.h
>

44 
	$u8g_pb16v2_CÀ¨
(
u8g_pb_t
 *
b
)

46 
uöt8_t
 *
±r
 = (uöt8_à*)
b
->
buf
;

47 
uöt8_t
 *
íd_±r
 = 
±r
;

50 
íd_±r
 +
b
->
width
;

51 
íd_±r
 +
b
->
width
;

55 *
±r
++ = 0;

56 }  
±r
 !
íd_±r
 );

57 
	}
}

59 
	$u8g_pb16v2Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

61 
b
->
buf
 = buf;

62 
b
->
width
 = width;

63 
	`u8g_pb16v2_CÀ¨
(
b
);

64 
	}
}

66 
	$u8g_pb16v2_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

68 
uöt8_t
 
mask
;

69 
uöt8_t
 *
±r
 = 
b
->
buf
;

70 
y
 -
b
->
p
.
∑ge_y0
;

71 i‡–
y
 >= 4 )

73 
±r
 +
b
->
width
;

75 
mask
 = 0x03;

76 
y
 &= 0x03;

77 
y
 <<= 1;

78 
mask
 <<
y
;

79 
mask
 ^=0xff;

80 
cﬁ‹_ödex
 &= 3;

81 
cﬁ‹_ödex
 <<
y
;

82 
±r
 +
x
;

83 *
±r
 &
mask
;

84 *
±r
 |
cﬁ‹_ödex
;

85 
	}
}

88 
	$u8g_pb16v2_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

90 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

92 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

94 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

96 
	`u8g_pb16v2_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

97 
	}
}

100 
	$u8g_pb16v2_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

102 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

105 i‡–
pixñ
 & 128 )

107 
	`u8g_pb16v2_SëPixñ
(
b
, 
¨g_pixñ
);

109  
¨g_pixñ
->
dú
 )

111 0: 
¨g_pixñ
->
x
++; ;

112 1: 
¨g_pixñ
->
y
++; ;

113 2: 
¨g_pixñ
->
x
--; ;

114 3: 
¨g_pixñ
->
y
--; ;

116 
pixñ
 <<= 1;

117 }  
pixñ
 != 0 );

118 
	}
}

122 
uöt8_t
 
	$u8g_dev_pb16v2_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

124 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

125 
msg
)

127 
U8G_DEV_MSG_SET_8PIXEL
:

128 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

130 
	`u8g_pb16v2_Së8PixñStd
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

133 
U8G_DEV_MSG_SET_PIXEL
:

134 
	`u8g_pb16v2_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

136 
U8G_DEV_MSG_INIT
:

138 
U8G_DEV_MSG_STOP
:

140 
U8G_DEV_MSG_PAGE_FIRST
:

141 
	`u8g_pb16v2_CÀ¨
(
pb
);

142 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

144 
U8G_DEV_MSG_PAGE_NEXT
:

145 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

147 
	`u8g_pb16v2_CÀ¨
(
pb
);

149 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


150 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

151  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

153 
U8G_DEV_MSG_GET_PAGE_BOX
:

154 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

156 
U8G_DEV_MSG_GET_WIDTH
:

157 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

159 
U8G_DEV_MSG_GET_HEIGHT
:

160 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

162 
U8G_DEV_MSG_SET_COLOR_INDEX
:

164 
U8G_DEV_MSG_SET_XY_CB
:

166 
U8G_DEV_MSG_GET_MODE
:

167  
U8G_MODE_GRAY2BIT
;

170 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_pb32h1.c

43 
	~"u8g.h
"

44 
	~<°rög.h
>

47 
	$u8g_pb32h1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
Ë
U8G_NOINLINE
;

48 
	$u8g_pb32h1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

49 
	$u8g_pb32h1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
Ë
U8G_NOINLINE
 ;

50 
	$u8g_pb32h1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
Ë
U8G_NOINLINE
;

51 
uöt8_t
 
	`u8g_dev_pb8h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

53 
	$u8g_pb32h1_CÀ¨
(
u8g_pb_t
 *
b
)

55 
uöt8_t
 *
±r
 = (uöt8_à*)
b
->
buf
;

56 
uöt8_t
 *
íd_±r
 = 
±r
;

57 
íd_±r
 +
b
->
width
*4;

60 *
±r
++ = 0;

61 }  
±r
 !
íd_±r
 );

62 
	}
}

66 
	$u8g_pb32h1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

68 
b
->
buf
 = buf;

69 
b
->
width
 = width;

70 
	`u8g_pb32h1_CÀ¨
(
b
);

71 
	}
}

75 
	$u8g_pb32h1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

77 
uöt8_t
 
mask
;

78 
uöt16_t
 
tmp
;

79 
uöt8_t
 *
±r
 = 
b
->
buf
;

81 
y
 -
b
->
p
.
∑ge_y0
;

82 
tmp
 = 
b
->
width
;

83 
tmp
 >>= 3;

84 
tmp
 *
y
;

85 
±r
 +
tmp
;

87 
mask
 = 0x080;

88 
mask
 >>
x
 & 7;

89 
x
 >>= 3;

90 
±r
 +
x
;

91 i‡–
cﬁ‹_ödex
 )

93 *
±r
 |
mask
;

97 
mask
 ^=0xff;

98 *
±r
 &
mask
;

101 
	}
}

104 
	$u8g_pb32h1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

106 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

108 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

110 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

112 
	`u8g_pb32h1_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

113 
	}
}

115 
	$u8g_pb32h1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

117 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

120 i‡–
pixñ
 & 128 )

122 
	`u8g_pb32h1_SëPixñ
(
b
, 
¨g_pixñ
);

124  
¨g_pixñ
->
dú
 )

126 0: 
¨g_pixñ
->
x
++; ;

127 1: 
¨g_pixñ
->
y
++; ;

128 2: 
¨g_pixñ
->
x
--; ;

129 3: 
¨g_pixñ
->
y
--; ;

131 
pixñ
 <<= 1;

132 }  
pixñ
 != 0 );

133 
	}
}

135 
	$u8g_pb32h1_Së8PixñO±2
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

137 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

138 
u8g_uöt_t
 
dx
 = 0;

139 
u8g_uöt_t
 
dy
 = 0;

141  
¨g_pixñ
->
dú
 )

143 0: 
dx
++; ;

144 1: 
dy
++; ;

145 2: 
dx
--; ;

146 3: 
dy
--; ;

151 i‡–
pixñ
 & 128 )

152 
	`u8g_pb32h1_SëPixñ
(
b
, 
¨g_pixñ
);

153 
¨g_pixñ
->
x
 +
dx
;

154 
¨g_pixñ
->
y
 +
dy
;

155 
pixñ
 <<= 1;

156 }  
pixñ
 != 0 );

157 
	}
}

160 
uöt8_t
 
	$u8g_dev_pb32h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

162 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

163 
msg
)

165 
U8G_DEV_MSG_SET_8PIXEL
:

166 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

167 
	`u8g_pb32h1_Së8PixñO±2
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

169 
U8G_DEV_MSG_SET_PIXEL
:

170 
	`u8g_pb32h1_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

172 
U8G_DEV_MSG_INIT
:

174 
U8G_DEV_MSG_STOP
:

176 
U8G_DEV_MSG_PAGE_FIRST
:

177 
	`u8g_pb32h1_CÀ¨
(
pb
);

178 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

180 
U8G_DEV_MSG_PAGE_NEXT
:

181 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

183 
	`u8g_pb32h1_CÀ¨
(
pb
);

185 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


186 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

187  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

189 
U8G_DEV_MSG_GET_PAGE_BOX
:

190 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

192 
U8G_DEV_MSG_GET_WIDTH
:

193 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

195 
U8G_DEV_MSG_GET_HEIGHT
:

196 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

198 
U8G_DEV_MSG_SET_COLOR_INDEX
:

200 
U8G_DEV_MSG_SET_XY_CB
:

202 
U8G_DEV_MSG_GET_MODE
:

203  
U8G_MODE_BW
;

206 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_pb8h1.c

44 
	~"u8g.h
"

45 
	~<°rög.h
>

47 #ifde‡
__unix__


48 
	~<as£π.h
>

55 #ifde‡
__unix__


56 *
	gu8g_buf_lowî_limô
;

57 *
	gu8g_buf_uµî_limô
;

60 
	$u8g_pb8h1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
Ë
U8G_NOINLINE
;

61 
	$u8g_pb8h1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

62 
	$u8g_pb8h1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
Ë
U8G_NOINLINE
 ;

63 
	$u8g_pb8h1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
Ë
U8G_NOINLINE
;

64 
uöt8_t
 
	`u8g_dev_pb8h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

67 #ifde‡
NEW_CODE


68 
	su8g_pb_h1_°ru˘


70 
u8g_uöt_t
 
x
;

71 
u8g_uöt_t
 
y
;

72 
uöt8_t
 *
±r
;

73 
uöt8_t
 
mask
;

74 
uöt8_t
 
löe_byã_Àn
;

75 
uöt8_t
 
˙t
;

78 
uöt8_t
 
u8g_pb8h1_bômask
[8] = { 0x080, 0x040, 0x020, 0x010, 0x008, 0x004, 0x002, 0x001 
	}
};

80 
	$u8g_pb8h1_°©e_right
(
u8g_pb_h1_°ru˘
 *
s
Ë
U8G_NOINLINE
;

81 
	$u8g_pb8h1_°©e_right
(
u8g_pb_h1_°ru˘
 *
s
)

83 
u8g_uöt_t
 
x
;

84 
x
 = 
s
->x;

85 
x
++;

86 
s
->
x
 = x;

87 
x
 &= 7;

88 
s
->
mask
 = 
u8g_pb8h1_bômask
[
x
];

89 i‡–
x
 == 0 )

90 
s
->
±r
++;

91 
	}
}

93 
	$u8g_pb8h1_°©e_À·
(
u8g_pb_h1_°ru˘
 *
s
)

95 
u8g_uöt_t
 
x
;

96 
x
 = 
s
->x;

97 
x
--;

98 
s
->
x
 = x;

99 
x
 &= 7;

100 
s
->
mask
 = 
u8g_pb8h1_bômask
[
x
];

101 i‡–
x
 == 7 )

102 
s
->
±r
--;

103 
	}
}

105 
	$u8g_pb8h1_°©e_down
(
u8g_pb_h1_°ru˘
 *
s
)

107 
s
->
y
++;

108 
s
->
±r
 +s->
löe_byã_Àn
;

109 
	}
}

111 
	$u8g_pb8h1_°©e_up
(
u8g_pb_h1_°ru˘
 *
s
)

113 
s
->
y
--;

114 
s
->
±r
 -s->
löe_byã_Àn
;

115 
	}
}

117 
	$u8g_pb8h1_°©e_öô
(
u8g_pb_h1_°ru˘
 *
s
, 
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
Ë
U8G_NOINLINE
;

118 
	$u8g_pb8h1_°©e_öô
(
u8g_pb_h1_°ru˘
 *
s
, 
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
)

120 
u8g_uöt_t
 
tmp
;

122 
uöt8_t
 *
±r
 = 
b
->
buf
;

124 
s
->
x
 = x;

125 
s
->
y
 = y;

127 
y
 -
b
->
p
.
∑ge_y0
;

129 
tmp
 = 
b
->
width
;

130 
tmp
 >>= 3;

131 
s
->
löe_byã_Àn
 = 
tmp
;

134 
±r
 -
tmp
*8;

135 
y
+=8;

137 
±r
 +
tmp
*
y
;

139 
s
->
mask
 = 
u8g_pb8h1_bômask
[
x
 & 7];

142 
±r
--;

143 
x
 += 8;

144 
x
 >>= 3;

145 
±r
 +
x
;

146 
s
->
±r
 =Ötr;

147 
	}
}

149 
	$u8g_pb8h1_°©e_£t_pixñ
(
u8g_pb_h1_°ru˘
 *
s
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

150 
	$u8g_pb8h1_°©e_£t_pixñ
(
u8g_pb_h1_°ru˘
 *
s
, 
uöt8_t
 
cﬁ‹_ödex
)

153 #ifde‡
__unix__


154 
	`as£π
–
s
->
±r
 >
u8g_buf_lowî_limô
 );

155 
	`as£π
–
s
->
±r
 < 
u8g_buf_uµî_limô
 );

158 i‡–
cﬁ‹_ödex
 )

160 *
s
->
±r
 |s->
mask
;

164 
uöt8_t
 
mask
 = 
s
->mask;

165 
mask
 ^=0xff;

166 *
s
->
±r
 &
mask
;

168 
	}
}

172 
	$u8g_pb8h1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

174 
b
->
buf
 = buf;

175 
b
->
width
 = width;

176 
	`u8g_pb_CÀ¨
(
b
);

177 
	}
}

180 
	$u8g_pb8h1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

182 #ifde‡
NEW_CODE


183 
u8g_pb_h1_°ru˘
 
s
;

184 
	`u8g_pb8h1_°©e_öô
(&
s
, 
b
, 
x
, 
y
);

185 
	`u8g_pb8h1_°©e_£t_pixñ
(&
s
, 
cﬁ‹_ödex
);

194 
uöt8_t
 
mask
;

195 
u8g_uöt_t
 
tmp
;

196 
uöt8_t
 *
±r
 = 
b
->
buf
;

198 
y
 -
b
->
p
.
∑ge_y0
;

199 
tmp
 = 
b
->
width
;

200 
tmp
 >>= 3;

201 
tmp
 *(
uöt8_t
)
y
;

202 
±r
 +
tmp
;

204 
mask
 = 0x080;

205 
mask
 >>
x
 & 7;

206 
x
 >>= 3;

207 
±r
 +
x
;

208 i‡–
cﬁ‹_ödex
 )

210 *
±r
 |
mask
;

214 
mask
 ^=0xff;

215 *
±r
 &
mask
;

218 
	}
}

221 
	$u8g_pb8h1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

223 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

225 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

227 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

229 
	`u8g_pb8h1_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

230 
	}
}

232 
	$u8g_pb8h1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

234 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

237 i‡–
pixñ
 & 128 )

239 
	`u8g_pb8h1_SëPixñ
(
b
, 
¨g_pixñ
);

241  
¨g_pixñ
->
dú
 )

243 0: 
¨g_pixñ
->
x
++; ;

244 1: 
¨g_pixñ
->
y
++; ;

245 2: 
¨g_pixñ
->
x
--; ;

246 3: 
¨g_pixñ
->
y
--; ;

248 
pixñ
 <<= 1;

249 }  
pixñ
 != 0 );

250 
	}
}

252 
	$u8g_pb8h1_Së8PixñO±2
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

254 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

255 
u8g_uöt_t
 
dx
 = 0;

256 
u8g_uöt_t
 
dy
 = 0;

258  
¨g_pixñ
->
dú
 )

260 0: 
dx
++; ;

261 1: 
dy
++; ;

262 2: 
dx
--; ;

263 3: 
dy
--; ;

268 i‡–
pixñ
 & 128 )

269 
	`u8g_pb8h1_SëPixñ
(
b
, 
¨g_pixñ
);

270 
¨g_pixñ
->
x
 +
dx
;

271 
¨g_pixñ
->
y
 +
dy
;

272 
pixñ
 <<= 1;

273 }  
pixñ
 != 0 );

274 
	}
}

276 #ifde‡
NEW_CODE


277 
	$u8g_pb8h1_Së8PixñSèã
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

279 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

280 
u8g_pb_h1_°ru˘
 
s
;

281 
uöt8_t
 
˙t
;

282 
	`u8g_pb8h1_°©e_öô
(&
s
, 
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
);

283 
˙t
 = 8;

284  
¨g_pixñ
->
dú
 )

289 i‡–
s
.
x
 < 
b
->
width
 )

290 i‡–
pixñ
 & 128 )

291 
	`u8g_pb8h1_°©e_£t_pixñ
(&
s
, 
¨g_pixñ
->
cﬁ‹
);

292 
	`u8g_pb8h1_°©e_right
(&
s
);

293 
pixñ
 <<= 1;

294 
˙t
--;

295 }  
˙t
 > 0 && 
pixñ
 != 0 );

300 i‡–
s
.
y
 >
b
->
p
.
∑ge_y0
 )

301 i‡–
s
.
y
 <
b
->
p
.
∑ge_y1
 )

302 i‡–
pixñ
 & 128 )

303 
	`u8g_pb8h1_°©e_£t_pixñ
(&
s
, 
¨g_pixñ
->
cﬁ‹
);

304 
	`u8g_pb8h1_°©e_down
(&
s
);

305 
pixñ
 <<= 1;

306 
˙t
--;

307 }  
˙t
 > 0 && 
pixñ
 != 0 );

312 i‡–
s
.
x
 < 
b
->
width
 )

313 i‡–
pixñ
 & 128 )

314 
	`u8g_pb8h1_°©e_£t_pixñ
(&
s
, 
¨g_pixñ
->
cﬁ‹
);

315 
	`u8g_pb8h1_°©e_À·
(&
s
);

316 
pixñ
 <<= 1;

317 
˙t
--;

318 }  
˙t
 > 0 && 
pixñ
 != 0 );

323 i‡–
s
.
y
 >
b
->
p
.
∑ge_y0
 )

324 i‡–
s
.
y
 <
b
->
p
.
∑ge_y1
 )

325 i‡–
pixñ
 & 128 )

326 
	`u8g_pb8h1_°©e_£t_pixñ
(&
s
, 
¨g_pixñ
->
cﬁ‹
);

327 
	`u8g_pb8h1_°©e_up
(&
s
);

328 
pixñ
 <<= 1;

329 
˙t
--;

330 }  
˙t
 > 0 && 
pixñ
 != 0 );

333 
	}
}

336 
uöt8_t
 
	$u8g_dev_pb8h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

338 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

339 
msg
)

341 
U8G_DEV_MSG_SET_8PIXEL
:

342 #ifde‡
NEW_CODE


343 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

344 
	`u8g_pb8h1_Së8PixñSèã
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

346 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

347 
	`u8g_pb8h1_Së8PixñO±2
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

350 
U8G_DEV_MSG_SET_PIXEL
:

351 
	`u8g_pb8h1_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

353 
U8G_DEV_MSG_INIT
:

355 
U8G_DEV_MSG_STOP
:

357 
U8G_DEV_MSG_PAGE_FIRST
:

358 
	`u8g_pb_CÀ¨
(
pb
);

359 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

361 
U8G_DEV_MSG_PAGE_NEXT
:

362 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

364 
	`u8g_pb_CÀ¨
(
pb
);

366 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


367 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

368  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

370 
U8G_DEV_MSG_GET_PAGE_BOX
:

371 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

373 
U8G_DEV_MSG_GET_WIDTH
:

374 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

376 
U8G_DEV_MSG_GET_HEIGHT
:

377 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

379 
U8G_DEV_MSG_SET_COLOR_INDEX
:

381 
U8G_DEV_MSG_SET_XY_CB
:

383 
U8G_DEV_MSG_GET_MODE
:

384  
U8G_MODE_BW
;

387 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_pb8h1f.c

43 
	~"u8g.h
"

44 
	~<°rög.h
>

47 
	$u8g_pb8h1f_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
Ë
U8G_NOINLINE
;

48 
	$u8g_pb8h1f_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

49 
	$u8g_pb8h1f_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
Ë
U8G_NOINLINE
 ;

50 
	$u8g_pb8h1f_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
Ë
U8G_NOINLINE
;

51 
uöt8_t
 
	`u8g_dev_pb8h1f_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

54 
	$u8g_pb8h1f_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

56 
b
->
buf
 = buf;

57 
b
->
width
 = width;

58 
	`u8g_pb_CÀ¨
(
b
);

59 
	}
}

62 
	$u8g_pb8h1f_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

65 
uöt8_t
 
mask
;

66 
u8g_uöt_t
 
tmp
;

67 
uöt8_t
 *
±r
 = 
b
->
buf
;

69 
y
 -
b
->
p
.
∑ge_y0
;

70 
tmp
 = 
b
->
width
 >> 3;

71 
tmp
 *(
uöt8_t
)
y
;

72 
±r
 +
tmp
;

74 
mask
 = 1;

75 
mask
 <<
x
 & 7;

76 
x
 >>= 3;

77 
±r
 +
x
;

78 i‡–
cﬁ‹_ödex
 )

80 *
±r
 |
mask
;

84 
mask
 ^=0xff;

85 *
±r
 &
mask
;

87 
	}
}

90 
	$u8g_pb8h1f_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

92 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

94 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

96 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

98 
	`u8g_pb8h1f_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

99 
	}
}

101 
	$u8g_pb8h1f_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

103 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

106 i‡–
pixñ
 & 128 )

108 
	`u8g_pb8h1f_SëPixñ
(
b
, 
¨g_pixñ
);

110  
¨g_pixñ
->
dú
 )

112 0: 
¨g_pixñ
->
x
++; ;

113 1: 
¨g_pixñ
->
y
++; ;

114 2: 
¨g_pixñ
->
x
--; ;

115 3: 
¨g_pixñ
->
y
--; ;

117 
pixñ
 <<= 1;

118 }  
pixñ
 != 0 );

119 
	}
}

121 
	$u8g_pb8h1f_Së8PixñO±2
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

123 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

124 
u8g_uöt_t
 
dx
 = 0;

125 
u8g_uöt_t
 
dy
 = 0;

127  
¨g_pixñ
->
dú
 )

129 0: 
dx
++; ;

130 1: 
dy
++; ;

131 2: 
dx
--; ;

132 3: 
dy
--; ;

137 i‡–
pixñ
 & 128 )

138 
	`u8g_pb8h1f_SëPixñ
(
b
, 
¨g_pixñ
);

139 
¨g_pixñ
->
x
 +
dx
;

140 
¨g_pixñ
->
y
 +
dy
;

141 
pixñ
 <<= 1;

142 }  
pixñ
 != 0 );

143 
	}
}

146 
uöt8_t
 
	$u8g_dev_pb8h1f_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

148 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

149 
msg
)

151 
U8G_DEV_MSG_SET_8PIXEL
:

152 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

153 
	`u8g_pb8h1f_Së8PixñO±2
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

155 
U8G_DEV_MSG_SET_PIXEL
:

156 
	`u8g_pb8h1f_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

158 
U8G_DEV_MSG_INIT
:

160 
U8G_DEV_MSG_STOP
:

162 
U8G_DEV_MSG_PAGE_FIRST
:

163 
	`u8g_pb_CÀ¨
(
pb
);

164 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

166 
U8G_DEV_MSG_PAGE_NEXT
:

167 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

169 
	`u8g_pb_CÀ¨
(
pb
);

171 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


172 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

173  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

175 
U8G_DEV_MSG_GET_PAGE_BOX
:

176 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

178 
U8G_DEV_MSG_GET_WIDTH
:

179 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

181 
U8G_DEV_MSG_GET_HEIGHT
:

182 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

184 
U8G_DEV_MSG_SET_COLOR_INDEX
:

186 
U8G_DEV_MSG_SET_XY_CB
:

188 
U8G_DEV_MSG_GET_MODE
:

189  
U8G_MODE_BW
;

192 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_pb8h2.c

40 
	~"u8g.h
"

41 
	~<°rög.h
>

43 
	$u8g_pb8h2_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

45 
b
->
buf
 = buf;

46 
b
->
width
 = width;

47 
	`u8g_pb_CÀ¨
(
b
);

48 
	}
}

50 
	$u8g_pb8h2_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

51 
	$u8g_pb8h2_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

53 
uöt8_t
 
mask
;

54 
uöt16_t
 
tmp
;

56 
uöt8_t
 *
±r
 = 
b
->
buf
;

58 
y
 -
b
->
p
.
∑ge_y0
;

60 
tmp
 = 
b
->
width
;

61 
tmp
 >>= 2;

62 
tmp
 *(
uöt8_t
)
y
;

63 
±r
 +
tmp
;

65 
tmp
 = 
x
;

66 
tmp
 >>= 2;

67 
±r
 +
tmp
;

69 
tmp
 = 
x
;

70 
tmp
 &= 3;

71 
tmp
 <<= 1;

72 
mask
 = 3;

73 
mask
 <<
tmp
;

74 
mask
 = ~mask;

75 
cﬁ‹_ödex
 &= 3;

76 
cﬁ‹_ödex
 <<
tmp
;

78 *
±r
 &
mask
;

79 *
±r
 |
cﬁ‹_ödex
;

80 
	}
}

83 
	$u8g_pb8h2_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

85 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

87 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

89 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

91 
	`u8g_pb8h2_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

92 
	}
}

95 
	$u8g_pb8h2_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

97 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

100 i‡–
pixñ
 & 128 )

102 
	`u8g_pb8h2_SëPixñ
(
b
, 
¨g_pixñ
);

104  
¨g_pixñ
->
dú
 )

106 0: 
¨g_pixñ
->
x
++; ;

107 1: 
¨g_pixñ
->
y
++; ;

108 2: 
¨g_pixñ
->
x
--; ;

109 3: 
¨g_pixñ
->
y
--; ;

111 
pixñ
 <<= 1;

112 }  
pixñ
 != 0 );

113 
	}
}

117 
uöt8_t
 
	$u8g_dev_pb8h2_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

119 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

120 
msg
)

122 
U8G_DEV_MSG_SET_8PIXEL
:

123 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

125 
	`u8g_pb8h2_Së8PixñStd
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

128 
U8G_DEV_MSG_SET_PIXEL
:

129 
	`u8g_pb8h2_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

131 
U8G_DEV_MSG_INIT
:

133 
U8G_DEV_MSG_STOP
:

135 
U8G_DEV_MSG_PAGE_FIRST
:

136 
	`u8g_pb_CÀ¨
(
pb
);

137 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

139 
U8G_DEV_MSG_PAGE_NEXT
:

140 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

142 
	`u8g_pb_CÀ¨
(
pb
);

144 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


145 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

146  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

148 
U8G_DEV_MSG_GET_PAGE_BOX
:

149 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

151 
U8G_DEV_MSG_GET_WIDTH
:

152 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

154 
U8G_DEV_MSG_GET_HEIGHT
:

155 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

157 
U8G_DEV_MSG_SET_COLOR_INDEX
:

159 
U8G_DEV_MSG_SET_XY_CB
:

161 
U8G_DEV_MSG_GET_MODE
:

162  
U8G_MODE_GRAY2BIT
;

165 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_pb8h8.c

52 
	~"u8g.h
"

54 
	#WIDTH_BITS
 7

	)

55 
	#WIDTH
 (1<<
WIDTH_BITS
)

	)

56 
	#PAGE_HEIGHT_BITS
 3

	)

57 
	#PAGE_HEIGHT
 (1<<
PAGE_HEIGHT_BITS
)

	)

59 
	$u8g_pb8h8_CÀ¨
(
u8g_pb_t
 *
b
)

61 
uöt8_t
 *
±r
 = (uöt8_à*)
b
->
buf
;

62 
uöt8_t
 *
íd_±r
 = 
±r
;

63 
uöt8_t
 
˙t
 = 
b
->
p
.
∑ge_height
;

66 
íd_±r
 +
b
->
width
;

67 
˙t
--;

68 }  
˙t
 > 0 );

71 *
±r
++ = 0;

72 }  
±r
 !
íd_±r
 );

73 
	}
}

76 
	$u8g_pb8h8_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

78 
b
->
buf
 = buf;

79 
b
->
width
 = width;

80 
	`u8g_pb8h8_CÀ¨
(
b
);

81 
	}
}

83 
	$u8g_pb8h8_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

85 
uöt16_t
 
tmp
;

86 
uöt8_t
 *
±r
 = 
b
->
buf
;

87 
y
 -
b
->
p
.
∑ge_y0
;

88 
tmp
 = 
y
;

89 
tmp
 *
b
->
width
;

90 
tmp
 +
x
;

91 
±r
 +
tmp
;

92 *
±r
 = 
cﬁ‹_ödex
;

93 
	}
}

95 
	$u8g_pb8h8_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

97 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

99 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

101 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

103 
	`u8g_pb8h8_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

104 
	}
}

107 
	$u8g_pb8h8_Së8Pixñ
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

109 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

110 
u8g_uöt_t
 
dx
 = 0;

111 
u8g_uöt_t
 
dy
 = 0;

113  
¨g_pixñ
->
dú
 )

115 0: 
dx
++; ;

116 1: 
dy
++; ;

117 2: 
dx
--; ;

118 3: 
dy
--; ;

123 i‡–
pixñ
 & 128 )

124 
	`u8g_pb8h8_SëPixñ
(
b
, 
¨g_pixñ
);

125 
¨g_pixñ
->
x
 +
dx
;

126 
¨g_pixñ
->
y
 +
dy
;

127 
pixñ
 <<= 1;

128 }  
pixñ
 != 0 );

129 
	}
}

132 
uöt8_t
 
	$u8g_dev_pb8h8_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

134 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

135 
msg
)

137 
U8G_DEV_MSG_SET_8PIXEL
:

138 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

139 
	`u8g_pb8h8_Së8Pixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

141 
U8G_DEV_MSG_SET_PIXEL
:

142 
	`u8g_pb8h8_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

144 
U8G_DEV_MSG_INIT
:

146 
U8G_DEV_MSG_STOP
:

148 
U8G_DEV_MSG_PAGE_FIRST
:

149 
	`u8g_pb8h8_CÀ¨
(
pb
);

150 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

152 
U8G_DEV_MSG_PAGE_NEXT
:

153 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

155 
	`u8g_pb8h8_CÀ¨
(
pb
);

157 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


158 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

159  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

161 
U8G_DEV_MSG_GET_PAGE_BOX
:

162 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

164 
U8G_DEV_MSG_GET_WIDTH
:

165 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

167 
U8G_DEV_MSG_GET_HEIGHT
:

168 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

170 
U8G_DEV_MSG_SET_COLOR_INDEX
:

172 
U8G_DEV_MSG_SET_XY_CB
:

174 
U8G_DEV_MSG_GET_MODE
:

175  
U8G_MODE_R3G3B2
;

178 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_pb8v1.c

40 
	~"u8g.h
"

41 
	~<°rög.h
>

44 
	$u8g_pb8v1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
Ë
U8G_NOINLINE
;

45 
	$u8g_pb8v1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

46 
	$u8g_pb8v1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
Ë
U8G_NOINLINE
 ;

47 
	$u8g_pb8v1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
Ë
U8G_NOINLINE
;

50 
	$u8g_pb8v1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

52 
b
->
buf
 = buf;

53 
b
->
width
 = width;

54 
	`u8g_pb_CÀ¨
(
b
);

55 
	}
}

57 
	$u8g_pb8v1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

59 
uöt8_t
 
mask
;

60 
uöt8_t
 *
±r
 = 
b
->
buf
;

62 
y
 -
b
->
p
.
∑ge_y0
;

63 
mask
 = 1;

64 
y
 &= 0x07;

65 
mask
 <<
y
;

66 
±r
 +
x
;

67 i‡–
cﬁ‹_ödex
 )

69 *
±r
 |
mask
;

73 
mask
 ^=0xff;

74 *
±r
 &
mask
;

76 
	}
}

79 
	$u8g_pb8v1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

81 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

83 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

85 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

87 
	`u8g_pb8v1_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

88 
	}
}

90 
	$u8g_pb8v1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

92 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

95 i‡–
pixñ
 & 128 )

97 
	`u8g_pb8v1_SëPixñ
(
b
, 
¨g_pixñ
);

99  
¨g_pixñ
->
dú
 )

101 0: 
¨g_pixñ
->
x
++; ;

102 1: 
¨g_pixñ
->
y
++; ;

103 2: 
¨g_pixñ
->
x
--; ;

104 3: 
¨g_pixñ
->
y
--; ;

106 
pixñ
 <<= 1;

107 }  
pixñ
 != 0 );

108 
	}
}

111 
	$u8g_pb8v1_Së8PixñO±2
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

113 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

114 
u8g_uöt_t
 
dx
 = 0;

115 
u8g_uöt_t
 
dy
 = 0;

117  
¨g_pixñ
->
dú
 )

119 0: 
dx
++; ;

120 1: 
dy
++; ;

121 2: 
dx
--; ;

122 3: 
dy
--; ;

127 i‡–
pixñ
 & 128 )

128 
	`u8g_pb8v1_SëPixñ
(
b
, 
¨g_pixñ
);

129 
¨g_pixñ
->
x
 +
dx
;

130 
¨g_pixñ
->
y
 +
dy
;

131 
pixñ
 <<= 1;

132 }  
pixñ
 != 0 );

134 
	}
}

136 
uöt8_t
 
	$u8g_dev_pb8v1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

138 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

139 
msg
)

141 
U8G_DEV_MSG_SET_8PIXEL
:

142 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

143 
	`u8g_pb8v1_Së8PixñO±2
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

145 
U8G_DEV_MSG_SET_PIXEL
:

146 
	`u8g_pb8v1_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

148 
U8G_DEV_MSG_INIT
:

150 
U8G_DEV_MSG_STOP
:

152 
U8G_DEV_MSG_PAGE_FIRST
:

153 
	`u8g_pb_CÀ¨
(
pb
);

154 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

156 
U8G_DEV_MSG_PAGE_NEXT
:

157 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

159 
	`u8g_pb_CÀ¨
(
pb
);

161 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


162 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

163  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

165 
U8G_DEV_MSG_GET_PAGE_BOX
:

166 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

168 
U8G_DEV_MSG_GET_WIDTH
:

169 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

171 
U8G_DEV_MSG_GET_HEIGHT
:

172 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

174 
U8G_DEV_MSG_SET_COLOR_INDEX
:

176 
U8G_DEV_MSG_SET_XY_CB
:

178 
U8G_DEV_MSG_GET_MODE
:

179  
U8G_MODE_BW
;

182 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_pb8v2.c

40 
	~"u8g.h
"

41 
	~<°rög.h
>

43 
	$u8g_pb8v2_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

45 
b
->
buf
 = buf;

46 
b
->
width
 = width;

47 
	`u8g_pb_CÀ¨
(
b
);

48 
	}
}

50 
	$u8g_pb8v2_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

52 
uöt8_t
 
mask
;

53 
uöt8_t
 *
±r
 = 
b
->
buf
;

54 
y
 -
b
->
p
.
∑ge_y0
;

55 
mask
 = 0x03;

56 
y
 &= 0x03;

57 
y
 <<= 1;

58 
mask
 <<
y
;

59 
mask
 ^=0xff;

60 
cﬁ‹_ödex
 &= 3;

61 
cﬁ‹_ödex
 <<
y
;

62 
±r
 +
x
;

63 *
±r
 &
mask
;

64 *
±r
 |
cﬁ‹_ödex
;

65 
	}
}

68 
	$u8g_pb8v2_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

70 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

72 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

74 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

76 
	`u8g_pb8v2_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

77 
	}
}

80 
	$u8g_pb8v2_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

82 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

85 i‡–
pixñ
 & 128 )

87 
	`u8g_pb8v2_SëPixñ
(
b
, 
¨g_pixñ
);

89  
¨g_pixñ
->
dú
 )

91 0: 
¨g_pixñ
->
x
++; ;

92 1: 
¨g_pixñ
->
y
++; ;

93 2: 
¨g_pixñ
->
x
--; ;

94 3: 
¨g_pixñ
->
y
--; ;

96 
pixñ
 <<= 1;

97 }  
pixñ
 != 0 );

99 
	}
}

103 
uöt8_t
 
	$u8g_dev_pb8v2_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

105 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

106 
msg
)

108 
U8G_DEV_MSG_SET_8PIXEL
:

109 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

111 
	`u8g_pb8v2_Së8PixñStd
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

114 
U8G_DEV_MSG_SET_PIXEL
:

115 
	`u8g_pb8v2_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

117 
U8G_DEV_MSG_INIT
:

119 
U8G_DEV_MSG_STOP
:

121 
U8G_DEV_MSG_PAGE_FIRST
:

122 
	`u8g_pb_CÀ¨
(
pb
);

123 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

125 
U8G_DEV_MSG_PAGE_NEXT
:

126 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

128 
	`u8g_pb_CÀ¨
(
pb
);

130 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


131 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

132  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

134 
U8G_DEV_MSG_GET_PAGE_BOX
:

135 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

137 
U8G_DEV_MSG_GET_WIDTH
:

138 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

140 
U8G_DEV_MSG_GET_HEIGHT
:

141 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

143 
U8G_DEV_MSG_SET_COLOR_INDEX
:

145 
U8G_DEV_MSG_SET_XY_CB
:

147 
U8G_DEV_MSG_GET_MODE
:

148  
U8G_MODE_GRAY2BIT
;

151 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_rect.c

39 
	~"u8g.h
"

41 
	$u8g_døw_hlöe
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
)

43 
uöt8_t
 
pixñ
 = 0x0ff;

44  
w
 >= 8 )

46 
	`u8g_Døw8Pixñ
(
u8g
, 
x
, 
y
, 0, 
pixñ
);

47 
w
-=8;

48 
x
+=8;

50 i‡–
w
 != 0 )

52 
w
 ^=7;

53 
w
++;

54 
pixñ
 <<
w
&7;

55 
	`u8g_Døw8Pixñ
(
u8g
, 
x
, 
y
, 0, 
pixñ
);

57 
	}
}

59 
	$u8g_døw_vlöe
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
h
)

61 
uöt8_t
 
pixñ
 = 0x0ff;

62  
h
 >= 8 )

64 
	`u8g_Døw8Pixñ
(
u8g
, 
x
, 
y
, 1, 
pixñ
);

65 
h
-=8;

66 
y
+=8;

68 i‡–
h
 != 0 )

70 
h
 ^=7;

71 
h
++;

72 
pixñ
 <<
h
&7;

73 
	`u8g_Døw8Pixñ
(
u8g
, 
x
, 
y
, 1, 
pixñ
);

75 
	}
}

77 
	$u8g_DøwHLöe
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
)

79 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
w
, 1) == 0 )

81 
	`u8g_døw_hlöe
(
u8g
, 
x
, 
y
, 
w
);

82 
	}
}

84 
	$u8g_DøwVLöe
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
)

86 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 1, 
w
) == 0 )

88 
	`u8g_døw_vlöe
(
u8g
, 
x
, 
y
, 
w
);

89 
	}
}

92 
	$u8g_DøwFøme
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
)

94 
u8g_uöt_t
 
xtmp
 = 
x
;

96 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
w
, 
h
) == 0 )

100 
	`u8g_døw_hlöe
(
u8g
, 
x
, 
y
, 
w
);

101 
	`u8g_døw_vlöe
(
u8g
, 
x
, 
y
, 
h
);

102 
x
+=
w
;

103 
x
--;

104 
	`u8g_døw_vlöe
(
u8g
, 
x
, 
y
, 
h
);

105 
y
+=
h
;

106 
y
--;

107 
	`u8g_døw_hlöe
(
u8g
, 
xtmp
, 
y
, 
w
);

108 
	}
}

110 
	$u8g_døw_box
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
)

114 
	`u8g_døw_hlöe
(
u8g
, 
x
, 
y
, 
w
);

115 
y
++;

116 
h
--;

117 }  
h
 != 0 );

118 
	}
}

121 
	$u8g_DøwBox
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
)

123 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
w
, 
h
) == 0 )

125 
	`u8g_døw_box
(
u8g
, 
x
, 
y
, 
w
, 
h
);

126 
	}
}

129 
	$u8g_DøwRFøme
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, u8g_uöt_à
r
)

131 
u8g_uöt_t
 
xl
, 
yu
;

133 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
w
, 
h
) == 0 )

136 
xl
 = 
x
;

137 
xl
 +
r
;

138 
yu
 = 
y
;

139 
yu
 +
r
;

142 
u8g_uöt_t
 
yl
, 
xr
;

144 
xr
 = 
x
;

145 
xr
 +
w
;

146 
xr
 -
r
;

147 
xr
 -= 1;

149 
yl
 = 
y
;

150 
yl
 +
h
;

151 
yl
 -
r
;

152 
yl
 -= 1;

154 
	`u8g_døw_cú˛e
(
u8g
, 
xl
, 
yu
, 
r
, 
U8G_DRAW_UPPER_LEFT
);

155 
	`u8g_døw_cú˛e
(
u8g
, 
xr
, 
yu
, 
r
, 
U8G_DRAW_UPPER_RIGHT
);

156 
	`u8g_døw_cú˛e
(
u8g
, 
xl
, 
yl
, 
r
, 
U8G_DRAW_LOWER_LEFT
);

157 
	`u8g_døw_cú˛e
(
u8g
, 
xr
, 
yl
, 
r
, 
U8G_DRAW_LOWER_RIGHT
);

161 
u8g_uöt_t
 
ww
, 
hh
;

163 
ww
 = 
w
;

164 
ww
 -
r
;

165 
ww
 -
r
;

166 
ww
 -= 2;

167 
hh
 = 
h
;

168 
hh
 -
r
;

169 
hh
 -
r
;

170 
hh
 -= 2;

172 
xl
++;

173 
yu
++;

174 
h
--;

175 
w
--;

176 
	`u8g_døw_hlöe
(
u8g
, 
xl
, 
y
, 
ww
);

177 
	`u8g_døw_hlöe
(
u8g
, 
xl
, 
y
+
h
, 
ww
);

178 
	`u8g_døw_vlöe
(
u8g
, 
x
, 
yu
, 
hh
);

179 
	`u8g_døw_vlöe
(
u8g
, 
x
+
w
, 
yu
, 
hh
);

181 
	}
}

183 
	$u8g_DøwRBox
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, u8g_uöt_à
r
)

185 
u8g_uöt_t
 
xl
, 
yu
;

186 
u8g_uöt_t
 
yl
, 
xr
;

188 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
w
, 
h
) == 0 )

191 
xl
 = 
x
;

192 
xl
 +
r
;

193 
yu
 = 
y
;

194 
yu
 +
r
;

196 
xr
 = 
x
;

197 
xr
 +
w
;

198 
xr
 -
r
;

199 
xr
 -= 1;

201 
yl
 = 
y
;

202 
yl
 +
h
;

203 
yl
 -
r
;

204 
yl
 -= 1;

206 
	`u8g_døw_disc
(
u8g
, 
xl
, 
yu
, 
r
, 
U8G_DRAW_UPPER_LEFT
);

207 
	`u8g_døw_disc
(
u8g
, 
xr
, 
yu
, 
r
, 
U8G_DRAW_UPPER_RIGHT
);

208 
	`u8g_døw_disc
(
u8g
, 
xl
, 
yl
, 
r
, 
U8G_DRAW_LOWER_LEFT
);

209 
	`u8g_døw_disc
(
u8g
, 
xr
, 
yl
, 
r
, 
U8G_DRAW_LOWER_RIGHT
);

212 
u8g_uöt_t
 
ww
, 
hh
;

214 
ww
 = 
w
;

215 
ww
 -
r
;

216 
ww
 -
r
;

217 
ww
 -= 2;

218 
hh
 = 
h
;

219 
hh
 -
r
;

220 
hh
 -
r
;

221 
hh
 -= 2;

223 
xl
++;

224 
yu
++;

225 
h
--;

226 
	`u8g_døw_box
(
u8g
, 
xl
, 
y
, 
ww
, 
r
+1);

227 
	`u8g_døw_box
(
u8g
, 
xl
, 
yl
, 
ww
, 
r
+1);

229 
	`u8g_døw_box
(
u8g
, 
x
, 
yu
, 
w
, 
hh
);

232 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_rot.c

37 
	~"u8g.h
"

39 
uöt8_t
 
u8g_dev_rŸ90_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

40 
uöt8_t
 
u8g_dev_rŸ180_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

41 
uöt8_t
 
u8g_dev_rŸ270_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

43 
u8g_dev_t
 
	gu8g_dev_rŸ
 = { 
u8g_dev_rŸ90_‚
, 
NULL
, NULL };

46 
	$u8g_UndoRŸ©i⁄
(
u8g_t
 *
u8g
)

48 i‡–
u8g
->
dev
 !&
u8g_dev_rŸ
 )

50 
u8g
->
dev
 = 
u8g_dev_rŸ
.
dev_mem
;

51 
	`u8g_Upd©eDimísi⁄
(
u8g
);

52 
	}
}

54 
	$u8g_SëRŸ90
(
u8g_t
 *
u8g
)

56 i‡–
u8g
->
dev
 !&
u8g_dev_rŸ
 )

58 
u8g_dev_rŸ
.
dev_mem
 = 
u8g
->
dev
;

59 
u8g
->
dev
 = &
u8g_dev_rŸ
;

61 
u8g_dev_rŸ
.
dev_‚
 = 
u8g_dev_rŸ90_‚
;

62 
	`u8g_Upd©eDimísi⁄
(
u8g
);

63 
	}
}

65 
	$u8g_SëRŸ180
(
u8g_t
 *
u8g
)

67 i‡–
u8g
->
dev
 !&
u8g_dev_rŸ
 )

69 
u8g_dev_rŸ
.
dev_mem
 = 
u8g
->
dev
;

70 
u8g
->
dev
 = &
u8g_dev_rŸ
;

72 
u8g_dev_rŸ
.
dev_‚
 = 
u8g_dev_rŸ180_‚
;

73 
	`u8g_Upd©eDimísi⁄
(
u8g
);

74 
	}
}

76 
	$u8g_SëRŸ270
(
u8g_t
 *
u8g
)

78 i‡–
u8g
->
dev
 !&
u8g_dev_rŸ
 )

80 
u8g_dev_rŸ
.
dev_mem
 = 
u8g
->
dev
;

81 
u8g
->
dev
 = &
u8g_dev_rŸ
;

83 
u8g_dev_rŸ
.
dev_‚
 = 
u8g_dev_rŸ270_‚
;

84 
	`u8g_Upd©eDimísi⁄
(
u8g
);

85 
	}
}

87 
uöt8_t
 
	$u8g_dev_rŸ90_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

89 
u8g_dev_t
 *
rŸ©i⁄_chaö
 = (u8g_dev_à*)(
dev
->
dev_mem
);

90 
msg
)

101  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

102 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


103 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

105 
u8g_dev_¨g_bbx_t
 *
bbx
 = (u8g_dev_¨g_bbx_à*)
¨g
;

106 
u8g_uöt_t
 
x
, 
y
, 
tmp
;

109 
y
 = 
bbx
->
x
;

110 
x
 = 
u8g
->
height
;

112 
x
 -
bbx
->
y
;

113 
x
--;

116 
x
 -
bbx
->
h
;

117 
x
++;

120 
tmp
 = 
bbx
->
w
;

121 
bbx
->
w
 = bbx->
h
;

122 
bbx
->
h
 = 
tmp
;

125 
bbx
->
x
 = x;

126 
bbx
->
y
 = y;

128  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

130 
U8G_DEV_MSG_GET_PAGE_BOX
:

132 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

135 
u8g_box_t
 
√w_box
;

139 
√w_box
.
x0
 = ((
u8g_box_t
 *)
¨g
)->
y0
;

140 
√w_box
.
x1
 = ((
u8g_box_t
 *)
¨g
)->
y1
;

141 
√w_box
.
y0
 = ((
u8g_box_t
 *)
¨g
)->
x0
;

142 
√w_box
.
y1
 = ((
u8g_box_t
 *)
¨g
)->
x1
;

143 *((
u8g_box_t
 *)
¨g
Ë
√w_box
;

147 
U8G_DEV_MSG_GET_WIDTH
:

148 *((
u8g_uöt_t
 *)
¨g
Ë
	`u8g_GëHeightLL
(
u8g
,
rŸ©i⁄_chaö
);

150 
U8G_DEV_MSG_GET_HEIGHT
:

151 *((
u8g_uöt_t
 *)
¨g
Ë
	`u8g_GëWidthLL
(
u8g
, 
rŸ©i⁄_chaö
);

153 
U8G_DEV_MSG_SET_PIXEL
:

155 
u8g_uöt_t
 
x
, 
y
;

156 
y
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
;

157 
x
 = 
	`u8g_GëWidthLL
(
u8g
, 
rŸ©i⁄_chaö
);

158 
x
 -((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
;

159 
x
--;

160 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

161 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

163 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

165 
U8G_DEV_MSG_SET_8PIXEL
:

167 
u8g_uöt_t
 
x
, 
y
;

169 
y
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
;

170 
x
 = 
	`u8g_GëWidthLL
(
u8g
, 
rŸ©i⁄_chaö
);

171 
x
 -((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
;

172 
x
--;

173 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

174 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

175 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
+=1;

176 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
 &= 3;

178 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

182 
	}
}

184 
uöt8_t
 
	$u8g_dev_rŸ180_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

186 
u8g_dev_t
 *
rŸ©i⁄_chaö
 = (u8g_dev_à*)(
dev
->
dev_mem
);

187 
msg
)

198  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

199 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


200 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

202 
u8g_dev_¨g_bbx_t
 *
bbx
 = (u8g_dev_¨g_bbx_à*)
¨g
;

203 
u8g_uöt_t
 
x
, 
y
;

207 
y
 = 
u8g
->
height
;

208 
y
 -
bbx
->y;

209 
y
--;

212 
x
 = 
u8g
->
width
;

213 
x
 -
bbx
->x;

214 
x
--;

217 
y
 -
bbx
->
h
;

218 
y
++;

220 
x
 -
bbx
->
w
;

221 
x
++;

224 
bbx
->
x
 = x;

225 
bbx
->
y
 = y;

227  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

229 
U8G_DEV_MSG_GET_PAGE_BOX
:

231 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

234 
u8g_box_t
 
√w_box
;

236 
√w_box
.
x0
 = 
	`u8g_GëWidthLL
(
u8g
,
rŸ©i⁄_chaö
Ë- ((
u8g_box_t
 *)
¨g
)->
x1
 - 1;

237 
√w_box
.
x1
 = 
	`u8g_GëWidthLL
(
u8g
,
rŸ©i⁄_chaö
Ë- ((
u8g_box_t
 *)
¨g
)->
x0
 - 1;

238 
√w_box
.
y0
 = 
	`u8g_GëHeightLL
(
u8g
,
rŸ©i⁄_chaö
Ë- ((
u8g_box_t
 *)
¨g
)->
y1
 - 1;

239 
√w_box
.
y1
 = 
	`u8g_GëHeightLL
(
u8g
,
rŸ©i⁄_chaö
Ë- ((
u8g_box_t
 *)
¨g
)->
y0
 - 1;

240 *((
u8g_box_t
 *)
¨g
Ë
√w_box
;

244 
U8G_DEV_MSG_GET_WIDTH
:

245 *((
u8g_uöt_t
 *)
¨g
Ë
	`u8g_GëWidthLL
(
u8g
,
rŸ©i⁄_chaö
);

247 
U8G_DEV_MSG_GET_HEIGHT
:

248 *((
u8g_uöt_t
 *)
¨g
Ë
	`u8g_GëHeightLL
(
u8g
, 
rŸ©i⁄_chaö
);

250 
U8G_DEV_MSG_SET_PIXEL
:

252 
u8g_uöt_t
 
x
, 
y
;

254 
y
 = 
	`u8g_GëHeightLL
(
u8g
, 
rŸ©i⁄_chaö
);

255 
y
 -((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->y;

256 
y
--;

258 
x
 = 
	`u8g_GëWidthLL
(
u8g
, 
rŸ©i⁄_chaö
);

259 
x
 -((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->x;

260 
x
--;

262 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

263 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

265 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

267 
U8G_DEV_MSG_SET_8PIXEL
:

269 
u8g_uöt_t
 
x
, 
y
;

271 
y
 = 
	`u8g_GëHeightLL
(
u8g
, 
rŸ©i⁄_chaö
);

272 
y
 -((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->y;

273 
y
--;

275 
x
 = 
	`u8g_GëWidthLL
(
u8g
, 
rŸ©i⁄_chaö
);

276 
x
 -((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->x;

277 
x
--;

279 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

280 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

281 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
+=2;

282 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
 &= 3;

284 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

288 
	}
}

290 
uöt8_t
 
	$u8g_dev_rŸ270_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

292 
u8g_dev_t
 *
rŸ©i⁄_chaö
 = (u8g_dev_à*)(
dev
->
dev_mem
);

293 
msg
)

304  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

305 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


306 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

308 
u8g_dev_¨g_bbx_t
 *
bbx
 = (u8g_dev_¨g_bbx_à*)
¨g
;

309 
u8g_uöt_t
 
x
, 
y
, 
tmp
;

312 
x
 = 
bbx
->
y
;

314 
y
 = 
u8g
->
width
;

316 
y
 -
bbx
->
x
;

317 
y
--;

320 
y
 -
bbx
->
w
;

321 
y
++;

324 
tmp
 = 
bbx
->
w
;

325 
bbx
->
w
 = bbx->
h
;

326 
bbx
->
h
 = 
tmp
;

329 
bbx
->
x
 = x;

330 
bbx
->
y
 = y;

332  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

334 
U8G_DEV_MSG_GET_PAGE_BOX
:

336 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

339 
u8g_box_t
 
√w_box
;

341 
√w_box
.
x0
 = 
	`u8g_GëHeightLL
(
u8g
,
rŸ©i⁄_chaö
Ë- ((
u8g_box_t
 *)
¨g
)->
y1
 - 1;

342 
√w_box
.
x1
 = 
	`u8g_GëHeightLL
(
u8g
,
rŸ©i⁄_chaö
Ë- ((
u8g_box_t
 *)
¨g
)->
y0
 - 1;

343 
√w_box
.
y0
 = 
	`u8g_GëWidthLL
(
u8g
,
rŸ©i⁄_chaö
Ë- ((
u8g_box_t
 *)
¨g
)->
x1
 - 1;

344 
√w_box
.
y1
 = 
	`u8g_GëWidthLL
(
u8g
,
rŸ©i⁄_chaö
Ë- ((
u8g_box_t
 *)
¨g
)->
x0
 - 1;

345 *((
u8g_box_t
 *)
¨g
Ë
√w_box
;

349 
U8G_DEV_MSG_GET_WIDTH
:

350 *((
u8g_uöt_t
 *)
¨g
Ë
	`u8g_GëHeightLL
(
u8g
,
rŸ©i⁄_chaö
);

352 
U8G_DEV_MSG_GET_HEIGHT
:

353 *((
u8g_uöt_t
 *)
¨g
Ë
	`u8g_GëWidthLL
(
u8g
, 
rŸ©i⁄_chaö
);

355 
U8G_DEV_MSG_SET_PIXEL
:

357 
u8g_uöt_t
 
x
, 
y
;

358 
x
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
;

360 
y
 = 
	`u8g_GëHeightLL
(
u8g
, 
rŸ©i⁄_chaö
);

361 
y
 -((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
;

362 
y
--;

369 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

370 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

372 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

374 
U8G_DEV_MSG_SET_8PIXEL
:

376 
u8g_uöt_t
 
x
, 
y
;

377 
x
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
;

379 
y
 = 
	`u8g_GëHeightLL
(
u8g
, 
rŸ©i⁄_chaö
);

380 
y
 -((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
;

381 
y
--;

388 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

389 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

390 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
+=3;

391 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
 &= 3;

393 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

397 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_scale.c

39 
	~"u8g.h
"

41 
uöt8_t
 
u8g_dev_sˇÀ_2x2_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

44 
u8g_dev_t
 
	gu8g_dev_sˇÀ
 = { 
u8g_dev_sˇÀ_2x2_‚
, 
NULL
, NULL };

46 
	$u8g_UndoSˇÀ
(
u8g_t
 *
u8g
)

48 i‡–
u8g
->
dev
 !&
u8g_dev_sˇÀ
 )

50 
u8g
->
dev
 = 
u8g_dev_sˇÀ
.
dev_mem
;

51 
	`u8g_Upd©eDimísi⁄
(
u8g
);

52 
	}
}

54 
	$u8g_SëSˇÀ2x2
(
u8g_t
 *
u8g
)

56 i‡–
u8g
->
dev
 !&
u8g_dev_sˇÀ
 )

58 
u8g_dev_sˇÀ
.
dev_mem
 = 
u8g
->
dev
;

59 
u8g
->
dev
 = &
u8g_dev_sˇÀ
;

61 
u8g_dev_sˇÀ
.
dev_‚
 = 
u8g_dev_sˇÀ_2x2_‚
;

62 
	`u8g_Upd©eDimísi⁄
(
u8g
);

63 
	}
}

66 
uöt8_t
 
	$u8g_dev_sˇÀ_2x2_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

68 
u8g_dev_t
 *
chaö
 = (u8g_dev_à*)(
dev
->
dev_mem
);

69 
uöt8_t
 
pixñ
;

70 
uöt16_t
 
sˇÀd_pixñ
;

71 
uöt8_t
 
i
;

72 
uöt8_t
 
dú
;

73 
u8g_uöt_t
 
x
, 
y
, 
xx
,
yy
;

75 
msg
)

78  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

79 
U8G_DEV_MSG_GET_WIDTH
:

80 *((
u8g_uöt_t
 *)
¨g
Ë
	`u8g_GëWidthLL
(
u8g
, 
chaö
) / 2;

82 
U8G_DEV_MSG_GET_HEIGHT
:

83 *((
u8g_uöt_t
 *)
¨g
Ë
	`u8g_GëHeightLL
(
u8g
, 
chaö
) / 2;

85 
U8G_DEV_MSG_GET_PAGE_BOX
:

87 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

88 ((
u8g_box_t
 *)
¨g
)->
x0
 /= 2;

89 ((
u8g_box_t
 *)
¨g
)->
x1
 /= 2;

90 ((
u8g_box_t
 *)
¨g
)->
y0
 /= 2;

91 ((
u8g_box_t
 *)
¨g
)->
y1
 /= 2;

93 
U8G_DEV_MSG_SET_PIXEL
:

94 
x
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->x;

95 
x
 *= 2;

96 
y
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->y;

97 
y
 *= 2;

98 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

99 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

100 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

101 
x
++;

102 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

103 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

104 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

105 
y
++;

106 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

107 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

108 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

109 
x
--;

110 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

111 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

112 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

114 
U8G_DEV_MSG_SET_8PIXEL
:

115 
pixñ
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->pixel;

116 
dú
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->dir;

117 
sˇÀd_pixñ
 = 0;

118  
i
 = 0; i < 8; i++ )

120 
sˇÀd_pixñ
<<=2;

121 i‡–
pixñ
 & 128 )

123 
sˇÀd_pixñ
 |= 3;

125 
pixñ
<<=1;

127 
x
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->x;

128 
x
 *= 2;

129 
xx
 = 
x
;

130 
y
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->y;

131 
y
 *= 2;

132 
yy
 = 
y
;

133 i‡–((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
 & 1 )

135 
xx
++;

139 
yy
++;

142 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
pixñ
 = 
sˇÀd_pixñ
>>8;

143 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

144 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

145 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
 = dir;

146 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

149 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = 
xx
;

150 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = 
yy
;

151 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
 = dir;

152 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

154 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
pixñ
 = 
sˇÀd_pixñ
&255;

156 
dú
)

159 
x
+=8;

160 
xx
+=8;

163 
y
+=8;

164 
yy
+=8;

167 
x
-=8;

168 
xx
-=8;

171 
y
-=8;

172 
yy
-=8;

175 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

176 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

177 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
 = dir;

178 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

180 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = 
xx
;

181 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = 
yy
;

182 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
 = dir;

183 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

187 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_state.c

49 
	~<°ddef.h
>

50 
	~"u8g.h
"

52 
	$u8g_°©e_dummy_cb
(
uöt8_t
 
msg
)

55 
	}
}

57 
	$u8g_SëH¨dw¨eBackup
(
u8g_t
 *
u8g
, 
u8g_°©e_cb
 
backup_cb
)

59 
u8g
->
°©e_cb
 = 
backup_cb
;

62 
	`backup_cb
(
U8G_STATE_MSG_BACKUP_U8G
);

63 
	}
}

69 #i‡
deföed
(
__AVR__
)

70 
	#U8G_ATMEGA_HW_SPI


	)

73 #i‡
__AVR_ARCH__
 == 2

74 #unde‡
U8G_ATMEGA_HW_SPI


76 #i‡
__AVR_ARCH__
 == 25

77 #unde‡
U8G_ATMEGA_HW_SPI


81 #i‡
deföed
(
U8G_ATMEGA_HW_SPI
)

82 
	~<avr/öãºu±.h
>

83 
uöt8_t
 
	gu8g_°©e_avr_•i_mem‹y
[2];

85 
	$u8g_backup_avr_•i
(
uöt8_t
 
msg
)

87 i‡–
	`U8G_STATE_MSG_IS_BACKUP
(
msg
) )

89 
u8g_°©e_avr_•i_mem‹y
[
	`U8G_STATE_MSG_GET_IDX
(
msg
)] = 
SPCR
;

93 
uöt8_t
 
tmp
 = 
SREG
;

94 
	`˛i
();

95 
SPCR
 = 0;

96 
SPCR
 = 
u8g_°©e_avr_•i_mem‹y
[
	`U8G_STATE_MSG_GET_IDX
(
msg
)];

97 
SREG
 = 
tmp
;

99 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_u16toa.c

38 
	~"u8g.h
"

40 c⁄° *
	$u8g_u16tﬂp
(* 
de°
, 
uöt16_t
 
v
)

42 
uöt8_t
 
pos
;

43 
uöt8_t
 
d
;

44 
uöt16_t
 
c
;

45 
c
 = 10000;

46  
pos
 = 0;Öos < 5;Öos++ )

48 
d
 = '0';

49  
v
 >
c
 )

51 
v
 -
c
;

52 
d
++;

54 
de°
[
pos
] = 
d
;

55 
c
 /= 10;

57 
de°
[5] = '\0';

58  
de°
;

59 
	}
}

62 c⁄° *
	$u8g_u16tﬂ
(
uöt16_t
 
v
, 
uöt8_t
 
d
)

64 
buf
[6];

65 
d
 = 5-d;

66  
	`u8g_u16tﬂp
(
buf
, 
v
Ë+ 
d
;

67 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_u8toa.c

38 
	~"u8g.h
"

40 c⁄° 
	gu8g_u8tﬂ_èb
[3] = { 100, 10, 1 } ;

41 c⁄° *
	$u8g_u8tﬂp
(* 
de°
, 
uöt8_t
 
v
)

43 
uöt8_t
 
pos
;

44 
uöt8_t
 
d
;

45 
uöt8_t
 
c
;

46  
pos
 = 0;Öos < 3;Öos++ )

48 
d
 = '0';

49 
c
 = *(
u8g_u8tﬂ_èb
+
pos
);

50  
v
 >
c
 )

52 
v
 -
c
;

53 
d
++;

55 
de°
[
pos
] = 
d
;

57 
de°
[3] = '\0';

58  
de°
;

59 
	}
}

62 c⁄° *
	$u8g_u8tﬂ
(
uöt8_t
 
v
, uöt8_à
d
)

64 
buf
[4];

65 
d
 = 3-d;

66  
	`u8g_u8tﬂp
(
buf
, 
v
Ë+ 
d
;

67 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_virtual_screen.c

37 
	~"u8g.h
"

39 
	s_u8g_vs_t


41 
u8g_uöt_t
 
	mx
;

42 
u8g_uöt_t
 
	my
;

43 
u8g_t
 *
	mu8g
;

45 
_u8g_vs_t
 
	tu8g_vs_t
;

47 
	#U8g_VS_MAX
 4

	)

48 
uöt8_t
 
	gu8g_vs_˙t
 = 0;

49 
u8g_vs_t
 
	gu8g_vs_li°
[
U8g_VS_MAX
];

50 
uöt8_t
 
	gu8g_vs_cuºít
;

51 
u8g_uöt_t
 
	gu8g_vs_width
;

52 
u8g_uöt_t
 
	gu8g_vs_height
;

54 
uöt8_t
 
	$u8g_dev_vs_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

56 
msg
)

60 
uöt8_t
 
i
;

61  
i
 = 0; i < 
u8g_vs_˙t
; i++ )

63 
	`u8g_ˇŒ_dev_‚
(
u8g_vs_li°
[
i
].
u8g
, u8g_vs_li°[i].u8g->
dev
, 
msg
, 
¨g
);

67 
U8G_DEV_MSG_PAGE_FIRST
:

68 
u8g_vs_cuºít
 = 0;

69 i‡–
u8g_vs_˙t
 != 0 )

70  
	`u8g_ˇŒ_dev_‚
(
u8g_vs_li°
[
u8g_vs_cuºít
].
u8g
, u8g_vs_li°[u8g_vs_cuºít].u8g->
dev
, 
msg
, 
¨g
);

72 
U8G_DEV_MSG_PAGE_NEXT
:

74 
uöt8_t
 
ªt
 = 0;

75 i‡–
u8g_vs_˙t
 != 0 )

76 
ªt
 = 
	`u8g_ˇŒ_dev_‚
(
u8g_vs_li°
[
u8g_vs_cuºít
].
u8g
, u8g_vs_li°[u8g_vs_cuºít].u8g->
dev
, 
msg
, 
¨g
);

77 i‡–
ªt
 != 0 )

78  
ªt
;

79 
u8g_vs_cuºít
++;

80 i‡–
u8g_vs_cuºít
 >
u8g_vs_˙t
 )

82  
	`u8g_ˇŒ_dev_‚
(
u8g_vs_li°
[
u8g_vs_cuºít
].
u8g
, u8g_vs_li°[u8g_vs_cuºít].u8g->
dev
, 
U8G_DEV_MSG_PAGE_FIRST
, 
¨g
);

85 
U8G_DEV_MSG_GET_WIDTH
:

86 *((
u8g_uöt_t
 *)
¨g
Ë
u8g_vs_width
;

88 
U8G_DEV_MSG_GET_HEIGHT
:

89 *((
u8g_uöt_t
 *)
¨g
Ë
u8g_vs_height
;

91 
U8G_DEV_MSG_GET_PAGE_BOX
:

92 i‡–
u8g_vs_cuºít
 < 
u8g_vs_˙t
 )

94 
	`u8g_ˇŒ_dev_‚
(
u8g_vs_li°
[
u8g_vs_cuºít
].
u8g
, u8g_vs_li°[u8g_vs_cuºít].u8g->
dev
, 
msg
, 
¨g
);

95 ((
u8g_box_t
 *)
¨g
)->
x0
 +
u8g_vs_li°
[
u8g_vs_cuºít
].
x
;

96 ((
u8g_box_t
 *)
¨g
)->
x1
 +
u8g_vs_li°
[
u8g_vs_cuºít
].
x
;

97 ((
u8g_box_t
 *)
¨g
)->
y0
 +
u8g_vs_li°
[
u8g_vs_cuºít
].
y
;

98 ((
u8g_box_t
 *)
¨g
)->
y1
 +
u8g_vs_li°
[
u8g_vs_cuºít
].
y
;

102 ((
u8g_box_t
 *)
¨g
)->
x0
 = 0;

103 ((
u8g_box_t
 *)
¨g
)->
x1
 = 0;

104 ((
u8g_box_t
 *)
¨g
)->
y0
 = 0;

105 ((
u8g_box_t
 *)
¨g
)->
y1
 = 0;

108 
U8G_DEV_MSG_SET_PIXEL
:

109 
U8G_DEV_MSG_SET_8PIXEL
:

110 i‡–
u8g_vs_cuºít
 < 
u8g_vs_˙t
 )

112 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 -
u8g_vs_li°
[
u8g_vs_cuºít
].x;

113 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 -
u8g_vs_li°
[
u8g_vs_cuºít
].y;

114  
	`u8g_ˇŒ_dev_‚
(
u8g_vs_li°
[
u8g_vs_cuºít
].
u8g
, u8g_vs_li°[u8g_vs_cuºít].u8g->
dev
, 
msg
, 
¨g
);

119 
	}
}

123 
u8g_dev_t
 
	gu8g_dev_vs
 = { 
u8g_dev_vs_‚
, 
NULL
, NULL };

125 
	$u8g_SëVútuÆS¸ìnDimísi⁄
(
u8g_t
 *
vs_u8g
, 
u8g_uöt_t
 
width
, u8g_uöt_à
height
)

127 i‡–
vs_u8g
->
dev
 !&
u8g_dev_vs
 )

129 
u8g_vs_width
 = 
width
;

130 
u8g_vs_height
 = 
height
;

131 
	}
}

133 
uöt8_t
 
	$u8g_AddToVútuÆS¸ìn
(
u8g_t
 *
vs_u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_à*
chûd_u8g
)

135 i‡–
vs_u8g
->
dev
 !&
u8g_dev_vs
 )

137 i‡–
u8g_vs_˙t
 >
U8g_VS_MAX
 )

139 
u8g_vs_li°
[
u8g_vs_˙t
].
u8g
 = 
chûd_u8g
;

140 
u8g_vs_li°
[
u8g_vs_˙t
].
x
 = x;

141 
u8g_vs_li°
[
u8g_vs_˙t
].
y
 = y;

142 
u8g_vs_˙t
++;

144 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/OMC_tkj/bootloaders/atmega644p/ATmegaBOOT.c

69 
	~<öây≥s.h
>

70 
	~<avr/io.h
>

71 
	~<avr/pgm•a˚.h
>

72 
	~<avr/öãºu±.h
>

73 
	~<avr/wdt.h
>

74 
	~<avr/boŸ.h
>

76 #ifde‡
ADABOOT


77 
	#NUM_LED_FLASHES
 3

	)

78 
	#ADABOOT_VER
 1

	)

83 
	#MAX_ERROR_COUNT
 5

	)

87 
	#BAUD_RATE
 38400

	)

91 
	#HW_VER
 0x02

	)

92 
	#SW_MAJOR
 0x01

	)

93 
	#SW_MINOR
 0x10

	)

97 
	#LED_DDR
 
DDRB


	)

98 
	#LED_PORT
 
PORTB


	)

99 
	#LED_PIN
 
PINB


	)

100 
	#LED
 
PINB0


	)

104 
	#SIG1
 0x1E

105 #i‡
	`deföed
(
__AVR_ATmega644P__
)

	)

106 
	#SIG2
 0x96

	)

107 
	#SIG3
 0x0A

	)

108 #ñi‡
deföed
(
__AVR_ATmega644__
)

109 
	#SIG2
 0x96

	)

110 
	#SIG3
 0x09

	)

111 #ñi‡
deföed
(
__AVR_ATmega324P__
)

112 
	#SIG2
 0x95

	)

113 
	#SIG3
 0x08

	)

115 
	#PAGE_SIZE
 0x080U

116 
	#PAGE_SIZE_BYTES
 0x100U

117 

	)

119 
putch
();

120 
gëch
();

121 
gëNch
(
uöt8_t
);

122 
byã_ª•⁄£
(
uöt8_t
);

123 
nŸhög_ª•⁄£
();

124 
gëhex
();

125 
puthex
();

126 
Êash_Àd
(
uöt8_t
);

129 
	uaddªss_uni⁄


131 
uöt16_t
 
	mw‹d
;

132 
uöt8_t
 
	mbyã
[2];

133 } 
	gaddªss
;

135 
	uÀngth_uni⁄


137 
uöt16_t
 
	mw‹d
;

138 
uöt8_t
 
	mbyã
[2];

139 } 
	gÀngth
;

141 
	sÊags_°ru˘


143 
	mì¥om
 : 1;

144 
	mømpz
 : 1;

145 } 
	gÊags
;

147 
uöt8_t
 
	gbuff
[256];

149 
uöt8_t
 
	gîr‹_cou¡
 = 0;

150 
uöt8_t
 
	g§eg
;

152 (*
≠p_°¨t
)() = 0x0000;

155 
	$maö
()

157 
uöt8_t
 
ch
,
ch2
;

158 
uöt16_t
 
w
;

159 
uöt16_t
 
i
;

161 
asm
 volatile("nop\n\t");

163 #ifde‡
ADABOOT


164 
ch
 = 
MCUSR
;

165 
MCUSR
 = 0;

167 
WDTCSR
 |
	`_BV
(
WDCE
Ë| _BV(
WDE
);

168 
WDTCSR
 = 0;

171 i‡(! (
ch
 & 
	`_BV
(
EXTRF
)))

172 
	`≠p_°¨t
();

177 
UBRR0L
 = (
uöt8_t
)(
F_CPU
/(
BAUD_RATE
*16L)-1);

178 
UBRR0H
 = (
F_CPU
/(
BAUD_RATE
*16L)-1) >> 8;

179 
UCSR0B
 = (1<<
RXEN0
Ë| (1<<
TXEN0
);

180 
UCSR0C
 = (1<<
UCSZ00
Ë| (1<<
UCSZ01
);

185 
DDRD
 &~
	`_BV
(
PIND0
);

186 
PORTD
 |
	`_BV
(
PIND0
);

189 
LED_DDR
 |
	`_BV
(
LED
);

196 
	`Êash_Àd
(
NUM_LED_FLASHES
);

198 #ifdef 
ADABOOT


199 
	`Êash_Àd
(
ADABOOT_VER
);

206 
ch
 = 
	`gëch
();

211 if(
ch
=='0')

212 
	`nŸhög_ª•⁄£
();

218 if(
ch
=='1')

220 i‡(
	`gëch
() == ' ')

222 
	`putch
(0x14);

223 
	`putch
('A');

224 
	`putch
('V');

225 
	`putch
('R');

226 
	`putch
(' ');

227 
	`putch
('I');

228 
	`putch
('S');

229 
	`putch
('P');

230 
	`putch
(0x10);

234 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

235 
	`≠p_°¨t
();

241 if(
ch
=='@')

243 
ch2
 = 
	`gëch
();

244 i‡(
ch2
 > 0x85)

245 
	`gëch
();

246 
	`nŸhög_ª•⁄£
();

251 if(
ch
=='A')

253 
ch2
 = 
	`gëch
();

254 if(
ch2
 == 0x80)

255 
	`byã_ª•⁄£
(
HW_VER
);

256 if(
ch2
==0x81)

257 
	`byã_ª•⁄£
(
SW_MAJOR
);

258 if(
ch2
==0x82)

259 
	`byã_ª•⁄£
(
SW_MINOR
);

260 if(
ch2
==0x98)

261 
	`byã_ª•⁄£
(0x03);

263 
	`byã_ª•⁄£
(0x00);

268 if(
ch
=='B')

270 
	`gëNch
(20);

271 
	`nŸhög_ª•⁄£
();

276 if(
ch
=='E')

278 
	`gëNch
(5);

279 
	`nŸhög_ª•⁄£
();

284 if(
ch
=='P')

286 
	`nŸhög_ª•⁄£
();

291 if(
ch
=='Q')

293 
	`nŸhög_ª•⁄£
();

294 #ifde‡
ADABOOT


296 
WDTCSR
 = 
	`_BV
(
WDE
);

303 if(
ch
=='R')

305 
	`nŸhög_ª•⁄£
();

312 if(
ch
=='U')

314 
addªss
.
byã
[0] = 
	`gëch
();

315 
addªss
.
byã
[1] = 
	`gëch
();

316 
	`nŸhög_ª•⁄£
();

321 if(
ch
=='V')

323 
	`gëNch
(4);

324 
	`byã_ª•⁄£
(0x00);

329 if(
ch
=='d')

331 
Àngth
.
byã
[1] = 
	`gëch
();

332 
Àngth
.
byã
[0] = 
	`gëch
();

334 
Êags
.
ì¥om
 = 0;

335 i‡(
	`gëch
() == 'E')

336 
Êags
.
ì¥om
 = 1;

338 
i
=0; i<
PAGE_SIZE
; i++)

339 
buff
[
i
] = 0;

341 
w
 = 0; w < 
Àngth
.
w‹d
; w++)

344 
buff
[
w
] = 
	`gëch
();

347 i‡(
	`gëch
() == ' ')

349 i‡(
Êags
.
ì¥om
)

352 
w
=0;w<
Àngth
.
w‹d
;w++)

354 
EECR
 & (1<<
EEPE
));

356 
EEAR
 = (
uöt16_t
)(*)
addªss
.
w‹d
;

357 
EEDR
 = 
buff
[
w
];

358 
EECR
 |(1<<
EEMPE
);

359 
EECR
 |(1<<
EEPE
);

361 
addªss
.
w‹d
++;

367 
addªss
.
w‹d
 =áddress.word << 1;

370 i‡((
Àngth
.
byã
[0] & 0x01))

371 
Àngth
.
w‹d
++;

376 
EECR
 & (1<<
EEPE
));

378 
asm
 volatile(

452 : "=m" (
SPMCSR
Ë: "M" (
PAGE_SIZE
) : "r0","r16","r17","r24","r25","r28","r29","r30","r31"

456 
	`putch
(0x14);

457 
	`putch
(0x10);

461 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

462 
	`≠p_°¨t
();

467 if(
ch
=='t')

469 
Àngth
.
byã
[1] = 
	`gëch
();

470 
Àngth
.
byã
[0] = 
	`gëch
();

472 i‡(
	`gëch
() == 'E')

473 
Êags
.
ì¥om
 = 1;

476 
Êags
.
ì¥om
 = 0;

477 
addªss
.
w‹d
 =áddress.word << 1;

481 i‡(
	`gëch
() == ' ')

483 
	`putch
(0x14);

484 
w
=0; w<
Àngth
.
w‹d
; w++)

487 i‡(
Êags
.
ì¥om
)

490 
EECR
 & (1<<
EEPE
));

491 
EEAR
 = (
uöt16_t
)(*)
addªss
.
w‹d
;

492 
EECR
 |(1<<
EERE
);

493 
	`putch
(
EEDR
);

495 
addªss
.
w‹d
++;

499 i‡(!
Êags
.
ømpz
)

500 
	`putch
(
	`pgm_ªad_byã_√¨
(
addªss
.
w‹d
));

502 
addªss
.
w‹d
++;

505 
	`putch
(0x10);

511 if(
ch
=='u')

513 i‡(
	`gëch
() == ' ')

515 
	`putch
(0x14);

516 
	`putch
(
SIG1
);

517 
	`putch
(
SIG2
);

518 
	`putch
(
SIG3
);

519 
	`putch
(0x10);

523 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

524 
	`≠p_°¨t
();

530 if(
ch
=='v')

531 
	`byã_ª•⁄£
(0x00);

533 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

534 
	`≠p_°¨t
();

538 
	}
}

541 
	$gëhex
()

543 
ah
,
Æ
;

545 
ah
 = 
	`gëch
();

546 
	`putch
(
ah
);

547 
Æ
 = 
	`gëch
();

548 
	`putch
(
Æ
);

550 if(
ah
 >= 'a')

551 
ah
 =áh - 'a' + 0x0a;

552 if(
ah
 >= '0')

553 
ah
 -= '0';

554 if(
Æ
 >= 'a')

555 
Æ
 =ál - 'a' + 0x0a;

556 if(
Æ
 >= '0')

557 
Æ
 -= '0';

559  (
ah
 << 4Ë+ 
Æ
;

560 
	}
}

563 
	$puthex
(
ch
)

565 
ah
,
Æ
;

567 
ah
 = (
ch
 & 0xf0) >> 4;

568 if(
ah
 >= 0x0a)

569 
ah
 =áh - 0x0a + 'a';

571 
ah
 += '0';

573 
Æ
 = (
ch
 & 0x0f);

574 if(
Æ
 >= 0x0a)

575 
Æ
 =ál - 0x0a + 'a';

577 
Æ
 += '0';

579 
	`putch
(
ah
);

580 
	`putch
(
Æ
);

581 
	}
}

584 
	$putch
(
ch
)

586 !(
UCSR0A
 & 
	`_BV
(
UDRE0
)));

587 
UDR0
 = 
ch
;

588 
	}
}

593 
	$gëch
()

595 
uöt32_t
 
cou¡
 = 0;

597 #ifde‡
ADABOOT


598 
LED_PORT
 &~
	`_BV
(
LED
);

601 !(
UCSR0A
 & 
	`_BV
(
RXC0
)))

605 
cou¡
++;

606 i‡(
cou¡
 > 
MAX_TIME_COUNT
)

607 
	`≠p_°¨t
();

610 #ifde‡
ADABOOT


611 
LED_PORT
 |
	`_BV
(
LED
);

614  
UDR0
;

615 
	}
}

618 
	$gëNch
(
uöt8_t
 
cou¡
)

620 
uöt8_t
 
i
;

621 
i
=0;i<
cou¡
;i++)

623 !(
UCSR0A
 & 
	`_BV
(
RXC0
)));

624 
UDR0
;

626 
	}
}

629 
	$byã_ª•⁄£
(
uöt8_t
 
vÆ
)

631 i‡(
	`gëch
() == ' ')

633 
	`putch
(0x14);

634 
	`putch
(
vÆ
);

635 
	`putch
(0x10);

639 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

640 
	`≠p_°¨t
();

642 
	}
}

645 
	$nŸhög_ª•⁄£
()

647 i‡(
	`gëch
() == ' ')

649 
	`putch
(0x14);

650 
	`putch
(0x10);

654 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

655 
	`≠p_°¨t
();

657 
	}
}

659 #ifde‡
ADABOOT


661 
	$Êash_Àd
(
uöt8_t
 
cou¡
)

667 vﬁ©ûê
uöt32_t
 
l
;

669 i‡(
cou¡
 == 0) {

670 
cou¡
 = 
ADABOOT
;

674 
öt8_t
 
i
;

675 
i
 = 0; i < 
cou¡
; ++i) {

676 
LED_PORT
 |
	`_BV
(
LED
);

677 
l
 = 0;Ü < (
F_CPU
 / 1000); ++l);

678 
LED_PORT
 &~
	`_BV
(
LED
);

679 
l
 = 0;Ü < (
F_CPU
 / 250); ++l);

682 
l
 = 0;Ü < (
F_CPU
 / 100); ++l);

684 
	}
}

688 
	$Êash_Àd
(
uöt8_t
 
cou¡
)

693 vﬁ©ûê
uöt32_t
 
l
;

695 i‡(
cou¡
 == 0) {

696 
cou¡
 = 3;

699 
öt8_t
 
i
;

700 
i
 = 0; i < 
cou¡
; ++i) {

701 
LED_PORT
 |
	`_BV
(
LED
);

702 
l
 = 0;Ü < (
F_CPU
 / 1000); ++l);

703 
LED_PORT
 &~
	`_BV
(
LED
);

704 
l
 = 0;Ü < (
F_CPU
 / 1000); ++l);

707 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/OMC_tkj/variants/sanguino/pins_arduino.h

32 #i‚de‡
Pös_Arduöo_h


33 
	#Pös_Arduöo_h


	)

35 
	~<avr/pgm•a˚.h
>

37 c⁄° 
uöt8_t
 
	gSS
 = 4;

38 c⁄° 
uöt8_t
 
	gMOSI
 = 5;

39 c⁄° 
uöt8_t
 
	gMISO
 = 6;

40 c⁄° 
uöt8_t
 
	gSCK
 = 7;

42 c⁄° 
uöt8_t
 
	gSDA
 = 17;

43 c⁄° 
uöt8_t
 
	gSCL
 = 16;

45 
	#LED_BUILTIN
 0

	)

47 c⁄° 
uöt8_t
 
	gA0
 = 31;

48 c⁄° 
uöt8_t
 
	gA1
 = 30;

49 c⁄° 
uöt8_t
 
	gA2
 = 29;

50 c⁄° 
uöt8_t
 
	gA3
 = 28;

51 c⁄° 
uöt8_t
 
	gA4
 = 27;

52 c⁄° 
uöt8_t
 
	gA5
 = 26;

53 c⁄° 
uöt8_t
 
	gA6
 = 25;

54 c⁄° 
uöt8_t
 
	gA7
 = 24;

81 
	#NUM_DIGITAL_PINS
 24

	)

82 
	#NUM_ANALOG_INPUTS
 8

	)

84 
	#™ÆogI≈utToDigôÆPö
(
p
Ë(’ < 8Ë? 31 - (p): -1)

	)

85 
	#™ÆogPöToCh™√l
(
p
Ë(’ < 8Ë? (pË: 31 - (p))

	)

87 
	#digôÆPöHasPWM
(
p
Ë(’Ë=3 || (pË=4 || (pË=12 || (pË=13 || (pË=14 || (pË=15 )

	)

89 
	#digôÆPöToPCICR
(
p
Ë–((’Ë>0Ë&& (’Ë<31)Ë? (&
PCICR
Ë: ((
uöt8_t
 *)0Ë)

	)

91 
	#digôÆPöToPCICRbô
(
p
) ( (((p) >= 24) && ((p) <= 31)) ? 0 : \

92 –(((
p
) >= 0) && ((p) <= 7)) ? 1 : \

93 –(((
p
) >= 16) && ((p) <= 23)) ? 2 : \

94 –(((
p
) >= 8) && ((p) <= 15)) ? 3 : \

95 0 ) ) ) )

	)

97 
	#digôÆPöToPCMSK
(
p
Ë–((’Ë>24Ë&& (’Ë<31)Ë? (&
PCMSK0
) : \

98 –(((
p
Ë>0Ë&& (’Ë<7)Ë? (&
PCMSK1
) : \

99 –(((
p
Ë>16Ë&& (’Ë<23)Ë? (&
PCMSK2
) : \

100 –(((
p
Ë>8Ë&& (’Ë<15)Ë? (&
PCMSK3
) : \

101 ((
uöt8_t
 *)0ËËËË)

	)

104 
	#digôÆPöToPCMSKbô
(
p
) ( (((p) >= 24) && ((p) <= 31)) ? (31 - (p)) : \

105 –(((
p
) >= 0) && ((p) <= 7)) ? (p) : \

106 –(((
p
) >= 16) && ((p) <= 23)) ? ((p) - 16) : \

107 –(((
p
) >= 8) && ((p) <= 15)) ? ((p) - 8) : \

108 0 ) ) ) )

	)

110 
	#digôÆPöToI¡îru±
(
p
Ë(’Ë=10 ? 0 : (’Ë=11 ? 1 : (’Ë=2 ? 2 : 
NOT_AN_INTERRUPT
)))

	)

112 #ifde‡
ARDUINO_MAIN


116 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_mode_PGM
[] =

118 
NOT_A_PORT
,

119 (
uöt16_t
Ë&
DDRA
,

120 (
uöt16_t
Ë&
DDRB
,

121 (
uöt16_t
Ë&
DDRC
,

122 (
uöt16_t
Ë&
DDRD
,

125 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_ouçut_PGM
[] =

127 
NOT_A_PORT
,

128 (
uöt16_t
Ë&
PORTA
,

129 (
uöt16_t
Ë&
PORTB
,

130 (
uöt16_t
Ë&
PORTC
,

131 (
uöt16_t
Ë&
PORTD
,

133 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_öput_PGM
[] =

135 
NOT_A_PORT
,

136 (
uöt16_t
Ë&
PINA
,

137 (
uöt16_t
Ë&
PINB
,

138 (
uöt16_t
Ë&
PINC
,

139 (
uöt16_t
Ë&
PIND
,

141 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_p‹t_PGM
[] =

143 
PB
,

144 
PB
,

145 
PB
,

146 
PB
,

147 
PB
,

148 
PB
,

149 
PB
,

150 
PB
,

151 
PD
,

152 
PD
,

153 
PD
,

154 
PD
,

155 
PD
,

156 
PD
,

157 
PD
,

158 
PD
,

159 
PC
,

160 
PC
,

161 
PC
,

162 
PC
,

163 
PC
,

164 
PC
,

165 
PC
,

166 
PC
,

167 
PA
,

168 
PA
,

169 
PA
,

170 
PA
,

171 
PA
,

172 
PA
,

173 
PA
,

174 
PA


176 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_bô_mask_PGM
[] =

178 
_BV
(0),

179 
_BV
(1),

180 
_BV
(2),

181 
_BV
(3),

182 
_BV
(4),

183 
_BV
(5),

184 
_BV
(6),

185 
_BV
(7),

186 
_BV
(0),

187 
_BV
(1),

188 
_BV
(2),

189 
_BV
(3),

190 
_BV
(4),

191 
_BV
(5),

192 
_BV
(6),

193 
_BV
(7),

194 
_BV
(0),

195 
_BV
(1),

196 
_BV
(2),

197 
_BV
(3),

198 
_BV
(4),

199 
_BV
(5),

200 
_BV
(6),

201 
_BV
(7),

202 
_BV
(7),

203 
_BV
(6),

204 
_BV
(5),

205 
_BV
(4),

206 
_BV
(3),

207 
_BV
(2),

208 
_BV
(1),

209 
_BV
(0)

211 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_timî_PGM
[] =

213 
NOT_ON_TIMER
,

214 
NOT_ON_TIMER
,

215 
NOT_ON_TIMER
,

216 
TIMER0A
,

217 
TIMER0B
,

218 
NOT_ON_TIMER
,

219 
NOT_ON_TIMER
,

220 
NOT_ON_TIMER
,

221 
NOT_ON_TIMER
,

222 
NOT_ON_TIMER
,

223 
NOT_ON_TIMER
,

224 
NOT_ON_TIMER
,

225 
TIMER1B
,

226 
TIMER1A
,

227 
TIMER2B
,

228 
TIMER2A
,

229 
NOT_ON_TIMER
,

230 
NOT_ON_TIMER
,

231 
NOT_ON_TIMER
,

232 
NOT_ON_TIMER
,

233 
NOT_ON_TIMER
,

234 
NOT_ON_TIMER
,

235 
NOT_ON_TIMER
,

236 
NOT_ON_TIMER
,

237 
NOT_ON_TIMER
,

238 
NOT_ON_TIMER
,

239 
NOT_ON_TIMER
,

240 
NOT_ON_TIMER
,

241 
NOT_ON_TIMER
,

242 
NOT_ON_TIMER
,

243 
NOT_ON_TIMER
,

244 
NOT_ON_TIMER


264 
	#SERIAL_PORT_MONITOR
 
Sîül


	)

265 
	#SERIAL_PORT_HARDWARE
 
Sîül


	)

266 
	#SERIAL_PORT_HARDWARE1
 
Sîül1


	)

267 
	#SERIAL_PORT_HARDWARE_OPEN
 
Sîül1


	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/bootloaders/atmega/ATmegaBOOT_168.c

69 
	~<öây≥s.h
>

70 
	~<avr/io.h
>

71 
	~<avr/pgm•a˚.h
>

72 
	~<avr/öãºu±.h
>

73 
	~<avr/wdt.h
>

74 
	~<utû/dñay.h
>

78 #i‡!
deföed
(
__AVR_ATmega168__
Ë|| !deföed(
__AVR_ATmega328P__
)

79 
	~<avr/ì¥om.h
>

91 
	#MAX_ERROR_COUNT
 5

	)

96 #i‚de‡
BAUD_RATE


97 
	#BAUD_RATE
 19200

	)

103 
	#HW_VER
 0x02

	)

104 
	#SW_MAJOR
 0x01

	)

105 
	#SW_MINOR
 0x10

	)

112 #ifde‡
__AVR_ATmega128__


113 
	#BL_DDR
 
DDRF


	)

114 
	#BL_PORT
 
PORTF


	)

115 
	#BL_PIN
 
PINF


	)

116 
	#BL0
 
PINF7


	)

117 
	#BL1
 
PINF6


	)

118 #ñi‡
deföed
 
__AVR_ATmega1280__


120 #ñi‡
deföed
 
__AVR_ATmega1284P_
 || deföed 
__AVR_ATmega644P__


124 
	#BL_DDR
 
DDRD


	)

125 
	#BL_PORT
 
PORTD


	)

126 
	#BL_PIN
 
PIND


	)

127 
	#BL
 
PIND6


	)

133 #i‡
deföed
 
__AVR_ATmega128__
 || deföed 
__AVR_ATmega1280__


135 
	#LED_DDR
 
DDRB


	)

136 
	#LED_PORT
 
PORTB


	)

137 
	#LED_PIN
 
PINB


	)

138 
	#LED
 
PINB7


	)

139 #ñi‡
deföed
 
__AVR_ATmega1284P__
 || deföed 
__AVR_ATmega644P__


140 
	#LED_DDR
 
DDRB


	)

141 
	#LED_PORT
 
PORTB


	)

142 
	#LED_PIN
 
PINB


	)

143 
	#LED
 
PINB0


	)

147 
	#LED_DDR
 
DDRB


	)

148 
	#LED_PORT
 
PORTB


	)

149 
	#LED_PIN
 
PINB


	)

150 
	#LED
 
PINB5


	)

155 #i‡
deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
)

156 
	#MONITOR
 1

	)

162 
	#SIG1
 0x1E

163 

	)

164 #i‡
deföed
 
__AVR_ATmega1280__


165 
	#SIG2
 0x97

	)

166 
	#SIG3
 0x03

	)

167 
	#PAGE_SIZE
 0x80U

168 

	)

169 #ñi‡
deföed
 
__AVR_ATmega1284P__


170 
	#SIG2
 0x97

	)

171 
	#SIG3
 0x05

	)

172 
	#PAGE_SIZE
 0x080U

173 

	)

174 #ñi‡
deföed
 
__AVR_ATmega1281__


175 
	#SIG2
 0x97

	)

176 
	#SIG3
 0x04

	)

177 
	#PAGE_SIZE
 0x80U

178 

	)

179 #ñi‡
deföed
 
__AVR_ATmega644P__


180 
	#SIG2
 0x96

	)

181 
	#SIG3
 0x0A

	)

182 
	#PAGE_SIZE
 0x080U

183 

	)

184 #ñi‡
deföed
 
__AVR_ATmega128__


185 
	#SIG2
 0x97

	)

186 
	#SIG3
 0x02

	)

187 
	#PAGE_SIZE
 0x80U

188 

	)

189 #ñi‡
deföed
 
__AVR_ATmega64__


190 
	#SIG2
 0x96

	)

191 
	#SIG3
 0x02

	)

192 
	#PAGE_SIZE
 0x80U

193 

	)

194 #ñi‡
deföed
 
__AVR_ATmega32__


195 
	#SIG2
 0x95

	)

196 
	#SIG3
 0x02

	)

197 
	#PAGE_SIZE
 0x40U

198 

	)

199 #ñi‡
deföed
 
__AVR_ATmega16__


200 
	#SIG2
 0x94

	)

201 
	#SIG3
 0x03

	)

202 
	#PAGE_SIZE
 0x40U

203 

	)

204 #ñi‡
deföed
 
__AVR_ATmega8__


205 
	#SIG2
 0x93

	)

206 
	#SIG3
 0x07

	)

207 
	#PAGE_SIZE
 0x20U

208 

	)

209 #ñi‡
deföed
 
__AVR_ATmega88__


210 
	#SIG2
 0x93

	)

211 
	#SIG3
 0x0a

	)

212 
	#PAGE_SIZE
 0x20U

213 

	)

214 #ñi‡
deföed
 
__AVR_ATmega168__


215 
	#SIG2
 0x94

	)

216 
	#SIG3
 0x06

	)

217 
	#PAGE_SIZE
 0x40U

218 

	)

219 #ñi‡
deföed
 
__AVR_ATmega328P__


220 
	#SIG2
 0x95

	)

221 
	#SIG3
 0x0F

	)

222 
	#PAGE_SIZE
 0x40U

223 

	)

224 #ñi‡
deföed
 
__AVR_ATmega162__


225 
	#SIG2
 0x94

	)

226 
	#SIG3
 0x04

	)

227 
	#PAGE_SIZE
 0x40U

228 

	)

229 #ñi‡
deföed
 
__AVR_ATmega163__


230 
	#SIG2
 0x94

	)

231 
	#SIG3
 0x02

	)

232 
	#PAGE_SIZE
 0x40U

233 

	)

234 #ñi‡
deföed
 
__AVR_ATmega169__


235 
	#SIG2
 0x94

	)

236 
	#SIG3
 0x05

	)

237 
	#PAGE_SIZE
 0x40U

238 

	)

239 #ñi‡
deföed
 
__AVR_ATmega8515__


240 
	#SIG2
 0x93

	)

241 
	#SIG3
 0x06

	)

242 
	#PAGE_SIZE
 0x20U

243 

	)

244 #ñi‡
deföed
 
__AVR_ATmega8535__


245 
	#SIG2
 0x93

	)

246 
	#SIG3
 0x08

	)

247 
	#PAGE_SIZE
 0x20U

249 

	)

252 
putch
();

253 
gëch
();

254 
gëNch
(
uöt8_t
);

255 
byã_ª•⁄£
(
uöt8_t
);

256 
nŸhög_ª•⁄£
();

257 
gëhex
();

258 
puthex
();

259 
Êash_Àd
(
uöt8_t
);

262 
	uaddªss_uni⁄
 {

263 
uöt16_t
 
	mw‹d
;

264 
uöt8_t
 
	mbyã
[2];

265 } 
	gaddªss
;

267 
	uÀngth_uni⁄
 {

268 
uöt16_t
 
	mw‹d
;

269 
uöt8_t
 
	mbyã
[2];

270 } 
	gÀngth
;

272 
	sÊags_°ru˘
 {

273 
	mì¥om
 : 1;

274 
	mømpz
 : 1;

275 } 
	gÊags
;

277 
uöt8_t
 
	gbuff
[256];

278 
uöt8_t
 
	gaddªss_high
;

280 
uöt8_t
 
	g∑gesz
=0x80;

282 
uöt8_t
 
	gi
;

283 
uöt8_t
 
	gboŸu¨t
 = 0;

285 
uöt8_t
 
	gîr‹_cou¡
 = 0;

287 (*
≠p_°¨t
)() = 0x0000;

291 
	$maö
()

293 
uöt8_t
 
ch
,
ch2
;

294 
uöt16_t
 
w
;

296 #ifde‡
WATCHDOG_MODS


297 
ch
 = 
MCUSR
;

298 
MCUSR
 = 0;

300 
WDTCSR
 |
	`_BV
(
WDCE
Ë| _BV(
WDE
);

301 
WDTCSR
 = 0;

304 i‡(! (
ch
 & 
	`_BV
(
EXTRF
)))

305 
	`≠p_°¨t
();

307 
asm
 volatile("nop\n\t");

312 #ifde‡
__AVR_ATmega128__


313 
BL_DDR
 &~
	`_BV
(
BL0
);

314 
BL_DDR
 &~
	`_BV
(
BL1
);

315 
BL_PORT
 |
	`_BV
(
BL0
);

316 
BL_PORT
 |
	`_BV
(
BL1
);

327 #ifde‡
__AVR_ATmega128__


329 if(
	`bô_is_˛ór
(
BL_PIN
, 
BL0
)) {

330 
boŸu¨t
 = 1;

332 if(
	`bô_is_˛ór
(
BL_PIN
, 
BL1
)) {

333 
boŸu¨t
 = 2;

337 #i‡
deföed
 
__AVR_ATmega1280__
 || deföed 
__AVR_ATmega1284P__
 || deföed 
__AVR_ATmega644P__


340 
boŸu¨t
 = 1;

344 if(
	`pgm_ªad_byã_√¨
(0x0000) != 0xFF) {

346 #ifde‡
__AVR_ATmega128__


348 if(!
boŸu¨t
) {

349 
	`≠p_°¨t
();

360 #ifde‡
__AVR_ATmega128__


362 if(!
boŸu¨t
) {

363 
boŸu¨t
 = 1;

369 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1284P__
Ë|| deföed(
__AVR_ATmega644P__
)

370 if(
boŸu¨t
 == 1) {

371 
UBRR0L
 = (
uöt8_t
)(
F_CPU
/(
BAUD_RATE
*16L)-1);

372 
UBRR0H
 = (
F_CPU
/(
BAUD_RATE
*16L)-1) >> 8;

373 
UCSR0A
 = 0x00;

374 
UCSR0C
 = 0x06;

375 
UCSR0B
 = 
	`_BV
(
TXEN0
)|_BV(
RXEN0
);

377 if(
boŸu¨t
 == 2) {

378 
UBRR1L
 = (
uöt8_t
)(
F_CPU
/(
BAUD_RATE
*16L)-1);

379 
UBRR1H
 = (
F_CPU
/(
BAUD_RATE
*16L)-1) >> 8;

380 
UCSR1A
 = 0x00;

381 
UCSR1C
 = 0x06;

382 
UCSR1B
 = 
	`_BV
(
TXEN1
)|_BV(
RXEN1
);

384 #ñi‡
deföed
 
__AVR_ATmega163__


385 
UBRR
 = (
uöt8_t
)(
F_CPU
/(
BAUD_RATE
*16L)-1);

386 
UBRRHI
 = (
F_CPU
/(
BAUD_RATE
*16L)-1) >> 8;

387 
UCSRA
 = 0x00;

388 
UCSRB
 = 
	`_BV
(
TXEN
)|_BV(
RXEN
);

389 #ñi‡
	`deföed
(
__AVR_ATmega168__
Ë|| deföed(
__AVR_ATmega328P__
)

391 #ifde‡
DOUBLE_SPEED


392 
UCSR0A
 = (1<<
U2X0
);

393 
UBRR0L
 = (
uöt8_t
)(
F_CPU
/(
BAUD_RATE
*8L)-1);

394 
UBRR0H
 = (
F_CPU
/(
BAUD_RATE
*8L)-1) >> 8;

396 
UBRR0L
 = (
uöt8_t
)(
F_CPU
/(
BAUD_RATE
*16L)-1);

397 
UBRR0H
 = (
F_CPU
/(
BAUD_RATE
*16L)-1) >> 8;

400 
UCSR0B
 = (1<<
RXEN0
Ë| (1<<
TXEN0
);

401 
UCSR0C
 = (1<<
UCSZ00
Ë| (1<<
UCSZ01
);

406 
DDRD
 &~
	`_BV
(
PIND0
);

407 
PORTD
 |
	`_BV
(
PIND0
);

408 #ñi‡
deföed
 
__AVR_ATmega8__


410 
UBRRH
 = (((
F_CPU
/
BAUD_RATE
)/16)-1)>>8;

411 
UBRRL
 = (((
F_CPU
/
BAUD_RATE
)/16)-1);

412 
UCSRB
 = (1<<
RXEN
)|(1<<
TXEN
);

413 
UCSRC
 = (1<<
URSEL
)|(1<<
UCSZ1
)|(1<<
UCSZ0
);

416 
UBRRL
 = (
uöt8_t
)(
F_CPU
/(
BAUD_RATE
*16L)-1);

417 
UBRRH
 = (
F_CPU
/(
BAUD_RATE
*16L)-1) >> 8;

418 
UCSRA
 = 0x00;

419 
UCSRC
 = 0x06;

420 
UCSRB
 = 
	`_BV
(
TXEN
)|_BV(
RXEN
);

423 #i‡
deföed
 
__AVR_ATmega1280__


428 
DDRE
 &~
	`_BV
(
PINE0
);

429 
PORTE
 |
	`_BV
(
PINE0
);

434 
LED_DDR
 |
	`_BV
(
LED
);

438 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1284P__
Ë|| deföed(
__AVR_ATmega644P__
)

440 
	`Êash_Àd
(
NUM_LED_FLASHES
 + 
boŸu¨t
);

442 
	`Êash_Àd
(
NUM_LED_FLASHES
);

453 
ch
 = 
	`gëch
();

458 if(
ch
=='0') {

459 
	`nŸhög_ª•⁄£
();

466 if(
ch
=='1') {

467 i‡(
	`gëch
() == ' ') {

468 
	`putch
(0x14);

469 
	`putch
('A');

470 
	`putch
('V');

471 
	`putch
('R');

472 
	`putch
(' ');

473 
	`putch
('I');

474 
	`putch
('S');

475 
	`putch
('P');

476 
	`putch
(0x10);

478 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

479 
	`≠p_°¨t
();

485 if(
ch
=='@') {

486 
ch2
 = 
	`gëch
();

487 i‡(
ch2
>0x85Ë
	`gëch
();

488 
	`nŸhög_ª•⁄£
();

493 if(
ch
=='A') {

494 
ch2
 = 
	`gëch
();

495 if(
ch2
==0x80Ë
	`byã_ª•⁄£
(
HW_VER
);

496 if(
ch2
==0x81Ë
	`byã_ª•⁄£
(
SW_MAJOR
);

497 if(
ch2
==0x82Ë
	`byã_ª•⁄£
(
SW_MINOR
);

498 if(
ch2
==0x98Ë
	`byã_ª•⁄£
(0x03);

499 
	`byã_ª•⁄£
(0x00);

504 if(
ch
=='B') {

505 
	`gëNch
(20);

506 
	`nŸhög_ª•⁄£
();

511 if(
ch
=='E') {

512 
	`gëNch
(5);

513 
	`nŸhög_ª•⁄£
();

519 if(
ch
=='P' || ch=='R') {

520 
	`nŸhög_ª•⁄£
();

525 if(
ch
=='Q') {

526 
	`nŸhög_ª•⁄£
();

527 #ifde‡
WATCHDOG_MODS


529 
WDTCSR
 = 
	`_BV
(
WDE
);

538 if(
ch
=='U') {

539 
addªss
.
byã
[0] = 
	`gëch
();

540 
addªss
.
byã
[1] = 
	`gëch
();

541 
	`nŸhög_ª•⁄£
();

546 if(
ch
=='V') {

547 i‡(
	`gëch
() == 0x30) {

548 
	`gëch
();

549 
ch
 = 
	`gëch
();

550 
	`gëch
();

551 i‡(
ch
 == 0) {

552 
	`byã_ª•⁄£
(
SIG1
);

553 } i‡(
ch
 == 1) {

554 
	`byã_ª•⁄£
(
SIG2
);

556 
	`byã_ª•⁄£
(
SIG3
);

559 
	`gëNch
(3);

560 
	`byã_ª•⁄£
(0x00);

566 if(
ch
=='d') {

567 
Àngth
.
byã
[1] = 
	`gëch
();

568 
Àngth
.
byã
[0] = 
	`gëch
();

569 
Êags
.
ì¥om
 = 0;

570 i‡(
	`gëch
(Ë='E'Ë
Êags
.
ì¥om
 = 1;

571 
w
=0;w<
Àngth
.
w‹d
;w++) {

572 
buff
[
w
] = 
	`gëch
();

574 i‡(
	`gëch
() == ' ') {

575 i‡(
Êags
.
ì¥om
) {

576 
addªss
.
w‹d
 <<= 1;

577 
w
=0;w<
Àngth
.
w‹d
;w++) {

578 #i‡
	`deföed
(
__AVR_ATmega168__
Ë|| deföed(
__AVR_ATmega328P__
)

579 
EECR
 & (1<<
EEPE
));

580 
EEAR
 = (
uöt16_t
)(*)
addªss
.
w‹d
;

581 
EEDR
 = 
buff
[
w
];

582 
EECR
 |(1<<
EEMPE
);

583 
EECR
 |(1<<
EEPE
);

585 
	`ì¥om_wrôe_byã
((*)
addªss
.
w‹d
,
buff
[
w
]);

587 
addªss
.
w‹d
++;

591 i‡(
addªss
.
byã
[1]>127Ë
addªss_high
 = 0x01;

592 
addªss_high
 = 0x00;

593 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1281__
Ë|| deföed(
__AVR_ATmega1284P__
)

594 
RAMPZ
 = 
addªss_high
;

596 
addªss
.
w‹d
 =áddress.word << 1;

598 i‡((
Àngth
.
byã
[0] & 0x01)ËÀngth.
w‹d
++;

599 
	`˛i
();

600 #i‡
	`deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1281__
Ë|| deföed(
__AVR_ATmega1284P__
Ë|| deföed(
__AVR_ATmega644P__
)

601 
	`bô_is_£t
(
EECR
,
EEPE
));

603 
	`bô_is_£t
(
EECR
,
EEWE
));

605 
asm
 volatile(

624 #ifde‡
__AVR_ATmega163__


637 #ifde‡
__AVR_ATmega163__


664 #ifde‡
__AVR_ATmega163__


670 #ifde‡
__AVR_ATmega163__


683 #ifde‡
__AVR_ATmega163__


699 #i‡
deföed
 
__AVR_ATmega168__
 || 
__AVR_ATmega328P__
 || 
__AVR_ATmega128__
 || 
__AVR_ATmega1280__
 || 
__AVR_ATmega1281__
 || 
__AVR_ATmega1284P__
 || 
__AVR_ATmega644P__


700 : "=m" (
SPMCSR
Ë: "M" (
PAGE_SIZE
) : "r0","r16","r17","r24","r25","r28","r29","r30","r31"

702 : "=m" (
SPMCR
Ë: "M" (
PAGE_SIZE
) : "r0","r16","r17","r24","r25","r28","r29","r30","r31"

708 
	`putch
(0x14);

709 
	`putch
(0x10);

711 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

712 
	`≠p_°¨t
();

718 if(
ch
=='t') {

719 
Àngth
.
byã
[1] = 
	`gëch
();

720 
Àngth
.
byã
[0] = 
	`gëch
();

721 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1284P__
Ë|| deföed(
__AVR_ATmega644P__
)

722 i‡(
addªss
.
w‹d
>0x7FFFË
Êags
.
ømpz
 = 1;

723 
Êags
.
ømpz
 = 0;

725 
addªss
.
w‹d
 =áddress.word << 1;

726 i‡(
	`gëch
(Ë='E'Ë
Êags
.
ì¥om
 = 1;

727 
Êags
.
ì¥om
 = 0;

728 i‡(
	`gëch
() == ' ') {

729 
	`putch
(0x14);

730 
w
=0;w < 
Àngth
.
w‹d
;w++) {

731 i‡(
Êags
.
ì¥om
) {

732 #i‡
	`deföed
(
__AVR_ATmega168__
Ë|| deföed(
__AVR_ATmega328P__
)

733 
EECR
 & (1<<
EEPE
));

734 
EEAR
 = (
uöt16_t
)(*)
addªss
.
w‹d
;

735 
EECR
 |(1<<
EERE
);

736 
	`putch
(
EEDR
);

738 
	`putch
(
	`ì¥om_ªad_byã
((*)
addªss
.
w‹d
));

740 
addªss
.
w‹d
++;

744 i‡(!
Êags
.
ømpz
Ë
	`putch
(
	`pgm_ªad_byã_√¨
(
addªss
.
w‹d
));

745 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1284P__
)

746 
	`putch
(
	`pgm_ªad_byã_Ár
(
addªss
.
w‹d
 + 0x10000));

749 
addªss
.
w‹d
++;

752 
	`putch
(0x10);

758 if(
ch
=='u') {

759 i‡(
	`gëch
() == ' ') {

760 
	`putch
(0x14);

761 
	`putch
(
SIG1
);

762 
	`putch
(
SIG2
);

763 
	`putch
(
SIG3
);

764 
	`putch
(0x10);

766 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

767 
	`≠p_°¨t
();

773 if(
ch
=='v') {

774 
	`byã_ª•⁄£
(0x00);

778 #i‡
deföed
 
MONITOR


783 if(
ch
=='!') {

784 
ch
 = 
	`gëch
();

785 if(
ch
=='!') {

786 
ch
 = 
	`gëch
();

787 if(
ch
=='!') {

788 
PGM_P
 
wñcome
 = "";

789 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
)

790 
uöt16_t
 
exèddr
;

792 
uöt8_t
 
addæ
, 
addrh
;

794 #ifde‡
CRUMB128


795 
wñcome
 = "ATmegaBOOT / Crumb128 - (C) J.P.Kyle, E.Lins - 050815\n\r";

796 #ñi‡
deföed
 
PROBOMEGA128


797 
wñcome
 = "ATmegaBOOT / PROBOmega128 - (C) J.P.Kyle, E.Lins - 050815\n\r";

798 #ñi‡
deföed
 
SAVVY128


799 
wñcome
 = "ATmegaBOOT / Savvy128 - (C) J.P.Kyle, E.Lins - 050815\n\r";

800 #ñi‡
deföed
 
__AVR_ATmega1280__


801 
wñcome
 = "ATmegaBOOT / Arduino Mega - (C) Arduino LLC - 090930\n\r";

805 
LED_DDR
 |
	`_BV
(
LED
);

806 
LED_PORT
 &~
	`_BV
(
LED
);

809 
i
=0; 
wñcome
[i] != '\0'; ++i) {

810 
	`putch
(
wñcome
[
i
]);

815 
	`putch
('\n');

816 
	`putch
('\r');

817 
	`putch
(':');

818 
	`putch
(' ');

820 
ch
 = 
	`gëch
();

821 
	`putch
(
ch
);

824 if(
ch
 == 't') {

825 if(
	`bô_is_£t
(
LED_PIN
,
LED
)) {

826 
LED_PORT
 &~
	`_BV
(
LED
);

827 
	`putch
('1');

829 
LED_PORT
 |
	`_BV
(
LED
);

830 
	`putch
('0');

835 if(
ch
 == 'r') {

836 
ch
 = 
	`gëch
(); 
	`putch
(ch);

837 
addrh
 = 
	`gëhex
();

838 
addæ
 = 
	`gëhex
();

839 
	`putch
('=');

840 
ch
 = *(
uöt8_t
 *)((
addrh
 << 8Ë+ 
addæ
);

841 
	`puthex
(
ch
);

845 if(
ch
 == 'w') {

846 
ch
 = 
	`gëch
(); 
	`putch
(ch);

847 
addrh
 = 
	`gëhex
();

848 
addæ
 = 
	`gëhex
();

849 
ch
 = 
	`gëch
(); 
	`putch
(ch);

850 
ch
 = 
	`gëhex
();

851 *(
uöt8_t
 *)((
addrh
 << 8Ë+ 
addæ
Ë
ch
;

855 if(
ch
 == 'u') {

857 
	`putch
(
	`gëch
());

860 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
)

862 if(
ch
 == 'b') {

863 
	`putch
('b');

864 
	`putch
('u');

865 
	`putch
('s');

866 
MCUCR
 = 0x80;

867 
XMCRA
 = 0;

868 
XMCRB
 = 0;

869 
exèddr
 = 0x1100;

871 
ch
 = *(vﬁ©ûê
uöt8_t
 *)
exèddr
;

872 if(++
exèddr
 == 0) {

873 
exèddr
 = 0x1100;

879 if(
ch
 == 'j') {

880 
	`≠p_°¨t
();

890 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
) {

891 
	`≠p_°¨t
();

895 
	}
}

898 
	$gëhexnib
() {

899 
a
;

900 
a
 = 
	`gëch
(); 
	`putch
(a);

901 if(
a
 >= 'a') {

902  (
a
 - 'a' + 0x0a);

903 } if(
a
 >= '0') {

904 (
a
 - '0');

906  
a
;

907 
	}
}

910 
	$gëhex
() {

911  (
	`gëhexnib
() << 4) + gethexnib();

912 
	}
}

915 
	$puthex
(
ch
) {

916 
ah
;

918 
ah
 = 
ch
 >> 4;

919 if(
ah
 >= 0x0a) {

920 
ah
 =áh - 0x0a + 'a';

922 
ah
 += '0';

925 
ch
 &= 0x0f;

926 if(
ch
 >= 0x0a) {

927 
ch
 = ch - 0x0a + 'a';

929 
ch
 += '0';

932 
	`putch
(
ah
);

933 
	`putch
(
ch
);

934 
	}
}

937 
	$putch
(
ch
)

939 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1284P__
Ë|| deföed(
__AVR_ATmega644P__
)

940 if(
boŸu¨t
 == 1) {

941 !(
UCSR0A
 & 
	`_BV
(
UDRE0
)));

942 
UDR0
 = 
ch
;

944 i‡(
boŸu¨t
 == 2) {

945 !(
UCSR1A
 & 
	`_BV
(
UDRE1
)));

946 
UDR1
 = 
ch
;

948 #ñi‡
	`deföed
(
__AVR_ATmega168__
Ë|| deföed(
__AVR_ATmega328P__
)

949 !(
UCSR0A
 & 
	`_BV
(
UDRE0
)));

950 
UDR0
 = 
ch
;

953 !(
UCSRA
 & 
	`_BV
(
UDRE
)));

954 
UDR
 = 
ch
;

956 
	}
}

959 
	$gëch
()

961 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1284P__
Ë|| deföed(
__AVR_ATmega644P__
)

962 
uöt32_t
 
cou¡
 = 0;

963 if(
boŸu¨t
 == 1) {

964 !(
UCSR0A
 & 
	`_BV
(
RXC0
))) {

967 
cou¡
++;

968 i‡(
cou¡
 > 
MAX_TIME_COUNT
)

969 
	`≠p_°¨t
();

972  
UDR0
;

974 if(
boŸu¨t
 == 2) {

975 !(
UCSR1A
 & 
	`_BV
(
RXC1
))) {

978 
cou¡
++;

979 i‡(
cou¡
 > 
MAX_TIME_COUNT
)

980 
	`≠p_°¨t
();

983  
UDR1
;

986 #ñi‡
	`deföed
(
__AVR_ATmega168__
Ë|| deföed(
__AVR_ATmega328P__
)

987 
uöt32_t
 
cou¡
 = 0;

988 !(
UCSR0A
 & 
	`_BV
(
RXC0
))){

991 
cou¡
++;

992 i‡(
cou¡
 > 
MAX_TIME_COUNT
)

993 
	`≠p_°¨t
();

995  
UDR0
;

998 
uöt32_t
 
cou¡
 = 0;

999 !(
UCSRA
 & 
	`_BV
(
RXC
))){

1002 
cou¡
++;

1003 i‡(
cou¡
 > 
MAX_TIME_COUNT
)

1004 
	`≠p_°¨t
();

1006  
UDR
;

1008 
	}
}

1011 
	$gëNch
(
uöt8_t
 
cou¡
)

1013 
cou¡
--) {

1014 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1284P__
Ë|| deföed(
__AVR_ATmega644P__
)

1015 if(
boŸu¨t
 == 1) {

1016 !(
UCSR0A
 & 
	`_BV
(
RXC0
)));

1017 
UDR0
;

1019 if(
boŸu¨t
 == 2) {

1020 !(
UCSR1A
 & 
	`_BV
(
RXC1
)));

1021 
UDR1
;

1023 #ñi‡
	`deföed
(
__AVR_ATmega168__
Ë|| deföed(
__AVR_ATmega328P__
)

1024 
	`gëch
();

1030 
	`gëch
();

1033 
	}
}

1036 
	$byã_ª•⁄£
(
uöt8_t
 
vÆ
)

1038 i‡(
	`gëch
() == ' ') {

1039 
	`putch
(0x14);

1040 
	`putch
(
vÆ
);

1041 
	`putch
(0x10);

1043 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

1044 
	`≠p_°¨t
();

1046 
	}
}

1049 
	$nŸhög_ª•⁄£
()

1051 i‡(
	`gëch
() == ' ') {

1052 
	`putch
(0x14);

1053 
	`putch
(0x10);

1055 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

1056 
	`≠p_°¨t
();

1058 
	}
}

1060 
	$Êash_Àd
(
uöt8_t
 
cou¡
)

1062 
cou¡
--) {

1063 
LED_PORT
 |
	`_BV
(
LED
);

1064 
	`_dñay_ms
(100);

1065 
LED_PORT
 &~
	`_BV
(
LED
);

1066 
	`_dñay_ms
(100);

1068 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/bootloaders/atmega644p/ATmegaBOOT.c

69 
	~<öây≥s.h
>

70 
	~<avr/io.h
>

71 
	~<avr/pgm•a˚.h
>

72 
	~<avr/öãºu±.h
>

73 
	~<avr/wdt.h
>

74 
	~<avr/boŸ.h
>

76 #ifde‡
ADABOOT


77 
	#NUM_LED_FLASHES
 3

	)

78 
	#ADABOOT_VER
 1

	)

83 
	#MAX_ERROR_COUNT
 5

	)

87 
	#BAUD_RATE
 38400

	)

91 
	#HW_VER
 0x02

	)

92 
	#SW_MAJOR
 0x01

	)

93 
	#SW_MINOR
 0x10

	)

97 
	#LED_DDR
 
DDRB


	)

98 
	#LED_PORT
 
PORTB


	)

99 
	#LED_PIN
 
PINB


	)

100 
	#LED
 
PINB0


	)

104 
	#SIG1
 0x1E

105 #i‡
	`deföed
(
__AVR_ATmega1284P__
)

	)

106 
	#SIG2
 0x97

	)

107 
	#SIG3
 0x05

	)

108 #ñi‡
deföed
(
__AVR_ATmega644P__
)

109 
	#SIG2
 0x96

	)

110 
	#SIG3
 0x0A

	)

111 #ñi‡
deföed
(
__AVR_ATmega644__
)

112 
	#SIG2
 0x96

	)

113 
	#SIG3
 0x09

	)

114 #ñi‡
deföed
(
__AVR_ATmega324P__
)

115 
	#SIG2
 0x95

	)

116 
	#SIG3
 0x08

	)

119 
	#PAGE_SIZE
 0x080U

120 
	#PAGE_SIZE_BYTES
 0x100U

121 

	)

123 
putch
();

124 
gëch
();

125 
gëNch
(
uöt8_t
);

126 
byã_ª•⁄£
(
uöt8_t
);

127 
nŸhög_ª•⁄£
();

128 
gëhex
();

129 
puthex
();

130 
Êash_Àd
(
uöt8_t
);

133 
	uaddªss_uni⁄


135 
uöt16_t
 
	mw‹d
;

136 
uöt8_t
 
	mbyã
[2];

137 } 
	gaddªss
;

139 
	uÀngth_uni⁄


141 
uöt16_t
 
	mw‹d
;

142 
uöt8_t
 
	mbyã
[2];

143 } 
	gÀngth
;

145 
	sÊags_°ru˘


147 
	mì¥om
 : 1;

148 
	mømpz
 : 1;

149 } 
	gÊags
;

151 
uöt8_t
 
	gbuff
[256];

153 
uöt8_t
 
	gîr‹_cou¡
 = 0;

154 
uöt8_t
 
	g§eg
;

156 (*
≠p_°¨t
)() = 0x0000;

159 
	$maö
()

161 
uöt8_t
 
ch
,
ch2
;

162 
uöt16_t
 
w
;

163 
uöt16_t
 
i
;

165 
asm
 volatile("nop\n\t");

167 #ifde‡
ADABOOT


168 
ch
 = 
MCUSR
;

169 
MCUSR
 = 0;

171 
WDTCSR
 |
	`_BV
(
WDCE
Ë| _BV(
WDE
);

172 
WDTCSR
 = 0;

175 i‡(! (
ch
 & 
	`_BV
(
EXTRF
)))

176 
	`≠p_°¨t
();

181 
UBRR0L
 = (
uöt8_t
)(
F_CPU
/(
BAUD_RATE
*16L)-1);

182 
UBRR0H
 = (
F_CPU
/(
BAUD_RATE
*16L)-1) >> 8;

183 
UCSR0B
 = (1<<
RXEN0
Ë| (1<<
TXEN0
);

184 
UCSR0C
 = (1<<
UCSZ00
Ë| (1<<
UCSZ01
);

189 
DDRD
 &~
	`_BV
(
PIND0
);

190 
PORTD
 |
	`_BV
(
PIND0
);

193 
LED_DDR
 |
	`_BV
(
LED
);

200 
	`Êash_Àd
(
NUM_LED_FLASHES
);

202 #ifdef 
ADABOOT


203 
	`Êash_Àd
(
ADABOOT_VER
);

210 
ch
 = 
	`gëch
();

215 if(
ch
=='0')

216 
	`nŸhög_ª•⁄£
();

222 if(
ch
=='1')

224 i‡(
	`gëch
() == ' ')

226 
	`putch
(0x14);

227 
	`putch
('A');

228 
	`putch
('V');

229 
	`putch
('R');

230 
	`putch
(' ');

231 
	`putch
('I');

232 
	`putch
('S');

233 
	`putch
('P');

234 
	`putch
(0x10);

238 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

239 
	`≠p_°¨t
();

245 if(
ch
=='@')

247 
ch2
 = 
	`gëch
();

248 i‡(
ch2
 > 0x85)

249 
	`gëch
();

250 
	`nŸhög_ª•⁄£
();

255 if(
ch
=='A')

257 
ch2
 = 
	`gëch
();

258 if(
ch2
 == 0x80)

259 
	`byã_ª•⁄£
(
HW_VER
);

260 if(
ch2
==0x81)

261 
	`byã_ª•⁄£
(
SW_MAJOR
);

262 if(
ch2
==0x82)

263 
	`byã_ª•⁄£
(
SW_MINOR
);

264 if(
ch2
==0x98)

265 
	`byã_ª•⁄£
(0x03);

267 
	`byã_ª•⁄£
(0x00);

272 if(
ch
=='B')

274 
	`gëNch
(20);

275 
	`nŸhög_ª•⁄£
();

280 if(
ch
=='E')

282 
	`gëNch
(5);

283 
	`nŸhög_ª•⁄£
();

288 if(
ch
=='P')

290 
	`nŸhög_ª•⁄£
();

295 if(
ch
=='Q')

297 
	`nŸhög_ª•⁄£
();

298 #ifde‡
ADABOOT


300 
WDTCSR
 = 
	`_BV
(
WDE
);

307 if(
ch
=='R')

309 
	`nŸhög_ª•⁄£
();

316 if(
ch
=='U')

318 
addªss
.
byã
[0] = 
	`gëch
();

319 
addªss
.
byã
[1] = 
	`gëch
();

320 
	`nŸhög_ª•⁄£
();

325 if(
ch
=='V')

327 
	`gëNch
(4);

328 
	`byã_ª•⁄£
(0x00);

333 if(
ch
=='d')

335 
Àngth
.
byã
[1] = 
	`gëch
();

336 
Àngth
.
byã
[0] = 
	`gëch
();

338 
Êags
.
ì¥om
 = 0;

339 i‡(
	`gëch
() == 'E')

340 
Êags
.
ì¥om
 = 1;

342 
i
=0; i<
PAGE_SIZE
; i++)

343 
buff
[
i
] = 0;

345 
w
 = 0; w < 
Àngth
.
w‹d
; w++)

348 
buff
[
w
] = 
	`gëch
();

351 i‡(
	`gëch
() == ' ')

353 i‡(
Êags
.
ì¥om
)

356 
w
=0;w<
Àngth
.
w‹d
;w++)

358 
EECR
 & (1<<
EEPE
));

360 
EEAR
 = (
uöt16_t
)(*)
addªss
.
w‹d
;

361 
EEDR
 = 
buff
[
w
];

362 
EECR
 |(1<<
EEMPE
);

363 
EECR
 |(1<<
EEPE
);

365 
addªss
.
w‹d
++;

371 
addªss
.
w‹d
 =áddress.word << 1;

374 i‡((
Àngth
.
byã
[0] & 0x01))

375 
Àngth
.
w‹d
++;

380 
EECR
 & (1<<
EEPE
));

382 
asm
 volatile(

456 : "=m" (
SPMCSR
Ë: "M" (
PAGE_SIZE
) : "r0","r16","r17","r24","r25","r28","r29","r30","r31"

460 
	`putch
(0x14);

461 
	`putch
(0x10);

465 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

466 
	`≠p_°¨t
();

471 if(
ch
=='t')

473 
Àngth
.
byã
[1] = 
	`gëch
();

474 
Àngth
.
byã
[0] = 
	`gëch
();

476 i‡(
	`gëch
() == 'E')

477 
Êags
.
ì¥om
 = 1;

480 
Êags
.
ì¥om
 = 0;

481 
addªss
.
w‹d
 =áddress.word << 1;

485 i‡(
	`gëch
() == ' ')

487 
	`putch
(0x14);

488 
w
=0; w<
Àngth
.
w‹d
; w++)

491 i‡(
Êags
.
ì¥om
)

494 
EECR
 & (1<<
EEPE
));

495 
EEAR
 = (
uöt16_t
)(*)
addªss
.
w‹d
;

496 
EECR
 |(1<<
EERE
);

497 
	`putch
(
EEDR
);

499 
addªss
.
w‹d
++;

503 i‡(!
Êags
.
ømpz
)

504 
	`putch
(
	`pgm_ªad_byã_√¨
(
addªss
.
w‹d
));

506 
addªss
.
w‹d
++;

509 
	`putch
(0x10);

515 if(
ch
=='u')

517 i‡(
	`gëch
() == ' ')

519 
	`putch
(0x14);

520 
	`putch
(
SIG1
);

521 
	`putch
(
SIG2
);

522 
	`putch
(
SIG3
);

523 
	`putch
(0x10);

527 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

528 
	`≠p_°¨t
();

534 if(
ch
=='v')

535 
	`byã_ª•⁄£
(0x00);

537 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

538 
	`≠p_°¨t
();

542 
	}
}

545 
	$gëhex
()

547 
ah
,
Æ
;

549 
ah
 = 
	`gëch
();

550 
	`putch
(
ah
);

551 
Æ
 = 
	`gëch
();

552 
	`putch
(
Æ
);

554 if(
ah
 >= 'a')

555 
ah
 =áh - 'a' + 0x0a;

556 if(
ah
 >= '0')

557 
ah
 -= '0';

558 if(
Æ
 >= 'a')

559 
Æ
 =ál - 'a' + 0x0a;

560 if(
Æ
 >= '0')

561 
Æ
 -= '0';

563  (
ah
 << 4Ë+ 
Æ
;

564 
	}
}

567 
	$puthex
(
ch
)

569 
ah
,
Æ
;

571 
ah
 = (
ch
 & 0xf0) >> 4;

572 if(
ah
 >= 0x0a)

573 
ah
 =áh - 0x0a + 'a';

575 
ah
 += '0';

577 
Æ
 = (
ch
 & 0x0f);

578 if(
Æ
 >= 0x0a)

579 
Æ
 =ál - 0x0a + 'a';

581 
Æ
 += '0';

583 
	`putch
(
ah
);

584 
	`putch
(
Æ
);

585 
	}
}

588 
	$putch
(
ch
)

590 !(
UCSR0A
 & 
	`_BV
(
UDRE0
)));

591 
UDR0
 = 
ch
;

592 
	}
}

597 
	$gëch
()

599 
uöt32_t
 
cou¡
 = 0;

601 #ifde‡
ADABOOT


602 
LED_PORT
 &~
	`_BV
(
LED
);

605 !(
UCSR0A
 & 
	`_BV
(
RXC0
)))

609 
cou¡
++;

610 i‡(
cou¡
 > 
MAX_TIME_COUNT
)

611 
	`≠p_°¨t
();

614 #ifde‡
ADABOOT


615 
LED_PORT
 |
	`_BV
(
LED
);

618  
UDR0
;

619 
	}
}

622 
	$gëNch
(
uöt8_t
 
cou¡
)

624 
uöt8_t
 
i
;

625 
i
=0;i<
cou¡
;i++)

627 !(
UCSR0A
 & 
	`_BV
(
RXC0
)));

628 
UDR0
;

630 
	}
}

633 
	$byã_ª•⁄£
(
uöt8_t
 
vÆ
)

635 i‡(
	`gëch
() == ' ')

637 
	`putch
(0x14);

638 
	`putch
(
vÆ
);

639 
	`putch
(0x10);

643 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

644 
	`≠p_°¨t
();

646 
	}
}

649 
	$nŸhög_ª•⁄£
()

651 i‡(
	`gëch
() == ' ')

653 
	`putch
(0x14);

654 
	`putch
(0x10);

658 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

659 
	`≠p_°¨t
();

661 
	}
}

663 #ifde‡
ADABOOT


665 
	$Êash_Àd
(
uöt8_t
 
cou¡
)

671 vﬁ©ûê
uöt32_t
 
l
;

673 i‡(
cou¡
 == 0) {

674 
cou¡
 = 
ADABOOT
;

678 
öt8_t
 
i
;

679 
i
 = 0; i < 
cou¡
; ++i) {

680 
LED_PORT
 |
	`_BV
(
LED
);

681 
l
 = 0;Ü < (
F_CPU
 / 1000); ++l);

682 
LED_PORT
 &~
	`_BV
(
LED
);

683 
l
 = 0;Ü < (
F_CPU
 / 250); ++l);

686 
l
 = 0;Ü < (
F_CPU
 / 100); ++l);

688 
	}
}

692 
	$Êash_Àd
(
uöt8_t
 
cou¡
)

697 vﬁ©ûê
uöt32_t
 
l
;

699 i‡(
cou¡
 == 0) {

700 
cou¡
 = 3;

703 
öt8_t
 
i
;

704 
i
 = 0; i < 
cou¡
; ++i) {

705 
LED_PORT
 |
	`_BV
(
LED
);

706 
l
 = 0;Ü < (
F_CPU
 / 1000); ++l);

707 
LED_PORT
 &~
	`_BV
(
LED
);

708 
l
 = 0;Ü < (
F_CPU
 / 1000); ++l);

711 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/Arduino.h

1 #i‚de‡
Arduöo_h


2 
	#Arduöo_h


	)

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<m©h.h
>

8 
	~<avr/pgm•a˚.h
>

9 
	~<avr/io.h
>

10 
	~<avr/öãºu±.h
>

12 
	~"bö¨y.h
"

14 #ifde‡
__˝lu•lus


18 
	#HIGH
 0x1

	)

19 
	#LOW
 0x0

	)

21 
	#INPUT
 0x0

	)

22 
	#OUTPUT
 0x1

	)

23 
	#INPUT_PULLUP
 0x2

	)

25 
	#åue
 0x1

	)

26 
	#Ál£
 0x0

	)

28 
	#PI
 3.1415926535897932384626433832795

	)

29 
	#HALF_PI
 1.5707963267948966192313216916398

	)

30 
	#TWO_PI
 6.283185307179586476925286766559

	)

31 
	#DEG_TO_RAD
 0.017453292519943295769236907684886

	)

32 
	#RAD_TO_DEG
 57.295779513082320876798154814105

	)

34 
	#SERIAL
 0x0

	)

35 
	#DISPLAY
 0x1

	)

37 
	#LSBFIRST
 0

	)

38 
	#MSBFIRST
 1

	)

40 
	#CHANGE
 1

	)

41 
	#FALLING
 2

	)

42 
	#RISING
 3

	)

44 #i‡
deföed
(
__AVR_ATtöy24__
Ë|| deföed(
__AVR_ATtöy44__
Ë|| deföed(
__AVR_ATtöy84__
Ë|| deföed(
__AVR_ATtöy25__
Ë|| deföed(
__AVR_ATtöy45__
Ë|| deföed(
__AVR_ATtöy85__
)

45 
	#DEFAULT
 0

	)

46 
	#EXTERNAL
 1

	)

47 
	#INTERNAL
 2

	)

49 #i‡
deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega2560__
Ë|| deföed(
__AVR_ATmega1284P__
Ë|| deföed(
__AVR_ATmega644P__
)

50 
	#INTERNAL1V1
 2

	)

51 
	#INTERNAL2V56
 3

	)

53 
	#INTERNAL
 3

	)

55 
	#DEFAULT
 1

	)

56 
	#EXTERNAL
 0

	)

60 #ifde‡
abs


61 #unde‡
abs


64 
	#mö
(
a
,
b
Ë(◊)<(b)?◊):(b))

	)

65 
	#max
(
a
,
b
Ë(◊)>(b)?◊):(b))

	)

66 
	#abs
(
x
Ë((x)>0?(x):-(x))

	)

67 
	#c⁄°øö
(
amt
,
low
,
high
Ë(◊mt)<÷ow)?÷ow):(◊mt)>(high)?(high):◊mt)))

	)

68 
	#round
(
x
Ë((x)>=0?()((x)+0.5):()((x)-0.5))

	)

69 
	#ødüns
(
deg
Ë((deg)*
DEG_TO_RAD
)

	)

70 
	#degªes
(
ød
Ë(‘ad)*
RAD_TO_DEG
)

	)

71 
	#sq
(
x
Ë((x)*(x))

	)

73 
	#öãºu±s
(Ë
	`£i
()

	)

74 
	#noI¡îru±s
(Ë
	`˛i
()

	)

76 
	#˛ockCy˛esPîMi¸o£c⁄d
(Ë–
F_CPU
 / 1000000L )

	)

77 
	#˛ockCy˛esToMi¸o£c⁄ds
(
a
Ë–◊Ë/ 
	`˛ockCy˛esPîMi¸o£c⁄d
(Ë)

	)

78 
	#mi¸o£c⁄dsToClockCy˛es
(
a
Ë–◊Ë* 
	`˛ockCy˛esPîMi¸o£c⁄d
(Ë)

	)

80 
	#lowByã
(
w
Ë((
uöt8_t
Ë((wË& 0xff))

	)

81 
	#highByã
(
w
Ë((
uöt8_t
Ë((wË>> 8))

	)

83 
	#bôRód
(
vÆue
, 
bô
Ë(((vÆueË>> (bô)Ë& 0x01)

	)

84 
	#bôSë
(
vÆue
, 
bô
Ë((vÆueË|(1UL << (bô)))

	)

85 
	#bôCÀ¨
(
vÆue
, 
bô
Ë((vÆueË&~(1UL << (bô)))

	)

86 
	#bôWrôe
(
vÆue
, 
bô
, 
bôvÆue
Ë(bôvÆuê? 
	`bôSë
(vÆue, bôË: 
	`bôCÀ¨
(vÆue, bô))

	)

89 
	tw‹d
;

91 
	#bô
(
b
Ë(1UL << (b))

	)

93 
uöt8_t
 
	tboﬁón
;

94 
uöt8_t
 
	tbyã
;

96 
öô
();

98 
pöMode
(
uöt8_t
, uint8_t);

99 
digôÆWrôe
(
uöt8_t
, uint8_t);

100 
digôÆRód
(
uöt8_t
);

101 
™ÆogRód
(
uöt8_t
);

102 
™ÆogRe„ªn˚
(
uöt8_t
 
mode
);

103 
™ÆogWrôe
(
uöt8_t
, );

105 
mûlis
();

106 
mi¸os
();

107 
dñay
();

108 
dñayMi¸o£c⁄ds
(
us
);

109 
pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
);

111 
shi·Out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
, uöt8_à
vÆ
);

112 
uöt8_t
 
shi·In
(uöt8_à
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
);

114 
©èchI¡îru±
(
uöt8_t
, (*)(), 
mode
);

115 
dëachI¡îru±
(
uöt8_t
);

117 
£tup
();

118 
lo›
();

123 
	#™ÆogInPöToBô
(
P
Ë(P)

	)

127 c⁄° 
uöt16_t
 
PROGMEM
 
p‹t_to_mode_PGM
[];

128 c⁄° 
uöt16_t
 
PROGMEM
 
p‹t_to_öput_PGM
[];

129 c⁄° 
uöt16_t
 
PROGMEM
 
p‹t_to_ouçut_PGM
[];

131 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_p‹t_PGM
[];

133 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_bô_mask_PGM
[];

134 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_timî_PGM
[];

141 
	#digôÆPöToP‹t
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_p‹t_PGM
 + (PËË)

	)

142 
	#digôÆPöToBôMask
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_bô_mask_PGM
 + (PËË)

	)

143 
	#digôÆPöToTimî
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_timî_PGM
 + (PËË)

	)

144 
	#™ÆogInPöToBô
(
P
Ë(P)

	)

145 
	#p‹tOuçutRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–
	`pgm_ªad_w‹d
–
p‹t_to_ouçut_PGM
 + (P))Ë)

	)

146 
	#p‹tI≈utRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–
	`pgm_ªad_w‹d
–
p‹t_to_öput_PGM
 + (P))Ë)

	)

147 
	#p‹tModeRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–
	`pgm_ªad_w‹d
–
p‹t_to_mode_PGM
 + (P))Ë)

	)

149 
	#NOT_A_PIN
 0

	)

150 
	#NOT_A_PORT
 0

	)

152 #ifde‡
ARDUINO_MAIN


153 
	#PA
 1

	)

154 
	#PB
 2

	)

155 
	#PC
 3

	)

156 
	#PD
 4

	)

157 
	#PE
 5

	)

158 
	#PF
 6

	)

159 
	#PG
 7

	)

160 
	#PH
 8

	)

161 
	#PJ
 10

	)

162 
	#PK
 11

	)

163 
	#PL
 12

	)

166 
	#NOT_ON_TIMER
 0

	)

167 
	#TIMER0A
 1

	)

168 
	#TIMER0B
 2

	)

169 
	#TIMER1A
 3

	)

170 
	#TIMER1B
 4

	)

171 
	#TIMER2
 5

	)

172 
	#TIMER2A
 6

	)

173 
	#TIMER2B
 7

	)

175 
	#TIMER3A
 8

	)

176 
	#TIMER3B
 9

	)

177 
	#TIMER3C
 10

	)

178 
	#TIMER4A
 11

	)

179 
	#TIMER4B
 12

	)

180 
	#TIMER4C
 13

	)

181 
	#TIMER4D
 14

	)

182 
	#TIMER5A
 15

	)

183 
	#TIMER5B
 16

	)

184 
	#TIMER5C
 17

	)

186 #ifde‡
__˝lu•lus


190 #ifde‡
__˝lu•lus


191 
	~"WCh¨a˘î.h
"

192 
	~"WSåög.h
"

193 
	~"H¨dw¨eSîül.h
"

195 
uöt16_t
 
makeW‹d
(uöt16_à
w
);

196 
uöt16_t
 
makeW‹d
(
byã
 
h
, byã 
l
);

198 
	#w‹d
(...Ë
	`makeW‹d
(
__VA_ARGS__
)

	)

200 
pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
 = 1000000L);

202 
t⁄e
(
uöt8_t
 
_pö
, 
‰equícy
, 
duøti⁄
 = 0);

203 
noT⁄e
(
uöt8_t
 
_pö
);

206 
øndom
();

207 
øndom
(, );

208 
øndomSìd
();

209 
m≠
(, , , , );

213 
	~"pös_¨duöo.h
"

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/CDC.cpp

19 
	~"Pœtf‹m.h
"

20 
	~"USBAPI.h
"

21 
	~<avr/wdt.h
>

23 #i‡
deföed
(
USBCON
)

24 #ifde‡
CDC_ENABLED


26 #i‡(
RAMEND
 < 1000)

27 
	#SERIAL_BUFFER_SIZE
 16

	)

29 
	#SERIAL_BUFFER_SIZE
 64

	)

32 
	srög_buf„r


34 
	mbuf„r
[
SERIAL_BUFFER_SIZE
];

35 vﬁ©ûê
	mhód
;

36 vﬁ©ûê
	mèû
;

39 
rög_buf„r
 
	gcdc_rx_buf„r
 = { { 0 }, 0, 0};

43 
u32
 
	mdwDTER©e
;

44 
u8
 
	mbCh¨F‹m©
;

45 
u8
 
	mbP¨ôyTy≥
;

46 
u8
 
	mbD©aBôs
;

47 
u8
 
	mlöeSèã
;

48 } 
	tLöeInfo
;

50 vﬁ©ûê
LöeInfo
 
	g_usbLöeInfo
 = { 57600, 0x00, 0x00, 0x00, 0x00 };

52 
	#WEAK
 
	`__©åibuã__
 ((
wók
))

	)

54 c⁄° 
CDCDes¸ùt‹
 
_cdcI¡îÁ˚
 
PROGMEM
;

55 c⁄° 
CDCDes¸ùt‹
 
	g_cdcI¡îÁ˚
 =

57 
D_IAD
(0,2,
CDC_COMMUNICATION_INTERFACE_CLASS
,
CDC_ABSTRACT_CONTROL_MODEL
,1),

60 
D_INTERFACE
(
CDC_ACM_INTERFACE
,1,
CDC_COMMUNICATION_INTERFACE_CLASS
,
CDC_ABSTRACT_CONTROL_MODEL
,0),

61 
D_CDCCS
(
CDC_HEADER
,0x10,0x01),

62 
D_CDCCS
(
CDC_CALL_MANAGEMENT
,1,1),

63 
D_CDCCS4
(
CDC_ABSTRACT_CONTROL_MANAGEMENT
,6),

64 
D_CDCCS
(
CDC_UNION
,
CDC_ACM_INTERFACE
,
CDC_DATA_INTERFACE
),

65 
D_ENDPOINT
(
USB_ENDPOINT_IN
 (
CDC_ENDPOINT_ACM
),
USB_ENDPOINT_TYPE_INTERRUPT
,0x10,0x40),

68 
D_INTERFACE
(
CDC_DATA_INTERFACE
,2,
CDC_DATA_INTERFACE_CLASS
,0,0),

69 
D_ENDPOINT
(
USB_ENDPOINT_OUT
(
CDC_ENDPOINT_OUT
),
USB_ENDPOINT_TYPE_BULK
,0x40,0),

70 
D_ENDPOINT
(
USB_ENDPOINT_IN
 (
CDC_ENDPOINT_IN
 ),
USB_ENDPOINT_TYPE_BULK
,0x40,0)

73 
WEAK
 
	$CDC_GëI¡îÁ˚
(
u8
* 
öãrÁ˚Num
)

75 
öãrÁ˚Num
[0] += 2;

76  
	`USB_SídC⁄åﬁ
(
TRANSFER_PGM
,&
_cdcI¡îÁ˚
,(_cdcInterface));

77 
	}
}

79 
boﬁ
 
WEAK
 
	$CDC_Sëup
(
Sëup
& 
£tup
)

81 
u8
 
r
 = 
£tup
.
bReque°
;

82 
u8
 
ªque°Ty≥
 = 
£tup
.
bmReque°Ty≥
;

84 i‡(
REQUEST_DEVICETOHOST_CLASS_INTERFACE
 =
ªque°Ty≥
)

86 i‡(
CDC_GET_LINE_CODING
 =
r
)

88 
	`USB_SídC⁄åﬁ
(0,(*)&
_usbLöeInfo
,7);

89  
åue
;

93 i‡(
REQUEST_HOSTTODEVICE_CLASS_INTERFACE
 =
ªque°Ty≥
)

95 i‡(
CDC_SET_LINE_CODING
 =
r
)

97 
	`USB_RecvC⁄åﬁ
((*)&
_usbLöeInfo
,7);

98  
åue
;

101 i‡(
CDC_SET_CONTROL_LINE_STATE
 =
r
)

103 
_usbLöeInfo
.
löeSèã
 = 
£tup
.
wVÆueL
;

109 i‡(1200 =
_usbLöeInfo
.
dwDTER©e
) {

111 i‡((
_usbLöeInfo
.
löeSèã
 & 0x01) == 0) {

112 *(
uöt16_t
 *)0x0800 = 0x7777;

113 
	`wdt_íabÀ
(
WDTO_120MS
);

120 
	`wdt_dißbÀ
();

121 
	`wdt_ª£t
();

122 *(
uöt16_t
 *)0x0800 = 0x0;

125  
åue
;

128  
Ál£
;

129 
	}
}

132 
	g_£rülPìk
 = -1;

133 
	gSîül_
::
	$begö
(
uöt16_t
 
baud_cou¡
)

135 
	}
}

137 
Sîül_
::
	$íd
()

139 
	}
}

141 
Sîül_
::
	$ac˚±
()

143 
rög_buf„r
 *
buf„r
 = &
cdc_rx_buf„r
;

144 
i
 = ()(
buf„r
->
hód
+1Ë% 
SERIAL_BUFFER_SIZE
;

152 
i
 !
buf„r
->
èû
) {

153 
c
 = 
	`USB_Recv
(
CDC_RX
);

154 i‡(
c
 == -1)

156 
buf„r
->buf„r[buf„r->
hód
] = 
c
;

157 
buf„r
->
hód
 = 
i
;

159 
i
 = ()(
buf„r
->
hód
+1Ë% 
SERIAL_BUFFER_SIZE
;

161 
	}
}

163 
	gSîül_
::
	$avaûabÀ
()

165 
rög_buf„r
 *
buf„r
 = &
cdc_rx_buf„r
;

166  ()(
SERIAL_BUFFER_SIZE
 + 
buf„r
->
hód
 - buf„r->
èû
) % SERIAL_BUFFER_SIZE;

167 
	}
}

169 
	gSîül_
::
	$≥ek
()

171 
rög_buf„r
 *
buf„r
 = &
cdc_rx_buf„r
;

172 i‡(
buf„r
->
hód
 =buf„r->
èû
) {

175  
buf„r
->buf„r[buf„r->
èû
];

177 
	}
}

179 
	gSîül_
::
	$ªad
()

181 
rög_buf„r
 *
buf„r
 = &
cdc_rx_buf„r
;

183 i‡(
buf„r
->
hód
 =buf„r->
èû
) {

186 
c
 = 
buf„r
->buf„r[buf„r->
èû
];

187 
buf„r
->
èû
 = ()(buf„r->èû + 1Ë% 
SERIAL_BUFFER_SIZE
;

188  
c
;

190 
	}
}

192 
	gSîül_
::
	$Êush
()

194 
	`USB_Flush
(
CDC_TX
);

195 
	}
}

197 
size_t
 
	gSîül_
::
	$wrôe
(
uöt8_t
 
c
)

208 i‡(
_usbLöeInfo
.
löeSèã
 > 0) {

209 
r
 = 
	`USB_Síd
(
CDC_TX
,&
c
,1);

210 i‡(
r
 > 0) {

211  
r
;

213 
	`£tWrôeEº‹
();

217 
	`£tWrôeEº‹
();

219 
	}
}

228 
	gSîül_
::
›î©‹
 
	$boﬁ
() {

229 
boﬁ
 
ªsu…
 = 
Ál£
;

230 i‡(
_usbLöeInfo
.
löeSèã
 > 0)

231 
ªsu…
 = 
åue
;

232 
	`dñay
(10);

233  
ªsu…
;

234 
	}
}

236 
Sîül_
 
	gSîül
;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/Client.h

1 #i‚de‡
˛õ¡_h


2 
	#˛õ¡_h


	)

3 
	~"Pröt.h
"

4 
	~"Såóm.h
"

5 
	~"IPAddªss.h
"

7 ˛as†
	cClõ¡
 : 
public
 
Såóm
 {

9 
public
:

10 
vútuÆ
 
c⁄√˘
(
IPAddªss
 
ù
, 
uöt16_t
 
p‹t
) =0;

11 
vútuÆ
 
c⁄√˘
(c⁄° *
ho°
, 
uöt16_t
 
p‹t
) =0;

12 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
) =0;

13 
vútuÆ
 
size_t
 
wrôe
(c⁄° 
uöt8_t
 *
buf
, size_à
size
) =0;

14 
vútuÆ
 
avaûabÀ
() = 0;

15 
vútuÆ
 
ªad
() = 0;

16 
vútuÆ
 
ªad
(
uöt8_t
 *
buf
, 
size_t
 
size
) = 0;

17 
vútuÆ
 
≥ek
() = 0;

18 
vútuÆ
 
Êush
() = 0;

19 
vútuÆ
 
°›
() = 0;

20 
vútuÆ
 
uöt8_t
 
c⁄√˘ed
() = 0;

21 
vútuÆ
 
›î©‹
 
boﬁ
() = 0;

22 
	m¥Ÿe˘ed
:

23 
uöt8_t
* 
	$øwIPAddªss
(
IPAddªss
& 
addr
Ë{ áddr.
	`øw_addªss
(); };

24 
	}
};

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/HID.cpp

19 
	~"Pœtf‹m.h
"

20 
	~"USBAPI.h
"

21 
	~"USBDesc.h
"

23 #i‡
deföed
(
USBCON
)

24 #ifde‡
HID_ENABLED


30 
Mou£_
 
	gMou£
;

31 
Keybﬂrd_
 
	gKeybﬂrd
;

38 
	#LSB
(
_x
Ë((_xË& 0xFF)

	)

39 
	#MSB
(
_x
Ë((_xË>> 8)

	)

41 
	#RAWHID_USAGE_PAGE
 0xFFC0

	)

42 
	#RAWHID_USAGE
 0x0C00

	)

43 
	#RAWHID_TX_SIZE
 64

	)

44 
	#RAWHID_RX_SIZE
 64

	)

46 c⁄° 
u8
 
_hidRï‹tDes¸ùt‹
[] 
PROGMEM
;

47 c⁄° 
u8
 
	g_hidRï‹tDes¸ùt‹
[] = {

109 #i‡
RAWHID_ENABLED


111 0x06, 
LSB
(
RAWHID_USAGE_PAGE
), 
MSB
(RAWHID_USAGE_PAGE),

112 0x0A, 
LSB
(
RAWHID_USAGE
), 
MSB
(RAWHID_USAGE),

131 c⁄° 
HIDDes¸ùt‹
 
_hidI¡îÁ˚
 
PROGMEM
;

132 c⁄° 
HIDDes¸ùt‹
 
	g_hidI¡îÁ˚
 =

134 
D_INTERFACE
(
HID_INTERFACE
,1,3,0,0),

135 
D_HIDREPORT
((
_hidRï‹tDes¸ùt‹
)),

136 
D_ENDPOINT
(
USB_ENDPOINT_IN
 (
HID_ENDPOINT_INT
),
USB_ENDPOINT_TYPE_INTERRUPT
,0x40,0x01)

143 
u8
 
	g_hid_¥Ÿocﬁ
 = 1;

144 
u8
 
	g_hid_idÀ
 = 1;

146 
	#WEAK
 
	`__©åibuã__
 ((
wók
))

	)

148 
WEAK
 
	$HID_GëI¡îÁ˚
(
u8
* 
öãrÁ˚Num
)

150 
öãrÁ˚Num
[0] += 1;

151  
	`USB_SídC⁄åﬁ
(
TRANSFER_PGM
,&
_hidI¡îÁ˚
,(_hidInterface));

152 
	}
}

154 
WEAK
 
	$HID_GëDes¸ùt‹
(
i
)

156  
	`USB_SídC⁄åﬁ
(
TRANSFER_PGM
,
_hidRï‹tDes¸ùt‹
,(_hidReportDescriptor));

157 
	}
}

159 
WEAK
 
	$HID_SídRï‹t
(
u8
 
id
, c⁄° * 
d©a
, 
Àn
)

161 
	`USB_Síd
(
HID_TX
, &
id
, 1);

162 
	`USB_Síd
(
HID_TX
 | 
TRANSFER_RELEASE
,
d©a
,
Àn
);

163 
	}
}

165 
boﬁ
 
WEAK
 
	$HID_Sëup
(
Sëup
& 
£tup
)

167 
u8
 
r
 = 
£tup
.
bReque°
;

168 
u8
 
ªque°Ty≥
 = 
£tup
.
bmReque°Ty≥
;

169 i‡(
REQUEST_DEVICETOHOST_CLASS_INTERFACE
 =
ªque°Ty≥
)

171 i‡(
HID_GET_REPORT
 =
r
)

174  
åue
;

176 i‡(
HID_GET_PROTOCOL
 =
r
)

179  
åue
;

183 i‡(
REQUEST_HOSTTODEVICE_CLASS_INTERFACE
 =
ªque°Ty≥
)

185 i‡(
HID_SET_PROTOCOL
 =
r
)

187 
_hid_¥Ÿocﬁ
 = 
£tup
.
wVÆueL
;

188  
åue
;

191 i‡(
HID_SET_IDLE
 =
r
)

193 
_hid_idÀ
 = 
£tup
.
wVÆueL
;

194  
åue
;

197  
Ál£
;

198 
	}
}

204 
	gMou£_
::
	$Mou£_
(Ë: 
	$_buâ⁄s
(0)

206 
	}
}

208 
Mou£_
::
	$begö
()

210 
	}
}

212 
Mou£_
::
	$íd
()

214 
	}
}

216 
Mou£_
::
	$˛ick
(
uöt8_t
 
b
)

218 
_buâ⁄s
 = 
b
;

219 
	`move
(0,0,0);

220 
_buâ⁄s
 = 0;

221 
	`move
(0,0,0);

222 
	}
}

224 
	gMou£_
::
	$move
(sig√d 
x
, sig√d 
y
, sig√d 
whìl
)

226 
u8
 
m
[4];

227 
m
[0] = 
_buâ⁄s
;

228 
m
[1] = 
x
;

229 
m
[2] = 
y
;

230 
m
[3] = 
whìl
;

231 
	`HID_SídRï‹t
(1,
m
,4);

232 
	}
}

234 
	gMou£_
::
	$buâ⁄s
(
uöt8_t
 
b
)

236 i‡(
b
 !
_buâ⁄s
)

238 
_buâ⁄s
 = 
b
;

239 
	`move
(0,0,0);

241 
	}
}

243 
	gMou£_
::
	$¥ess
(
uöt8_t
 
b
)

245 
	`buâ⁄s
(
_buâ⁄s
 | 
b
);

246 
	}
}

248 
	gMou£_
::
	$ªÀa£
(
uöt8_t
 
b
)

250 
	`buâ⁄s
(
_buâ⁄s
 & ~
b
);

251 
	}
}

253 
boﬁ
 
	gMou£_
::
	$isPªs£d
(
uöt8_t
 
b
)

255 i‡((
b
 & 
_buâ⁄s
) > 0)

256  
åue
;

257  
Ál£
;

258 
	}
}

264 
	gKeybﬂrd_
::
	$Keybﬂrd_
()

266 
	}
}

268 
Keybﬂrd_
::
	$begö
()

270 
	}
}

272 
Keybﬂrd_
::
	$íd
()

274 
	}
}

276 
Keybﬂrd_
::
	$£ndRï‹t
(
KeyRï‹t
* 
keys
)

278 
	`HID_SídRï‹t
(2,
keys
,(
KeyRï‹t
));

279 
	}
}

282 c⁄° 
uöt8_t
 
_asciim≠
[128] 
PROGMEM
;

284 
	#SHIFT
 0x80

	)

285 c⁄° 
uöt8_t
 
	g_asciim≠
[128] =

321 0x1e|
SHIFT
,

322 0x34|
SHIFT
,

323 0x20|
SHIFT
,

324 0x21|
SHIFT
,

325 0x22|
SHIFT
,

326 0x24|
SHIFT
,

328 0x26|
SHIFT
,

329 0x27|
SHIFT
,

330 0x25|
SHIFT
,

331 0x2e|
SHIFT
,

346 0x33|
SHIFT
,

348 0x36|
SHIFT
,

350 0x37|
SHIFT
,

351 0x38|
SHIFT
,

352 0x1f|
SHIFT
,

353 0x04|
SHIFT
,

354 0x05|
SHIFT
,

355 0x06|
SHIFT
,

356 0x07|
SHIFT
,

357 0x08|
SHIFT
,

358 0x09|
SHIFT
,

359 0x0a|
SHIFT
,

360 0x0b|
SHIFT
,

361 0x0c|
SHIFT
,

362 0x0d|
SHIFT
,

363 0x0e|
SHIFT
,

364 0x0f|
SHIFT
,

365 0x10|
SHIFT
,

366 0x11|
SHIFT
,

367 0x12|
SHIFT
,

368 0x13|
SHIFT
,

369 0x14|
SHIFT
,

370 0x15|
SHIFT
,

371 0x16|
SHIFT
,

372 0x17|
SHIFT
,

373 0x18|
SHIFT
,

374 0x19|
SHIFT
,

375 0x1a|
SHIFT
,

376 0x1b|
SHIFT
,

377 0x1c|
SHIFT
,

378 0x1d|
SHIFT
,

382 0x23|
SHIFT
,

383 0x2d|
SHIFT
,

411 0x2f|
SHIFT
,

412 0x31|
SHIFT
,

413 0x30|
SHIFT
,

414 0x35|
SHIFT
,

418 
uöt8_t
 
USBPutCh¨
(uöt8_à
c
);

424 
size_t
 
	gKeybﬂrd_
::
	$¥ess
(
uöt8_t
 
k
)

426 
uöt8_t
 
i
;

427 i‡(
k
 >= 136) {

428 
k
 = k - 136;

429 } i‡(
k
 >= 128) {

430 
_keyRï‹t
.
modifõrs
 |(1<<(
k
-128));

431 
k
 = 0;

433 
k
 = 
	`pgm_ªad_byã
(
_asciim≠
 + k);

434 i‡(!
k
) {

435 
	`£tWrôeEº‹
();

438 i‡(
k
 & 0x80) {

439 
_keyRï‹t
.
modifõrs
 |= 0x02;

440 
k
 &= 0x7F;

446 i‡(
_keyRï‹t
.
keys
[0] !
k
 && _keyReport.keys[1] != k &&

447 
_keyRï‹t
.
keys
[2] !
k
 && _keyReport.keys[3] != k &&

448 
_keyRï‹t
.
keys
[4] !
k
 && _keyReport.keys[5] != k) {

450 
i
=0; i<6; i++) {

451 i‡(
_keyRï‹t
.
keys
[
i
] == 0x00) {

452 
_keyRï‹t
.
keys
[
i
] = 
k
;

456 i‡(
i
 == 6) {

457 
	`£tWrôeEº‹
();

461 
	`£ndRï‹t
(&
_keyRï‹t
);

463 
	}
}

468 
size_t
 
	gKeybﬂrd_
::
	$ªÀa£
(
uöt8_t
 
k
)

470 
uöt8_t
 
i
;

471 i‡(
k
 >= 136) {

472 
k
 = k - 136;

473 } i‡(
k
 >= 128) {

474 
_keyRï‹t
.
modifõrs
 &~(1<<(
k
-128));

475 
k
 = 0;

477 
k
 = 
	`pgm_ªad_byã
(
_asciim≠
 + k);

478 i‡(!
k
) {

481 i‡(
k
 & 0x80) {

482 
_keyRï‹t
.
modifõrs
 &= ~(0x02);

483 
k
 &= 0x7F;

489 
i
=0; i<6; i++) {

490 i‡(0 !
k
 && 
_keyRï‹t
.
keys
[
i
] == k) {

491 
_keyRï‹t
.
keys
[
i
] = 0x00;

495 
	`£ndRï‹t
(&
_keyRï‹t
);

497 
	}
}

499 
	gKeybﬂrd_
::
	$ªÀa£AŒ
()

501 
_keyRï‹t
.
keys
[0] = 0;

502 
_keyRï‹t
.
keys
[1] = 0;

503 
_keyRï‹t
.
keys
[2] = 0;

504 
_keyRï‹t
.
keys
[3] = 0;

505 
_keyRï‹t
.
keys
[4] = 0;

506 
_keyRï‹t
.
keys
[5] = 0;

507 
_keyRï‹t
.
modifõrs
 = 0;

508 
	`£ndRï‹t
(&
_keyRï‹t
);

509 
	}
}

511 
size_t
 
	gKeybﬂrd_
::
	$wrôe
(
uöt8_t
 
c
)

513 
uöt8_t
 
p
 = 
	`¥ess
(
c
);

514 
uöt8_t
 
r
 = 
	`ªÀa£
(
c
);

515  (
p
);

516 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/HardwareSerial.cpp

24 
	~<°dlib.h
>

25 
	~<°dio.h
>

26 
	~<°rög.h
>

27 
	~<öây≥s.h
>

28 
	~"Arduöo.h
"

29 
	~"wúög_¥iv©e.h
"

33 #i‡
deföed
(
UBRRH
Ë|| deföed(
UBRR0H
Ë|| deföed(
UBRR1H
Ë|| deföed(
UBRR2H
Ë|| deföed(
UBRR3H
)

35 
	~"H¨dw¨eSîül.h
"

41 #i‡!
deföed
(
TXC0
)

42 #i‡
deföed
(
TXC
)

43 
	#TXC0
 
TXC


	)

44 #ñi‡
deföed
(
TXC1
)

46 
	#TXC0
 
TXC1


	)

48 #îr‹ 
TXC0
 
nŸ
 
deföabÀ
 
ö
 
H¨dw¨eSîül
.
h


56 #i‡(
RAMEND
 < 1000)

57 
	#SERIAL_BUFFER_SIZE
 16

	)

59 
	#SERIAL_BUFFER_SIZE
 64

	)

62 
	srög_buf„r


64 
	mbuf„r
[
SERIAL_BUFFER_SIZE
];

65 vﬁ©ûê
	mhód
;

66 vﬁ©ûê
	mèû
;

69 #i‡
deföed
(
USBCON
)

70 
rög_buf„r
 
	grx_buf„r
 = { { 0 }, 0, 0};

71 
rög_buf„r
 
	gtx_buf„r
 = { { 0 }, 0, 0};

73 #i‡
deföed
(
UBRRH
Ë|| deföed(
UBRR0H
)

74 
rög_buf„r
 
	grx_buf„r
 = { { 0 }, 0, 0 };

75 
rög_buf„r
 
	gtx_buf„r
 = { { 0 }, 0, 0 };

77 #i‡
deföed
(
UBRR1H
)

78 
rög_buf„r
 
	grx_buf„r1
 = { { 0 }, 0, 0 };

79 
rög_buf„r
 
	gtx_buf„r1
 = { { 0 }, 0, 0 };

81 #i‡
deföed
(
UBRR2H
)

82 
rög_buf„r
 
	grx_buf„r2
 = { { 0 }, 0, 0 };

83 
rög_buf„r
 
	gtx_buf„r2
 = { { 0 }, 0, 0 };

85 #i‡
deföed
(
UBRR3H
)

86 
rög_buf„r
 
	grx_buf„r3
 = { { 0 }, 0, 0 };

87 
rög_buf„r
 
	gtx_buf„r3
 = { { 0 }, 0, 0 };

90 
ölöe
 
	$°‹e_ch¨
(
c
, 
rög_buf„r
 *
buf„r
)

92 
i
 = ()(
buf„r
->
hód
 + 1Ë% 
SERIAL_BUFFER_SIZE
;

98 i‡(
i
 !
buf„r
->
èû
) {

99 
buf„r
->buf„r[buf„r->
hód
] = 
c
;

100 
buf„r
->
hód
 = 
i
;

102 
	}
}

104 #i‡!
deföed
(
USART0_RX_ve˘
Ë&& deföed(
USART1_RX_ve˘
)

107 #i‡!
deföed
(
USART_RX_ve˘
Ë&& !deföed(
SIG_USART0_RECV
) && \

108 !
deföed
(
SIG_UART0_RECV
Ë&& !deföed(
USART0_RX_ve˘
) && \

109 !
	$deföed
(
SIG_UART_RECV
)

112 
	$£rülEvít
(Ë
	`__©åibuã__
((
wók
));

113 
	$£rülEvít
(Ë{
	}
}

114 
	#£rülEvít_im∂emíãd


	)

115 #i‡
deföed
(
USART_RX_ve˘
)

116 
	$SIGNAL
(
USART_RX_ve˘
)

117 #ñi‡
	`deföed
(
SIG_USART0_RECV
)

118 
	$SIGNAL
(
SIG_USART0_RECV
)

119 #ñi‡
	`deföed
(
SIG_UART0_RECV
)

120 
	$SIGNAL
(
SIG_UART0_RECV
)

121 #ñi‡
	`deföed
(
USART0_RX_ve˘
)

122 
	$SIGNAL
(
USART0_RX_ve˘
)

123 #ñi‡
	`deföed
(
SIG_UART_RECV
)

124 
	$SIGNAL
(
SIG_UART_RECV
)

127 #i‡
	`deföed
(
UDR0
)

128 i‡(
	`bô_is_˛ór
(
UCSR0A
, 
UPE0
)) {

129 
c
 = 
UDR0
;

130 
	`°‹e_ch¨
(
c
, &
rx_buf„r
);

132 
c
 = 
UDR0
;

134 #ñi‡
	`deföed
(
UDR
)

135 i‡(
	`bô_is_˛ór
(
UCSRA
, 
PE
)) {

136 
c
 = 
UDR
;

137 
	`°‹e_ch¨
(
c
, &
rx_buf„r
);

139 
c
 = 
UDR
;

142 #îr‹ 
UDR
 
nŸ
 
deföed


144 
	}
}

148 #i‡
deföed
(
USART1_RX_ve˘
)

149 
	$£rülEvít1
(Ë
	`__©åibuã__
((
wók
));

150 
	$£rülEvít1
(Ë{
	}
}

151 
	#£rülEvít1_im∂emíãd


	)

152 
	$SIGNAL
(
USART1_RX_ve˘
)

154 i‡(
	`bô_is_˛ór
(
UCSR1A
, 
UPE1
)) {

155 
c
 = 
UDR1
;

156 
	`°‹e_ch¨
(
c
, &
rx_buf„r1
);

158 
c
 = 
UDR1
;

160 
	}
}

161 #ñi‡
deföed
(
SIG_USART1_RECV
)

162 #îr‹ 
SIG_USART1_RECV


165 #i‡
deföed
(
USART2_RX_ve˘
Ë&& deföed(
UDR2
)

166 
	$£rülEvít2
(Ë
	`__©åibuã__
((
wók
));

167 
	$£rülEvít2
(Ë{
	}
}

168 
	#£rülEvít2_im∂emíãd


	)

169 
	$SIGNAL
(
USART2_RX_ve˘
)

171 i‡(
	`bô_is_˛ór
(
UCSR2A
, 
UPE2
)) {

172 
c
 = 
UDR2
;

173 
	`°‹e_ch¨
(
c
, &
rx_buf„r2
);

175 
c
 = 
UDR2
;

177 
	}
}

178 #ñi‡
deföed
(
SIG_USART2_RECV
)

179 #îr‹ 
SIG_USART2_RECV


182 #i‡
deföed
(
USART3_RX_ve˘
Ë&& deföed(
UDR3
)

183 
	$£rülEvít3
(Ë
	`__©åibuã__
((
wók
));

184 
	$£rülEvít3
(Ë{
	}
}

185 
	#£rülEvít3_im∂emíãd


	)

186 
	$SIGNAL
(
USART3_RX_ve˘
)

188 i‡(
	`bô_is_˛ór
(
UCSR3A
, 
UPE3
)) {

189 
c
 = 
UDR3
;

190 
	`°‹e_ch¨
(
c
, &
rx_buf„r3
);

192 
c
 = 
UDR3
;

194 
	}
}

195 #ñi‡
deföed
(
SIG_USART3_RECV
)

196 #îr‹ 
SIG_USART3_RECV


199 
	$£rülEvítRun
()

201 #ifde‡
£rülEvít_im∂emíãd


202 i‡(
Sîül
.
	`avaûabÀ
()Ë
	`£rülEvít
();

204 #ifde‡
£rülEvít1_im∂emíãd


205 i‡(
Sîül1
.
	`avaûabÀ
()Ë
	`£rülEvít1
();

207 #ifde‡
£rülEvít2_im∂emíãd


208 i‡(
Sîül2
.
	`avaûabÀ
()Ë
	`£rülEvít2
();

210 #ifde‡
£rülEvít3_im∂emíãd


211 i‡(
Sîül3
.
	`avaûabÀ
()Ë
	`£rülEvít3
();

213 
	}
}

216 #i‡!
deföed
(
USART0_UDRE_ve˘
Ë&& deföed(
USART1_UDRE_ve˘
)

219 #i‡!
deföed
(
UART0_UDRE_ve˘
Ë&& !deföed(
UART_UDRE_ve˘
Ë&& !deföed(
USART0_UDRE_ve˘
Ë&& !deföed(
USART_UDRE_ve˘
)

222 #i‡
deföed
(
UART0_UDRE_ve˘
)

223 
	$ISR
(
UART0_UDRE_ve˘
)

224 #ñi‡
	`deföed
(
UART_UDRE_ve˘
)

225 
	$ISR
(
UART_UDRE_ve˘
)

226 #ñi‡
	`deföed
(
USART0_UDRE_ve˘
)

227 
	$ISR
(
USART0_UDRE_ve˘
)

228 #ñi‡
	`deföed
(
USART_UDRE_ve˘
)

229 
	$ISR
(
USART_UDRE_ve˘
)

232 i‡(
tx_buf„r
.
hód
 =tx_buf„r.
èû
) {

234 #i‡
	`deföed
(
UCSR0B
)

235 
	`cbi
(
UCSR0B
, 
UDRIE0
);

237 
	`cbi
(
UCSRB
, 
UDRIE
);

242 
c
 = 
tx_buf„r
.
buf„r
[tx_buf„r.
èû
];

243 
tx_buf„r
.
èû
 = (tx_buf„r.èû + 1Ë% 
SERIAL_BUFFER_SIZE
;

245 #i‡
	`deföed
(
UDR0
)

246 
UDR0
 = 
c
;

247 #ñi‡
	`deföed
(
UDR
)

248 
UDR
 = 
c
;

250 #îr‹ 
UDR
 
nŸ
 
deföed


253 
	}
}

257 #ifde‡
USART1_UDRE_ve˘


258 
	$ISR
(
USART1_UDRE_ve˘
)

260 i‡(
tx_buf„r1
.
hód
 =tx_buf„r1.
èû
) {

262 
	`cbi
(
UCSR1B
, 
UDRIE1
);

266 
c
 = 
tx_buf„r1
.
buf„r
[tx_buf„r1.
èû
];

267 
tx_buf„r1
.
èû
 = (tx_buf„r1.èû + 1Ë% 
SERIAL_BUFFER_SIZE
;

269 
UDR1
 = 
c
;

271 
	}
}

274 #ifde‡
USART2_UDRE_ve˘


275 
	$ISR
(
USART2_UDRE_ve˘
)

277 i‡(
tx_buf„r2
.
hód
 =tx_buf„r2.
èû
) {

279 
	`cbi
(
UCSR2B
, 
UDRIE2
);

283 
c
 = 
tx_buf„r2
.
buf„r
[tx_buf„r2.
èû
];

284 
tx_buf„r2
.
èû
 = (tx_buf„r2.èû + 1Ë% 
SERIAL_BUFFER_SIZE
;

286 
UDR2
 = 
c
;

288 
	}
}

291 #ifde‡
USART3_UDRE_ve˘


292 
	$ISR
(
USART3_UDRE_ve˘
)

294 i‡(
tx_buf„r3
.
hód
 =tx_buf„r3.
èû
) {

296 
	`cbi
(
UCSR3B
, 
UDRIE3
);

300 
c
 = 
tx_buf„r3
.
buf„r
[tx_buf„r3.
èû
];

301 
tx_buf„r3
.
èû
 = (tx_buf„r3.èû + 1Ë% 
SERIAL_BUFFER_SIZE
;

303 
UDR3
 = 
c
;

305 
	}
}

311 
	gH¨dw¨eSîül
::
	$H¨dw¨eSîül
(
rög_buf„r
 *
rx_buf„r
,Ñög_buf„∏*
tx_buf„r
,

312 vﬁ©ûê
uöt8_t
 *
ubºh
, vﬁ©ûêuöt8_à*
ubºl
,

313 vﬁ©ûê
uöt8_t
 *
uc§a
, vﬁ©ûêuöt8_à*
uc§b
,

314 vﬁ©ûê
uöt8_t
 *
uc§c
, vﬁ©ûêuöt8_à*
udr
,

315 
uöt8_t
 
rxí
, uöt8_à
txí
, uöt8_à
rxcõ
, uöt8_à
udrõ
, uöt8_à
u2x
)

317 
_rx_buf„r
 = 
rx_buf„r
;

318 
_tx_buf„r
 = 
tx_buf„r
;

319 
_ubºh
 = 
ubºh
;

320 
_ubºl
 = 
ubºl
;

321 
_uc§a
 = 
uc§a
;

322 
_uc§b
 = 
uc§b
;

323 
_uc§c
 = 
uc§c
;

324 
_udr
 = 
udr
;

325 
_rxí
 = 
rxí
;

326 
_txí
 = 
txí
;

327 
_rxcõ
 = 
rxcõ
;

328 
_udrõ
 = 
udrõ
;

329 
_u2x
 = 
u2x
;

330 
	}
}

334 
	gH¨dw¨eSîül
::
	$begö
(
baud
)

336 
uöt16_t
 
baud_£âög
;

337 
boﬁ
 
u£_u2x
 = 
åue
;

339 #i‡
F_CPU
 == 16000000UL

343 i‡(
baud
 == 57600) {

344 
u£_u2x
 = 
Ál£
;

348 
åy_agaö
:

350 i‡(
u£_u2x
) {

351 *
_uc§a
 = 1 << 
_u2x
;

352 
baud_£âög
 = (
F_CPU
 / 4 / 
baud
 - 1) / 2;

354 *
_uc§a
 = 0;

355 
baud_£âög
 = (
F_CPU
 / 8 / 
baud
 - 1) / 2;

358 i‡((
baud_£âög
 > 4095Ë&& 
u£_u2x
)

360 
u£_u2x
 = 
Ál£
;

361 
åy_agaö
;

365 *
_ubºh
 = 
baud_£âög
 >> 8;

366 *
_ubºl
 = 
baud_£âög
;

368 
å™smôtög
 = 
Ál£
;

370 
	`sbi
(*
_uc§b
, 
_rxí
);

371 
	`sbi
(*
_uc§b
, 
_txí
);

372 
	`sbi
(*
_uc§b
, 
_rxcõ
);

373 
	`cbi
(*
_uc§b
, 
_udrõ
);

374 
	}
}

376 
	gH¨dw¨eSîül
::
	$begö
(
baud
, 
byã
 
c⁄fig
)

378 
uöt16_t
 
baud_£âög
;

379 
uöt8_t
 
cuºít_c⁄fig
;

380 
boﬁ
 
u£_u2x
 = 
åue
;

382 #i‡
F_CPU
 == 16000000UL

386 i‡(
baud
 == 57600) {

387 
u£_u2x
 = 
Ál£
;

391 
åy_agaö
:

393 i‡(
u£_u2x
) {

394 *
_uc§a
 = 1 << 
_u2x
;

395 
baud_£âög
 = (
F_CPU
 / 4 / 
baud
 - 1) / 2;

397 *
_uc§a
 = 0;

398 
baud_£âög
 = (
F_CPU
 / 8 / 
baud
 - 1) / 2;

401 i‡((
baud_£âög
 > 4095Ë&& 
u£_u2x
)

403 
u£_u2x
 = 
Ál£
;

404 
åy_agaö
;

408 *
_ubºh
 = 
baud_£âög
 >> 8;

409 *
_ubºl
 = 
baud_£âög
;

412 #i‡
	`deföed
(
__AVR_ATmega8__
)

413 
c⁄fig
 |= 0x80;

415 *
_uc§c
 = 
c⁄fig
;

417 
	`sbi
(*
_uc§b
, 
_rxí
);

418 
	`sbi
(*
_uc§b
, 
_txí
);

419 
	`sbi
(*
_uc§b
, 
_rxcõ
);

420 
	`cbi
(*
_uc§b
, 
_udrõ
);

421 
	}
}

423 
	gH¨dw¨eSîül
::
	$íd
()

426 
_tx_buf„r
->
hód
 !_tx_buf„r->
èû
)

429 
	`cbi
(*
_uc§b
, 
_rxí
);

430 
	`cbi
(*
_uc§b
, 
_txí
);

431 
	`cbi
(*
_uc§b
, 
_rxcõ
);

432 
	`cbi
(*
_uc§b
, 
_udrõ
);

435 
_rx_buf„r
->
hód
 = _rx_buf„r->
èû
;

436 
	}
}

438 
	gH¨dw¨eSîül
::
	$avaûabÀ
()

440  ()(
SERIAL_BUFFER_SIZE
 + 
_rx_buf„r
->
hód
 - _rx_buf„r->
èû
) % SERIAL_BUFFER_SIZE;

441 
	}
}

443 
	gH¨dw¨eSîül
::
	$≥ek
()

445 i‡(
_rx_buf„r
->
hód
 =_rx_buf„r->
èû
) {

448  
_rx_buf„r
->
buf„r
[_rx_buf„r->
èû
];

450 
	}
}

452 
	gH¨dw¨eSîül
::
	$ªad
()

455 i‡(
_rx_buf„r
->
hód
 =_rx_buf„r->
èû
) {

458 
c
 = 
_rx_buf„r
->
buf„r
[_rx_buf„r->
èû
];

459 
_rx_buf„r
->
èû
 = ()(_rx_buf„r->èû + 1Ë% 
SERIAL_BUFFER_SIZE
;

460  
c
;

462 
	}
}

464 
	gH¨dw¨eSîül
::
	$Êush
()

467 
å™smôtög
 && ! (*
_uc§a
 & 
	`_BV
(
TXC0
)));

468 
å™smôtög
 = 
Ál£
;

469 
	}
}

471 
size_t
 
	gH¨dw¨eSîül
::
	$wrôe
(
uöt8_t
 
c
)

473 
i
 = (
_tx_buf„r
->
hód
 + 1Ë% 
SERIAL_BUFFER_SIZE
;

478 
i
 =
_tx_buf„r
->
èû
)

481 
_tx_buf„r
->
buf„r
[_tx_buf„r->
hód
] = 
c
;

482 
_tx_buf„r
->
hód
 = 
i
;

484 
	`sbi
(*
_uc§b
, 
_udrõ
);

486 
å™smôtög
 = 
åue
;

487 
	`sbi
(*
_uc§a
, 
TXC0
);

490 
	}
}

492 
	gH¨dw¨eSîül
::
›î©‹
 
	$boﬁ
() {

493  
åue
;

494 
	}
}

498 #i‡
deföed
(
UBRRH
Ë&& deföed(
UBRRL
)

499 
H¨dw¨eSîül
 
Sîül
(&
rx_buf„r
, &
tx_buf„r
, &
UBRRH
, &
UBRRL
, &
UCSRA
, &
UCSRB
, &
UCSRC
, &
UDR
, 
RXEN
, 
TXEN
, 
RXCIE
, 
UDRIE
, 
U2X
);

500 #ñi‡
deföed
(
UBRR0H
Ë&& deföed(
UBRR0L
)

501 
H¨dw¨eSîül
 
Sîül
(&
rx_buf„r
, &
tx_buf„r
, &
UBRR0H
, &
UBRR0L
, &
UCSR0A
, &
UCSR0B
, &
UCSR0C
, &
UDR0
, 
RXEN0
, 
TXEN0
, 
RXCIE0
, 
UDRIE0
, 
U2X0
);

502 #ñi‡
deföed
(
USBCON
)

505 #îr‹ 
no
 
£rül
 
p‹t
 
deföed
 (port 0)

508 #i‡
deföed
(
UBRR1H
)

509 
H¨dw¨eSîül
 
Sîül1
(&
rx_buf„r1
, &
tx_buf„r1
, &
UBRR1H
, &
UBRR1L
, &
UCSR1A
, &
UCSR1B
, &
UCSR1C
, &
UDR1
, 
RXEN1
, 
TXEN1
, 
RXCIE1
, 
UDRIE1
, 
U2X1
);

511 #i‡
deföed
(
UBRR2H
)

512 
H¨dw¨eSîül
 
Sîül2
(&
rx_buf„r2
, &
tx_buf„r2
, &
UBRR2H
, &
UBRR2L
, &
UCSR2A
, &
UCSR2B
, &
UCSR2C
, &
UDR2
, 
RXEN2
, 
TXEN2
, 
RXCIE2
, 
UDRIE2
, 
U2X2
);

514 #i‡
deföed
(
UBRR3H
)

515 
H¨dw¨eSîül
 
Sîül3
(&
rx_buf„r3
, &
tx_buf„r3
, &
UBRR3H
, &
UBRR3L
, &
UCSR3A
, &
UCSR3B
, &
UCSR3C
, &
UDR3
, 
RXEN3
, 
TXEN3
, 
RXCIE3
, 
UDRIE3
, 
U2X3
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/HardwareSerial.h

23 #i‚de‡
H¨dw¨eSîül_h


24 
	#H¨dw¨eSîül_h


	)

26 
	~<öây≥s.h
>

28 
	~"Såóm.h
"

30 
	grög_buf„r
;

32 ˛as†
	cH¨dw¨eSîül
 : 
public
 
Såóm


34 
¥iv©e
:

35 
rög_buf„r
 *
_rx_buf„r
;

36 
rög_buf„r
 *
	m_tx_buf„r
;

37 vﬁ©ûê
uöt8_t
 *
	m_ubºh
;

38 vﬁ©ûê
uöt8_t
 *
	m_ubºl
;

39 vﬁ©ûê
uöt8_t
 *
	m_uc§a
;

40 vﬁ©ûê
uöt8_t
 *
	m_uc§b
;

41 vﬁ©ûê
uöt8_t
 *
	m_uc§c
;

42 vﬁ©ûê
uöt8_t
 *
	m_udr
;

43 
uöt8_t
 
	m_rxí
;

44 
uöt8_t
 
	m_txí
;

45 
uöt8_t
 
	m_rxcõ
;

46 
uöt8_t
 
	m_udrõ
;

47 
uöt8_t
 
	m_u2x
;

48 
boﬁ
 
	må™smôtög
;

49 
	mpublic
:

50 
H¨dw¨eSîül
(
rög_buf„r
 *
rx_buf„r
,Ñög_buf„∏*
tx_buf„r
,

51 vﬁ©ûê
uöt8_t
 *
ubºh
, vﬁ©ûêuöt8_à*
ubºl
,

52 vﬁ©ûê
uöt8_t
 *
uc§a
, vﬁ©ûêuöt8_à*
uc§b
,

53 vﬁ©ûê
uöt8_t
 *
uc§c
, vﬁ©ûêuöt8_à*
udr
,

54 
uöt8_t
 
rxí
, uöt8_à
txí
, uöt8_à
rxcõ
, uöt8_à
udrõ
, uöt8_à
u2x
);

55 
begö
();

56 
begö
(, 
uöt8_t
);

57 
íd
();

58 
vútuÆ
 
avaûabÀ
();

59 
vútuÆ
 
≥ek
();

60 
vútuÆ
 
ªad
();

61 
vútuÆ
 
Êush
();

62 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
);

63 
ölöe
 
size_t
 
	$wrôe
(
n
Ë{  
	`wrôe
((
uöt8_t
)n); }

64 
ölöe
 
size_t
 
	$wrôe
(
n
Ë{  
	`wrôe
((
uöt8_t
Í); 
	}
}

65 
ölöe
 
size_t
 
	$wrôe
(
n
Ë{  
	`wrôe
((
uöt8_t
Í); 
	}
}

66 
ölöe
 
size_t
 
	$wrôe
(
n
Ë{  
	`wrôe
((
uöt8_t
Í); 
	}
}

67 
usög
 
	gPröt
::
wrôe
;

68 
›î©‹
 
boﬁ
();

72 
	#SERIAL_5N1
 0x00

	)

73 
	#SERIAL_6N1
 0x02

	)

74 
	#SERIAL_7N1
 0x04

	)

75 
	#SERIAL_8N1
 0x06

	)

76 
	#SERIAL_5N2
 0x08

	)

77 
	#SERIAL_6N2
 0x0A

	)

78 
	#SERIAL_7N2
 0x0C

	)

79 
	#SERIAL_8N2
 0x0E

	)

80 
	#SERIAL_5E1
 0x20

	)

81 
	#SERIAL_6E1
 0x22

	)

82 
	#SERIAL_7E1
 0x24

	)

83 
	#SERIAL_8E1
 0x26

	)

84 
	#SERIAL_5E2
 0x28

	)

85 
	#SERIAL_6E2
 0x2A

	)

86 
	#SERIAL_7E2
 0x2C

	)

87 
	#SERIAL_8E2
 0x2E

	)

88 
	#SERIAL_5O1
 0x30

	)

89 
	#SERIAL_6O1
 0x32

	)

90 
	#SERIAL_7O1
 0x34

	)

91 
	#SERIAL_8O1
 0x36

	)

92 
	#SERIAL_5O2
 0x38

	)

93 
	#SERIAL_6O2
 0x3A

	)

94 
	#SERIAL_7O2
 0x3C

	)

95 
	#SERIAL_8O2
 0x3E

	)

97 #i‡
deföed
(
UBRRH
Ë|| deföed(
UBRR0H
)

98 
H¨dw¨eSîül
 
Sîül
;

99 #ñi‡
deföed
(
USBCON
)

100 
	~"USBAPI.h
"

103 #i‡
deföed
(
UBRR1H
)

104 
H¨dw¨eSîül
 
Sîül1
;

106 #i‡
deföed
(
UBRR2H
)

107 
H¨dw¨eSîül
 
Sîül2
;

109 #i‡
deföed
(
UBRR3H
)

110 
H¨dw¨eSîül
 
Sîül3
;

113 
	$£rülEvítRun
(Ë
	`__©åibuã__
((
wók
));

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/IPAddress.cpp

2 
	~<Arduöo.h
>

3 
	~<IPAddªss.h
>

5 
	gIPAddªss
::
	$IPAddªss
()

7 
	`mem£t
(
_addªss
, 0, (_address));

8 
	}
}

10 
	gIPAddªss
::
	$IPAddªss
(
uöt8_t
 
fú°_o˘ë
, uöt8_à
£c⁄d_o˘ë
, uöt8_à
thúd_o˘ë
, uöt8_à
fouπh_o˘ë
)

12 
_addªss
[0] = 
fú°_o˘ë
;

13 
_addªss
[1] = 
£c⁄d_o˘ë
;

14 
_addªss
[2] = 
thúd_o˘ë
;

15 
_addªss
[3] = 
fouπh_o˘ë
;

16 
	}
}

18 
	gIPAddªss
::
	$IPAddªss
(
uöt32_t
 
addªss
)

20 
	`mem˝y
(
_addªss
, &
addªss
, (_address));

21 
	}
}

23 
	gIPAddªss
::
	$IPAddªss
(c⁄° 
uöt8_t
 *
addªss
)

25 
	`mem˝y
(
_addªss
, 
addªss
, (_address));

26 
	}
}

28 
	gIPAddªss
& IPAddªss::
›î©‹
=(c⁄° 
uöt8_t
 *
addªss
)

30 
mem˝y
(
_addªss
, 
addªss
, (_address));

31  *
	gthis
;

34 
	gIPAddªss
& IPAddªss::
›î©‹
=(
uöt32_t
 
addªss
)

36 
mem˝y
(
_addªss
, (c⁄° 
uöt8_t
 *)&
addªss
, (_address));

37  *
	gthis
;

40 
boﬁ
 
	gIPAddªss
::
›î©‹
==(c⁄° 
uöt8_t
* 
addr
)

42  
memcmp
(
addr
, 
_addªss
, (_address)) == 0;

45 
size_t
 
	gIPAddªss
::
	$¥ötTo
(
Pröt
& 
p
) const

47 
size_t
 
n
 = 0;

48 
i
 =0; i < 3; i++)

50 
n
 +
p
.
	`¥öt
(
_addªss
[
i
], 
DEC
);

51 
n
 +
p
.
	`¥öt
('.');

53 
n
 +
p
.
	`¥öt
(
_addªss
[3], 
DEC
);

54  
n
;

55 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/IPAddress.h

26 #i‚de‡
IPAddªss_h


27 
	#IPAddªss_h


	)

29 
	~<PröèbÀ.h
>

33 ˛as†
	cIPAddªss
 : 
public
 
PröèbÀ
 {

34 
¥iv©e
:

35 
uöt8_t
 
_addªss
[4];

40 
uöt8_t
* 
	$øw_addªss
(Ë{  
_addªss
; };

42 
public
:

44 
	`IPAddªss
();

45 
	`IPAddªss
(
uöt8_t
 
fú°_o˘ë
, uöt8_à
£c⁄d_o˘ë
, uöt8_à
thúd_o˘ë
, uöt8_à
fouπh_o˘ë
);

46 
	`IPAddªss
(
uöt32_t
 
addªss
);

47 
	`IPAddªss
(c⁄° 
uöt8_t
 *
addªss
);

51 
›î©‹
 
	$uöt32_t
(Ë{  *((
uöt32_t
*)
_addªss
); 
	}
};

52 
boﬁ
 
	g›î©‹
==(c⁄° 
IPAddªss
& 
addr
Ë{  (*((
uöt32_t
*)
_addªss
)) == (*((uint32_t*)addr._address)); };

53 
boﬁ
 
	g›î©‹
==(c⁄° 
uöt8_t
* 
addr
);

56 
uöt8_t
 
	g›î©‹
[](
	gödex
Ëc⁄° {  
	g_addªss
[
ödex
]; };

57 
	guöt8_t
& 
	g›î©‹
[](
	gödex
Ë{  
	g_addªss
[
ödex
]; };

60 
	gIPAddªss
& 
	g›î©‹
=(c⁄° 
uöt8_t
 *
addªss
);

61 
	gIPAddªss
& 
	g›î©‹
=(
uöt32_t
 
addªss
);

63 
vútuÆ
 
size_t
 
	$¥ötTo
(
Pröt
& 
p
) const;

65 
‰õnd
 
˛ass
 
Ethî√tCœss
;

66 
‰õnd
 
˛ass
 
UDP
;

67 
‰õnd
 
˛ass
 
Clõ¡
;

68 
‰õnd
 
˛ass
 
Sîvî
;

69 
‰õnd
 
˛ass
 
Dh˝Cœss
;

70 
‰õnd
 
˛ass
 
DNSClõ¡
;

71 
	}
};

73 c⁄° 
IPAddªss
 
INADDR_NONE
(0,0,0,0);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/Platform.h

2 #i‚de‡
__PLATFORM_H__


3 
	#__PLATFORM_H__


	)

5 
	~<öây≥s.h
>

6 
	~<avr/pgm•a˚.h
>

7 
	~<avr/ì¥om.h
>

8 
	~<avr/öãºu±.h
>

9 
	~<utû/dñay.h
>

11 
	tu8
;

12 
	tu16
;

13 
	tu32
;

15 
	~"Arduöo.h
"

17 #i‡
deföed
(
USBCON
)

18 
	~"USBDesc.h
"

19 
	~"USBC‹e.h
"

20 
	~"USBAPI.h
"

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/Print.cpp

22 
	~<°dlib.h
>

23 
	~<°dio.h
>

24 
	~<°rög.h
>

25 
	~<m©h.h
>

26 
	~"Arduöo.h
"

28 
	~"Pröt.h
"

33 
size_t
 
	gPröt
::
	$wrôe
(c⁄° 
uöt8_t
 *
buf„r
, 
size_t
 
size
)

35 
size_t
 
n
 = 0;

36 
size
--) {

37 
n
 +
	`wrôe
(*
buf„r
++);

39  
n
;

40 
	}
}

42 
size_t
 
	gPröt
::
	$¥öt
(c⁄° 
__FœshSåögHñ≥r
 *
ifsh
)

44 c⁄° 
PROGMEM
 *
p
 = (c⁄° PROGMEM *)
ifsh
;

45 
size_t
 
n
 = 0;

47 
c
 = 
	`pgm_ªad_byã
(
p
++);

48 i‡(
c
 == 0) ;

49 
n
 +
	`wrôe
(
c
);

51  
n
;

52 
	}
}

54 
size_t
 
	gPröt
::
	$¥öt
(c⁄° 
Såög
 &
s
)

56 
size_t
 
n
 = 0;

57 
uöt16_t
 
i
 = 0; i < 
s
.
	`Àngth
(); i++) {

58 
n
 +
	`wrôe
(
s
[
i
]);

60  
n
;

61 
	}
}

63 
size_t
 
	gPröt
::
	$¥öt
(c⁄° 
°r
[])

65  
	`wrôe
(
°r
);

66 
	}
}

68 
size_t
 
	gPröt
::
	$¥öt
(
c
)

70  
	`wrôe
(
c
);

71 
	}
}

73 
size_t
 
	gPröt
::
	$¥öt
(
b
, 
ba£
)

75  
	`¥öt
((Ë
b
, 
ba£
);

76 
	}
}

78 
size_t
 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

80  
	`¥öt
((Ë
n
, 
ba£
);

81 
	}
}

83 
size_t
 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

85  
	`¥öt
((Ë
n
, 
ba£
);

86 
	}
}

88 
size_t
 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

90 i‡(
ba£
 == 0) {

91  
	`wrôe
(
n
);

92 } i‡(
ba£
 == 10) {

93 i‡(
n
 < 0) {

94 
t
 = 
	`¥öt
('-');

95 
n
 = -n;

96  
	`¥ötNumbî
(
n
, 10Ë+ 
t
;

98  
	`¥ötNumbî
(
n
, 10);

100  
	`¥ötNumbî
(
n
, 
ba£
);

102 
	}
}

104 
size_t
 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

106 i‡(
ba£
 =0Ë 
	`wrôe
(
n
);

107  
	`¥ötNumbî
(
n
, 
ba£
);

108 
	}
}

110 
size_t
 
	gPröt
::
	$¥öt
(
n
, 
digôs
)

112  
	`¥ötFlﬂt
(
n
, 
digôs
);

113 
	}
}

115 
size_t
 
	gPröt
::
	$¥öén
(c⁄° 
__FœshSåögHñ≥r
 *
ifsh
)

117 
size_t
 
n
 = 
	`¥öt
(
ifsh
);

118 
n
 +
	`¥öén
();

119  
n
;

120 
	}
}

122 
size_t
 
	gPröt
::
	$¥öt
(c⁄° 
PröèbÀ
& 
x
)

124  
x
.
	`¥ötTo
(*
this
);

125 
	}
}

127 
size_t
 
	gPröt
::
	$¥öén
()

129 
size_t
 
n
 = 
	`¥öt
('\r');

130 
n
 +
	`¥öt
('\n');

131  
n
;

132 
	}
}

134 
size_t
 
	gPröt
::
	$¥öén
(c⁄° 
Såög
 &
s
)

136 
size_t
 
n
 = 
	`¥öt
(
s
);

137 
n
 +
	`¥öén
();

138  
n
;

139 
	}
}

141 
size_t
 
	gPröt
::
	$¥öén
(c⁄° 
c
[])

143 
size_t
 
n
 = 
	`¥öt
(
c
);

144 
n
 +
	`¥öén
();

145  
n
;

146 
	}
}

148 
size_t
 
	gPröt
::
	$¥öén
(
c
)

150 
size_t
 
n
 = 
	`¥öt
(
c
);

151 
n
 +
	`¥öén
();

152  
n
;

153 
	}
}

155 
size_t
 
	gPröt
::
	$¥öén
(
b
, 
ba£
)

157 
size_t
 
n
 = 
	`¥öt
(
b
, 
ba£
);

158 
n
 +
	`¥öén
();

159  
n
;

160 
	}
}

162 
size_t
 
	gPröt
::
	$¥öén
(
num
, 
ba£
)

164 
size_t
 
n
 = 
	`¥öt
(
num
, 
ba£
);

165 
n
 +
	`¥öén
();

166  
n
;

167 
	}
}

169 
size_t
 
	gPröt
::
	$¥öén
(
num
, 
ba£
)

171 
size_t
 
n
 = 
	`¥öt
(
num
, 
ba£
);

172 
n
 +
	`¥öén
();

173  
n
;

174 
	}
}

176 
size_t
 
	gPröt
::
	$¥öén
(
num
, 
ba£
)

178 
size_t
 
n
 = 
	`¥öt
(
num
, 
ba£
);

179 
n
 +
	`¥öén
();

180  
n
;

181 
	}
}

183 
size_t
 
	gPröt
::
	$¥öén
(
num
, 
ba£
)

185 
size_t
 
n
 = 
	`¥öt
(
num
, 
ba£
);

186 
n
 +
	`¥öén
();

187  
n
;

188 
	}
}

190 
size_t
 
	gPröt
::
	$¥öén
(
num
, 
digôs
)

192 
size_t
 
n
 = 
	`¥öt
(
num
, 
digôs
);

193 
n
 +
	`¥öén
();

194  
n
;

195 
	}
}

197 
size_t
 
	gPröt
::
	$¥öén
(c⁄° 
PröèbÀ
& 
x
)

199 
size_t
 
n
 = 
	`¥öt
(
x
);

200 
n
 +
	`¥öén
();

201  
n
;

202 
	}
}

206 
size_t
 
	gPröt
::
	$¥ötNumbî
(
n
, 
uöt8_t
 
ba£
) {

207 
buf
[8 * () + 1];

208 *
°r
 = &
buf
[(buf) - 1];

210 *
°r
 = '\0';

213 i‡(
ba£
 < 2) base = 10;

216 
m
 = 
n
;

217 
n
 /
ba£
;

218 
c
 = 
m
 - 
ba£
 * 
n
;

219 *--
°r
 = 
c
 < 10 ? c + '0' : c + 'A' - 10;

220 } 
n
);

222  
	`wrôe
(
°r
);

223 
	}
}

225 
size_t
 
	gPröt
::
	$¥ötFlﬂt
(
numbî
, 
uöt8_t
 
digôs
)

227 
size_t
 
n
 = 0;

229 i‡(
	`i¢™
(
numbî
)Ë 
	`¥öt
("nan");

230 i‡(
	`isöf
(
numbî
)Ë 
	`¥öt
("inf");

231 i‡(
numbî
 > 4294967040.0Ë 
	`¥öt
 ("ovf");

232 i‡(
numbî
 <-4294967040.0Ë 
	`¥öt
 ("ovf");

235 i‡(
numbî
 < 0.0)

237 
n
 +
	`¥öt
('-');

238 
numbî
 = -number;

242 
roundög
 = 0.5;

243 
uöt8_t
 
i
=0; i<
digôs
; ++i)

244 
roundög
 /= 10.0;

246 
numbî
 +
roundög
;

249 
öt_∑π
 = ()
numbî
;

250 
ªmaödî
 = 
numbî
 - ()
öt_∑π
;

251 
n
 +
	`¥öt
(
öt_∑π
);

254 i‡(
digôs
 > 0) {

255 
n
 +
	`¥öt
(".");

259 
digôs
-- > 0)

261 
ªmaödî
 *= 10.0;

262 
toPröt
 = (
ªmaödî
);

263 
n
 +
	`¥öt
(
toPröt
);

264 
ªmaödî
 -
toPröt
;

267  
n
;

268 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/Print.h

20 #i‚de‡
Pröt_h


21 
	#Pröt_h


	)

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

26 
	~"WSåög.h
"

27 
	~"PröèbÀ.h
"

29 
	#DEC
 10

	)

30 
	#HEX
 16

	)

31 
	#OCT
 8

	)

32 
	#BIN
 2

	)

34 ˛as†
	cPröt


36 
	m¥iv©e
:

37 
wrôe_îr‹
;

38 
size_t
 
¥ötNumbî
(, 
uöt8_t
);

39 
size_t
 
¥ötFlﬂt
(, 
uöt8_t
);

40 
	m¥Ÿe˘ed
:

41 
	$£tWrôeEº‹
(
îr
 = 1Ë{ 
wrôe_îr‹
 =Érr; }

42 
public
:

43 
	$Pröt
(Ë: 
	$wrôe_îr‹
(0Ë{
	}
}

45 
	$gëWrôeEº‹
(Ë{  
wrôe_îr‹
; 
	}
}

46 
	$˛órWrôeEº‹
(Ë{ 
	`£tWrôeEº‹
(0); 
	}
}

48 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
) = 0;

49 
size_t
 
	$wrôe
(c⁄° *
°r
) {

50 i‡(
°r
 =
NULL
)  0;

51  
	`wrôe
((c⁄° 
uöt8_t
 *)
°r
, 
	`°æí
(str));

52 
	}
}

53 
vútuÆ
 
size_t
 
wrôe
(c⁄° 
uöt8_t
 *
buf„r
, size_à
size
);

55 
size_t
 
¥öt
(c⁄° 
__FœshSåögHñ≥r
 *);

56 
size_t
 
¥öt
(c⁄° 
Såög
 &);

57 
size_t
 
¥öt
(const []);

58 
size_t
 
¥öt
();

59 
size_t
 
¥öt
(, 
DEC
);

60 
size_t
 
¥öt
(, 
DEC
);

61 
size_t
 
¥öt
(, 
DEC
);

62 
size_t
 
¥öt
(, 
DEC
);

63 
size_t
 
¥öt
(, 
DEC
);

64 
size_t
 
¥öt
(, = 2);

65 
size_t
 
¥öt
(c⁄° 
PröèbÀ
&);

67 
size_t
 
¥öén
(c⁄° 
__FœshSåögHñ≥r
 *);

68 
size_t
 
¥öén
(c⁄° 
Såög
 &
s
);

69 
size_t
 
¥öén
(const []);

70 
size_t
 
¥öén
();

71 
size_t
 
¥öén
(, 
DEC
);

72 
size_t
 
¥öén
(, 
DEC
);

73 
size_t
 
¥öén
(, 
DEC
);

74 
size_t
 
¥öén
(, 
DEC
);

75 
size_t
 
¥öén
(, 
DEC
);

76 
size_t
 
¥öén
(, = 2);

77 
size_t
 
¥öén
(c⁄° 
PröèbÀ
&);

78 
size_t
 
¥öén
();

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/Printable.h

20 #i‚de‡
PröèbÀ_h


21 
	#PröèbÀ_h


	)

23 
	~<√w.h
>

25 
˛ass
 
	gPröt
;

33 ˛as†
	cPröèbÀ


35 
	mpublic
:

36 
vútuÆ
 
size_t
 
	$¥ötTo
(
Pröt
& 
p
) const = 0;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/Server.h

1 #i‚de‡
£rvî_h


2 
	#£rvî_h


	)

4 ˛as†
	cSîvî
 : 
public
 
Pröt
 {

5 
public
:

6 
vútuÆ
 
begö
() =0;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/Stream.cpp

23 
	~"Arduöo.h
"

24 
	~"Såóm.h
"

26 
	#PARSE_TIMEOUT
 1000

27 
	#NO_SKIP_CHAR
 1

28 

	)

30 
	gSåóm
::
	$timedRód
()

32 
c
;

33 
_°¨tMûlis
 = 
	`mûlis
();

35 
c
 = 
	`ªad
();

36 i‡(
c
 >= 0)  c;

37 } 
	`mûlis
(Ë- 
_°¨tMûlis
 < 
_timeout
);

39 
	}
}

42 
	gSåóm
::
	$timedPìk
()

44 
c
;

45 
_°¨tMûlis
 = 
	`mûlis
();

47 
c
 = 
	`≥ek
();

48 i‡(
c
 >= 0)  c;

49 } 
	`mûlis
(Ë- 
_°¨tMûlis
 < 
_timeout
);

51 
	}
}

55 
	gSåóm
::
	$≥ekNextDigô
()

57 
c
;

59 
c
 = 
	`timedPìk
();

60 i‡(
c
 < 0)  c;

61 i‡(
c
 == '-')  c;

62 i‡(
c
 >= '0' && c <= '9')  c;

63 
	`ªad
();

65 
	}
}

70 
	gSåóm
::
	$£tTimeout
(
timeout
)

72 
_timeout
 = 
timeout
;

73 
	}
}

76 
boﬁ
 
	gSåóm
::
	$föd
(*
èrgë
)

78  
	`födU¡û
(
èrgë
, 
NULL
);

79 
	}
}

83 
boﬁ
 
	gSåóm
::
	$föd
(*
èrgë
, 
size_t
 
Àngth
)

85  
	`födU¡û
(
èrgë
, 
Àngth
, 
NULL
, 0);

86 
	}
}

89 
boﬁ
 
	gSåóm
::
	$födU¡û
(*
èrgë
, *
ãrmö©‹
)

91  
	`födU¡û
(
èrgë
, 
	`°æí
—¨gë), 
ãrmö©‹
, strlen(terminator));

92 
	}
}

97 
boﬁ
 
	gSåóm
::
	$födU¡û
(*
èrgë
, 
size_t
 
èrgëLí
, *
ãrmö©‹
, size_à
ãrmLí
)

99 
size_t
 
ödex
 = 0;

100 
size_t
 
ãrmIndex
 = 0;

101 
c
;

103 if–*
èrgë
 == 0)

104  
åue
;

105  (
c
 = 
	`timedRód
()) > 0){

107 if(
c
 !
èrgë
[
ödex
])

108 
ödex
 = 0;

110 if–
c
 =
èrgë
[
ödex
]){

112 if(++
ödex
 >
èrgëLí
){

113  
åue
;

117 if(
ãrmLí
 > 0 && 
c
 =
ãrmö©‹
[
ãrmIndex
]){

118 if(++
ãrmIndex
 >
ãrmLí
)

119  
Ál£
;

122 
ãrmIndex
 = 0;

124  
Ál£
;

125 
	}
}

131 
	gSåóm
::
	$∑r£I¡
()

133  
	`∑r£I¡
(
NO_SKIP_CHAR
);

134 
	}
}

138 
	gSåóm
::
	$∑r£I¡
(
skùCh¨
)

140 
boﬁón
 
isNeg©ive
 = 
Ál£
;

141 
vÆue
 = 0;

142 
c
;

144 
c
 = 
	`≥ekNextDigô
();

146 if(
c
 < 0)

150 if(
c
 =
skùCh¨
)

152 if(
c
 == '-')

153 
isNeg©ive
 = 
åue
;

154 if(
c
 >= '0' && c <= '9')

155 
vÆue
 = vÆuê* 10 + 
c
 - '0';

156 
	`ªad
();

157 
c
 = 
	`timedPìk
();

159  (
c
 >'0' && c <'9'Ë|| c =
skùCh¨
 );

161 if(
isNeg©ive
)

162 
vÆue
 = -value;

163  
vÆue
;

164 
	}
}

168 
	gSåóm
::
	$∑r£Flﬂt
()

170  
	`∑r£Flﬂt
(
NO_SKIP_CHAR
);

171 
	}
}

175 
	gSåóm
::
	$∑r£Flﬂt
(
skùCh¨
){

176 
boﬁón
 
isNeg©ive
 = 
Ál£
;

177 
boﬁón
 
isFø˘i⁄
 = 
Ál£
;

178 
vÆue
 = 0;

179 
c
;

180 
‰a˘i⁄
 = 1.0;

182 
c
 = 
	`≥ekNextDigô
();

184 if(
c
 < 0)

188 if(
c
 =
skùCh¨
)

190 if(
c
 == '-')

191 
isNeg©ive
 = 
åue
;

192 i‡(
c
 == '.')

193 
isFø˘i⁄
 = 
åue
;

194 if(
c
 >= '0' && c <= '9') {

195 
vÆue
 = vÆuê* 10 + 
c
 - '0';

196 if(
isFø˘i⁄
)

197 
‰a˘i⁄
 *= 0.1;

199 
	`ªad
();

200 
c
 = 
	`timedPìk
();

202  (
c
 >'0' && c <'9'Ë|| c ='.' || c =
skùCh¨
 );

204 if(
isNeg©ive
)

205 
vÆue
 = -value;

206 if(
isFø˘i⁄
)

207  
vÆue
 * 
‰a˘i⁄
;

209  
vÆue
;

210 
	}
}

217 
size_t
 
	gSåóm
::
	$ªadByãs
(*
buf„r
, 
size_t
 
Àngth
)

219 
size_t
 
cou¡
 = 0;

220 
cou¡
 < 
Àngth
) {

221 
c
 = 
	`timedRód
();

222 i‡(
c
 < 0) ;

223 *
buf„r
++ = ()
c
;

224 
cou¡
++;

226  
cou¡
;

227 
	}
}

234 
size_t
 
	gSåóm
::
	$ªadByãsU¡û
(
ãrmö©‹
, *
buf„r
, 
size_t
 
Àngth
)

236 i‡(
Àngth
 < 1)  0;

237 
size_t
 
ödex
 = 0;

238 
ödex
 < 
Àngth
) {

239 
c
 = 
	`timedRód
();

240 i‡(
c
 < 0 || c =
ãrmö©‹
) ;

241 *
buf„r
++ = ()
c
;

242 
ödex
++;

244  
ödex
;

245 
	}
}

247 
Såög
 
	gSåóm
::
	$ªadSåög
()

249 
Såög
 
ªt
;

250 
c
 = 
	`timedRód
();

251 
c
 >= 0)

253 
ªt
 +()
c
;

254 
c
 = 
	`timedRód
();

256  
ªt
;

257 
	}
}

259 
Såög
 
	gSåóm
::
	$ªadSåögU¡û
(
ãrmö©‹
)

261 
Såög
 
ªt
;

262 
c
 = 
	`timedRód
();

263 
c
 >0 && c !
ãrmö©‹
)

265 
ªt
 +()
c
;

266 
c
 = 
	`timedRód
();

268  
ªt
;

269 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/Stream.h

22 #i‚de‡
Såóm_h


23 
	#Såóm_h


	)

25 
	~<öây≥s.h
>

26 
	~"Pröt.h
"

38 ˛as†
	cSåóm
 : 
public
 
Pröt


40 
¥iv©e
:

41 
_timeout
;

42 
	m_°¨tMûlis
;

43 
timedRód
();

44 
timedPìk
();

45 
≥ekNextDigô
();

47 
	mpublic
:

48 
vútuÆ
 
avaûabÀ
() = 0;

49 
vútuÆ
 
ªad
() = 0;

50 
vútuÆ
 
≥ek
() = 0;

51 
vútuÆ
 
Êush
() = 0;

53 
	$Såóm
(Ë{
_timeout
=1000;}

57 
	`£tTimeout
(
timeout
);

59 
boﬁ
 
	`föd
(*
èrgë
);

62 
boﬁ
 
	`föd
(*
èrgë
, 
size_t
 
Àngth
);

65 
boﬁ
 
	`födU¡û
(*
èrgë
, *
ãrmö©‹
);

67 
boﬁ
 
	`födU¡û
(*
èrgë
, 
size_t
 
èrgëLí
, *
ãrmö©e
, size_à
ãrmLí
);

70 
	`∑r£I¡
();

74 
	`∑r£Flﬂt
();

76 
size_t
 
	`ªadByãs
–*
buf„r
, size_à
Àngth
);

80 
size_t
 
	`ªadByãsU¡û
–
ãrmö©‹
, *
buf„r
, size_à
Àngth
);

85 
Såög
 
	`ªadSåög
();

86 
Såög
 
	`ªadSåögU¡û
(
ãrmö©‹
);

88 
¥Ÿe˘ed
:

89 
	`∑r£I¡
(
skùCh¨
);

93 
	`∑r£Flﬂt
(
skùCh¨
);

94 
	}
};

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/Tone.cpp

35 
	~<avr/öãºu±.h
>

36 
	~<avr/pgm•a˚.h
>

37 
	~"Arduöo.h
"

38 
	~"pös_¨duöo.h
"

40 #i‡
deföed
(
__AVR_ATmega8__
Ë|| deföed(
__AVR_ATmega128__
)

41 
	#TCCR2A
 
TCCR2


	)

42 
	#TCCR2B
 
TCCR2


	)

43 
	#COM2A1
 
COM21


	)

44 
	#COM2A0
 
COM20


	)

45 
	#OCR2A
 
OCR2


	)

46 
	#TIMSK2
 
TIMSK


	)

47 
	#OCIE2A
 
OCIE2


	)

48 
	#TIMER2_COMPA_ve˘
 
TIMER2_COMP_ve˘


	)

49 
	#TIMSK1
 
TIMSK


	)

57 #i‡!
deföed
(
__AVR_ATmega8__
)

58 vﬁ©ûê
	gtimî0_toggÀ_cou¡
;

59 vﬁ©ûê
uöt8_t
 *
	gtimî0_pö_p‹t
;

60 vﬁ©ûê
uöt8_t
 
	gtimî0_pö_mask
;

63 vﬁ©ûê
	gtimî1_toggÀ_cou¡
;

64 vﬁ©ûê
uöt8_t
 *
	gtimî1_pö_p‹t
;

65 vﬁ©ûê
uöt8_t
 
	gtimî1_pö_mask
;

66 vﬁ©ûê
	gtimî2_toggÀ_cou¡
;

67 vﬁ©ûê
uöt8_t
 *
	gtimî2_pö_p‹t
;

68 vﬁ©ûê
uöt8_t
 
	gtimî2_pö_mask
;

70 #i‡
deföed
(
TIMSK3
)

71 vﬁ©ûê
	gtimî3_toggÀ_cou¡
;

72 vﬁ©ûê
uöt8_t
 *
	gtimî3_pö_p‹t
;

73 vﬁ©ûê
uöt8_t
 
	gtimî3_pö_mask
;

76 #i‡
deföed
(
TIMSK4
)

77 vﬁ©ûê
	gtimî4_toggÀ_cou¡
;

78 vﬁ©ûê
uöt8_t
 *
	gtimî4_pö_p‹t
;

79 vﬁ©ûê
uöt8_t
 
	gtimî4_pö_mask
;

82 #i‡
deföed
(
TIMSK5
)

83 vﬁ©ûê
	gtimî5_toggÀ_cou¡
;

84 vﬁ©ûê
uöt8_t
 *
	gtimî5_pö_p‹t
;

85 vﬁ©ûê
uöt8_t
 
	gtimî5_pö_mask
;

89 #i‡
deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega2560__
)

91 
	#AVAILABLE_TONE_PINS
 1

	)

92 
	#USE_TIMER2


	)

94 c⁄° 
uöt8_t
 
PROGMEM
 
	gt⁄e_pö_to_timî_PGM
[] = { 2 };

95 
uöt8_t
 
	gt⁄e_pös
[
AVAILABLE_TONE_PINS
] = { 255 };

97 #ñi‡
deföed
(
__AVR_ATmega8__
)

99 
	#AVAILABLE_TONE_PINS
 1

	)

100 
	#USE_TIMER2


	)

102 c⁄° 
uöt8_t
 
PROGMEM
 
	gt⁄e_pö_to_timî_PGM
[] = { 2 };

103 
uöt8_t
 
	gt⁄e_pös
[
AVAILABLE_TONE_PINS
] = { 255 };

105 #ñi‡
deföed
(
__AVR_ATmega32U4__
)

107 
	#AVAILABLE_TONE_PINS
 1

	)

108 
	#USE_TIMER3


	)

110 c⁄° 
uöt8_t
 
PROGMEM
 
	gt⁄e_pö_to_timî_PGM
[] = { 3 };

111 
uöt8_t
 
	gt⁄e_pös
[
AVAILABLE_TONE_PINS
] = { 255 };

115 
	#AVAILABLE_TONE_PINS
 1

	)

116 
	#USE_TIMER2


	)

119 c⁄° 
uöt8_t
 
PROGMEM
 
	gt⁄e_pö_to_timî_PGM
[] = { 2 };

120 
uöt8_t
 
	gt⁄e_pös
[
AVAILABLE_TONE_PINS
] = { 255 };

126 
öt8_t
 
	$t⁄eBegö
(
uöt8_t
 
_pö
)

128 
öt8_t
 
_timî
 = -1;

131 
i
 = 0; i < 
AVAILABLE_TONE_PINS
; i++) {

132 i‡(
t⁄e_pös
[
i
] =
_pö
) {

133  
	`pgm_ªad_byã
(
t⁄e_pö_to_timî_PGM
 + 
i
);

138 
i
 = 0; i < 
AVAILABLE_TONE_PINS
; i++) {

139 i‡(
t⁄e_pös
[
i
] == 255) {

140 
t⁄e_pös
[
i
] = 
_pö
;

141 
_timî
 = 
	`pgm_ªad_byã
(
t⁄e_pö_to_timî_PGM
 + 
i
);

146 i‡(
_timî
 != -1)

152 
_timî
)

154 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
TCCR0B
)

157 
TCCR0A
 = 0;

158 
TCCR0B
 = 0;

159 
	`bôWrôe
(
TCCR0A
, 
WGM01
, 1);

160 
	`bôWrôe
(
TCCR0B
, 
CS00
, 1);

161 
timî0_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

162 
timî0_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

166 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
TCCR1B
Ë&& deföed(
WGM12
)

169 
TCCR1A
 = 0;

170 
TCCR1B
 = 0;

171 
	`bôWrôe
(
TCCR1B
, 
WGM12
, 1);

172 
	`bôWrôe
(
TCCR1B
, 
CS10
, 1);

173 
timî1_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

174 
timî1_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

178 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
TCCR2B
)

181 
TCCR2A
 = 0;

182 
TCCR2B
 = 0;

183 
	`bôWrôe
(
TCCR2A
, 
WGM21
, 1);

184 
	`bôWrôe
(
TCCR2B
, 
CS20
, 1);

185 
timî2_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

186 
timî2_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

190 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
TCCR3B
Ë&& deföed(
TIMSK3
)

193 
TCCR3A
 = 0;

194 
TCCR3B
 = 0;

195 
	`bôWrôe
(
TCCR3B
, 
WGM32
, 1);

196 
	`bôWrôe
(
TCCR3B
, 
CS30
, 1);

197 
timî3_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

198 
timî3_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

202 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
TCCR4B
Ë&& deföed(
TIMSK4
)

205 
TCCR4A
 = 0;

206 
TCCR4B
 = 0;

207 #i‡
	`deföed
(
WGM42
)

208 
	`bôWrôe
(
TCCR4B
, 
WGM42
, 1);

209 #ñi‡
	`deföed
(
CS43
)

210 #w¨nög 
this
 
may
 
nŸ
 
be
 
c‹ª˘


212 
	`bôWrôe
(
TCCR4B
, 
CS43
, 1);

214 
	`bôWrôe
(
TCCR4B
, 
CS40
, 1);

215 
timî4_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

216 
timî4_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

220 #i‡
	`deföed
(
TCCR5A
Ë&& deföed(
TCCR5B
Ë&& deföed(
TIMSK5
)

223 
TCCR5A
 = 0;

224 
TCCR5B
 = 0;

225 
	`bôWrôe
(
TCCR5B
, 
WGM52
, 1);

226 
	`bôWrôe
(
TCCR5B
, 
CS50
, 1);

227 
timî5_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

228 
timî5_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

234  
_timî
;

235 
	}
}

241 
	$t⁄e
(
uöt8_t
 
_pö
, 
‰equícy
, 
duøti⁄
)

243 
uöt8_t
 
¥esˇœrbôs
 = 0b001;

244 
toggÀ_cou¡
 = 0;

245 
uöt32_t
 
o¸
 = 0;

246 
öt8_t
 
_timî
;

248 
_timî
 = 
	`t⁄eBegö
(
_pö
);

250 i‡(
_timî
 >= 0)

253 
	`pöMode
(
_pö
, 
OUTPUT
);

256 i‡(
_timî
 == 0 || _timer == 2)

258 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 - 1;

259 
¥esˇœrbôs
 = 0b001;

260 i‡(
o¸
 > 255)

262 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 8 - 1;

263 
¥esˇœrbôs
 = 0b010;

265 i‡(
_timî
 =2 && 
o¸
 > 255)

267 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 32 - 1;

268 
¥esˇœrbôs
 = 0b011;

271 i‡(
o¸
 > 255)

273 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 64 - 1;

274 
¥esˇœrbôs
 = 
_timî
 == 0 ? 0b011 : 0b100;

276 i‡(
_timî
 =2 && 
o¸
 > 255)

278 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 128 - 1;

279 
¥esˇœrbôs
 = 0b101;

282 i‡(
o¸
 > 255)

284 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 256 - 1;

285 
¥esˇœrbôs
 = 
_timî
 == 0 ? 0b100 : 0b110;

286 i‡(
o¸
 > 255)

289 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 1024 - 1;

290 
¥esˇœrbôs
 = 
_timî
 == 0 ? 0b101 : 0b111;

296 #i‡
	`deföed
(
TCCR0B
)

297 i‡(
_timî
 == 0)

299 
TCCR0B
 = 
¥esˇœrbôs
;

303 #i‡
	`deföed
(
TCCR2B
)

305 
TCCR2B
 = 
¥esˇœrbôs
;

316 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 - 1;

318 
¥esˇœrbôs
 = 0b001;

319 i‡(
o¸
 > 0xffff)

321 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 64 - 1;

322 
¥esˇœrbôs
 = 0b011;

325 i‡(
_timî
 == 1)

327 #i‡
	`deföed
(
TCCR1B
)

328 
TCCR1B
 = (TCCR1B & 0b11111000Ë| 
¥esˇœrbôs
;

331 #i‡
	`deföed
(
TCCR3B
)

332 i‡(
_timî
 == 3)

333 
TCCR3B
 = (TCCR3B & 0b11111000Ë| 
¥esˇœrbôs
;

335 #i‡
	`deföed
(
TCCR4B
)

336 i‡(
_timî
 == 4)

337 
TCCR4B
 = (TCCR4B & 0b11111000Ë| 
¥esˇœrbôs
;

339 #i‡
	`deföed
(
TCCR5B
)

340 i‡(
_timî
 == 5)

341 
TCCR5B
 = (TCCR5B & 0b11111000Ë| 
¥esˇœrbôs
;

348 i‡(
duøti⁄
 > 0)

350 
toggÀ_cou¡
 = 2 * 
‰equícy
 * 
duøti⁄
 / 1000;

354 
toggÀ_cou¡
 = -1;

360 
_timî
)

363 #i‡
	`deföed
(
OCR0A
Ë&& deföed(
TIMSK0
Ë&& deföed(
OCIE0A
)

365 
OCR0A
 = 
o¸
;

366 
timî0_toggÀ_cou¡
 = 
toggÀ_cou¡
;

367 
	`bôWrôe
(
TIMSK0
, 
OCIE0A
, 1);

372 #i‡
	`deföed
(
OCR1A
Ë&& deföed(
TIMSK1
Ë&& deföed(
OCIE1A
)

373 
OCR1A
 = 
o¸
;

374 
timî1_toggÀ_cou¡
 = 
toggÀ_cou¡
;

375 
	`bôWrôe
(
TIMSK1
, 
OCIE1A
, 1);

376 #ñi‡
	`deföed
(
OCR1A
Ë&& deföed(
TIMSK
Ë&& deföed(
OCIE1A
)

378 
OCR1A
 = 
o¸
;

379 
timî1_toggÀ_cou¡
 = 
toggÀ_cou¡
;

380 
	`bôWrôe
(
TIMSK
, 
OCIE1A
, 1);

384 #i‡
	`deföed
(
OCR2A
Ë&& deföed(
TIMSK2
Ë&& deföed(
OCIE2A
)

386 
OCR2A
 = 
o¸
;

387 
timî2_toggÀ_cou¡
 = 
toggÀ_cou¡
;

388 
	`bôWrôe
(
TIMSK2
, 
OCIE2A
, 1);

392 #i‡
	`deföed
(
TIMSK3
)

394 
OCR3A
 = 
o¸
;

395 
timî3_toggÀ_cou¡
 = 
toggÀ_cou¡
;

396 
	`bôWrôe
(
TIMSK3
, 
OCIE3A
, 1);

400 #i‡
	`deföed
(
TIMSK4
)

402 
OCR4A
 = 
o¸
;

403 
timî4_toggÀ_cou¡
 = 
toggÀ_cou¡
;

404 
	`bôWrôe
(
TIMSK4
, 
OCIE4A
, 1);

408 #i‡
	`deföed
(
OCR5A
Ë&& deföed(
TIMSK5
Ë&& deföed(
OCIE5A
)

410 
OCR5A
 = 
o¸
;

411 
timî5_toggÀ_cou¡
 = 
toggÀ_cou¡
;

412 
	`bôWrôe
(
TIMSK5
, 
OCIE5A
, 1);

418 
	}
}

424 
	$dißbÀTimî
(
uöt8_t
 
_timî
)

426 
_timî
)

429 #i‡
	`deföed
(
TIMSK0
)

430 
TIMSK0
 = 0;

431 #ñi‡
	`deföed
(
TIMSK
)

432 
TIMSK
 = 0;

436 #i‡
	`deföed
(
TIMSK1
Ë&& deföed(
OCIE1A
)

438 
	`bôWrôe
(
TIMSK1
, 
OCIE1A
, 0);

443 #i‡
	`deföed
(
TIMSK2
Ë&& deföed(
OCIE2A
)

444 
	`bôWrôe
(
TIMSK2
, 
OCIE2A
, 0);

446 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
WGM20
)

447 
TCCR2A
 = (1 << 
WGM20
);

449 #i‡
	`deföed
(
TCCR2B
Ë&& deföed(
CS22
)

450 
TCCR2B
 = (TCCR2B & 0b11111000Ë| (1 << 
CS22
);

452 #i‡
	`deföed
(
OCR2A
)

453 
OCR2A
 = 0;

457 #i‡
	`deföed
(
TIMSK3
)

459 
TIMSK3
 = 0;

463 #i‡
	`deföed
(
TIMSK4
)

465 
TIMSK4
 = 0;

469 #i‡
	`deföed
(
TIMSK5
)

471 
TIMSK5
 = 0;

475 
	}
}

478 
	$noT⁄e
(
uöt8_t
 
_pö
)

480 
öt8_t
 
_timî
 = -1;

482 
i
 = 0; i < 
AVAILABLE_TONE_PINS
; i++) {

483 i‡(
t⁄e_pös
[
i
] =
_pö
) {

484 
_timî
 = 
	`pgm_ªad_byã
(
t⁄e_pö_to_timî_PGM
 + 
i
);

485 
t⁄e_pös
[
i
] = 255;

489 
	`dißbÀTimî
(
_timî
);

491 
	`digôÆWrôe
(
_pö
, 0);

492 
	}
}

494 #ifde‡
USE_TIMER0


495 
	$ISR
(
TIMER0_COMPA_ve˘
)

497 i‡(
timî0_toggÀ_cou¡
 != 0)

500 *
timî0_pö_p‹t
 ^
timî0_pö_mask
;

502 i‡(
timî0_toggÀ_cou¡
 > 0)

503 
timî0_toggÀ_cou¡
--;

507 
	`dißbÀTimî
(0);

508 *
timî0_pö_p‹t
 &~(
timî0_pö_mask
);

510 
	}
}

514 #ifde‡
USE_TIMER1


515 
	$ISR
(
TIMER1_COMPA_ve˘
)

517 i‡(
timî1_toggÀ_cou¡
 != 0)

520 *
timî1_pö_p‹t
 ^
timî1_pö_mask
;

522 i‡(
timî1_toggÀ_cou¡
 > 0)

523 
timî1_toggÀ_cou¡
--;

527 
	`dißbÀTimî
(1);

528 *
timî1_pö_p‹t
 &~(
timî1_pö_mask
);

530 
	}
}

534 #ifde‡
USE_TIMER2


535 
	$ISR
(
TIMER2_COMPA_ve˘
)

538 i‡(
timî2_toggÀ_cou¡
 != 0)

541 *
timî2_pö_p‹t
 ^
timî2_pö_mask
;

543 i‡(
timî2_toggÀ_cou¡
 > 0)

544 
timî2_toggÀ_cou¡
--;

551 
	`noT⁄e
(
t⁄e_pös
[0]);

555 
	}
}

559 #ifde‡
USE_TIMER3


560 
	$ISR
(
TIMER3_COMPA_ve˘
)

562 i‡(
timî3_toggÀ_cou¡
 != 0)

565 *
timî3_pö_p‹t
 ^
timî3_pö_mask
;

567 i‡(
timî3_toggÀ_cou¡
 > 0)

568 
timî3_toggÀ_cou¡
--;

572 
	`dißbÀTimî
(3);

573 *
timî3_pö_p‹t
 &~(
timî3_pö_mask
);

575 
	}
}

579 #ifde‡
USE_TIMER4


580 
	$ISR
(
TIMER4_COMPA_ve˘
)

582 i‡(
timî4_toggÀ_cou¡
 != 0)

585 *
timî4_pö_p‹t
 ^
timî4_pö_mask
;

587 i‡(
timî4_toggÀ_cou¡
 > 0)

588 
timî4_toggÀ_cou¡
--;

592 
	`dißbÀTimî
(4);

593 *
timî4_pö_p‹t
 &~(
timî4_pö_mask
);

595 
	}
}

599 #ifde‡
USE_TIMER5


600 
	$ISR
(
TIMER5_COMPA_ve˘
)

602 i‡(
timî5_toggÀ_cou¡
 != 0)

605 *
timî5_pö_p‹t
 ^
timî5_pö_mask
;

607 i‡(
timî5_toggÀ_cou¡
 > 0)

608 
timî5_toggÀ_cou¡
--;

612 
	`dißbÀTimî
(5);

613 *
timî5_pö_p‹t
 &~(
timî5_pö_mask
);

615 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/USBAPI.h

3 #i‚de‡
__USBAPI__


4 
	#__USBAPI__


	)

6 #i‡
deföed
(
USBCON
)

12 ˛as†
	cUSBDevi˚_


14 
	mpublic
:

15 
USBDevi˚_
();

16 
boﬁ
 
c⁄figuªd
();

18 
©èch
();

19 
dëach
();

20 
pﬁl
();

22 
USBDevi˚_
 
USBDevi˚
;

28 ˛as†
	cSîül_
 : 
public
 
Såóm


30 
¥iv©e
:

31 
rög_buf„r
 *
_cdc_rx_buf„r
;

32 
	mpublic
:

33 
begö
(
uöt16_t
 
baud_cou¡
);

34 
íd
();

36 
vútuÆ
 
avaûabÀ
();

37 
vútuÆ
 
ac˚±
();

38 
vútuÆ
 
≥ek
();

39 
vútuÆ
 
ªad
();

40 
vútuÆ
 
Êush
();

41 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
);

42 
usög
 
	mPröt
::
wrôe
;

43 
›î©‹
 
boﬁ
();

45 
Sîül_
 
Sîül
;

51 
	#MOUSE_LEFT
 1

	)

52 
	#MOUSE_RIGHT
 2

	)

53 
	#MOUSE_MIDDLE
 4

	)

54 
	#MOUSE_ALL
 (
MOUSE_LEFT
 | 
MOUSE_RIGHT
 | 
MOUSE_MIDDLE
)

	)

56 ˛as†
	cMou£_


58 
	m¥iv©e
:

59 
uöt8_t
 
_buâ⁄s
;

60 
buâ⁄s
(
uöt8_t
 
b
);

61 
	mpublic
:

62 
Mou£_
();

63 
begö
();

64 
íd
();

65 
˛ick
(
uöt8_t
 
b
 = 
MOUSE_LEFT
);

66 
move
(sig√d 
x
, sig√d 
y
, sig√d 
whìl
 = 0);

67 
¥ess
(
uöt8_t
 
b
 = 
MOUSE_LEFT
);

68 
ªÀa£
(
uöt8_t
 
b
 = 
MOUSE_LEFT
);

69 
boﬁ
 
isPªs£d
(
uöt8_t
 
b
 = 
MOUSE_LEFT
);

71 
Mou£_
 
Mou£
;

77 
	#KEY_LEFT_CTRL
 0x80

	)

78 
	#KEY_LEFT_SHIFT
 0x81

	)

79 
	#KEY_LEFT_ALT
 0x82

	)

80 
	#KEY_LEFT_GUI
 0x83

	)

81 
	#KEY_RIGHT_CTRL
 0x84

	)

82 
	#KEY_RIGHT_SHIFT
 0x85

	)

83 
	#KEY_RIGHT_ALT
 0x86

	)

84 
	#KEY_RIGHT_GUI
 0x87

	)

86 
	#KEY_UP_ARROW
 0xDA

	)

87 
	#KEY_DOWN_ARROW
 0xD9

	)

88 
	#KEY_LEFT_ARROW
 0xD8

	)

89 
	#KEY_RIGHT_ARROW
 0xD7

	)

90 
	#KEY_BACKSPACE
 0xB2

	)

91 
	#KEY_TAB
 0xB3

	)

92 
	#KEY_RETURN
 0xB0

	)

93 
	#KEY_ESC
 0xB1

	)

94 
	#KEY_INSERT
 0xD1

	)

95 
	#KEY_DELETE
 0xD4

	)

96 
	#KEY_PAGE_UP
 0xD3

	)

97 
	#KEY_PAGE_DOWN
 0xD6

	)

98 
	#KEY_HOME
 0xD2

	)

99 
	#KEY_END
 0xD5

	)

100 
	#KEY_CAPS_LOCK
 0xC1

	)

101 
	#KEY_F1
 0xC2

	)

102 
	#KEY_F2
 0xC3

	)

103 
	#KEY_F3
 0xC4

	)

104 
	#KEY_F4
 0xC5

	)

105 
	#KEY_F5
 0xC6

	)

106 
	#KEY_F6
 0xC7

	)

107 
	#KEY_F7
 0xC8

	)

108 
	#KEY_F8
 0xC9

	)

109 
	#KEY_F9
 0xCA

	)

110 
	#KEY_F10
 0xCB

	)

111 
	#KEY_F11
 0xCC

	)

112 
	#KEY_F12
 0xCD

	)

117 
uöt8_t
 
	mmodifõrs
;

118 
uöt8_t
 
	mª£rved
;

119 
uöt8_t
 
	mkeys
[6];

120 } 
	tKeyRï‹t
;

122 ˛as†
	cKeybﬂrd_
 : 
public
 
Pröt


124 
¥iv©e
:

125 
KeyRï‹t
 
_keyRï‹t
;

126 
£ndRï‹t
(
KeyRï‹t
* 
keys
);

127 
	mpublic
:

128 
Keybﬂrd_
();

129 
begö
();

130 
íd
();

131 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
 
k
);

132 
vútuÆ
 
size_t
 
¥ess
(
uöt8_t
 
k
);

133 
vútuÆ
 
size_t
 
ªÀa£
(
uöt8_t
 
k
);

134 
vútuÆ
 
ªÀa£AŒ
();

136 
Keybﬂrd_
 
Keybﬂrd
;

144 
uöt8_t
 
	mbmReque°Ty≥
;

145 
uöt8_t
 
	mbReque°
;

146 
uöt8_t
 
	mwVÆueL
;

147 
uöt8_t
 
	mwVÆueH
;

148 
uöt16_t
 
	mwIndex
;

149 
uöt16_t
 
	mwLígth
;

150 } 
	tSëup
;

156 
HID_GëI¡îÁ˚
(
uöt8_t
* 
öãrÁ˚Num
);

157 
HID_GëDes¸ùt‹
(
i
);

158 
boﬁ
 
HID_Sëup
(
Sëup
& 
£tup
);

159 
HID_SídRï‹t
(
uöt8_t
 
id
, c⁄° * 
d©a
, 
Àn
);

165 
MSC_GëI¡îÁ˚
(
uöt8_t
* 
öãrÁ˚Num
);

166 
MSC_GëDes¸ùt‹
(
i
);

167 
boﬁ
 
MSC_Sëup
(
Sëup
& 
£tup
);

168 
boﬁ
 
MSC_D©a
(
uöt8_t
 
rx
,uöt8_à
tx
);

174 
CDC_GëI¡îÁ˚
(
uöt8_t
* 
öãrÁ˚Num
);

175 
CDC_GëDes¸ùt‹
(
i
);

176 
boﬁ
 
CDC_Sëup
(
Sëup
& 
£tup
);

181 
	#TRANSFER_PGM
 0x80

	)

182 
	#TRANSFER_RELEASE
 0x40

	)

183 
	#TRANSFER_ZERO
 0x20

	)

185 
USB_SídC⁄åﬁ
(
uöt8_t
 
Êags
, c⁄° * 
d
, 
Àn
);

186 
USB_RecvC⁄åﬁ
(* 
d
, 
Àn
);

188 
uöt8_t
 
USB_AvaûabÀ
(uöt8_à
ï
);

189 
USB_Síd
(
uöt8_t
 
ï
, c⁄° * 
d©a
, 
Àn
);

190 
USB_Recv
(
uöt8_t
 
ï
, * 
d©a
, 
Àn
);

191 
USB_Recv
(
uöt8_t
 
ï
);

192 
USB_Flush
(
uöt8_t
 
ï
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/USBCore.cpp

19 
	~"Pœtf‹m.h
"

20 
	~"USBAPI.h
"

21 
	~"USBDesc.h
"

23 #i‡
deföed
(
USBCON
)

25 
	#EP_TYPE_CONTROL
 0x00

	)

26 
	#EP_TYPE_BULK_IN
 0x81

	)

27 
	#EP_TYPE_BULK_OUT
 0x80

	)

28 
	#EP_TYPE_INTERRUPT_IN
 0xC1

	)

29 
	#EP_TYPE_INTERRUPT_OUT
 0xC0

	)

30 
	#EP_TYPE_ISOCHRONOUS_IN
 0x41

	)

31 
	#EP_TYPE_ISOCHRONOUS_OUT
 0x40

	)

34 
	#TX_RX_LED_PULSE_MS
 100

	)

35 vﬁ©ûê
u8
 
	gTxLEDPul£
;

36 vﬁ©ûê
u8
 
	gRxLEDPul£
;

41 c⁄° 
u16
 
STRING_LANGUAGE
[] 
PROGMEM
;

42 c⁄° 
u16
 
STRING_IPRODUCT
[] 
PROGMEM
;

43 c⁄° 
u16
 
STRING_IMANUFACTURER
[] 
PROGMEM
;

44 c⁄° 
Devi˚Des¸ùt‹
 
USB_Devi˚Des¸ùt‹
 
PROGMEM
;

45 c⁄° 
Devi˚Des¸ùt‹
 
USB_Devi˚Des¸ùt‹A
 
PROGMEM
;

47 c⁄° 
u16
 
	gSTRING_LANGUAGE
[2] = {

52 c⁄° 
u16
 
	gSTRING_IPRODUCT
[17] = {

54 #i‡
USB_PID
 == 0x8036

56 #ñi‡
USB_PID
 == 0x8037

58 #ñi‡
USB_PID
 == 0x803C

60 #ñi‡
USB_PID
 == 0x9208

67 c⁄° 
u16
 
	gSTRING_IMANUFACTURER
[12] = {

69 #i‡
USB_VID
 == 0x2341

71 #ñi‡
USB_VID
 == 0x1b4f

78 #ifde‡
CDC_ENABLED


79 
	#DEVICE_CLASS
 0x02

	)

81 
	#DEVICE_CLASS
 0x00

	)

85 c⁄° 
Devi˚Des¸ùt‹
 
	gUSB_Devi˚Des¸ùt‹
 =

86 
D_DEVICE
(0x00,0x00,0x00,64,
USB_VID
,
USB_PID
,0x100,
IMANUFACTURER
,
IPRODUCT
,0,1);

88 c⁄° 
Devi˚Des¸ùt‹
 
	gUSB_Devi˚Des¸ùt‹A
 =

89 
D_DEVICE
(
DEVICE_CLASS
,0x00,0x00,64,
USB_VID
,
USB_PID
,0x100,
IMANUFACTURER
,
IPRODUCT
,0,1);

94 vﬁ©ûê
u8
 
	g_usbC⁄figuøti⁄
 = 0;

96 
ölöe
 
	$WaôIN
()

98 !(
UEINTX
 & (1<<
TXINI
)));

99 
	}
}

101 
ölöe
 
	$CÀ¨IN
()

103 
UEINTX
 = ~(1<<
TXINI
);

104 
	}
}

106 
ölöe
 
	$WaôOUT
()

108 !(
UEINTX
 & (1<<
RXOUTI
)))

110 
	}
}

112 
ölöe
 
u8
 
	$WaôF‹INOrOUT
()

114 !(
UEINTX
 & ((1<<
TXINI
)|(1<<
RXOUTI
))))

116  (
UEINTX
 & (1<<
RXOUTI
)) == 0;

117 
	}
}

119 
ölöe
 
	$CÀ¨OUT
()

121 
UEINTX
 = ~(1<<
RXOUTI
);

122 
	}
}

124 
	$Recv
(vﬁ©ûê
u8
* 
d©a
, u8 
cou¡
)

126 
cou¡
--)

127 *
d©a
++ = 
UEDATX
;

129 
RXLED1
;

130 
RxLEDPul£
 = 
TX_RX_LED_PULSE_MS
;

131 
	}
}

133 
ölöe
 
u8
 
	$Recv8
()

135 
RXLED1
;

136 
RxLEDPul£
 = 
TX_RX_LED_PULSE_MS
;

138  
UEDATX
;

139 
	}
}

141 
ölöe
 
	$Síd8
(
u8
 
d
)

143 
UEDATX
 = 
d
;

144 
	}
}

146 
ölöe
 
	$SëEP
(
u8
 
ï
)

148 
UENUM
 = 
ï
;

149 
	}
}

151 
ölöe
 
u8
 
	$FifoByãCou¡
()

153  
UEBCLX
;

154 
	}
}

156 
ölöe
 
u8
 
	$Re˚ivedSëupI¡
()

158  
UEINTX
 & (1<<
RXSTPI
);

159 
	}
}

161 
ölöe
 
	$CÀ¨SëupI¡
()

163 
UEINTX
 = ~((1<<
RXSTPI
Ë| (1<<
RXOUTI
Ë| (1<<
TXINI
));

164 
	}
}

166 
ölöe
 
	$SèŒ
()

168 
UECONX
 = (1<<
STALLRQ
Ë| (1<<
EPEN
);

169 
	}
}

171 
ölöe
 
u8
 
	$RódWrôeAŒowed
()

173  
UEINTX
 & (1<<
RWAL
);

174 
	}
}

176 
ölöe
 
u8
 
	$SèŒed
()

178  
UEINTX
 & (1<<
STALLEDI
);

179 
	}
}

181 
ölöe
 
u8
 
	$FifoFªe
()

183  
UEINTX
 & (1<<
FIFOCON
);

184 
	}
}

186 
ölöe
 
	$Rñó£RX
()

188 
UEINTX
 = 0x6B;

189 
	}
}

191 
ölöe
 
	$Rñó£TX
()

193 
UEINTX
 = 0x3A;

194 
	}
}

196 
ölöe
 
u8
 
	$FømeNumbî
()

198  
UDFNUML
;

199 
	}
}

204 
u8
 
	$USBGëC⁄figuøti⁄
()

206  
_usbC⁄figuøti⁄
;

207 
	}
}

209 
	#USB_RECV_TIMEOUT


	)

210 ˛as†
	cLockEP


212 
u8
 
	m_§eg
;

213 
	mpublic
:

214 
	$LockEP
(
u8
 
ï
Ë: 
	$_§eg
(
SREG
)

216 
	`˛i
();

217 
	`SëEP
(
ï
 & 7);

219 ~
	$LockEP
()

221 
SREG
 = 
_§eg
;

222 
	}
}

226 
u8
 
	$USB_AvaûabÀ
(
u8
 
ï
)

228 
LockEP
 
	`lock
(
ï
);

229  
	`FifoByãCou¡
();

230 
	}
}

234 
	$USB_Recv
(
u8
 
ï
, * 
d
, 
Àn
)

236 i‡(!
_usbC⁄figuøti⁄
 || 
Àn
 < 0)

239 
LockEP
 
	`lock
(
ï
);

240 
u8
 
n
 = 
	`FifoByãCou¡
();

241 
Àn
 = 
	`mö
(
n
,len);

242 
n
 = 
Àn
;

243 
u8
* 
d°
 = (u8*)
d
;

244 
n
--)

245 *
d°
++ = 
	`Recv8
();

246 i‡(
Àn
 && !
	`FifoByãCou¡
())

247 
	`Rñó£RX
();

249  
Àn
;

250 
	}
}

253 
	$USB_Recv
(
u8
 
ï
)

255 
u8
 
c
;

256 i‡(
	`USB_Recv
(
ï
,&
c
,1) != 1)

258  
c
;

259 
	}
}

262 
u8
 
	$USB_SídS∑˚
(
u8
 
ï
)

264 
LockEP
 
	`lock
(
ï
);

265 i‡(!
	`RódWrôeAŒowed
())

267  64 - 
	`FifoByãCou¡
();

268 
	}
}

271 
	$USB_Síd
(
u8
 
ï
, c⁄° * 
d
, 
Àn
)

273 i‡(!
_usbC⁄figuøti⁄
)

276 
r
 = 
Àn
;

277 c⁄° 
u8
* 
d©a
 = (c⁄° u8*)
d
;

278 
u8
 
zîo
 = 
ï
 & 
TRANSFER_ZERO
;

279 
u8
 
timeout
 = 250;

280 
Àn
)

282 
u8
 
n
 = 
	`USB_SídS∑˚
(
ï
);

283 i‡(
n
 == 0)

285 i‡(!(--
timeout
))

287 
	`dñay
(1);

291 i‡(
n
 > 
Àn
)

292 
n
 = 
Àn
;

293 
Àn
 -
n
;

295 
LockEP
 
	`lock
(
ï
);

296 i‡(
ï
 & 
TRANSFER_ZERO
)

298 
n
--)

299 
	`Síd8
(0);

301 i‡(
ï
 & 
TRANSFER_PGM
)

303 
n
--)

304 
	`Síd8
(
	`pgm_ªad_byã
(
d©a
++));

308 
n
--)

309 
	`Síd8
(*
d©a
++);

311 i‡(!
	`RódWrôeAŒowed
(Ë|| ((
Àn
 =0Ë&& (
ï
 & 
TRANSFER_RELEASE
)))

312 
	`Rñó£TX
();

315 
TXLED1
;

316 
TxLEDPul£
 = 
TX_RX_LED_PULSE_MS
;

317  
r
;

318 
	}
}

320 c⁄° 
u8
 
_öôEndpoöts
[] 
PROGMEM
;

321 c⁄° 
u8
 
	g_öôEndpoöts
[] =

325 #ifde‡
CDC_ENABLED


326 
EP_TYPE_INTERRUPT_IN
,

327 
EP_TYPE_BULK_OUT
,

328 
EP_TYPE_BULK_IN
,

331 #ifde‡
HID_ENABLED


332 
EP_TYPE_INTERRUPT_IN


336 
	#EP_SINGLE_64
 0x32

337 
	#EP_DOUBLE_64
 0x36

338 

	)

340 
	$InôEP
(
u8
 
ödex
, u8 
ty≥
, u8 
size
)

342 
UENUM
 = 
ödex
;

343 
UECONX
 = 1;

344 
UECFG0X
 = 
ty≥
;

345 
UECFG1X
 = 
size
;

346 
	}
}

349 
	$InôEndpoöts
()

351 
u8
 
i
 = 1; i < (
_öôEndpoöts
); i++)

353 
UENUM
 = 
i
;

354 
UECONX
 = 1;

355 
UECFG0X
 = 
	`pgm_ªad_byã
(
_öôEndpoöts
+
i
);

356 
UECFG1X
 = 
EP_DOUBLE_64
;

358 
UERST
 = 0x7E;

359 
UERST
 = 0;

360 
	}
}

364 
boﬁ
 
	$CœssI¡îÁ˚Reque°
(
Sëup
& 
£tup
)

366 
u8
 
i
 = 
£tup
.
wIndex
;

368 #ifde‡
CDC_ENABLED


369 i‡(
CDC_ACM_INTERFACE
 =
i
)

370  
	`CDC_Sëup
(
£tup
);

373 #ifde‡
HID_ENABLED


374 i‡(
HID_INTERFACE
 =
i
)

375  
	`HID_Sëup
(
£tup
);

377  
Ál£
;

378 
	}
}

380 
	g_cm¨k
;

381 
	g_˚nd
;

382 
	$InôC⁄åﬁ
(
íd
)

384 
	`SëEP
(0);

385 
_cm¨k
 = 0;

386 
_˚nd
 = 
íd
;

387 
	}
}

390 
boﬁ
 
	$SídC⁄åﬁ
(
u8
 
d
)

392 i‡(
_cm¨k
 < 
_˚nd
)

394 i‡(!
	`WaôF‹INOrOUT
())

395  
Ál£
;

396 
	`Síd8
(
d
);

397 i‡(!((
_cm¨k
 + 1) & 0x3F))

398 
	`CÀ¨IN
();

400 
_cm¨k
++;

401  
åue
;

402 
	}
};

405 
	$USB_SídC⁄åﬁ
(
u8
 
Êags
, c⁄° * 
d
, 
Àn
)

407 
£¡
 = 
Àn
;

408 c⁄° 
u8
* 
d©a
 = (c⁄° u8*)
d
;

409 
boﬁ
 
pgm
 = 
Êags
 & 
TRANSFER_PGM
;

410 
Àn
--)

412 
u8
 
c
 = 
pgm
 ? 
	`pgm_ªad_byã
(
d©a
++) : *data++;

413 i‡(!
	`SídC⁄åﬁ
(
c
))

416  
£¡
;

417 
	}
}

422 
	$USB_RecvC⁄åﬁ
(* 
d
, 
Àn
)

424 
	`WaôOUT
();

425 
	`Recv
((
u8
*)
d
,
Àn
);

426 
	`CÀ¨OUT
();

427  
Àn
;

428 
	}
}

430 
	$SídI¡îÁ˚s
()

432 
tŸÆ
 = 0;

433 
u8
 
öãrÁ˚s
 = 0;

435 #ifde‡
CDC_ENABLED


436 
tŸÆ
 = 
	`CDC_GëI¡îÁ˚
(&
öãrÁ˚s
);

439 #ifde‡
HID_ENABLED


440 
tŸÆ
 +
	`HID_GëI¡îÁ˚
(&
öãrÁ˚s
);

443  
öãrÁ˚s
;

444 
	}
}

450 
boﬁ
 
	$SídC⁄figuøti⁄
(
maxÀn
)

453 
	`InôC⁄åﬁ
(0);

454 
öãrÁ˚s
 = 
	`SídI¡îÁ˚s
();

455 
C⁄figDes¸ùt‹
 
c⁄fig
 = 
	`D_CONFIG
(
_cm¨k
 + (C⁄figDes¸ùt‹),
öãrÁ˚s
);

458 
	`InôC⁄åﬁ
(
maxÀn
);

459 
	`USB_SídC⁄åﬁ
(0,&
c⁄fig
,(
C⁄figDes¸ùt‹
));

460 
	`SídI¡îÁ˚s
();

461  
åue
;

462 
	}
}

464 
u8
 
	g_cdcComposôe
 = 0;

467 
boﬁ
 
	$SídDes¸ùt‹
(
Sëup
& 
£tup
)

469 
u8
 
t
 = 
£tup
.
wVÆueH
;

470 i‡(
USB_CONFIGURATION_DESCRIPTOR_TYPE
 =
t
)

471  
	`SídC⁄figuøti⁄
(
£tup
.
wLígth
);

473 
	`InôC⁄åﬁ
(
£tup
.
wLígth
);

474 #ifde‡
HID_ENABLED


475 i‡(
HID_REPORT_DESCRIPTOR_TYPE
 =
t
)

476  
	`HID_GëDes¸ùt‹
(
t
);

479 
u8
 
desc_Àngth
 = 0;

480 c⁄° 
u8
* 
desc_addr
 = 0;

481 i‡(
USB_DEVICE_DESCRIPTOR_TYPE
 =
t
)

483 i‡(
£tup
.
wLígth
 == 8)

484 
_cdcComposôe
 = 1;

485 
desc_addr
 = 
_cdcComposôe
 ? (c⁄° 
u8
*)&
USB_Devi˚Des¸ùt‹A
 : (c⁄° u8*)&
USB_Devi˚Des¸ùt‹
;

487 i‡(
USB_STRING_DESCRIPTOR_TYPE
 =
t
)

489 i‡(
£tup
.
wVÆueL
 == 0)

490 
desc_addr
 = (c⁄° 
u8
*)&
STRING_LANGUAGE
;

491 i‡(
£tup
.
wVÆueL
 =
IPRODUCT
)

492 
desc_addr
 = (c⁄° 
u8
*)&
STRING_IPRODUCT
;

493 i‡(
£tup
.
wVÆueL
 =
IMANUFACTURER
)

494 
desc_addr
 = (c⁄° 
u8
*)&
STRING_IMANUFACTURER
;

496  
Ál£
;

499 i‡(
desc_addr
 == 0)

500  
Ál£
;

501 i‡(
desc_Àngth
 == 0)

502 
desc_Àngth
 = 
	`pgm_ªad_byã
(
desc_addr
);

504 
	`USB_SídC⁄åﬁ
(
TRANSFER_PGM
,
desc_addr
,
desc_Àngth
);

505  
åue
;

506 
	}
}

509 
	$ISR
(
USB_COM_ve˘
)

511 
	`SëEP
(0);

512 i‡(!
	`Re˚ivedSëupI¡
())

515 
Sëup
 
£tup
;

516 
	`Recv
((
u8
*)&
£tup
,8);

517 
	`CÀ¨SëupI¡
();

519 
u8
 
ªque°Ty≥
 = 
£tup
.
bmReque°Ty≥
;

520 i‡(
ªque°Ty≥
 & 
REQUEST_DEVICETOHOST
)

521 
	`WaôIN
();

523 
	`CÀ¨IN
();

525 
boﬁ
 
ok
 = 
åue
;

526 i‡(
REQUEST_STANDARD
 =(
ªque°Ty≥
 & 
REQUEST_TYPE
))

529 
u8
 
r
 = 
£tup
.
bReque°
;

530 i‡(
GET_STATUS
 =
r
)

532 
	`Síd8
(0);

533 
	`Síd8
(0);

535 i‡(
CLEAR_FEATURE
 =
r
)

538 i‡(
SET_FEATURE
 =
r
)

541 i‡(
SET_ADDRESS
 =
r
)

543 
	`WaôIN
();

544 
UDADDR
 = 
£tup
.
wVÆueL
 | (1<<
ADDEN
);

546 i‡(
GET_DESCRIPTOR
 =
r
)

548 
ok
 = 
	`SídDes¸ùt‹
(
£tup
);

550 i‡(
SET_DESCRIPTOR
 =
r
)

552 
ok
 = 
Ál£
;

554 i‡(
GET_CONFIGURATION
 =
r
)

556 
	`Síd8
(1);

558 i‡(
SET_CONFIGURATION
 =
r
)

560 i‡(
REQUEST_DEVICE
 =(
ªque°Ty≥
 & 
REQUEST_RECIPIENT
))

562 
	`InôEndpoöts
();

563 
_usbC⁄figuøti⁄
 = 
£tup
.
wVÆueL
;

565 
ok
 = 
Ál£
;

567 i‡(
GET_INTERFACE
 =
r
)

570 i‡(
SET_INTERFACE
 =
r
)

576 
	`InôC⁄åﬁ
(
£tup
.
wLígth
);

577 
ok
 = 
	`CœssI¡îÁ˚Reque°
(
£tup
);

580 i‡(
ok
)

581 
	`CÀ¨IN
();

584 
	`SèŒ
();

586 
	}
}

588 
	$USB_Flush
(
u8
 
ï
)

590 
	`SëEP
(
ï
);

591 i‡(
	`FifoByãCou¡
())

592 
	`Rñó£TX
();

593 
	}
}

596 
	$ISR
(
USB_GEN_ve˘
)

598 
u8
 
udöt
 = 
UDINT
;

599 
UDINT
 = 0;

602 i‡(
udöt
 & (1<<
EORSTI
))

604 
	`InôEP
(0,
EP_TYPE_CONTROL
,
EP_SINGLE_64
);

605 
_usbC⁄figuøti⁄
 = 0;

606 
UEIENX
 = 1 << 
RXSTPE
;

610 i‡(
udöt
 & (1<<
SOFI
))

612 #ifde‡
CDC_ENABLED


613 
	`USB_Flush
(
CDC_TX
);

614 i‡(
	`USB_AvaûabÀ
(
CDC_RX
))

615 
Sîül
.
	`ac˚±
();

619 i‡(
TxLEDPul£
 && !(--TxLEDPulse))

620 
TXLED0
;

621 i‡(
RxLEDPul£
 && !(--RxLEDPulse))

622 
RXLED0
;

624 
	}
}

628 
u8
 
	$USBC⁄√˘ed
()

630 
u8
 
f
 = 
UDFNUML
;

631 
	`dñay
(3);

632  
f
 !
UDFNUML
;

633 
	}
}

638 
USBDevi˚_
 
	gUSBDevi˚
;

640 
	gUSBDevi˚_
::
	$USBDevi˚_
()

642 
	}
}

644 
USBDevi˚_
::
	$©èch
()

646 
_usbC⁄figuøti⁄
 = 0;

647 
UHWCON
 = 0x01;

648 
USBCON
 = (1<<
USBE
)|(1<<
FRZCLK
);

649 #i‡
F_CPU
 == 16000000UL

650 
PLLCSR
 = 0x12;

651 #ñi‡
F_CPU
 == 8000000UL

652 
PLLCSR
 = 0x02;

654 !(
PLLCSR
 & (1<<
PLOCK
)))

660 
	`dñay
(1);

662 
USBCON
 = ((1<<
USBE
)|(1<<
OTGPADE
));

663 
UDIEN
 = (1<<
EORSTE
)|(1<<
SOFE
);

664 
UDCON
 = 0;

666 
TX_RX_LED_INIT
;

667 
	}
}

669 
	gUSBDevi˚_
::
	$dëach
()

671 
	}
}

675 
boﬁ
 
USBDevi˚_
::
	$c⁄figuªd
()

677  
_usbC⁄figuøti⁄
;

678 
	}
}

680 
	gUSBDevi˚_
::
	$pﬁl
()

682 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/USBCore.h

18 #i‚de‡
__USBCORE_H__


19 
	#__USBCORE_H__


	)

22 
	#GET_STATUS
 0

	)

23 
	#CLEAR_FEATURE
 1

	)

24 
	#SET_FEATURE
 3

	)

25 
	#SET_ADDRESS
 5

	)

26 
	#GET_DESCRIPTOR
 6

	)

27 
	#SET_DESCRIPTOR
 7

	)

28 
	#GET_CONFIGURATION
 8

	)

29 
	#SET_CONFIGURATION
 9

	)

30 
	#GET_INTERFACE
 10

	)

31 
	#SET_INTERFACE
 11

	)

35 
	#REQUEST_HOSTTODEVICE
 0x00

	)

36 
	#REQUEST_DEVICETOHOST
 0x80

	)

37 
	#REQUEST_DIRECTION
 0x80

	)

39 
	#REQUEST_STANDARD
 0x00

	)

40 
	#REQUEST_CLASS
 0x20

	)

41 
	#REQUEST_VENDOR
 0x40

	)

42 
	#REQUEST_TYPE
 0x60

	)

44 
	#REQUEST_DEVICE
 0x00

	)

45 
	#REQUEST_INTERFACE
 0x01

	)

46 
	#REQUEST_ENDPOINT
 0x02

	)

47 
	#REQUEST_OTHER
 0x03

	)

48 
	#REQUEST_RECIPIENT
 0x03

	)

50 
	#REQUEST_DEVICETOHOST_CLASS_INTERFACE
 (
REQUEST_DEVICETOHOST
 + 
REQUEST_CLASS
 + 
REQUEST_INTERFACE
)

	)

51 
	#REQUEST_HOSTTODEVICE_CLASS_INTERFACE
 (
REQUEST_HOSTTODEVICE
 + 
REQUEST_CLASS
 + 
REQUEST_INTERFACE
)

	)

55 
	#CDC_SET_LINE_CODING
 0x20

	)

56 
	#CDC_GET_LINE_CODING
 0x21

	)

57 
	#CDC_SET_CONTROL_LINE_STATE
 0x22

	)

59 
	#MSC_RESET
 0xFF

	)

60 
	#MSC_GET_MAX_LUN
 0xFE

	)

62 
	#HID_GET_REPORT
 0x01

	)

63 
	#HID_GET_IDLE
 0x02

	)

64 
	#HID_GET_PROTOCOL
 0x03

	)

65 
	#HID_SET_REPORT
 0x09

	)

66 
	#HID_SET_IDLE
 0x0A

	)

67 
	#HID_SET_PROTOCOL
 0x0B

	)

71 
	#USB_DEVICE_DESC_SIZE
 18

	)

72 
	#USB_CONFIGUARTION_DESC_SIZE
 9

	)

73 
	#USB_INTERFACE_DESC_SIZE
 9

	)

74 
	#USB_ENDPOINT_DESC_SIZE
 7

	)

76 
	#USB_DEVICE_DESCRIPTOR_TYPE
 1

	)

77 
	#USB_CONFIGURATION_DESCRIPTOR_TYPE
 2

	)

78 
	#USB_STRING_DESCRIPTOR_TYPE
 3

	)

79 
	#USB_INTERFACE_DESCRIPTOR_TYPE
 4

	)

80 
	#USB_ENDPOINT_DESCRIPTOR_TYPE
 5

	)

82 
	#USB_DEVICE_CLASS_COMMUNICATIONS
 0x02

	)

83 
	#USB_DEVICE_CLASS_HUMAN_INTERFACE
 0x03

	)

84 
	#USB_DEVICE_CLASS_STORAGE
 0x08

	)

85 
	#USB_DEVICE_CLASS_VENDOR_SPECIFIC
 0xFF

	)

87 
	#USB_CONFIG_POWERED_MASK
 0x40

	)

88 
	#USB_CONFIG_BUS_POWERED
 0x80

	)

89 
	#USB_CONFIG_SELF_POWERED
 0xC0

	)

90 
	#USB_CONFIG_REMOTE_WAKEUP
 0x20

	)

93 
	#USB_CONFIG_POWER_MA
(
mA
Ë((mA)/2)

	)

96 
	#USB_ENDPOINT_DIRECTION_MASK
 0x80

	)

97 
	#USB_ENDPOINT_OUT
(
addr
Ë(◊ddrË| 0x00)

	)

98 
	#USB_ENDPOINT_IN
(
addr
Ë(◊ddrË| 0x80)

	)

100 
	#USB_ENDPOINT_TYPE_MASK
 0x03

	)

101 
	#USB_ENDPOINT_TYPE_CONTROL
 0x00

	)

102 
	#USB_ENDPOINT_TYPE_ISOCHRONOUS
 0x01

	)

103 
	#USB_ENDPOINT_TYPE_BULK
 0x02

	)

104 
	#USB_ENDPOINT_TYPE_INTERRUPT
 0x03

	)

106 
	#TOBYTES
(
x
Ë((xË& 0xFF),(((xË>> 8Ë& 0xFF)

	)

108 
	#CDC_V1_10
 0x0110

	)

109 
	#CDC_COMMUNICATION_INTERFACE_CLASS
 0x02

	)

111 
	#CDC_CALL_MANAGEMENT
 0x01

	)

112 
	#CDC_ABSTRACT_CONTROL_MODEL
 0x02

	)

113 
	#CDC_HEADER
 0x00

	)

114 
	#CDC_ABSTRACT_CONTROL_MANAGEMENT
 0x02

	)

115 
	#CDC_UNION
 0x06

	)

116 
	#CDC_CS_INTERFACE
 0x24

	)

117 
	#CDC_CS_ENDPOINT
 0x25

	)

118 
	#CDC_DATA_INTERFACE_CLASS
 0x0A

	)

120 
	#MSC_SUBCLASS_SCSI
 0x06

	)

121 
	#MSC_PROTOCOL_BULK_ONLY
 0x50

	)

123 
	#HID_HID_DESCRIPTOR_TYPE
 0x21

	)

124 
	#HID_REPORT_DESCRIPTOR_TYPE
 0x22

	)

125 
	#HID_PHYSICAL_DESCRIPTOR_TYPE
 0x23

	)

130 
u8
 
	mÀn
;

131 
u8
 
	mdty≥
;

132 
u16
 
	musbVîsi⁄
;

133 
u8
 
	mdevi˚Cœss
;

134 
u8
 
	mdevi˚SubCœss
;

135 
u8
 
	mdevi˚PrŸocﬁ
;

136 
u8
 
	m∑ckëSize0
;

137 
u16
 
	midVíd‹
;

138 
u16
 
	midProdu˘
;

139 
u16
 
	mdevi˚Vîsi⁄
;

140 
u8
 
	miM™uÁ˘uªr
;

141 
u8
 
	miProdu˘
;

142 
u8
 
	miSîülNumbî
;

143 
u8
 
	mbNumC⁄figuøti⁄s
;

144 } 
	tDevi˚Des¸ùt‹
;

148 
u8
 
	mÀn
;

149 
u8
 
	mdty≥
;

150 
u16
 
	m˛í
;

151 
u8
 
	mnumI¡îÁ˚s
;

152 
u8
 
	mc⁄fig
;

153 
u8
 
	mic⁄fig
;

154 
u8
 
	m©åibuãs
;

155 
u8
 
	mmaxPowî
;

156 } 
	tC⁄figDes¸ùt‹
;

163 
u8
 
	mÀn
;

164 
u8
 
	mdty≥
;

165 
u8
 
	mnumbî
;

166 
u8
 
	mÆã∫©e
;

167 
u8
 
	mnumEndpoöts
;

168 
u8
 
	möãrÁ˚Cœss
;

169 
u8
 
	möãrÁ˚SubCœss
;

170 
u8
 
	m¥Ÿocﬁ
;

171 
u8
 
	miI¡îÁ˚
;

172 } 
	tI¡îÁ˚Des¸ùt‹
;

177 
u8
 
	mÀn
;

178 
u8
 
	mdty≥
;

179 
u8
 
	maddr
;

180 
u8
 
	m©å
;

181 
u16
 
	m∑ckëSize
;

182 
u8
 
	möãrvÆ
;

183 } 
	tEndpoötDes¸ùt‹
;

189 
u8
 
	mÀn
;

190 
u8
 
	mdty≥
;

191 
u8
 
	mfú°I¡îÁ˚
;

192 
u8
 
	möãrÁ˚Cou¡
;

193 
u8
 
	mfun˘i⁄Cœss
;

194 
u8
 
	mfu¡i⁄SubCœss
;

195 
u8
 
	mfun˘i⁄PrŸocﬁ
;

196 
u8
 
	miI¡îÁ˚
;

197 } 
	tIADDes¸ùt‹
;

202 
u8
 
	mÀn
;

203 
u8
 
	mdty≥
;

204 
u8
 
	msubty≥
;

205 
u8
 
	md0
;

206 
u8
 
	md1
;

207 } 
	tCDCCSI¡îÁ˚Des¸ùt‹
;

211 
u8
 
	mÀn
;

212 
u8
 
	mdty≥
;

213 
u8
 
	msubty≥
;

214 
u8
 
	md0
;

215 } 
	tCDCCSI¡îÁ˚Des¸ùt‹4
;

219 
u8
 
	mÀn
;

220 
u8
 
	mdty≥
;

221 
u8
 
	msubty≥
;

222 
u8
 
	mbmC≠abûôõs
;

223 
u8
 
	mbD©aI¡îÁ˚
;

224 } 
	tCMFun˘i⁄ÆDes¸ùt‹
;

228 
u8
 
	mÀn
;

229 
u8
 
	mdty≥
;

230 
u8
 
	msubty≥
;

231 
u8
 
	mbmC≠abûôõs
;

232 } 
	tACMFun˘i⁄ÆDes¸ùt‹
;

237 
IADDes¸ùt‹
 
	müd
;

240 
I¡îÁ˚Des¸ùt‹
 
	mcif
;

241 
CDCCSI¡îÁ˚Des¸ùt‹
 
	mhódî
;

242 
CMFun˘i⁄ÆDes¸ùt‹
 
	mˇŒM™agemít
;

243 
ACMFun˘i⁄ÆDes¸ùt‹
 
	mc⁄åﬁM™agemít
;

244 
CDCCSI¡îÁ˚Des¸ùt‹
 
	mfun˘i⁄ÆDes¸ùt‹
;

245 
EndpoötDes¸ùt‹
 
	mcifö
;

248 
I¡îÁ˚Des¸ùt‹
 
	mdif
;

249 
EndpoötDes¸ùt‹
 
	mö
;

250 
EndpoötDes¸ùt‹
 
	mout
;

251 } 
	tCDCDes¸ùt‹
;

255 
I¡îÁ˚Des¸ùt‹
 
	mmsc
;

256 
EndpoötDes¸ùt‹
 
	mö
;

257 
EndpoötDes¸ùt‹
 
	mout
;

258 } 
	tMSCDes¸ùt‹
;

262 
u8
 
	mÀn
;

263 
u8
 
	mdty≥
;

264 
u8
 
	maddr
;

265 
u8
 
	mvîsi⁄L
;

266 
u8
 
	mvîsi⁄H
;

267 
u8
 
	mcou¡ry
;

268 
u8
 
	mdes˘y≥
;

269 
u8
 
	mdescLíL
;

270 
u8
 
	mdescLíH
;

271 } 
	tHIDDescDes¸ùt‹
;

275 
I¡îÁ˚Des¸ùt‹
 
	mhid
;

276 
HIDDescDes¸ùt‹
 
	mdesc
;

277 
EndpoötDes¸ùt‹
 
	mö
;

278 } 
	tHIDDes¸ùt‹
;

281 
	#D_DEVICE
(
_˛ass
,
_subCœss
,
_¥Ÿo
,
_∑ckëSize0
,
_vid
,
_pid
,
_vîsi⁄
,
_im
,
_ù
,
_is
,
_c⁄figs
) \

282 { 18, 1, 0x200, 
_˛ass
,
_subCœss
,
_¥Ÿo
,
_∑ckëSize0
,
_vid
,
_pid
,
_vîsi⁄
,
_im
,
_ù
,
_is
,
_c⁄figs
 }

	)

284 
	#D_CONFIG
(
_tŸÆLígth
,
_öãrÁ˚s
) \

285 { 9, 2, 
_tŸÆLígth
,
_öãrÁ˚s
, 1, 0, 
USB_CONFIG_BUS_POWERED
, 
	`USB_CONFIG_POWER_MA
(500Ë}

	)

287 
	#D_INTERFACE
(
_n
,
_numEndpoöts
,
_˛ass
,
_subCœss
,
_¥Ÿocﬁ
) \

288 { 9, 4, 
_n
, 0, 
_numEndpoöts
, 
_˛ass
,
_subCœss
, 
_¥Ÿocﬁ
, 0 }

	)

290 
	#D_ENDPOINT
(
_addr
,
_©å
,
_∑ckëSize
, 
_öãrvÆ
) \

291 { 7, 5, 
_addr
,
_©å
,
_∑ckëSize
, 
_öãrvÆ
 }

	)

293 
	#D_IAD
(
_fú°I¡îÁ˚
, 
_cou¡
, 
_˛ass
, 
_subCœss
, 
_¥Ÿocﬁ
) \

294 { 8, 11, 
_fú°I¡îÁ˚
, 
_cou¡
, 
_˛ass
, 
_subCœss
, 
_¥Ÿocﬁ
, 0 }

	)

296 
	#D_HIDREPORT
(
_des¸ùt‹Lígth
) \

297 { 9, 0x21, 0x1, 0x1, 0, 1, 0x22, 
_des¸ùt‹Lígth
, 0 }

	)

299 
	#D_CDCCS
(
_subty≥
,
_d0
,
_d1
Ë{ 5, 0x24, _subty≥, _d0, _d1 }

	)

300 
	#D_CDCCS4
(
_subty≥
,
_d0
Ë{ 4, 0x24, _subty≥, _d0 }

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/USBDesc.h

19 
	#CDC_ENABLED


	)

20 
	#HID_ENABLED


	)

23 #ifde‡
CDC_ENABLED


24 
	#CDC_INTERFACE_COUNT
 2

	)

25 
	#CDC_ENPOINT_COUNT
 3

	)

27 
	#CDC_INTERFACE_COUNT
 0

	)

28 
	#CDC_ENPOINT_COUNT
 0

	)

31 #ifde‡
HID_ENABLED


32 
	#HID_INTERFACE_COUNT
 1

	)

33 
	#HID_ENPOINT_COUNT
 1

	)

35 
	#HID_INTERFACE_COUNT
 0

	)

36 
	#HID_ENPOINT_COUNT
 0

	)

39 
	#CDC_ACM_INTERFACE
 0

40 
	#CDC_DATA_INTERFACE
 1

41 
	#CDC_FIRST_ENDPOINT
 1

	)

42 
	#CDC_ENDPOINT_ACM
 (
CDC_FIRST_ENDPOINT
)

43 
	#CDC_ENDPOINT_OUT
 (
CDC_FIRST_ENDPOINT
+1)

	)

44 
	#CDC_ENDPOINT_IN
 (
CDC_FIRST_ENDPOINT
+2)

	)

46 
	#HID_INTERFACE
 (
CDC_ACM_INTERFACE
 + 
CDC_INTERFACE_COUNT
)

47 
	#HID_FIRST_ENDPOINT
 (
CDC_FIRST_ENDPOINT
 + 
CDC_ENPOINT_COUNT
)

	)

48 
	#HID_ENDPOINT_INT
 (
HID_FIRST_ENDPOINT
)

	)

50 
	#INTERFACE_COUNT
 (
MSC_INTERFACE
 + 
MSC_INTERFACE_COUNT
)

	)

52 #ifde‡
CDC_ENABLED


53 
	#CDC_RX
 
CDC_ENDPOINT_OUT


	)

54 
	#CDC_TX
 
CDC_ENDPOINT_IN


	)

57 #ifde‡
HID_ENABLED


58 
	#HID_TX
 
HID_ENDPOINT_INT


	)

61 
	#IMANUFACTURER
 1

	)

62 
	#IPRODUCT
 2

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/Udp.h

35 #i‚de‡
udp_h


36 
	#udp_h


	)

38 
	~<Såóm.h
>

39 
	~<IPAddªss.h
>

41 ˛as†
	cUDP
 : 
public
 
Såóm
 {

43 
public
:

44 
vútuÆ
 
uöt8_t
 
begö
(
uöt16_t
) =0;

45 
vútuÆ
 
°›
() =0;

51 
vútuÆ
 
begöPackë
(
IPAddªss
 
ù
, 
uöt16_t
 
p‹t
) =0;

54 
vútuÆ
 
begöPackë
(c⁄° *
ho°
, 
uöt16_t
 
p‹t
) =0;

57 
vútuÆ
 
ídPackë
() =0;

59 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
) =0;

61 
vútuÆ
 
size_t
 
wrôe
(c⁄° 
uöt8_t
 *
buf„r
, size_à
size
) =0;

65 
vútuÆ
 
∑r£Packë
() =0;

67 
vútuÆ
 
avaûabÀ
() =0;

69 
vútuÆ
 
ªad
() =0;

72 
vútuÆ
 
ªad
(* 
buf„r
, 
size_t
 
Àn
) =0;

75 
vútuÆ
 
ªad
(* 
buf„r
, 
size_t
 
Àn
) =0;

77 
vútuÆ
 
≥ek
() =0;

78 
vútuÆ
 
Êush
() =0;

81 
vútuÆ
 
IPAddªss
 
ªmŸeIP
() =0;

83 
vútuÆ
 
uöt16_t
 
ªmŸeP‹t
() =0;

84 
	m¥Ÿe˘ed
:

85 
uöt8_t
* 
	$øwIPAddªss
(
IPAddªss
& 
addr
Ë{ áddr.
	`øw_addªss
(); };

86 
	}
};

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/WCharacter.h

20 #i‚de‡
Ch¨a˘î_h


21 
	#Ch¨a˘î_h


	)

23 
	~<˘y≥.h
>

26 
ölöe
 
boﬁón
 
	$isAÕhaNumîic
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

27 
ölöe
 
boﬁón
 
	$isAÕha
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
ölöe
 
boﬁón
 
	$isAscii
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

29 
ölöe
 
boﬁón
 
	$isWhôe•a˚
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

30 
ölöe
 
boﬁón
 
	$isC⁄åﬁ
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

31 
ölöe
 
boﬁón
 
	$isDigô
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

32 
ölöe
 
boﬁón
 
	$isGøph
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

33 
ölöe
 
boﬁón
 
	$isLowîCa£
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

34 
ölöe
 
boﬁón
 
	$isPröèbÀ
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

35 
ölöe
 
boﬁón
 
	$isPun˘
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

36 
ölöe
 
boﬁón
 
	$isS∑˚
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

37 
ölöe
 
boﬁón
 
	$isUµîCa£
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

38 
ölöe
 
boﬁón
 
	$isHexadecimÆDigô
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

39 
ölöe
 
	$toAscii
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

40 
ölöe
 
	$toLowîCa£
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

41 
ölöe
 
	$toUµîCa£
(
c
)
	`__©åibuã__
((
Æways_ölöe
));

46 
ölöe
 
boﬁón
 
	$isAÕhaNumîic
(
c
)

48  ( 
	`iß um
(
c
Ë=0 ? 
Ál£
 : 
åue
);

49 
	}
}

54 
ölöe
 
boﬁón
 
	$isAÕha
(
c
)

56  ( 
	`ißÕha
(
c
Ë=0 ? 
Ál£
 : 
åue
);

57 
	}
}

62 
ölöe
 
boﬁón
 
	$isAscii
(
c
)

64  ( 
	`ißscii
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

65 
	}
}

69 
ölöe
 
boﬁón
 
	$isWhôe•a˚
(
c
)

71  ( 
	`isbœnk
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

72 
	}
}

76 
ölöe
 
boﬁón
 
	$isC⁄åﬁ
(
c
)

78  ( 
	`is˙ål
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

79 
	}
}

83 
ölöe
 
boﬁón
 
	$isDigô
(
c
)

85  ( 
	`isdigô
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

86 
	}
}

90 
ölöe
 
boﬁón
 
	$isGøph
(
c
)

92  ( 
	`isgøph
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

93 
	}
}

97 
ölöe
 
boﬁón
 
	$isLowîCa£
(
c
)

99  (
	`i¶owî
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

100 
	}
}

104 
ölöe
 
boﬁón
 
	$isPröèbÀ
(
c
)

106  ( 
	`i•röt
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

107 
	}
}

112 
ölöe
 
boﬁón
 
	$isPun˘
(
c
)

114  ( 
	`i•un˘
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

115 
	}
}

121 
ölöe
 
boﬁón
 
	$isS∑˚
(
c
)

123  ( 
	`is•a˚
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

124 
	}
}

128 
ölöe
 
boﬁón
 
	$isUµîCa£
(
c
)

130  ( 
	`isuµî
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

131 
	}
}

136 
ölöe
 
boﬁón
 
	$isHexadecimÆDigô
(
c
)

138  ( 
	`isxdigô
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

139 
	}
}

144 
ölöe
 
	$toAscii
(
c
)

146  
	`tﬂscii
 (
c
);

147 
	}
}

156 
ölöe
 
	$toLowîCa£
(
c
)

158  
	`tﬁowî
 (
c
);

159 
	}
}

163 
ölöe
 
	$toUµîCa£
(
c
)

165  
	`touµî
 (
c
);

166 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/WInterrupts.c

27 
	~<öây≥s.h
>

28 
	~<avr/io.h
>

29 
	~<avr/öãºu±.h
>

30 
	~<avr/pgm•a˚.h
>

31 
	~<°dio.h
>

33 
	~"wúög_¥iv©e.h
"

35 vﬁ©ûê
voidFuncPå
 
	götFunc
[
EXTERNAL_NUM_INTERRUPTS
];

38 
©èchI¡îru±
(
uöt8_t
 
öãºu±Num
, (*
u£rFunc
)(), 
mode
) {

39 if(
öãºu±Num
 < 
EXTERNAL_NUM_INTERRUPTS
) {

40 
ötFunc
[
öãºu±Num
] = 
u£rFunc
;

49 
öãºu±Num
) {

50 #i‡
	`deföed
(
__AVR_ATmega32U4__
)

55 
EICRA
 = (EICRA & ~((1<<
ISC00
Ë| (1<<
ISC01
))Ë| (
mode
 << ISC00);

56 
EIMSK
 |(1<<
INT0
);

59 
EICRA
 = (EICRA & ~((1<<
ISC10
Ë| (1<<
ISC11
))Ë| (
mode
 << ISC10);

60 
EIMSK
 |(1<<
INT1
);

63 
EICRA
 = (EICRA & ~((1<<
ISC20
Ë| (1<<
ISC21
))Ë| (
mode
 << ISC20);

64 
EIMSK
 |(1<<
INT2
);

67 
EICRA
 = (EICRA & ~((1<<
ISC30
Ë| (1<<
ISC31
))Ë| (
mode
 << ISC30);

68 
EIMSK
 |(1<<
INT3
);

70 #ñi‡
	`deföed
(
EICRA
Ë&& deföed(
EICRB
Ë&& deföed(
EIMSK
)

72 
EICRA
 = (EICRA & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

73 
EIMSK
 |(1 << 
INT0
);

76 
EICRA
 = (EICRA & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

77 
EIMSK
 |(1 << 
INT1
);

80 
EICRA
 = (EICRA & ~((1 << 
ISC20
Ë| (1 << 
ISC21
))Ë| (
mode
 << ISC20);

81 
EIMSK
 |(1 << 
INT2
);

84 
EICRA
 = (EICRA & ~((1 << 
ISC30
Ë| (1 << 
ISC31
))Ë| (
mode
 << ISC30);

85 
EIMSK
 |(1 << 
INT3
);

88 
EICRB
 = (EICRB & ~((1 << 
ISC40
Ë| (1 << 
ISC41
))Ë| (
mode
 << ISC40);

89 
EIMSK
 |(1 << 
INT4
);

92 
EICRB
 = (EICRB & ~((1 << 
ISC50
Ë| (1 << 
ISC51
))Ë| (
mode
 << ISC50);

93 
EIMSK
 |(1 << 
INT5
);

96 
EICRB
 = (EICRB & ~((1 << 
ISC60
Ë| (1 << 
ISC61
))Ë| (
mode
 << ISC60);

97 
EIMSK
 |(1 << 
INT6
);

100 
EICRB
 = (EICRB & ~((1 << 
ISC70
Ë| (1 << 
ISC71
))Ë| (
mode
 << ISC70);

101 
EIMSK
 |(1 << 
INT7
);

105 #i‡
	`deföed
(
EICRA
Ë&& deföed(
ISC00
Ë&& deföed(
EIMSK
)

106 
EICRA
 = (EICRA & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

107 
EIMSK
 |(1 << 
INT0
);

108 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC00
Ë&& deföed(
GICR
)

109 
MCUCR
 = (MCUCR & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

110 
GICR
 |(1 << 
INT0
);

111 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC00
Ë&& deföed(
GIMSK
)

112 
MCUCR
 = (MCUCR & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

113 
GIMSK
 |(1 << 
INT0
);

115 #îr‹ 
©èchI¡îru±
 
nŸ
 
föished
 
this
 
	`CPU
 (0)

120 #i‡
	`deföed
(
EICRA
Ë&& deföed(
ISC10
Ë&& deföed(
ISC11
Ë&& deföed(
EIMSK
)

121 
EICRA
 = (EICRA & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

122 
EIMSK
 |(1 << 
INT1
);

123 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC10
Ë&& deföed(
ISC11
Ë&& deföed(
GICR
)

124 
MCUCR
 = (MCUCR & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

125 
GICR
 |(1 << 
INT1
);

126 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC10
Ë&& deföed(
GIMSK
) && defined(GIMSK)

127 
MCUCR
 = (MCUCR & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

128 
GIMSK
 |(1 << 
INT1
);

130 #w¨nög 
©èchI¡îru±
 
may
 
√ed
 
some
 
m‹e
 
w‹k
 
this
 
	`˝u
 (1)

135 #i‡
	`deföed
(
EICRA
Ë&& deföed(
ISC20
Ë&& deföed(
ISC21
Ë&& deföed(
EIMSK
)

136 
EICRA
 = (EICRA & ~((1 << 
ISC20
Ë| (1 << 
ISC21
))Ë| (
mode
 << ISC20);

137 
EIMSK
 |(1 << 
INT2
);

138 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC20
Ë&& deföed(
ISC21
Ë&& deföed(
GICR
)

139 
MCUCR
 = (MCUCR & ~((1 << 
ISC20
Ë| (1 << 
ISC21
))Ë| (
mode
 << ISC20);

140 
GICR
 |(1 << 
INT2
);

141 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC20
Ë&& deföed(
GIMSK
) && defined(GIMSK)

142 
MCUCR
 = (MCUCR & ~((1 << 
ISC20
Ë| (1 << 
ISC21
))Ë| (
mode
 << ISC20);

143 
GIMSK
 |(1 << 
INT2
);

149 
	}
}

151 
	$dëachI¡îru±
(
uöt8_t
 
öãºu±Num
) {

152 if(
öãºu±Num
 < 
EXTERNAL_NUM_INTERRUPTS
) {

156 
öãºu±Num
) {

157 #i‡
	`deföed
(
__AVR_ATmega32U4__
)

159 
EIMSK
 &~(1<<
INT0
);

162 
EIMSK
 &~(1<<
INT1
);

165 
EIMSK
 &~(1<<
INT2
);

168 
EIMSK
 &~(1<<
INT3
);

170 #ñi‡
	`deföed
(
EICRA
Ë&& deföed(
EICRB
Ë&& deföed(
EIMSK
)

172 
EIMSK
 &~(1 << 
INT0
);

175 
EIMSK
 &~(1 << 
INT1
);

178 
EIMSK
 &~(1 << 
INT2
);

181 
EIMSK
 &~(1 << 
INT3
);

184 
EIMSK
 &~(1 << 
INT4
);

187 
EIMSK
 &~(1 << 
INT5
);

190 
EIMSK
 &~(1 << 
INT6
);

193 
EIMSK
 &~(1 << 
INT7
);

197 #i‡
	`deföed
(
EIMSK
Ë&& deföed(
INT0
)

198 
EIMSK
 &~(1 << 
INT0
);

199 #ñi‡
	`deföed
(
GICR
Ë&& deföed(
ISC00
)

200 
GICR
 &~(1 << 
INT0
);

201 #ñi‡
	`deföed
(
GIMSK
Ë&& deföed(
INT0
)

202 
GIMSK
 &~(1 << 
INT0
);

204 #îr‹ 
dëachI¡îru±
 
nŸ
 
föished
 
this
 
˝u


209 #i‡
	`deföed
(
EIMSK
Ë&& deföed(
INT1
)

210 
EIMSK
 &~(1 << 
INT1
);

211 #ñi‡
	`deföed
(
GICR
Ë&& deföed(
INT1
)

212 
GICR
 &~(1 << 
INT1
);

213 #ñi‡
	`deföed
(
GIMSK
Ë&& deföed(
INT1
)

214 
GIMSK
 &~(1 << 
INT1
);

216 #w¨nög 
dëachI¡îru±
 
may
 
√ed
 
some
 
m‹e
 
w‹k
 
this
 
	`˝u
 (1)

222 
ötFunc
[
öãºu±Num
] = 0;

224 
	}
}

232 #i‡
deföed
(
__AVR_ATmega32U4__
)

233 
	$SIGNAL
(
INT0_ve˘
) {

234 if(
ötFunc
[
EXTERNAL_INT_0
])

235 
ötFunc
[
EXTERNAL_INT_0
]();

236 
	}
}

238 
	$SIGNAL
(
INT1_ve˘
) {

239 if(
ötFunc
[
EXTERNAL_INT_1
])

240 
ötFunc
[
EXTERNAL_INT_1
]();

241 
	}
}

243 
	$SIGNAL
(
INT2_ve˘
) {

244 if(
ötFunc
[
EXTERNAL_INT_2
])

245 
ötFunc
[
EXTERNAL_INT_2
]();

246 
	}
}

248 
	$SIGNAL
(
INT3_ve˘
) {

249 if(
ötFunc
[
EXTERNAL_INT_3
])

250 
ötFunc
[
EXTERNAL_INT_3
]();

251 
	}
}

253 #ñi‡
deföed
(
EICRA
Ë&& deföed(
EICRB
)

255 
	$SIGNAL
(
INT0_ve˘
) {

256 if(
ötFunc
[
EXTERNAL_INT_2
])

257 
ötFunc
[
EXTERNAL_INT_2
]();

258 
	}
}

260 
	$SIGNAL
(
INT1_ve˘
) {

261 if(
ötFunc
[
EXTERNAL_INT_3
])

262 
ötFunc
[
EXTERNAL_INT_3
]();

263 
	}
}

265 
	$SIGNAL
(
INT2_ve˘
) {

266 if(
ötFunc
[
EXTERNAL_INT_4
])

267 
ötFunc
[
EXTERNAL_INT_4
]();

268 
	}
}

270 
	$SIGNAL
(
INT3_ve˘
) {

271 if(
ötFunc
[
EXTERNAL_INT_5
])

272 
ötFunc
[
EXTERNAL_INT_5
]();

273 
	}
}

275 
	$SIGNAL
(
INT4_ve˘
) {

276 if(
ötFunc
[
EXTERNAL_INT_0
])

277 
ötFunc
[
EXTERNAL_INT_0
]();

278 
	}
}

280 
	$SIGNAL
(
INT5_ve˘
) {

281 if(
ötFunc
[
EXTERNAL_INT_1
])

282 
ötFunc
[
EXTERNAL_INT_1
]();

283 
	}
}

285 
	$SIGNAL
(
INT6_ve˘
) {

286 if(
ötFunc
[
EXTERNAL_INT_6
])

287 
ötFunc
[
EXTERNAL_INT_6
]();

288 
	}
}

290 
	$SIGNAL
(
INT7_ve˘
) {

291 if(
ötFunc
[
EXTERNAL_INT_7
])

292 
ötFunc
[
EXTERNAL_INT_7
]();

293 
	}
}

297 
	$SIGNAL
(
INT0_ve˘
) {

298 if(
ötFunc
[
EXTERNAL_INT_0
])

299 
ötFunc
[
EXTERNAL_INT_0
]();

300 
	}
}

302 
	$SIGNAL
(
INT1_ve˘
) {

303 if(
ötFunc
[
EXTERNAL_INT_1
])

304 
ötFunc
[
EXTERNAL_INT_1
]();

305 
	}
}

307 #i‡
deföed
(
EICRA
Ë&& deföed(
ISC20
)

308 
	$SIGNAL
(
INT2_ve˘
) {

309 if(
ötFunc
[
EXTERNAL_INT_2
])

310 
ötFunc
[
EXTERNAL_INT_2
]();

311 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/WMath.cpp

27 
	~"°dlib.h
"

30 
	$øndomSìd
(
£ed
)

32 i‡(
£ed
 != 0) {

33 
	`§™dom
(
£ed
);

35 
	}
}

37 
	$øndom
(
howbig
)

39 i‡(
howbig
 == 0) {

42  
	`øndom
(Ë% 
howbig
;

43 
	}
}

45 
	$øndom
(
howsmÆl
, 
howbig
)

47 i‡(
howsmÆl
 >
howbig
) {

48  
howsmÆl
;

50 
diff
 = 
howbig
 - 
howsmÆl
;

51  
	`øndom
(
diff
Ë+ 
howsmÆl
;

52 
	}
}

54 
	$m≠
(
x
, 
ö_mö
, 
ö_max
, 
out_mö
, 
out_max
)

56  (
x
 - 
ö_mö
Ë* (
out_max
 - 
out_mö
Ë/ (
ö_max
 - in_min) + out_min;

57 
	}
}

59 
	$makeW‹d
(
w
Ë{  w; 
	}
}

60 
	$makeW‹d
(
h
, 
l
Ë{  (h << 8Ë|Ü; 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/WString.cpp

22 
	~"WSåög.h
"

29 
	gSåög
::
	$Såög
(c⁄° *
c°r
)

31 
	`öô
();

32 i‡(
c°r
Ë
	`c›y
(c°r, 
	`°æí
(cstr));

33 
	}
}

35 
	gSåög
::
	$Såög
(c⁄° 
Såög
 &
vÆue
)

37 
	`öô
();

38 *
this
 = 
vÆue
;

39 
	}
}

41 #ifde‡
__GXX_EXPERIMENTAL_CXX0X__


42 
	gSåög
::
	$Såög
(
Såög
 &&
rvÆ
)

44 
	`öô
();

45 
	`move
(
rvÆ
);

46 
	}
}

47 
	gSåög
::
	$Såög
(
SåögSumHñ≥r
 &&
rvÆ
)

49 
	`öô
();

50 
	`move
(
rvÆ
);

51 
	}
}

54 
	gSåög
::
	$Såög
(
c
)

56 
	`öô
();

57 
buf
[2];

58 
buf
[0] = 
c
;

59 
buf
[1] = 0;

60 *
this
 = 
buf
;

61 
	}
}

63 
	gSåög
::
	$Såög
(
vÆue
, 
ba£
)

65 
	`öô
();

66 
buf
[9];

67 
	`utﬂ
(
vÆue
, 
buf
, 
ba£
);

68 *
this
 = 
buf
;

69 
	}
}

71 
	gSåög
::
	$Såög
(
vÆue
, 
ba£
)

73 
	`öô
();

74 
buf
[18];

75 
	`ôﬂ
(
vÆue
, 
buf
, 
ba£
);

76 *
this
 = 
buf
;

77 
	}
}

79 
	gSåög
::
	$Såög
(
vÆue
, 
ba£
)

81 
	`öô
();

82 
buf
[17];

83 
	`utﬂ
(
vÆue
, 
buf
, 
ba£
);

84 *
this
 = 
buf
;

85 
	}
}

87 
	gSåög
::
	$Såög
(
vÆue
, 
ba£
)

89 
	`öô
();

90 
buf
[34];

91 
	`…ﬂ
(
vÆue
, 
buf
, 
ba£
);

92 *
this
 = 
buf
;

93 
	}
}

95 
	gSåög
::
	$Såög
(
vÆue
, 
ba£
)

97 
	`öô
();

98 
buf
[33];

99 
	`u…ﬂ
(
vÆue
, 
buf
, 
ba£
);

100 *
this
 = 
buf
;

101 
	}
}

103 
	gSåög
::~
	$Såög
()

105 
	`‰ì
(
buf„r
);

106 
	}
}

112 
ölöe
 
	gSåög
::
	$öô
()

114 
buf„r
 = 
NULL
;

115 
ˇ∑côy
 = 0;

116 
Àn
 = 0;

117 
Êags
 = 0;

118 
	}
}

120 
	gSåög
::
	$övÆid©e
()

122 i‡(
buf„r
Ë
	`‰ì
(buffer);

123 
buf„r
 = 
NULL
;

124 
ˇ∑côy
 = 
Àn
 = 0;

125 
	}
}

127 
	gSåög
::
	$ª£rve
(
size
)

129 i‡(
buf„r
 && 
ˇ∑côy
 >
size
)  1;

130 i‡(
	`ch™geBuf„r
(
size
)) {

131 i‡(
Àn
 =0Ë
buf„r
[0] = 0;

135 
	}
}

137 
	gSåög
::
	$ch™geBuf„r
(
maxSåLí
)

139 *
√wbuf„r
 = (*)
	`ªÆloc
(
buf„r
, 
maxSåLí
 + 1);

140 i‡(
√wbuf„r
) {

141 
buf„r
 = 
√wbuf„r
;

142 
ˇ∑côy
 = 
maxSåLí
;

146 
	}
}

152 
	gSåög
 & Såög::
	$c›y
(c⁄° *
c°r
, 
Àngth
)

154 i‡(!
	`ª£rve
(
Àngth
)) {

155 
	`övÆid©e
();

156  *
this
;

158 
Àn
 = 
Àngth
;

159 
	`°r˝y
(
buf„r
, 
c°r
);

160  *
this
;

161 
	}
}

163 #ifde‡
__GXX_EXPERIMENTAL_CXX0X__


164 
	gSåög
::
	$move
(
Såög
 &
rhs
)

166 i‡(
buf„r
) {

167 i‡(
ˇ∑côy
 >
rhs
.
Àn
) {

168 
	`°r˝y
(
buf„r
, 
rhs
.buffer);

169 
Àn
 = 
rhs
.len;

170 
rhs
.
Àn
 = 0;

173 
	`‰ì
(
buf„r
);

176 
buf„r
 = 
rhs
.buffer;

177 
ˇ∑côy
 = 
rhs
.capacity;

178 
Àn
 = 
rhs
.len;

179 
rhs
.
buf„r
 = 
NULL
;

180 
rhs
.
ˇ∑côy
 = 0;

181 
rhs
.
Àn
 = 0;

182 
	}
}

185 
	gSåög
 & Såög::
›î©‹
 = (c⁄° 
Såög
 &
rhs
)

187 i‡(
this
 =&
rhs
)  *this;

189 i‡(
	grhs
.
	gbuf„r
Ë
c›y
(
rhs
.
buf„r
,Ñhs.
Àn
);

190 
övÆid©e
();

192  *
	gthis
;

195 #ifde‡
__GXX_EXPERIMENTAL_CXX0X__


196 
	gSåög
 & Såög::
›î©‹
 = (
Såög
 &&
rvÆ
)

198 i‡(
this
 !&
rvÆ
Ë
move
(rval);

199  *
	gthis
;

202 
	gSåög
 & Såög::
›î©‹
 = (
SåögSumHñ≥r
 &&
rvÆ
)

204 i‡(
this
 !&
rvÆ
Ë
move
(rval);

205  *
	gthis
;

209 
	gSåög
 & Såög::
›î©‹
 = (c⁄° *
c°r
)

211 i‡(
c°r
Ë
c›y
(c°r, 
°æí
(cstr));

212 
övÆid©e
();

214  *
	gthis
;

221 
	gSåög
::
	$c⁄ˇt
(c⁄° 
Såög
 &
s
)

223  
	`c⁄ˇt
(
s
.
buf„r
, s.
Àn
);

224 
	}
}

226 
	gSåög
::
	$c⁄ˇt
(c⁄° *
c°r
, 
Àngth
)

228 
√wÀn
 = 
Àn
 + 
Àngth
;

229 i‡(!
c°r
)  0;

230 i‡(
Àngth
 == 0)  1;

231 i‡(!
	`ª£rve
(
√wÀn
))  0;

232 
	`°r˝y
(
buf„r
 + 
Àn
, 
c°r
);

233 
Àn
 = 
√wÀn
;

235 
	}
}

237 
	gSåög
::
	$c⁄ˇt
(c⁄° *
c°r
)

239 i‡(!
c°r
)  0;

240  
	`c⁄ˇt
(
c°r
, 
	`°æí
(cstr));

241 
	}
}

243 
	gSåög
::
	$c⁄ˇt
(
c
)

245 
buf
[2];

246 
buf
[0] = 
c
;

247 
buf
[1] = 0;

248  
	`c⁄ˇt
(
buf
, 1);

249 
	}
}

251 
	gSåög
::
	$c⁄ˇt
(
num
)

253 
buf
[4];

254 
	`ôﬂ
(
num
, 
buf
, 10);

255  
	`c⁄ˇt
(
buf
, 
	`°æí
(buf));

256 
	}
}

258 
	gSåög
::
	$c⁄ˇt
(
num
)

260 
buf
[7];

261 
	`ôﬂ
(
num
, 
buf
, 10);

262  
	`c⁄ˇt
(
buf
, 
	`°æí
(buf));

263 
	}
}

265 
	gSåög
::
	$c⁄ˇt
(
num
)

267 
buf
[6];

268 
	`utﬂ
(
num
, 
buf
, 10);

269  
	`c⁄ˇt
(
buf
, 
	`°æí
(buf));

270 
	}
}

272 
	gSåög
::
	$c⁄ˇt
(
num
)

274 
buf
[12];

275 
	`…ﬂ
(
num
, 
buf
, 10);

276  
	`c⁄ˇt
(
buf
, 
	`°æí
(buf));

277 
	}
}

279 
	gSåög
::
	$c⁄ˇt
(
num
)

281 
buf
[11];

282 
	`u…ﬂ
(
num
, 
buf
, 10);

283  
	`c⁄ˇt
(
buf
, 
	`°æí
(buf));

284 
	}
}

290 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, c⁄° 
	gSåög
 &
	grhs
)

292 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

293 i‡(!
	ga
.
c⁄ˇt
(
rhs
.
buf„r
,Ñhs.
Àn
)Ëa.
övÆid©e
();

294  
	ga
;

297 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, c⁄° *
	gc°r
)

299 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

300 i‡(!
	gc°r
 || !
	ga
.
c⁄ˇt
(
c°r
, 
°æí
(c°r))Ëa.
övÆid©e
();

301  
	ga
;

304 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gc
)

306 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

307 i‡(!
	ga
.
c⁄ˇt
(
c
)Ëa.
övÆid©e
();

308  
	ga
;

311 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
)

313 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

314 i‡(!
	ga
.
c⁄ˇt
(
num
)Ëa.
övÆid©e
();

315  
	ga
;

318 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
)

320 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

321 i‡(!
	ga
.
c⁄ˇt
(
num
)Ëa.
övÆid©e
();

322  
	ga
;

325 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
)

327 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

328 i‡(!
	ga
.
c⁄ˇt
(
num
)Ëa.
övÆid©e
();

329  
	ga
;

332 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
)

334 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

335 i‡(!
	ga
.
c⁄ˇt
(
num
)Ëa.
övÆid©e
();

336  
	ga
;

339 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
)

341 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

342 i‡(!
	ga
.
c⁄ˇt
(
num
)Ëa.
övÆid©e
();

343  
	ga
;

350 
	gSåög
::
	$com∑ªTo
(c⁄° 
Såög
 &
s
) const

352 i‡(!
buf„r
 || !
s
.buffer) {

353 i‡(
s
.
buf„r
 && s.
Àn
 > 0)  0 - *(*)s.buffer;

354 i‡(
buf„r
 && 
Àn
 > 0)  *(*)buffer;

357  
	`°rcmp
(
buf„r
, 
s
.buffer);

358 
	}
}

360 
	gSåög
::
	$equÆs
(c⁄° 
Såög
 &
s2
) const

362  (
Àn
 =
s2
.À¿&& 
	`com∑ªTo
(s2) == 0);

363 
	}
}

365 
	gSåög
::
	$equÆs
(c⁄° *
c°r
) const

367 i‡(
Àn
 =0Ë (
c°r
 =
NULL
 || *cstr == 0);

368 i‡(
c°r
 =
NULL
Ë 
buf„r
[0] == 0;

369  
	`°rcmp
(
buf„r
, 
c°r
) == 0;

370 
	}
}

372 
	gSåög
::
›î©‹
<(c⁄° 
Såög
 &
rhs
) const

374  
com∑ªTo
(
rhs
) < 0;

377 
	gSåög
::
›î©‹
>(c⁄° 
Såög
 &
rhs
) const

379  
com∑ªTo
(
rhs
) > 0;

382 
	gSåög
::
›î©‹
<=(c⁄° 
Såög
 &
rhs
) const

384  
com∑ªTo
(
rhs
) <= 0;

387 
	gSåög
::
›î©‹
>=(c⁄° 
Såög
 &
rhs
) const

389  
com∑ªTo
(
rhs
) >= 0;

392 
	gSåög
::
	$equÆsIgn‹eCa£
–c⁄° 
Såög
 &
s2
 ) const

394 i‡(
this
 =&
s2
)  1;

395 i‡(
Àn
 !
s2
.len)  0;

396 i‡(
Àn
 == 0)  1;

397 c⁄° *
p1
 = 
buf„r
;

398 c⁄° *
p2
 = 
s2
.
buf„r
;

399 *
p1
) {

400 i‡(
	`tﬁowî
(*
p1
++Ë!tﬁowî(*
p2
++))  0;

403 
	}
}

405 
	gSåög
::
	$°¨tsWôh
–c⁄° 
Såög
 &
s2
 ) const

407 i‡(
Àn
 < 
s2
.len)  0;

408  
	`°¨tsWôh
(
s2
, 0);

409 
	}
}

411 
	gSåög
::
	$°¨tsWôh
–c⁄° 
Såög
 &
s2
, 
off£t
 ) const

413 i‡(
off£t
 > 
Àn
 - 
s2
.À¿|| !
buf„r
 || !s2.buffer)  0;

414  
	`°∫cmp
–&
buf„r
[
off£t
], 
s2
.buf„r, s2.
Àn
 ) == 0;

415 
	}
}

417 
	gSåög
::
	$ídsWôh
–c⁄° 
Såög
 &
s2
 ) const

419 i‡–
Àn
 < 
s2
.À¿|| !
buf„r
 || !s2.buffer)  0;

420  
	`°rcmp
(&
buf„r
[
Àn
 - 
s2
.len], s2.buffer) == 0;

421 
	}
}

427 
	gSåög
::
	$ch¨At
(
loc
) const

429  
›î©‹
[](
loc
);

430 
	}
}

432 
	gSåög
::
	$£tCh¨At
(
loc
, 
c
)

434 i‡(
loc
 < 
Àn
Ë
buf„r
[loc] = 
c
;

435 
	}
}

437 & 
	gSåög
::
›î©‹
[](
ödex
)

439 
dummy_wrôabÀ_ch¨
;

440 i‡(
	gödex
 >
Àn
 || !
buf„r
) {

441 
dummy_wrôabÀ_ch¨
 = 0;

442  
	gdummy_wrôabÀ_ch¨
;

444  
	gbuf„r
[
ödex
];

447 
	gSåög
::
›î©‹
[]–
ödex
 ) const

449 i‡(
ödex
 >
Àn
 || !
buf„r
)  0;

450  
	gbuf„r
[
ödex
];

453 
	gSåög
::
	$gëByãs
(*
buf
, 
bufsize
, 
ödex
) const

455 i‡(!
bufsize
 || !
buf
) ;

456 i‡(
ödex
 >
Àn
) {

457 
buf
[0] = 0;

460 
n
 = 
bufsize
 - 1;

461 i‡(
n
 > 
Àn
 - 
ödex
)Ç =Üen - index;

462 
	`°∫˝y
((*)
buf
, 
buf„r
 + 
ödex
, 
n
);

463 
buf
[
n
] = 0;

464 
	}
}

470 
	gSåög
::
	$ödexOf
(
c
) const

472  
	`ödexOf
(
c
, 0);

473 
	}
}

475 
	gSåög
::
	$ödexOf
–
ch
, 
‰omIndex
 ) const

477 i‡(
‰omIndex
 >
Àn
)  -1;

478 c⁄° * 
ãmp
 = 
	`°rchr
(
buf„r
 + 
‰omIndex
, 
ch
);

479 i‡(
ãmp
 =
NULL
)  -1;

480  
ãmp
 - 
buf„r
;

481 
	}
}

483 
	gSåög
::
	$ödexOf
(c⁄° 
Såög
 &
s2
) const

485  
	`ödexOf
(
s2
, 0);

486 
	}
}

488 
	gSåög
::
	$ödexOf
(c⁄° 
Såög
 &
s2
, 
‰omIndex
) const

490 i‡(
‰omIndex
 >
Àn
)  -1;

491 c⁄° *
found
 = 
	`°r°r
(
buf„r
 + 
‰omIndex
, 
s2
.buffer);

492 i‡(
found
 =
NULL
)  -1;

493  
found
 - 
buf„r
;

494 
	}
}

496 
	gSåög
::
	$œ°IndexOf
–
theCh¨
 ) const

498  
	`œ°IndexOf
(
theCh¨
, 
Àn
 - 1);

499 
	}
}

501 
	gSåög
::
	$œ°IndexOf
(
ch
, 
‰omIndex
) const

503 i‡(
‰omIndex
 >
Àn
)  -1;

504 
ãmpch¨
 = 
buf„r
[
‰omIndex
 + 1];

505 
buf„r
[
‰omIndex
 + 1] = '\0';

506 * 
ãmp
 = 
	`°ºchr
–
buf„r
, 
ch
 );

507 
buf„r
[
‰omIndex
 + 1] = 
ãmpch¨
;

508 i‡(
ãmp
 =
NULL
)  -1;

509  
ãmp
 - 
buf„r
;

510 
	}
}

512 
	gSåög
::
	$œ°IndexOf
(c⁄° 
Såög
 &
s2
) const

514  
	`œ°IndexOf
(
s2
, 
Àn
 - s2.len);

515 
	}
}

517 
	gSåög
::
	$œ°IndexOf
(c⁄° 
Såög
 &
s2
, 
‰omIndex
) const

519 i‡(
s2
.
Àn
 == 0 ||Üen == 0 || s2.len >Üen)  -1;

520 i‡(
‰omIndex
 >
Àn
) fromIndex =Üen - 1;

521 
found
 = -1;

522 *
p
 = 
buf„r
;Ö <buf„∏+ 
‰omIndex
;Ö++) {

523 
p
 = 
	`°r°r
’, 
s2
.
buf„r
);

524 i‡(!
p
) ;

525 i‡(()(
p
 - 
buf„r
Ë<
‰omIndex
Ë
found
 =Ö - buffer;

527  
found
;

528 
	}
}

530 
Såög
 
	gSåög
::
	$sub°rög
–
À·
 ) const

532  
	`sub°rög
(
À·
, 
Àn
);

533 
	}
}

535 
Såög
 
	gSåög
::
	$sub°rög
(
À·
, 
right
) const

537 i‡(
À·
 > 
right
) {

538 
ãmp
 = 
right
;

539 
right
 = 
À·
;

540 
À·
 = 
ãmp
;

542 
Såög
 
out
;

543 i‡(
À·
 > 
Àn
Ë 
out
;

544 i‡(
right
 > 
Àn
)Ñight =Üen;

545 
ãmp
 = 
buf„r
[
right
];

546 
buf„r
[
right
] = '\0';

547 
out
 = 
buf„r
 + 
À·
;

548 
buf„r
[
right
] = 
ãmp
;

549  
out
;

550 
	}
}

556 
	gSåög
::
	$ª∂a˚
(
föd
, 
ª∂a˚
)

558 i‡(!
buf„r
) ;

559 *
p
 = 
buf„r
; *p;Ö++) {

560 i‡(*
p
 =
föd
Ë*∞
ª∂a˚
;

562 
	}
}

564 
	gSåög
::
	$ª∂a˚
(c⁄° 
Såög
& 
föd
, c⁄° Såög& 
ª∂a˚
)

566 i‡(
Àn
 =0 || 
föd
.len == 0) ;

567 
diff
 = 
ª∂a˚
.
Àn
 - 
föd
.len;

568 *
ªadFrom
 = 
buf„r
;

569 *
foundAt
;

570 i‡(
diff
 == 0) {

571 (
foundAt
 = 
	`°r°r
(
ªadFrom
, 
föd
.
buf„r
)Ë!
NULL
) {

572 
	`mem˝y
(
foundAt
, 
ª∂a˚
.
buf„r
,Ñïœ˚.
Àn
);

573 
ªadFrom
 = 
foundAt
 + 
ª∂a˚
.
Àn
;

575 } i‡(
diff
 < 0) {

576 *
wrôeTo
 = 
buf„r
;

577 (
foundAt
 = 
	`°r°r
(
ªadFrom
, 
föd
.
buf„r
)Ë!
NULL
) {

578 
n
 = 
foundAt
 - 
ªadFrom
;

579 
	`mem˝y
(
wrôeTo
, 
ªadFrom
, 
n
);

580 
wrôeTo
 +
n
;

581 
	`mem˝y
(
wrôeTo
, 
ª∂a˚
.
buf„r
,Ñïœ˚.
Àn
);

582 
wrôeTo
 +
ª∂a˚
.
Àn
;

583 
ªadFrom
 = 
foundAt
 + 
föd
.
Àn
;

584 
Àn
 +
diff
;

586 
	`°r˝y
(
wrôeTo
, 
ªadFrom
);

588 
size
 = 
Àn
;

589 (
foundAt
 = 
	`°r°r
(
ªadFrom
, 
föd
.
buf„r
)Ë!
NULL
) {

590 
ªadFrom
 = 
foundAt
 + 
föd
.
Àn
;

591 
size
 +
diff
;

593 i‡(
size
 =
Àn
) ;

594 i‡(
size
 > 
ˇ∑côy
 && !
	`ch™geBuf„r
(size)) ;

595 
ödex
 = 
Àn
 - 1;

596 
ödex
 >0 && (ödex = 
	`œ°IndexOf
(
föd
, index)) >= 0) {

597 
ªadFrom
 = 
buf„r
 + 
ödex
 + 
föd
.
Àn
;

598 
	`memmove
(
ªadFrom
 + 
diff
,ÑódFrom, 
Àn
 - (ªadFrom - 
buf„r
));

599 
Àn
 +
diff
;

600 
buf„r
[
Àn
] = 0;

601 
	`mem˝y
(
buf„r
 + 
ödex
, 
ª∂a˚
.buf„r,Ñïœ˚.
Àn
);

602 
ödex
--;

605 
	}
}

607 
	gSåög
::
	$toLowîCa£
()

609 i‡(!
buf„r
) ;

610 *
p
 = 
buf„r
; *p;Ö++) {

611 *
p
 = 
	`tﬁowî
(*p);

613 
	}
}

615 
	gSåög
::
	$toUµîCa£
()

617 i‡(!
buf„r
) ;

618 *
p
 = 
buf„r
; *p;Ö++) {

619 *
p
 = 
	`touµî
(*p);

621 
	}
}

623 
	gSåög
::
	$åim
()

625 i‡(!
buf„r
 || 
Àn
 == 0) ;

626 *
begö
 = 
buf„r
;

627 
	`is•a˚
(*
begö
)) begin++;

628 *
íd
 = 
buf„r
 + 
Àn
 - 1;

629 
	`is•a˚
(*
íd
Ë&&Énd >
begö
)Énd--;

630 
Àn
 = 
íd
 + 1 - 
begö
;

631 i‡(
begö
 > 
buf„r
Ë
	`mem˝y
(buf„r, begö, 
Àn
);

632 
buf„r
[
Àn
] = 0;

633 
	}
}

639 
	gSåög
::
	$toI¡
() const

641 i‡(
buf„r
Ë 
	`©ﬁ
(buffer);

643 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/WString.h

22 #i‚de‡
Såög_˛ass_h


23 
	#Såög_˛ass_h


	)

24 #ifde‡
__˝lu•lus


26 
	~<°dlib.h
>

27 
	~<°rög.h
>

28 
	~<˘y≥.h
>

29 
	~<avr/pgm•a˚.h
>

37 
˛ass
 
	g__FœshSåögHñ≥r
;

38 
	#F
(
°rög_lôîÆ
Ë(
ªöãΩªt_ˇ°
<c⁄° 
__FœshSåögHñ≥r
 *>(
	`PSTR
(°rög_lôîÆ)))

	)

42 
˛ass
 
	gSåögSumHñ≥r
;

45 ˛as†
	cSåög


50 (
	tSåög
::*
	tSåögIfHñ≥rTy≥
)() const;

51 
	$SåögIfHñ≥r
() const {}

53 
public
:

59 
	`Såög
(c⁄° *
c°r
 = "");

60 
	`Såög
(c⁄° 
Såög
 &
°r
);

61 #ifde‡
__GXX_EXPERIMENTAL_CXX0X__


62 
	`Såög
(
Såög
 &&
rvÆ
);

63 
	`Såög
(
SåögSumHñ≥r
 &&
rvÆ
);

65 
ex∂icô
 
	`Såög
(
c
);

66 
ex∂icô
 
	`Såög
(, 
ba£
=10);

67 
ex∂icô
 
	`Såög
(, 
ba£
=10);

68 
ex∂icô
 
	`Såög
(, 
ba£
=10);

69 
ex∂icô
 
	`Såög
(, 
ba£
=10);

70 
ex∂icô
 
	`Såög
(, 
ba£
=10);

71 ~
	`Såög
();

77 
	`ª£rve
(
size
);

78 
ölöe
 
	$Àngth
(Ëc⁄° { 
Àn
;
	}
}

83 
	gSåög
 & 
	g›î©‹
 = (c⁄° 
Såög
 &
rhs
);

84 
	gSåög
 & 
	g›î©‹
 = (c⁄° *
c°r
);

85 #ifde‡
__GXX_EXPERIMENTAL_CXX0X__


86 
	gSåög
 & 
	g›î©‹
 = (
Såög
 &&
rvÆ
);

87 
	gSåög
 & 
	g›î©‹
 = (
SåögSumHñ≥r
 &&
rvÆ
);

95 
c⁄ˇt
(c⁄° 
Såög
 &
°r
);

96 
c⁄ˇt
(c⁄° *
c°r
);

97 
c⁄ˇt
(
c
);

98 
c⁄ˇt
(
c
);

99 
c⁄ˇt
(
num
);

100 
c⁄ˇt
(
num
);

101 
c⁄ˇt
(
num
);

102 
c⁄ˇt
(
num
);

106 
	gSåög
 & 
	g›î©‹
 +(c⁄° 
Såög
 &
rhs
Ë{
c⁄ˇt
‘hs);  (*
	gthis
);}

107 
	gSåög
 & 
	g›î©‹
 +(c⁄° *
c°r
Ë{
c⁄ˇt
(c°r);  (*
	gthis
);}

108 
	gSåög
 & 
	g›î©‹
 +(
c
Ë{
c⁄ˇt
(c);  (*
	gthis
);}

109 
	gSåög
 & 
	g›î©‹
 +(
num
Ë{
c⁄ˇt
“um);  (*
	gthis
);}

110 
	gSåög
 & 
	g›î©‹
 +(
num
Ë{
c⁄ˇt
“um);  (*
	gthis
);}

111 
	gSåög
 & 
	g›î©‹
 +(
num
Ë{
c⁄ˇt
“um);  (*
	gthis
);}

112 
	gSåög
 & 
	g›î©‹
 +(
num
Ë{
c⁄ˇt
“um);  (*
	gthis
);}

113 
	gSåög
 & 
	g›î©‹
 +(
num
Ë{
c⁄ˇt
“um);  (*
	gthis
);}

115 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, c⁄° 
	gSåög
 &
	grhs
);

116 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, c⁄° *
	gc°r
);

117 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gc
);

118 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
);

119 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
);

120 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
);

121 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
);

122 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
);

125 
›î©‹
 
	$SåögIfHñ≥rTy≥
(Ëc⁄° {  
buf„r
 ? &
Såög
::
SåögIfHñ≥r
 : 0; 
	}
}

126 
	$com∑ªTo
(c⁄° 
Såög
 &
s
) const;

127 
	$equÆs
(c⁄° 
Såög
 &
s
) const;

128 
	$equÆs
(c⁄° *
c°r
) const;

129 
›î©‹
 =(c⁄° 
Såög
 &
rhs
Ëc⁄° { 
	`equÆs
‘hs);
	}
}

130 
	g›î©‹
 =(c⁄° *
c°r
Ëc⁄° { 
equÆs
(cstr);}

131 
	g›î©‹
 !(c⁄° 
Såög
 &
rhs
Ëc⁄° { !
equÆs
(rhs);}

132 
	g›î©‹
 !(c⁄° *
c°r
Ëc⁄° { !
equÆs
(cstr);}

133 
	g›î©‹
 < (c⁄° 
	gSåög
 &
	grhs
) const;

134 
	g›î©‹
 > (c⁄° 
	gSåög
 &
	grhs
) const;

135 
	g›î©‹
 <(c⁄° 
Såög
 &
rhs
) const;

136 
	g›î©‹
 >(c⁄° 
Såög
 &
rhs
) const;

137 
	$equÆsIgn‹eCa£
(c⁄° 
Såög
 &
s
) const;

138 
	$°¨tsWôh
–c⁄° 
Såög
 &
¥efix
) const;

139 
	$°¨tsWôh
(c⁄° 
Såög
 &
¥efix
, 
off£t
) const;

140 
	$ídsWôh
(c⁄° 
Såög
 &
suffix
) const;

143 
	$ch¨At
(
ödex
) const;

144 
	`£tCh¨At
(
ödex
, 
c
);

145 
›î©‹
 [] (
ödex
) const;

146 & 
›î©‹
 [] (
ödex
);

147 
	$gëByãs
(*
buf
, 
bufsize
, 
ödex
=0) const;

148 
	$toCh¨Aºay
(*
buf
, 
bufsize
, 
ödex
=0) const

149 {
	`gëByãs
((*)
buf
, 
bufsize
, 
ödex
);
	}
}

152 
	$ödexOf
–
ch
 ) const;

153 
	$ödexOf
–
ch
, 
‰omIndex
 ) const;

154 
	$ödexOf
–c⁄° 
Såög
 &
°r
 ) const;

155 
	$ödexOf
–c⁄° 
Såög
 &
°r
, 
‰omIndex
 ) const;

156 
	$œ°IndexOf
–
ch
 ) const;

157 
	$œ°IndexOf
–
ch
, 
‰omIndex
 ) const;

158 
	$œ°IndexOf
–c⁄° 
Såög
 &
°r
 ) const;

159 
	$œ°IndexOf
–c⁄° 
Såög
 &
°r
, 
‰omIndex
 ) const;

160 
Såög
 
	$sub°rög
–
begöIndex
 ) const;

161 
Såög
 
	$sub°rög
–
begöIndex
, 
ídIndex
 ) const;

164 
	`ª∂a˚
(
föd
, 
ª∂a˚
);

165 
	`ª∂a˚
(c⁄° 
Såög
& 
föd
, c⁄° Såög& 
ª∂a˚
);

166 
	`toLowîCa£
();

167 
	`toUµîCa£
();

168 
	`åim
();

171 
	$toI¡
() const;

173 
¥Ÿe˘ed
:

174 *
buf„r
;

175 
ˇ∑côy
;

176 
Àn
;

177 
Êags
;

178 
¥Ÿe˘ed
:

179 
	`öô
();

180 
	`övÆid©e
();

181 
	`ch™geBuf„r
(
maxSåLí
);

182 
	`c⁄ˇt
(c⁄° *
c°r
, 
Àngth
);

185 
Såög
 & 
	`c›y
(c⁄° *
c°r
, 
Àngth
);

186 #ifde‡
__GXX_EXPERIMENTAL_CXX0X__


187 
	`move
(
Såög
 &
rhs
);

189 
	}
};

191 ˛as†
	cSåögSumHñ≥r
 : 
public
 
Såög


193 
public
:

194 
	$SåögSumHñ≥r
(c⁄° 
Såög
 &
s
Ë: 
	$Såög
(
s
) {}

195 
	$SåögSumHñ≥r
(c⁄° *
p
Ë: 
	$Såög
(
p
Ë{
	}
}

196 
	$SåögSumHñ≥r
(
c
Ë: 
	$Såög
(
c
Ë{
	}
}

197 
	$SåögSumHñ≥r
(
num
Ë: 
	$Såög
(
num
Ë{
	}
}

198 
	$SåögSumHñ≥r
(
num
Ë: 
	$Såög
(
num
Ë{
	}
}

199 
	$SåögSumHñ≥r
(
num
Ë: 
	$Såög
(
num
Ë{
	}
}

200 
	$SåögSumHñ≥r
(
num
Ë: 
	$Såög
(
num
Ë{
	}
}

201 
	$SåögSumHñ≥r
(
num
Ë: 
	$Såög
(
num
Ë{
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/binary.h

1 #i‚de‡
Bö¨y_h


2 
	#Bö¨y_h


	)

4 
	#B0
 0

	)

5 
	#B00
 0

	)

6 
	#B000
 0

	)

7 
	#B0000
 0

	)

8 
	#B00000
 0

	)

9 
	#B000000
 0

	)

10 
	#B0000000
 0

	)

11 
	#B00000000
 0

	)

12 
	#B1
 1

	)

13 
	#B01
 1

	)

14 
	#B001
 1

	)

15 
	#B0001
 1

	)

16 
	#B00001
 1

	)

17 
	#B000001
 1

	)

18 
	#B0000001
 1

	)

19 
	#B00000001
 1

	)

20 
	#B10
 2

	)

21 
	#B010
 2

	)

22 
	#B0010
 2

	)

23 
	#B00010
 2

	)

24 
	#B000010
 2

	)

25 
	#B0000010
 2

	)

26 
	#B00000010
 2

	)

27 
	#B11
 3

	)

28 
	#B011
 3

	)

29 
	#B0011
 3

	)

30 
	#B00011
 3

	)

31 
	#B000011
 3

	)

32 
	#B0000011
 3

	)

33 
	#B00000011
 3

	)

34 
	#B100
 4

	)

35 
	#B0100
 4

	)

36 
	#B00100
 4

	)

37 
	#B000100
 4

	)

38 
	#B0000100
 4

	)

39 
	#B00000100
 4

	)

40 
	#B101
 5

	)

41 
	#B0101
 5

	)

42 
	#B00101
 5

	)

43 
	#B000101
 5

	)

44 
	#B0000101
 5

	)

45 
	#B00000101
 5

	)

46 
	#B110
 6

	)

47 
	#B0110
 6

	)

48 
	#B00110
 6

	)

49 
	#B000110
 6

	)

50 
	#B0000110
 6

	)

51 
	#B00000110
 6

	)

52 
	#B111
 7

	)

53 
	#B0111
 7

	)

54 
	#B00111
 7

	)

55 
	#B000111
 7

	)

56 
	#B0000111
 7

	)

57 
	#B00000111
 7

	)

58 
	#B1000
 8

	)

59 
	#B01000
 8

	)

60 
	#B001000
 8

	)

61 
	#B0001000
 8

	)

62 
	#B00001000
 8

	)

63 
	#B1001
 9

	)

64 
	#B01001
 9

	)

65 
	#B001001
 9

	)

66 
	#B0001001
 9

	)

67 
	#B00001001
 9

	)

68 
	#B1010
 10

	)

69 
	#B01010
 10

	)

70 
	#B001010
 10

	)

71 
	#B0001010
 10

	)

72 
	#B00001010
 10

	)

73 
	#B1011
 11

	)

74 
	#B01011
 11

	)

75 
	#B001011
 11

	)

76 
	#B0001011
 11

	)

77 
	#B00001011
 11

	)

78 
	#B1100
 12

	)

79 
	#B01100
 12

	)

80 
	#B001100
 12

	)

81 
	#B0001100
 12

	)

82 
	#B00001100
 12

	)

83 
	#B1101
 13

	)

84 
	#B01101
 13

	)

85 
	#B001101
 13

	)

86 
	#B0001101
 13

	)

87 
	#B00001101
 13

	)

88 
	#B1110
 14

	)

89 
	#B01110
 14

	)

90 
	#B001110
 14

	)

91 
	#B0001110
 14

	)

92 
	#B00001110
 14

	)

93 
	#B1111
 15

	)

94 
	#B01111
 15

	)

95 
	#B001111
 15

	)

96 
	#B0001111
 15

	)

97 
	#B00001111
 15

	)

98 
	#B10000
 16

	)

99 
	#B010000
 16

	)

100 
	#B0010000
 16

	)

101 
	#B00010000
 16

	)

102 
	#B10001
 17

	)

103 
	#B010001
 17

	)

104 
	#B0010001
 17

	)

105 
	#B00010001
 17

	)

106 
	#B10010
 18

	)

107 
	#B010010
 18

	)

108 
	#B0010010
 18

	)

109 
	#B00010010
 18

	)

110 
	#B10011
 19

	)

111 
	#B010011
 19

	)

112 
	#B0010011
 19

	)

113 
	#B00010011
 19

	)

114 
	#B10100
 20

	)

115 
	#B010100
 20

	)

116 
	#B0010100
 20

	)

117 
	#B00010100
 20

	)

118 
	#B10101
 21

	)

119 
	#B010101
 21

	)

120 
	#B0010101
 21

	)

121 
	#B00010101
 21

	)

122 
	#B10110
 22

	)

123 
	#B010110
 22

	)

124 
	#B0010110
 22

	)

125 
	#B00010110
 22

	)

126 
	#B10111
 23

	)

127 
	#B010111
 23

	)

128 
	#B0010111
 23

	)

129 
	#B00010111
 23

	)

130 
	#B11000
 24

	)

131 
	#B011000
 24

	)

132 
	#B0011000
 24

	)

133 
	#B00011000
 24

	)

134 
	#B11001
 25

	)

135 
	#B011001
 25

	)

136 
	#B0011001
 25

	)

137 
	#B00011001
 25

	)

138 
	#B11010
 26

	)

139 
	#B011010
 26

	)

140 
	#B0011010
 26

	)

141 
	#B00011010
 26

	)

142 
	#B11011
 27

	)

143 
	#B011011
 27

	)

144 
	#B0011011
 27

	)

145 
	#B00011011
 27

	)

146 
	#B11100
 28

	)

147 
	#B011100
 28

	)

148 
	#B0011100
 28

	)

149 
	#B00011100
 28

	)

150 
	#B11101
 29

	)

151 
	#B011101
 29

	)

152 
	#B0011101
 29

	)

153 
	#B00011101
 29

	)

154 
	#B11110
 30

	)

155 
	#B011110
 30

	)

156 
	#B0011110
 30

	)

157 
	#B00011110
 30

	)

158 
	#B11111
 31

	)

159 
	#B011111
 31

	)

160 
	#B0011111
 31

	)

161 
	#B00011111
 31

	)

162 
	#B100000
 32

	)

163 
	#B0100000
 32

	)

164 
	#B00100000
 32

	)

165 
	#B100001
 33

	)

166 
	#B0100001
 33

	)

167 
	#B00100001
 33

	)

168 
	#B100010
 34

	)

169 
	#B0100010
 34

	)

170 
	#B00100010
 34

	)

171 
	#B100011
 35

	)

172 
	#B0100011
 35

	)

173 
	#B00100011
 35

	)

174 
	#B100100
 36

	)

175 
	#B0100100
 36

	)

176 
	#B00100100
 36

	)

177 
	#B100101
 37

	)

178 
	#B0100101
 37

	)

179 
	#B00100101
 37

	)

180 
	#B100110
 38

	)

181 
	#B0100110
 38

	)

182 
	#B00100110
 38

	)

183 
	#B100111
 39

	)

184 
	#B0100111
 39

	)

185 
	#B00100111
 39

	)

186 
	#B101000
 40

	)

187 
	#B0101000
 40

	)

188 
	#B00101000
 40

	)

189 
	#B101001
 41

	)

190 
	#B0101001
 41

	)

191 
	#B00101001
 41

	)

192 
	#B101010
 42

	)

193 
	#B0101010
 42

	)

194 
	#B00101010
 42

	)

195 
	#B101011
 43

	)

196 
	#B0101011
 43

	)

197 
	#B00101011
 43

	)

198 
	#B101100
 44

	)

199 
	#B0101100
 44

	)

200 
	#B00101100
 44

	)

201 
	#B101101
 45

	)

202 
	#B0101101
 45

	)

203 
	#B00101101
 45

	)

204 
	#B101110
 46

	)

205 
	#B0101110
 46

	)

206 
	#B00101110
 46

	)

207 
	#B101111
 47

	)

208 
	#B0101111
 47

	)

209 
	#B00101111
 47

	)

210 
	#B110000
 48

	)

211 
	#B0110000
 48

	)

212 
	#B00110000
 48

	)

213 
	#B110001
 49

	)

214 
	#B0110001
 49

	)

215 
	#B00110001
 49

	)

216 
	#B110010
 50

	)

217 
	#B0110010
 50

	)

218 
	#B00110010
 50

	)

219 
	#B110011
 51

	)

220 
	#B0110011
 51

	)

221 
	#B00110011
 51

	)

222 
	#B110100
 52

	)

223 
	#B0110100
 52

	)

224 
	#B00110100
 52

	)

225 
	#B110101
 53

	)

226 
	#B0110101
 53

	)

227 
	#B00110101
 53

	)

228 
	#B110110
 54

	)

229 
	#B0110110
 54

	)

230 
	#B00110110
 54

	)

231 
	#B110111
 55

	)

232 
	#B0110111
 55

	)

233 
	#B00110111
 55

	)

234 
	#B111000
 56

	)

235 
	#B0111000
 56

	)

236 
	#B00111000
 56

	)

237 
	#B111001
 57

	)

238 
	#B0111001
 57

	)

239 
	#B00111001
 57

	)

240 
	#B111010
 58

	)

241 
	#B0111010
 58

	)

242 
	#B00111010
 58

	)

243 
	#B111011
 59

	)

244 
	#B0111011
 59

	)

245 
	#B00111011
 59

	)

246 
	#B111100
 60

	)

247 
	#B0111100
 60

	)

248 
	#B00111100
 60

	)

249 
	#B111101
 61

	)

250 
	#B0111101
 61

	)

251 
	#B00111101
 61

	)

252 
	#B111110
 62

	)

253 
	#B0111110
 62

	)

254 
	#B00111110
 62

	)

255 
	#B111111
 63

	)

256 
	#B0111111
 63

	)

257 
	#B00111111
 63

	)

258 
	#B1000000
 64

	)

259 
	#B01000000
 64

	)

260 
	#B1000001
 65

	)

261 
	#B01000001
 65

	)

262 
	#B1000010
 66

	)

263 
	#B01000010
 66

	)

264 
	#B1000011
 67

	)

265 
	#B01000011
 67

	)

266 
	#B1000100
 68

	)

267 
	#B01000100
 68

	)

268 
	#B1000101
 69

	)

269 
	#B01000101
 69

	)

270 
	#B1000110
 70

	)

271 
	#B01000110
 70

	)

272 
	#B1000111
 71

	)

273 
	#B01000111
 71

	)

274 
	#B1001000
 72

	)

275 
	#B01001000
 72

	)

276 
	#B1001001
 73

	)

277 
	#B01001001
 73

	)

278 
	#B1001010
 74

	)

279 
	#B01001010
 74

	)

280 
	#B1001011
 75

	)

281 
	#B01001011
 75

	)

282 
	#B1001100
 76

	)

283 
	#B01001100
 76

	)

284 
	#B1001101
 77

	)

285 
	#B01001101
 77

	)

286 
	#B1001110
 78

	)

287 
	#B01001110
 78

	)

288 
	#B1001111
 79

	)

289 
	#B01001111
 79

	)

290 
	#B1010000
 80

	)

291 
	#B01010000
 80

	)

292 
	#B1010001
 81

	)

293 
	#B01010001
 81

	)

294 
	#B1010010
 82

	)

295 
	#B01010010
 82

	)

296 
	#B1010011
 83

	)

297 
	#B01010011
 83

	)

298 
	#B1010100
 84

	)

299 
	#B01010100
 84

	)

300 
	#B1010101
 85

	)

301 
	#B01010101
 85

	)

302 
	#B1010110
 86

	)

303 
	#B01010110
 86

	)

304 
	#B1010111
 87

	)

305 
	#B01010111
 87

	)

306 
	#B1011000
 88

	)

307 
	#B01011000
 88

	)

308 
	#B1011001
 89

	)

309 
	#B01011001
 89

	)

310 
	#B1011010
 90

	)

311 
	#B01011010
 90

	)

312 
	#B1011011
 91

	)

313 
	#B01011011
 91

	)

314 
	#B1011100
 92

	)

315 
	#B01011100
 92

	)

316 
	#B1011101
 93

	)

317 
	#B01011101
 93

	)

318 
	#B1011110
 94

	)

319 
	#B01011110
 94

	)

320 
	#B1011111
 95

	)

321 
	#B01011111
 95

	)

322 
	#B1100000
 96

	)

323 
	#B01100000
 96

	)

324 
	#B1100001
 97

	)

325 
	#B01100001
 97

	)

326 
	#B1100010
 98

	)

327 
	#B01100010
 98

	)

328 
	#B1100011
 99

	)

329 
	#B01100011
 99

	)

330 
	#B1100100
 100

	)

331 
	#B01100100
 100

	)

332 
	#B1100101
 101

	)

333 
	#B01100101
 101

	)

334 
	#B1100110
 102

	)

335 
	#B01100110
 102

	)

336 
	#B1100111
 103

	)

337 
	#B01100111
 103

	)

338 
	#B1101000
 104

	)

339 
	#B01101000
 104

	)

340 
	#B1101001
 105

	)

341 
	#B01101001
 105

	)

342 
	#B1101010
 106

	)

343 
	#B01101010
 106

	)

344 
	#B1101011
 107

	)

345 
	#B01101011
 107

	)

346 
	#B1101100
 108

	)

347 
	#B01101100
 108

	)

348 
	#B1101101
 109

	)

349 
	#B01101101
 109

	)

350 
	#B1101110
 110

	)

351 
	#B01101110
 110

	)

352 
	#B1101111
 111

	)

353 
	#B01101111
 111

	)

354 
	#B1110000
 112

	)

355 
	#B01110000
 112

	)

356 
	#B1110001
 113

	)

357 
	#B01110001
 113

	)

358 
	#B1110010
 114

	)

359 
	#B01110010
 114

	)

360 
	#B1110011
 115

	)

361 
	#B01110011
 115

	)

362 
	#B1110100
 116

	)

363 
	#B01110100
 116

	)

364 
	#B1110101
 117

	)

365 
	#B01110101
 117

	)

366 
	#B1110110
 118

	)

367 
	#B01110110
 118

	)

368 
	#B1110111
 119

	)

369 
	#B01110111
 119

	)

370 
	#B1111000
 120

	)

371 
	#B01111000
 120

	)

372 
	#B1111001
 121

	)

373 
	#B01111001
 121

	)

374 
	#B1111010
 122

	)

375 
	#B01111010
 122

	)

376 
	#B1111011
 123

	)

377 
	#B01111011
 123

	)

378 
	#B1111100
 124

	)

379 
	#B01111100
 124

	)

380 
	#B1111101
 125

	)

381 
	#B01111101
 125

	)

382 
	#B1111110
 126

	)

383 
	#B01111110
 126

	)

384 
	#B1111111
 127

	)

385 
	#B01111111
 127

	)

386 
	#B10000000
 128

	)

387 
	#B10000001
 129

	)

388 
	#B10000010
 130

	)

389 
	#B10000011
 131

	)

390 
	#B10000100
 132

	)

391 
	#B10000101
 133

	)

392 
	#B10000110
 134

	)

393 
	#B10000111
 135

	)

394 
	#B10001000
 136

	)

395 
	#B10001001
 137

	)

396 
	#B10001010
 138

	)

397 
	#B10001011
 139

	)

398 
	#B10001100
 140

	)

399 
	#B10001101
 141

	)

400 
	#B10001110
 142

	)

401 
	#B10001111
 143

	)

402 
	#B10010000
 144

	)

403 
	#B10010001
 145

	)

404 
	#B10010010
 146

	)

405 
	#B10010011
 147

	)

406 
	#B10010100
 148

	)

407 
	#B10010101
 149

	)

408 
	#B10010110
 150

	)

409 
	#B10010111
 151

	)

410 
	#B10011000
 152

	)

411 
	#B10011001
 153

	)

412 
	#B10011010
 154

	)

413 
	#B10011011
 155

	)

414 
	#B10011100
 156

	)

415 
	#B10011101
 157

	)

416 
	#B10011110
 158

	)

417 
	#B10011111
 159

	)

418 
	#B10100000
 160

	)

419 
	#B10100001
 161

	)

420 
	#B10100010
 162

	)

421 
	#B10100011
 163

	)

422 
	#B10100100
 164

	)

423 
	#B10100101
 165

	)

424 
	#B10100110
 166

	)

425 
	#B10100111
 167

	)

426 
	#B10101000
 168

	)

427 
	#B10101001
 169

	)

428 
	#B10101010
 170

	)

429 
	#B10101011
 171

	)

430 
	#B10101100
 172

	)

431 
	#B10101101
 173

	)

432 
	#B10101110
 174

	)

433 
	#B10101111
 175

	)

434 
	#B10110000
 176

	)

435 
	#B10110001
 177

	)

436 
	#B10110010
 178

	)

437 
	#B10110011
 179

	)

438 
	#B10110100
 180

	)

439 
	#B10110101
 181

	)

440 
	#B10110110
 182

	)

441 
	#B10110111
 183

	)

442 
	#B10111000
 184

	)

443 
	#B10111001
 185

	)

444 
	#B10111010
 186

	)

445 
	#B10111011
 187

	)

446 
	#B10111100
 188

	)

447 
	#B10111101
 189

	)

448 
	#B10111110
 190

	)

449 
	#B10111111
 191

	)

450 
	#B11000000
 192

	)

451 
	#B11000001
 193

	)

452 
	#B11000010
 194

	)

453 
	#B11000011
 195

	)

454 
	#B11000100
 196

	)

455 
	#B11000101
 197

	)

456 
	#B11000110
 198

	)

457 
	#B11000111
 199

	)

458 
	#B11001000
 200

	)

459 
	#B11001001
 201

	)

460 
	#B11001010
 202

	)

461 
	#B11001011
 203

	)

462 
	#B11001100
 204

	)

463 
	#B11001101
 205

	)

464 
	#B11001110
 206

	)

465 
	#B11001111
 207

	)

466 
	#B11010000
 208

	)

467 
	#B11010001
 209

	)

468 
	#B11010010
 210

	)

469 
	#B11010011
 211

	)

470 
	#B11010100
 212

	)

471 
	#B11010101
 213

	)

472 
	#B11010110
 214

	)

473 
	#B11010111
 215

	)

474 
	#B11011000
 216

	)

475 
	#B11011001
 217

	)

476 
	#B11011010
 218

	)

477 
	#B11011011
 219

	)

478 
	#B11011100
 220

	)

479 
	#B11011101
 221

	)

480 
	#B11011110
 222

	)

481 
	#B11011111
 223

	)

482 
	#B11100000
 224

	)

483 
	#B11100001
 225

	)

484 
	#B11100010
 226

	)

485 
	#B11100011
 227

	)

486 
	#B11100100
 228

	)

487 
	#B11100101
 229

	)

488 
	#B11100110
 230

	)

489 
	#B11100111
 231

	)

490 
	#B11101000
 232

	)

491 
	#B11101001
 233

	)

492 
	#B11101010
 234

	)

493 
	#B11101011
 235

	)

494 
	#B11101100
 236

	)

495 
	#B11101101
 237

	)

496 
	#B11101110
 238

	)

497 
	#B11101111
 239

	)

498 
	#B11110000
 240

	)

499 
	#B11110001
 241

	)

500 
	#B11110010
 242

	)

501 
	#B11110011
 243

	)

502 
	#B11110100
 244

	)

503 
	#B11110101
 245

	)

504 
	#B11110110
 246

	)

505 
	#B11110111
 247

	)

506 
	#B11111000
 248

	)

507 
	#B11111001
 249

	)

508 
	#B11111010
 250

	)

509 
	#B11111011
 251

	)

510 
	#B11111100
 252

	)

511 
	#B11111101
 253

	)

512 
	#B11111110
 254

	)

513 
	#B11111111
 255

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/main.cpp

1 
	~<Arduöo.h
>

3 
	$maö
()

5 
	`öô
();

7 #i‡
	`deföed
(
USBCON
)

8 
USBDevi˚
.
	`©èch
();

11 
	`£tup
();

14 
	`lo›
();

15 i‡(
£rülEvítRun
Ë
	`£rülEvítRun
();

19 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/new.cpp

1 
	~<√w.h
>

3 * 
›î©‹
 
	$√w
(
size_t
 
size
)

5  
	`mÆloc
(
size
);

6 
	}
}

8 
›î©‹
 
	$dñëe
(* 
±r
)

10 
	`‰ì
(
±r
);

11 
	}
}

13 
	$__cxa_gu¨d_acquúe
(
__gu¨d
 *
g
Ë{ !*(*)(g);
	}
};

14 
	$__cxa_gu¨d_ªÀa£
 (
__gu¨d
 *
g
Ë{*(*)g = 1;
	}
};

15 
	$__cxa_gu¨d_ab‹t
 (
__gu¨d
 *Ë{
	}
};

17 
	$__cxa_puª_vútuÆ
(Ë{
	}
};

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/new.h

5 #i‚de‡
NEW_H


6 
	#NEW_H


	)

8 
	~<°dlib.h
>

10 * 
›î©‹
 
√w
(
size_t
 
size
);

11 
›î©‹
 
dñëe
(* 
±r
);

13 
__exãnsi⁄__
 
	t__gu¨d
 
	t__©åibuã__
((
	tmode
 (
	t__DI__
)));

15 "C" 
__cxa_gu¨d_acquúe
(
__gu¨d
 *);

16 "C" 
__cxa_gu¨d_ªÀa£
 (
__gu¨d
 *);

17 "C" 
__cxa_gu¨d_ab‹t
 (
__gu¨d
 *);

19 "C" 
__cxa_puª_vútuÆ
();

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/wiring.c

25 
	~"wúög_¥iv©e.h
"

29 
	#MICROSECONDS_PER_TIMER0_OVERFLOW
 (
	`˛ockCy˛esToMi¸o£c⁄ds
(64 * 256))

	)

32 
	#MILLIS_INC
 (
MICROSECONDS_PER_TIMER0_OVERFLOW
 / 1000)

	)

37 
	#FRACT_INC
 ((
MICROSECONDS_PER_TIMER0_OVERFLOW
 % 1000Ë>> 3)

	)

38 
	#FRACT_MAX
 (1000 >> 3)

	)

40 vﬁ©ûê
	gtimî0_ovîÊow_cou¡
 = 0;

41 vﬁ©ûê
	gtimî0_mûlis
 = 0;

42 
	gtimî0_‰a˘
 = 0;

44 #i‡
deföed
(
__AVR_ATtöy24__
Ë|| deföed(
__AVR_ATtöy44__
Ë|| deföed(
__AVR_ATtöy84__
)

45 
	$SIGNAL
(
TIM0_OVF_ve˘
)

47 
	$SIGNAL
(
TIMER0_OVF_ve˘
)

52 
m
 = 
timî0_mûlis
;

53 
f
 = 
timî0_‰a˘
;

55 
m
 +
MILLIS_INC
;

56 
f
 +
FRACT_INC
;

57 i‡(
f
 >
FRACT_MAX
) {

58 
f
 -
FRACT_MAX
;

59 
m
 += 1;

62 
timî0_‰a˘
 = 
f
;

63 
timî0_mûlis
 = 
m
;

64 
timî0_ovîÊow_cou¡
++;

65 
	}
}

67 
	$mûlis
()

69 
m
;

70 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

74 
	`˛i
();

75 
m
 = 
timî0_mûlis
;

76 
SREG
 = 
ﬁdSREG
;

78  
m
;

79 
	}
}

81 
	$mi¸os
() {

82 
m
;

83 
uöt8_t
 
ﬁdSREG
 = 
SREG
, 
t
;

85 
	`˛i
();

86 
m
 = 
timî0_ovîÊow_cou¡
;

87 #i‡
	`deföed
(
TCNT0
)

88 
t
 = 
TCNT0
;

89 #ñi‡
	`deföed
(
TCNT0L
)

90 
t
 = 
TCNT0L
;

92 #îr‹ 
TIMER
 0 
nŸ
 
deföed


96 #ifde‡
TIFR0


97 i‡((
TIFR0
 & 
	`_BV
(
TOV0
)Ë&& (
t
 < 255))

98 
m
++;

100 i‡((
TIFR
 & 
	`_BV
(
TOV0
)Ë&& (
t
 < 255))

101 
m
++;

104 
SREG
 = 
ﬁdSREG
;

106  ((
m
 << 8Ë+ 
t
Ë* (64 / 
	`˛ockCy˛esPîMi¸o£c⁄d
());

107 
	}
}

109 
	$dñay
(
ms
)

111 
uöt16_t
 
°¨t
 = (uöt16_t)
	`mi¸os
();

113 
ms
 > 0) {

114 i‡(((
uöt16_t
)
	`mi¸os
(Ë- 
°¨t
) >= 1000) {

115 
ms
--;

116 
°¨t
 += 1000;

119 
	}
}

122 
	$dñayMi¸o£c⁄ds
(
us
)

127 #i‡
F_CPU
 >= 20000000L

132 
__asm__
 
	`__vﬁ©ûe__
 (

135 i‡(--
us
 == 0)

141 
us
 = (us<<2) + us;

144 
us
 -= 2;

146 #ñi‡
F_CPU
 >= 16000000L

151 i‡(--
us
 == 0)

157 
us
 <<= 2;

160 
us
 -= 2;

167 i‡(--
us
 == 0)

169 i‡(--
us
 == 0)

175 
us
 <<= 1;

179 
us
--;

183 
__asm__
 
	`__vﬁ©ûe__
 (

185 "b∫ê1b" : "=w" (
us
) : "0" (us)

187 
	}
}

189 
	$öô
()

193 
	`£i
();

198 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
WGM01
)

199 
	`sbi
(
TCCR0A
, 
WGM01
);

200 
	`sbi
(
TCCR0A
, 
WGM00
);

204 #i‡
	`deföed
(
__AVR_ATmega128__
)

206 
	`sbi
(
TCCR0
, 
CS02
);

207 #ñi‡
	`deföed
(
TCCR0
Ë&& deföed(
CS01
Ë&& deföed(
CS00
)

209 
	`sbi
(
TCCR0
, 
CS01
);

210 
	`sbi
(
TCCR0
, 
CS00
);

211 #ñi‡
	`deföed
(
TCCR0B
Ë&& deföed(
CS01
Ë&& deföed(
CS00
)

213 
	`sbi
(
TCCR0B
, 
CS01
);

214 
	`sbi
(
TCCR0B
, 
CS00
);

215 #ñi‡
	`deföed
(
TCCR0A
Ë&& deföed(
CS01
Ë&& deföed(
CS00
)

217 
	`sbi
(
TCCR0A
, 
CS01
);

218 
	`sbi
(
TCCR0A
, 
CS00
);

220 #îr‹ 
Timî
 0 
¥esˇÀ
 
Á˘‹
 64 
nŸ
 
£t
 
c‹ª˘ly


224 #i‡
	`deföed
(
TIMSK
Ë&& deföed(
TOIE0
)

225 
	`sbi
(
TIMSK
, 
TOIE0
);

226 #ñi‡
	`deföed
(
TIMSK0
Ë&& deföed(
TOIE0
)

227 
	`sbi
(
TIMSK0
, 
TOIE0
);

229 #îr‹ 
Timî
 0 
ovîÊow
 
öãºu±
 
nŸ
 
£t
 
c‹ª˘ly


237 #i‡
	`deföed
(
TCCR1B
Ë&& deföed(
CS11
Ë&& deföed(
CS10
)

238 
TCCR1B
 = 0;

241 
	`sbi
(
TCCR1B
, 
CS11
);

242 #i‡
F_CPU
 >= 8000000L

243 
	`sbi
(
TCCR1B
, 
CS10
);

245 #ñi‡
	`deföed
(
TCCR1
Ë&& deföed(
CS11
Ë&& deföed(
CS10
)

246 
	`sbi
(
TCCR1
, 
CS11
);

247 #i‡
F_CPU
 >= 8000000L

248 
	`sbi
(
TCCR1
, 
CS10
);

252 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
WGM10
)

253 
	`sbi
(
TCCR1A
, 
WGM10
);

254 #ñi‡
	`deföed
(
TCCR1
)

255 #w¨nög 
this
 
√eds
 
to
 
be
 
föished


259 #i‡
	`deföed
(
TCCR2
Ë&& deföed(
CS22
)

260 
	`sbi
(
TCCR2
, 
CS22
);

261 #ñi‡
	`deföed
(
TCCR2B
Ë&& deföed(
CS22
)

262 
	`sbi
(
TCCR2B
, 
CS22
);

264 #w¨nög 
Timî
 2 
nŸ
 
	`föished
 (
may
ÇŸ 
be
 
¥e£¡
 
⁄
 
this
 
CPU
)

268 #i‡
	`deföed
(
TCCR2
Ë&& deföed(
WGM20
)

269 
	`sbi
(
TCCR2
, 
WGM20
);

270 #ñi‡
	`deföed
(
TCCR2A
Ë&& deföed(
WGM20
)

271 
	`sbi
(
TCCR2A
, 
WGM20
);

273 #w¨nög 
Timî
 2 
nŸ
 
	`föished
 (
may
ÇŸ 
be
 
¥e£¡
 
⁄
 
this
 
CPU
)

276 #i‡
	`deföed
(
TCCR3B
Ë&& deföed(
CS31
Ë&& deföed(
WGM30
)

277 
	`sbi
(
TCCR3B
, 
CS31
);

278 
	`sbi
(
TCCR3B
, 
CS30
);

279 
	`sbi
(
TCCR3A
, 
WGM30
);

282 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
TCCR4B
Ë&& deföed(
TCCR4D
)

283 
	`sbi
(
TCCR4B
, 
CS42
);

284 
	`sbi
(
TCCR4B
, 
CS41
);

285 
	`sbi
(
TCCR4B
, 
CS40
);

286 
	`sbi
(
TCCR4D
, 
WGM40
);

287 
	`sbi
(
TCCR4A
, 
PWM4A
);

288 
	`sbi
(
TCCR4C
, 
PWM4D
);

290 #i‡
	`deföed
(
TCCR4B
Ë&& deföed(
CS41
Ë&& deföed(
WGM40
)

291 
	`sbi
(
TCCR4B
, 
CS41
);

292 
	`sbi
(
TCCR4B
, 
CS40
);

293 
	`sbi
(
TCCR4A
, 
WGM40
);

297 #i‡
	`deföed
(
TCCR5B
Ë&& deföed(
CS51
Ë&& deföed(
WGM50
)

298 
	`sbi
(
TCCR5B
, 
CS51
);

299 
	`sbi
(
TCCR5B
, 
CS50
);

300 
	`sbi
(
TCCR5A
, 
WGM50
);

303 #i‡
	`deföed
(
ADCSRA
)

308 
	`sbi
(
ADCSRA
, 
ADPS2
);

309 
	`sbi
(
ADCSRA
, 
ADPS1
);

310 
	`sbi
(
ADCSRA
, 
ADPS0
);

313 
	`sbi
(
ADCSRA
, 
ADEN
);

319 #i‡
	`deföed
(
UCSRB
)

320 
UCSRB
 = 0;

321 #ñi‡
	`deföed
(
UCSR0B
)

322 
UCSR0B
 = 0;

324 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/wiring_analog.c

27 
	~"wúög_¥iv©e.h
"

28 
	~"pös_¨duöo.h
"

30 
uöt8_t
 
	g™Æog_ª„ªn˚
 = 
DEFAULT
;

32 
	$™ÆogRe„ªn˚
(
uöt8_t
 
mode
)

37 
™Æog_ª„ªn˚
 = 
mode
;

38 
	}
}

40 
	$™ÆogRód
(
uöt8_t
 
pö
)

42 
uöt8_t
 
low
, 
high
;

44 #i‡
	`deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega2560__
)

45 i‡(
pö
 >= 54)Öin -= 54;

46 #ñi‡
	`deföed
(
__AVR_ATmega32U4__
)

47 i‡(
pö
 >= 18)Öin -= 18;

48 #ñi‡
	`deföed
(
__AVR_ATmega1284P__
Ë|| deföed(
__AVR_ATmega644P__
)

49 i‡(
pö
 >= 24)Öin -= 24;

51 i‡(
pö
 >= 14)Öin -= 14;

54 #i‡
	`deföed
(
__AVR_ATmega32U4__
)

55 
pö
 = 
	`™ÆogPöToCh™√l
(pin);

56 
ADCSRB
 = (ADCSRB & ~(1 << 
MUX5
)Ë| (((
pö
 >> 3) & 0x01) << MUX5);

57 #ñi‡
	`deföed
(
ADCSRB
Ë&& deföed(
MUX5
)

60 
ADCSRB
 = (ADCSRB & ~(1 << 
MUX5
)Ë| (((
pö
 >> 3) & 0x01) << MUX5);

66 #i‡
	`deföed
(
ADMUX
)

67 
ADMUX
 = (
™Æog_ª„ªn˚
 << 6Ë| (
pö
 & 0x07);

73 #i‡
	`deföed
(
ADCSRA
Ë&& deföed(
ADCL
)

75 
	`sbi
(
ADCSRA
, 
ADSC
);

78 
	`bô_is_£t
(
ADCSRA
, 
ADSC
));

84 
low
 = 
ADCL
;

85 
high
 = 
ADCH
;

88 
low
 = 0;

89 
high
 = 0;

93  (
high
 << 8Ë| 
low
;

94 
	}
}

100 
	$™ÆogWrôe
(
uöt8_t
 
pö
, 
vÆ
)

107 
	`pöMode
(
pö
, 
OUTPUT
);

108 i‡(
vÆ
 == 0)

110 
	`digôÆWrôe
(
pö
, 
LOW
);

112 i‡(
vÆ
 == 255)

114 
	`digôÆWrôe
(
pö
, 
HIGH
);

118 
	`digôÆPöToTimî
(
pö
))

121 #i‡
	`deföed
(
TCCR0
Ë&& deföed(
COM00
Ë&& !deföed(
__AVR_ATmega8__
)

122 
TIMER0A
:

124 
	`sbi
(
TCCR0
, 
COM00
);

125 
OCR0
 = 
vÆ
;

129 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
COM0A1
)

130 
TIMER0A
:

132 
	`sbi
(
TCCR0A
, 
COM0A1
);

133 
OCR0A
 = 
vÆ
;

137 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
COM0B1
)

138 
TIMER0B
:

140 
	`sbi
(
TCCR0A
, 
COM0B1
);

141 
OCR0B
 = 
vÆ
;

145 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
COM1A1
)

146 
TIMER1A
:

148 
	`sbi
(
TCCR1A
, 
COM1A1
);

149 
OCR1A
 = 
vÆ
;

153 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
COM1B1
)

154 
TIMER1B
:

156 
	`sbi
(
TCCR1A
, 
COM1B1
);

157 
OCR1B
 = 
vÆ
;

161 #i‡
	`deföed
(
TCCR2
Ë&& deföed(
COM21
)

162 
TIMER2
:

164 
	`sbi
(
TCCR2
, 
COM21
);

165 
OCR2
 = 
vÆ
;

169 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
COM2A1
)

170 
TIMER2A
:

172 
	`sbi
(
TCCR2A
, 
COM2A1
);

173 
OCR2A
 = 
vÆ
;

177 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
COM2B1
)

178 
TIMER2B
:

180 
	`sbi
(
TCCR2A
, 
COM2B1
);

181 
OCR2B
 = 
vÆ
;

185 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3A1
)

186 
TIMER3A
:

188 
	`sbi
(
TCCR3A
, 
COM3A1
);

189 
OCR3A
 = 
vÆ
;

193 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3B1
)

194 
TIMER3B
:

196 
	`sbi
(
TCCR3A
, 
COM3B1
);

197 
OCR3B
 = 
vÆ
;

201 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3C1
)

202 
TIMER3C
:

204 
	`sbi
(
TCCR3A
, 
COM3C1
);

205 
OCR3C
 = 
vÆ
;

209 #i‡
	`deföed
(
TCCR4A
)

210 
TIMER4A
:

212 
	`sbi
(
TCCR4A
, 
COM4A1
);

213 #i‡
	`deföed
(
COM4A0
)

214 
	`cbi
(
TCCR4A
, 
COM4A0
);

216 
OCR4A
 = 
vÆ
;

220 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4B1
)

221 
TIMER4B
:

223 
	`sbi
(
TCCR4A
, 
COM4B1
);

224 
OCR4B
 = 
vÆ
;

228 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4C1
)

229 
TIMER4C
:

231 
	`sbi
(
TCCR4A
, 
COM4C1
);

232 
OCR4C
 = 
vÆ
;

236 #i‡
	`deföed
(
TCCR4C
Ë&& deföed(
COM4D1
)

237 
TIMER4D
:

239 
	`sbi
(
TCCR4C
, 
COM4D1
);

240 #i‡
	`deföed
(
COM4D0
)

241 
	`cbi
(
TCCR4C
, 
COM4D0
);

243 
OCR4D
 = 
vÆ
;

248 #i‡
	`deföed
(
TCCR5A
Ë&& deföed(
COM5A1
)

249 
TIMER5A
:

251 
	`sbi
(
TCCR5A
, 
COM5A1
);

252 
OCR5A
 = 
vÆ
;

256 #i‡
	`deföed
(
TCCR5A
Ë&& deföed(
COM5B1
)

257 
TIMER5B
:

259 
	`sbi
(
TCCR5A
, 
COM5B1
);

260 
OCR5B
 = 
vÆ
;

264 #i‡
	`deföed
(
TCCR5A
Ë&& deföed(
COM5C1
)

265 
TIMER5C
:

267 
	`sbi
(
TCCR5A
, 
COM5C1
);

268 
OCR5C
 = 
vÆ
;

272 
NOT_ON_TIMER
:

274 i‡(
vÆ
 < 128) {

275 
	`digôÆWrôe
(
pö
, 
LOW
);

277 
	`digôÆWrôe
(
pö
, 
HIGH
);

281 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/wiring_digital.c

27 
	#ARDUINO_MAIN


	)

28 
	~"wúög_¥iv©e.h
"

29 
	~"pös_¨duöo.h
"

31 
	$pöMode
(
uöt8_t
 
pö
, uöt8_à
mode
)

33 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

34 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

35 vﬁ©ûê
uöt8_t
 *
ªg
, *
out
;

37 i‡(
p‹t
 =
NOT_A_PIN
) ;

40 
ªg
 = 
	`p‹tModeRegi°î
(
p‹t
);

41 
out
 = 
	`p‹tOuçutRegi°î
(
p‹t
);

43 i‡(
mode
 =
INPUT
) {

44 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

45 
	`˛i
();

46 *
ªg
 &~
bô
;

47 *
out
 &~
bô
;

48 
SREG
 = 
ﬁdSREG
;

49 } i‡(
mode
 =
INPUT_PULLUP
) {

50 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

51 
	`˛i
();

52 *
ªg
 &~
bô
;

53 *
out
 |
bô
;

54 
SREG
 = 
ﬁdSREG
;

56 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

57 
	`˛i
();

58 *
ªg
 |
bô
;

59 
SREG
 = 
ﬁdSREG
;

61 
	}
}

77 
	$tu∫OffPWM
(
uöt8_t
 
timî
)

79 
timî
)

81 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
COM1A1
)

82 
TIMER1A
: 
	`cbi
(
TCCR1A
, 
COM1A1
); ;

84 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
COM1B1
)

85 
TIMER1B
: 
	`cbi
(
TCCR1A
, 
COM1B1
); ;

88 #i‡
	`deföed
(
TCCR2
Ë&& deföed(
COM21
)

89 
TIMER2
: 
	`cbi
(
TCCR2
, 
COM21
); ;

92 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
COM0A1
)

93 
TIMER0A
: 
	`cbi
(
TCCR0A
, 
COM0A1
); ;

96 #i‡
	`deföed
(
TIMER0B
Ë&& deföed(
COM0B1
)

97 
TIMER0B
: 
	`cbi
(
TCCR0A
, 
COM0B1
); ;

99 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
COM2A1
)

100 
TIMER2A
: 
	`cbi
(
TCCR2A
, 
COM2A1
); ;

102 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
COM2B1
)

103 
TIMER2B
: 
	`cbi
(
TCCR2A
, 
COM2B1
); ;

106 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3A1
)

107 
TIMER3A
: 
	`cbi
(
TCCR3A
, 
COM3A1
); ;

109 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3B1
)

110 
TIMER3B
: 
	`cbi
(
TCCR3A
, 
COM3B1
); ;

112 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3C1
)

113 
TIMER3C
: 
	`cbi
(
TCCR3A
, 
COM3C1
); ;

116 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4A1
)

117 
TIMER4A
: 
	`cbi
(
TCCR4A
, 
COM4A1
); ;

119 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4B1
)

120 
TIMER4B
: 
	`cbi
(
TCCR4A
, 
COM4B1
); ;

122 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4C1
)

123 
TIMER4C
: 
	`cbi
(
TCCR4A
, 
COM4C1
); ;

125 #i‡
	`deföed
(
TCCR4C
Ë&& deföed(
COM4D1
)

126 
TIMER4D
: 
	`cbi
(
TCCR4C
, 
COM4D1
); ;

129 #i‡
	`deföed
(
TCCR5A
)

130 
TIMER5A
: 
	`cbi
(
TCCR5A
, 
COM5A1
); ;

131 
TIMER5B
: 
	`cbi
(
TCCR5A
, 
COM5B1
); ;

132 
TIMER5C
: 
	`cbi
(
TCCR5A
, 
COM5C1
); ;

135 
	}
}

137 
	$digôÆWrôe
(
uöt8_t
 
pö
, uöt8_à
vÆ
)

139 
uöt8_t
 
timî
 = 
	`digôÆPöToTimî
(
pö
);

140 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

141 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

142 vﬁ©ûê
uöt8_t
 *
out
;

144 i‡(
p‹t
 =
NOT_A_PIN
) ;

148 i‡(
timî
 !
NOT_ON_TIMER
Ë
	`tu∫OffPWM
(timer);

150 
out
 = 
	`p‹tOuçutRegi°î
(
p‹t
);

152 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

153 
	`˛i
();

155 i‡(
vÆ
 =
LOW
) {

156 *
out
 &~
bô
;

158 *
out
 |
bô
;

161 
SREG
 = 
ﬁdSREG
;

162 
	}
}

164 
	$digôÆRód
(
uöt8_t
 
pö
)

166 
uöt8_t
 
timî
 = 
	`digôÆPöToTimî
(
pö
);

167 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

168 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

170 i‡(
p‹t
 =
NOT_A_PIN
Ë 
LOW
;

174 i‡(
timî
 !
NOT_ON_TIMER
Ë
	`tu∫OffPWM
(timer);

176 i‡(*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë 
HIGH
;

177  
LOW
;

178 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/wiring_private.h

25 #i‚de‡
WúögPriv©e_h


26 
	#WúögPriv©e_h


	)

28 
	~<avr/io.h
>

29 
	~<avr/öãºu±.h
>

30 
	~<°dio.h
>

31 
	~<°d¨g.h
>

33 
	~"Arduöo.h
"

35 #ifde‡
__˝lu•lus


39 #i‚de‡
cbi


40 
	#cbi
(
s‰
, 
bô
Ë(
	`_SFR_BYTE
(s‰Ë&~
	`_BV
(bô))

	)

42 #i‚de‡
sbi


43 
	#sbi
(
s‰
, 
bô
Ë(
	`_SFR_BYTE
(s‰Ë|
	`_BV
(bô))

	)

46 
	#EXTERNAL_INT_0
 0

	)

47 
	#EXTERNAL_INT_1
 1

	)

48 
	#EXTERNAL_INT_2
 2

	)

49 
	#EXTERNAL_INT_3
 3

	)

50 
	#EXTERNAL_INT_4
 4

	)

51 
	#EXTERNAL_INT_5
 5

	)

52 
	#EXTERNAL_INT_6
 6

	)

53 
	#EXTERNAL_INT_7
 7

	)

55 #i‡
deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega2560__
)

56 
	#EXTERNAL_NUM_INTERRUPTS
 8

	)

57 #ñi‡
deföed
(
__AVR_ATmega1284P__
Ë|| deföed(
__AVR_ATmega644P__
)

58 
	#EXTERNAL_NUM_INTERRUPTS
 3

	)

59 #ñi‡
deföed
(
__AVR_ATmega32U4__
)

60 
	#EXTERNAL_NUM_INTERRUPTS
 4

	)

62 
	#EXTERNAL_NUM_INTERRUPTS
 2

	)

65 (*
voidFuncPå
)();

67 #ifde‡
__˝lu•lus


	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/wiring_pulse.c

25 
	~"wúög_¥iv©e.h
"

26 
	~"pös_¨duöo.h
"

32 
	$pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
)

37 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

38 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

39 
uöt8_t
 
°©eMask
 = (
°©e
 ? 
bô
 : 0);

40 
width
 = 0;

44 
numlo›s
 = 0;

45 
maxlo›s
 = 
	`mi¸o£c⁄dsToClockCy˛es
(
timeout
) / 16;

48 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë=
°©eMask
)

49 i‡(
numlo›s
++ =
maxlo›s
)

53 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë!
°©eMask
)

54 i‡(
numlo›s
++ =
maxlo›s
)

58 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë=
°©eMask
) {

59 i‡(
numlo›s
++ =
maxlo›s
)

61 
width
++;

68  
	`˛ockCy˛esToMi¸o£c⁄ds
(
width
 * 21 + 16);

69 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/wiring_shift.c

25 
	~"wúög_¥iv©e.h
"

27 
uöt8_t
 
	$shi·In
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
) {

28 
uöt8_t
 
vÆue
 = 0;

29 
uöt8_t
 
i
;

31 
i
 = 0; i < 8; ++i) {

32 
	`digôÆWrôe
(
˛ockPö
, 
HIGH
);

33 i‡(
bôOrdî
 =
LSBFIRST
)

34 
vÆue
 |
	`digôÆRód
(
d©aPö
Ë<< 
i
;

36 
vÆue
 |
	`digôÆRód
(
d©aPö
Ë<< (7 - 
i
);

37 
	`digôÆWrôe
(
˛ockPö
, 
LOW
);

39  
vÆue
;

40 
	}
}

42 
	$shi·Out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
, uöt8_à
vÆ
)

44 
uöt8_t
 
i
;

46 
i
 = 0; i < 8; i++) {

47 i‡(
bôOrdî
 =
LSBFIRST
)

48 
	`digôÆWrôe
(
d©aPö
, !!(
vÆ
 & (1 << 
i
)));

50 
	`digôÆWrôe
(
d©aPö
, !!(
vÆ
 & (1 << (7 - 
i
))));

52 
	`digôÆWrôe
(
˛ockPö
, 
HIGH
);

53 
	`digôÆWrôe
(
˛ockPö
, 
LOW
);

55 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/variants/standard/pins_arduino.h

30 #i‚de‡
Pös_Arduöo_h


31 
	#Pös_Arduöo_h


	)

33 
	~<avr/pgm•a˚.h
>

35 
	#NOT_A_PIN
 0

	)

36 
	#NOT_A_PORT
 0

	)

38 
	#NOT_ON_TIMER
 0

	)

39 
	#TIMER0A
 1

	)

40 
	#TIMER0B
 2

	)

41 
	#TIMER1A
 3

	)

42 
	#TIMER1B
 4

	)

43 
	#TIMER2
 5

	)

44 
	#TIMER2A
 6

	)

45 
	#TIMER2B
 7

	)

47 
	#TIMER3A
 8

	)

48 
	#TIMER3B
 9

	)

49 
	#TIMER3C
 10

	)

50 
	#TIMER4A
 11

	)

51 
	#TIMER4B
 12

	)

52 
	#TIMER4C
 13

	)

53 
	#TIMER5A
 14

	)

54 
	#TIMER5B
 15

	)

55 
	#TIMER5C
 16

	)

57 c⁄° 
uöt8_t
 
	gSS
 = 4;

58 c⁄° 
uöt8_t
 
	gMOSI
 = 5;

59 c⁄° 
uöt8_t
 
	gMISO
 = 6;

60 c⁄° 
uöt8_t
 
	gSCK
 = 7;

62 c⁄° 
uöt8_t
 
	gSDA
 = 17;

63 c⁄° 
uöt8_t
 
	gSCL
 = 16;

64 c⁄° 
uöt8_t
 
	gLED_BUILTIN
 = 13;

66 c⁄° 
uöt8_t
 
	gA0
 = 31;

67 c⁄° 
uöt8_t
 
	gA1
 = 30;

68 c⁄° 
uöt8_t
 
	gA2
 = 29;

69 c⁄° 
uöt8_t
 
	gA3
 = 28;

70 c⁄° 
uöt8_t
 
	gA4
 = 27;

71 c⁄° 
uöt8_t
 
	gA5
 = 26;

72 c⁄° 
uöt8_t
 
	gA6
 = 25;

73 c⁄° 
uöt8_t
 
	gA7
 = 24;

111 
	#NUM_DIGITAL_PINS
 24

	)

112 
	#NUM_ANALOG_INPUTS
 8

	)

113 
	#™ÆogI≈utToDigôÆPö
(
p
Ë(’ < 7Ë? (pË+ 24 : -1)

	)

115 
	#digôÆPöHasPWM
(
p
Ë(’Ë=3 || (pË=4 || (pË=12 || (pË=13 || (pË=14 || (pË=15 )

	)

117 
	#digôÆPöToPCICR
(
p
Ë–((’Ë>0Ë&& (’Ë<31)Ë? (&
PCICR
Ë: ((
uöt8_t
 *)0Ë)

	)

119 
	#digôÆPöToPCICRbô
(
p
) ( (((p) >= 24) && ((p) <= 31)) ? 0 : \

120 –(((
p
) >= 0) && ((p) <= 7)) ? 1 : \

121 –(((
p
) >= 16) && ((p) <= 23)) ? 2 : \

122 –(((
p
) >= 8) && ((p) <= 15)) ? 3 : \

123 0 ) ) ) )

	)

125 
	#digôÆPöToPCMSK
(
p
Ë–((’Ë>24Ë&& (’Ë<31)Ë? (&
PCMSK0
) : \

126 –(((
p
Ë>0Ë&& (’Ë<7)Ë? (&
PCMSK1
) : \

127 –(((
p
Ë>16Ë&& (’Ë<23)Ë? (&
PCMSK2
) : \

128 –(((
p
Ë>8Ë&& (’Ë<15)Ë? (&
PCMSK3
) : \

129 ((
uöt8_t
 *)0ËËËË)

	)

132 
	#digôÆPöToPCMSKbô
(
p
) ( (((p) >= 24) && ((p) <= 31)) ? (31 - (p)) : \

133 –(((
p
) >= 0) && ((p) <= 7)) ? (p) : \

134 –(((
p
) >= 16) && ((p) <= 23)) ? ((p) - 16) : \

135 –(((
p
) >= 8) && ((p) <= 15)) ? ((p) - 8) : \

136 0 ) ) ) )

	)

138 
	#PA
 1

	)

139 
	#PB
 2

	)

140 
	#PC
 3

	)

141 
	#PD
 4

	)

142 
	#PE
 5

	)

143 
	#PF
 6

	)

144 
	#PG
 7

	)

145 
	#PH
 8

	)

146 
	#PJ
 10

	)

147 
	#PK
 11

	)

148 
	#PL
 12

	)

150 #ifde‡
ARDUINO_MAIN


154 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_mode_PGM
[] =

156 
NOT_A_PORT
,

157 (
uöt16_t
Ë&
DDRA
,

158 (
uöt16_t
Ë&
DDRB
,

159 (
uöt16_t
Ë&
DDRC
,

160 (
uöt16_t
Ë&
DDRD
,

163 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_ouçut_PGM
[] =

165 
NOT_A_PORT
,

166 (
uöt16_t
Ë&
PORTA
,

167 (
uöt16_t
Ë&
PORTB
,

168 (
uöt16_t
Ë&
PORTC
,

169 (
uöt16_t
Ë&
PORTD
,

171 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_öput_PGM
[] =

173 
NOT_A_PORT
,

174 (
uöt16_t
Ë&
PINA
,

175 (
uöt16_t
Ë&
PINB
,

176 (
uöt16_t
Ë&
PINC
,

177 (
uöt16_t
Ë&
PIND
,

179 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_p‹t_PGM
[] =

181 
PB
,

182 
PB
,

183 
PB
,

184 
PB
,

185 
PB
,

186 
PB
,

187 
PB
,

188 
PB
,

189 
PD
,

190 
PD
,

191 
PD
,

192 
PD
,

193 
PD
,

194 
PD
,

195 
PD
,

196 
PD
,

197 
PC
,

198 
PC
,

199 
PC
,

200 
PC
,

201 
PC
,

202 
PC
,

203 
PC
,

204 
PC
,

205 
PA
,

206 
PA
,

207 
PA
,

208 
PA
,

209 
PA
,

210 
PA
,

211 
PA
,

212 
PA


214 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_bô_mask_PGM
[] =

216 
_BV
(0),

217 
_BV
(1),

218 
_BV
(2),

219 
_BV
(3),

220 
_BV
(4),

221 
_BV
(5),

222 
_BV
(6),

223 
_BV
(7),

224 
_BV
(0),

225 
_BV
(1),

226 
_BV
(2),

227 
_BV
(3),

228 
_BV
(4),

229 
_BV
(5),

230 
_BV
(6),

231 
_BV
(7),

232 
_BV
(0),

233 
_BV
(1),

234 
_BV
(2),

235 
_BV
(3),

236 
_BV
(4),

237 
_BV
(5),

238 
_BV
(6),

239 
_BV
(7),

240 
_BV
(7),

241 
_BV
(6),

242 
_BV
(5),

243 
_BV
(4),

244 
_BV
(3),

245 
_BV
(2),

246 
_BV
(1),

247 
_BV
(0)

249 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_timî_PGM
[] =

251 
NOT_ON_TIMER
,

252 
NOT_ON_TIMER
,

253 
NOT_ON_TIMER
,

254 
TIMER0A
,

255 
TIMER0B
,

256 
NOT_ON_TIMER
,

257 
NOT_ON_TIMER
,

258 
NOT_ON_TIMER
,

259 
NOT_ON_TIMER
,

260 
NOT_ON_TIMER
,

261 
NOT_ON_TIMER
,

262 
NOT_ON_TIMER
,

263 
TIMER1B
,

264 
TIMER1A
,

265 
TIMER2B
,

266 
TIMER2A
,

267 
NOT_ON_TIMER
,

268 
NOT_ON_TIMER
,

269 
NOT_ON_TIMER
,

270 
NOT_ON_TIMER
,

271 
NOT_ON_TIMER
,

272 
NOT_ON_TIMER
,

273 
NOT_ON_TIMER
,

274 
NOT_ON_TIMER
,

275 
NOT_ON_TIMER
,

276 
NOT_ON_TIMER
,

277 
NOT_ON_TIMER
,

278 
NOT_ON_TIMER
,

279 
NOT_ON_TIMER
,

280 
NOT_ON_TIMER
,

281 
NOT_ON_TIMER
,

282 
NOT_ON_TIMER


	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/Arduino.h

1 #i‚de‡
Arduöo_h


2 
	#Arduöo_h


	)

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<m©h.h
>

8 
	~<avr/pgm•a˚.h
>

9 
	~<avr/io.h
>

10 
	~<avr/öãºu±.h
>

12 
	~"bö¨y.h
"

14 #ifde‡
__˝lu•lus


18 
	#HIGH
 0x1

	)

19 
	#LOW
 0x0

	)

21 
	#INPUT
 0x0

	)

22 
	#OUTPUT
 0x1

	)

23 
	#INPUT_PULLUP
 0x2

	)

25 
	#åue
 0x1

	)

26 
	#Ál£
 0x0

	)

28 
	#PI
 3.1415926535897932384626433832795

	)

29 
	#HALF_PI
 1.5707963267948966192313216916398

	)

30 
	#TWO_PI
 6.283185307179586476925286766559

	)

31 
	#DEG_TO_RAD
 0.017453292519943295769236907684886

	)

32 
	#RAD_TO_DEG
 57.295779513082320876798154814105

	)

34 
	#SERIAL
 0x0

	)

35 
	#DISPLAY
 0x1

	)

37 
	#LSBFIRST
 0

	)

38 
	#MSBFIRST
 1

	)

40 
	#CHANGE
 1

	)

41 
	#FALLING
 2

	)

42 
	#RISING
 3

	)

44 #i‡
deföed
(
__AVR_ATtöy24__
Ë|| deföed(
__AVR_ATtöy44__
Ë|| deföed(
__AVR_ATtöy84__
Ë|| deföed(
__AVR_ATtöy25__
Ë|| deföed(
__AVR_ATtöy45__
Ë|| deföed(
__AVR_ATtöy85__
)

45 
	#DEFAULT
 0

	)

46 
	#EXTERNAL
 1

	)

47 
	#INTERNAL
 2

	)

49 #i‡
deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega2560__
Ë|| deföed(
__AVR_ATmega1284P__
Ë|| deföed(
__AVR_ATmega644P__
)

50 
	#INTERNAL1V1
 2

	)

51 
	#INTERNAL2V56
 3

	)

53 
	#INTERNAL
 3

	)

55 
	#DEFAULT
 1

	)

56 
	#EXTERNAL
 0

	)

60 #ifde‡
abs


61 #unde‡
abs


64 
	#mö
(
a
,
b
Ë(◊)<(b)?◊):(b))

	)

65 
	#max
(
a
,
b
Ë(◊)>(b)?◊):(b))

	)

66 
	#abs
(
x
Ë((x)>0?(x):-(x))

	)

67 
	#c⁄°øö
(
amt
,
low
,
high
Ë(◊mt)<÷ow)?÷ow):(◊mt)>(high)?(high):◊mt)))

	)

68 
	#round
(
x
Ë((x)>=0?()((x)+0.5):()((x)-0.5))

	)

69 
	#ødüns
(
deg
Ë((deg)*
DEG_TO_RAD
)

	)

70 
	#degªes
(
ød
Ë(‘ad)*
RAD_TO_DEG
)

	)

71 
	#sq
(
x
Ë((x)*(x))

	)

73 
	#öãºu±s
(Ë
	`£i
()

	)

74 
	#noI¡îru±s
(Ë
	`˛i
()

	)

76 
	#˛ockCy˛esPîMi¸o£c⁄d
(Ë–
F_CPU
 / 1000000L )

	)

77 
	#˛ockCy˛esToMi¸o£c⁄ds
(
a
Ë–◊Ë/ 
	`˛ockCy˛esPîMi¸o£c⁄d
(Ë)

	)

78 
	#mi¸o£c⁄dsToClockCy˛es
(
a
Ë–◊Ë* 
	`˛ockCy˛esPîMi¸o£c⁄d
(Ë)

	)

80 
	#lowByã
(
w
Ë((
uöt8_t
Ë((wË& 0xff))

	)

81 
	#highByã
(
w
Ë((
uöt8_t
Ë((wË>> 8))

	)

83 
	#bôRód
(
vÆue
, 
bô
Ë(((vÆueË>> (bô)Ë& 0x01)

	)

84 
	#bôSë
(
vÆue
, 
bô
Ë((vÆueË|(1UL << (bô)))

	)

85 
	#bôCÀ¨
(
vÆue
, 
bô
Ë((vÆueË&~(1UL << (bô)))

	)

86 
	#bôWrôe
(
vÆue
, 
bô
, 
bôvÆue
Ë(bôvÆuê? 
	`bôSë
(vÆue, bôË: 
	`bôCÀ¨
(vÆue, bô))

	)

89 
	tw‹d
;

91 
	#bô
(
b
Ë(1UL << (b))

	)

93 
uöt8_t
 
	tboﬁón
;

94 
uöt8_t
 
	tbyã
;

96 
öô
();

98 
pöMode
(
uöt8_t
, uint8_t);

99 
digôÆWrôe
(
uöt8_t
, uint8_t);

100 
digôÆRód
(
uöt8_t
);

101 
™ÆogRód
(
uöt8_t
);

102 
™ÆogRe„ªn˚
(
uöt8_t
 
mode
);

103 
™ÆogWrôe
(
uöt8_t
, );

105 
mûlis
();

106 
mi¸os
();

107 
dñay
();

108 
dñayMi¸o£c⁄ds
(
us
);

109 
pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
);

111 
shi·Out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
, uöt8_à
vÆ
);

112 
uöt8_t
 
shi·In
(uöt8_à
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
);

114 
©èchI¡îru±
(
uöt8_t
, (*)(), 
mode
);

115 
dëachI¡îru±
(
uöt8_t
);

117 
£tup
();

118 
lo›
();

123 
	#™ÆogInPöToBô
(
P
Ë(P)

	)

127 c⁄° 
uöt16_t
 
PROGMEM
 
p‹t_to_mode_PGM
[];

128 c⁄° 
uöt16_t
 
PROGMEM
 
p‹t_to_öput_PGM
[];

129 c⁄° 
uöt16_t
 
PROGMEM
 
p‹t_to_ouçut_PGM
[];

131 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_p‹t_PGM
[];

133 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_bô_mask_PGM
[];

134 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_timî_PGM
[];

141 
	#digôÆPöToP‹t
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_p‹t_PGM
 + (PËË)

	)

142 
	#digôÆPöToBôMask
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_bô_mask_PGM
 + (PËË)

	)

143 
	#digôÆPöToTimî
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_timî_PGM
 + (PËË)

	)

144 
	#™ÆogInPöToBô
(
P
Ë(P)

	)

145 
	#p‹tOuçutRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–
	`pgm_ªad_w‹d
–
p‹t_to_ouçut_PGM
 + (P))Ë)

	)

146 
	#p‹tI≈utRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–
	`pgm_ªad_w‹d
–
p‹t_to_öput_PGM
 + (P))Ë)

	)

147 
	#p‹tModeRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–
	`pgm_ªad_w‹d
–
p‹t_to_mode_PGM
 + (P))Ë)

	)

149 
	#NOT_A_PIN
 0

	)

150 
	#NOT_A_PORT
 0

	)

152 #ifde‡
ARDUINO_MAIN


153 
	#PA
 1

	)

154 
	#PB
 2

	)

155 
	#PC
 3

	)

156 
	#PD
 4

	)

157 
	#PE
 5

	)

158 
	#PF
 6

	)

159 
	#PG
 7

	)

160 
	#PH
 8

	)

161 
	#PJ
 10

	)

162 
	#PK
 11

	)

163 
	#PL
 12

	)

166 
	#NOT_ON_TIMER
 0

	)

167 
	#TIMER0A
 1

	)

168 
	#TIMER0B
 2

	)

169 
	#TIMER1A
 3

	)

170 
	#TIMER1B
 4

	)

171 
	#TIMER2
 5

	)

172 
	#TIMER2A
 6

	)

173 
	#TIMER2B
 7

	)

175 
	#TIMER3A
 8

	)

176 
	#TIMER3B
 9

	)

177 
	#TIMER3C
 10

	)

178 
	#TIMER4A
 11

	)

179 
	#TIMER4B
 12

	)

180 
	#TIMER4C
 13

	)

181 
	#TIMER4D
 14

	)

182 
	#TIMER5A
 15

	)

183 
	#TIMER5B
 16

	)

184 
	#TIMER5C
 17

	)

186 #ifde‡
__˝lu•lus


190 #ifde‡
__˝lu•lus


191 
	~"WCh¨a˘î.h
"

192 
	~"WSåög.h
"

193 
	~"H¨dw¨eSîül.h
"

195 
uöt16_t
 
makeW‹d
(uöt16_à
w
);

196 
uöt16_t
 
makeW‹d
(
byã
 
h
, byã 
l
);

198 
	#w‹d
(...Ë
	`makeW‹d
(
__VA_ARGS__
)

	)

200 
pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
 = 1000000L);

202 
t⁄e
(
uöt8_t
 
_pö
, 
‰equícy
, 
duøti⁄
 = 0);

203 
noT⁄e
(
uöt8_t
 
_pö
);

206 
øndom
();

207 
øndom
(, );

208 
øndomSìd
();

209 
m≠
(, , , , );

213 
	~"pös_¨duöo.h
"

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/CDC.cpp

19 
	~"Pœtf‹m.h
"

20 
	~"USBAPI.h
"

21 
	~<avr/wdt.h
>

23 #i‡
deföed
(
USBCON
)

24 #ifde‡
CDC_ENABLED


26 #i‡(
RAMEND
 < 1000)

27 
	#SERIAL_BUFFER_SIZE
 16

	)

29 
	#SERIAL_BUFFER_SIZE
 64

	)

32 
	srög_buf„r


34 
	mbuf„r
[
SERIAL_BUFFER_SIZE
];

35 vﬁ©ûê
	mhód
;

36 vﬁ©ûê
	mèû
;

39 
rög_buf„r
 
	gcdc_rx_buf„r
 = { { 0 }, 0, 0};

43 
u32
 
	mdwDTER©e
;

44 
u8
 
	mbCh¨F‹m©
;

45 
u8
 
	mbP¨ôyTy≥
;

46 
u8
 
	mbD©aBôs
;

47 
u8
 
	mlöeSèã
;

48 } 
	tLöeInfo
;

50 vﬁ©ûê
LöeInfo
 
	g_usbLöeInfo
 = { 57600, 0x00, 0x00, 0x00, 0x00 };

52 
	#WEAK
 
	`__©åibuã__
 ((
wók
))

	)

54 c⁄° 
CDCDes¸ùt‹
 
_cdcI¡îÁ˚
 
PROGMEM
;

55 c⁄° 
CDCDes¸ùt‹
 
	g_cdcI¡îÁ˚
 =

57 
D_IAD
(0,2,
CDC_COMMUNICATION_INTERFACE_CLASS
,
CDC_ABSTRACT_CONTROL_MODEL
,1),

60 
D_INTERFACE
(
CDC_ACM_INTERFACE
,1,
CDC_COMMUNICATION_INTERFACE_CLASS
,
CDC_ABSTRACT_CONTROL_MODEL
,0),

61 
D_CDCCS
(
CDC_HEADER
,0x10,0x01),

62 
D_CDCCS
(
CDC_CALL_MANAGEMENT
,1,1),

63 
D_CDCCS4
(
CDC_ABSTRACT_CONTROL_MANAGEMENT
,6),

64 
D_CDCCS
(
CDC_UNION
,
CDC_ACM_INTERFACE
,
CDC_DATA_INTERFACE
),

65 
D_ENDPOINT
(
USB_ENDPOINT_IN
 (
CDC_ENDPOINT_ACM
),
USB_ENDPOINT_TYPE_INTERRUPT
,0x10,0x40),

68 
D_INTERFACE
(
CDC_DATA_INTERFACE
,2,
CDC_DATA_INTERFACE_CLASS
,0,0),

69 
D_ENDPOINT
(
USB_ENDPOINT_OUT
(
CDC_ENDPOINT_OUT
),
USB_ENDPOINT_TYPE_BULK
,0x40,0),

70 
D_ENDPOINT
(
USB_ENDPOINT_IN
 (
CDC_ENDPOINT_IN
 ),
USB_ENDPOINT_TYPE_BULK
,0x40,0)

73 
WEAK
 
	$CDC_GëI¡îÁ˚
(
u8
* 
öãrÁ˚Num
)

75 
öãrÁ˚Num
[0] += 2;

76  
	`USB_SídC⁄åﬁ
(
TRANSFER_PGM
,&
_cdcI¡îÁ˚
,(_cdcInterface));

77 
	}
}

79 
boﬁ
 
WEAK
 
	$CDC_Sëup
(
Sëup
& 
£tup
)

81 
u8
 
r
 = 
£tup
.
bReque°
;

82 
u8
 
ªque°Ty≥
 = 
£tup
.
bmReque°Ty≥
;

84 i‡(
REQUEST_DEVICETOHOST_CLASS_INTERFACE
 =
ªque°Ty≥
)

86 i‡(
CDC_GET_LINE_CODING
 =
r
)

88 
	`USB_SídC⁄åﬁ
(0,(*)&
_usbLöeInfo
,7);

89  
åue
;

93 i‡(
REQUEST_HOSTTODEVICE_CLASS_INTERFACE
 =
ªque°Ty≥
)

95 i‡(
CDC_SET_LINE_CODING
 =
r
)

97 
	`USB_RecvC⁄åﬁ
((*)&
_usbLöeInfo
,7);

98  
åue
;

101 i‡(
CDC_SET_CONTROL_LINE_STATE
 =
r
)

103 
_usbLöeInfo
.
löeSèã
 = 
£tup
.
wVÆueL
;

109 i‡(1200 =
_usbLöeInfo
.
dwDTER©e
) {

111 i‡((
_usbLöeInfo
.
löeSèã
 & 0x01) == 0) {

112 *(
uöt16_t
 *)0x0800 = 0x7777;

113 
	`wdt_íabÀ
(
WDTO_120MS
);

120 
	`wdt_dißbÀ
();

121 
	`wdt_ª£t
();

122 *(
uöt16_t
 *)0x0800 = 0x0;

125  
åue
;

128  
Ál£
;

129 
	}
}

132 
	g_£rülPìk
 = -1;

133 
	gSîül_
::
	$begö
(
uöt16_t
 
baud_cou¡
)

135 
	}
}

137 
Sîül_
::
	$íd
()

139 
	}
}

141 
Sîül_
::
	$ac˚±
()

143 
rög_buf„r
 *
buf„r
 = &
cdc_rx_buf„r
;

144 
i
 = ()(
buf„r
->
hód
+1Ë% 
SERIAL_BUFFER_SIZE
;

152 
i
 !
buf„r
->
èû
) {

153 
c
 = 
	`USB_Recv
(
CDC_RX
);

154 i‡(
c
 == -1)

156 
buf„r
->buf„r[buf„r->
hód
] = 
c
;

157 
buf„r
->
hód
 = 
i
;

159 
i
 = ()(
buf„r
->
hód
+1Ë% 
SERIAL_BUFFER_SIZE
;

161 
	}
}

163 
	gSîül_
::
	$avaûabÀ
()

165 
rög_buf„r
 *
buf„r
 = &
cdc_rx_buf„r
;

166  ()(
SERIAL_BUFFER_SIZE
 + 
buf„r
->
hód
 - buf„r->
èû
) % SERIAL_BUFFER_SIZE;

167 
	}
}

169 
	gSîül_
::
	$≥ek
()

171 
rög_buf„r
 *
buf„r
 = &
cdc_rx_buf„r
;

172 i‡(
buf„r
->
hód
 =buf„r->
èû
) {

175  
buf„r
->buf„r[buf„r->
èû
];

177 
	}
}

179 
	gSîül_
::
	$ªad
()

181 
rög_buf„r
 *
buf„r
 = &
cdc_rx_buf„r
;

183 i‡(
buf„r
->
hód
 =buf„r->
èû
) {

186 
c
 = 
buf„r
->buf„r[buf„r->
èû
];

187 
buf„r
->
èû
 = ()(buf„r->èû + 1Ë% 
SERIAL_BUFFER_SIZE
;

188  
c
;

190 
	}
}

192 
	gSîül_
::
	$Êush
()

194 
	`USB_Flush
(
CDC_TX
);

195 
	}
}

197 
size_t
 
	gSîül_
::
	$wrôe
(
uöt8_t
 
c
)

208 i‡(
_usbLöeInfo
.
löeSèã
 > 0) {

209 
r
 = 
	`USB_Síd
(
CDC_TX
,&
c
,1);

210 i‡(
r
 > 0) {

211  
r
;

213 
	`£tWrôeEº‹
();

217 
	`£tWrôeEº‹
();

219 
	}
}

228 
	gSîül_
::
›î©‹
 
	$boﬁ
() {

229 
boﬁ
 
ªsu…
 = 
Ál£
;

230 i‡(
_usbLöeInfo
.
löeSèã
 > 0)

231 
ªsu…
 = 
åue
;

232 
	`dñay
(10);

233  
ªsu…
;

234 
	}
}

236 
Sîül_
 
	gSîül
;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/Client.h

1 #i‚de‡
˛õ¡_h


2 
	#˛õ¡_h


	)

3 
	~"Pröt.h
"

4 
	~"Såóm.h
"

5 
	~"IPAddªss.h
"

7 ˛as†
	cClõ¡
 : 
public
 
Såóm
 {

9 
public
:

10 
vútuÆ
 
c⁄√˘
(
IPAddªss
 
ù
, 
uöt16_t
 
p‹t
) =0;

11 
vútuÆ
 
c⁄√˘
(c⁄° *
ho°
, 
uöt16_t
 
p‹t
) =0;

12 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
) =0;

13 
vútuÆ
 
size_t
 
wrôe
(c⁄° 
uöt8_t
 *
buf
, size_à
size
) =0;

14 
vútuÆ
 
avaûabÀ
() = 0;

15 
vútuÆ
 
ªad
() = 0;

16 
vútuÆ
 
ªad
(
uöt8_t
 *
buf
, 
size_t
 
size
) = 0;

17 
vútuÆ
 
≥ek
() = 0;

18 
vútuÆ
 
Êush
() = 0;

19 
vútuÆ
 
°›
() = 0;

20 
vútuÆ
 
uöt8_t
 
c⁄√˘ed
() = 0;

21 
vútuÆ
 
›î©‹
 
boﬁ
() = 0;

22 
	m¥Ÿe˘ed
:

23 
uöt8_t
* 
	$øwIPAddªss
(
IPAddªss
& 
addr
Ë{ áddr.
	`øw_addªss
(); };

24 
	}
};

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/HID.cpp

19 
	~"Pœtf‹m.h
"

20 
	~"USBAPI.h
"

21 
	~"USBDesc.h
"

23 #i‡
deföed
(
USBCON
)

24 #ifde‡
HID_ENABLED


30 
Mou£_
 
	gMou£
;

31 
Keybﬂrd_
 
	gKeybﬂrd
;

38 
	#LSB
(
_x
Ë((_xË& 0xFF)

	)

39 
	#MSB
(
_x
Ë((_xË>> 8)

	)

41 
	#RAWHID_USAGE_PAGE
 0xFFC0

	)

42 
	#RAWHID_USAGE
 0x0C00

	)

43 
	#RAWHID_TX_SIZE
 64

	)

44 
	#RAWHID_RX_SIZE
 64

	)

46 c⁄° 
u8
 
_hidRï‹tDes¸ùt‹
[] 
PROGMEM
;

47 c⁄° 
u8
 
	g_hidRï‹tDes¸ùt‹
[] = {

109 #i‡
RAWHID_ENABLED


111 0x06, 
LSB
(
RAWHID_USAGE_PAGE
), 
MSB
(RAWHID_USAGE_PAGE),

112 0x0A, 
LSB
(
RAWHID_USAGE
), 
MSB
(RAWHID_USAGE),

131 c⁄° 
HIDDes¸ùt‹
 
_hidI¡îÁ˚
 
PROGMEM
;

132 c⁄° 
HIDDes¸ùt‹
 
	g_hidI¡îÁ˚
 =

134 
D_INTERFACE
(
HID_INTERFACE
,1,3,0,0),

135 
D_HIDREPORT
((
_hidRï‹tDes¸ùt‹
)),

136 
D_ENDPOINT
(
USB_ENDPOINT_IN
 (
HID_ENDPOINT_INT
),
USB_ENDPOINT_TYPE_INTERRUPT
,0x40,0x01)

143 
u8
 
	g_hid_¥Ÿocﬁ
 = 1;

144 
u8
 
	g_hid_idÀ
 = 1;

146 
	#WEAK
 
	`__©åibuã__
 ((
wók
))

	)

148 
WEAK
 
	$HID_GëI¡îÁ˚
(
u8
* 
öãrÁ˚Num
)

150 
öãrÁ˚Num
[0] += 1;

151  
	`USB_SídC⁄åﬁ
(
TRANSFER_PGM
,&
_hidI¡îÁ˚
,(_hidInterface));

152 
	}
}

154 
WEAK
 
	$HID_GëDes¸ùt‹
(
i
)

156  
	`USB_SídC⁄åﬁ
(
TRANSFER_PGM
,
_hidRï‹tDes¸ùt‹
,(_hidReportDescriptor));

157 
	}
}

159 
WEAK
 
	$HID_SídRï‹t
(
u8
 
id
, c⁄° * 
d©a
, 
Àn
)

161 
	`USB_Síd
(
HID_TX
, &
id
, 1);

162 
	`USB_Síd
(
HID_TX
 | 
TRANSFER_RELEASE
,
d©a
,
Àn
);

163 
	}
}

165 
boﬁ
 
WEAK
 
	$HID_Sëup
(
Sëup
& 
£tup
)

167 
u8
 
r
 = 
£tup
.
bReque°
;

168 
u8
 
ªque°Ty≥
 = 
£tup
.
bmReque°Ty≥
;

169 i‡(
REQUEST_DEVICETOHOST_CLASS_INTERFACE
 =
ªque°Ty≥
)

171 i‡(
HID_GET_REPORT
 =
r
)

174  
åue
;

176 i‡(
HID_GET_PROTOCOL
 =
r
)

179  
åue
;

183 i‡(
REQUEST_HOSTTODEVICE_CLASS_INTERFACE
 =
ªque°Ty≥
)

185 i‡(
HID_SET_PROTOCOL
 =
r
)

187 
_hid_¥Ÿocﬁ
 = 
£tup
.
wVÆueL
;

188  
åue
;

191 i‡(
HID_SET_IDLE
 =
r
)

193 
_hid_idÀ
 = 
£tup
.
wVÆueL
;

194  
åue
;

197  
Ál£
;

198 
	}
}

204 
	gMou£_
::
	$Mou£_
(Ë: 
	$_buâ⁄s
(0)

206 
	}
}

208 
Mou£_
::
	$begö
()

210 
	}
}

212 
Mou£_
::
	$íd
()

214 
	}
}

216 
Mou£_
::
	$˛ick
(
uöt8_t
 
b
)

218 
_buâ⁄s
 = 
b
;

219 
	`move
(0,0,0);

220 
_buâ⁄s
 = 0;

221 
	`move
(0,0,0);

222 
	}
}

224 
	gMou£_
::
	$move
(sig√d 
x
, sig√d 
y
, sig√d 
whìl
)

226 
u8
 
m
[4];

227 
m
[0] = 
_buâ⁄s
;

228 
m
[1] = 
x
;

229 
m
[2] = 
y
;

230 
m
[3] = 
whìl
;

231 
	`HID_SídRï‹t
(1,
m
,4);

232 
	}
}

234 
	gMou£_
::
	$buâ⁄s
(
uöt8_t
 
b
)

236 i‡(
b
 !
_buâ⁄s
)

238 
_buâ⁄s
 = 
b
;

239 
	`move
(0,0,0);

241 
	}
}

243 
	gMou£_
::
	$¥ess
(
uöt8_t
 
b
)

245 
	`buâ⁄s
(
_buâ⁄s
 | 
b
);

246 
	}
}

248 
	gMou£_
::
	$ªÀa£
(
uöt8_t
 
b
)

250 
	`buâ⁄s
(
_buâ⁄s
 & ~
b
);

251 
	}
}

253 
boﬁ
 
	gMou£_
::
	$isPªs£d
(
uöt8_t
 
b
)

255 i‡((
b
 & 
_buâ⁄s
) > 0)

256  
åue
;

257  
Ál£
;

258 
	}
}

264 
	gKeybﬂrd_
::
	$Keybﬂrd_
()

266 
	}
}

268 
Keybﬂrd_
::
	$begö
()

270 
	}
}

272 
Keybﬂrd_
::
	$íd
()

274 
	}
}

276 
Keybﬂrd_
::
	$£ndRï‹t
(
KeyRï‹t
* 
keys
)

278 
	`HID_SídRï‹t
(2,
keys
,(
KeyRï‹t
));

279 
	}
}

282 c⁄° 
uöt8_t
 
_asciim≠
[128] 
PROGMEM
;

284 
	#SHIFT
 0x80

	)

285 c⁄° 
uöt8_t
 
	g_asciim≠
[128] =

321 0x1e|
SHIFT
,

322 0x34|
SHIFT
,

323 0x20|
SHIFT
,

324 0x21|
SHIFT
,

325 0x22|
SHIFT
,

326 0x24|
SHIFT
,

328 0x26|
SHIFT
,

329 0x27|
SHIFT
,

330 0x25|
SHIFT
,

331 0x2e|
SHIFT
,

346 0x33|
SHIFT
,

348 0x36|
SHIFT
,

350 0x37|
SHIFT
,

351 0x38|
SHIFT
,

352 0x1f|
SHIFT
,

353 0x04|
SHIFT
,

354 0x05|
SHIFT
,

355 0x06|
SHIFT
,

356 0x07|
SHIFT
,

357 0x08|
SHIFT
,

358 0x09|
SHIFT
,

359 0x0a|
SHIFT
,

360 0x0b|
SHIFT
,

361 0x0c|
SHIFT
,

362 0x0d|
SHIFT
,

363 0x0e|
SHIFT
,

364 0x0f|
SHIFT
,

365 0x10|
SHIFT
,

366 0x11|
SHIFT
,

367 0x12|
SHIFT
,

368 0x13|
SHIFT
,

369 0x14|
SHIFT
,

370 0x15|
SHIFT
,

371 0x16|
SHIFT
,

372 0x17|
SHIFT
,

373 0x18|
SHIFT
,

374 0x19|
SHIFT
,

375 0x1a|
SHIFT
,

376 0x1b|
SHIFT
,

377 0x1c|
SHIFT
,

378 0x1d|
SHIFT
,

382 0x23|
SHIFT
,

383 0x2d|
SHIFT
,

411 0x2f|
SHIFT
,

412 0x31|
SHIFT
,

413 0x30|
SHIFT
,

414 0x35|
SHIFT
,

418 
uöt8_t
 
USBPutCh¨
(uöt8_à
c
);

424 
size_t
 
	gKeybﬂrd_
::
	$¥ess
(
uöt8_t
 
k
)

426 
uöt8_t
 
i
;

427 i‡(
k
 >= 136) {

428 
k
 = k - 136;

429 } i‡(
k
 >= 128) {

430 
_keyRï‹t
.
modifõrs
 |(1<<(
k
-128));

431 
k
 = 0;

433 
k
 = 
	`pgm_ªad_byã
(
_asciim≠
 + k);

434 i‡(!
k
) {

435 
	`£tWrôeEº‹
();

438 i‡(
k
 & 0x80) {

439 
_keyRï‹t
.
modifõrs
 |= 0x02;

440 
k
 &= 0x7F;

446 i‡(
_keyRï‹t
.
keys
[0] !
k
 && _keyReport.keys[1] != k &&

447 
_keyRï‹t
.
keys
[2] !
k
 && _keyReport.keys[3] != k &&

448 
_keyRï‹t
.
keys
[4] !
k
 && _keyReport.keys[5] != k) {

450 
i
=0; i<6; i++) {

451 i‡(
_keyRï‹t
.
keys
[
i
] == 0x00) {

452 
_keyRï‹t
.
keys
[
i
] = 
k
;

456 i‡(
i
 == 6) {

457 
	`£tWrôeEº‹
();

461 
	`£ndRï‹t
(&
_keyRï‹t
);

463 
	}
}

468 
size_t
 
	gKeybﬂrd_
::
	$ªÀa£
(
uöt8_t
 
k
)

470 
uöt8_t
 
i
;

471 i‡(
k
 >= 136) {

472 
k
 = k - 136;

473 } i‡(
k
 >= 128) {

474 
_keyRï‹t
.
modifõrs
 &~(1<<(
k
-128));

475 
k
 = 0;

477 
k
 = 
	`pgm_ªad_byã
(
_asciim≠
 + k);

478 i‡(!
k
) {

481 i‡(
k
 & 0x80) {

482 
_keyRï‹t
.
modifõrs
 &= ~(0x02);

483 
k
 &= 0x7F;

489 
i
=0; i<6; i++) {

490 i‡(0 !
k
 && 
_keyRï‹t
.
keys
[
i
] == k) {

491 
_keyRï‹t
.
keys
[
i
] = 0x00;

495 
	`£ndRï‹t
(&
_keyRï‹t
);

497 
	}
}

499 
	gKeybﬂrd_
::
	$ªÀa£AŒ
()

501 
_keyRï‹t
.
keys
[0] = 0;

502 
_keyRï‹t
.
keys
[1] = 0;

503 
_keyRï‹t
.
keys
[2] = 0;

504 
_keyRï‹t
.
keys
[3] = 0;

505 
_keyRï‹t
.
keys
[4] = 0;

506 
_keyRï‹t
.
keys
[5] = 0;

507 
_keyRï‹t
.
modifõrs
 = 0;

508 
	`£ndRï‹t
(&
_keyRï‹t
);

509 
	}
}

511 
size_t
 
	gKeybﬂrd_
::
	$wrôe
(
uöt8_t
 
c
)

513 
uöt8_t
 
p
 = 
	`¥ess
(
c
);

514 
uöt8_t
 
r
 = 
	`ªÀa£
(
c
);

515  (
p
);

516 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/HardwareSerial.cpp

24 
	~<°dlib.h
>

25 
	~<°dio.h
>

26 
	~<°rög.h
>

27 
	~<öây≥s.h
>

28 
	~"Arduöo.h
"

29 
	~"wúög_¥iv©e.h
"

33 #i‡
deföed
(
UBRRH
Ë|| deföed(
UBRR0H
Ë|| deföed(
UBRR1H
Ë|| deföed(
UBRR2H
Ë|| deföed(
UBRR3H
)

35 
	~"H¨dw¨eSîül.h
"

41 #i‡!
deföed
(
TXC0
)

42 #i‡
deföed
(
TXC
)

43 
	#TXC0
 
TXC


	)

44 #ñi‡
deföed
(
TXC1
)

46 
	#TXC0
 
TXC1


	)

48 #îr‹ 
TXC0
 
nŸ
 
deföabÀ
 
ö
 
H¨dw¨eSîül
.
h


56 #i‡(
RAMEND
 < 1000)

57 
	#SERIAL_BUFFER_SIZE
 16

	)

59 
	#SERIAL_BUFFER_SIZE
 64

	)

62 
	srög_buf„r


64 
	mbuf„r
[
SERIAL_BUFFER_SIZE
];

65 vﬁ©ûê
	mhód
;

66 vﬁ©ûê
	mèû
;

69 #i‡
deföed
(
USBCON
)

70 
rög_buf„r
 
	grx_buf„r
 = { { 0 }, 0, 0};

71 
rög_buf„r
 
	gtx_buf„r
 = { { 0 }, 0, 0};

73 #i‡
deföed
(
UBRRH
Ë|| deföed(
UBRR0H
)

74 
rög_buf„r
 
	grx_buf„r
 = { { 0 }, 0, 0 };

75 
rög_buf„r
 
	gtx_buf„r
 = { { 0 }, 0, 0 };

77 #i‡
deföed
(
UBRR1H
)

78 
rög_buf„r
 
	grx_buf„r1
 = { { 0 }, 0, 0 };

79 
rög_buf„r
 
	gtx_buf„r1
 = { { 0 }, 0, 0 };

81 #i‡
deföed
(
UBRR2H
)

82 
rög_buf„r
 
	grx_buf„r2
 = { { 0 }, 0, 0 };

83 
rög_buf„r
 
	gtx_buf„r2
 = { { 0 }, 0, 0 };

85 #i‡
deföed
(
UBRR3H
)

86 
rög_buf„r
 
	grx_buf„r3
 = { { 0 }, 0, 0 };

87 
rög_buf„r
 
	gtx_buf„r3
 = { { 0 }, 0, 0 };

90 
ölöe
 
	$°‹e_ch¨
(
c
, 
rög_buf„r
 *
buf„r
)

92 
i
 = ()(
buf„r
->
hód
 + 1Ë% 
SERIAL_BUFFER_SIZE
;

98 i‡(
i
 !
buf„r
->
èû
) {

99 
buf„r
->buf„r[buf„r->
hód
] = 
c
;

100 
buf„r
->
hód
 = 
i
;

102 
	}
}

104 #i‡!
deföed
(
USART0_RX_ve˘
Ë&& deföed(
USART1_RX_ve˘
)

107 #i‡!
deföed
(
USART_RX_ve˘
Ë&& !deföed(
SIG_USART0_RECV
) && \

108 !
deföed
(
SIG_UART0_RECV
Ë&& !deföed(
USART0_RX_ve˘
) && \

109 !
	$deföed
(
SIG_UART_RECV
)

112 
	$£rülEvít
(Ë
	`__©åibuã__
((
wók
));

113 
	$£rülEvít
(Ë{
	}
}

114 
	#£rülEvít_im∂emíãd


	)

115 #i‡
deföed
(
USART_RX_ve˘
)

116 
	$SIGNAL
(
USART_RX_ve˘
)

117 #ñi‡
	`deföed
(
SIG_USART0_RECV
)

118 
	$SIGNAL
(
SIG_USART0_RECV
)

119 #ñi‡
	`deföed
(
SIG_UART0_RECV
)

120 
	$SIGNAL
(
SIG_UART0_RECV
)

121 #ñi‡
	`deföed
(
USART0_RX_ve˘
)

122 
	$SIGNAL
(
USART0_RX_ve˘
)

123 #ñi‡
	`deföed
(
SIG_UART_RECV
)

124 
	$SIGNAL
(
SIG_UART_RECV
)

127 #i‡
	`deföed
(
UDR0
)

128 i‡(
	`bô_is_˛ór
(
UCSR0A
, 
UPE0
)) {

129 
c
 = 
UDR0
;

130 
	`°‹e_ch¨
(
c
, &
rx_buf„r
);

132 
c
 = 
UDR0
;

134 #ñi‡
	`deföed
(
UDR
)

135 i‡(
	`bô_is_˛ór
(
UCSRA
, 
PE
)) {

136 
c
 = 
UDR
;

137 
	`°‹e_ch¨
(
c
, &
rx_buf„r
);

139 
c
 = 
UDR
;

142 #îr‹ 
UDR
 
nŸ
 
deföed


144 
	}
}

148 #i‡
deföed
(
USART1_RX_ve˘
)

149 
	$£rülEvít1
(Ë
	`__©åibuã__
((
wók
));

150 
	$£rülEvít1
(Ë{
	}
}

151 
	#£rülEvít1_im∂emíãd


	)

152 
	$SIGNAL
(
USART1_RX_ve˘
)

154 i‡(
	`bô_is_˛ór
(
UCSR1A
, 
UPE1
)) {

155 
c
 = 
UDR1
;

156 
	`°‹e_ch¨
(
c
, &
rx_buf„r1
);

158 
c
 = 
UDR1
;

160 
	}
}

161 #ñi‡
deföed
(
SIG_USART1_RECV
)

162 #îr‹ 
SIG_USART1_RECV


165 #i‡
deföed
(
USART2_RX_ve˘
Ë&& deföed(
UDR2
)

166 
	$£rülEvít2
(Ë
	`__©åibuã__
((
wók
));

167 
	$£rülEvít2
(Ë{
	}
}

168 
	#£rülEvít2_im∂emíãd


	)

169 
	$SIGNAL
(
USART2_RX_ve˘
)

171 i‡(
	`bô_is_˛ór
(
UCSR2A
, 
UPE2
)) {

172 
c
 = 
UDR2
;

173 
	`°‹e_ch¨
(
c
, &
rx_buf„r2
);

175 
c
 = 
UDR2
;

177 
	}
}

178 #ñi‡
deföed
(
SIG_USART2_RECV
)

179 #îr‹ 
SIG_USART2_RECV


182 #i‡
deföed
(
USART3_RX_ve˘
Ë&& deföed(
UDR3
)

183 
	$£rülEvít3
(Ë
	`__©åibuã__
((
wók
));

184 
	$£rülEvít3
(Ë{
	}
}

185 
	#£rülEvít3_im∂emíãd


	)

186 
	$SIGNAL
(
USART3_RX_ve˘
)

188 i‡(
	`bô_is_˛ór
(
UCSR3A
, 
UPE3
)) {

189 
c
 = 
UDR3
;

190 
	`°‹e_ch¨
(
c
, &
rx_buf„r3
);

192 
c
 = 
UDR3
;

194 
	}
}

195 #ñi‡
deföed
(
SIG_USART3_RECV
)

196 #îr‹ 
SIG_USART3_RECV


199 
	$£rülEvítRun
()

201 #ifde‡
£rülEvít_im∂emíãd


202 i‡(
Sîül
.
	`avaûabÀ
()Ë
	`£rülEvít
();

204 #ifde‡
£rülEvít1_im∂emíãd


205 i‡(
Sîül1
.
	`avaûabÀ
()Ë
	`£rülEvít1
();

207 #ifde‡
£rülEvít2_im∂emíãd


208 i‡(
Sîül2
.
	`avaûabÀ
()Ë
	`£rülEvít2
();

210 #ifde‡
£rülEvít3_im∂emíãd


211 i‡(
Sîül3
.
	`avaûabÀ
()Ë
	`£rülEvít3
();

213 
	}
}

216 #i‡!
deföed
(
USART0_UDRE_ve˘
Ë&& deföed(
USART1_UDRE_ve˘
)

219 #i‡!
deföed
(
UART0_UDRE_ve˘
Ë&& !deföed(
UART_UDRE_ve˘
Ë&& !deföed(
USART0_UDRE_ve˘
Ë&& !deföed(
USART_UDRE_ve˘
)

222 #i‡
deföed
(
UART0_UDRE_ve˘
)

223 
	$ISR
(
UART0_UDRE_ve˘
)

224 #ñi‡
	`deföed
(
UART_UDRE_ve˘
)

225 
	$ISR
(
UART_UDRE_ve˘
)

226 #ñi‡
	`deföed
(
USART0_UDRE_ve˘
)

227 
	$ISR
(
USART0_UDRE_ve˘
)

228 #ñi‡
	`deföed
(
USART_UDRE_ve˘
)

229 
	$ISR
(
USART_UDRE_ve˘
)

232 i‡(
tx_buf„r
.
hód
 =tx_buf„r.
èû
) {

234 #i‡
	`deföed
(
UCSR0B
)

235 
	`cbi
(
UCSR0B
, 
UDRIE0
);

237 
	`cbi
(
UCSRB
, 
UDRIE
);

242 
c
 = 
tx_buf„r
.
buf„r
[tx_buf„r.
èû
];

243 
tx_buf„r
.
èû
 = (tx_buf„r.èû + 1Ë% 
SERIAL_BUFFER_SIZE
;

245 #i‡
	`deföed
(
UDR0
)

246 
UDR0
 = 
c
;

247 #ñi‡
	`deföed
(
UDR
)

248 
UDR
 = 
c
;

250 #îr‹ 
UDR
 
nŸ
 
deföed


253 
	}
}

257 #ifde‡
USART1_UDRE_ve˘


258 
	$ISR
(
USART1_UDRE_ve˘
)

260 i‡(
tx_buf„r1
.
hód
 =tx_buf„r1.
èû
) {

262 
	`cbi
(
UCSR1B
, 
UDRIE1
);

266 
c
 = 
tx_buf„r1
.
buf„r
[tx_buf„r1.
èû
];

267 
tx_buf„r1
.
èû
 = (tx_buf„r1.èû + 1Ë% 
SERIAL_BUFFER_SIZE
;

269 
UDR1
 = 
c
;

271 
	}
}

274 #ifde‡
USART2_UDRE_ve˘


275 
	$ISR
(
USART2_UDRE_ve˘
)

277 i‡(
tx_buf„r2
.
hód
 =tx_buf„r2.
èû
) {

279 
	`cbi
(
UCSR2B
, 
UDRIE2
);

283 
c
 = 
tx_buf„r2
.
buf„r
[tx_buf„r2.
èû
];

284 
tx_buf„r2
.
èû
 = (tx_buf„r2.èû + 1Ë% 
SERIAL_BUFFER_SIZE
;

286 
UDR2
 = 
c
;

288 
	}
}

291 #ifde‡
USART3_UDRE_ve˘


292 
	$ISR
(
USART3_UDRE_ve˘
)

294 i‡(
tx_buf„r3
.
hód
 =tx_buf„r3.
èû
) {

296 
	`cbi
(
UCSR3B
, 
UDRIE3
);

300 
c
 = 
tx_buf„r3
.
buf„r
[tx_buf„r3.
èû
];

301 
tx_buf„r3
.
èû
 = (tx_buf„r3.èû + 1Ë% 
SERIAL_BUFFER_SIZE
;

303 
UDR3
 = 
c
;

305 
	}
}

311 
	gH¨dw¨eSîül
::
	$H¨dw¨eSîül
(
rög_buf„r
 *
rx_buf„r
,Ñög_buf„∏*
tx_buf„r
,

312 vﬁ©ûê
uöt8_t
 *
ubºh
, vﬁ©ûêuöt8_à*
ubºl
,

313 vﬁ©ûê
uöt8_t
 *
uc§a
, vﬁ©ûêuöt8_à*
uc§b
,

314 vﬁ©ûê
uöt8_t
 *
uc§c
, vﬁ©ûêuöt8_à*
udr
,

315 
uöt8_t
 
rxí
, uöt8_à
txí
, uöt8_à
rxcõ
, uöt8_à
udrõ
, uöt8_à
u2x
)

317 
_rx_buf„r
 = 
rx_buf„r
;

318 
_tx_buf„r
 = 
tx_buf„r
;

319 
_ubºh
 = 
ubºh
;

320 
_ubºl
 = 
ubºl
;

321 
_uc§a
 = 
uc§a
;

322 
_uc§b
 = 
uc§b
;

323 
_uc§c
 = 
uc§c
;

324 
_udr
 = 
udr
;

325 
_rxí
 = 
rxí
;

326 
_txí
 = 
txí
;

327 
_rxcõ
 = 
rxcõ
;

328 
_udrõ
 = 
udrõ
;

329 
_u2x
 = 
u2x
;

330 
	}
}

334 
	gH¨dw¨eSîül
::
	$begö
(
baud
)

336 
uöt16_t
 
baud_£âög
;

337 
boﬁ
 
u£_u2x
 = 
åue
;

339 #i‡
F_CPU
 == 16000000UL

343 i‡(
baud
 == 57600) {

344 
u£_u2x
 = 
Ál£
;

348 
åy_agaö
:

350 i‡(
u£_u2x
) {

351 *
_uc§a
 = 1 << 
_u2x
;

352 
baud_£âög
 = (
F_CPU
 / 4 / 
baud
 - 1) / 2;

354 *
_uc§a
 = 0;

355 
baud_£âög
 = (
F_CPU
 / 8 / 
baud
 - 1) / 2;

358 i‡((
baud_£âög
 > 4095Ë&& 
u£_u2x
)

360 
u£_u2x
 = 
Ál£
;

361 
åy_agaö
;

365 *
_ubºh
 = 
baud_£âög
 >> 8;

366 *
_ubºl
 = 
baud_£âög
;

368 
å™smôtög
 = 
Ál£
;

370 
	`sbi
(*
_uc§b
, 
_rxí
);

371 
	`sbi
(*
_uc§b
, 
_txí
);

372 
	`sbi
(*
_uc§b
, 
_rxcõ
);

373 
	`cbi
(*
_uc§b
, 
_udrõ
);

374 
	}
}

376 
	gH¨dw¨eSîül
::
	$begö
(
baud
, 
byã
 
c⁄fig
)

378 
uöt16_t
 
baud_£âög
;

379 
uöt8_t
 
cuºít_c⁄fig
;

380 
boﬁ
 
u£_u2x
 = 
åue
;

382 #i‡
F_CPU
 == 16000000UL

386 i‡(
baud
 == 57600) {

387 
u£_u2x
 = 
Ál£
;

391 
åy_agaö
:

393 i‡(
u£_u2x
) {

394 *
_uc§a
 = 1 << 
_u2x
;

395 
baud_£âög
 = (
F_CPU
 / 4 / 
baud
 - 1) / 2;

397 *
_uc§a
 = 0;

398 
baud_£âög
 = (
F_CPU
 / 8 / 
baud
 - 1) / 2;

401 i‡((
baud_£âög
 > 4095Ë&& 
u£_u2x
)

403 
u£_u2x
 = 
Ál£
;

404 
åy_agaö
;

408 *
_ubºh
 = 
baud_£âög
 >> 8;

409 *
_ubºl
 = 
baud_£âög
;

412 #i‡
	`deföed
(
__AVR_ATmega8__
)

413 
c⁄fig
 |= 0x80;

415 *
_uc§c
 = 
c⁄fig
;

417 
	`sbi
(*
_uc§b
, 
_rxí
);

418 
	`sbi
(*
_uc§b
, 
_txí
);

419 
	`sbi
(*
_uc§b
, 
_rxcõ
);

420 
	`cbi
(*
_uc§b
, 
_udrõ
);

421 
	}
}

423 
	gH¨dw¨eSîül
::
	$íd
()

426 
_tx_buf„r
->
hód
 !_tx_buf„r->
èû
)

429 
	`cbi
(*
_uc§b
, 
_rxí
);

430 
	`cbi
(*
_uc§b
, 
_txí
);

431 
	`cbi
(*
_uc§b
, 
_rxcõ
);

432 
	`cbi
(*
_uc§b
, 
_udrõ
);

435 
_rx_buf„r
->
hód
 = _rx_buf„r->
èû
;

436 
	}
}

438 
	gH¨dw¨eSîül
::
	$avaûabÀ
()

440  ()(
SERIAL_BUFFER_SIZE
 + 
_rx_buf„r
->
hód
 - _rx_buf„r->
èû
) % SERIAL_BUFFER_SIZE;

441 
	}
}

443 
	gH¨dw¨eSîül
::
	$≥ek
()

445 i‡(
_rx_buf„r
->
hód
 =_rx_buf„r->
èû
) {

448  
_rx_buf„r
->
buf„r
[_rx_buf„r->
èû
];

450 
	}
}

452 
	gH¨dw¨eSîül
::
	$ªad
()

455 i‡(
_rx_buf„r
->
hód
 =_rx_buf„r->
èû
) {

458 
c
 = 
_rx_buf„r
->
buf„r
[_rx_buf„r->
èû
];

459 
_rx_buf„r
->
èû
 = ()(_rx_buf„r->èû + 1Ë% 
SERIAL_BUFFER_SIZE
;

460  
c
;

462 
	}
}

464 
	gH¨dw¨eSîül
::
	$Êush
()

467 
å™smôtög
 && ! (*
_uc§a
 & 
	`_BV
(
TXC0
)));

468 
å™smôtög
 = 
Ál£
;

469 
	}
}

471 
size_t
 
	gH¨dw¨eSîül
::
	$wrôe
(
uöt8_t
 
c
)

473 
i
 = (
_tx_buf„r
->
hód
 + 1Ë% 
SERIAL_BUFFER_SIZE
;

478 
i
 =
_tx_buf„r
->
èû
)

481 
_tx_buf„r
->
buf„r
[_tx_buf„r->
hód
] = 
c
;

482 
_tx_buf„r
->
hód
 = 
i
;

484 
	`sbi
(*
_uc§b
, 
_udrõ
);

486 
å™smôtög
 = 
åue
;

487 
	`sbi
(*
_uc§a
, 
TXC0
);

490 
	}
}

492 
	gH¨dw¨eSîül
::
›î©‹
 
	$boﬁ
() {

493  
åue
;

494 
	}
}

498 #i‡
deföed
(
UBRRH
Ë&& deföed(
UBRRL
)

499 
H¨dw¨eSîül
 
Sîül
(&
rx_buf„r
, &
tx_buf„r
, &
UBRRH
, &
UBRRL
, &
UCSRA
, &
UCSRB
, &
UCSRC
, &
UDR
, 
RXEN
, 
TXEN
, 
RXCIE
, 
UDRIE
, 
U2X
);

500 #ñi‡
deföed
(
UBRR0H
Ë&& deföed(
UBRR0L
)

501 
H¨dw¨eSîül
 
Sîül
(&
rx_buf„r
, &
tx_buf„r
, &
UBRR0H
, &
UBRR0L
, &
UCSR0A
, &
UCSR0B
, &
UCSR0C
, &
UDR0
, 
RXEN0
, 
TXEN0
, 
RXCIE0
, 
UDRIE0
, 
U2X0
);

502 #ñi‡
deföed
(
USBCON
)

505 #îr‹ 
no
 
£rül
 
p‹t
 
deföed
 (port 0)

508 #i‡
deföed
(
UBRR1H
)

509 
H¨dw¨eSîül
 
Sîül1
(&
rx_buf„r1
, &
tx_buf„r1
, &
UBRR1H
, &
UBRR1L
, &
UCSR1A
, &
UCSR1B
, &
UCSR1C
, &
UDR1
, 
RXEN1
, 
TXEN1
, 
RXCIE1
, 
UDRIE1
, 
U2X1
);

511 #i‡
deföed
(
UBRR2H
)

512 
H¨dw¨eSîül
 
Sîül2
(&
rx_buf„r2
, &
tx_buf„r2
, &
UBRR2H
, &
UBRR2L
, &
UCSR2A
, &
UCSR2B
, &
UCSR2C
, &
UDR2
, 
RXEN2
, 
TXEN2
, 
RXCIE2
, 
UDRIE2
, 
U2X2
);

514 #i‡
deföed
(
UBRR3H
)

515 
H¨dw¨eSîül
 
Sîül3
(&
rx_buf„r3
, &
tx_buf„r3
, &
UBRR3H
, &
UBRR3L
, &
UCSR3A
, &
UCSR3B
, &
UCSR3C
, &
UDR3
, 
RXEN3
, 
TXEN3
, 
RXCIE3
, 
UDRIE3
, 
U2X3
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/HardwareSerial.h

23 #i‚de‡
H¨dw¨eSîül_h


24 
	#H¨dw¨eSîül_h


	)

26 
	~<öây≥s.h
>

28 
	~"Såóm.h
"

30 
	grög_buf„r
;

32 ˛as†
	cH¨dw¨eSîül
 : 
public
 
Såóm


34 
¥iv©e
:

35 
rög_buf„r
 *
_rx_buf„r
;

36 
rög_buf„r
 *
	m_tx_buf„r
;

37 vﬁ©ûê
uöt8_t
 *
	m_ubºh
;

38 vﬁ©ûê
uöt8_t
 *
	m_ubºl
;

39 vﬁ©ûê
uöt8_t
 *
	m_uc§a
;

40 vﬁ©ûê
uöt8_t
 *
	m_uc§b
;

41 vﬁ©ûê
uöt8_t
 *
	m_uc§c
;

42 vﬁ©ûê
uöt8_t
 *
	m_udr
;

43 
uöt8_t
 
	m_rxí
;

44 
uöt8_t
 
	m_txí
;

45 
uöt8_t
 
	m_rxcõ
;

46 
uöt8_t
 
	m_udrõ
;

47 
uöt8_t
 
	m_u2x
;

48 
boﬁ
 
	må™smôtög
;

49 
	mpublic
:

50 
H¨dw¨eSîül
(
rög_buf„r
 *
rx_buf„r
,Ñög_buf„∏*
tx_buf„r
,

51 vﬁ©ûê
uöt8_t
 *
ubºh
, vﬁ©ûêuöt8_à*
ubºl
,

52 vﬁ©ûê
uöt8_t
 *
uc§a
, vﬁ©ûêuöt8_à*
uc§b
,

53 vﬁ©ûê
uöt8_t
 *
uc§c
, vﬁ©ûêuöt8_à*
udr
,

54 
uöt8_t
 
rxí
, uöt8_à
txí
, uöt8_à
rxcõ
, uöt8_à
udrõ
, uöt8_à
u2x
);

55 
begö
();

56 
begö
(, 
uöt8_t
);

57 
íd
();

58 
vútuÆ
 
avaûabÀ
();

59 
vútuÆ
 
≥ek
();

60 
vútuÆ
 
ªad
();

61 
vútuÆ
 
Êush
();

62 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
);

63 
ölöe
 
size_t
 
	$wrôe
(
n
Ë{  
	`wrôe
((
uöt8_t
)n); }

64 
ölöe
 
size_t
 
	$wrôe
(
n
Ë{  
	`wrôe
((
uöt8_t
Í); 
	}
}

65 
ölöe
 
size_t
 
	$wrôe
(
n
Ë{  
	`wrôe
((
uöt8_t
Í); 
	}
}

66 
ölöe
 
size_t
 
	$wrôe
(
n
Ë{  
	`wrôe
((
uöt8_t
Í); 
	}
}

67 
usög
 
	gPröt
::
wrôe
;

68 
›î©‹
 
boﬁ
();

72 
	#SERIAL_5N1
 0x00

	)

73 
	#SERIAL_6N1
 0x02

	)

74 
	#SERIAL_7N1
 0x04

	)

75 
	#SERIAL_8N1
 0x06

	)

76 
	#SERIAL_5N2
 0x08

	)

77 
	#SERIAL_6N2
 0x0A

	)

78 
	#SERIAL_7N2
 0x0C

	)

79 
	#SERIAL_8N2
 0x0E

	)

80 
	#SERIAL_5E1
 0x20

	)

81 
	#SERIAL_6E1
 0x22

	)

82 
	#SERIAL_7E1
 0x24

	)

83 
	#SERIAL_8E1
 0x26

	)

84 
	#SERIAL_5E2
 0x28

	)

85 
	#SERIAL_6E2
 0x2A

	)

86 
	#SERIAL_7E2
 0x2C

	)

87 
	#SERIAL_8E2
 0x2E

	)

88 
	#SERIAL_5O1
 0x30

	)

89 
	#SERIAL_6O1
 0x32

	)

90 
	#SERIAL_7O1
 0x34

	)

91 
	#SERIAL_8O1
 0x36

	)

92 
	#SERIAL_5O2
 0x38

	)

93 
	#SERIAL_6O2
 0x3A

	)

94 
	#SERIAL_7O2
 0x3C

	)

95 
	#SERIAL_8O2
 0x3E

	)

97 #i‡
deföed
(
UBRRH
Ë|| deföed(
UBRR0H
)

98 
H¨dw¨eSîül
 
Sîül
;

99 #ñi‡
deföed
(
USBCON
)

100 
	~"USBAPI.h
"

103 #i‡
deföed
(
UBRR1H
)

104 
H¨dw¨eSîül
 
Sîül1
;

106 #i‡
deföed
(
UBRR2H
)

107 
H¨dw¨eSîül
 
Sîül2
;

109 #i‡
deföed
(
UBRR3H
)

110 
H¨dw¨eSîül
 
Sîül3
;

113 
	$£rülEvítRun
(Ë
	`__©åibuã__
((
wók
));

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/IPAddress.cpp

2 
	~<Arduöo.h
>

3 
	~<IPAddªss.h
>

5 
	gIPAddªss
::
	$IPAddªss
()

7 
	`mem£t
(
_addªss
, 0, (_address));

8 
	}
}

10 
	gIPAddªss
::
	$IPAddªss
(
uöt8_t
 
fú°_o˘ë
, uöt8_à
£c⁄d_o˘ë
, uöt8_à
thúd_o˘ë
, uöt8_à
fouπh_o˘ë
)

12 
_addªss
[0] = 
fú°_o˘ë
;

13 
_addªss
[1] = 
£c⁄d_o˘ë
;

14 
_addªss
[2] = 
thúd_o˘ë
;

15 
_addªss
[3] = 
fouπh_o˘ë
;

16 
	}
}

18 
	gIPAddªss
::
	$IPAddªss
(
uöt32_t
 
addªss
)

20 
	`mem˝y
(
_addªss
, &
addªss
, (_address));

21 
	}
}

23 
	gIPAddªss
::
	$IPAddªss
(c⁄° 
uöt8_t
 *
addªss
)

25 
	`mem˝y
(
_addªss
, 
addªss
, (_address));

26 
	}
}

28 
	gIPAddªss
& IPAddªss::
›î©‹
=(c⁄° 
uöt8_t
 *
addªss
)

30 
mem˝y
(
_addªss
, 
addªss
, (_address));

31  *
	gthis
;

34 
	gIPAddªss
& IPAddªss::
›î©‹
=(
uöt32_t
 
addªss
)

36 
mem˝y
(
_addªss
, (c⁄° 
uöt8_t
 *)&
addªss
, (_address));

37  *
	gthis
;

40 
boﬁ
 
	gIPAddªss
::
›î©‹
==(c⁄° 
uöt8_t
* 
addr
)

42  
memcmp
(
addr
, 
_addªss
, (_address)) == 0;

45 
size_t
 
	gIPAddªss
::
	$¥ötTo
(
Pröt
& 
p
) const

47 
size_t
 
n
 = 0;

48 
i
 =0; i < 3; i++)

50 
n
 +
p
.
	`¥öt
(
_addªss
[
i
], 
DEC
);

51 
n
 +
p
.
	`¥öt
('.');

53 
n
 +
p
.
	`¥öt
(
_addªss
[3], 
DEC
);

54  
n
;

55 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/IPAddress.h

26 #i‚de‡
IPAddªss_h


27 
	#IPAddªss_h


	)

29 
	~<PröèbÀ.h
>

33 ˛as†
	cIPAddªss
 : 
public
 
PröèbÀ
 {

34 
¥iv©e
:

35 
uöt8_t
 
_addªss
[4];

40 
uöt8_t
* 
	$øw_addªss
(Ë{  
_addªss
; };

42 
public
:

44 
	`IPAddªss
();

45 
	`IPAddªss
(
uöt8_t
 
fú°_o˘ë
, uöt8_à
£c⁄d_o˘ë
, uöt8_à
thúd_o˘ë
, uöt8_à
fouπh_o˘ë
);

46 
	`IPAddªss
(
uöt32_t
 
addªss
);

47 
	`IPAddªss
(c⁄° 
uöt8_t
 *
addªss
);

51 
›î©‹
 
	$uöt32_t
(Ë{  *((
uöt32_t
*)
_addªss
); 
	}
};

52 
boﬁ
 
	g›î©‹
==(c⁄° 
IPAddªss
& 
addr
Ë{  (*((
uöt32_t
*)
_addªss
)) == (*((uint32_t*)addr._address)); };

53 
boﬁ
 
	g›î©‹
==(c⁄° 
uöt8_t
* 
addr
);

56 
uöt8_t
 
	g›î©‹
[](
	gödex
Ëc⁄° {  
	g_addªss
[
ödex
]; };

57 
	guöt8_t
& 
	g›î©‹
[](
	gödex
Ë{  
	g_addªss
[
ödex
]; };

60 
	gIPAddªss
& 
	g›î©‹
=(c⁄° 
uöt8_t
 *
addªss
);

61 
	gIPAddªss
& 
	g›î©‹
=(
uöt32_t
 
addªss
);

63 
vútuÆ
 
size_t
 
	$¥ötTo
(
Pröt
& 
p
) const;

65 
‰õnd
 
˛ass
 
Ethî√tCœss
;

66 
‰õnd
 
˛ass
 
UDP
;

67 
‰õnd
 
˛ass
 
Clõ¡
;

68 
‰õnd
 
˛ass
 
Sîvî
;

69 
‰õnd
 
˛ass
 
Dh˝Cœss
;

70 
‰õnd
 
˛ass
 
DNSClõ¡
;

71 
	}
};

73 c⁄° 
IPAddªss
 
INADDR_NONE
(0,0,0,0);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/Platform.h

2 #i‚de‡
__PLATFORM_H__


3 
	#__PLATFORM_H__


	)

5 
	~<öây≥s.h
>

6 
	~<avr/pgm•a˚.h
>

7 
	~<avr/ì¥om.h
>

8 
	~<avr/öãºu±.h
>

9 
	~<utû/dñay.h
>

11 
	tu8
;

12 
	tu16
;

13 
	tu32
;

15 
	~"Arduöo.h
"

17 #i‡
deföed
(
USBCON
)

18 
	~"USBDesc.h
"

19 
	~"USBC‹e.h
"

20 
	~"USBAPI.h
"

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/Print.cpp

22 
	~<°dlib.h
>

23 
	~<°dio.h
>

24 
	~<°rög.h
>

25 
	~<m©h.h
>

26 
	~"Arduöo.h
"

28 
	~"Pröt.h
"

33 
size_t
 
	gPröt
::
	$wrôe
(c⁄° 
uöt8_t
 *
buf„r
, 
size_t
 
size
)

35 
size_t
 
n
 = 0;

36 
size
--) {

37 
n
 +
	`wrôe
(*
buf„r
++);

39  
n
;

40 
	}
}

42 
size_t
 
	gPröt
::
	$¥öt
(c⁄° 
__FœshSåögHñ≥r
 *
ifsh
)

44 c⁄° 
PROGMEM
 *
p
 = (c⁄° PROGMEM *)
ifsh
;

45 
size_t
 
n
 = 0;

47 
c
 = 
	`pgm_ªad_byã
(
p
++);

48 i‡(
c
 == 0) ;

49 
n
 +
	`wrôe
(
c
);

51  
n
;

52 
	}
}

54 
size_t
 
	gPröt
::
	$¥öt
(c⁄° 
Såög
 &
s
)

56 
size_t
 
n
 = 0;

57 
uöt16_t
 
i
 = 0; i < 
s
.
	`Àngth
(); i++) {

58 
n
 +
	`wrôe
(
s
[
i
]);

60  
n
;

61 
	}
}

63 
size_t
 
	gPröt
::
	$¥öt
(c⁄° 
°r
[])

65  
	`wrôe
(
°r
);

66 
	}
}

68 
size_t
 
	gPröt
::
	$¥öt
(
c
)

70  
	`wrôe
(
c
);

71 
	}
}

73 
size_t
 
	gPröt
::
	$¥öt
(
b
, 
ba£
)

75  
	`¥öt
((Ë
b
, 
ba£
);

76 
	}
}

78 
size_t
 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

80  
	`¥öt
((Ë
n
, 
ba£
);

81 
	}
}

83 
size_t
 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

85  
	`¥öt
((Ë
n
, 
ba£
);

86 
	}
}

88 
size_t
 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

90 i‡(
ba£
 == 0) {

91  
	`wrôe
(
n
);

92 } i‡(
ba£
 == 10) {

93 i‡(
n
 < 0) {

94 
t
 = 
	`¥öt
('-');

95 
n
 = -n;

96  
	`¥ötNumbî
(
n
, 10Ë+ 
t
;

98  
	`¥ötNumbî
(
n
, 10);

100  
	`¥ötNumbî
(
n
, 
ba£
);

102 
	}
}

104 
size_t
 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

106 i‡(
ba£
 =0Ë 
	`wrôe
(
n
);

107  
	`¥ötNumbî
(
n
, 
ba£
);

108 
	}
}

110 
size_t
 
	gPröt
::
	$¥öt
(
n
, 
digôs
)

112  
	`¥ötFlﬂt
(
n
, 
digôs
);

113 
	}
}

115 
size_t
 
	gPröt
::
	$¥öén
(c⁄° 
__FœshSåögHñ≥r
 *
ifsh
)

117 
size_t
 
n
 = 
	`¥öt
(
ifsh
);

118 
n
 +
	`¥öén
();

119  
n
;

120 
	}
}

122 
size_t
 
	gPröt
::
	$¥öt
(c⁄° 
PröèbÀ
& 
x
)

124  
x
.
	`¥ötTo
(*
this
);

125 
	}
}

127 
size_t
 
	gPröt
::
	$¥öén
()

129 
size_t
 
n
 = 
	`¥öt
('\r');

130 
n
 +
	`¥öt
('\n');

131  
n
;

132 
	}
}

134 
size_t
 
	gPröt
::
	$¥öén
(c⁄° 
Såög
 &
s
)

136 
size_t
 
n
 = 
	`¥öt
(
s
);

137 
n
 +
	`¥öén
();

138  
n
;

139 
	}
}

141 
size_t
 
	gPröt
::
	$¥öén
(c⁄° 
c
[])

143 
size_t
 
n
 = 
	`¥öt
(
c
);

144 
n
 +
	`¥öén
();

145  
n
;

146 
	}
}

148 
size_t
 
	gPröt
::
	$¥öén
(
c
)

150 
size_t
 
n
 = 
	`¥öt
(
c
);

151 
n
 +
	`¥öén
();

152  
n
;

153 
	}
}

155 
size_t
 
	gPröt
::
	$¥öén
(
b
, 
ba£
)

157 
size_t
 
n
 = 
	`¥öt
(
b
, 
ba£
);

158 
n
 +
	`¥öén
();

159  
n
;

160 
	}
}

162 
size_t
 
	gPröt
::
	$¥öén
(
num
, 
ba£
)

164 
size_t
 
n
 = 
	`¥öt
(
num
, 
ba£
);

165 
n
 +
	`¥öén
();

166  
n
;

167 
	}
}

169 
size_t
 
	gPröt
::
	$¥öén
(
num
, 
ba£
)

171 
size_t
 
n
 = 
	`¥öt
(
num
, 
ba£
);

172 
n
 +
	`¥öén
();

173  
n
;

174 
	}
}

176 
size_t
 
	gPröt
::
	$¥öén
(
num
, 
ba£
)

178 
size_t
 
n
 = 
	`¥öt
(
num
, 
ba£
);

179 
n
 +
	`¥öén
();

180  
n
;

181 
	}
}

183 
size_t
 
	gPröt
::
	$¥öén
(
num
, 
ba£
)

185 
size_t
 
n
 = 
	`¥öt
(
num
, 
ba£
);

186 
n
 +
	`¥öén
();

187  
n
;

188 
	}
}

190 
size_t
 
	gPröt
::
	$¥öén
(
num
, 
digôs
)

192 
size_t
 
n
 = 
	`¥öt
(
num
, 
digôs
);

193 
n
 +
	`¥öén
();

194  
n
;

195 
	}
}

197 
size_t
 
	gPröt
::
	$¥öén
(c⁄° 
PröèbÀ
& 
x
)

199 
size_t
 
n
 = 
	`¥öt
(
x
);

200 
n
 +
	`¥öén
();

201  
n
;

202 
	}
}

206 
size_t
 
	gPröt
::
	$¥ötNumbî
(
n
, 
uöt8_t
 
ba£
) {

207 
buf
[8 * () + 1];

208 *
°r
 = &
buf
[(buf) - 1];

210 *
°r
 = '\0';

213 i‡(
ba£
 < 2) base = 10;

216 
m
 = 
n
;

217 
n
 /
ba£
;

218 
c
 = 
m
 - 
ba£
 * 
n
;

219 *--
°r
 = 
c
 < 10 ? c + '0' : c + 'A' - 10;

220 } 
n
);

222  
	`wrôe
(
°r
);

223 
	}
}

225 
size_t
 
	gPröt
::
	$¥ötFlﬂt
(
numbî
, 
uöt8_t
 
digôs
)

227 
size_t
 
n
 = 0;

229 i‡(
	`i¢™
(
numbî
)Ë 
	`¥öt
("nan");

230 i‡(
	`isöf
(
numbî
)Ë 
	`¥öt
("inf");

231 i‡(
numbî
 > 4294967040.0Ë 
	`¥öt
 ("ovf");

232 i‡(
numbî
 <-4294967040.0Ë 
	`¥öt
 ("ovf");

235 i‡(
numbî
 < 0.0)

237 
n
 +
	`¥öt
('-');

238 
numbî
 = -number;

242 
roundög
 = 0.5;

243 
uöt8_t
 
i
=0; i<
digôs
; ++i)

244 
roundög
 /= 10.0;

246 
numbî
 +
roundög
;

249 
öt_∑π
 = ()
numbî
;

250 
ªmaödî
 = 
numbî
 - ()
öt_∑π
;

251 
n
 +
	`¥öt
(
öt_∑π
);

254 i‡(
digôs
 > 0) {

255 
n
 +
	`¥öt
(".");

259 
digôs
-- > 0)

261 
ªmaödî
 *= 10.0;

262 
toPröt
 = (
ªmaödî
);

263 
n
 +
	`¥öt
(
toPröt
);

264 
ªmaödî
 -
toPröt
;

267  
n
;

268 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/Print.h

20 #i‚de‡
Pröt_h


21 
	#Pröt_h


	)

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

26 
	~"WSåög.h
"

27 
	~"PröèbÀ.h
"

29 
	#DEC
 10

	)

30 
	#HEX
 16

	)

31 
	#OCT
 8

	)

32 
	#BIN
 2

	)

34 ˛as†
	cPröt


36 
	m¥iv©e
:

37 
wrôe_îr‹
;

38 
size_t
 
¥ötNumbî
(, 
uöt8_t
);

39 
size_t
 
¥ötFlﬂt
(, 
uöt8_t
);

40 
	m¥Ÿe˘ed
:

41 
	$£tWrôeEº‹
(
îr
 = 1Ë{ 
wrôe_îr‹
 =Érr; }

42 
public
:

43 
	$Pröt
(Ë: 
	$wrôe_îr‹
(0Ë{
	}
}

45 
	$gëWrôeEº‹
(Ë{  
wrôe_îr‹
; 
	}
}

46 
	$˛órWrôeEº‹
(Ë{ 
	`£tWrôeEº‹
(0); 
	}
}

48 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
) = 0;

49 
size_t
 
	$wrôe
(c⁄° *
°r
) {

50 i‡(
°r
 =
NULL
)  0;

51  
	`wrôe
((c⁄° 
uöt8_t
 *)
°r
, 
	`°æí
(str));

52 
	}
}

53 
vútuÆ
 
size_t
 
wrôe
(c⁄° 
uöt8_t
 *
buf„r
, size_à
size
);

55 
size_t
 
¥öt
(c⁄° 
__FœshSåögHñ≥r
 *);

56 
size_t
 
¥öt
(c⁄° 
Såög
 &);

57 
size_t
 
¥öt
(const []);

58 
size_t
 
¥öt
();

59 
size_t
 
¥öt
(, 
DEC
);

60 
size_t
 
¥öt
(, 
DEC
);

61 
size_t
 
¥öt
(, 
DEC
);

62 
size_t
 
¥öt
(, 
DEC
);

63 
size_t
 
¥öt
(, 
DEC
);

64 
size_t
 
¥öt
(, = 2);

65 
size_t
 
¥öt
(c⁄° 
PröèbÀ
&);

67 
size_t
 
¥öén
(c⁄° 
__FœshSåögHñ≥r
 *);

68 
size_t
 
¥öén
(c⁄° 
Såög
 &
s
);

69 
size_t
 
¥öén
(const []);

70 
size_t
 
¥öén
();

71 
size_t
 
¥öén
(, 
DEC
);

72 
size_t
 
¥öén
(, 
DEC
);

73 
size_t
 
¥öén
(, 
DEC
);

74 
size_t
 
¥öén
(, 
DEC
);

75 
size_t
 
¥öén
(, 
DEC
);

76 
size_t
 
¥öén
(, = 2);

77 
size_t
 
¥öén
(c⁄° 
PröèbÀ
&);

78 
size_t
 
¥öén
();

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/Printable.h

20 #i‚de‡
PröèbÀ_h


21 
	#PröèbÀ_h


	)

23 
	~<√w.h
>

25 
˛ass
 
	gPröt
;

33 ˛as†
	cPröèbÀ


35 
	mpublic
:

36 
vútuÆ
 
size_t
 
	$¥ötTo
(
Pröt
& 
p
) const = 0;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/Server.h

1 #i‚de‡
£rvî_h


2 
	#£rvî_h


	)

4 ˛as†
	cSîvî
 : 
public
 
Pröt
 {

5 
public
:

6 
vútuÆ
 
begö
() =0;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/Stream.cpp

23 
	~"Arduöo.h
"

24 
	~"Såóm.h
"

26 
	#PARSE_TIMEOUT
 1000

27 
	#NO_SKIP_CHAR
 1

28 

	)

30 
	gSåóm
::
	$timedRód
()

32 
c
;

33 
_°¨tMûlis
 = 
	`mûlis
();

35 
c
 = 
	`ªad
();

36 i‡(
c
 >= 0)  c;

37 } 
	`mûlis
(Ë- 
_°¨tMûlis
 < 
_timeout
);

39 
	}
}

42 
	gSåóm
::
	$timedPìk
()

44 
c
;

45 
_°¨tMûlis
 = 
	`mûlis
();

47 
c
 = 
	`≥ek
();

48 i‡(
c
 >= 0)  c;

49 } 
	`mûlis
(Ë- 
_°¨tMûlis
 < 
_timeout
);

51 
	}
}

55 
	gSåóm
::
	$≥ekNextDigô
()

57 
c
;

59 
c
 = 
	`timedPìk
();

60 i‡(
c
 < 0)  c;

61 i‡(
c
 == '-')  c;

62 i‡(
c
 >= '0' && c <= '9')  c;

63 
	`ªad
();

65 
	}
}

70 
	gSåóm
::
	$£tTimeout
(
timeout
)

72 
_timeout
 = 
timeout
;

73 
	}
}

76 
boﬁ
 
	gSåóm
::
	$föd
(*
èrgë
)

78  
	`födU¡û
(
èrgë
, 
NULL
);

79 
	}
}

83 
boﬁ
 
	gSåóm
::
	$föd
(*
èrgë
, 
size_t
 
Àngth
)

85  
	`födU¡û
(
èrgë
, 
Àngth
, 
NULL
, 0);

86 
	}
}

89 
boﬁ
 
	gSåóm
::
	$födU¡û
(*
èrgë
, *
ãrmö©‹
)

91  
	`födU¡û
(
èrgë
, 
	`°æí
—¨gë), 
ãrmö©‹
, strlen(terminator));

92 
	}
}

97 
boﬁ
 
	gSåóm
::
	$födU¡û
(*
èrgë
, 
size_t
 
èrgëLí
, *
ãrmö©‹
, size_à
ãrmLí
)

99 
size_t
 
ödex
 = 0;

100 
size_t
 
ãrmIndex
 = 0;

101 
c
;

103 if–*
èrgë
 == 0)

104  
åue
;

105  (
c
 = 
	`timedRód
()) > 0){

107 if(
c
 !
èrgë
[
ödex
])

108 
ödex
 = 0;

110 if–
c
 =
èrgë
[
ödex
]){

112 if(++
ödex
 >
èrgëLí
){

113  
åue
;

117 if(
ãrmLí
 > 0 && 
c
 =
ãrmö©‹
[
ãrmIndex
]){

118 if(++
ãrmIndex
 >
ãrmLí
)

119  
Ál£
;

122 
ãrmIndex
 = 0;

124  
Ál£
;

125 
	}
}

131 
	gSåóm
::
	$∑r£I¡
()

133  
	`∑r£I¡
(
NO_SKIP_CHAR
);

134 
	}
}

138 
	gSåóm
::
	$∑r£I¡
(
skùCh¨
)

140 
boﬁón
 
isNeg©ive
 = 
Ál£
;

141 
vÆue
 = 0;

142 
c
;

144 
c
 = 
	`≥ekNextDigô
();

146 if(
c
 < 0)

150 if(
c
 =
skùCh¨
)

152 if(
c
 == '-')

153 
isNeg©ive
 = 
åue
;

154 if(
c
 >= '0' && c <= '9')

155 
vÆue
 = vÆuê* 10 + 
c
 - '0';

156 
	`ªad
();

157 
c
 = 
	`timedPìk
();

159  (
c
 >'0' && c <'9'Ë|| c =
skùCh¨
 );

161 if(
isNeg©ive
)

162 
vÆue
 = -value;

163  
vÆue
;

164 
	}
}

168 
	gSåóm
::
	$∑r£Flﬂt
()

170  
	`∑r£Flﬂt
(
NO_SKIP_CHAR
);

171 
	}
}

175 
	gSåóm
::
	$∑r£Flﬂt
(
skùCh¨
){

176 
boﬁón
 
isNeg©ive
 = 
Ál£
;

177 
boﬁón
 
isFø˘i⁄
 = 
Ál£
;

178 
vÆue
 = 0;

179 
c
;

180 
‰a˘i⁄
 = 1.0;

182 
c
 = 
	`≥ekNextDigô
();

184 if(
c
 < 0)

188 if(
c
 =
skùCh¨
)

190 if(
c
 == '-')

191 
isNeg©ive
 = 
åue
;

192 i‡(
c
 == '.')

193 
isFø˘i⁄
 = 
åue
;

194 if(
c
 >= '0' && c <= '9') {

195 
vÆue
 = vÆuê* 10 + 
c
 - '0';

196 if(
isFø˘i⁄
)

197 
‰a˘i⁄
 *= 0.1;

199 
	`ªad
();

200 
c
 = 
	`timedPìk
();

202  (
c
 >'0' && c <'9'Ë|| c ='.' || c =
skùCh¨
 );

204 if(
isNeg©ive
)

205 
vÆue
 = -value;

206 if(
isFø˘i⁄
)

207  
vÆue
 * 
‰a˘i⁄
;

209  
vÆue
;

210 
	}
}

217 
size_t
 
	gSåóm
::
	$ªadByãs
(*
buf„r
, 
size_t
 
Àngth
)

219 
size_t
 
cou¡
 = 0;

220 
cou¡
 < 
Àngth
) {

221 
c
 = 
	`timedRód
();

222 i‡(
c
 < 0) ;

223 *
buf„r
++ = ()
c
;

224 
cou¡
++;

226  
cou¡
;

227 
	}
}

234 
size_t
 
	gSåóm
::
	$ªadByãsU¡û
(
ãrmö©‹
, *
buf„r
, 
size_t
 
Àngth
)

236 i‡(
Àngth
 < 1)  0;

237 
size_t
 
ödex
 = 0;

238 
ödex
 < 
Àngth
) {

239 
c
 = 
	`timedRód
();

240 i‡(
c
 < 0 || c =
ãrmö©‹
) ;

241 *
buf„r
++ = ()
c
;

242 
ödex
++;

244  
ödex
;

245 
	}
}

247 
Såög
 
	gSåóm
::
	$ªadSåög
()

249 
Såög
 
ªt
;

250 
c
 = 
	`timedRód
();

251 
c
 >= 0)

253 
ªt
 +()
c
;

254 
c
 = 
	`timedRód
();

256  
ªt
;

257 
	}
}

259 
Såög
 
	gSåóm
::
	$ªadSåögU¡û
(
ãrmö©‹
)

261 
Såög
 
ªt
;

262 
c
 = 
	`timedRód
();

263 
c
 >0 && c !
ãrmö©‹
)

265 
ªt
 +()
c
;

266 
c
 = 
	`timedRód
();

268  
ªt
;

269 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/Stream.h

22 #i‚de‡
Såóm_h


23 
	#Såóm_h


	)

25 
	~<öây≥s.h
>

26 
	~"Pröt.h
"

38 ˛as†
	cSåóm
 : 
public
 
Pröt


40 
¥iv©e
:

41 
_timeout
;

42 
	m_°¨tMûlis
;

43 
timedRód
();

44 
timedPìk
();

45 
≥ekNextDigô
();

47 
	mpublic
:

48 
vútuÆ
 
avaûabÀ
() = 0;

49 
vútuÆ
 
ªad
() = 0;

50 
vútuÆ
 
≥ek
() = 0;

51 
vútuÆ
 
Êush
() = 0;

53 
	$Såóm
(Ë{
_timeout
=1000;}

57 
	`£tTimeout
(
timeout
);

59 
boﬁ
 
	`föd
(*
èrgë
);

62 
boﬁ
 
	`föd
(*
èrgë
, 
size_t
 
Àngth
);

65 
boﬁ
 
	`födU¡û
(*
èrgë
, *
ãrmö©‹
);

67 
boﬁ
 
	`födU¡û
(*
èrgë
, 
size_t
 
èrgëLí
, *
ãrmö©e
, size_à
ãrmLí
);

70 
	`∑r£I¡
();

74 
	`∑r£Flﬂt
();

76 
size_t
 
	`ªadByãs
–*
buf„r
, size_à
Àngth
);

80 
size_t
 
	`ªadByãsU¡û
–
ãrmö©‹
, *
buf„r
, size_à
Àngth
);

85 
Såög
 
	`ªadSåög
();

86 
Såög
 
	`ªadSåögU¡û
(
ãrmö©‹
);

88 
¥Ÿe˘ed
:

89 
	`∑r£I¡
(
skùCh¨
);

93 
	`∑r£Flﬂt
(
skùCh¨
);

94 
	}
};

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/Tone.cpp

35 
	~<avr/öãºu±.h
>

36 
	~<avr/pgm•a˚.h
>

37 
	~"Arduöo.h
"

38 
	~"pös_¨duöo.h
"

40 #i‡
deföed
(
__AVR_ATmega8__
Ë|| deföed(
__AVR_ATmega128__
)

41 
	#TCCR2A
 
TCCR2


	)

42 
	#TCCR2B
 
TCCR2


	)

43 
	#COM2A1
 
COM21


	)

44 
	#COM2A0
 
COM20


	)

45 
	#OCR2A
 
OCR2


	)

46 
	#TIMSK2
 
TIMSK


	)

47 
	#OCIE2A
 
OCIE2


	)

48 
	#TIMER2_COMPA_ve˘
 
TIMER2_COMP_ve˘


	)

49 
	#TIMSK1
 
TIMSK


	)

57 #i‡!
deföed
(
__AVR_ATmega8__
)

58 vﬁ©ûê
	gtimî0_toggÀ_cou¡
;

59 vﬁ©ûê
uöt8_t
 *
	gtimî0_pö_p‹t
;

60 vﬁ©ûê
uöt8_t
 
	gtimî0_pö_mask
;

63 vﬁ©ûê
	gtimî1_toggÀ_cou¡
;

64 vﬁ©ûê
uöt8_t
 *
	gtimî1_pö_p‹t
;

65 vﬁ©ûê
uöt8_t
 
	gtimî1_pö_mask
;

66 vﬁ©ûê
	gtimî2_toggÀ_cou¡
;

67 vﬁ©ûê
uöt8_t
 *
	gtimî2_pö_p‹t
;

68 vﬁ©ûê
uöt8_t
 
	gtimî2_pö_mask
;

70 #i‡
deföed
(
TIMSK3
)

71 vﬁ©ûê
	gtimî3_toggÀ_cou¡
;

72 vﬁ©ûê
uöt8_t
 *
	gtimî3_pö_p‹t
;

73 vﬁ©ûê
uöt8_t
 
	gtimî3_pö_mask
;

76 #i‡
deföed
(
TIMSK4
)

77 vﬁ©ûê
	gtimî4_toggÀ_cou¡
;

78 vﬁ©ûê
uöt8_t
 *
	gtimî4_pö_p‹t
;

79 vﬁ©ûê
uöt8_t
 
	gtimî4_pö_mask
;

82 #i‡
deföed
(
TIMSK5
)

83 vﬁ©ûê
	gtimî5_toggÀ_cou¡
;

84 vﬁ©ûê
uöt8_t
 *
	gtimî5_pö_p‹t
;

85 vﬁ©ûê
uöt8_t
 
	gtimî5_pö_mask
;

89 #i‡
deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega2560__
)

91 
	#AVAILABLE_TONE_PINS
 1

	)

92 
	#USE_TIMER2


	)

94 c⁄° 
uöt8_t
 
PROGMEM
 
	gt⁄e_pö_to_timî_PGM
[] = { 2 };

95 
uöt8_t
 
	gt⁄e_pös
[
AVAILABLE_TONE_PINS
] = { 255 };

97 #ñi‡
deföed
(
__AVR_ATmega8__
)

99 
	#AVAILABLE_TONE_PINS
 1

	)

100 
	#USE_TIMER2


	)

102 c⁄° 
uöt8_t
 
PROGMEM
 
	gt⁄e_pö_to_timî_PGM
[] = { 2 };

103 
uöt8_t
 
	gt⁄e_pös
[
AVAILABLE_TONE_PINS
] = { 255 };

105 #ñi‡
deföed
(
__AVR_ATmega32U4__
)

107 
	#AVAILABLE_TONE_PINS
 1

	)

108 
	#USE_TIMER3


	)

110 c⁄° 
uöt8_t
 
PROGMEM
 
	gt⁄e_pö_to_timî_PGM
[] = { 3 };

111 
uöt8_t
 
	gt⁄e_pös
[
AVAILABLE_TONE_PINS
] = { 255 };

115 
	#AVAILABLE_TONE_PINS
 1

	)

116 
	#USE_TIMER2


	)

119 c⁄° 
uöt8_t
 
PROGMEM
 
	gt⁄e_pö_to_timî_PGM
[] = { 2 };

120 
uöt8_t
 
	gt⁄e_pös
[
AVAILABLE_TONE_PINS
] = { 255 };

126 
öt8_t
 
	$t⁄eBegö
(
uöt8_t
 
_pö
)

128 
öt8_t
 
_timî
 = -1;

131 
i
 = 0; i < 
AVAILABLE_TONE_PINS
; i++) {

132 i‡(
t⁄e_pös
[
i
] =
_pö
) {

133  
	`pgm_ªad_byã
(
t⁄e_pö_to_timî_PGM
 + 
i
);

138 
i
 = 0; i < 
AVAILABLE_TONE_PINS
; i++) {

139 i‡(
t⁄e_pös
[
i
] == 255) {

140 
t⁄e_pös
[
i
] = 
_pö
;

141 
_timî
 = 
	`pgm_ªad_byã
(
t⁄e_pö_to_timî_PGM
 + 
i
);

146 i‡(
_timî
 != -1)

152 
_timî
)

154 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
TCCR0B
)

157 
TCCR0A
 = 0;

158 
TCCR0B
 = 0;

159 
	`bôWrôe
(
TCCR0A
, 
WGM01
, 1);

160 
	`bôWrôe
(
TCCR0B
, 
CS00
, 1);

161 
timî0_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

162 
timî0_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

166 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
TCCR1B
Ë&& deföed(
WGM12
)

169 
TCCR1A
 = 0;

170 
TCCR1B
 = 0;

171 
	`bôWrôe
(
TCCR1B
, 
WGM12
, 1);

172 
	`bôWrôe
(
TCCR1B
, 
CS10
, 1);

173 
timî1_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

174 
timî1_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

178 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
TCCR2B
)

181 
TCCR2A
 = 0;

182 
TCCR2B
 = 0;

183 
	`bôWrôe
(
TCCR2A
, 
WGM21
, 1);

184 
	`bôWrôe
(
TCCR2B
, 
CS20
, 1);

185 
timî2_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

186 
timî2_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

190 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
TCCR3B
Ë&& deföed(
TIMSK3
)

193 
TCCR3A
 = 0;

194 
TCCR3B
 = 0;

195 
	`bôWrôe
(
TCCR3B
, 
WGM32
, 1);

196 
	`bôWrôe
(
TCCR3B
, 
CS30
, 1);

197 
timî3_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

198 
timî3_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

202 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
TCCR4B
Ë&& deföed(
TIMSK4
)

205 
TCCR4A
 = 0;

206 
TCCR4B
 = 0;

207 #i‡
	`deföed
(
WGM42
)

208 
	`bôWrôe
(
TCCR4B
, 
WGM42
, 1);

209 #ñi‡
	`deföed
(
CS43
)

210 #w¨nög 
this
 
may
 
nŸ
 
be
 
c‹ª˘


212 
	`bôWrôe
(
TCCR4B
, 
CS43
, 1);

214 
	`bôWrôe
(
TCCR4B
, 
CS40
, 1);

215 
timî4_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

216 
timî4_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

220 #i‡
	`deföed
(
TCCR5A
Ë&& deföed(
TCCR5B
Ë&& deföed(
TIMSK5
)

223 
TCCR5A
 = 0;

224 
TCCR5B
 = 0;

225 
	`bôWrôe
(
TCCR5B
, 
WGM52
, 1);

226 
	`bôWrôe
(
TCCR5B
, 
CS50
, 1);

227 
timî5_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

228 
timî5_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

234  
_timî
;

235 
	}
}

241 
	$t⁄e
(
uöt8_t
 
_pö
, 
‰equícy
, 
duøti⁄
)

243 
uöt8_t
 
¥esˇœrbôs
 = 0b001;

244 
toggÀ_cou¡
 = 0;

245 
uöt32_t
 
o¸
 = 0;

246 
öt8_t
 
_timî
;

248 
_timî
 = 
	`t⁄eBegö
(
_pö
);

250 i‡(
_timî
 >= 0)

253 
	`pöMode
(
_pö
, 
OUTPUT
);

256 i‡(
_timî
 == 0 || _timer == 2)

258 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 - 1;

259 
¥esˇœrbôs
 = 0b001;

260 i‡(
o¸
 > 255)

262 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 8 - 1;

263 
¥esˇœrbôs
 = 0b010;

265 i‡(
_timî
 =2 && 
o¸
 > 255)

267 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 32 - 1;

268 
¥esˇœrbôs
 = 0b011;

271 i‡(
o¸
 > 255)

273 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 64 - 1;

274 
¥esˇœrbôs
 = 
_timî
 == 0 ? 0b011 : 0b100;

276 i‡(
_timî
 =2 && 
o¸
 > 255)

278 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 128 - 1;

279 
¥esˇœrbôs
 = 0b101;

282 i‡(
o¸
 > 255)

284 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 256 - 1;

285 
¥esˇœrbôs
 = 
_timî
 == 0 ? 0b100 : 0b110;

286 i‡(
o¸
 > 255)

289 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 1024 - 1;

290 
¥esˇœrbôs
 = 
_timî
 == 0 ? 0b101 : 0b111;

296 #i‡
	`deföed
(
TCCR0B
)

297 i‡(
_timî
 == 0)

299 
TCCR0B
 = 
¥esˇœrbôs
;

303 #i‡
	`deföed
(
TCCR2B
)

305 
TCCR2B
 = 
¥esˇœrbôs
;

316 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 - 1;

318 
¥esˇœrbôs
 = 0b001;

319 i‡(
o¸
 > 0xffff)

321 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 64 - 1;

322 
¥esˇœrbôs
 = 0b011;

325 i‡(
_timî
 == 1)

327 #i‡
	`deföed
(
TCCR1B
)

328 
TCCR1B
 = (TCCR1B & 0b11111000Ë| 
¥esˇœrbôs
;

331 #i‡
	`deföed
(
TCCR3B
)

332 i‡(
_timî
 == 3)

333 
TCCR3B
 = (TCCR3B & 0b11111000Ë| 
¥esˇœrbôs
;

335 #i‡
	`deföed
(
TCCR4B
)

336 i‡(
_timî
 == 4)

337 
TCCR4B
 = (TCCR4B & 0b11111000Ë| 
¥esˇœrbôs
;

339 #i‡
	`deföed
(
TCCR5B
)

340 i‡(
_timî
 == 5)

341 
TCCR5B
 = (TCCR5B & 0b11111000Ë| 
¥esˇœrbôs
;

348 i‡(
duøti⁄
 > 0)

350 
toggÀ_cou¡
 = 2 * 
‰equícy
 * 
duøti⁄
 / 1000;

354 
toggÀ_cou¡
 = -1;

360 
_timî
)

363 #i‡
	`deföed
(
OCR0A
Ë&& deföed(
TIMSK0
Ë&& deföed(
OCIE0A
)

365 
OCR0A
 = 
o¸
;

366 
timî0_toggÀ_cou¡
 = 
toggÀ_cou¡
;

367 
	`bôWrôe
(
TIMSK0
, 
OCIE0A
, 1);

372 #i‡
	`deföed
(
OCR1A
Ë&& deföed(
TIMSK1
Ë&& deföed(
OCIE1A
)

373 
OCR1A
 = 
o¸
;

374 
timî1_toggÀ_cou¡
 = 
toggÀ_cou¡
;

375 
	`bôWrôe
(
TIMSK1
, 
OCIE1A
, 1);

376 #ñi‡
	`deföed
(
OCR1A
Ë&& deföed(
TIMSK
Ë&& deföed(
OCIE1A
)

378 
OCR1A
 = 
o¸
;

379 
timî1_toggÀ_cou¡
 = 
toggÀ_cou¡
;

380 
	`bôWrôe
(
TIMSK
, 
OCIE1A
, 1);

384 #i‡
	`deföed
(
OCR2A
Ë&& deföed(
TIMSK2
Ë&& deföed(
OCIE2A
)

386 
OCR2A
 = 
o¸
;

387 
timî2_toggÀ_cou¡
 = 
toggÀ_cou¡
;

388 
	`bôWrôe
(
TIMSK2
, 
OCIE2A
, 1);

392 #i‡
	`deföed
(
TIMSK3
)

394 
OCR3A
 = 
o¸
;

395 
timî3_toggÀ_cou¡
 = 
toggÀ_cou¡
;

396 
	`bôWrôe
(
TIMSK3
, 
OCIE3A
, 1);

400 #i‡
	`deföed
(
TIMSK4
)

402 
OCR4A
 = 
o¸
;

403 
timî4_toggÀ_cou¡
 = 
toggÀ_cou¡
;

404 
	`bôWrôe
(
TIMSK4
, 
OCIE4A
, 1);

408 #i‡
	`deföed
(
OCR5A
Ë&& deföed(
TIMSK5
Ë&& deföed(
OCIE5A
)

410 
OCR5A
 = 
o¸
;

411 
timî5_toggÀ_cou¡
 = 
toggÀ_cou¡
;

412 
	`bôWrôe
(
TIMSK5
, 
OCIE5A
, 1);

418 
	}
}

424 
	$dißbÀTimî
(
uöt8_t
 
_timî
)

426 
_timî
)

429 #i‡
	`deföed
(
TIMSK0
)

430 
TIMSK0
 = 0;

431 #ñi‡
	`deföed
(
TIMSK
)

432 
TIMSK
 = 0;

436 #i‡
	`deföed
(
TIMSK1
Ë&& deföed(
OCIE1A
)

438 
	`bôWrôe
(
TIMSK1
, 
OCIE1A
, 0);

443 #i‡
	`deföed
(
TIMSK2
Ë&& deföed(
OCIE2A
)

444 
	`bôWrôe
(
TIMSK2
, 
OCIE2A
, 0);

446 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
WGM20
)

447 
TCCR2A
 = (1 << 
WGM20
);

449 #i‡
	`deföed
(
TCCR2B
Ë&& deföed(
CS22
)

450 
TCCR2B
 = (TCCR2B & 0b11111000Ë| (1 << 
CS22
);

452 #i‡
	`deföed
(
OCR2A
)

453 
OCR2A
 = 0;

457 #i‡
	`deföed
(
TIMSK3
)

459 
TIMSK3
 = 0;

463 #i‡
	`deföed
(
TIMSK4
)

465 
TIMSK4
 = 0;

469 #i‡
	`deföed
(
TIMSK5
)

471 
TIMSK5
 = 0;

475 
	}
}

478 
	$noT⁄e
(
uöt8_t
 
_pö
)

480 
öt8_t
 
_timî
 = -1;

482 
i
 = 0; i < 
AVAILABLE_TONE_PINS
; i++) {

483 i‡(
t⁄e_pös
[
i
] =
_pö
) {

484 
_timî
 = 
	`pgm_ªad_byã
(
t⁄e_pö_to_timî_PGM
 + 
i
);

485 
t⁄e_pös
[
i
] = 255;

489 
	`dißbÀTimî
(
_timî
);

491 
	`digôÆWrôe
(
_pö
, 0);

492 
	}
}

494 #ifde‡
USE_TIMER0


495 
	$ISR
(
TIMER0_COMPA_ve˘
)

497 i‡(
timî0_toggÀ_cou¡
 != 0)

500 *
timî0_pö_p‹t
 ^
timî0_pö_mask
;

502 i‡(
timî0_toggÀ_cou¡
 > 0)

503 
timî0_toggÀ_cou¡
--;

507 
	`dißbÀTimî
(0);

508 *
timî0_pö_p‹t
 &~(
timî0_pö_mask
);

510 
	}
}

514 #ifde‡
USE_TIMER1


515 
	$ISR
(
TIMER1_COMPA_ve˘
)

517 i‡(
timî1_toggÀ_cou¡
 != 0)

520 *
timî1_pö_p‹t
 ^
timî1_pö_mask
;

522 i‡(
timî1_toggÀ_cou¡
 > 0)

523 
timî1_toggÀ_cou¡
--;

527 
	`dißbÀTimî
(1);

528 *
timî1_pö_p‹t
 &~(
timî1_pö_mask
);

530 
	}
}

534 #ifde‡
USE_TIMER2


535 
	$ISR
(
TIMER2_COMPA_ve˘
)

538 i‡(
timî2_toggÀ_cou¡
 != 0)

541 *
timî2_pö_p‹t
 ^
timî2_pö_mask
;

543 i‡(
timî2_toggÀ_cou¡
 > 0)

544 
timî2_toggÀ_cou¡
--;

551 
	`noT⁄e
(
t⁄e_pös
[0]);

555 
	}
}

559 #ifde‡
USE_TIMER3


560 
	$ISR
(
TIMER3_COMPA_ve˘
)

562 i‡(
timî3_toggÀ_cou¡
 != 0)

565 *
timî3_pö_p‹t
 ^
timî3_pö_mask
;

567 i‡(
timî3_toggÀ_cou¡
 > 0)

568 
timî3_toggÀ_cou¡
--;

572 
	`dißbÀTimî
(3);

573 *
timî3_pö_p‹t
 &~(
timî3_pö_mask
);

575 
	}
}

579 #ifde‡
USE_TIMER4


580 
	$ISR
(
TIMER4_COMPA_ve˘
)

582 i‡(
timî4_toggÀ_cou¡
 != 0)

585 *
timî4_pö_p‹t
 ^
timî4_pö_mask
;

587 i‡(
timî4_toggÀ_cou¡
 > 0)

588 
timî4_toggÀ_cou¡
--;

592 
	`dißbÀTimî
(4);

593 *
timî4_pö_p‹t
 &~(
timî4_pö_mask
);

595 
	}
}

599 #ifde‡
USE_TIMER5


600 
	$ISR
(
TIMER5_COMPA_ve˘
)

602 i‡(
timî5_toggÀ_cou¡
 != 0)

605 *
timî5_pö_p‹t
 ^
timî5_pö_mask
;

607 i‡(
timî5_toggÀ_cou¡
 > 0)

608 
timî5_toggÀ_cou¡
--;

612 
	`dißbÀTimî
(5);

613 *
timî5_pö_p‹t
 &~(
timî5_pö_mask
);

615 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/USBAPI.h

3 #i‚de‡
__USBAPI__


4 
	#__USBAPI__


	)

6 #i‡
deföed
(
USBCON
)

12 ˛as†
	cUSBDevi˚_


14 
	mpublic
:

15 
USBDevi˚_
();

16 
boﬁ
 
c⁄figuªd
();

18 
©èch
();

19 
dëach
();

20 
pﬁl
();

22 
USBDevi˚_
 
USBDevi˚
;

28 ˛as†
	cSîül_
 : 
public
 
Såóm


30 
¥iv©e
:

31 
rög_buf„r
 *
_cdc_rx_buf„r
;

32 
	mpublic
:

33 
begö
(
uöt16_t
 
baud_cou¡
);

34 
íd
();

36 
vútuÆ
 
avaûabÀ
();

37 
vútuÆ
 
ac˚±
();

38 
vútuÆ
 
≥ek
();

39 
vútuÆ
 
ªad
();

40 
vútuÆ
 
Êush
();

41 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
);

42 
usög
 
	mPröt
::
wrôe
;

43 
›î©‹
 
boﬁ
();

45 
Sîül_
 
Sîül
;

51 
	#MOUSE_LEFT
 1

	)

52 
	#MOUSE_RIGHT
 2

	)

53 
	#MOUSE_MIDDLE
 4

	)

54 
	#MOUSE_ALL
 (
MOUSE_LEFT
 | 
MOUSE_RIGHT
 | 
MOUSE_MIDDLE
)

	)

56 ˛as†
	cMou£_


58 
	m¥iv©e
:

59 
uöt8_t
 
_buâ⁄s
;

60 
buâ⁄s
(
uöt8_t
 
b
);

61 
	mpublic
:

62 
Mou£_
();

63 
begö
();

64 
íd
();

65 
˛ick
(
uöt8_t
 
b
 = 
MOUSE_LEFT
);

66 
move
(sig√d 
x
, sig√d 
y
, sig√d 
whìl
 = 0);

67 
¥ess
(
uöt8_t
 
b
 = 
MOUSE_LEFT
);

68 
ªÀa£
(
uöt8_t
 
b
 = 
MOUSE_LEFT
);

69 
boﬁ
 
isPªs£d
(
uöt8_t
 
b
 = 
MOUSE_LEFT
);

71 
Mou£_
 
Mou£
;

77 
	#KEY_LEFT_CTRL
 0x80

	)

78 
	#KEY_LEFT_SHIFT
 0x81

	)

79 
	#KEY_LEFT_ALT
 0x82

	)

80 
	#KEY_LEFT_GUI
 0x83

	)

81 
	#KEY_RIGHT_CTRL
 0x84

	)

82 
	#KEY_RIGHT_SHIFT
 0x85

	)

83 
	#KEY_RIGHT_ALT
 0x86

	)

84 
	#KEY_RIGHT_GUI
 0x87

	)

86 
	#KEY_UP_ARROW
 0xDA

	)

87 
	#KEY_DOWN_ARROW
 0xD9

	)

88 
	#KEY_LEFT_ARROW
 0xD8

	)

89 
	#KEY_RIGHT_ARROW
 0xD7

	)

90 
	#KEY_BACKSPACE
 0xB2

	)

91 
	#KEY_TAB
 0xB3

	)

92 
	#KEY_RETURN
 0xB0

	)

93 
	#KEY_ESC
 0xB1

	)

94 
	#KEY_INSERT
 0xD1

	)

95 
	#KEY_DELETE
 0xD4

	)

96 
	#KEY_PAGE_UP
 0xD3

	)

97 
	#KEY_PAGE_DOWN
 0xD6

	)

98 
	#KEY_HOME
 0xD2

	)

99 
	#KEY_END
 0xD5

	)

100 
	#KEY_CAPS_LOCK
 0xC1

	)

101 
	#KEY_F1
 0xC2

	)

102 
	#KEY_F2
 0xC3

	)

103 
	#KEY_F3
 0xC4

	)

104 
	#KEY_F4
 0xC5

	)

105 
	#KEY_F5
 0xC6

	)

106 
	#KEY_F6
 0xC7

	)

107 
	#KEY_F7
 0xC8

	)

108 
	#KEY_F8
 0xC9

	)

109 
	#KEY_F9
 0xCA

	)

110 
	#KEY_F10
 0xCB

	)

111 
	#KEY_F11
 0xCC

	)

112 
	#KEY_F12
 0xCD

	)

117 
uöt8_t
 
	mmodifõrs
;

118 
uöt8_t
 
	mª£rved
;

119 
uöt8_t
 
	mkeys
[6];

120 } 
	tKeyRï‹t
;

122 ˛as†
	cKeybﬂrd_
 : 
public
 
Pröt


124 
¥iv©e
:

125 
KeyRï‹t
 
_keyRï‹t
;

126 
£ndRï‹t
(
KeyRï‹t
* 
keys
);

127 
	mpublic
:

128 
Keybﬂrd_
();

129 
begö
();

130 
íd
();

131 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
 
k
);

132 
vútuÆ
 
size_t
 
¥ess
(
uöt8_t
 
k
);

133 
vútuÆ
 
size_t
 
ªÀa£
(
uöt8_t
 
k
);

134 
vútuÆ
 
ªÀa£AŒ
();

136 
Keybﬂrd_
 
Keybﬂrd
;

144 
uöt8_t
 
	mbmReque°Ty≥
;

145 
uöt8_t
 
	mbReque°
;

146 
uöt8_t
 
	mwVÆueL
;

147 
uöt8_t
 
	mwVÆueH
;

148 
uöt16_t
 
	mwIndex
;

149 
uöt16_t
 
	mwLígth
;

150 } 
	tSëup
;

156 
HID_GëI¡îÁ˚
(
uöt8_t
* 
öãrÁ˚Num
);

157 
HID_GëDes¸ùt‹
(
i
);

158 
boﬁ
 
HID_Sëup
(
Sëup
& 
£tup
);

159 
HID_SídRï‹t
(
uöt8_t
 
id
, c⁄° * 
d©a
, 
Àn
);

165 
MSC_GëI¡îÁ˚
(
uöt8_t
* 
öãrÁ˚Num
);

166 
MSC_GëDes¸ùt‹
(
i
);

167 
boﬁ
 
MSC_Sëup
(
Sëup
& 
£tup
);

168 
boﬁ
 
MSC_D©a
(
uöt8_t
 
rx
,uöt8_à
tx
);

174 
CDC_GëI¡îÁ˚
(
uöt8_t
* 
öãrÁ˚Num
);

175 
CDC_GëDes¸ùt‹
(
i
);

176 
boﬁ
 
CDC_Sëup
(
Sëup
& 
£tup
);

181 
	#TRANSFER_PGM
 0x80

	)

182 
	#TRANSFER_RELEASE
 0x40

	)

183 
	#TRANSFER_ZERO
 0x20

	)

185 
USB_SídC⁄åﬁ
(
uöt8_t
 
Êags
, c⁄° * 
d
, 
Àn
);

186 
USB_RecvC⁄åﬁ
(* 
d
, 
Àn
);

188 
uöt8_t
 
USB_AvaûabÀ
(uöt8_à
ï
);

189 
USB_Síd
(
uöt8_t
 
ï
, c⁄° * 
d©a
, 
Àn
);

190 
USB_Recv
(
uöt8_t
 
ï
, * 
d©a
, 
Àn
);

191 
USB_Recv
(
uöt8_t
 
ï
);

192 
USB_Flush
(
uöt8_t
 
ï
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/USBCore.cpp

19 
	~"Pœtf‹m.h
"

20 
	~"USBAPI.h
"

21 
	~"USBDesc.h
"

23 #i‡
deföed
(
USBCON
)

25 
	#EP_TYPE_CONTROL
 0x00

	)

26 
	#EP_TYPE_BULK_IN
 0x81

	)

27 
	#EP_TYPE_BULK_OUT
 0x80

	)

28 
	#EP_TYPE_INTERRUPT_IN
 0xC1

	)

29 
	#EP_TYPE_INTERRUPT_OUT
 0xC0

	)

30 
	#EP_TYPE_ISOCHRONOUS_IN
 0x41

	)

31 
	#EP_TYPE_ISOCHRONOUS_OUT
 0x40

	)

34 
	#TX_RX_LED_PULSE_MS
 100

	)

35 vﬁ©ûê
u8
 
	gTxLEDPul£
;

36 vﬁ©ûê
u8
 
	gRxLEDPul£
;

41 c⁄° 
u16
 
STRING_LANGUAGE
[] 
PROGMEM
;

42 c⁄° 
u16
 
STRING_IPRODUCT
[] 
PROGMEM
;

43 c⁄° 
u16
 
STRING_IMANUFACTURER
[] 
PROGMEM
;

44 c⁄° 
Devi˚Des¸ùt‹
 
USB_Devi˚Des¸ùt‹
 
PROGMEM
;

45 c⁄° 
Devi˚Des¸ùt‹
 
USB_Devi˚Des¸ùt‹A
 
PROGMEM
;

47 c⁄° 
u16
 
	gSTRING_LANGUAGE
[2] = {

52 c⁄° 
u16
 
	gSTRING_IPRODUCT
[17] = {

54 #i‡
USB_PID
 == 0x8036

56 #ñi‡
USB_PID
 == 0x8037

58 #ñi‡
USB_PID
 == 0x803C

60 #ñi‡
USB_PID
 == 0x9208

67 c⁄° 
u16
 
	gSTRING_IMANUFACTURER
[12] = {

69 #i‡
USB_VID
 == 0x2341

71 #ñi‡
USB_VID
 == 0x1b4f

78 #ifde‡
CDC_ENABLED


79 
	#DEVICE_CLASS
 0x02

	)

81 
	#DEVICE_CLASS
 0x00

	)

85 c⁄° 
Devi˚Des¸ùt‹
 
	gUSB_Devi˚Des¸ùt‹
 =

86 
D_DEVICE
(0x00,0x00,0x00,64,
USB_VID
,
USB_PID
,0x100,
IMANUFACTURER
,
IPRODUCT
,0,1);

88 c⁄° 
Devi˚Des¸ùt‹
 
	gUSB_Devi˚Des¸ùt‹A
 =

89 
D_DEVICE
(
DEVICE_CLASS
,0x00,0x00,64,
USB_VID
,
USB_PID
,0x100,
IMANUFACTURER
,
IPRODUCT
,0,1);

94 vﬁ©ûê
u8
 
	g_usbC⁄figuøti⁄
 = 0;

96 
ölöe
 
	$WaôIN
()

98 !(
UEINTX
 & (1<<
TXINI
)));

99 
	}
}

101 
ölöe
 
	$CÀ¨IN
()

103 
UEINTX
 = ~(1<<
TXINI
);

104 
	}
}

106 
ölöe
 
	$WaôOUT
()

108 !(
UEINTX
 & (1<<
RXOUTI
)))

110 
	}
}

112 
ölöe
 
u8
 
	$WaôF‹INOrOUT
()

114 !(
UEINTX
 & ((1<<
TXINI
)|(1<<
RXOUTI
))))

116  (
UEINTX
 & (1<<
RXOUTI
)) == 0;

117 
	}
}

119 
ölöe
 
	$CÀ¨OUT
()

121 
UEINTX
 = ~(1<<
RXOUTI
);

122 
	}
}

124 
	$Recv
(vﬁ©ûê
u8
* 
d©a
, u8 
cou¡
)

126 
cou¡
--)

127 *
d©a
++ = 
UEDATX
;

129 
RXLED1
;

130 
RxLEDPul£
 = 
TX_RX_LED_PULSE_MS
;

131 
	}
}

133 
ölöe
 
u8
 
	$Recv8
()

135 
RXLED1
;

136 
RxLEDPul£
 = 
TX_RX_LED_PULSE_MS
;

138  
UEDATX
;

139 
	}
}

141 
ölöe
 
	$Síd8
(
u8
 
d
)

143 
UEDATX
 = 
d
;

144 
	}
}

146 
ölöe
 
	$SëEP
(
u8
 
ï
)

148 
UENUM
 = 
ï
;

149 
	}
}

151 
ölöe
 
u8
 
	$FifoByãCou¡
()

153  
UEBCLX
;

154 
	}
}

156 
ölöe
 
u8
 
	$Re˚ivedSëupI¡
()

158  
UEINTX
 & (1<<
RXSTPI
);

159 
	}
}

161 
ölöe
 
	$CÀ¨SëupI¡
()

163 
UEINTX
 = ~((1<<
RXSTPI
Ë| (1<<
RXOUTI
Ë| (1<<
TXINI
));

164 
	}
}

166 
ölöe
 
	$SèŒ
()

168 
UECONX
 = (1<<
STALLRQ
Ë| (1<<
EPEN
);

169 
	}
}

171 
ölöe
 
u8
 
	$RódWrôeAŒowed
()

173  
UEINTX
 & (1<<
RWAL
);

174 
	}
}

176 
ölöe
 
u8
 
	$SèŒed
()

178  
UEINTX
 & (1<<
STALLEDI
);

179 
	}
}

181 
ölöe
 
u8
 
	$FifoFªe
()

183  
UEINTX
 & (1<<
FIFOCON
);

184 
	}
}

186 
ölöe
 
	$Rñó£RX
()

188 
UEINTX
 = 0x6B;

189 
	}
}

191 
ölöe
 
	$Rñó£TX
()

193 
UEINTX
 = 0x3A;

194 
	}
}

196 
ölöe
 
u8
 
	$FømeNumbî
()

198  
UDFNUML
;

199 
	}
}

204 
u8
 
	$USBGëC⁄figuøti⁄
()

206  
_usbC⁄figuøti⁄
;

207 
	}
}

209 
	#USB_RECV_TIMEOUT


	)

210 ˛as†
	cLockEP


212 
u8
 
	m_§eg
;

213 
	mpublic
:

214 
	$LockEP
(
u8
 
ï
Ë: 
	$_§eg
(
SREG
)

216 
	`˛i
();

217 
	`SëEP
(
ï
 & 7);

219 ~
	$LockEP
()

221 
SREG
 = 
_§eg
;

222 
	}
}

226 
u8
 
	$USB_AvaûabÀ
(
u8
 
ï
)

228 
LockEP
 
	`lock
(
ï
);

229  
	`FifoByãCou¡
();

230 
	}
}

234 
	$USB_Recv
(
u8
 
ï
, * 
d
, 
Àn
)

236 i‡(!
_usbC⁄figuøti⁄
 || 
Àn
 < 0)

239 
LockEP
 
	`lock
(
ï
);

240 
u8
 
n
 = 
	`FifoByãCou¡
();

241 
Àn
 = 
	`mö
(
n
,len);

242 
n
 = 
Àn
;

243 
u8
* 
d°
 = (u8*)
d
;

244 
n
--)

245 *
d°
++ = 
	`Recv8
();

246 i‡(
Àn
 && !
	`FifoByãCou¡
())

247 
	`Rñó£RX
();

249  
Àn
;

250 
	}
}

253 
	$USB_Recv
(
u8
 
ï
)

255 
u8
 
c
;

256 i‡(
	`USB_Recv
(
ï
,&
c
,1) != 1)

258  
c
;

259 
	}
}

262 
u8
 
	$USB_SídS∑˚
(
u8
 
ï
)

264 
LockEP
 
	`lock
(
ï
);

265 i‡(!
	`RódWrôeAŒowed
())

267  64 - 
	`FifoByãCou¡
();

268 
	}
}

271 
	$USB_Síd
(
u8
 
ï
, c⁄° * 
d
, 
Àn
)

273 i‡(!
_usbC⁄figuøti⁄
)

276 
r
 = 
Àn
;

277 c⁄° 
u8
* 
d©a
 = (c⁄° u8*)
d
;

278 
u8
 
zîo
 = 
ï
 & 
TRANSFER_ZERO
;

279 
u8
 
timeout
 = 250;

280 
Àn
)

282 
u8
 
n
 = 
	`USB_SídS∑˚
(
ï
);

283 i‡(
n
 == 0)

285 i‡(!(--
timeout
))

287 
	`dñay
(1);

291 i‡(
n
 > 
Àn
)

292 
n
 = 
Àn
;

293 
Àn
 -
n
;

295 
LockEP
 
	`lock
(
ï
);

296 i‡(
ï
 & 
TRANSFER_ZERO
)

298 
n
--)

299 
	`Síd8
(0);

301 i‡(
ï
 & 
TRANSFER_PGM
)

303 
n
--)

304 
	`Síd8
(
	`pgm_ªad_byã
(
d©a
++));

308 
n
--)

309 
	`Síd8
(*
d©a
++);

311 i‡(!
	`RódWrôeAŒowed
(Ë|| ((
Àn
 =0Ë&& (
ï
 & 
TRANSFER_RELEASE
)))

312 
	`Rñó£TX
();

315 
TXLED1
;

316 
TxLEDPul£
 = 
TX_RX_LED_PULSE_MS
;

317  
r
;

318 
	}
}

320 c⁄° 
u8
 
_öôEndpoöts
[] 
PROGMEM
;

321 c⁄° 
u8
 
	g_öôEndpoöts
[] =

325 #ifde‡
CDC_ENABLED


326 
EP_TYPE_INTERRUPT_IN
,

327 
EP_TYPE_BULK_OUT
,

328 
EP_TYPE_BULK_IN
,

331 #ifde‡
HID_ENABLED


332 
EP_TYPE_INTERRUPT_IN


336 
	#EP_SINGLE_64
 0x32

337 
	#EP_DOUBLE_64
 0x36

338 

	)

340 
	$InôEP
(
u8
 
ödex
, u8 
ty≥
, u8 
size
)

342 
UENUM
 = 
ödex
;

343 
UECONX
 = 1;

344 
UECFG0X
 = 
ty≥
;

345 
UECFG1X
 = 
size
;

346 
	}
}

349 
	$InôEndpoöts
()

351 
u8
 
i
 = 1; i < (
_öôEndpoöts
); i++)

353 
UENUM
 = 
i
;

354 
UECONX
 = 1;

355 
UECFG0X
 = 
	`pgm_ªad_byã
(
_öôEndpoöts
+
i
);

356 
UECFG1X
 = 
EP_DOUBLE_64
;

358 
UERST
 = 0x7E;

359 
UERST
 = 0;

360 
	}
}

364 
boﬁ
 
	$CœssI¡îÁ˚Reque°
(
Sëup
& 
£tup
)

366 
u8
 
i
 = 
£tup
.
wIndex
;

368 #ifde‡
CDC_ENABLED


369 i‡(
CDC_ACM_INTERFACE
 =
i
)

370  
	`CDC_Sëup
(
£tup
);

373 #ifde‡
HID_ENABLED


374 i‡(
HID_INTERFACE
 =
i
)

375  
	`HID_Sëup
(
£tup
);

377  
Ál£
;

378 
	}
}

380 
	g_cm¨k
;

381 
	g_˚nd
;

382 
	$InôC⁄åﬁ
(
íd
)

384 
	`SëEP
(0);

385 
_cm¨k
 = 0;

386 
_˚nd
 = 
íd
;

387 
	}
}

390 
boﬁ
 
	$SídC⁄åﬁ
(
u8
 
d
)

392 i‡(
_cm¨k
 < 
_˚nd
)

394 i‡(!
	`WaôF‹INOrOUT
())

395  
Ál£
;

396 
	`Síd8
(
d
);

397 i‡(!((
_cm¨k
 + 1) & 0x3F))

398 
	`CÀ¨IN
();

400 
_cm¨k
++;

401  
åue
;

402 
	}
};

405 
	$USB_SídC⁄åﬁ
(
u8
 
Êags
, c⁄° * 
d
, 
Àn
)

407 
£¡
 = 
Àn
;

408 c⁄° 
u8
* 
d©a
 = (c⁄° u8*)
d
;

409 
boﬁ
 
pgm
 = 
Êags
 & 
TRANSFER_PGM
;

410 
Àn
--)

412 
u8
 
c
 = 
pgm
 ? 
	`pgm_ªad_byã
(
d©a
++) : *data++;

413 i‡(!
	`SídC⁄åﬁ
(
c
))

416  
£¡
;

417 
	}
}

422 
	$USB_RecvC⁄åﬁ
(* 
d
, 
Àn
)

424 
	`WaôOUT
();

425 
	`Recv
((
u8
*)
d
,
Àn
);

426 
	`CÀ¨OUT
();

427  
Àn
;

428 
	}
}

430 
	$SídI¡îÁ˚s
()

432 
tŸÆ
 = 0;

433 
u8
 
öãrÁ˚s
 = 0;

435 #ifde‡
CDC_ENABLED


436 
tŸÆ
 = 
	`CDC_GëI¡îÁ˚
(&
öãrÁ˚s
);

439 #ifde‡
HID_ENABLED


440 
tŸÆ
 +
	`HID_GëI¡îÁ˚
(&
öãrÁ˚s
);

443  
öãrÁ˚s
;

444 
	}
}

450 
boﬁ
 
	$SídC⁄figuøti⁄
(
maxÀn
)

453 
	`InôC⁄åﬁ
(0);

454 
öãrÁ˚s
 = 
	`SídI¡îÁ˚s
();

455 
C⁄figDes¸ùt‹
 
c⁄fig
 = 
	`D_CONFIG
(
_cm¨k
 + (C⁄figDes¸ùt‹),
öãrÁ˚s
);

458 
	`InôC⁄åﬁ
(
maxÀn
);

459 
	`USB_SídC⁄åﬁ
(0,&
c⁄fig
,(
C⁄figDes¸ùt‹
));

460 
	`SídI¡îÁ˚s
();

461  
åue
;

462 
	}
}

464 
u8
 
	g_cdcComposôe
 = 0;

467 
boﬁ
 
	$SídDes¸ùt‹
(
Sëup
& 
£tup
)

469 
u8
 
t
 = 
£tup
.
wVÆueH
;

470 i‡(
USB_CONFIGURATION_DESCRIPTOR_TYPE
 =
t
)

471  
	`SídC⁄figuøti⁄
(
£tup
.
wLígth
);

473 
	`InôC⁄åﬁ
(
£tup
.
wLígth
);

474 #ifde‡
HID_ENABLED


475 i‡(
HID_REPORT_DESCRIPTOR_TYPE
 =
t
)

476  
	`HID_GëDes¸ùt‹
(
t
);

479 
u8
 
desc_Àngth
 = 0;

480 c⁄° 
u8
* 
desc_addr
 = 0;

481 i‡(
USB_DEVICE_DESCRIPTOR_TYPE
 =
t
)

483 i‡(
£tup
.
wLígth
 == 8)

484 
_cdcComposôe
 = 1;

485 
desc_addr
 = 
_cdcComposôe
 ? (c⁄° 
u8
*)&
USB_Devi˚Des¸ùt‹A
 : (c⁄° u8*)&
USB_Devi˚Des¸ùt‹
;

487 i‡(
USB_STRING_DESCRIPTOR_TYPE
 =
t
)

489 i‡(
£tup
.
wVÆueL
 == 0)

490 
desc_addr
 = (c⁄° 
u8
*)&
STRING_LANGUAGE
;

491 i‡(
£tup
.
wVÆueL
 =
IPRODUCT
)

492 
desc_addr
 = (c⁄° 
u8
*)&
STRING_IPRODUCT
;

493 i‡(
£tup
.
wVÆueL
 =
IMANUFACTURER
)

494 
desc_addr
 = (c⁄° 
u8
*)&
STRING_IMANUFACTURER
;

496  
Ál£
;

499 i‡(
desc_addr
 == 0)

500  
Ál£
;

501 i‡(
desc_Àngth
 == 0)

502 
desc_Àngth
 = 
	`pgm_ªad_byã
(
desc_addr
);

504 
	`USB_SídC⁄åﬁ
(
TRANSFER_PGM
,
desc_addr
,
desc_Àngth
);

505  
åue
;

506 
	}
}

509 
	$ISR
(
USB_COM_ve˘
)

511 
	`SëEP
(0);

512 i‡(!
	`Re˚ivedSëupI¡
())

515 
Sëup
 
£tup
;

516 
	`Recv
((
u8
*)&
£tup
,8);

517 
	`CÀ¨SëupI¡
();

519 
u8
 
ªque°Ty≥
 = 
£tup
.
bmReque°Ty≥
;

520 i‡(
ªque°Ty≥
 & 
REQUEST_DEVICETOHOST
)

521 
	`WaôIN
();

523 
	`CÀ¨IN
();

525 
boﬁ
 
ok
 = 
åue
;

526 i‡(
REQUEST_STANDARD
 =(
ªque°Ty≥
 & 
REQUEST_TYPE
))

529 
u8
 
r
 = 
£tup
.
bReque°
;

530 i‡(
GET_STATUS
 =
r
)

532 
	`Síd8
(0);

533 
	`Síd8
(0);

535 i‡(
CLEAR_FEATURE
 =
r
)

538 i‡(
SET_FEATURE
 =
r
)

541 i‡(
SET_ADDRESS
 =
r
)

543 
	`WaôIN
();

544 
UDADDR
 = 
£tup
.
wVÆueL
 | (1<<
ADDEN
);

546 i‡(
GET_DESCRIPTOR
 =
r
)

548 
ok
 = 
	`SídDes¸ùt‹
(
£tup
);

550 i‡(
SET_DESCRIPTOR
 =
r
)

552 
ok
 = 
Ál£
;

554 i‡(
GET_CONFIGURATION
 =
r
)

556 
	`Síd8
(1);

558 i‡(
SET_CONFIGURATION
 =
r
)

560 i‡(
REQUEST_DEVICE
 =(
ªque°Ty≥
 & 
REQUEST_RECIPIENT
))

562 
	`InôEndpoöts
();

563 
_usbC⁄figuøti⁄
 = 
£tup
.
wVÆueL
;

565 
ok
 = 
Ál£
;

567 i‡(
GET_INTERFACE
 =
r
)

570 i‡(
SET_INTERFACE
 =
r
)

576 
	`InôC⁄åﬁ
(
£tup
.
wLígth
);

577 
ok
 = 
	`CœssI¡îÁ˚Reque°
(
£tup
);

580 i‡(
ok
)

581 
	`CÀ¨IN
();

584 
	`SèŒ
();

586 
	}
}

588 
	$USB_Flush
(
u8
 
ï
)

590 
	`SëEP
(
ï
);

591 i‡(
	`FifoByãCou¡
())

592 
	`Rñó£TX
();

593 
	}
}

596 
	$ISR
(
USB_GEN_ve˘
)

598 
u8
 
udöt
 = 
UDINT
;

599 
UDINT
 = 0;

602 i‡(
udöt
 & (1<<
EORSTI
))

604 
	`InôEP
(0,
EP_TYPE_CONTROL
,
EP_SINGLE_64
);

605 
_usbC⁄figuøti⁄
 = 0;

606 
UEIENX
 = 1 << 
RXSTPE
;

610 i‡(
udöt
 & (1<<
SOFI
))

612 #ifde‡
CDC_ENABLED


613 
	`USB_Flush
(
CDC_TX
);

614 i‡(
	`USB_AvaûabÀ
(
CDC_RX
))

615 
Sîül
.
	`ac˚±
();

619 i‡(
TxLEDPul£
 && !(--TxLEDPulse))

620 
TXLED0
;

621 i‡(
RxLEDPul£
 && !(--RxLEDPulse))

622 
RXLED0
;

624 
	}
}

628 
u8
 
	$USBC⁄√˘ed
()

630 
u8
 
f
 = 
UDFNUML
;

631 
	`dñay
(3);

632  
f
 !
UDFNUML
;

633 
	}
}

638 
USBDevi˚_
 
	gUSBDevi˚
;

640 
	gUSBDevi˚_
::
	$USBDevi˚_
()

642 
	}
}

644 
USBDevi˚_
::
	$©èch
()

646 
_usbC⁄figuøti⁄
 = 0;

647 
UHWCON
 = 0x01;

648 
USBCON
 = (1<<
USBE
)|(1<<
FRZCLK
);

649 #i‡
F_CPU
 == 16000000UL

650 
PLLCSR
 = 0x12;

651 #ñi‡
F_CPU
 == 8000000UL

652 
PLLCSR
 = 0x02;

654 !(
PLLCSR
 & (1<<
PLOCK
)))

660 
	`dñay
(1);

662 
USBCON
 = ((1<<
USBE
)|(1<<
OTGPADE
));

663 
UDIEN
 = (1<<
EORSTE
)|(1<<
SOFE
);

664 
UDCON
 = 0;

666 
TX_RX_LED_INIT
;

667 
	}
}

669 
	gUSBDevi˚_
::
	$dëach
()

671 
	}
}

675 
boﬁ
 
USBDevi˚_
::
	$c⁄figuªd
()

677  
_usbC⁄figuøti⁄
;

678 
	}
}

680 
	gUSBDevi˚_
::
	$pﬁl
()

682 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/USBCore.h

18 #i‚de‡
__USBCORE_H__


19 
	#__USBCORE_H__


	)

22 
	#GET_STATUS
 0

	)

23 
	#CLEAR_FEATURE
 1

	)

24 
	#SET_FEATURE
 3

	)

25 
	#SET_ADDRESS
 5

	)

26 
	#GET_DESCRIPTOR
 6

	)

27 
	#SET_DESCRIPTOR
 7

	)

28 
	#GET_CONFIGURATION
 8

	)

29 
	#SET_CONFIGURATION
 9

	)

30 
	#GET_INTERFACE
 10

	)

31 
	#SET_INTERFACE
 11

	)

35 
	#REQUEST_HOSTTODEVICE
 0x00

	)

36 
	#REQUEST_DEVICETOHOST
 0x80

	)

37 
	#REQUEST_DIRECTION
 0x80

	)

39 
	#REQUEST_STANDARD
 0x00

	)

40 
	#REQUEST_CLASS
 0x20

	)

41 
	#REQUEST_VENDOR
 0x40

	)

42 
	#REQUEST_TYPE
 0x60

	)

44 
	#REQUEST_DEVICE
 0x00

	)

45 
	#REQUEST_INTERFACE
 0x01

	)

46 
	#REQUEST_ENDPOINT
 0x02

	)

47 
	#REQUEST_OTHER
 0x03

	)

48 
	#REQUEST_RECIPIENT
 0x03

	)

50 
	#REQUEST_DEVICETOHOST_CLASS_INTERFACE
 (
REQUEST_DEVICETOHOST
 + 
REQUEST_CLASS
 + 
REQUEST_INTERFACE
)

	)

51 
	#REQUEST_HOSTTODEVICE_CLASS_INTERFACE
 (
REQUEST_HOSTTODEVICE
 + 
REQUEST_CLASS
 + 
REQUEST_INTERFACE
)

	)

55 
	#CDC_SET_LINE_CODING
 0x20

	)

56 
	#CDC_GET_LINE_CODING
 0x21

	)

57 
	#CDC_SET_CONTROL_LINE_STATE
 0x22

	)

59 
	#MSC_RESET
 0xFF

	)

60 
	#MSC_GET_MAX_LUN
 0xFE

	)

62 
	#HID_GET_REPORT
 0x01

	)

63 
	#HID_GET_IDLE
 0x02

	)

64 
	#HID_GET_PROTOCOL
 0x03

	)

65 
	#HID_SET_REPORT
 0x09

	)

66 
	#HID_SET_IDLE
 0x0A

	)

67 
	#HID_SET_PROTOCOL
 0x0B

	)

71 
	#USB_DEVICE_DESC_SIZE
 18

	)

72 
	#USB_CONFIGUARTION_DESC_SIZE
 9

	)

73 
	#USB_INTERFACE_DESC_SIZE
 9

	)

74 
	#USB_ENDPOINT_DESC_SIZE
 7

	)

76 
	#USB_DEVICE_DESCRIPTOR_TYPE
 1

	)

77 
	#USB_CONFIGURATION_DESCRIPTOR_TYPE
 2

	)

78 
	#USB_STRING_DESCRIPTOR_TYPE
 3

	)

79 
	#USB_INTERFACE_DESCRIPTOR_TYPE
 4

	)

80 
	#USB_ENDPOINT_DESCRIPTOR_TYPE
 5

	)

82 
	#USB_DEVICE_CLASS_COMMUNICATIONS
 0x02

	)

83 
	#USB_DEVICE_CLASS_HUMAN_INTERFACE
 0x03

	)

84 
	#USB_DEVICE_CLASS_STORAGE
 0x08

	)

85 
	#USB_DEVICE_CLASS_VENDOR_SPECIFIC
 0xFF

	)

87 
	#USB_CONFIG_POWERED_MASK
 0x40

	)

88 
	#USB_CONFIG_BUS_POWERED
 0x80

	)

89 
	#USB_CONFIG_SELF_POWERED
 0xC0

	)

90 
	#USB_CONFIG_REMOTE_WAKEUP
 0x20

	)

93 
	#USB_CONFIG_POWER_MA
(
mA
Ë((mA)/2)

	)

96 
	#USB_ENDPOINT_DIRECTION_MASK
 0x80

	)

97 
	#USB_ENDPOINT_OUT
(
addr
Ë(◊ddrË| 0x00)

	)

98 
	#USB_ENDPOINT_IN
(
addr
Ë(◊ddrË| 0x80)

	)

100 
	#USB_ENDPOINT_TYPE_MASK
 0x03

	)

101 
	#USB_ENDPOINT_TYPE_CONTROL
 0x00

	)

102 
	#USB_ENDPOINT_TYPE_ISOCHRONOUS
 0x01

	)

103 
	#USB_ENDPOINT_TYPE_BULK
 0x02

	)

104 
	#USB_ENDPOINT_TYPE_INTERRUPT
 0x03

	)

106 
	#TOBYTES
(
x
Ë((xË& 0xFF),(((xË>> 8Ë& 0xFF)

	)

108 
	#CDC_V1_10
 0x0110

	)

109 
	#CDC_COMMUNICATION_INTERFACE_CLASS
 0x02

	)

111 
	#CDC_CALL_MANAGEMENT
 0x01

	)

112 
	#CDC_ABSTRACT_CONTROL_MODEL
 0x02

	)

113 
	#CDC_HEADER
 0x00

	)

114 
	#CDC_ABSTRACT_CONTROL_MANAGEMENT
 0x02

	)

115 
	#CDC_UNION
 0x06

	)

116 
	#CDC_CS_INTERFACE
 0x24

	)

117 
	#CDC_CS_ENDPOINT
 0x25

	)

118 
	#CDC_DATA_INTERFACE_CLASS
 0x0A

	)

120 
	#MSC_SUBCLASS_SCSI
 0x06

	)

121 
	#MSC_PROTOCOL_BULK_ONLY
 0x50

	)

123 
	#HID_HID_DESCRIPTOR_TYPE
 0x21

	)

124 
	#HID_REPORT_DESCRIPTOR_TYPE
 0x22

	)

125 
	#HID_PHYSICAL_DESCRIPTOR_TYPE
 0x23

	)

130 
u8
 
	mÀn
;

131 
u8
 
	mdty≥
;

132 
u16
 
	musbVîsi⁄
;

133 
u8
 
	mdevi˚Cœss
;

134 
u8
 
	mdevi˚SubCœss
;

135 
u8
 
	mdevi˚PrŸocﬁ
;

136 
u8
 
	m∑ckëSize0
;

137 
u16
 
	midVíd‹
;

138 
u16
 
	midProdu˘
;

139 
u16
 
	mdevi˚Vîsi⁄
;

140 
u8
 
	miM™uÁ˘uªr
;

141 
u8
 
	miProdu˘
;

142 
u8
 
	miSîülNumbî
;

143 
u8
 
	mbNumC⁄figuøti⁄s
;

144 } 
	tDevi˚Des¸ùt‹
;

148 
u8
 
	mÀn
;

149 
u8
 
	mdty≥
;

150 
u16
 
	m˛í
;

151 
u8
 
	mnumI¡îÁ˚s
;

152 
u8
 
	mc⁄fig
;

153 
u8
 
	mic⁄fig
;

154 
u8
 
	m©åibuãs
;

155 
u8
 
	mmaxPowî
;

156 } 
	tC⁄figDes¸ùt‹
;

163 
u8
 
	mÀn
;

164 
u8
 
	mdty≥
;

165 
u8
 
	mnumbî
;

166 
u8
 
	mÆã∫©e
;

167 
u8
 
	mnumEndpoöts
;

168 
u8
 
	möãrÁ˚Cœss
;

169 
u8
 
	möãrÁ˚SubCœss
;

170 
u8
 
	m¥Ÿocﬁ
;

171 
u8
 
	miI¡îÁ˚
;

172 } 
	tI¡îÁ˚Des¸ùt‹
;

177 
u8
 
	mÀn
;

178 
u8
 
	mdty≥
;

179 
u8
 
	maddr
;

180 
u8
 
	m©å
;

181 
u16
 
	m∑ckëSize
;

182 
u8
 
	möãrvÆ
;

183 } 
	tEndpoötDes¸ùt‹
;

189 
u8
 
	mÀn
;

190 
u8
 
	mdty≥
;

191 
u8
 
	mfú°I¡îÁ˚
;

192 
u8
 
	möãrÁ˚Cou¡
;

193 
u8
 
	mfun˘i⁄Cœss
;

194 
u8
 
	mfu¡i⁄SubCœss
;

195 
u8
 
	mfun˘i⁄PrŸocﬁ
;

196 
u8
 
	miI¡îÁ˚
;

197 } 
	tIADDes¸ùt‹
;

202 
u8
 
	mÀn
;

203 
u8
 
	mdty≥
;

204 
u8
 
	msubty≥
;

205 
u8
 
	md0
;

206 
u8
 
	md1
;

207 } 
	tCDCCSI¡îÁ˚Des¸ùt‹
;

211 
u8
 
	mÀn
;

212 
u8
 
	mdty≥
;

213 
u8
 
	msubty≥
;

214 
u8
 
	md0
;

215 } 
	tCDCCSI¡îÁ˚Des¸ùt‹4
;

219 
u8
 
	mÀn
;

220 
u8
 
	mdty≥
;

221 
u8
 
	msubty≥
;

222 
u8
 
	mbmC≠abûôõs
;

223 
u8
 
	mbD©aI¡îÁ˚
;

224 } 
	tCMFun˘i⁄ÆDes¸ùt‹
;

228 
u8
 
	mÀn
;

229 
u8
 
	mdty≥
;

230 
u8
 
	msubty≥
;

231 
u8
 
	mbmC≠abûôõs
;

232 } 
	tACMFun˘i⁄ÆDes¸ùt‹
;

237 
IADDes¸ùt‹
 
	müd
;

240 
I¡îÁ˚Des¸ùt‹
 
	mcif
;

241 
CDCCSI¡îÁ˚Des¸ùt‹
 
	mhódî
;

242 
CMFun˘i⁄ÆDes¸ùt‹
 
	mˇŒM™agemít
;

243 
ACMFun˘i⁄ÆDes¸ùt‹
 
	mc⁄åﬁM™agemít
;

244 
CDCCSI¡îÁ˚Des¸ùt‹
 
	mfun˘i⁄ÆDes¸ùt‹
;

245 
EndpoötDes¸ùt‹
 
	mcifö
;

248 
I¡îÁ˚Des¸ùt‹
 
	mdif
;

249 
EndpoötDes¸ùt‹
 
	mö
;

250 
EndpoötDes¸ùt‹
 
	mout
;

251 } 
	tCDCDes¸ùt‹
;

255 
I¡îÁ˚Des¸ùt‹
 
	mmsc
;

256 
EndpoötDes¸ùt‹
 
	mö
;

257 
EndpoötDes¸ùt‹
 
	mout
;

258 } 
	tMSCDes¸ùt‹
;

262 
u8
 
	mÀn
;

263 
u8
 
	mdty≥
;

264 
u8
 
	maddr
;

265 
u8
 
	mvîsi⁄L
;

266 
u8
 
	mvîsi⁄H
;

267 
u8
 
	mcou¡ry
;

268 
u8
 
	mdes˘y≥
;

269 
u8
 
	mdescLíL
;

270 
u8
 
	mdescLíH
;

271 } 
	tHIDDescDes¸ùt‹
;

275 
I¡îÁ˚Des¸ùt‹
 
	mhid
;

276 
HIDDescDes¸ùt‹
 
	mdesc
;

277 
EndpoötDes¸ùt‹
 
	mö
;

278 } 
	tHIDDes¸ùt‹
;

281 
	#D_DEVICE
(
_˛ass
,
_subCœss
,
_¥Ÿo
,
_∑ckëSize0
,
_vid
,
_pid
,
_vîsi⁄
,
_im
,
_ù
,
_is
,
_c⁄figs
) \

282 { 18, 1, 0x200, 
_˛ass
,
_subCœss
,
_¥Ÿo
,
_∑ckëSize0
,
_vid
,
_pid
,
_vîsi⁄
,
_im
,
_ù
,
_is
,
_c⁄figs
 }

	)

284 
	#D_CONFIG
(
_tŸÆLígth
,
_öãrÁ˚s
) \

285 { 9, 2, 
_tŸÆLígth
,
_öãrÁ˚s
, 1, 0, 
USB_CONFIG_BUS_POWERED
, 
	`USB_CONFIG_POWER_MA
(500Ë}

	)

287 
	#D_INTERFACE
(
_n
,
_numEndpoöts
,
_˛ass
,
_subCœss
,
_¥Ÿocﬁ
) \

288 { 9, 4, 
_n
, 0, 
_numEndpoöts
, 
_˛ass
,
_subCœss
, 
_¥Ÿocﬁ
, 0 }

	)

290 
	#D_ENDPOINT
(
_addr
,
_©å
,
_∑ckëSize
, 
_öãrvÆ
) \

291 { 7, 5, 
_addr
,
_©å
,
_∑ckëSize
, 
_öãrvÆ
 }

	)

293 
	#D_IAD
(
_fú°I¡îÁ˚
, 
_cou¡
, 
_˛ass
, 
_subCœss
, 
_¥Ÿocﬁ
) \

294 { 8, 11, 
_fú°I¡îÁ˚
, 
_cou¡
, 
_˛ass
, 
_subCœss
, 
_¥Ÿocﬁ
, 0 }

	)

296 
	#D_HIDREPORT
(
_des¸ùt‹Lígth
) \

297 { 9, 0x21, 0x1, 0x1, 0, 1, 0x22, 
_des¸ùt‹Lígth
, 0 }

	)

299 
	#D_CDCCS
(
_subty≥
,
_d0
,
_d1
Ë{ 5, 0x24, _subty≥, _d0, _d1 }

	)

300 
	#D_CDCCS4
(
_subty≥
,
_d0
Ë{ 4, 0x24, _subty≥, _d0 }

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/USBDesc.h

19 
	#CDC_ENABLED


	)

20 
	#HID_ENABLED


	)

23 #ifde‡
CDC_ENABLED


24 
	#CDC_INTERFACE_COUNT
 2

	)

25 
	#CDC_ENPOINT_COUNT
 3

	)

27 
	#CDC_INTERFACE_COUNT
 0

	)

28 
	#CDC_ENPOINT_COUNT
 0

	)

31 #ifde‡
HID_ENABLED


32 
	#HID_INTERFACE_COUNT
 1

	)

33 
	#HID_ENPOINT_COUNT
 1

	)

35 
	#HID_INTERFACE_COUNT
 0

	)

36 
	#HID_ENPOINT_COUNT
 0

	)

39 
	#CDC_ACM_INTERFACE
 0

40 
	#CDC_DATA_INTERFACE
 1

41 
	#CDC_FIRST_ENDPOINT
 1

	)

42 
	#CDC_ENDPOINT_ACM
 (
CDC_FIRST_ENDPOINT
)

43 
	#CDC_ENDPOINT_OUT
 (
CDC_FIRST_ENDPOINT
+1)

	)

44 
	#CDC_ENDPOINT_IN
 (
CDC_FIRST_ENDPOINT
+2)

	)

46 
	#HID_INTERFACE
 (
CDC_ACM_INTERFACE
 + 
CDC_INTERFACE_COUNT
)

47 
	#HID_FIRST_ENDPOINT
 (
CDC_FIRST_ENDPOINT
 + 
CDC_ENPOINT_COUNT
)

	)

48 
	#HID_ENDPOINT_INT
 (
HID_FIRST_ENDPOINT
)

	)

50 
	#INTERFACE_COUNT
 (
MSC_INTERFACE
 + 
MSC_INTERFACE_COUNT
)

	)

52 #ifde‡
CDC_ENABLED


53 
	#CDC_RX
 
CDC_ENDPOINT_OUT


	)

54 
	#CDC_TX
 
CDC_ENDPOINT_IN


	)

57 #ifde‡
HID_ENABLED


58 
	#HID_TX
 
HID_ENDPOINT_INT


	)

61 
	#IMANUFACTURER
 1

	)

62 
	#IPRODUCT
 2

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/Udp.h

35 #i‚de‡
udp_h


36 
	#udp_h


	)

38 
	~<Såóm.h
>

39 
	~<IPAddªss.h
>

41 ˛as†
	cUDP
 : 
public
 
Såóm
 {

43 
public
:

44 
vútuÆ
 
uöt8_t
 
begö
(
uöt16_t
) =0;

45 
vútuÆ
 
°›
() =0;

51 
vútuÆ
 
begöPackë
(
IPAddªss
 
ù
, 
uöt16_t
 
p‹t
) =0;

54 
vútuÆ
 
begöPackë
(c⁄° *
ho°
, 
uöt16_t
 
p‹t
) =0;

57 
vútuÆ
 
ídPackë
() =0;

59 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
) =0;

61 
vútuÆ
 
size_t
 
wrôe
(c⁄° 
uöt8_t
 *
buf„r
, size_à
size
) =0;

65 
vútuÆ
 
∑r£Packë
() =0;

67 
vútuÆ
 
avaûabÀ
() =0;

69 
vútuÆ
 
ªad
() =0;

72 
vútuÆ
 
ªad
(* 
buf„r
, 
size_t
 
Àn
) =0;

75 
vútuÆ
 
ªad
(* 
buf„r
, 
size_t
 
Àn
) =0;

77 
vútuÆ
 
≥ek
() =0;

78 
vútuÆ
 
Êush
() =0;

81 
vútuÆ
 
IPAddªss
 
ªmŸeIP
() =0;

83 
vútuÆ
 
uöt16_t
 
ªmŸeP‹t
() =0;

84 
	m¥Ÿe˘ed
:

85 
uöt8_t
* 
	$øwIPAddªss
(
IPAddªss
& 
addr
Ë{ áddr.
	`øw_addªss
(); };

86 
	}
};

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/WCharacter.h

20 #i‚de‡
Ch¨a˘î_h


21 
	#Ch¨a˘î_h


	)

23 
	~<˘y≥.h
>

26 
ölöe
 
boﬁón
 
	$isAÕhaNumîic
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

27 
ölöe
 
boﬁón
 
	$isAÕha
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
ölöe
 
boﬁón
 
	$isAscii
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

29 
ölöe
 
boﬁón
 
	$isWhôe•a˚
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

30 
ölöe
 
boﬁón
 
	$isC⁄åﬁ
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

31 
ölöe
 
boﬁón
 
	$isDigô
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

32 
ölöe
 
boﬁón
 
	$isGøph
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

33 
ölöe
 
boﬁón
 
	$isLowîCa£
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

34 
ölöe
 
boﬁón
 
	$isPröèbÀ
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

35 
ölöe
 
boﬁón
 
	$isPun˘
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

36 
ölöe
 
boﬁón
 
	$isS∑˚
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

37 
ölöe
 
boﬁón
 
	$isUµîCa£
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

38 
ölöe
 
boﬁón
 
	$isHexadecimÆDigô
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

39 
ölöe
 
	$toAscii
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

40 
ölöe
 
	$toLowîCa£
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

41 
ölöe
 
	$toUµîCa£
(
c
)
	`__©åibuã__
((
Æways_ölöe
));

46 
ölöe
 
boﬁón
 
	$isAÕhaNumîic
(
c
)

48  ( 
	`iß um
(
c
Ë=0 ? 
Ál£
 : 
åue
);

49 
	}
}

54 
ölöe
 
boﬁón
 
	$isAÕha
(
c
)

56  ( 
	`ißÕha
(
c
Ë=0 ? 
Ál£
 : 
åue
);

57 
	}
}

62 
ölöe
 
boﬁón
 
	$isAscii
(
c
)

64  ( 
	`ißscii
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

65 
	}
}

69 
ölöe
 
boﬁón
 
	$isWhôe•a˚
(
c
)

71  ( 
	`isbœnk
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

72 
	}
}

76 
ölöe
 
boﬁón
 
	$isC⁄åﬁ
(
c
)

78  ( 
	`is˙ål
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

79 
	}
}

83 
ölöe
 
boﬁón
 
	$isDigô
(
c
)

85  ( 
	`isdigô
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

86 
	}
}

90 
ölöe
 
boﬁón
 
	$isGøph
(
c
)

92  ( 
	`isgøph
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

93 
	}
}

97 
ölöe
 
boﬁón
 
	$isLowîCa£
(
c
)

99  (
	`i¶owî
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

100 
	}
}

104 
ölöe
 
boﬁón
 
	$isPröèbÀ
(
c
)

106  ( 
	`i•röt
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

107 
	}
}

112 
ölöe
 
boﬁón
 
	$isPun˘
(
c
)

114  ( 
	`i•un˘
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

115 
	}
}

121 
ölöe
 
boﬁón
 
	$isS∑˚
(
c
)

123  ( 
	`is•a˚
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

124 
	}
}

128 
ölöe
 
boﬁón
 
	$isUµîCa£
(
c
)

130  ( 
	`isuµî
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

131 
	}
}

136 
ölöe
 
boﬁón
 
	$isHexadecimÆDigô
(
c
)

138  ( 
	`isxdigô
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

139 
	}
}

144 
ölöe
 
	$toAscii
(
c
)

146  
	`tﬂscii
 (
c
);

147 
	}
}

156 
ölöe
 
	$toLowîCa£
(
c
)

158  
	`tﬁowî
 (
c
);

159 
	}
}

163 
ölöe
 
	$toUµîCa£
(
c
)

165  
	`touµî
 (
c
);

166 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/WInterrupts.c

27 
	~<öây≥s.h
>

28 
	~<avr/io.h
>

29 
	~<avr/öãºu±.h
>

30 
	~<avr/pgm•a˚.h
>

31 
	~<°dio.h
>

33 
	~"wúög_¥iv©e.h
"

35 vﬁ©ûê
voidFuncPå
 
	götFunc
[
EXTERNAL_NUM_INTERRUPTS
];

38 
©èchI¡îru±
(
uöt8_t
 
öãºu±Num
, (*
u£rFunc
)(), 
mode
) {

39 if(
öãºu±Num
 < 
EXTERNAL_NUM_INTERRUPTS
) {

40 
ötFunc
[
öãºu±Num
] = 
u£rFunc
;

49 
öãºu±Num
) {

50 #i‡
	`deföed
(
__AVR_ATmega32U4__
)

55 
EICRA
 = (EICRA & ~((1<<
ISC00
Ë| (1<<
ISC01
))Ë| (
mode
 << ISC00);

56 
EIMSK
 |(1<<
INT0
);

59 
EICRA
 = (EICRA & ~((1<<
ISC10
Ë| (1<<
ISC11
))Ë| (
mode
 << ISC10);

60 
EIMSK
 |(1<<
INT1
);

63 
EICRA
 = (EICRA & ~((1<<
ISC20
Ë| (1<<
ISC21
))Ë| (
mode
 << ISC20);

64 
EIMSK
 |(1<<
INT2
);

67 
EICRA
 = (EICRA & ~((1<<
ISC30
Ë| (1<<
ISC31
))Ë| (
mode
 << ISC30);

68 
EIMSK
 |(1<<
INT3
);

70 #ñi‡
	`deföed
(
EICRA
Ë&& deföed(
EICRB
Ë&& deföed(
EIMSK
)

72 
EICRA
 = (EICRA & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

73 
EIMSK
 |(1 << 
INT0
);

76 
EICRA
 = (EICRA & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

77 
EIMSK
 |(1 << 
INT1
);

80 
EICRA
 = (EICRA & ~((1 << 
ISC20
Ë| (1 << 
ISC21
))Ë| (
mode
 << ISC20);

81 
EIMSK
 |(1 << 
INT2
);

84 
EICRA
 = (EICRA & ~((1 << 
ISC30
Ë| (1 << 
ISC31
))Ë| (
mode
 << ISC30);

85 
EIMSK
 |(1 << 
INT3
);

88 
EICRB
 = (EICRB & ~((1 << 
ISC40
Ë| (1 << 
ISC41
))Ë| (
mode
 << ISC40);

89 
EIMSK
 |(1 << 
INT4
);

92 
EICRB
 = (EICRB & ~((1 << 
ISC50
Ë| (1 << 
ISC51
))Ë| (
mode
 << ISC50);

93 
EIMSK
 |(1 << 
INT5
);

96 
EICRB
 = (EICRB & ~((1 << 
ISC60
Ë| (1 << 
ISC61
))Ë| (
mode
 << ISC60);

97 
EIMSK
 |(1 << 
INT6
);

100 
EICRB
 = (EICRB & ~((1 << 
ISC70
Ë| (1 << 
ISC71
))Ë| (
mode
 << ISC70);

101 
EIMSK
 |(1 << 
INT7
);

105 #i‡
	`deföed
(
EICRA
Ë&& deföed(
ISC00
Ë&& deföed(
EIMSK
)

106 
EICRA
 = (EICRA & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

107 
EIMSK
 |(1 << 
INT0
);

108 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC00
Ë&& deföed(
GICR
)

109 
MCUCR
 = (MCUCR & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

110 
GICR
 |(1 << 
INT0
);

111 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC00
Ë&& deföed(
GIMSK
)

112 
MCUCR
 = (MCUCR & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

113 
GIMSK
 |(1 << 
INT0
);

115 #îr‹ 
©èchI¡îru±
 
nŸ
 
föished
 
this
 
	`CPU
 (0)

120 #i‡
	`deföed
(
EICRA
Ë&& deföed(
ISC10
Ë&& deföed(
ISC11
Ë&& deföed(
EIMSK
)

121 
EICRA
 = (EICRA & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

122 
EIMSK
 |(1 << 
INT1
);

123 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC10
Ë&& deföed(
ISC11
Ë&& deföed(
GICR
)

124 
MCUCR
 = (MCUCR & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

125 
GICR
 |(1 << 
INT1
);

126 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC10
Ë&& deföed(
GIMSK
) && defined(GIMSK)

127 
MCUCR
 = (MCUCR & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

128 
GIMSK
 |(1 << 
INT1
);

130 #w¨nög 
©èchI¡îru±
 
may
 
√ed
 
some
 
m‹e
 
w‹k
 
this
 
	`˝u
 (1)

135 #i‡
	`deföed
(
EICRA
Ë&& deföed(
ISC20
Ë&& deföed(
ISC21
Ë&& deföed(
EIMSK
)

136 
EICRA
 = (EICRA & ~((1 << 
ISC20
Ë| (1 << 
ISC21
))Ë| (
mode
 << ISC20);

137 
EIMSK
 |(1 << 
INT2
);

138 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC20
Ë&& deföed(
ISC21
Ë&& deföed(
GICR
)

139 
MCUCR
 = (MCUCR & ~((1 << 
ISC20
Ë| (1 << 
ISC21
))Ë| (
mode
 << ISC20);

140 
GICR
 |(1 << 
INT2
);

141 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC20
Ë&& deföed(
GIMSK
) && defined(GIMSK)

142 
MCUCR
 = (MCUCR & ~((1 << 
ISC20
Ë| (1 << 
ISC21
))Ë| (
mode
 << ISC20);

143 
GIMSK
 |(1 << 
INT2
);

149 
	}
}

151 
	$dëachI¡îru±
(
uöt8_t
 
öãºu±Num
) {

152 if(
öãºu±Num
 < 
EXTERNAL_NUM_INTERRUPTS
) {

156 
öãºu±Num
) {

157 #i‡
	`deföed
(
__AVR_ATmega32U4__
)

159 
EIMSK
 &~(1<<
INT0
);

162 
EIMSK
 &~(1<<
INT1
);

165 
EIMSK
 &~(1<<
INT2
);

168 
EIMSK
 &~(1<<
INT3
);

170 #ñi‡
	`deföed
(
EICRA
Ë&& deföed(
EICRB
Ë&& deföed(
EIMSK
)

172 
EIMSK
 &~(1 << 
INT0
);

175 
EIMSK
 &~(1 << 
INT1
);

178 
EIMSK
 &~(1 << 
INT2
);

181 
EIMSK
 &~(1 << 
INT3
);

184 
EIMSK
 &~(1 << 
INT4
);

187 
EIMSK
 &~(1 << 
INT5
);

190 
EIMSK
 &~(1 << 
INT6
);

193 
EIMSK
 &~(1 << 
INT7
);

197 #i‡
	`deföed
(
EIMSK
Ë&& deföed(
INT0
)

198 
EIMSK
 &~(1 << 
INT0
);

199 #ñi‡
	`deföed
(
GICR
Ë&& deföed(
ISC00
)

200 
GICR
 &~(1 << 
INT0
);

201 #ñi‡
	`deföed
(
GIMSK
Ë&& deföed(
INT0
)

202 
GIMSK
 &~(1 << 
INT0
);

204 #îr‹ 
dëachI¡îru±
 
nŸ
 
föished
 
this
 
˝u


209 #i‡
	`deföed
(
EIMSK
Ë&& deföed(
INT1
)

210 
EIMSK
 &~(1 << 
INT1
);

211 #ñi‡
	`deföed
(
GICR
Ë&& deföed(
INT1
)

212 
GICR
 &~(1 << 
INT1
);

213 #ñi‡
	`deföed
(
GIMSK
Ë&& deföed(
INT1
)

214 
GIMSK
 &~(1 << 
INT1
);

216 #w¨nög 
dëachI¡îru±
 
may
 
√ed
 
some
 
m‹e
 
w‹k
 
this
 
	`˝u
 (1)

222 
ötFunc
[
öãºu±Num
] = 0;

224 
	}
}

232 #i‡
deföed
(
__AVR_ATmega32U4__
)

233 
	$SIGNAL
(
INT0_ve˘
) {

234 if(
ötFunc
[
EXTERNAL_INT_0
])

235 
ötFunc
[
EXTERNAL_INT_0
]();

236 
	}
}

238 
	$SIGNAL
(
INT1_ve˘
) {

239 if(
ötFunc
[
EXTERNAL_INT_1
])

240 
ötFunc
[
EXTERNAL_INT_1
]();

241 
	}
}

243 
	$SIGNAL
(
INT2_ve˘
) {

244 if(
ötFunc
[
EXTERNAL_INT_2
])

245 
ötFunc
[
EXTERNAL_INT_2
]();

246 
	}
}

248 
	$SIGNAL
(
INT3_ve˘
) {

249 if(
ötFunc
[
EXTERNAL_INT_3
])

250 
ötFunc
[
EXTERNAL_INT_3
]();

251 
	}
}

253 #ñi‡
deföed
(
EICRA
Ë&& deföed(
EICRB
)

255 
	$SIGNAL
(
INT0_ve˘
) {

256 if(
ötFunc
[
EXTERNAL_INT_2
])

257 
ötFunc
[
EXTERNAL_INT_2
]();

258 
	}
}

260 
	$SIGNAL
(
INT1_ve˘
) {

261 if(
ötFunc
[
EXTERNAL_INT_3
])

262 
ötFunc
[
EXTERNAL_INT_3
]();

263 
	}
}

265 
	$SIGNAL
(
INT2_ve˘
) {

266 if(
ötFunc
[
EXTERNAL_INT_4
])

267 
ötFunc
[
EXTERNAL_INT_4
]();

268 
	}
}

270 
	$SIGNAL
(
INT3_ve˘
) {

271 if(
ötFunc
[
EXTERNAL_INT_5
])

272 
ötFunc
[
EXTERNAL_INT_5
]();

273 
	}
}

275 
	$SIGNAL
(
INT4_ve˘
) {

276 if(
ötFunc
[
EXTERNAL_INT_0
])

277 
ötFunc
[
EXTERNAL_INT_0
]();

278 
	}
}

280 
	$SIGNAL
(
INT5_ve˘
) {

281 if(
ötFunc
[
EXTERNAL_INT_1
])

282 
ötFunc
[
EXTERNAL_INT_1
]();

283 
	}
}

285 
	$SIGNAL
(
INT6_ve˘
) {

286 if(
ötFunc
[
EXTERNAL_INT_6
])

287 
ötFunc
[
EXTERNAL_INT_6
]();

288 
	}
}

290 
	$SIGNAL
(
INT7_ve˘
) {

291 if(
ötFunc
[
EXTERNAL_INT_7
])

292 
ötFunc
[
EXTERNAL_INT_7
]();

293 
	}
}

297 
	$SIGNAL
(
INT0_ve˘
) {

298 if(
ötFunc
[
EXTERNAL_INT_0
])

299 
ötFunc
[
EXTERNAL_INT_0
]();

300 
	}
}

302 
	$SIGNAL
(
INT1_ve˘
) {

303 if(
ötFunc
[
EXTERNAL_INT_1
])

304 
ötFunc
[
EXTERNAL_INT_1
]();

305 
	}
}

307 #i‡
deföed
(
EICRA
Ë&& deföed(
ISC20
)

308 
	$SIGNAL
(
INT2_ve˘
) {

309 if(
ötFunc
[
EXTERNAL_INT_2
])

310 
ötFunc
[
EXTERNAL_INT_2
]();

311 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/WMath.cpp

27 
	~"°dlib.h
"

30 
	$øndomSìd
(
£ed
)

32 i‡(
£ed
 != 0) {

33 
	`§™dom
(
£ed
);

35 
	}
}

37 
	$øndom
(
howbig
)

39 i‡(
howbig
 == 0) {

42  
	`øndom
(Ë% 
howbig
;

43 
	}
}

45 
	$øndom
(
howsmÆl
, 
howbig
)

47 i‡(
howsmÆl
 >
howbig
) {

48  
howsmÆl
;

50 
diff
 = 
howbig
 - 
howsmÆl
;

51  
	`øndom
(
diff
Ë+ 
howsmÆl
;

52 
	}
}

54 
	$m≠
(
x
, 
ö_mö
, 
ö_max
, 
out_mö
, 
out_max
)

56  (
x
 - 
ö_mö
Ë* (
out_max
 - 
out_mö
Ë/ (
ö_max
 - in_min) + out_min;

57 
	}
}

59 
	$makeW‹d
(
w
Ë{  w; 
	}
}

60 
	$makeW‹d
(
h
, 
l
Ë{  (h << 8Ë|Ü; 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/WString.cpp

22 
	~"WSåög.h
"

29 
	gSåög
::
	$Såög
(c⁄° *
c°r
)

31 
	`öô
();

32 i‡(
c°r
Ë
	`c›y
(c°r, 
	`°æí
(cstr));

33 
	}
}

35 
	gSåög
::
	$Såög
(c⁄° 
Såög
 &
vÆue
)

37 
	`öô
();

38 *
this
 = 
vÆue
;

39 
	}
}

41 #ifde‡
__GXX_EXPERIMENTAL_CXX0X__


42 
	gSåög
::
	$Såög
(
Såög
 &&
rvÆ
)

44 
	`öô
();

45 
	`move
(
rvÆ
);

46 
	}
}

47 
	gSåög
::
	$Såög
(
SåögSumHñ≥r
 &&
rvÆ
)

49 
	`öô
();

50 
	`move
(
rvÆ
);

51 
	}
}

54 
	gSåög
::
	$Såög
(
c
)

56 
	`öô
();

57 
buf
[2];

58 
buf
[0] = 
c
;

59 
buf
[1] = 0;

60 *
this
 = 
buf
;

61 
	}
}

63 
	gSåög
::
	$Såög
(
vÆue
, 
ba£
)

65 
	`öô
();

66 
buf
[9];

67 
	`utﬂ
(
vÆue
, 
buf
, 
ba£
);

68 *
this
 = 
buf
;

69 
	}
}

71 
	gSåög
::
	$Såög
(
vÆue
, 
ba£
)

73 
	`öô
();

74 
buf
[18];

75 
	`ôﬂ
(
vÆue
, 
buf
, 
ba£
);

76 *
this
 = 
buf
;

77 
	}
}

79 
	gSåög
::
	$Såög
(
vÆue
, 
ba£
)

81 
	`öô
();

82 
buf
[17];

83 
	`utﬂ
(
vÆue
, 
buf
, 
ba£
);

84 *
this
 = 
buf
;

85 
	}
}

87 
	gSåög
::
	$Såög
(
vÆue
, 
ba£
)

89 
	`öô
();

90 
buf
[34];

91 
	`…ﬂ
(
vÆue
, 
buf
, 
ba£
);

92 *
this
 = 
buf
;

93 
	}
}

95 
	gSåög
::
	$Såög
(
vÆue
, 
ba£
)

97 
	`öô
();

98 
buf
[33];

99 
	`u…ﬂ
(
vÆue
, 
buf
, 
ba£
);

100 *
this
 = 
buf
;

101 
	}
}

103 
	gSåög
::~
	$Såög
()

105 
	`‰ì
(
buf„r
);

106 
	}
}

112 
ölöe
 
	gSåög
::
	$öô
()

114 
buf„r
 = 
NULL
;

115 
ˇ∑côy
 = 0;

116 
Àn
 = 0;

117 
Êags
 = 0;

118 
	}
}

120 
	gSåög
::
	$övÆid©e
()

122 i‡(
buf„r
Ë
	`‰ì
(buffer);

123 
buf„r
 = 
NULL
;

124 
ˇ∑côy
 = 
Àn
 = 0;

125 
	}
}

127 
	gSåög
::
	$ª£rve
(
size
)

129 i‡(
buf„r
 && 
ˇ∑côy
 >
size
)  1;

130 i‡(
	`ch™geBuf„r
(
size
)) {

131 i‡(
Àn
 =0Ë
buf„r
[0] = 0;

135 
	}
}

137 
	gSåög
::
	$ch™geBuf„r
(
maxSåLí
)

139 *
√wbuf„r
 = (*)
	`ªÆloc
(
buf„r
, 
maxSåLí
 + 1);

140 i‡(
√wbuf„r
) {

141 
buf„r
 = 
√wbuf„r
;

142 
ˇ∑côy
 = 
maxSåLí
;

146 
	}
}

152 
	gSåög
 & Såög::
	$c›y
(c⁄° *
c°r
, 
Àngth
)

154 i‡(!
	`ª£rve
(
Àngth
)) {

155 
	`övÆid©e
();

156  *
this
;

158 
Àn
 = 
Àngth
;

159 
	`°r˝y
(
buf„r
, 
c°r
);

160  *
this
;

161 
	}
}

163 #ifde‡
__GXX_EXPERIMENTAL_CXX0X__


164 
	gSåög
::
	$move
(
Såög
 &
rhs
)

166 i‡(
buf„r
) {

167 i‡(
ˇ∑côy
 >
rhs
.
Àn
) {

168 
	`°r˝y
(
buf„r
, 
rhs
.buffer);

169 
Àn
 = 
rhs
.len;

170 
rhs
.
Àn
 = 0;

173 
	`‰ì
(
buf„r
);

176 
buf„r
 = 
rhs
.buffer;

177 
ˇ∑côy
 = 
rhs
.capacity;

178 
Àn
 = 
rhs
.len;

179 
rhs
.
buf„r
 = 
NULL
;

180 
rhs
.
ˇ∑côy
 = 0;

181 
rhs
.
Àn
 = 0;

182 
	}
}

185 
	gSåög
 & Såög::
›î©‹
 = (c⁄° 
Såög
 &
rhs
)

187 i‡(
this
 =&
rhs
)  *this;

189 i‡(
	grhs
.
	gbuf„r
Ë
c›y
(
rhs
.
buf„r
,Ñhs.
Àn
);

190 
övÆid©e
();

192  *
	gthis
;

195 #ifde‡
__GXX_EXPERIMENTAL_CXX0X__


196 
	gSåög
 & Såög::
›î©‹
 = (
Såög
 &&
rvÆ
)

198 i‡(
this
 !&
rvÆ
Ë
move
(rval);

199  *
	gthis
;

202 
	gSåög
 & Såög::
›î©‹
 = (
SåögSumHñ≥r
 &&
rvÆ
)

204 i‡(
this
 !&
rvÆ
Ë
move
(rval);

205  *
	gthis
;

209 
	gSåög
 & Såög::
›î©‹
 = (c⁄° *
c°r
)

211 i‡(
c°r
Ë
c›y
(c°r, 
°æí
(cstr));

212 
övÆid©e
();

214  *
	gthis
;

221 
	gSåög
::
	$c⁄ˇt
(c⁄° 
Såög
 &
s
)

223  
	`c⁄ˇt
(
s
.
buf„r
, s.
Àn
);

224 
	}
}

226 
	gSåög
::
	$c⁄ˇt
(c⁄° *
c°r
, 
Àngth
)

228 
√wÀn
 = 
Àn
 + 
Àngth
;

229 i‡(!
c°r
)  0;

230 i‡(
Àngth
 == 0)  1;

231 i‡(!
	`ª£rve
(
√wÀn
))  0;

232 
	`°r˝y
(
buf„r
 + 
Àn
, 
c°r
);

233 
Àn
 = 
√wÀn
;

235 
	}
}

237 
	gSåög
::
	$c⁄ˇt
(c⁄° *
c°r
)

239 i‡(!
c°r
)  0;

240  
	`c⁄ˇt
(
c°r
, 
	`°æí
(cstr));

241 
	}
}

243 
	gSåög
::
	$c⁄ˇt
(
c
)

245 
buf
[2];

246 
buf
[0] = 
c
;

247 
buf
[1] = 0;

248  
	`c⁄ˇt
(
buf
, 1);

249 
	}
}

251 
	gSåög
::
	$c⁄ˇt
(
num
)

253 
buf
[4];

254 
	`ôﬂ
(
num
, 
buf
, 10);

255  
	`c⁄ˇt
(
buf
, 
	`°æí
(buf));

256 
	}
}

258 
	gSåög
::
	$c⁄ˇt
(
num
)

260 
buf
[7];

261 
	`ôﬂ
(
num
, 
buf
, 10);

262  
	`c⁄ˇt
(
buf
, 
	`°æí
(buf));

263 
	}
}

265 
	gSåög
::
	$c⁄ˇt
(
num
)

267 
buf
[6];

268 
	`utﬂ
(
num
, 
buf
, 10);

269  
	`c⁄ˇt
(
buf
, 
	`°æí
(buf));

270 
	}
}

272 
	gSåög
::
	$c⁄ˇt
(
num
)

274 
buf
[12];

275 
	`…ﬂ
(
num
, 
buf
, 10);

276  
	`c⁄ˇt
(
buf
, 
	`°æí
(buf));

277 
	}
}

279 
	gSåög
::
	$c⁄ˇt
(
num
)

281 
buf
[11];

282 
	`u…ﬂ
(
num
, 
buf
, 10);

283  
	`c⁄ˇt
(
buf
, 
	`°æí
(buf));

284 
	}
}

290 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, c⁄° 
	gSåög
 &
	grhs
)

292 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

293 i‡(!
	ga
.
c⁄ˇt
(
rhs
.
buf„r
,Ñhs.
Àn
)Ëa.
övÆid©e
();

294  
	ga
;

297 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, c⁄° *
	gc°r
)

299 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

300 i‡(!
	gc°r
 || !
	ga
.
c⁄ˇt
(
c°r
, 
°æí
(c°r))Ëa.
övÆid©e
();

301  
	ga
;

304 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gc
)

306 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

307 i‡(!
	ga
.
c⁄ˇt
(
c
)Ëa.
övÆid©e
();

308  
	ga
;

311 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
)

313 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

314 i‡(!
	ga
.
c⁄ˇt
(
num
)Ëa.
övÆid©e
();

315  
	ga
;

318 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
)

320 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

321 i‡(!
	ga
.
c⁄ˇt
(
num
)Ëa.
övÆid©e
();

322  
	ga
;

325 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
)

327 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

328 i‡(!
	ga
.
c⁄ˇt
(
num
)Ëa.
övÆid©e
();

329  
	ga
;

332 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
)

334 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

335 i‡(!
	ga
.
c⁄ˇt
(
num
)Ëa.
övÆid©e
();

336  
	ga
;

339 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
)

341 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

342 i‡(!
	ga
.
c⁄ˇt
(
num
)Ëa.
övÆid©e
();

343  
	ga
;

350 
	gSåög
::
	$com∑ªTo
(c⁄° 
Såög
 &
s
) const

352 i‡(!
buf„r
 || !
s
.buffer) {

353 i‡(
s
.
buf„r
 && s.
Àn
 > 0)  0 - *(*)s.buffer;

354 i‡(
buf„r
 && 
Àn
 > 0)  *(*)buffer;

357  
	`°rcmp
(
buf„r
, 
s
.buffer);

358 
	}
}

360 
	gSåög
::
	$equÆs
(c⁄° 
Såög
 &
s2
) const

362  (
Àn
 =
s2
.À¿&& 
	`com∑ªTo
(s2) == 0);

363 
	}
}

365 
	gSåög
::
	$equÆs
(c⁄° *
c°r
) const

367 i‡(
Àn
 =0Ë (
c°r
 =
NULL
 || *cstr == 0);

368 i‡(
c°r
 =
NULL
Ë 
buf„r
[0] == 0;

369  
	`°rcmp
(
buf„r
, 
c°r
) == 0;

370 
	}
}

372 
	gSåög
::
›î©‹
<(c⁄° 
Såög
 &
rhs
) const

374  
com∑ªTo
(
rhs
) < 0;

377 
	gSåög
::
›î©‹
>(c⁄° 
Såög
 &
rhs
) const

379  
com∑ªTo
(
rhs
) > 0;

382 
	gSåög
::
›î©‹
<=(c⁄° 
Såög
 &
rhs
) const

384  
com∑ªTo
(
rhs
) <= 0;

387 
	gSåög
::
›î©‹
>=(c⁄° 
Såög
 &
rhs
) const

389  
com∑ªTo
(
rhs
) >= 0;

392 
	gSåög
::
	$equÆsIgn‹eCa£
–c⁄° 
Såög
 &
s2
 ) const

394 i‡(
this
 =&
s2
)  1;

395 i‡(
Àn
 !
s2
.len)  0;

396 i‡(
Àn
 == 0)  1;

397 c⁄° *
p1
 = 
buf„r
;

398 c⁄° *
p2
 = 
s2
.
buf„r
;

399 *
p1
) {

400 i‡(
	`tﬁowî
(*
p1
++Ë!tﬁowî(*
p2
++))  0;

403 
	}
}

405 
	gSåög
::
	$°¨tsWôh
–c⁄° 
Såög
 &
s2
 ) const

407 i‡(
Àn
 < 
s2
.len)  0;

408  
	`°¨tsWôh
(
s2
, 0);

409 
	}
}

411 
	gSåög
::
	$°¨tsWôh
–c⁄° 
Såög
 &
s2
, 
off£t
 ) const

413 i‡(
off£t
 > 
Àn
 - 
s2
.À¿|| !
buf„r
 || !s2.buffer)  0;

414  
	`°∫cmp
–&
buf„r
[
off£t
], 
s2
.buf„r, s2.
Àn
 ) == 0;

415 
	}
}

417 
	gSåög
::
	$ídsWôh
–c⁄° 
Såög
 &
s2
 ) const

419 i‡–
Àn
 < 
s2
.À¿|| !
buf„r
 || !s2.buffer)  0;

420  
	`°rcmp
(&
buf„r
[
Àn
 - 
s2
.len], s2.buffer) == 0;

421 
	}
}

427 
	gSåög
::
	$ch¨At
(
loc
) const

429  
›î©‹
[](
loc
);

430 
	}
}

432 
	gSåög
::
	$£tCh¨At
(
loc
, 
c
)

434 i‡(
loc
 < 
Àn
Ë
buf„r
[loc] = 
c
;

435 
	}
}

437 & 
	gSåög
::
›î©‹
[](
ödex
)

439 
dummy_wrôabÀ_ch¨
;

440 i‡(
	gödex
 >
Àn
 || !
buf„r
) {

441 
dummy_wrôabÀ_ch¨
 = 0;

442  
	gdummy_wrôabÀ_ch¨
;

444  
	gbuf„r
[
ödex
];

447 
	gSåög
::
›î©‹
[]–
ödex
 ) const

449 i‡(
ödex
 >
Àn
 || !
buf„r
)  0;

450  
	gbuf„r
[
ödex
];

453 
	gSåög
::
	$gëByãs
(*
buf
, 
bufsize
, 
ödex
) const

455 i‡(!
bufsize
 || !
buf
) ;

456 i‡(
ödex
 >
Àn
) {

457 
buf
[0] = 0;

460 
n
 = 
bufsize
 - 1;

461 i‡(
n
 > 
Àn
 - 
ödex
)Ç =Üen - index;

462 
	`°∫˝y
((*)
buf
, 
buf„r
 + 
ödex
, 
n
);

463 
buf
[
n
] = 0;

464 
	}
}

470 
	gSåög
::
	$ödexOf
(
c
) const

472  
	`ödexOf
(
c
, 0);

473 
	}
}

475 
	gSåög
::
	$ödexOf
–
ch
, 
‰omIndex
 ) const

477 i‡(
‰omIndex
 >
Àn
)  -1;

478 c⁄° * 
ãmp
 = 
	`°rchr
(
buf„r
 + 
‰omIndex
, 
ch
);

479 i‡(
ãmp
 =
NULL
)  -1;

480  
ãmp
 - 
buf„r
;

481 
	}
}

483 
	gSåög
::
	$ödexOf
(c⁄° 
Såög
 &
s2
) const

485  
	`ödexOf
(
s2
, 0);

486 
	}
}

488 
	gSåög
::
	$ödexOf
(c⁄° 
Såög
 &
s2
, 
‰omIndex
) const

490 i‡(
‰omIndex
 >
Àn
)  -1;

491 c⁄° *
found
 = 
	`°r°r
(
buf„r
 + 
‰omIndex
, 
s2
.buffer);

492 i‡(
found
 =
NULL
)  -1;

493  
found
 - 
buf„r
;

494 
	}
}

496 
	gSåög
::
	$œ°IndexOf
–
theCh¨
 ) const

498  
	`œ°IndexOf
(
theCh¨
, 
Àn
 - 1);

499 
	}
}

501 
	gSåög
::
	$œ°IndexOf
(
ch
, 
‰omIndex
) const

503 i‡(
‰omIndex
 >
Àn
)  -1;

504 
ãmpch¨
 = 
buf„r
[
‰omIndex
 + 1];

505 
buf„r
[
‰omIndex
 + 1] = '\0';

506 * 
ãmp
 = 
	`°ºchr
–
buf„r
, 
ch
 );

507 
buf„r
[
‰omIndex
 + 1] = 
ãmpch¨
;

508 i‡(
ãmp
 =
NULL
)  -1;

509  
ãmp
 - 
buf„r
;

510 
	}
}

512 
	gSåög
::
	$œ°IndexOf
(c⁄° 
Såög
 &
s2
) const

514  
	`œ°IndexOf
(
s2
, 
Àn
 - s2.len);

515 
	}
}

517 
	gSåög
::
	$œ°IndexOf
(c⁄° 
Såög
 &
s2
, 
‰omIndex
) const

519 i‡(
s2
.
Àn
 == 0 ||Üen == 0 || s2.len >Üen)  -1;

520 i‡(
‰omIndex
 >
Àn
) fromIndex =Üen - 1;

521 
found
 = -1;

522 *
p
 = 
buf„r
;Ö <buf„∏+ 
‰omIndex
;Ö++) {

523 
p
 = 
	`°r°r
’, 
s2
.
buf„r
);

524 i‡(!
p
) ;

525 i‡(()(
p
 - 
buf„r
Ë<
‰omIndex
Ë
found
 =Ö - buffer;

527  
found
;

528 
	}
}

530 
Såög
 
	gSåög
::
	$sub°rög
–
À·
 ) const

532  
	`sub°rög
(
À·
, 
Àn
);

533 
	}
}

535 
Såög
 
	gSåög
::
	$sub°rög
(
À·
, 
right
) const

537 i‡(
À·
 > 
right
) {

538 
ãmp
 = 
right
;

539 
right
 = 
À·
;

540 
À·
 = 
ãmp
;

542 
Såög
 
out
;

543 i‡(
À·
 > 
Àn
Ë 
out
;

544 i‡(
right
 > 
Àn
)Ñight =Üen;

545 
ãmp
 = 
buf„r
[
right
];

546 
buf„r
[
right
] = '\0';

547 
out
 = 
buf„r
 + 
À·
;

548 
buf„r
[
right
] = 
ãmp
;

549  
out
;

550 
	}
}

556 
	gSåög
::
	$ª∂a˚
(
föd
, 
ª∂a˚
)

558 i‡(!
buf„r
) ;

559 *
p
 = 
buf„r
; *p;Ö++) {

560 i‡(*
p
 =
föd
Ë*∞
ª∂a˚
;

562 
	}
}

564 
	gSåög
::
	$ª∂a˚
(c⁄° 
Såög
& 
föd
, c⁄° Såög& 
ª∂a˚
)

566 i‡(
Àn
 =0 || 
föd
.len == 0) ;

567 
diff
 = 
ª∂a˚
.
Àn
 - 
föd
.len;

568 *
ªadFrom
 = 
buf„r
;

569 *
foundAt
;

570 i‡(
diff
 == 0) {

571 (
foundAt
 = 
	`°r°r
(
ªadFrom
, 
föd
.
buf„r
)Ë!
NULL
) {

572 
	`mem˝y
(
foundAt
, 
ª∂a˚
.
buf„r
,Ñïœ˚.
Àn
);

573 
ªadFrom
 = 
foundAt
 + 
ª∂a˚
.
Àn
;

575 } i‡(
diff
 < 0) {

576 *
wrôeTo
 = 
buf„r
;

577 (
foundAt
 = 
	`°r°r
(
ªadFrom
, 
föd
.
buf„r
)Ë!
NULL
) {

578 
n
 = 
foundAt
 - 
ªadFrom
;

579 
	`mem˝y
(
wrôeTo
, 
ªadFrom
, 
n
);

580 
wrôeTo
 +
n
;

581 
	`mem˝y
(
wrôeTo
, 
ª∂a˚
.
buf„r
,Ñïœ˚.
Àn
);

582 
wrôeTo
 +
ª∂a˚
.
Àn
;

583 
ªadFrom
 = 
foundAt
 + 
föd
.
Àn
;

584 
Àn
 +
diff
;

586 
	`°r˝y
(
wrôeTo
, 
ªadFrom
);

588 
size
 = 
Àn
;

589 (
foundAt
 = 
	`°r°r
(
ªadFrom
, 
föd
.
buf„r
)Ë!
NULL
) {

590 
ªadFrom
 = 
foundAt
 + 
föd
.
Àn
;

591 
size
 +
diff
;

593 i‡(
size
 =
Àn
) ;

594 i‡(
size
 > 
ˇ∑côy
 && !
	`ch™geBuf„r
(size)) ;

595 
ödex
 = 
Àn
 - 1;

596 
ödex
 >0 && (ödex = 
	`œ°IndexOf
(
föd
, index)) >= 0) {

597 
ªadFrom
 = 
buf„r
 + 
ödex
 + 
föd
.
Àn
;

598 
	`memmove
(
ªadFrom
 + 
diff
,ÑódFrom, 
Àn
 - (ªadFrom - 
buf„r
));

599 
Àn
 +
diff
;

600 
buf„r
[
Àn
] = 0;

601 
	`mem˝y
(
buf„r
 + 
ödex
, 
ª∂a˚
.buf„r,Ñïœ˚.
Àn
);

602 
ödex
--;

605 
	}
}

607 
	gSåög
::
	$toLowîCa£
()

609 i‡(!
buf„r
) ;

610 *
p
 = 
buf„r
; *p;Ö++) {

611 *
p
 = 
	`tﬁowî
(*p);

613 
	}
}

615 
	gSåög
::
	$toUµîCa£
()

617 i‡(!
buf„r
) ;

618 *
p
 = 
buf„r
; *p;Ö++) {

619 *
p
 = 
	`touµî
(*p);

621 
	}
}

623 
	gSåög
::
	$åim
()

625 i‡(!
buf„r
 || 
Àn
 == 0) ;

626 *
begö
 = 
buf„r
;

627 
	`is•a˚
(*
begö
)) begin++;

628 *
íd
 = 
buf„r
 + 
Àn
 - 1;

629 
	`is•a˚
(*
íd
Ë&&Énd >
begö
)Énd--;

630 
Àn
 = 
íd
 + 1 - 
begö
;

631 i‡(
begö
 > 
buf„r
Ë
	`mem˝y
(buf„r, begö, 
Àn
);

632 
buf„r
[
Àn
] = 0;

633 
	}
}

639 
	gSåög
::
	$toI¡
() const

641 i‡(
buf„r
Ë 
	`©ﬁ
(buffer);

643 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/WString.h

22 #i‚de‡
Såög_˛ass_h


23 
	#Såög_˛ass_h


	)

24 #ifde‡
__˝lu•lus


26 
	~<°dlib.h
>

27 
	~<°rög.h
>

28 
	~<˘y≥.h
>

29 
	~<avr/pgm•a˚.h
>

37 
˛ass
 
	g__FœshSåögHñ≥r
;

38 
	#F
(
°rög_lôîÆ
Ë(
ªöãΩªt_ˇ°
<c⁄° 
__FœshSåögHñ≥r
 *>(
	`PSTR
(°rög_lôîÆ)))

	)

42 
˛ass
 
	gSåögSumHñ≥r
;

45 ˛as†
	cSåög


50 (
	tSåög
::*
	tSåögIfHñ≥rTy≥
)() const;

51 
	$SåögIfHñ≥r
() const {}

53 
public
:

59 
	`Såög
(c⁄° *
c°r
 = "");

60 
	`Såög
(c⁄° 
Såög
 &
°r
);

61 #ifde‡
__GXX_EXPERIMENTAL_CXX0X__


62 
	`Såög
(
Såög
 &&
rvÆ
);

63 
	`Såög
(
SåögSumHñ≥r
 &&
rvÆ
);

65 
ex∂icô
 
	`Såög
(
c
);

66 
ex∂icô
 
	`Såög
(, 
ba£
=10);

67 
ex∂icô
 
	`Såög
(, 
ba£
=10);

68 
ex∂icô
 
	`Såög
(, 
ba£
=10);

69 
ex∂icô
 
	`Såög
(, 
ba£
=10);

70 
ex∂icô
 
	`Såög
(, 
ba£
=10);

71 ~
	`Såög
();

77 
	`ª£rve
(
size
);

78 
ölöe
 
	$Àngth
(Ëc⁄° { 
Àn
;
	}
}

83 
	gSåög
 & 
	g›î©‹
 = (c⁄° 
Såög
 &
rhs
);

84 
	gSåög
 & 
	g›î©‹
 = (c⁄° *
c°r
);

85 #ifde‡
__GXX_EXPERIMENTAL_CXX0X__


86 
	gSåög
 & 
	g›î©‹
 = (
Såög
 &&
rvÆ
);

87 
	gSåög
 & 
	g›î©‹
 = (
SåögSumHñ≥r
 &&
rvÆ
);

95 
c⁄ˇt
(c⁄° 
Såög
 &
°r
);

96 
c⁄ˇt
(c⁄° *
c°r
);

97 
c⁄ˇt
(
c
);

98 
c⁄ˇt
(
c
);

99 
c⁄ˇt
(
num
);

100 
c⁄ˇt
(
num
);

101 
c⁄ˇt
(
num
);

102 
c⁄ˇt
(
num
);

106 
	gSåög
 & 
	g›î©‹
 +(c⁄° 
Såög
 &
rhs
Ë{
c⁄ˇt
‘hs);  (*
	gthis
);}

107 
	gSåög
 & 
	g›î©‹
 +(c⁄° *
c°r
Ë{
c⁄ˇt
(c°r);  (*
	gthis
);}

108 
	gSåög
 & 
	g›î©‹
 +(
c
Ë{
c⁄ˇt
(c);  (*
	gthis
);}

109 
	gSåög
 & 
	g›î©‹
 +(
num
Ë{
c⁄ˇt
“um);  (*
	gthis
);}

110 
	gSåög
 & 
	g›î©‹
 +(
num
Ë{
c⁄ˇt
“um);  (*
	gthis
);}

111 
	gSåög
 & 
	g›î©‹
 +(
num
Ë{
c⁄ˇt
“um);  (*
	gthis
);}

112 
	gSåög
 & 
	g›î©‹
 +(
num
Ë{
c⁄ˇt
“um);  (*
	gthis
);}

113 
	gSåög
 & 
	g›î©‹
 +(
num
Ë{
c⁄ˇt
“um);  (*
	gthis
);}

115 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, c⁄° 
	gSåög
 &
	grhs
);

116 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, c⁄° *
	gc°r
);

117 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gc
);

118 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
);

119 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
);

120 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
);

121 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
);

122 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
);

125 
›î©‹
 
	$SåögIfHñ≥rTy≥
(Ëc⁄° {  
buf„r
 ? &
Såög
::
SåögIfHñ≥r
 : 0; 
	}
}

126 
	$com∑ªTo
(c⁄° 
Såög
 &
s
) const;

127 
	$equÆs
(c⁄° 
Såög
 &
s
) const;

128 
	$equÆs
(c⁄° *
c°r
) const;

129 
›î©‹
 =(c⁄° 
Såög
 &
rhs
Ëc⁄° { 
	`equÆs
‘hs);
	}
}

130 
	g›î©‹
 =(c⁄° *
c°r
Ëc⁄° { 
equÆs
(cstr);}

131 
	g›î©‹
 !(c⁄° 
Såög
 &
rhs
Ëc⁄° { !
equÆs
(rhs);}

132 
	g›î©‹
 !(c⁄° *
c°r
Ëc⁄° { !
equÆs
(cstr);}

133 
	g›î©‹
 < (c⁄° 
	gSåög
 &
	grhs
) const;

134 
	g›î©‹
 > (c⁄° 
	gSåög
 &
	grhs
) const;

135 
	g›î©‹
 <(c⁄° 
Såög
 &
rhs
) const;

136 
	g›î©‹
 >(c⁄° 
Såög
 &
rhs
) const;

137 
	$equÆsIgn‹eCa£
(c⁄° 
Såög
 &
s
) const;

138 
	$°¨tsWôh
–c⁄° 
Såög
 &
¥efix
) const;

139 
	$°¨tsWôh
(c⁄° 
Såög
 &
¥efix
, 
off£t
) const;

140 
	$ídsWôh
(c⁄° 
Såög
 &
suffix
) const;

143 
	$ch¨At
(
ödex
) const;

144 
	`£tCh¨At
(
ödex
, 
c
);

145 
›î©‹
 [] (
ödex
) const;

146 & 
›î©‹
 [] (
ödex
);

147 
	$gëByãs
(*
buf
, 
bufsize
, 
ödex
=0) const;

148 
	$toCh¨Aºay
(*
buf
, 
bufsize
, 
ödex
=0) const

149 {
	`gëByãs
((*)
buf
, 
bufsize
, 
ödex
);
	}
}

152 
	$ödexOf
–
ch
 ) const;

153 
	$ödexOf
–
ch
, 
‰omIndex
 ) const;

154 
	$ödexOf
–c⁄° 
Såög
 &
°r
 ) const;

155 
	$ödexOf
–c⁄° 
Såög
 &
°r
, 
‰omIndex
 ) const;

156 
	$œ°IndexOf
–
ch
 ) const;

157 
	$œ°IndexOf
–
ch
, 
‰omIndex
 ) const;

158 
	$œ°IndexOf
–c⁄° 
Såög
 &
°r
 ) const;

159 
	$œ°IndexOf
–c⁄° 
Såög
 &
°r
, 
‰omIndex
 ) const;

160 
Såög
 
	$sub°rög
–
begöIndex
 ) const;

161 
Såög
 
	$sub°rög
–
begöIndex
, 
ídIndex
 ) const;

164 
	`ª∂a˚
(
föd
, 
ª∂a˚
);

165 
	`ª∂a˚
(c⁄° 
Såög
& 
föd
, c⁄° Såög& 
ª∂a˚
);

166 
	`toLowîCa£
();

167 
	`toUµîCa£
();

168 
	`åim
();

171 
	$toI¡
() const;

173 
¥Ÿe˘ed
:

174 *
buf„r
;

175 
ˇ∑côy
;

176 
Àn
;

177 
Êags
;

178 
¥Ÿe˘ed
:

179 
	`öô
();

180 
	`övÆid©e
();

181 
	`ch™geBuf„r
(
maxSåLí
);

182 
	`c⁄ˇt
(c⁄° *
c°r
, 
Àngth
);

185 
Såög
 & 
	`c›y
(c⁄° *
c°r
, 
Àngth
);

186 #ifde‡
__GXX_EXPERIMENTAL_CXX0X__


187 
	`move
(
Såög
 &
rhs
);

189 
	}
};

191 ˛as†
	cSåögSumHñ≥r
 : 
public
 
Såög


193 
public
:

194 
	$SåögSumHñ≥r
(c⁄° 
Såög
 &
s
Ë: 
	$Såög
(
s
) {}

195 
	$SåögSumHñ≥r
(c⁄° *
p
Ë: 
	$Såög
(
p
Ë{
	}
}

196 
	$SåögSumHñ≥r
(
c
Ë: 
	$Såög
(
c
Ë{
	}
}

197 
	$SåögSumHñ≥r
(
num
Ë: 
	$Såög
(
num
Ë{
	}
}

198 
	$SåögSumHñ≥r
(
num
Ë: 
	$Såög
(
num
Ë{
	}
}

199 
	$SåögSumHñ≥r
(
num
Ë: 
	$Såög
(
num
Ë{
	}
}

200 
	$SåögSumHñ≥r
(
num
Ë: 
	$Såög
(
num
Ë{
	}
}

201 
	$SåögSumHñ≥r
(
num
Ë: 
	$Såög
(
num
Ë{
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/binary.h

1 #i‚de‡
Bö¨y_h


2 
	#Bö¨y_h


	)

4 
	#B0
 0

	)

5 
	#B00
 0

	)

6 
	#B000
 0

	)

7 
	#B0000
 0

	)

8 
	#B00000
 0

	)

9 
	#B000000
 0

	)

10 
	#B0000000
 0

	)

11 
	#B00000000
 0

	)

12 
	#B1
 1

	)

13 
	#B01
 1

	)

14 
	#B001
 1

	)

15 
	#B0001
 1

	)

16 
	#B00001
 1

	)

17 
	#B000001
 1

	)

18 
	#B0000001
 1

	)

19 
	#B00000001
 1

	)

20 
	#B10
 2

	)

21 
	#B010
 2

	)

22 
	#B0010
 2

	)

23 
	#B00010
 2

	)

24 
	#B000010
 2

	)

25 
	#B0000010
 2

	)

26 
	#B00000010
 2

	)

27 
	#B11
 3

	)

28 
	#B011
 3

	)

29 
	#B0011
 3

	)

30 
	#B00011
 3

	)

31 
	#B000011
 3

	)

32 
	#B0000011
 3

	)

33 
	#B00000011
 3

	)

34 
	#B100
 4

	)

35 
	#B0100
 4

	)

36 
	#B00100
 4

	)

37 
	#B000100
 4

	)

38 
	#B0000100
 4

	)

39 
	#B00000100
 4

	)

40 
	#B101
 5

	)

41 
	#B0101
 5

	)

42 
	#B00101
 5

	)

43 
	#B000101
 5

	)

44 
	#B0000101
 5

	)

45 
	#B00000101
 5

	)

46 
	#B110
 6

	)

47 
	#B0110
 6

	)

48 
	#B00110
 6

	)

49 
	#B000110
 6

	)

50 
	#B0000110
 6

	)

51 
	#B00000110
 6

	)

52 
	#B111
 7

	)

53 
	#B0111
 7

	)

54 
	#B00111
 7

	)

55 
	#B000111
 7

	)

56 
	#B0000111
 7

	)

57 
	#B00000111
 7

	)

58 
	#B1000
 8

	)

59 
	#B01000
 8

	)

60 
	#B001000
 8

	)

61 
	#B0001000
 8

	)

62 
	#B00001000
 8

	)

63 
	#B1001
 9

	)

64 
	#B01001
 9

	)

65 
	#B001001
 9

	)

66 
	#B0001001
 9

	)

67 
	#B00001001
 9

	)

68 
	#B1010
 10

	)

69 
	#B01010
 10

	)

70 
	#B001010
 10

	)

71 
	#B0001010
 10

	)

72 
	#B00001010
 10

	)

73 
	#B1011
 11

	)

74 
	#B01011
 11

	)

75 
	#B001011
 11

	)

76 
	#B0001011
 11

	)

77 
	#B00001011
 11

	)

78 
	#B1100
 12

	)

79 
	#B01100
 12

	)

80 
	#B001100
 12

	)

81 
	#B0001100
 12

	)

82 
	#B00001100
 12

	)

83 
	#B1101
 13

	)

84 
	#B01101
 13

	)

85 
	#B001101
 13

	)

86 
	#B0001101
 13

	)

87 
	#B00001101
 13

	)

88 
	#B1110
 14

	)

89 
	#B01110
 14

	)

90 
	#B001110
 14

	)

91 
	#B0001110
 14

	)

92 
	#B00001110
 14

	)

93 
	#B1111
 15

	)

94 
	#B01111
 15

	)

95 
	#B001111
 15

	)

96 
	#B0001111
 15

	)

97 
	#B00001111
 15

	)

98 
	#B10000
 16

	)

99 
	#B010000
 16

	)

100 
	#B0010000
 16

	)

101 
	#B00010000
 16

	)

102 
	#B10001
 17

	)

103 
	#B010001
 17

	)

104 
	#B0010001
 17

	)

105 
	#B00010001
 17

	)

106 
	#B10010
 18

	)

107 
	#B010010
 18

	)

108 
	#B0010010
 18

	)

109 
	#B00010010
 18

	)

110 
	#B10011
 19

	)

111 
	#B010011
 19

	)

112 
	#B0010011
 19

	)

113 
	#B00010011
 19

	)

114 
	#B10100
 20

	)

115 
	#B010100
 20

	)

116 
	#B0010100
 20

	)

117 
	#B00010100
 20

	)

118 
	#B10101
 21

	)

119 
	#B010101
 21

	)

120 
	#B0010101
 21

	)

121 
	#B00010101
 21

	)

122 
	#B10110
 22

	)

123 
	#B010110
 22

	)

124 
	#B0010110
 22

	)

125 
	#B00010110
 22

	)

126 
	#B10111
 23

	)

127 
	#B010111
 23

	)

128 
	#B0010111
 23

	)

129 
	#B00010111
 23

	)

130 
	#B11000
 24

	)

131 
	#B011000
 24

	)

132 
	#B0011000
 24

	)

133 
	#B00011000
 24

	)

134 
	#B11001
 25

	)

135 
	#B011001
 25

	)

136 
	#B0011001
 25

	)

137 
	#B00011001
 25

	)

138 
	#B11010
 26

	)

139 
	#B011010
 26

	)

140 
	#B0011010
 26

	)

141 
	#B00011010
 26

	)

142 
	#B11011
 27

	)

143 
	#B011011
 27

	)

144 
	#B0011011
 27

	)

145 
	#B00011011
 27

	)

146 
	#B11100
 28

	)

147 
	#B011100
 28

	)

148 
	#B0011100
 28

	)

149 
	#B00011100
 28

	)

150 
	#B11101
 29

	)

151 
	#B011101
 29

	)

152 
	#B0011101
 29

	)

153 
	#B00011101
 29

	)

154 
	#B11110
 30

	)

155 
	#B011110
 30

	)

156 
	#B0011110
 30

	)

157 
	#B00011110
 30

	)

158 
	#B11111
 31

	)

159 
	#B011111
 31

	)

160 
	#B0011111
 31

	)

161 
	#B00011111
 31

	)

162 
	#B100000
 32

	)

163 
	#B0100000
 32

	)

164 
	#B00100000
 32

	)

165 
	#B100001
 33

	)

166 
	#B0100001
 33

	)

167 
	#B00100001
 33

	)

168 
	#B100010
 34

	)

169 
	#B0100010
 34

	)

170 
	#B00100010
 34

	)

171 
	#B100011
 35

	)

172 
	#B0100011
 35

	)

173 
	#B00100011
 35

	)

174 
	#B100100
 36

	)

175 
	#B0100100
 36

	)

176 
	#B00100100
 36

	)

177 
	#B100101
 37

	)

178 
	#B0100101
 37

	)

179 
	#B00100101
 37

	)

180 
	#B100110
 38

	)

181 
	#B0100110
 38

	)

182 
	#B00100110
 38

	)

183 
	#B100111
 39

	)

184 
	#B0100111
 39

	)

185 
	#B00100111
 39

	)

186 
	#B101000
 40

	)

187 
	#B0101000
 40

	)

188 
	#B00101000
 40

	)

189 
	#B101001
 41

	)

190 
	#B0101001
 41

	)

191 
	#B00101001
 41

	)

192 
	#B101010
 42

	)

193 
	#B0101010
 42

	)

194 
	#B00101010
 42

	)

195 
	#B101011
 43

	)

196 
	#B0101011
 43

	)

197 
	#B00101011
 43

	)

198 
	#B101100
 44

	)

199 
	#B0101100
 44

	)

200 
	#B00101100
 44

	)

201 
	#B101101
 45

	)

202 
	#B0101101
 45

	)

203 
	#B00101101
 45

	)

204 
	#B101110
 46

	)

205 
	#B0101110
 46

	)

206 
	#B00101110
 46

	)

207 
	#B101111
 47

	)

208 
	#B0101111
 47

	)

209 
	#B00101111
 47

	)

210 
	#B110000
 48

	)

211 
	#B0110000
 48

	)

212 
	#B00110000
 48

	)

213 
	#B110001
 49

	)

214 
	#B0110001
 49

	)

215 
	#B00110001
 49

	)

216 
	#B110010
 50

	)

217 
	#B0110010
 50

	)

218 
	#B00110010
 50

	)

219 
	#B110011
 51

	)

220 
	#B0110011
 51

	)

221 
	#B00110011
 51

	)

222 
	#B110100
 52

	)

223 
	#B0110100
 52

	)

224 
	#B00110100
 52

	)

225 
	#B110101
 53

	)

226 
	#B0110101
 53

	)

227 
	#B00110101
 53

	)

228 
	#B110110
 54

	)

229 
	#B0110110
 54

	)

230 
	#B00110110
 54

	)

231 
	#B110111
 55

	)

232 
	#B0110111
 55

	)

233 
	#B00110111
 55

	)

234 
	#B111000
 56

	)

235 
	#B0111000
 56

	)

236 
	#B00111000
 56

	)

237 
	#B111001
 57

	)

238 
	#B0111001
 57

	)

239 
	#B00111001
 57

	)

240 
	#B111010
 58

	)

241 
	#B0111010
 58

	)

242 
	#B00111010
 58

	)

243 
	#B111011
 59

	)

244 
	#B0111011
 59

	)

245 
	#B00111011
 59

	)

246 
	#B111100
 60

	)

247 
	#B0111100
 60

	)

248 
	#B00111100
 60

	)

249 
	#B111101
 61

	)

250 
	#B0111101
 61

	)

251 
	#B00111101
 61

	)

252 
	#B111110
 62

	)

253 
	#B0111110
 62

	)

254 
	#B00111110
 62

	)

255 
	#B111111
 63

	)

256 
	#B0111111
 63

	)

257 
	#B00111111
 63

	)

258 
	#B1000000
 64

	)

259 
	#B01000000
 64

	)

260 
	#B1000001
 65

	)

261 
	#B01000001
 65

	)

262 
	#B1000010
 66

	)

263 
	#B01000010
 66

	)

264 
	#B1000011
 67

	)

265 
	#B01000011
 67

	)

266 
	#B1000100
 68

	)

267 
	#B01000100
 68

	)

268 
	#B1000101
 69

	)

269 
	#B01000101
 69

	)

270 
	#B1000110
 70

	)

271 
	#B01000110
 70

	)

272 
	#B1000111
 71

	)

273 
	#B01000111
 71

	)

274 
	#B1001000
 72

	)

275 
	#B01001000
 72

	)

276 
	#B1001001
 73

	)

277 
	#B01001001
 73

	)

278 
	#B1001010
 74

	)

279 
	#B01001010
 74

	)

280 
	#B1001011
 75

	)

281 
	#B01001011
 75

	)

282 
	#B1001100
 76

	)

283 
	#B01001100
 76

	)

284 
	#B1001101
 77

	)

285 
	#B01001101
 77

	)

286 
	#B1001110
 78

	)

287 
	#B01001110
 78

	)

288 
	#B1001111
 79

	)

289 
	#B01001111
 79

	)

290 
	#B1010000
 80

	)

291 
	#B01010000
 80

	)

292 
	#B1010001
 81

	)

293 
	#B01010001
 81

	)

294 
	#B1010010
 82

	)

295 
	#B01010010
 82

	)

296 
	#B1010011
 83

	)

297 
	#B01010011
 83

	)

298 
	#B1010100
 84

	)

299 
	#B01010100
 84

	)

300 
	#B1010101
 85

	)

301 
	#B01010101
 85

	)

302 
	#B1010110
 86

	)

303 
	#B01010110
 86

	)

304 
	#B1010111
 87

	)

305 
	#B01010111
 87

	)

306 
	#B1011000
 88

	)

307 
	#B01011000
 88

	)

308 
	#B1011001
 89

	)

309 
	#B01011001
 89

	)

310 
	#B1011010
 90

	)

311 
	#B01011010
 90

	)

312 
	#B1011011
 91

	)

313 
	#B01011011
 91

	)

314 
	#B1011100
 92

	)

315 
	#B01011100
 92

	)

316 
	#B1011101
 93

	)

317 
	#B01011101
 93

	)

318 
	#B1011110
 94

	)

319 
	#B01011110
 94

	)

320 
	#B1011111
 95

	)

321 
	#B01011111
 95

	)

322 
	#B1100000
 96

	)

323 
	#B01100000
 96

	)

324 
	#B1100001
 97

	)

325 
	#B01100001
 97

	)

326 
	#B1100010
 98

	)

327 
	#B01100010
 98

	)

328 
	#B1100011
 99

	)

329 
	#B01100011
 99

	)

330 
	#B1100100
 100

	)

331 
	#B01100100
 100

	)

332 
	#B1100101
 101

	)

333 
	#B01100101
 101

	)

334 
	#B1100110
 102

	)

335 
	#B01100110
 102

	)

336 
	#B1100111
 103

	)

337 
	#B01100111
 103

	)

338 
	#B1101000
 104

	)

339 
	#B01101000
 104

	)

340 
	#B1101001
 105

	)

341 
	#B01101001
 105

	)

342 
	#B1101010
 106

	)

343 
	#B01101010
 106

	)

344 
	#B1101011
 107

	)

345 
	#B01101011
 107

	)

346 
	#B1101100
 108

	)

347 
	#B01101100
 108

	)

348 
	#B1101101
 109

	)

349 
	#B01101101
 109

	)

350 
	#B1101110
 110

	)

351 
	#B01101110
 110

	)

352 
	#B1101111
 111

	)

353 
	#B01101111
 111

	)

354 
	#B1110000
 112

	)

355 
	#B01110000
 112

	)

356 
	#B1110001
 113

	)

357 
	#B01110001
 113

	)

358 
	#B1110010
 114

	)

359 
	#B01110010
 114

	)

360 
	#B1110011
 115

	)

361 
	#B01110011
 115

	)

362 
	#B1110100
 116

	)

363 
	#B01110100
 116

	)

364 
	#B1110101
 117

	)

365 
	#B01110101
 117

	)

366 
	#B1110110
 118

	)

367 
	#B01110110
 118

	)

368 
	#B1110111
 119

	)

369 
	#B01110111
 119

	)

370 
	#B1111000
 120

	)

371 
	#B01111000
 120

	)

372 
	#B1111001
 121

	)

373 
	#B01111001
 121

	)

374 
	#B1111010
 122

	)

375 
	#B01111010
 122

	)

376 
	#B1111011
 123

	)

377 
	#B01111011
 123

	)

378 
	#B1111100
 124

	)

379 
	#B01111100
 124

	)

380 
	#B1111101
 125

	)

381 
	#B01111101
 125

	)

382 
	#B1111110
 126

	)

383 
	#B01111110
 126

	)

384 
	#B1111111
 127

	)

385 
	#B01111111
 127

	)

386 
	#B10000000
 128

	)

387 
	#B10000001
 129

	)

388 
	#B10000010
 130

	)

389 
	#B10000011
 131

	)

390 
	#B10000100
 132

	)

391 
	#B10000101
 133

	)

392 
	#B10000110
 134

	)

393 
	#B10000111
 135

	)

394 
	#B10001000
 136

	)

395 
	#B10001001
 137

	)

396 
	#B10001010
 138

	)

397 
	#B10001011
 139

	)

398 
	#B10001100
 140

	)

399 
	#B10001101
 141

	)

400 
	#B10001110
 142

	)

401 
	#B10001111
 143

	)

402 
	#B10010000
 144

	)

403 
	#B10010001
 145

	)

404 
	#B10010010
 146

	)

405 
	#B10010011
 147

	)

406 
	#B10010100
 148

	)

407 
	#B10010101
 149

	)

408 
	#B10010110
 150

	)

409 
	#B10010111
 151

	)

410 
	#B10011000
 152

	)

411 
	#B10011001
 153

	)

412 
	#B10011010
 154

	)

413 
	#B10011011
 155

	)

414 
	#B10011100
 156

	)

415 
	#B10011101
 157

	)

416 
	#B10011110
 158

	)

417 
	#B10011111
 159

	)

418 
	#B10100000
 160

	)

419 
	#B10100001
 161

	)

420 
	#B10100010
 162

	)

421 
	#B10100011
 163

	)

422 
	#B10100100
 164

	)

423 
	#B10100101
 165

	)

424 
	#B10100110
 166

	)

425 
	#B10100111
 167

	)

426 
	#B10101000
 168

	)

427 
	#B10101001
 169

	)

428 
	#B10101010
 170

	)

429 
	#B10101011
 171

	)

430 
	#B10101100
 172

	)

431 
	#B10101101
 173

	)

432 
	#B10101110
 174

	)

433 
	#B10101111
 175

	)

434 
	#B10110000
 176

	)

435 
	#B10110001
 177

	)

436 
	#B10110010
 178

	)

437 
	#B10110011
 179

	)

438 
	#B10110100
 180

	)

439 
	#B10110101
 181

	)

440 
	#B10110110
 182

	)

441 
	#B10110111
 183

	)

442 
	#B10111000
 184

	)

443 
	#B10111001
 185

	)

444 
	#B10111010
 186

	)

445 
	#B10111011
 187

	)

446 
	#B10111100
 188

	)

447 
	#B10111101
 189

	)

448 
	#B10111110
 190

	)

449 
	#B10111111
 191

	)

450 
	#B11000000
 192

	)

451 
	#B11000001
 193

	)

452 
	#B11000010
 194

	)

453 
	#B11000011
 195

	)

454 
	#B11000100
 196

	)

455 
	#B11000101
 197

	)

456 
	#B11000110
 198

	)

457 
	#B11000111
 199

	)

458 
	#B11001000
 200

	)

459 
	#B11001001
 201

	)

460 
	#B11001010
 202

	)

461 
	#B11001011
 203

	)

462 
	#B11001100
 204

	)

463 
	#B11001101
 205

	)

464 
	#B11001110
 206

	)

465 
	#B11001111
 207

	)

466 
	#B11010000
 208

	)

467 
	#B11010001
 209

	)

468 
	#B11010010
 210

	)

469 
	#B11010011
 211

	)

470 
	#B11010100
 212

	)

471 
	#B11010101
 213

	)

472 
	#B11010110
 214

	)

473 
	#B11010111
 215

	)

474 
	#B11011000
 216

	)

475 
	#B11011001
 217

	)

476 
	#B11011010
 218

	)

477 
	#B11011011
 219

	)

478 
	#B11011100
 220

	)

479 
	#B11011101
 221

	)

480 
	#B11011110
 222

	)

481 
	#B11011111
 223

	)

482 
	#B11100000
 224

	)

483 
	#B11100001
 225

	)

484 
	#B11100010
 226

	)

485 
	#B11100011
 227

	)

486 
	#B11100100
 228

	)

487 
	#B11100101
 229

	)

488 
	#B11100110
 230

	)

489 
	#B11100111
 231

	)

490 
	#B11101000
 232

	)

491 
	#B11101001
 233

	)

492 
	#B11101010
 234

	)

493 
	#B11101011
 235

	)

494 
	#B11101100
 236

	)

495 
	#B11101101
 237

	)

496 
	#B11101110
 238

	)

497 
	#B11101111
 239

	)

498 
	#B11110000
 240

	)

499 
	#B11110001
 241

	)

500 
	#B11110010
 242

	)

501 
	#B11110011
 243

	)

502 
	#B11110100
 244

	)

503 
	#B11110101
 245

	)

504 
	#B11110110
 246

	)

505 
	#B11110111
 247

	)

506 
	#B11111000
 248

	)

507 
	#B11111001
 249

	)

508 
	#B11111010
 250

	)

509 
	#B11111011
 251

	)

510 
	#B11111100
 252

	)

511 
	#B11111101
 253

	)

512 
	#B11111110
 254

	)

513 
	#B11111111
 255

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/main.cpp

1 
	~<Arduöo.h
>

3 
	$maö
()

5 
	`öô
();

7 #i‡
	`deföed
(
USBCON
)

8 
USBDevi˚
.
	`©èch
();

11 
	`£tup
();

14 
	`lo›
();

15 i‡(
£rülEvítRun
Ë
	`£rülEvítRun
();

19 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/new.cpp

1 
	~<√w.h
>

3 * 
›î©‹
 
	$√w
(
size_t
 
size
)

5  
	`mÆloc
(
size
);

6 
	}
}

8 
›î©‹
 
	$dñëe
(* 
±r
)

10 
	`‰ì
(
±r
);

11 
	}
}

13 
	$__cxa_gu¨d_acquúe
(
__gu¨d
 *
g
Ë{ !*(*)(g);
	}
};

14 
	$__cxa_gu¨d_ªÀa£
 (
__gu¨d
 *
g
Ë{*(*)g = 1;
	}
};

15 
	$__cxa_gu¨d_ab‹t
 (
__gu¨d
 *Ë{
	}
};

17 
	$__cxa_puª_vútuÆ
(Ë{
	}
};

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/new.h

5 #i‚de‡
NEW_H


6 
	#NEW_H


	)

8 
	~<°dlib.h
>

10 * 
›î©‹
 
√w
(
size_t
 
size
);

11 
›î©‹
 
dñëe
(* 
±r
);

13 
__exãnsi⁄__
 
	t__gu¨d
 
	t__©åibuã__
((
	tmode
 (
	t__DI__
)));

15 "C" 
__cxa_gu¨d_acquúe
(
__gu¨d
 *);

16 "C" 
__cxa_gu¨d_ªÀa£
 (
__gu¨d
 *);

17 "C" 
__cxa_gu¨d_ab‹t
 (
__gu¨d
 *);

19 "C" 
__cxa_puª_vútuÆ
();

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/wiring.c

25 
	~"wúög_¥iv©e.h
"

29 
	#MICROSECONDS_PER_TIMER0_OVERFLOW
 (
	`˛ockCy˛esToMi¸o£c⁄ds
(64 * 256))

	)

32 
	#MILLIS_INC
 (
MICROSECONDS_PER_TIMER0_OVERFLOW
 / 1000)

	)

37 
	#FRACT_INC
 ((
MICROSECONDS_PER_TIMER0_OVERFLOW
 % 1000Ë>> 3)

	)

38 
	#FRACT_MAX
 (1000 >> 3)

	)

40 vﬁ©ûê
	gtimî0_ovîÊow_cou¡
 = 0;

41 vﬁ©ûê
	gtimî0_mûlis
 = 0;

42 
	gtimî0_‰a˘
 = 0;

44 #i‡
deföed
(
__AVR_ATtöy24__
Ë|| deföed(
__AVR_ATtöy44__
Ë|| deföed(
__AVR_ATtöy84__
)

45 
	$SIGNAL
(
TIM0_OVF_ve˘
)

47 
	$SIGNAL
(
TIMER0_OVF_ve˘
)

52 
m
 = 
timî0_mûlis
;

53 
f
 = 
timî0_‰a˘
;

55 
m
 +
MILLIS_INC
;

56 
f
 +
FRACT_INC
;

57 i‡(
f
 >
FRACT_MAX
) {

58 
f
 -
FRACT_MAX
;

59 
m
 += 1;

62 
timî0_‰a˘
 = 
f
;

63 
timî0_mûlis
 = 
m
;

64 
timî0_ovîÊow_cou¡
++;

65 
	}
}

67 
	$mûlis
()

69 
m
;

70 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

74 
	`˛i
();

75 
m
 = 
timî0_mûlis
;

76 
SREG
 = 
ﬁdSREG
;

78  
m
;

79 
	}
}

81 
	$mi¸os
() {

82 
m
;

83 
uöt8_t
 
ﬁdSREG
 = 
SREG
, 
t
;

85 
	`˛i
();

86 
m
 = 
timî0_ovîÊow_cou¡
;

87 #i‡
	`deföed
(
TCNT0
)

88 
t
 = 
TCNT0
;

89 #ñi‡
	`deföed
(
TCNT0L
)

90 
t
 = 
TCNT0L
;

92 #îr‹ 
TIMER
 0 
nŸ
 
deföed


96 #ifde‡
TIFR0


97 i‡((
TIFR0
 & 
	`_BV
(
TOV0
)Ë&& (
t
 < 255))

98 
m
++;

100 i‡((
TIFR
 & 
	`_BV
(
TOV0
)Ë&& (
t
 < 255))

101 
m
++;

104 
SREG
 = 
ﬁdSREG
;

106  ((
m
 << 8Ë+ 
t
Ë* (64 / 
	`˛ockCy˛esPîMi¸o£c⁄d
());

107 
	}
}

109 
	$dñay
(
ms
)

111 
uöt16_t
 
°¨t
 = (uöt16_t)
	`mi¸os
();

113 
ms
 > 0) {

114 i‡(((
uöt16_t
)
	`mi¸os
(Ë- 
°¨t
) >= 1000) {

115 
ms
--;

116 
°¨t
 += 1000;

119 
	}
}

122 
	$dñayMi¸o£c⁄ds
(
us
)

127 #i‡
F_CPU
 >= 20000000L

132 
__asm__
 
	`__vﬁ©ûe__
 (

135 i‡(--
us
 == 0)

141 
us
 = (us<<2) + us;

144 
us
 -= 2;

146 #ñi‡
F_CPU
 >= 16000000L

151 i‡(--
us
 == 0)

157 
us
 <<= 2;

160 
us
 -= 2;

167 i‡(--
us
 == 0)

169 i‡(--
us
 == 0)

175 
us
 <<= 1;

179 
us
--;

183 
__asm__
 
	`__vﬁ©ûe__
 (

185 "b∫ê1b" : "=w" (
us
) : "0" (us)

187 
	}
}

189 
	$öô
()

193 
	`£i
();

198 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
WGM01
)

199 
	`sbi
(
TCCR0A
, 
WGM01
);

200 
	`sbi
(
TCCR0A
, 
WGM00
);

204 #i‡
	`deföed
(
__AVR_ATmega128__
)

206 
	`sbi
(
TCCR0
, 
CS02
);

207 #ñi‡
	`deföed
(
TCCR0
Ë&& deföed(
CS01
Ë&& deföed(
CS00
)

209 
	`sbi
(
TCCR0
, 
CS01
);

210 
	`sbi
(
TCCR0
, 
CS00
);

211 #ñi‡
	`deföed
(
TCCR0B
Ë&& deföed(
CS01
Ë&& deföed(
CS00
)

213 
	`sbi
(
TCCR0B
, 
CS01
);

214 
	`sbi
(
TCCR0B
, 
CS00
);

215 #ñi‡
	`deföed
(
TCCR0A
Ë&& deföed(
CS01
Ë&& deföed(
CS00
)

217 
	`sbi
(
TCCR0A
, 
CS01
);

218 
	`sbi
(
TCCR0A
, 
CS00
);

220 #îr‹ 
Timî
 0 
¥esˇÀ
 
Á˘‹
 64 
nŸ
 
£t
 
c‹ª˘ly


224 #i‡
	`deföed
(
TIMSK
Ë&& deföed(
TOIE0
)

225 
	`sbi
(
TIMSK
, 
TOIE0
);

226 #ñi‡
	`deföed
(
TIMSK0
Ë&& deföed(
TOIE0
)

227 
	`sbi
(
TIMSK0
, 
TOIE0
);

229 #îr‹ 
Timî
 0 
ovîÊow
 
öãºu±
 
nŸ
 
£t
 
c‹ª˘ly


237 #i‡
	`deföed
(
TCCR1B
Ë&& deföed(
CS11
Ë&& deföed(
CS10
)

238 
TCCR1B
 = 0;

241 
	`sbi
(
TCCR1B
, 
CS11
);

242 #i‡
F_CPU
 >= 8000000L

243 
	`sbi
(
TCCR1B
, 
CS10
);

245 #ñi‡
	`deföed
(
TCCR1
Ë&& deföed(
CS11
Ë&& deföed(
CS10
)

246 
	`sbi
(
TCCR1
, 
CS11
);

247 #i‡
F_CPU
 >= 8000000L

248 
	`sbi
(
TCCR1
, 
CS10
);

252 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
WGM10
)

253 
	`sbi
(
TCCR1A
, 
WGM10
);

254 #ñi‡
	`deföed
(
TCCR1
)

255 #w¨nög 
this
 
√eds
 
to
 
be
 
föished


259 #i‡
	`deföed
(
TCCR2
Ë&& deföed(
CS22
)

260 
	`sbi
(
TCCR2
, 
CS22
);

261 #ñi‡
	`deföed
(
TCCR2B
Ë&& deföed(
CS22
)

262 
	`sbi
(
TCCR2B
, 
CS22
);

264 #w¨nög 
Timî
 2 
nŸ
 
	`föished
 (
may
ÇŸ 
be
 
¥e£¡
 
⁄
 
this
 
CPU
)

268 #i‡
	`deföed
(
TCCR2
Ë&& deföed(
WGM20
)

269 
	`sbi
(
TCCR2
, 
WGM20
);

270 #ñi‡
	`deföed
(
TCCR2A
Ë&& deföed(
WGM20
)

271 
	`sbi
(
TCCR2A
, 
WGM20
);

273 #w¨nög 
Timî
 2 
nŸ
 
	`föished
 (
may
ÇŸ 
be
 
¥e£¡
 
⁄
 
this
 
CPU
)

276 #i‡
	`deföed
(
TCCR3B
Ë&& deföed(
CS31
Ë&& deföed(
WGM30
)

277 
	`sbi
(
TCCR3B
, 
CS31
);

278 
	`sbi
(
TCCR3B
, 
CS30
);

279 
	`sbi
(
TCCR3A
, 
WGM30
);

282 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
TCCR4B
Ë&& deföed(
TCCR4D
)

283 
	`sbi
(
TCCR4B
, 
CS42
);

284 
	`sbi
(
TCCR4B
, 
CS41
);

285 
	`sbi
(
TCCR4B
, 
CS40
);

286 
	`sbi
(
TCCR4D
, 
WGM40
);

287 
	`sbi
(
TCCR4A
, 
PWM4A
);

288 
	`sbi
(
TCCR4C
, 
PWM4D
);

290 #i‡
	`deföed
(
TCCR4B
Ë&& deföed(
CS41
Ë&& deföed(
WGM40
)

291 
	`sbi
(
TCCR4B
, 
CS41
);

292 
	`sbi
(
TCCR4B
, 
CS40
);

293 
	`sbi
(
TCCR4A
, 
WGM40
);

297 #i‡
	`deföed
(
TCCR5B
Ë&& deföed(
CS51
Ë&& deföed(
WGM50
)

298 
	`sbi
(
TCCR5B
, 
CS51
);

299 
	`sbi
(
TCCR5B
, 
CS50
);

300 
	`sbi
(
TCCR5A
, 
WGM50
);

303 #i‡
	`deföed
(
ADCSRA
)

308 
	`sbi
(
ADCSRA
, 
ADPS2
);

309 
	`sbi
(
ADCSRA
, 
ADPS1
);

310 
	`sbi
(
ADCSRA
, 
ADPS0
);

313 
	`sbi
(
ADCSRA
, 
ADEN
);

319 #i‡
	`deföed
(
UCSRB
)

320 
UCSRB
 = 0;

321 #ñi‡
	`deföed
(
UCSR0B
)

322 
UCSR0B
 = 0;

324 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/wiring_analog.c

27 
	~"wúög_¥iv©e.h
"

28 
	~"pös_¨duöo.h
"

30 
uöt8_t
 
	g™Æog_ª„ªn˚
 = 
DEFAULT
;

32 
	$™ÆogRe„ªn˚
(
uöt8_t
 
mode
)

37 
™Æog_ª„ªn˚
 = 
mode
;

38 
	}
}

40 
	$™ÆogRód
(
uöt8_t
 
pö
)

42 
uöt8_t
 
low
, 
high
;

44 #i‡
	`deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega2560__
)

45 i‡(
pö
 >= 54)Öin -= 54;

46 #ñi‡
	`deföed
(
__AVR_ATmega32U4__
)

47 i‡(
pö
 >= 18)Öin -= 18;

48 #ñi‡
	`deföed
(
__AVR_ATmega1284P__
Ë|| deföed(
__AVR_ATmega644P__
)

49 i‡(
pö
 >= 24)Öin -= 24;

51 i‡(
pö
 >= 14)Öin -= 14;

54 #i‡
	`deföed
(
__AVR_ATmega32U4__
)

55 
pö
 = 
	`™ÆogPöToCh™√l
(pin);

56 
ADCSRB
 = (ADCSRB & ~(1 << 
MUX5
)Ë| (((
pö
 >> 3) & 0x01) << MUX5);

57 #ñi‡
	`deföed
(
ADCSRB
Ë&& deföed(
MUX5
)

60 
ADCSRB
 = (ADCSRB & ~(1 << 
MUX5
)Ë| (((
pö
 >> 3) & 0x01) << MUX5);

66 #i‡
	`deföed
(
ADMUX
)

67 
ADMUX
 = (
™Æog_ª„ªn˚
 << 6Ë| (
pö
 & 0x07);

73 #i‡
	`deföed
(
ADCSRA
Ë&& deföed(
ADCL
)

75 
	`sbi
(
ADCSRA
, 
ADSC
);

78 
	`bô_is_£t
(
ADCSRA
, 
ADSC
));

84 
low
 = 
ADCL
;

85 
high
 = 
ADCH
;

88 
low
 = 0;

89 
high
 = 0;

93  (
high
 << 8Ë| 
low
;

94 
	}
}

100 
	$™ÆogWrôe
(
uöt8_t
 
pö
, 
vÆ
)

107 
	`pöMode
(
pö
, 
OUTPUT
);

108 i‡(
vÆ
 == 0)

110 
	`digôÆWrôe
(
pö
, 
LOW
);

112 i‡(
vÆ
 == 255)

114 
	`digôÆWrôe
(
pö
, 
HIGH
);

118 
	`digôÆPöToTimî
(
pö
))

121 #i‡
	`deföed
(
TCCR0
Ë&& deföed(
COM00
Ë&& !deföed(
__AVR_ATmega8__
)

122 
TIMER0A
:

124 
	`sbi
(
TCCR0
, 
COM00
);

125 
OCR0
 = 
vÆ
;

129 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
COM0A1
)

130 
TIMER0A
:

132 
	`sbi
(
TCCR0A
, 
COM0A1
);

133 
OCR0A
 = 
vÆ
;

137 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
COM0B1
)

138 
TIMER0B
:

140 
	`sbi
(
TCCR0A
, 
COM0B1
);

141 
OCR0B
 = 
vÆ
;

145 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
COM1A1
)

146 
TIMER1A
:

148 
	`sbi
(
TCCR1A
, 
COM1A1
);

149 
OCR1A
 = 
vÆ
;

153 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
COM1B1
)

154 
TIMER1B
:

156 
	`sbi
(
TCCR1A
, 
COM1B1
);

157 
OCR1B
 = 
vÆ
;

161 #i‡
	`deföed
(
TCCR2
Ë&& deföed(
COM21
)

162 
TIMER2
:

164 
	`sbi
(
TCCR2
, 
COM21
);

165 
OCR2
 = 
vÆ
;

169 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
COM2A1
)

170 
TIMER2A
:

172 
	`sbi
(
TCCR2A
, 
COM2A1
);

173 
OCR2A
 = 
vÆ
;

177 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
COM2B1
)

178 
TIMER2B
:

180 
	`sbi
(
TCCR2A
, 
COM2B1
);

181 
OCR2B
 = 
vÆ
;

185 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3A1
)

186 
TIMER3A
:

188 
	`sbi
(
TCCR3A
, 
COM3A1
);

189 
OCR3A
 = 
vÆ
;

193 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3B1
)

194 
TIMER3B
:

196 
	`sbi
(
TCCR3A
, 
COM3B1
);

197 
OCR3B
 = 
vÆ
;

201 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3C1
)

202 
TIMER3C
:

204 
	`sbi
(
TCCR3A
, 
COM3C1
);

205 
OCR3C
 = 
vÆ
;

209 #i‡
	`deföed
(
TCCR4A
)

210 
TIMER4A
:

212 
	`sbi
(
TCCR4A
, 
COM4A1
);

213 #i‡
	`deföed
(
COM4A0
)

214 
	`cbi
(
TCCR4A
, 
COM4A0
);

216 
OCR4A
 = 
vÆ
;

220 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4B1
)

221 
TIMER4B
:

223 
	`sbi
(
TCCR4A
, 
COM4B1
);

224 
OCR4B
 = 
vÆ
;

228 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4C1
)

229 
TIMER4C
:

231 
	`sbi
(
TCCR4A
, 
COM4C1
);

232 
OCR4C
 = 
vÆ
;

236 #i‡
	`deföed
(
TCCR4C
Ë&& deföed(
COM4D1
)

237 
TIMER4D
:

239 
	`sbi
(
TCCR4C
, 
COM4D1
);

240 #i‡
	`deföed
(
COM4D0
)

241 
	`cbi
(
TCCR4C
, 
COM4D0
);

243 
OCR4D
 = 
vÆ
;

248 #i‡
	`deföed
(
TCCR5A
Ë&& deföed(
COM5A1
)

249 
TIMER5A
:

251 
	`sbi
(
TCCR5A
, 
COM5A1
);

252 
OCR5A
 = 
vÆ
;

256 #i‡
	`deföed
(
TCCR5A
Ë&& deföed(
COM5B1
)

257 
TIMER5B
:

259 
	`sbi
(
TCCR5A
, 
COM5B1
);

260 
OCR5B
 = 
vÆ
;

264 #i‡
	`deföed
(
TCCR5A
Ë&& deföed(
COM5C1
)

265 
TIMER5C
:

267 
	`sbi
(
TCCR5A
, 
COM5C1
);

268 
OCR5C
 = 
vÆ
;

272 
NOT_ON_TIMER
:

274 i‡(
vÆ
 < 128) {

275 
	`digôÆWrôe
(
pö
, 
LOW
);

277 
	`digôÆWrôe
(
pö
, 
HIGH
);

281 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/wiring_digital.c

27 
	#ARDUINO_MAIN


	)

28 
	~"wúög_¥iv©e.h
"

29 
	~"pös_¨duöo.h
"

31 
	$pöMode
(
uöt8_t
 
pö
, uöt8_à
mode
)

33 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

34 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

35 vﬁ©ûê
uöt8_t
 *
ªg
, *
out
;

37 i‡(
p‹t
 =
NOT_A_PIN
) ;

40 
ªg
 = 
	`p‹tModeRegi°î
(
p‹t
);

41 
out
 = 
	`p‹tOuçutRegi°î
(
p‹t
);

43 i‡(
mode
 =
INPUT
) {

44 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

45 
	`˛i
();

46 *
ªg
 &~
bô
;

47 *
out
 &~
bô
;

48 
SREG
 = 
ﬁdSREG
;

49 } i‡(
mode
 =
INPUT_PULLUP
) {

50 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

51 
	`˛i
();

52 *
ªg
 &~
bô
;

53 *
out
 |
bô
;

54 
SREG
 = 
ﬁdSREG
;

56 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

57 
	`˛i
();

58 *
ªg
 |
bô
;

59 
SREG
 = 
ﬁdSREG
;

61 
	}
}

77 
	$tu∫OffPWM
(
uöt8_t
 
timî
)

79 
timî
)

81 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
COM1A1
)

82 
TIMER1A
: 
	`cbi
(
TCCR1A
, 
COM1A1
); ;

84 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
COM1B1
)

85 
TIMER1B
: 
	`cbi
(
TCCR1A
, 
COM1B1
); ;

88 #i‡
	`deföed
(
TCCR2
Ë&& deföed(
COM21
)

89 
TIMER2
: 
	`cbi
(
TCCR2
, 
COM21
); ;

92 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
COM0A1
)

93 
TIMER0A
: 
	`cbi
(
TCCR0A
, 
COM0A1
); ;

96 #i‡
	`deföed
(
TIMER0B
Ë&& deföed(
COM0B1
)

97 
TIMER0B
: 
	`cbi
(
TCCR0A
, 
COM0B1
); ;

99 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
COM2A1
)

100 
TIMER2A
: 
	`cbi
(
TCCR2A
, 
COM2A1
); ;

102 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
COM2B1
)

103 
TIMER2B
: 
	`cbi
(
TCCR2A
, 
COM2B1
); ;

106 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3A1
)

107 
TIMER3A
: 
	`cbi
(
TCCR3A
, 
COM3A1
); ;

109 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3B1
)

110 
TIMER3B
: 
	`cbi
(
TCCR3A
, 
COM3B1
); ;

112 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3C1
)

113 
TIMER3C
: 
	`cbi
(
TCCR3A
, 
COM3C1
); ;

116 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4A1
)

117 
TIMER4A
: 
	`cbi
(
TCCR4A
, 
COM4A1
); ;

119 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4B1
)

120 
TIMER4B
: 
	`cbi
(
TCCR4A
, 
COM4B1
); ;

122 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4C1
)

123 
TIMER4C
: 
	`cbi
(
TCCR4A
, 
COM4C1
); ;

125 #i‡
	`deföed
(
TCCR4C
Ë&& deföed(
COM4D1
)

126 
TIMER4D
: 
	`cbi
(
TCCR4C
, 
COM4D1
); ;

129 #i‡
	`deföed
(
TCCR5A
)

130 
TIMER5A
: 
	`cbi
(
TCCR5A
, 
COM5A1
); ;

131 
TIMER5B
: 
	`cbi
(
TCCR5A
, 
COM5B1
); ;

132 
TIMER5C
: 
	`cbi
(
TCCR5A
, 
COM5C1
); ;

135 
	}
}

137 
	$digôÆWrôe
(
uöt8_t
 
pö
, uöt8_à
vÆ
)

139 
uöt8_t
 
timî
 = 
	`digôÆPöToTimî
(
pö
);

140 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

141 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

142 vﬁ©ûê
uöt8_t
 *
out
;

144 i‡(
p‹t
 =
NOT_A_PIN
) ;

148 i‡(
timî
 !
NOT_ON_TIMER
Ë
	`tu∫OffPWM
(timer);

150 
out
 = 
	`p‹tOuçutRegi°î
(
p‹t
);

152 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

153 
	`˛i
();

155 i‡(
vÆ
 =
LOW
) {

156 *
out
 &~
bô
;

158 *
out
 |
bô
;

161 
SREG
 = 
ﬁdSREG
;

162 
	}
}

164 
	$digôÆRód
(
uöt8_t
 
pö
)

166 
uöt8_t
 
timî
 = 
	`digôÆPöToTimî
(
pö
);

167 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

168 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

170 i‡(
p‹t
 =
NOT_A_PIN
Ë 
LOW
;

174 i‡(
timî
 !
NOT_ON_TIMER
Ë
	`tu∫OffPWM
(timer);

176 i‡(*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë 
HIGH
;

177  
LOW
;

178 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/wiring_private.h

25 #i‚de‡
WúögPriv©e_h


26 
	#WúögPriv©e_h


	)

28 
	~<avr/io.h
>

29 
	~<avr/öãºu±.h
>

30 
	~<°dio.h
>

31 
	~<°d¨g.h
>

33 
	~"Arduöo.h
"

35 #ifde‡
__˝lu•lus


39 #i‚de‡
cbi


40 
	#cbi
(
s‰
, 
bô
Ë(
	`_SFR_BYTE
(s‰Ë&~
	`_BV
(bô))

	)

42 #i‚de‡
sbi


43 
	#sbi
(
s‰
, 
bô
Ë(
	`_SFR_BYTE
(s‰Ë|
	`_BV
(bô))

	)

46 
	#EXTERNAL_INT_0
 0

	)

47 
	#EXTERNAL_INT_1
 1

	)

48 
	#EXTERNAL_INT_2
 2

	)

49 
	#EXTERNAL_INT_3
 3

	)

50 
	#EXTERNAL_INT_4
 4

	)

51 
	#EXTERNAL_INT_5
 5

	)

52 
	#EXTERNAL_INT_6
 6

	)

53 
	#EXTERNAL_INT_7
 7

	)

55 #i‡
deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega2560__
)

56 
	#EXTERNAL_NUM_INTERRUPTS
 8

	)

57 #ñi‡
deföed
(
__AVR_ATmega1284P__
Ë|| deföed(
__AVR_ATmega644P__
)

58 
	#EXTERNAL_NUM_INTERRUPTS
 3

	)

59 #ñi‡
deföed
(
__AVR_ATmega32U4__
)

60 
	#EXTERNAL_NUM_INTERRUPTS
 4

	)

62 
	#EXTERNAL_NUM_INTERRUPTS
 2

	)

65 (*
voidFuncPå
)();

67 #ifde‡
__˝lu•lus


	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/wiring_pulse.c

25 
	~"wúög_¥iv©e.h
"

26 
	~"pös_¨duöo.h
"

32 
	$pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
)

37 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

38 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

39 
uöt8_t
 
°©eMask
 = (
°©e
 ? 
bô
 : 0);

40 
width
 = 0;

44 
numlo›s
 = 0;

45 
maxlo›s
 = 
	`mi¸o£c⁄dsToClockCy˛es
(
timeout
) / 16;

48 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë=
°©eMask
)

49 i‡(
numlo›s
++ =
maxlo›s
)

53 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë!
°©eMask
)

54 i‡(
numlo›s
++ =
maxlo›s
)

58 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë=
°©eMask
) {

59 i‡(
numlo›s
++ =
maxlo›s
)

61 
width
++;

68  
	`˛ockCy˛esToMi¸o£c⁄ds
(
width
 * 21 + 16);

69 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/wiring_shift.c

25 
	~"wúög_¥iv©e.h
"

27 
uöt8_t
 
	$shi·In
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
) {

28 
uöt8_t
 
vÆue
 = 0;

29 
uöt8_t
 
i
;

31 
i
 = 0; i < 8; ++i) {

32 
	`digôÆWrôe
(
˛ockPö
, 
HIGH
);

33 i‡(
bôOrdî
 =
LSBFIRST
)

34 
vÆue
 |
	`digôÆRód
(
d©aPö
Ë<< 
i
;

36 
vÆue
 |
	`digôÆRód
(
d©aPö
Ë<< (7 - 
i
);

37 
	`digôÆWrôe
(
˛ockPö
, 
LOW
);

39  
vÆue
;

40 
	}
}

42 
	$shi·Out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
, uöt8_à
vÆ
)

44 
uöt8_t
 
i
;

46 
i
 = 0; i < 8; i++) {

47 i‡(
bôOrdî
 =
LSBFIRST
)

48 
	`digôÆWrôe
(
d©aPö
, !!(
vÆ
 & (1 << 
i
)));

50 
	`digôÆWrôe
(
d©aPö
, !!(
vÆ
 & (1 << (7 - 
i
))));

52 
	`digôÆWrôe
(
˛ockPö
, 
HIGH
);

53 
	`digôÆWrôe
(
˛ockPö
, 
LOW
);

55 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/variants/standard/pins_arduino.h

25 #i‚de‡
Pös_Arduöo_h


26 
	#Pös_Arduöo_h


	)

28 
	~<avr/pgm•a˚.h
>

30 
	#NUM_DIGITAL_PINS
 82

	)

31 
	#NUM_ANALOG_INPUTS
 16

	)

32 
	#™ÆogI≈utToDigôÆPö
(
p
Ë(’ < 16Ë? (pË+ 54 : -1)

	)

33 
	#digôÆPöHasPWM
(
p
Ë((’Ë>2 && (pË<13Ë|| (’Ë>44 && (p)<46))

	)

35 c⁄° 
uöt8_t
 
	gSS
 = 53;

36 c⁄° 
uöt8_t
 
	gMOSI
 = 51;

37 c⁄° 
uöt8_t
 
	gMISO
 = 50;

38 c⁄° 
uöt8_t
 
	gSCK
 = 52;

40 c⁄° 
uöt8_t
 
	gSDA
 = 20;

41 c⁄° 
uöt8_t
 
	gSCL
 = 21;

42 c⁄° 
uöt8_t
 
	gLED_BUILTIN
 = 13;

44 c⁄° 
uöt8_t
 
	gA0
 = 54;

45 c⁄° 
uöt8_t
 
	gA1
 = 55;

46 c⁄° 
uöt8_t
 
	gA2
 = 56;

47 c⁄° 
uöt8_t
 
	gA3
 = 57;

48 c⁄° 
uöt8_t
 
	gA4
 = 58;

49 c⁄° 
uöt8_t
 
	gA5
 = 59;

50 c⁄° 
uöt8_t
 
	gA6
 = 60;

51 c⁄° 
uöt8_t
 
	gA7
 = 61;

52 c⁄° 
uöt8_t
 
	gA8
 = 62;

53 c⁄° 
uöt8_t
 
	gA9
 = 63;

54 c⁄° 
uöt8_t
 
	gA10
 = 64;

55 c⁄° 
uöt8_t
 
	gA11
 = 65;

56 c⁄° 
uöt8_t
 
	gA12
 = 66;

57 c⁄° 
uöt8_t
 
	gA13
 = 67;

58 c⁄° 
uöt8_t
 
	gA14
 = 68;

59 c⁄° 
uöt8_t
 
	gA15
 = 69;

66 
	#digôÆPöToPCICR
(
p
) ( (((p) >= 10) && ((p) <= 13)) || \

67 (((
p
) >= 50) && ((p) <= 53)) || \

68 (((
p
Ë>62Ë&& (’Ë<69)Ë? (&
PCICR
Ë: ((
uöt8_t
 *)0Ë)

	)

70 
	#digôÆPöToPCICRbô
(
p
) ( (((p) >= 10) && ((p) <= 13)) || (((p) >= 50) && ((p) <= 53)) ? 0 : \

71 –(((
p
) >= 62) && ((p) <= 69)) ? 2 : \

72 0 ) )

	)

74 
	#digôÆPöToPCMSK
(
p
Ë–((’Ë>10Ë&& (’Ë<13)Ë|| ((’Ë>50Ë&& (’Ë<53)Ë? (&
PCMSK0
) : \

75 –(((
p
Ë>62Ë&& (’Ë<69)Ë? (&
PCMSK2
) : \

76 ((
uöt8_t
 *)0ËË)

	)

78 
	#digôÆPöToPCMSKbô
(
p
) ( (((p) >= 10) && ((p) <= 13)) ? ((p) - 6) : \

79 –((
p
) == 50) ? 3 : \

80 –((
p
) == 51) ? 2 : \

81 –((
p
) == 52) ? 1 : \

82 –((
p
) == 53) ? 0 : \

83 –(((
p
) >= 62) && ((p) <= 69)) ? ((p) - 62) : \

84 0 ) ) ) ) ) )

	)

86 #ifde‡
ARDUINO_MAIN


88 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_mode_PGM
[] = {

89 
NOT_A_PORT
,

90 (
uöt16_t
Ë&
DDRA
,

91 (
uöt16_t
Ë&
DDRB
,

92 (
uöt16_t
Ë&
DDRC
,

93 (
uöt16_t
Ë&
DDRD
,

94 (
uöt16_t
Ë&
DDRE
,

95 (
uöt16_t
Ë&
DDRF
,

96 (
uöt16_t
Ë&
DDRG
,

97 (
uöt16_t
Ë&
DDRH
,

98 
NOT_A_PORT
,

99 (
uöt16_t
Ë&
DDRJ
,

100 (
uöt16_t
Ë&
DDRK
,

101 (
uöt16_t
Ë&
DDRL
,

104 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_ouçut_PGM
[] = {

105 
NOT_A_PORT
,

106 (
uöt16_t
Ë&
PORTA
,

107 (
uöt16_t
Ë&
PORTB
,

108 (
uöt16_t
Ë&
PORTC
,

109 (
uöt16_t
Ë&
PORTD
,

110 (
uöt16_t
Ë&
PORTE
,

111 (
uöt16_t
Ë&
PORTF
,

112 (
uöt16_t
Ë&
PORTG
,

113 (
uöt16_t
Ë&
PORTH
,

114 
NOT_A_PORT
,

115 (
uöt16_t
Ë&
PORTJ
,

116 (
uöt16_t
Ë&
PORTK
,

117 (
uöt16_t
Ë&
PORTL
,

120 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_öput_PGM
[] = {

121 
NOT_A_PIN
,

122 (
uöt16_t
Ë&
PINA
,

123 (
uöt16_t
Ë&
PINB
,

124 (
uöt16_t
Ë&
PINC
,

125 (
uöt16_t
Ë&
PIND
,

126 (
uöt16_t
Ë&
PINE
,

127 (
uöt16_t
Ë&
PINF
,

128 (
uöt16_t
Ë&
PING
,

129 (
uöt16_t
Ë&
PINH
,

130 
NOT_A_PIN
,

131 (
uöt16_t
Ë&
PINJ
,

132 (
uöt16_t
Ë&
PINK
,

133 (
uöt16_t
Ë&
PINL
,

136 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_p‹t_PGM
[] = {

139 
PE
 ,

140 
PE
 ,

141 
PE
 ,

142 
PE
 ,

143 
PG
 ,

144 
PE
 ,

145 
PH
 ,

146 
PH
 ,

147 
PH
 ,

148 
PH
 ,

149 
PB
 ,

150 
PB
 ,

151 
PB
 ,

152 
PB
 ,

153 
PJ
 ,

154 
PJ
 ,

155 
PH
 ,

156 
PH
 ,

157 
PD
 ,

158 
PD
 ,

159 
PD
 ,

160 
PD
 ,

161 
PA
 ,

162 
PA
 ,

163 
PA
 ,

164 
PA
 ,

165 
PA
 ,

166 
PA
 ,

167 
PA
 ,

168 
PA
 ,

169 
PC
 ,

170 
PC
 ,

171 
PC
 ,

172 
PC
 ,

173 
PC
 ,

174 
PC
 ,

175 
PC
 ,

176 
PC
 ,

177 
PD
 ,

178 
PG
 ,

179 
PG
 ,

180 
PG
 ,

181 
PL
 ,

182 
PL
 ,

183 
PL
 ,

184 
PL
 ,

185 
PL
 ,

186 
PL
 ,

187 
PL
 ,

188 
PL
 ,

189 
PB
 ,

190 
PB
 ,

191 
PB
 ,

192 
PB
 ,

193 
PF
 ,

194 
PF
 ,

195 
PF
 ,

196 
PF
 ,

197 
PF
 ,

198 
PF
 ,

199 
PF
 ,

200 
PF
 ,

201 
PK
 ,

202 
PK
 ,

203 
PK
 ,

204 
PK
 ,

205 
PK
 ,

206 
PK
 ,

207 
PK
 ,

208 
PK
 ,

209 
PG
 ,

210 
PG
 ,

211 
PJ
 ,

212 
PJ
 ,

213 
PJ
 ,

214 
PJ
 ,

215 
PJ
 ,

216 
PJ
 ,

217 
PE
 ,

218 
PE
 ,

219 
PE
 ,

220 
PD
 ,

221 
PD
 ,

222 
PD
 ,

223 
PH
 ,

224 
PH
 ,

227 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_bô_mask_PGM
[] = {

230 
_BV
( 0 ) ,

231 
_BV
( 1 ) ,

232 
_BV
( 4 ) ,

233 
_BV
( 5 ) ,

234 
_BV
( 5 ) ,

235 
_BV
( 3 ) ,

236 
_BV
( 3 ) ,

237 
_BV
( 4 ) ,

238 
_BV
( 5 ) ,

239 
_BV
( 6 ) ,

240 
_BV
( 4 ) ,

241 
_BV
( 5 ) ,

242 
_BV
( 6 ) ,

243 
_BV
( 7 ) ,

244 
_BV
( 1 ) ,

245 
_BV
( 0 ) ,

246 
_BV
( 1 ) ,

247 
_BV
( 0 ) ,

248 
_BV
( 3 ) ,

249 
_BV
( 2 ) ,

250 
_BV
( 1 ) ,

251 
_BV
( 0 ) ,

252 
_BV
( 0 ) ,

253 
_BV
( 1 ) ,

254 
_BV
( 2 ) ,

255 
_BV
( 3 ) ,

256 
_BV
( 4 ) ,

257 
_BV
( 5 ) ,

258 
_BV
( 6 ) ,

259 
_BV
( 7 ) ,

260 
_BV
( 7 ) ,

261 
_BV
( 6 ) ,

262 
_BV
( 5 ) ,

263 
_BV
( 4 ) ,

264 
_BV
( 3 ) ,

265 
_BV
( 2 ) ,

266 
_BV
( 1 ) ,

267 
_BV
( 0 ) ,

268 
_BV
( 7 ) ,

269 
_BV
( 2 ) ,

270 
_BV
( 1 ) ,

271 
_BV
( 0 ) ,

272 
_BV
( 7 ) ,

273 
_BV
( 6 ) ,

274 
_BV
( 5 ) ,

275 
_BV
( 4 ) ,

276 
_BV
( 3 ) ,

277 
_BV
( 2 ) ,

278 
_BV
( 1 ) ,

279 
_BV
( 0 ) ,

280 
_BV
( 3 ) ,

281 
_BV
( 2 ) ,

282 
_BV
( 1 ) ,

283 
_BV
( 0 ) ,

284 
_BV
( 0 ) ,

285 
_BV
( 1 ) ,

286 
_BV
( 2 ) ,

287 
_BV
( 3 ) ,

288 
_BV
( 4 ) ,

289 
_BV
( 5 ) ,

290 
_BV
( 6 ) ,

291 
_BV
( 7 ) ,

292 
_BV
( 0 ) ,

293 
_BV
( 1 ) ,

294 
_BV
( 2 ) ,

295 
_BV
( 3 ) ,

296 
_BV
( 4 ) ,

297 
_BV
( 5 ) ,

298 
_BV
( 6 ) ,

299 
_BV
( 7 ) ,

300 
_BV
( 4 ) ,

301 
_BV
( 3 ) ,

302 
_BV
( 2 ) ,

303 
_BV
( 3 ) ,

304 
_BV
( 7 ) ,

305 
_BV
( 4 ) ,

306 
_BV
( 5 ) ,

307 
_BV
( 6 ) ,

308 
_BV
( 2 ) ,

309 
_BV
( 6 ) ,

310 
_BV
( 7 ) ,

311 
_BV
( 4 ) ,

312 
_BV
( 5 ) ,

313 
_BV
( 6 ) ,

314 
_BV
( 2 ) ,

315 
_BV
( 7 ) ,

318 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_timî_PGM
[] = {

321 
NOT_ON_TIMER
 ,

322 
NOT_ON_TIMER
 ,

323 
TIMER3B
 ,

324 
TIMER3C
 ,

325 
TIMER0B
 ,

326 
TIMER3A
 ,

327 
TIMER4A
 ,

328 
TIMER4B
 ,

329 
TIMER4C
 ,

330 
TIMER2B
 ,

331 
TIMER2A
 ,

332 
TIMER1A
 ,

333 
TIMER1B
 ,

334 
TIMER0A
 ,

335 
NOT_ON_TIMER
 ,

336 
NOT_ON_TIMER
 ,

337 
NOT_ON_TIMER
 ,

338 
NOT_ON_TIMER
 ,

339 
NOT_ON_TIMER
 ,

340 
NOT_ON_TIMER
 ,

341 
NOT_ON_TIMER
 ,

342 
NOT_ON_TIMER
 ,

343 
NOT_ON_TIMER
 ,

344 
NOT_ON_TIMER
 ,

345 
NOT_ON_TIMER
 ,

346 
NOT_ON_TIMER
 ,

347 
NOT_ON_TIMER
 ,

348 
NOT_ON_TIMER
 ,

349 
NOT_ON_TIMER
 ,

350 
NOT_ON_TIMER
 ,

351 
NOT_ON_TIMER
 ,

352 
NOT_ON_TIMER
 ,

353 
NOT_ON_TIMER
 ,

354 
NOT_ON_TIMER
 ,

355 
NOT_ON_TIMER
 ,

356 
NOT_ON_TIMER
 ,

357 
NOT_ON_TIMER
 ,

358 
NOT_ON_TIMER
 ,

359 
NOT_ON_TIMER
 ,

360 
NOT_ON_TIMER
 ,

361 
NOT_ON_TIMER
 ,

362 
NOT_ON_TIMER
 ,

363 
NOT_ON_TIMER
 ,

364 
NOT_ON_TIMER
 ,

365 
TIMER5C
 ,

366 
TIMER5B
 ,

367 
TIMER5A
 ,

368 
NOT_ON_TIMER
 ,

369 
NOT_ON_TIMER
 ,

370 
NOT_ON_TIMER
 ,

371 
NOT_ON_TIMER
 ,

372 
NOT_ON_TIMER
 ,

373 
NOT_ON_TIMER
 ,

374 
NOT_ON_TIMER
 ,

375 
NOT_ON_TIMER
 ,

376 
NOT_ON_TIMER
 ,

377 
NOT_ON_TIMER
 ,

378 
NOT_ON_TIMER
 ,

379 
NOT_ON_TIMER
 ,

380 
NOT_ON_TIMER
 ,

381 
NOT_ON_TIMER
 ,

382 
NOT_ON_TIMER
 ,

383 
NOT_ON_TIMER
 ,

384 
NOT_ON_TIMER
 ,

385 
NOT_ON_TIMER
 ,

386 
NOT_ON_TIMER
 ,

387 
NOT_ON_TIMER
 ,

388 
NOT_ON_TIMER
 ,

389 
NOT_ON_TIMER
 ,

390 
NOT_ON_TIMER
 ,

391 
NOT_ON_TIMER
 ,

392 
NOT_ON_TIMER
 ,

393 
NOT_ON_TIMER
 ,

394 
NOT_ON_TIMER
 ,

395 
NOT_ON_TIMER
 ,

396 
NOT_ON_TIMER
 ,

397 
NOT_ON_TIMER
 ,

398 
NOT_ON_TIMER
 ,

399 
NOT_ON_TIMER
 ,

400 
NOT_ON_TIMER
 ,

401 
NOT_ON_TIMER
 ,

402 
NOT_ON_TIMER
 ,

403 
NOT_ON_TIMER
 ,

404 
NOT_ON_TIMER
 ,

405 
NOT_ON_TIMER
 ,

406 
NOT_ON_TIMER
 ,

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/LiquidCrystal/LiquidCrystal.cpp

1 
	~"LiquidCry°Æ.h
"

3 
	~<°dio.h
>

4 
	~<°rög.h
>

5 
	~<öây≥s.h
>

6 
	~"Arduöo.h
"

27 
	gLiquidCry°Æ
::
	$LiquidCry°Æ
(
uöt8_t
 
rs
, uöt8_à
rw
, uöt8_à
íabÀ
,

28 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
,

29 
uöt8_t
 
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
)

31 
	`öô
(0, 
rs
, 
rw
, 
íabÀ
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
);

32 
	}
}

34 
	gLiquidCry°Æ
::
	$LiquidCry°Æ
(
uöt8_t
 
rs
, uöt8_à
íabÀ
,

35 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
,

36 
uöt8_t
 
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
)

38 
	`öô
(0, 
rs
, 255, 
íabÀ
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
);

39 
	}
}

41 
	gLiquidCry°Æ
::
	$LiquidCry°Æ
(
uöt8_t
 
rs
, uöt8_à
rw
, uöt8_à
íabÀ
,

42 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
)

44 
	`öô
(1, 
rs
, 
rw
, 
íabÀ
, 
d0
, 
d1
, 
d2
, 
d3
, 0, 0, 0, 0);

45 
	}
}

47 
	gLiquidCry°Æ
::
	$LiquidCry°Æ
(
uöt8_t
 
rs
, uöt8_à
íabÀ
,

48 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
)

50 
	`öô
(1, 
rs
, 255, 
íabÀ
, 
d0
, 
d1
, 
d2
, 
d3
, 0, 0, 0, 0);

51 
	}
}

53 
	gLiquidCry°Æ
::
	$öô
(
uöt8_t
 
fourbômode
, uöt8_à
rs
, uöt8_à
rw
, uöt8_à
íabÀ
,

54 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
,

55 
uöt8_t
 
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
)

57 
_rs_pö
 = 
rs
;

58 
_rw_pö
 = 
rw
;

59 
_íabÀ_pö
 = 
íabÀ
;

61 
_d©a_pös
[0] = 
d0
;

62 
_d©a_pös
[1] = 
d1
;

63 
_d©a_pös
[2] = 
d2
;

64 
_d©a_pös
[3] = 
d3
;

65 
_d©a_pös
[4] = 
d4
;

66 
_d©a_pös
[5] = 
d5
;

67 
_d©a_pös
[6] = 
d6
;

68 
_d©a_pös
[7] = 
d7
;

70 
	`pöMode
(
_rs_pö
, 
OUTPUT
);

72 i‡(
_rw_pö
 != 255) {

73 
	`pöMode
(
_rw_pö
, 
OUTPUT
);

75 
	`pöMode
(
_íabÀ_pö
, 
OUTPUT
);

77 i‡(
fourbômode
)

78 
_di•œyfun˘i⁄
 = 
LCD_4BITMODE
 | 
LCD_1LINE
 | 
LCD_5x8DOTS
;

80 
_di•œyfun˘i⁄
 = 
LCD_8BITMODE
 | 
LCD_1LINE
 | 
LCD_5x8DOTS
;

82 
	`begö
(16, 1);

83 
	}
}

85 
	gLiquidCry°Æ
::
	$begö
(
uöt8_t
 
cﬁs
, uöt8_à
löes
, uöt8_à
dŸsize
) {

86 i‡(
löes
 > 1) {

87 
_di•œyfun˘i⁄
 |
LCD_2LINE
;

89 
_numlöes
 = 
löes
;

90 
_cuºlöe
 = 0;

93 i‡((
dŸsize
 !0Ë&& (
löes
 == 1)) {

94 
_di•œyfun˘i⁄
 |
LCD_5x10DOTS
;

100 
	`dñayMi¸o£c⁄ds
(50000);

102 
	`digôÆWrôe
(
_rs_pö
, 
LOW
);

103 
	`digôÆWrôe
(
_íabÀ_pö
, 
LOW
);

104 i‡(
_rw_pö
 != 255) {

105 
	`digôÆWrôe
(
_rw_pö
, 
LOW
);

109 i‡(! (
_di•œyfun˘i⁄
 & 
LCD_8BITMODE
)) {

114 
	`wrôe4bôs
(0x03);

115 
	`dñayMi¸o£c⁄ds
(4500);

118 
	`wrôe4bôs
(0x03);

119 
	`dñayMi¸o£c⁄ds
(4500);

122 
	`wrôe4bôs
(0x03);

123 
	`dñayMi¸o£c⁄ds
(150);

126 
	`wrôe4bôs
(0x02);

132 
	`comm™d
(
LCD_FUNCTIONSET
 | 
_di•œyfun˘i⁄
);

133 
	`dñayMi¸o£c⁄ds
(4500);

136 
	`comm™d
(
LCD_FUNCTIONSET
 | 
_di•œyfun˘i⁄
);

137 
	`dñayMi¸o£c⁄ds
(150);

140 
	`comm™d
(
LCD_FUNCTIONSET
 | 
_di•œyfun˘i⁄
);

144 
	`comm™d
(
LCD_FUNCTIONSET
 | 
_di•œyfun˘i⁄
);

147 
_di•œyc⁄åﬁ
 = 
LCD_DISPLAYON
 | 
LCD_CURSOROFF
 | 
LCD_BLINKOFF
;

148 
	`di•œy
();

151 
	`˛ór
();

154 
_di•œymode
 = 
LCD_ENTRYLEFT
 | 
LCD_ENTRYSHIFTDECREMENT
;

156 
	`comm™d
(
LCD_ENTRYMODESET
 | 
_di•œymode
);

158 
	}
}

161 
	gLiquidCry°Æ
::
	$˛ór
()

163 
	`comm™d
(
LCD_CLEARDISPLAY
);

164 
	`dñayMi¸o£c⁄ds
(2000);

165 
	}
}

167 
	gLiquidCry°Æ
::
	$home
()

169 
	`comm™d
(
LCD_RETURNHOME
);

170 
	`dñayMi¸o£c⁄ds
(2000);

171 
	}
}

173 
	gLiquidCry°Æ
::
	$£tCurs‹
(
uöt8_t
 
cﬁ
, uöt8_à
row
)

175 
row_off£ts
[] = { 0x00, 0x40, 0x14, 0x54 };

176 i‡–
row
 >
_numlöes
 ) {

177 
row
 = 
_numlöes
-1;

180 
	`comm™d
(
LCD_SETDDRAMADDR
 | (
cﬁ
 + 
row_off£ts
[
row
]));

181 
	}
}

184 
	gLiquidCry°Æ
::
	$noDi•œy
() {

185 
_di•œyc⁄åﬁ
 &~
LCD_DISPLAYON
;

186 
	`comm™d
(
LCD_DISPLAYCONTROL
 | 
_di•œyc⁄åﬁ
);

187 
	}
}

188 
	gLiquidCry°Æ
::
	$di•œy
() {

189 
_di•œyc⁄åﬁ
 |
LCD_DISPLAYON
;

190 
	`comm™d
(
LCD_DISPLAYCONTROL
 | 
_di•œyc⁄åﬁ
);

191 
	}
}

194 
	gLiquidCry°Æ
::
	$noCurs‹
() {

195 
_di•œyc⁄åﬁ
 &~
LCD_CURSORON
;

196 
	`comm™d
(
LCD_DISPLAYCONTROL
 | 
_di•œyc⁄åﬁ
);

197 
	}
}

198 
	gLiquidCry°Æ
::
	$curs‹
() {

199 
_di•œyc⁄åﬁ
 |
LCD_CURSORON
;

200 
	`comm™d
(
LCD_DISPLAYCONTROL
 | 
_di•œyc⁄åﬁ
);

201 
	}
}

204 
	gLiquidCry°Æ
::
	$noBlök
() {

205 
_di•œyc⁄åﬁ
 &~
LCD_BLINKON
;

206 
	`comm™d
(
LCD_DISPLAYCONTROL
 | 
_di•œyc⁄åﬁ
);

207 
	}
}

208 
	gLiquidCry°Æ
::
	$blök
() {

209 
_di•œyc⁄åﬁ
 |
LCD_BLINKON
;

210 
	`comm™d
(
LCD_DISPLAYCONTROL
 | 
_di•œyc⁄åﬁ
);

211 
	}
}

214 
	gLiquidCry°Æ
::
	$s¸ﬁlDi•œyLe·
() {

215 
	`comm™d
(
LCD_CURSORSHIFT
 | 
LCD_DISPLAYMOVE
 | 
LCD_MOVELEFT
);

216 
	}
}

217 
	gLiquidCry°Æ
::
	$s¸ﬁlDi•œyRight
() {

218 
	`comm™d
(
LCD_CURSORSHIFT
 | 
LCD_DISPLAYMOVE
 | 
LCD_MOVERIGHT
);

219 
	}
}

222 
	gLiquidCry°Æ
::
	$À·ToRight
() {

223 
_di•œymode
 |
LCD_ENTRYLEFT
;

224 
	`comm™d
(
LCD_ENTRYMODESET
 | 
_di•œymode
);

225 
	}
}

228 
	gLiquidCry°Æ
::
	$rightToLe·
() {

229 
_di•œymode
 &~
LCD_ENTRYLEFT
;

230 
	`comm™d
(
LCD_ENTRYMODESET
 | 
_di•œymode
);

231 
	}
}

234 
	gLiquidCry°Æ
::
	$autos¸ﬁl
() {

235 
_di•œymode
 |
LCD_ENTRYSHIFTINCREMENT
;

236 
	`comm™d
(
LCD_ENTRYMODESET
 | 
_di•œymode
);

237 
	}
}

240 
	gLiquidCry°Æ
::
	$noAutos¸ﬁl
() {

241 
_di•œymode
 &~
LCD_ENTRYSHIFTINCREMENT
;

242 
	`comm™d
(
LCD_ENTRYMODESET
 | 
_di•œymode
);

243 
	}
}

247 
	gLiquidCry°Æ
::
	$¸óãCh¨
(
uöt8_t
 
loˇti⁄
, uöt8_à
ch¨m≠
[]) {

248 
loˇti⁄
 &= 0x7;

249 
	`comm™d
(
LCD_SETCGRAMADDR
 | (
loˇti⁄
 << 3));

250 
i
=0; i<8; i++) {

251 
	`wrôe
(
ch¨m≠
[
i
]);

253 
	}
}

257 
ölöe
 
	gLiquidCry°Æ
::
	$comm™d
(
uöt8_t
 
vÆue
) {

258 
	`£nd
(
vÆue
, 
LOW
);

259 
	}
}

261 
ölöe
 
size_t
 
	gLiquidCry°Æ
::
	$wrôe
(
uöt8_t
 
vÆue
) {

262 
	`£nd
(
vÆue
, 
HIGH
);

264 
	}
}

269 
	gLiquidCry°Æ
::
	$£nd
(
uöt8_t
 
vÆue
, uöt8_à
mode
) {

270 
	`digôÆWrôe
(
_rs_pö
, 
mode
);

273 i‡(
_rw_pö
 != 255) {

274 
	`digôÆWrôe
(
_rw_pö
, 
LOW
);

277 i‡(
_di•œyfun˘i⁄
 & 
LCD_8BITMODE
) {

278 
	`wrôe8bôs
(
vÆue
);

280 
	`wrôe4bôs
(
vÆue
>>4);

281 
	`wrôe4bôs
(
vÆue
);

283 
	}
}

285 
	gLiquidCry°Æ
::
	$pul£E«bÀ
() {

286 
	`digôÆWrôe
(
_íabÀ_pö
, 
LOW
);

287 
	`dñayMi¸o£c⁄ds
(1);

288 
	`digôÆWrôe
(
_íabÀ_pö
, 
HIGH
);

289 
	`dñayMi¸o£c⁄ds
(1);

290 
	`digôÆWrôe
(
_íabÀ_pö
, 
LOW
);

291 
	`dñayMi¸o£c⁄ds
(100);

292 
	}
}

294 
	gLiquidCry°Æ
::
	$wrôe4bôs
(
uöt8_t
 
vÆue
) {

295 
i
 = 0; i < 4; i++) {

296 
	`pöMode
(
_d©a_pös
[
i
], 
OUTPUT
);

297 
	`digôÆWrôe
(
_d©a_pös
[
i
], (
vÆue
 >> i) & 0x01);

300 
	`pul£E«bÀ
();

301 
	}
}

303 
	gLiquidCry°Æ
::
	$wrôe8bôs
(
uöt8_t
 
vÆue
) {

304 
i
 = 0; i < 8; i++) {

305 
	`pöMode
(
_d©a_pös
[
i
], 
OUTPUT
);

306 
	`digôÆWrôe
(
_d©a_pös
[
i
], (
vÆue
 >> i) & 0x01);

309 
	`pul£E«bÀ
();

310 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/LiquidCrystal/LiquidCrystal.h

1 #i‚de‡
LiquidCry°Æ_h


2 
	#LiquidCry°Æ_h


	)

4 
	~<öây≥s.h
>

5 
	~"Pröt.h
"

8 
	#LCD_CLEARDISPLAY
 0x01

	)

9 
	#LCD_RETURNHOME
 0x02

	)

10 
	#LCD_ENTRYMODESET
 0x04

	)

11 
	#LCD_DISPLAYCONTROL
 0x08

	)

12 
	#LCD_CURSORSHIFT
 0x10

	)

13 
	#LCD_FUNCTIONSET
 0x20

	)

14 
	#LCD_SETCGRAMADDR
 0x40

	)

15 
	#LCD_SETDDRAMADDR
 0x80

	)

18 
	#LCD_ENTRYRIGHT
 0x00

	)

19 
	#LCD_ENTRYLEFT
 0x02

	)

20 
	#LCD_ENTRYSHIFTINCREMENT
 0x01

	)

21 
	#LCD_ENTRYSHIFTDECREMENT
 0x00

	)

24 
	#LCD_DISPLAYON
 0x04

	)

25 
	#LCD_DISPLAYOFF
 0x00

	)

26 
	#LCD_CURSORON
 0x02

	)

27 
	#LCD_CURSOROFF
 0x00

	)

28 
	#LCD_BLINKON
 0x01

	)

29 
	#LCD_BLINKOFF
 0x00

	)

32 
	#LCD_DISPLAYMOVE
 0x08

	)

33 
	#LCD_CURSORMOVE
 0x00

	)

34 
	#LCD_MOVERIGHT
 0x04

	)

35 
	#LCD_MOVELEFT
 0x00

	)

38 
	#LCD_8BITMODE
 0x10

	)

39 
	#LCD_4BITMODE
 0x00

	)

40 
	#LCD_2LINE
 0x08

	)

41 
	#LCD_1LINE
 0x00

	)

42 
	#LCD_5x10DOTS
 0x04

	)

43 
	#LCD_5x8DOTS
 0x00

	)

45 ˛as†
	cLiquidCry°Æ
 : 
public
 
Pröt
 {

46 
public
:

47 
LiquidCry°Æ
(
uöt8_t
 
rs
, uöt8_à
íabÀ
,

48 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
,

49 
uöt8_t
 
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
);

50 
LiquidCry°Æ
(
uöt8_t
 
rs
, uöt8_à
rw
, uöt8_à
íabÀ
,

51 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
,

52 
uöt8_t
 
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
);

53 
LiquidCry°Æ
(
uöt8_t
 
rs
, uöt8_à
rw
, uöt8_à
íabÀ
,

54 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
);

55 
LiquidCry°Æ
(
uöt8_t
 
rs
, uöt8_à
íabÀ
,

56 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
);

58 
öô
(
uöt8_t
 
fourbômode
, uöt8_à
rs
, uöt8_à
rw
, uöt8_à
íabÀ
,

59 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
,

60 
uöt8_t
 
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
);

62 
begö
(
uöt8_t
 
cﬁs
, uöt8_à
rows
, uöt8_à
ch¨size
 = 
LCD_5x8DOTS
);

64 
˛ór
();

65 
home
();

67 
noDi•œy
();

68 
di•œy
();

69 
noBlök
();

70 
blök
();

71 
noCurs‹
();

72 
curs‹
();

73 
s¸ﬁlDi•œyLe·
();

74 
s¸ﬁlDi•œyRight
();

75 
À·ToRight
();

76 
rightToLe·
();

77 
autos¸ﬁl
();

78 
noAutos¸ﬁl
();

80 
¸óãCh¨
(
uöt8_t
, uint8_t[]);

81 
£tCurs‹
(
uöt8_t
, uint8_t);

82 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
);

83 
comm™d
(
uöt8_t
);

85 
usög
 
	mPröt
::
wrôe
;

86 
	m¥iv©e
:

87 
£nd
(
uöt8_t
, uint8_t);

88 
wrôe4bôs
(
uöt8_t
);

89 
wrôe8bôs
(
uöt8_t
);

90 
pul£E«bÀ
();

92 
uöt8_t
 
	m_rs_pö
;

93 
uöt8_t
 
	m_rw_pö
;

94 
uöt8_t
 
	m_íabÀ_pö
;

95 
uöt8_t
 
	m_d©a_pös
[8];

97 
uöt8_t
 
	m_di•œyfun˘i⁄
;

98 
uöt8_t
 
	m_di•œyc⁄åﬁ
;

99 
uöt8_t
 
	m_di•œymode
;

101 
uöt8_t
 
	m_öôülized
;

103 
uöt8_t
 
	m_numlöes
,
	m_cuºlöe
;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/SPI/SPI.cpp

11 
	~"pös_¨duöo.h
"

12 
	~"SPI.h
"

14 
SPICœss
 
	gSPI
;

16 
	gSPICœss
::
	$begö
() {

19 
	`digôÆWrôe
(
SS
, 
HIGH
);

24 
	`pöMode
(
SS
, 
OUTPUT
);

29 
SPCR
 |
	`_BV
(
MSTR
);

30 
SPCR
 |
	`_BV
(
SPE
);

38 
	`pöMode
(
SCK
, 
OUTPUT
);

39 
	`pöMode
(
MOSI
, 
OUTPUT
);

40 
	}
}

43 
	gSPICœss
::
	$íd
() {

44 
SPCR
 &~
	`_BV
(
SPE
);

45 
	}
}

47 
	gSPICœss
::
	$£tBôOrdî
(
uöt8_t
 
bôOrdî
)

49 if(
bôOrdî
 =
LSBFIRST
) {

50 
SPCR
 |
	`_BV
(
DORD
);

52 
SPCR
 &~(
	`_BV
(
DORD
));

54 
	}
}

56 
	gSPICœss
::
	$£tD©aMode
(
uöt8_t
 
mode
)

58 
SPCR
 = (SPCR & ~
SPI_MODE_MASK
Ë| 
mode
;

59 
	}
}

61 
	gSPICœss
::
	$£tClockDividî
(
uöt8_t
 
øã
)

63 
SPCR
 = (SPCR & ~
SPI_CLOCK_MASK
Ë| (
øã
 & SPI_CLOCK_MASK);

64 
SPSR
 = (SPSR & ~
SPI_2XCLOCK_MASK
Ë| ((
øã
 >> 2) & SPI_2XCLOCK_MASK);

65 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/SPI/SPI.h

11 #i‚de‡
_SPI_H_INCLUDED


12 
	#_SPI_H_INCLUDED


	)

14 
	~<°dio.h
>

15 
	~<Arduöo.h
>

16 
	~<avr/pgm•a˚.h
>

18 
	#SPI_CLOCK_DIV4
 0x00

	)

19 
	#SPI_CLOCK_DIV16
 0x01

	)

20 
	#SPI_CLOCK_DIV64
 0x02

	)

21 
	#SPI_CLOCK_DIV128
 0x03

	)

22 
	#SPI_CLOCK_DIV2
 0x04

	)

23 
	#SPI_CLOCK_DIV8
 0x05

	)

24 
	#SPI_CLOCK_DIV32
 0x06

	)

27 
	#SPI_MODE0
 0x00

	)

28 
	#SPI_MODE1
 0x04

	)

29 
	#SPI_MODE2
 0x08

	)

30 
	#SPI_MODE3
 0x0C

	)

32 
	#SPI_MODE_MASK
 0x0C

33 
	#SPI_CLOCK_MASK
 0x03

34 
	#SPI_2XCLOCK_MASK
 0x01

35 

	)

36 ˛as†
	cSPICœss
 {

37 
	mpublic
:

38 
ölöe
 
byã
 
å™s„r
(byã 
_d©a
);

42 
ölöe
 
©èchI¡îru±
();

43 
ölöe
 
dëachI¡îru±
();

45 
begö
();

46 
íd
();

48 
£tBôOrdî
(
uöt8_t
);

49 
£tD©aMode
(
uöt8_t
);

50 
£tClockDividî
(
uöt8_t
);

53 
SPICœss
 
SPI
;

55 
byã
 
	gSPICœss
::
	$å™s„r
(
byã
 
_d©a
) {

56 
SPDR
 = 
_d©a
;

57 !(
SPSR
 & 
	`_BV
(
SPIF
)))

59  
SPDR
;

60 
	}
}

62 
	gSPICœss
::
	$©èchI¡îru±
() {

63 
SPCR
 |
	`_BV
(
SPIE
);

64 
	}
}

66 
	gSPICœss
::
	$dëachI¡îru±
() {

67 
SPCR
 &~
	`_BV
(
SPIE
);

68 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/U8glib.cpp

38 
	~"U8glib.h
"

42 
uöt8_t
 
	gU8GLIB
::
	$öôSPI
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
)

44 
	`¥ï¨e
();

45  
	`u8g_InôSPI
(&
u8g
, 
dev
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
);

46 
	}
}

48 
uöt8_t
 
	gU8GLIB
::
	$öôHWSPI
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
)

50 
	`¥ï¨e
();

51  
	`u8g_InôHWSPI
(&
u8g
, 
dev
, 
cs
, 
a0
, 
ª£t
);

52 
	}
}

54 
uöt8_t
 
	gU8GLIB
::
	$öôI2C
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
›ti⁄s
)

56 
	`¥ï¨e
();

57  
	`u8g_InôI2C
(&
u8g
, 
dev
, 
›ti⁄s
);

58 
	}
}

60 
uöt8_t
 
	gU8GLIB
::
	$öô8Bô
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

61 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
, uöt8_à
ª£t
)

63 
	`¥ï¨e
();

64  
	`u8g_Inô8Bô
(&
u8g
, 
dev
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
cs2
, 
di
, 
rw
, 
ª£t
);

65 
	}
}

67 
uöt8_t
 
	gU8GLIB
::
	$öô8BôFixedP‹t
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
í
, uöt8_à
cs
, uöt8_à
di
, uöt8_à
rw
, uöt8_à
ª£t
)

69 
	`¥ï¨e
();

70  
	`u8g_Inô8BôFixedP‹t
(&
u8g
, 
dev
, 
í
, 
cs
, 
di
, 
rw
, 
ª£t
);

71 
	}
}

73 
uöt8_t
 
	gU8GLIB
::
	$öôRW8Bô
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

74 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
wr
, uöt8_à
rd
, uöt8_à
ª£t
)

76 
	`¥ï¨e
();

77  
	`u8g_InôRW8Bô
(&
u8g
, 
dev
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
cs
, 
a0
, 
wr
, 
rd
, 
ª£t
);

78 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/U8glib.h

38 #i‚de‡
_CPP_U8GLIB


39 
	#_CPP_U8GLIB


	)

41 
	~<Pröt.h
>

42 
	~"utûôy/u8g.h
"

45 ˛as†
	cU8GLIB
 : 
public
 
Pröt


47 
¥iv©e
:

48 
u8g_t
 
u8g
;

49 
u8g_uöt_t
 
	mtx
, 
	mty
;

50 
uöt8_t
 
	mis_begö
;

52 
	$¥ï¨e
(Ë{ 
tx
 = 0; 
ty
 = 0; 
is_begö
 = 0; }

53 
	$cbegö
(Ë{ i‡–
is_begö
 =0 ) { is_begö = 1; 
	`u8g_Begö
(&
u8g
); } 
	}
}

54 
uöt8_t
 
öôSPI
(
u8g_dev_t
 *
dev
, uöt8_à
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
);

55 
uöt8_t
 
öôHWSPI
(
u8g_dev_t
 *
dev
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
);

56 
uöt8_t
 
öôI2C
(
u8g_dev_t
 *
dev
, uöt8_à
›ti⁄s
);

57 
	g¥Ÿe˘ed
:

58 
uöt8_t
 
öô8BôFixedP‹t
(
u8g_dev_t
 *
dev
, uöt8_à
í
, uöt8_à
cs
, uöt8_à
di
, uöt8_à
rw
, uöt8_à
ª£t
);

59 
	g¥iv©e
:

60 
uöt8_t
 
öô8Bô
(
u8g_dev_t
 *
dev
, uöt8_à
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

61 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE);

62 
uöt8_t
 
öôRW8Bô
(
u8g_dev_t
 *
dev
, uöt8_à
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

63 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
wr
, uöt8_à
rd
, uöt8_à
ª£t
);

64 
	gpublic
:

67 
	$U8GLIB
()

68 { 
	}
}

69 
	$U8GLIB
(
u8g_dev_t
 *
dev
)

70 { 
	`¥ï¨e
(); 
	`u8g_Inô
(&
u8g
, 
dev
); 
	}
}

71 
	$U8GLIB
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
)

72 { 
	`öôSPI
(
dev
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
); 
	}
}

73 
	$U8GLIB
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
)

74 { 
	`öôHWSPI
(
dev
, 
cs
, 
a0
, 
ª£t
); 
	}
}

75 
	$U8GLIB
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
›ti⁄s
)

76 { 
	`öôI2C
(
dev
, 
›ti⁄s
); 
	}
}

77 
	$U8GLIB
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

78 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
, uöt8_à
ª£t
)

79 { 
	`öô8Bô
(
dev
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
cs2
, 
di
, 
rw
, 
ª£t
); 
	}
}

80 
	$U8GLIB
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

81 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
wr
, uöt8_à
rd
, uöt8_à
ª£t
)

82 { 
	`öôRW8Bô
(
dev
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
cs
, 
a0
, 
wr
, 
rd
, 
ª£t
); 
	}
}

84 
uöt8_t
 
	$begö
(Ë{ 
is_begö
 = 1;  
	`u8g_Begö
(&
u8g
); 
	}
}

86 
	$£tPrötPos
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
Ë{ 
tx
 = x; 
ty
 = y; 
	}
}

87 
u8g_t
 *
	$gëU8g
(Ë{  &
u8g
; 
	}
}

91 #i‡
deföed
(
ARDUINO
) && ARDUINO >= 100

92 
size_t
 
	$wrôe
(
uöt8_t
 
c
Ë{ 
tx
 +
	`u8g_DøwGlyph
(&
u8g
,Åx, 
ty
, c);  1;
	}
}

94 
	$wrôe
(
uöt8_t
 
c
Ë{ 
tx
 +
	`u8g_DøwGlyph
(&
u8g
,Åx, 
ty
, c); 
	}
}

98 
	$undoRŸ©i⁄
(Ë{ 
	`u8g_UndoRŸ©i⁄
(&
u8g
); 
	}
}

99 
	$£tRŸ90
(Ë{ 
	`u8g_SëRŸ90
(&
u8g
); 
	}
}

100 
	$£tRŸ180
(Ë{ 
	`u8g_SëRŸ180
(&
u8g
); 
	}
}

101 
	$£tRŸ270
(Ë{ 
	`u8g_SëRŸ270
(&
u8g
); 
	}
}

104 
	$undoSˇÀ
(Ë{ 
	`u8g_UndoSˇÀ
(&
u8g
); 
	}
}

105 
	$£tSˇÀ2x2
(Ë{ 
	`u8g_SëSˇÀ2x2
(&
u8g
); 
	}
}

108 
	$fú°Page
(Ë{ 
	`cbegö
(); 
	`u8g_Fú°Page
(&
u8g
); 
	}
}

109 
uöt8_t
 
	$√xtPage
(Ë{  
	`u8g_NextPage
(&
u8g
); 
	}
}

112 
uöt8_t
 
	$£tC⁄åa°
(
uöt8_t
 
c⁄åa°
Ë{ 
	`cbegö
();  
	`u8g_SëC⁄åa°
(&
u8g
, c⁄åa°); 
	}
}

113 
	$¶ìpOn
(Ë{ 
	`u8g_SÀïOn
(&
u8g
); 
	}
}

114 
	$¶ìpOff
(Ë{ 
	`u8g_SÀïOff
(&
u8g
); 
	}
}

117 
	$£tCﬁ‹Index
(
uöt8_t
 
cﬁ‹_ödex
Ë{ 
	`u8g_SëCﬁ‹Index
(&
u8g
, cﬁ‹_ödex); 
	}
}

118 
uöt8_t
 
	$gëCﬁ‹Index
(Ë{  
	`u8g_GëCﬁ‹Index
(&
u8g
); 
	}
}

120 
	$£tDeÁu…F‹egroundCﬁ‹
(Ë{ 
	`u8g_SëDeÁu…F‹egroundCﬁ‹
(&
u8g
); 
	}
}

121 
	$£tDeÁu…BackgroundCﬁ‹
(Ë{ 
	`u8g_SëDeÁu…BackgroundCﬁ‹
(&
u8g
); 
	}
}

122 
	$£tDeÁu…MidCﬁ‹
(Ë{ 
	`u8g_SëDeÁu…MidCﬁ‹
(&
u8g
); 
	}
}

124 
u8g_uöt_t
 
	$gëWidth
(Ë{  
	`u8g_GëWidth
(&
u8g
); 
	}
}

125 
u8g_uöt_t
 
	$gëHeight
(Ë{  
	`u8g_GëHeight
(&
u8g
); 
	}
}

126 
uöt8_t
 
	$gëMode
(Ë{  
	`u8g_GëMode
(&
u8g
); 
	}
}

128 
	$døwPixñ
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
Ë{  
	`u8g_DøwPixñ
(&
u8g
, x, y); 
	}
}

129 
	$døwHLöe
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
Ë{ 
	`u8g_DøwHLöe
(&
u8g
, x, y, w); 
	}
}

130 
	$døwVLöe
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
h
Ë{ 
	`u8g_DøwVLöe
(&
u8g
, x, y, h); 
	}
}

131 
	$døwLöe
(
u8g_uöt_t
 
x1
, u8g_uöt_à
y1
, u8g_uöt_à
x2
, u8g_uöt_à
y2
Ë{ 
	`u8g_DøwLöe
(&
u8g
, x1, y1, x2, y2); 
	}
}

133 
	$døwFøme
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
Ë{ 
	`u8g_DøwFøme
(&
u8g
, x, y, w, h); 
	}
}

134 
	$døwRFøme
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, u8g_uöt_à
r
Ë{ 
	`u8g_DøwRFøme
(&
u8g
, x, y, w, h,r); 
	}
}

135 
	$døwBox
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
Ë{ 
	`u8g_DøwBox
(&
u8g
, x, y, w, h); 
	}
}

136 
	$døwRBox
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, u8g_uöt_à
r
Ë{ 
	`u8g_DøwRBox
(&
u8g
, x, y, w, h,r); 
	}
}

138 
	$døwCú˛e
(
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›t
 = 
U8G_DRAW_ALL
Ë{ 
	`u8g_DøwCú˛e
(&
u8g
, x0, y0,Ñad, o±); 
	}
}

139 
	$døwDisc
(
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›t
 = 
U8G_DRAW_ALL
Ë{ 
	`u8g_DøwDisc
(&
u8g
, x0, y0,Ñad, o±); 
	}
}

142 
	$døwBôm≠
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, u8g_uöt_à
h
, c⁄° 
uöt8_t
 *
bôm≠
)

143 { 
	`u8g_DøwBôm≠
(&
u8g
, 
x
, 
y
, 
˙t
, 
h
, 
bôm≠
); 
	}
}

144 
	$døwBôm≠P
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, u8g_uöt_à
h
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
)

145 { 
	`u8g_DøwBôm≠P
(&
u8g
, 
x
, 
y
, 
˙t
, 
h
, 
bôm≠
); 
	}
}

147 
	$døwXBM
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, c⁄° 
uöt8_t
 *
bôm≠
)

148 { 
	`u8g_DøwXBM
(&
u8g
, 
x
, 
y
, 
w
, 
h
, 
bôm≠
); 
	}
}

149 
	$døwXBMP
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
)

150 { 
	`u8g_DøwXBMP
(&
u8g
, 
x
, 
y
, 
w
, 
h
, 
bôm≠
); 
	}
}

154 
	$£tF⁄t
(c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
Ë{
	`u8g_SëF⁄t
(&
u8g
, f⁄t); 
	}
}

155 
öt8_t
 
	$gëF⁄tAs˚¡
(Ë{  
	`u8g_GëF⁄tAs˚¡
(&
u8g
); 
	}
}

156 
öt8_t
 
	$gëF⁄tDes˚¡
(Ë{  
	`u8g_GëF⁄tDes˚¡
(&
u8g
); 
	}
}

157 
öt8_t
 
	$gëF⁄tLöeS∑cög
(Ë{  
	`u8g_GëF⁄tLöeS∑cög
(&
u8g
); 
	}
}

159 
u8g_uöt_t
 
	$døwSå
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° *
s
Ë{  
	`u8g_DøwSå
(&
u8g
, x, y, s); 
	}
}

160 
u8g_uöt_t
 
	$døwSå90
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° *
s
Ë{  
	`u8g_DøwSå90
(&
u8g
, x, y, s); 
	}
}

161 
u8g_uöt_t
 
	$døwSå180
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° *
s
Ë{  
	`u8g_DøwSå180
(&
u8g
, x, y, s); 
	}
}

162 
u8g_uöt_t
 
	$døwSå270
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° *
s
Ë{  
	`u8g_DøwSå270
(&
u8g
, x, y, s); 
	}
}

163 
u8g_uöt_t
 
	$døwSåP
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
Ë{  
	`u8g_DøwSåP
(&
u8g
, x, y, s); 
	}
}

164 
u8g_uöt_t
 
	$døwSå90P
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
Ë{  
	`u8g_DøwSå90P
(&
u8g
, x, y, s); 
	}
}

165 
u8g_uöt_t
 
	$døwSå180P
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
Ë{  
	`u8g_DøwSå180P
(&
u8g
, x, y, s); 
	}
}

166 
u8g_uöt_t
 
	$døwSå270P
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
Ë{  
	`u8g_DøwSå270P
(&
u8g
, x, y, s); 
	}
}

168 
	$£tF⁄tPosBa£löe
(Ë{ 
	`u8g_SëF⁄tPosBa£löe
(&
u8g
); 
	}
}

169 
	$£tF⁄tPosBŸtom
(Ë{ 
	`u8g_SëF⁄tPosBŸtom
(&
u8g
); 
	}
}

170 
	$£tF⁄tPosCíãr
(Ë{ 
	`u8g_SëF⁄tPosCíãr
(&
u8g
); 
	}
}

171 
	$£tF⁄tPosT›
(Ë{ 
	`u8g_SëF⁄tPosT›
(&
u8g
); 
	}
}

173 
	$£tF⁄tRefHeightText
(Ë{ 
	`u8g_SëF⁄tRefHeightText
(&
u8g
); 
	}
}

174 
	$£tF⁄tRefHeightExãndedText
(Ë{ 
	`u8g_SëF⁄tRefHeightExãndedText
(&
u8g
); 
	}
}

175 
	$£tF⁄tRefHeightAŒ
(Ë{ 
	`u8g_SëF⁄tRefHeightAŒ
(&
u8g
); 
	}
}

176 
	$£tF⁄tLöeS∑cögFa˘‹
(
uöt8_t
 
Á˘‹
Ë{ 
	`u8g_SëF⁄tLöeS∑cögFa˘‹
(&
u8g
, fa˘‹); 
	}
}

179 
u8g_uöt_t
 
	$gëSåPixñWidth
(c⁄° *
s
Ë{  
	`u8g_GëSåPixñWidth
(&
u8g
, s); 
	}
}

180 
u8g_uöt_t
 
	$gëSåPixñWidthP
(
u8g_pgm_uöt8_t
 *
s
Ë{  
	`u8g_GëSåPixñWidthP
(&
u8g
, s); 
	}
}

181 
u8g_uöt_t
 
	$gëSåWidth
(c⁄° *
s
Ë{  
	`u8g_GëSåWidth
(&
u8g
, s); 
	}
}

182 
u8g_uöt_t
 
	$gëSåWidthP
(
u8g_pgm_uöt8_t
 *
s
Ë{  
	`u8g_GëSåWidthP
(&
u8g
, s); 
	}
}

184 
	$£tH¨dw¨eBackup
(
u8g_°©e_cb
 
backup_cb
Ë{ 
	`u8g_SëH¨dw¨eBackup
(&
u8g
, backup_cb); 
	}
}

186 #i‡
deföed
(
ARDUINO
) && ARDUINO >= 100

189 
u8g_uöt_t
 
	$døwSå
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
__FœshSåögHñ≥r
 *
s
Ë{  
	`u8g_DøwSåP
(&
u8g
, x, y, (
u8g_pgm_uöt8_t
 *)s); 
	}
}

190 
u8g_uöt_t
 
	$døwSå90
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
__FœshSåögHñ≥r
 *
s
Ë{  
	`u8g_DøwSå90P
(&
u8g
, x, y, (
u8g_pgm_uöt8_t
 *)s); 
	}
}

191 
u8g_uöt_t
 
	$døwSå180
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
__FœshSåögHñ≥r
 *
s
Ë{  
	`u8g_DøwSå180P
(&
u8g
, x, y, (
u8g_pgm_uöt8_t
 *)s); 
	}
}

192 
u8g_uöt_t
 
	$døwSå270
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
__FœshSåögHñ≥r
 *
s
Ë{  
	`u8g_DøwSå270P
(&
u8g
, x, y, (
u8g_pgm_uöt8_t
 *)s); 
	}
}

194 
u8g_uöt_t
 
	$gëSåPixñWidth
(c⁄° 
__FœshSåögHñ≥r
 *
s
Ë{  
	`u8g_GëSåPixñWidthP
(&
u8g
, (
u8g_pgm_uöt8_t
 *)s); 
	}
}

195 
u8g_uöt_t
 
	$gëSåWidth
(c⁄° 
__FœshSåögHñ≥r
 *
s
Ë{  
	`u8g_GëSåWidthP
(&
u8g
, (
u8g_pgm_uöt8_t
 *)s); 
	}
}

199 
	$£tCurs‹F⁄t
(c⁄° 
u8g_pgm_uöt8_t
 *
curs‹_f⁄t
Ë{ 
	`u8g_SëCurs‹F⁄t
(&
u8g
, curs‹_f⁄t); 
	}
}

200 
	$£tCurs‹StyÀ
(
uöt8_t
 
ícodög
Ë{ 
	`u8g_SëCurs‹StyÀ
(&
u8g
,Éncodög); 
	}
}

201 
	$£tCurs‹Pos
(
u8g_uöt_t
 
curs‹_x
, u8g_uöt_à
curs‹_y
Ë{ 
	`u8g_SëCurs‹Pos
(&
u8g
, curs‹_x, curs‹_y); 
	}
}

202 
	$£tCurs‹Cﬁ‹
(
uöt8_t
 
fg
, uöt8_à
bg
Ë{ 
	`u8g_SëCurs‹Cﬁ‹
(&
u8g
, fg, bg); 
	}
}

203 
	$íabÀCurs‹
(Ë{ 
	`u8g_E«bÀCurs‹
(&
u8g
); 
	}
}

204 
	$dißbÀCurs‹
(Ë{ 
	`u8g_DißbÀCurs‹
(&
u8g
); 
	}
}

205 
	$døwCurs‹
(Ë{ 
	`u8g_DøwCurs‹
(&
u8g
); 
	}
}

209 
	$£tVútuÆS¸ìnDimísi⁄
(
u8g_uöt_t
 
width
, u8g_uöt_à
height
Ë{ 
	`u8g_SëVútuÆS¸ìnDimísi⁄
(&
u8g
, width, height); 
	}
}

210 
uöt8_t
 
	$addToVútuÆS¸ìn
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
U8GLIB
 &
chûd_u8g
Ë{  
	`u8g_AddToVútuÆS¸ìn
(&
u8g
, x, y, &chûd_u8g.u8g); 
	}
}

215 ˛as†
	cU8GLIB_DOGS102
 : 
public
 
U8GLIB


217 
public
:

218 
	$U8GLIB_DOGS102
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

219 : 
	$U8GLIB
(&
u8g_dev_uc1701_dogs102_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

221 
	$U8GLIB_DOGS102
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

222 : 
	$U8GLIB
(&
u8g_dev_uc1701_dogs102_hw_•i
, 
cs
, 
a0
, 
ª£t
)

223 { 
	}
}

226 ˛as†
	cU8GLIB_MINI12864
 : 
public
 
U8GLIB


228 
public
:

229 
	$U8GLIB_MINI12864
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

230 : 
	$U8GLIB
(&
u8g_dev_uc1701_möi12864_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

232 
	$U8GLIB_MINI12864
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

233 : 
	$U8GLIB
(&
u8g_dev_uc1701_möi12864_hw_•i
, 
cs
, 
a0
, 
ª£t
)

234 { 
	}
}

237 ˛as†
	cU8GLIB_DOGM132
 : 
public
 
U8GLIB


239 
public
:

240 
	$U8GLIB_DOGM132
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

241 : 
	$U8GLIB
(&
u8g_dev_°7565_dogm132_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

243 
	$U8GLIB_DOGM132
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

244 : 
	$U8GLIB
(&
u8g_dev_°7565_dogm132_hw_•i
, 
cs
, 
a0
, 
ª£t
)

245 { 
	}
}

248 ˛as†
	cU8GLIB_NHD_C12832
 : 
public
 
U8GLIB


250 
public
:

251 
	$U8GLIB_NHD_C12832
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

252 : 
	$U8GLIB
(&
u8g_dev_°7565_nhd_c12832_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

254 
	$U8GLIB_NHD_C12832
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

255 : 
	$U8GLIB
(&
u8g_dev_°7565_nhd_c12832_hw_•i
, 
cs
, 
a0
, 
ª£t
)

256 { 
	}
}

257 
	$U8GLIB_NHD_C12832
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

258 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

259 : 
	$U8GLIB
(&
u8g_dev_°7565_nhd_c12832_∑øŒñ
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
U8G_PIN_NONE
, 
di
, 
rw
, 
ª£t
)

260 { 
	}
}

263 ˛as†
	cU8GLIB_DOGM128
 : 
public
 
U8GLIB


265 
public
:

266 
	$U8GLIB_DOGM128
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

267 : 
	$U8GLIB
(&
u8g_dev_°7565_dogm128_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

269 
	$U8GLIB_DOGM128
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

270 : 
	$U8GLIB
(&
u8g_dev_°7565_dogm128_hw_•i
, 
cs
, 
a0
, 
ª£t
)

271 { 
	}
}

274 ˛as†
	cU8GLIB_LM6059
 : 
public
 
U8GLIB


276 
public
:

277 
	$U8GLIB_LM6059
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

278 : 
	$U8GLIB
(&
u8g_dev_°7565_lm6059_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

280 
	$U8GLIB_LM6059
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

281 : 
	$U8GLIB
(&
u8g_dev_°7565_lm6059_hw_•i
, 
cs
, 
a0
, 
ª£t
)

282 { 
	}
}

285 ˛as†
	cU8GLIB_LM6063
 : 
public
 
U8GLIB


287 
public
:

288 
	$U8GLIB_LM6063
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

289 : 
	$U8GLIB
(&
u8g_dev_°7565_lm6063_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

291 
	$U8GLIB_LM6063
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

292 : 
	$U8GLIB
(&
u8g_dev_°7565_lm6063_hw_•i
, 
cs
, 
a0
, 
ª£t
)

293 { 
	}
}

296 ˛as†
	cU8GLIB_64128N
 : 
public
 
U8GLIB


298 
public
:

299 
	$U8GLIB_64128N
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

300 : 
	$U8GLIB
(&
u8g_dev_°7565_64128n_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

302 
	$U8GLIB_64128N
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

303 : 
	$U8GLIB
(&
u8g_dev_°7565_64128n_hw_•i
, 
cs
, 
a0
, 
ª£t
)

304 { 
	}
}

307 ˛as†
	cU8GLIB_NHD_C12864
 : 
public
 
U8GLIB


309 
public
:

310 
	$U8GLIB_NHD_C12864
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

311 : 
	$U8GLIB
(&
u8g_dev_°7565_nhd_c12864_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

313 
	$U8GLIB_NHD_C12864
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

314 : 
	$U8GLIB
(&
u8g_dev_°7565_nhd_c12864_hw_•i
, 
cs
, 
a0
, 
ª£t
)

315 { 
	}
}

319 ˛as†
	cU8GLIB_ST7920_128X64
 : 
public
 
U8GLIB


321 
public
:

322 
	$U8GLIB_ST7920_128X64
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

323 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

325 
	$U8GLIB_ST7920_128X64
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

326 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_hw_•i
, 
cs
, 
a0
, 
ª£t
)

327 { 
	}
}

328 
	$U8GLIB_ST7920_128X64
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

329 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

330 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
cs2
, 
di
, 
rw
, 
ª£t
)

331 { 
	}
}

337 ˛as†
	cU8GLIB_ST7920_128X64_1X
 : 
public
 
U8GLIB


339 
public
:

340 
	$U8GLIB_ST7920_128X64_1X
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

341 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_sw_•i
, 
sck
, 
mosi
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

343 
	$U8GLIB_ST7920_128X64_1X
(
uöt8_t
 
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

344 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_hw_•i
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

345 { 
	}
}

346 
	$U8GLIB_ST7920_128X64_1X
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

347 
uöt8_t
 
í
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

348 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
U8G_PIN_NONE
, U8G_PIN_NONE, 
di
, 
rw
, 
ª£t
)

349 { 
	}
}

352 ˛as†
	cU8GLIB_ST7920_128X64_4X
 : 
public
 
U8GLIB


354 
public
:

355 
	$U8GLIB_ST7920_128X64_4X
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

356 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_4x_sw_•i
, 
sck
, 
mosi
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

358 
	$U8GLIB_ST7920_128X64_4X
(
uöt8_t
 
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

359 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_4x_hw_•i
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

360 { 
	}
}

361 
	$U8GLIB_ST7920_128X64_4X
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

362 
uöt8_t
 
í
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

363 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_4x_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
U8G_PIN_NONE
, U8G_PIN_NONE, 
di
, 
rw
, 
ª£t
)

364 { 
	}
}

369 ˛as†
	cU8GLIB_ST7920_192X32
 : 
public
 
U8GLIB


371 
public
:

372 
	$U8GLIB_ST7920_192X32
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

373 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

375 
	$U8GLIB_ST7920_192X32
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

376 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_hw_•i
, 
cs
, 
a0
, 
ª£t
)

377 { 
	}
}

378 
	$U8GLIB_ST7920_192X32
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

379 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

380 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
cs2
, 
di
, 
rw
, 
ª£t
)

381 { 
	}
}

384 ˛as†
	cU8GLIB_ST7920_192X32_1X
 : 
public
 
U8GLIB


386 
public
:

387 
	$U8GLIB_ST7920_192X32_1X
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

388 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_sw_•i
, 
sck
, 
mosi
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

390 
	$U8GLIB_ST7920_192X32_1X
(
uöt8_t
 
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

391 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_hw_•i
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

392 { 
	}
}

393 
	$U8GLIB_ST7920_192X32_1X
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

394 
uöt8_t
 
í
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

395 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
U8G_PIN_NONE
, U8G_PIN_NONE, 
di
, 
rw
, 
ª£t
)

396 { 
	}
}

399 ˛as†
	cU8GLIB_ST7920_192X32_4X
 : 
public
 
U8GLIB


401 
public
:

402 
	$U8GLIB_ST7920_192X32_4X
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

403 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_4x_sw_•i
, 
sck
, 
mosi
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

405 
	$U8GLIB_ST7920_192X32_4X
(
uöt8_t
 
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

406 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_4x_hw_•i
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

407 { 
	}
}

408 
	$U8GLIB_ST7920_192X32_4X
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

409 
uöt8_t
 
í
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

410 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_4x_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
U8G_PIN_NONE
, U8G_PIN_NONE, 
di
, 
rw
, 
ª£t
)

411 { 
	}
}

415 ˛as†
	cU8GLIB_ST7920_202X32
 : 
public
 
U8GLIB


417 
public
:

418 
	$U8GLIB_ST7920_202X32
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

419 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

421 
	$U8GLIB_ST7920_202X32
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

422 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_hw_•i
, 
cs
, 
a0
, 
ª£t
)

423 { 
	}
}

424 
	$U8GLIB_ST7920_202X32
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

425 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

426 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
cs2
, 
di
, 
rw
, 
ª£t
)

427 { 
	}
}

430 ˛as†
	cU8GLIB_ST7920_202X32_1X
 : 
public
 
U8GLIB


432 
public
:

433 
	$U8GLIB_ST7920_202X32_1X
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

434 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_sw_•i
, 
sck
, 
mosi
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

436 
	$U8GLIB_ST7920_202X32_1X
(
uöt8_t
 
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

437 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_hw_•i
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

438 { 
	}
}

439 
	$U8GLIB_ST7920_202X32_1X
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

440 
uöt8_t
 
í
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

441 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
U8G_PIN_NONE
, U8G_PIN_NONE, 
di
, 
rw
, 
ª£t
)

442 { 
	}
}

445 ˛as†
	cU8GLIB_ST7920_202X32_4X
 : 
public
 
U8GLIB


447 
public
:

448 
	$U8GLIB_ST7920_202X32_4X
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

449 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_4x_sw_•i
, 
sck
, 
mosi
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

451 
	$U8GLIB_ST7920_202X32_4X
(
uöt8_t
 
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

452 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_4x_hw_•i
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

453 { 
	}
}

454 
	$U8GLIB_ST7920_202X32_4X
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

455 
uöt8_t
 
í
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

456 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_4x_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
U8G_PIN_NONE
, U8G_PIN_NONE, 
di
, 
rw
, 
ª£t
)

457 { 
	}
}

461 ˛as†
	cU8GLIB_LC7981_160X80
 : 
public
 
U8GLIB


463 
public
:

464 
	$U8GLIB_LC7981_160X80
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

465 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

466 : 
	$U8GLIB
(&
u8g_dev_lc7981_160x80_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
U8G_PIN_NONE
, 
di
, 
rw
, 
ª£t
)

468 
	}
};

470 ˛as†
	cU8GLIB_LC7981_240X64
 : 
public
 
U8GLIB


472 
public
:

473 
	$U8GLIB_LC7981_240X64
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

474 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

475 : 
	$U8GLIB
(&
u8g_dev_lc7981_240x64_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
U8G_PIN_NONE
, 
di
, 
rw
, 
ª£t
)

477 
	}
};

479 ˛as†
	cU8GLIB_LC7981_240X128
 : 
public
 
U8GLIB


481 
public
:

482 
	$U8GLIB_LC7981_240X128
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

483 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

484 : 
	$U8GLIB
(&
u8g_dev_lc7981_240x128_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
U8G_PIN_NONE
, 
di
, 
rw
, 
ª£t
)

486 
	}
};

489 ˛as†
	cU8GLIB_LC7981_320X64
 : 
public
 
U8GLIB


491 
public
:

492 
	$U8GLIB_LC7981_320X64
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

493 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

494 : 
	$U8GLIB
(&
u8g_dev_lc7981_320x64_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
U8G_PIN_NONE
, 
di
, 
rw
, 
ª£t
)

496 
	}
};

500 ˛as†
	cU8GLIB_DOGXL160_BW
 : 
public
 
U8GLIB


502 
public
:

503 
	$U8GLIB_DOGXL160_BW
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

504 : 
	$U8GLIB
(&
u8g_dev_uc1610_dogxl160_bw_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

506 
	$U8GLIB_DOGXL160_BW
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

507 : 
	$U8GLIB
(&
u8g_dev_uc1610_dogxl160_bw_hw_•i
, 
cs
, 
a0
, 
ª£t
)

508 { 
	}
}

511 ˛as†
	cU8GLIB_DOGXL160_GR
 : 
public
 
U8GLIB


513 
public
:

514 
	$U8GLIB_DOGXL160_GR
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

515 : 
	$U8GLIB
(&
u8g_dev_uc1610_dogxl160_gr_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

517 
	$U8GLIB_DOGXL160_GR
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

518 : 
	$U8GLIB
(&
u8g_dev_uc1610_dogxl160_gr_hw_•i
, 
cs
, 
a0
, 
ª£t
)

519 { 
	}
}

522 ˛as†
	cU8GLIB_DOGXL160_2X_BW
 : 
public
 
U8GLIB


524 
public
:

525 
	$U8GLIB_DOGXL160_2X_BW
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

526 : 
	$U8GLIB
(&
u8g_dev_uc1610_dogxl160_2x_bw_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

528 
	$U8GLIB_DOGXL160_2X_BW
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

529 : 
	$U8GLIB
(&
u8g_dev_uc1610_dogxl160_2x_bw_hw_•i
, 
cs
, 
a0
, 
ª£t
)

530 { 
	}
}

533 ˛as†
	cU8GLIB_DOGXL160_2X_GR
 : 
public
 
U8GLIB


535 
public
:

536 
	$U8GLIB_DOGXL160_2X_GR
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

537 : 
	$U8GLIB
(&
u8g_dev_uc1610_dogxl160_2x_gr_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

539 
	$U8GLIB_DOGXL160_2X_GR
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

540 : 
	$U8GLIB
(&
u8g_dev_uc1610_dogxl160_2x_gr_hw_•i
, 
cs
, 
a0
, 
ª£t
)

541 { 
	}
}

545 ˛as†
	cU8GLIB_NHD27OLED_BW
 : 
public
 
U8GLIB


547 
public
:

548 
	$U8GLIB_NHD27OLED_BW
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

549 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_bw_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

551 
	$U8GLIB_NHD27OLED_BW
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

552 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_bw_hw_•i
, 
cs
, 
a0
, 
ª£t
)

553 { 
	}
}

554 
	$U8GLIB_NHD27OLED_BW
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

555 
uöt8_t
 
cs
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

556 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_bw_∑øŒñ
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
U8G_PIN_NONE
, 
cs
, U8G_PIN_NONE, 
di
, 
rw
, 
ª£t
)

557 { 
	}
}

560 ˛as†
	cU8GLIB_NHD27OLED_2X_BW
 : 
public
 
U8GLIB


562 
public
:

563 
	$U8GLIB_NHD27OLED_2X_BW
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

564 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

566 
	$U8GLIB_NHD27OLED_2X_BW
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

567 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_hw_•i
, 
cs
, 
a0
, 
ª£t
)

568 { 
	}
}

569 
	$U8GLIB_NHD27OLED_2X_BW
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

570 
uöt8_t
 
cs
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

571 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_∑øŒñ
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
U8G_PIN_NONE
, 
cs
, U8G_PIN_NONE, 
di
, 
rw
, 
ª£t
)

572 { 
	}
}

575 ˛as†
	cU8GLIB_NHD31OLED_BW
 : 
public
 
U8GLIB


577 
public
:

578 
	$U8GLIB_NHD31OLED_BW
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

579 : 
	$U8GLIB
(&
u8g_dev_ssd1322_nhd31ﬁed_bw_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

581 
	$U8GLIB_NHD31OLED_BW
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

582 : 
	$U8GLIB
(&
u8g_dev_ssd1322_nhd31ﬁed_bw_hw_•i
, 
cs
, 
a0
, 
ª£t
)

583 { 
	}
}

586 ˛as†
	cU8GLIB_NHD31OLED_2X_BW
 : 
public
 
U8GLIB


588 
public
:

589 
	$U8GLIB_NHD31OLED_2X_BW
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

590 : 
	$U8GLIB
(&
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

592 
	$U8GLIB_NHD31OLED_2X_BW
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

593 : 
	$U8GLIB
(&
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_hw_•i
, 
cs
, 
a0
, 
ª£t
)

594 { 
	}
}

597 ˛as†
	cU8GLIB_NHD31OLED_GR
 : 
public
 
U8GLIB


599 
public
:

600 
	$U8GLIB_NHD31OLED_GR
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

601 : 
	$U8GLIB
(&
u8g_dev_ssd1322_nhd31ﬁed_gr_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

603 
	$U8GLIB_NHD31OLED_GR
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

604 : 
	$U8GLIB
(&
u8g_dev_ssd1322_nhd31ﬁed_gr_hw_•i
, 
cs
, 
a0
, 
ª£t
)

605 { 
	}
}

608 ˛as†
	cU8GLIB_NHD31OLED_2X_GR
 : 
public
 
U8GLIB


610 
public
:

611 
	$U8GLIB_NHD31OLED_2X_GR
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

612 : 
	$U8GLIB
(&
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

614 
	$U8GLIB_NHD31OLED_2X_GR
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

615 : 
	$U8GLIB
(&
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_hw_•i
, 
cs
, 
a0
, 
ª£t
)

616 { 
	}
}

620 ˛as†
	cU8GLIB_SSD1306_128X64
 : 
public
 
U8GLIB


622 
public
:

623 
	$U8GLIB_SSD1306_128X64
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

624 : 
	$U8GLIB
(&
u8g_dev_ssd1306_128x64_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

626 
	$U8GLIB_SSD1306_128X64
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

627 : 
	$U8GLIB
(&
u8g_dev_ssd1306_128x64_hw_•i
, 
cs
, 
a0
, 
ª£t
)

628 { 
	}
}

629 
	$U8GLIB_SSD1306_128X64
(
uöt8_t
 
›ti⁄s
 = 
U8G_I2C_OPT_NONE
)

630 : 
	$U8GLIB
(&
u8g_dev_ssd1306_128x64_i2c
, 
›ti⁄s
)

631 { 
	}
}

635 ˛as†
	cU8GLIB_SSD1309_128X64
 : 
public
 
U8GLIB


637 
public
:

638 
	$U8GLIB_SSD1309_128X64
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

639 : 
	$U8GLIB
(&
u8g_dev_ssd1309_128x64_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

641 
	$U8GLIB_SSD1309_128X64
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

642 : 
	$U8GLIB
(&
u8g_dev_ssd1309_128x64_hw_•i
, 
cs
, 
a0
, 
ª£t
)

643 { 
	}
}

644 
	$U8GLIB_SSD1309_128X64
(
uöt8_t
 
›ti⁄s
 = 
U8G_I2C_OPT_NONE
)

645 : 
	$U8GLIB
(&
u8g_dev_ssd1309_128x64_i2c
, 
›ti⁄s
)

646 { 
	}
}

650 ˛as†
	cU8GLIB_SSD1306_128X32
 : 
public
 
U8GLIB


652 
public
:

653 
	$U8GLIB_SSD1306_128X32
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

654 : 
	$U8GLIB
(&
u8g_dev_ssd1306_128x32_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

656 
	$U8GLIB_SSD1306_128X32
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

657 : 
	$U8GLIB
(&
u8g_dev_ssd1306_128x32_hw_•i
, 
cs
, 
a0
, 
ª£t
)

658 { 
	}
}

659 
	$U8GLIB_SSD1306_128X32
(
uöt8_t
 
›ti⁄s
 = 
U8G_I2C_OPT_NONE
)

660 : 
	$U8GLIB
(&
u8g_dev_ssd1306_128x32_i2c
, 
›ti⁄s
)

661 { 
	}
}

666 ˛as†
	cU8GLIB_NHD27OLED_GR
 : 
public
 
U8GLIB


668 
public
:

669 
	$U8GLIB_NHD27OLED_GR
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

670 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_gr_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

672 
	$U8GLIB_NHD27OLED_GR
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

673 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_gr_hw_•i
, 
cs
, 
a0
, 
ª£t
)

674 { 
	}
}

677 ˛as†
	cU8GLIB_NHD27OLED_2X_GR
 : 
public
 
U8GLIB


679 
public
:

680 
	$U8GLIB_NHD27OLED_2X_GR
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

681 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_2x_gr_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

683 
	$U8GLIB_NHD27OLED_2X_GR
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

684 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_2x_gr_hw_•i
, 
cs
, 
a0
, 
ª£t
)

685 { 
	}
}

688 ˛as†
	cU8GLIB_SSD1327_96X96_GR
 : 
public
 
U8GLIB


690 
public
:

691 
	$U8GLIB_SSD1327_96X96_GR
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

692 : 
	$U8GLIB
(&
u8g_dev_ssd1327_96x96_gr_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

694 
	$U8GLIB_SSD1327_96X96_GR
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

695 : 
	$U8GLIB
(&
u8g_dev_ssd1327_96x96_gr_hw_•i
, 
cs
, 
a0
, 
ª£t
)

696 { 
	}
}

697 
	$U8GLIB_SSD1327_96X96_GR
(
uöt8_t
 
›ti⁄s
 = 
U8G_I2C_OPT_NONE
)

698 : 
	$U8GLIB
(&
u8g_dev_ssd1327_96x96_gr_i2c
, 
›ti⁄s
)

699 { 
	}
}

702 ˛as†
	cU8GLIB_SSD1327_96X96_2X_GR
 : 
public
 
U8GLIB


704 
public
:

705 
	$U8GLIB_SSD1327_96X96_2X_GR
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

706 : 
	$U8GLIB
(&
u8g_dev_ssd1327_96x96_2x_gr_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

708 
	$U8GLIB_SSD1327_96X96_2X_GR
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

709 : 
	$U8GLIB
(&
u8g_dev_ssd1327_96x96_2x_gr_hw_•i
, 
cs
, 
a0
, 
ª£t
)

710 { 
	}
}

711 
	$U8GLIB_SSD1327_96X96_2X_GR
(
uöt8_t
 
›ti⁄s
 = 
U8G_I2C_OPT_NONE
)

712 : 
	$U8GLIB
(&
u8g_dev_ssd1327_96x96_2x_gr_i2c
, 
›ti⁄s
)

713 { 
	}
}

716 ˛as†
	cU8GLIB_PCF8812
 : 
public
 
U8GLIB


718 
public
:

719 
	$U8GLIB_PCF8812
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

720 : 
	$U8GLIB
(&
u8g_dev_pcf8812_96x65_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

722 
	}
};

724 ˛as†
	cU8GLIB_PCD8544
 : 
public
 
U8GLIB


726 
public
:

727 
	$U8GLIB_PCD8544
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

728 : 
	$U8GLIB
(&
u8g_dev_pcd8544_84x48_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

730 
	}
};

732 ˛as†
	cU8GLIB_TLS8204_84X48
 : 
public
 
U8GLIB


734 
public
:

735 
	$U8GLIB_TLS8204_84X48
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

736 : 
	$U8GLIB
(&
u8g_dev_és8204_84x48_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

738 
	}
};

740 ˛as†
	cU8GLIB_KS0108_128
 : 
public
 
U8GLIB


742 
public
:

743 
	$U8GLIB_KS0108_128
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

744 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

745 : 
	$U8GLIB
(&
u8g_dev_ks0108_128x64_Á°
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
cs2
, 
di
, 
rw
, 
ª£t
)

747 
	}
};

749 ˛as†
	cU8GLIB_SBN1661_122X32
 : 
public
 
U8GLIB


751 
public
:

752 
	$U8GLIB_SBN1661_122X32
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

753 
uöt8_t
 
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

754 : 
	$U8GLIB
(&
u8g_dev_sbn1661_122x32
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
U8G_PIN_NONE
, 
cs1
, 
cs2
, 
di
, 
rw
, 
ª£t
)

756 
	}
};

758 ˛as†
	cU8GLIB_T6963_240X128
 : 
public
 
U8GLIB


760 
public
:

761 
	$U8GLIB_T6963_240X128
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

762 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
wr
, uöt8_à
rd
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

763 : 
	$U8GLIB
(&
u8g_dev_t6963_240x128_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
cs
, 
a0
, 
wr
, 
rd
, 
ª£t
)

765 
	}
};

767 ˛as†
	cU8GLIB_T6963_240X64
 : 
public
 
U8GLIB


769 
public
:

770 
	$U8GLIB_T6963_240X64
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

771 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
wr
, uöt8_à
rd
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

772 : 
	$U8GLIB
(&
u8g_dev_t6963_240x64_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
cs
, 
a0
, 
wr
, 
rd
, 
ª£t
)

774 
	}
};

776 ˛as†
	cU8GLIB_T6963_128X64
 : 
public
 
U8GLIB


778 
public
:

779 
	$U8GLIB_T6963_128X64
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

780 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
wr
, uöt8_à
rd
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

781 : 
	$U8GLIB
(&
u8g_dev_t6963_128x64_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
cs
, 
a0
, 
wr
, 
rd
, 
ª£t
)

783 
	}
};

786 ˛as†
	cU8GLIB_ST7687_C144MVGD
: 
public
 
U8GLIB


788 
public
:

789 
	$U8GLIB_ST7687_C144MVGD
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

790 : 
	$U8GLIB
(&
u8g_dev_°7687_c144mvgd_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

792 
	$U8GLIB_ST7687_C144MVGD
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

793 
uöt8_t
 
í
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

794 : 
	$U8GLIB
(&
u8g_dev_ks0108_128x64_Á°
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs
, 
U8G_PIN_NONE
, 
a0
, 
rw
, 
ª£t
)

795 { 
	}
}

798 ˛as†
	cU8GLIB_ILI9325D_320x240
 : 
public
 
U8GLIB


800 
public
:

807 
	$U8GLIB_ILI9325D_320x240
–
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

808 { 
	`öô8BôFixedP‹t
(&
u8g_dev_ûi9325d_320x240_8bô
, 
í
, 
cs1
, 
di
, 
rw
, 
ª£t
); }

809 
	}
};

811 ˛as†
	cU8GLIB_FLIPDISC_2X7
 : 
public
 
U8GLIB


813 
public
:

814 
	$U8GLIB_FLIPDISC_2X7
(Ë: 
	$U8GLIB
(&
u8g_dev_Êùdisc_2x7
)

816 
	}
};

818 ˛as†
	cU8GLIB_VS
 : 
public
 
U8GLIB


820 
public
:

821 
	$U8GLIB_VS
(Ë: 
	$U8GLIB
(&
u8g_dev_vs
)

823 
	}
};

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/chessengine.c

103 
	~"u8g.h
"

118 
	#PIECE_NONE
 0

	)

119 
	#PIECE_PAWN
 1

	)

120 
	#PIECE_KNIGHT
 2

	)

121 
	#PIECE_BISHOP
 3

	)

122 
	#PIECE_ROOK
 4

	)

123 
	#PIECE_QUEEN
 5

	)

124 
	#PIECE_KING
 6

	)

127 
	#COLOR_WHITE
 0

	)

128 
	#COLOR_BLACK
 1

	)

131 
	#COLOR_PIECE_MASK
 0x01f

	)

133 
	#CP_MARK_MASK
 0x20

	)

135 
	#ILLEGAL_POSITION
 255

	)

140 
	#STACK_MAX_SIZE
 5

	)

143 
	#CHM_USER_SIZE
 6

	)

147 
	#CHM_LIST_SIZE
 (
STACK_MAX_SIZE
+
CHM_USER_SIZE
+2)

	)

149 
öt16_t
 
	tevÆ_t
;

151 
	#EVAL_T_MIN
 -32767

	)

152 
	#EVAL_T_MAX
 32767

	)

156 
	s_°ack_ñemít_°ru˘


159 
uöt8_t
 
	mcuºít_pos
;

160 
uöt8_t
 
	mcuºít_˝
;

161 
uöt8_t
 
	mcuºít_cﬁ‹
;

164 
uöt8_t
 
	mbe°_‰om_pos
;

165 
uöt8_t
 
	mbe°_to_pos
;

167 
evÆ_t
 
	mbe°_evÆ
;

169 
_°ack_ñemít_°ru˘
 
	t°ack_ñemít_t
;

170 
_°ack_ñemít_°ru˘
 *
	t°ack_ñemít_p
;

173 
	s_chm_°ru˘


175 
uöt8_t
 
	mmaö_˝
;

176 
uöt8_t
 
	mmaö_§c
;

177 
uöt8_t
 
	mmaö_de°
;

179 
uöt8_t
 
	mŸhî_˝
;

180 
uöt8_t
 
	mŸhî_§c
;

181 
uöt8_t
 
	mŸhî_de°
;

187 
uöt8_t
 
	m∑wn_dbl_move
[2];

197 
uöt8_t
 
	mˇ°lög_possibÀ
;

200 
_chm_°ru˘
 
	tchm_t
;

201 
_chm_°ru˘
 *
	tchm_p
;

204 
	s_Ãc_°ru˘


209 
uöt8_t
 
	m∂y_cou¡
;

212 
uöt8_t
 
	mchm_pos
;

216 
uöt8_t
 
	mbﬂrd
[64];

220 
uöt8_t
 
	m∑wn_dbl_move
[2];

229 
uöt8_t
 
	mˇ°lög_possibÀ
;

235 
uöt8_t
 
	m‹õ¡©i⁄
;

240 
uöt8_t
 
	m°rike_out_cﬁ‹
;

244 
uöt8_t
 
	mis_game_íd
;

248 
uöt8_t
 
	mlo°_side_cﬁ‹
;

256 
uöt8_t
 
	mcheck_§c_pos
;

257 
uöt8_t
 
	mcheck_mode
;

261 
uöt8_t
 
	mföd_põ˚_˙t
[2];

264 
uöt8_t
 
	mföd_põ˚_weight
[2];

269 
uöt8_t
 
	mcuº_dïth
;

270 
uöt8_t
 
	mmax_dïth
;

271 
°ack_ñemít_p
 
	mcuº_ñemít
;

274 
°ack_ñemít_t
 
	m°ack_mem‹y
[
STACK_MAX_SIZE
];

277 
chm_t
 
	mchm_li°
[
CHM_LIST_SIZE
];

279 
_Ãc_°ru˘
 
	tÃc_t
;

281 
	#CHECK_MODE_NONE
 0

	)

282 
	#CHECK_MODE_MOVEABLE
 1

	)

283 
	#CHECK_MODE_TARGET_MOVE
 2

	)

291 
u8g_t
 *
	gÃc_u8g
;

293 
Ãc_t
 
	gÃc_obj
;

308 
uöt8_t
 
	$°ack_Push
(
uöt8_t
 
cﬁ‹
Ë
U8G_NOINLINE
;

309 
	$°ack_P›
(Ë
U8G_NOINLINE
;

310 
	$°ack_InôCuºEÀmít
(Ë
U8G_NOINLINE
;

311 
	$°ack_Inô
(
uöt8_t
 
max
Ë
U8G_NOINLINE
;

312 
	$°ack_SëMove
(
evÆ_t
 
vÆ
, 
uöt8_t
 
to_pos
Ë
U8G_NOINLINE
;

313 
uöt8_t
 
	$cu_NextPos
(
uöt8_t
 
pos
Ë
U8G_NOINLINE
;

314 
uöt8_t
 
	`cu_gpos2bpos
(uöt8_à
gpos
);

315 
uöt8_t
 
	`˝_C⁄°ru˘
(uöt8_à
cﬁ‹
, uöt8_à
põ˚
);

316 
uöt8_t
 
	`˝_GëPõ˚
(uöt8_à
˝
);

317 
uöt8_t
 
	`˝_GëCﬁ‹
(uöt8_à
˝
);

318 
uöt8_t
 
	$˝_GëFromBﬂrd
(
uöt8_t
 
pos
Ë
U8G_NOINLINE
;

319 
	$˝_SëOnBﬂrd
(
uöt8_t
 
pos
, uöt8_à
˝
Ë
U8G_NOINLINE
;

321 
	$cu_CÀ¨Bﬂrd
(Ë
U8G_NOINLINE
;

322 
	$chess_SëupBﬂrd
(Ë
U8G_NOINLINE
;

323 
evÆ_t
 
	`˚_EvÆ
();

325 
	$cu_CÀ¨MoveHi°‹y
(Ë
U8G_NOINLINE
;

326 
	$cu_Redu˚Hi°‹yByFuŒMove
(Ë
U8G_NOINLINE
;

327 
	$cu_UndoHÆfMove
(Ë
U8G_NOINLINE
;

328 
chm_p
 
	$cu_PushHÆfMove
(Ë
U8G_NOINLINE
;

331 
	`˚_CÆcuœãPosôi⁄Weight
(
uöt8_t
 
pos
);

332 
uöt8_t
 
	`˚_GëPosôi⁄AâackWeight
(uöt8_à
pos
, uöt8_à
cﬁ‹
);

334 
	`chess_Thökög
();

335 
	`˚_Lo›Põ˚s
();

343 
°ack_ñemít_p
 
	$°ack_GëCuºEÀmít
()

345  
Ãc_obj
.
cuº_ñemít
;

346 
	}
}

348 
uöt8_t
 
	$°ack_Push
(
uöt8_t
 
cﬁ‹
)

350 i‡–
Ãc_obj
.
cuº_dïth
 =Ãc_obj.
max_dïth
 )

352 
Ãc_obj
.
cuº_dïth
++;

353 
Ãc_obj
.
cuº_ñemít
 =Ürc_obj.
°ack_mem‹y
+Ãc_obj.
cuº_dïth
;

356 
cﬁ‹
 ^= 1;

357 
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
 = 
cﬁ‹
;

360 
	}
}

362 
	$°ack_P›
()

364 
Ãc_obj
.
cuº_dïth
--;

365 
Ãc_obj
.
cuº_ñemít
 =Ürc_obj.
°ack_mem‹y
+Ãc_obj.
cuº_dïth
;

366 
	}
}

369 
	$°ack_InôCuºEÀmít
()

371 
°ack_ñemít_p
 
e
 = 
	`°ack_GëCuºEÀmít
();

372 
e
->
be°_evÆ
 = 
EVAL_T_MIN
;

373 
e
->
be°_‰om_pos
 = 
ILLEGAL_POSITION
;

374 
e
->
be°_to_pos
 = 
ILLEGAL_POSITION
;

375 
	}
}

378 
	$°ack_Inô
(
uöt8_t
 
max
)

380 
Ãc_obj
.
cuº_dïth
 = 0;

381 
Ãc_obj
.
cuº_ñemít
 =Ürc_obj.
°ack_mem‹y
;

382 
Ãc_obj
.
max_dïth
 = 
max
;

383 
Ãc_obj
.
check_mode
 = 
CHECK_MODE_NONE
;

384 
	`°ack_InôCuºEÀmít
();

385 
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
 = 
Ãc_obj
.
∂y_cou¡
;

386 
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
 &= 1;

387 
	}
}

391 
	$°ack_SëMove
(
evÆ_t
 
vÆ
, 
uöt8_t
 
to_pos
)

393 
°ack_ñemít_p
 
e
 = 
	`°ack_GëCuºEÀmít
();

394 i‡–
e
->
be°_evÆ
 < 
vÆ
 )

396 
e
->
be°_evÆ
 = 
vÆ
;

397 
e
->
be°_‰om_pos
 =É->
cuºít_pos
;

398 
e
->
be°_to_pos
 = 
to_pos
;

400 
	}
}

414 
uöt8_t
 
	$cu_NextPos
(
uöt8_t
 
pos
)

417 
pos
++;

418 i‡––
pos
 & 0x08 ) != 0 )

420 
pos
+= 0x10;

421 
pos
&= 0xf0;

423 i‡––
pos
 & 0x80 ) != 0 )

424 
pos
 = 0;

425  
pos
;

426 
	}
}

428 
uöt8_t
 
	$cu_PªvPos
(
uöt8_t
 
pos
)

431 
pos
--;

432 i‡––
pos
 & 0x80 ) != 0 )

433 
pos
 = 0x077;

434 i‡––
pos
 & 0x08 ) != 0 )

436 
pos
 &= 0xf0;

437 
pos
 |= 0x07;

439  
pos
;

440 
	}
}

456 
uöt8_t
 
	$cu_gpos2bpos
(
uöt8_t
 
gpos
)

458 
uöt8_t
 
bpos
 = 
gpos
;

459 
bpos
 &= 0xf0;

460 
bpos
 >>= 1;

461 
gpos
 &= 0x0f;

462 
bpos
 |
gpos
;

463  
bpos
;

464 
	}
}

466 
	#gpos_IsIŒegÆ
(
gpos
Ë((gposË& 0x088)

	)

473 
	#˝_IsM¨ked
(
˝
Ë((˝Ë& 
CP_MARK_MASK
)

	)

482 
uöt8_t
 
	$˝_C⁄°ru˘
(
uöt8_t
 
cﬁ‹
, uöt8_à
põ˚
)

484 
cﬁ‹
 <<= 4;

485 
cﬁ‹
 |
põ˚
;

486  
cﬁ‹
;

487 
	}
}

490 
uöt8_t
 
	$˝_GëPõ˚
(
uöt8_t
 
˝
)

492 
˝
 &= 0x0f;

493  
˝
;

494 
	}
}

501 
uöt8_t
 
	$˝_GëCﬁ‹
(
uöt8_t
 
˝
)

503 
˝
 >>= 4;

504 
˝
 &= 1;

505  
˝
;

506 
	}
}

512 
uöt8_t
 
	$˝_GëFromBﬂrd
(
uöt8_t
 
pos
)

514  
Ãc_obj
.
bﬂrd
[
	`cu_gpos2bpos
(
pos
)];

515 
	}
}

521 
	$˝_SëOnBﬂrd
(
uöt8_t
 
pos
, uöt8_à
˝
)

524 
Ãc_obj
.
bﬂrd
[
	`cu_gpos2bpos
(
pos
)] = 
˝
;

525 
	}
}

531 
	$cu_CÀ¨Bﬂrd
()

533 
uöt8_t
 
i
;

535  
i
 = 0; i < 64; i++ )

536 
Ãc_obj
.
bﬂrd
[
i
] = 
PIECE_NONE
;

538 
Ãc_obj
.
∂y_cou¡
 = 0;

539 
Ãc_obj
.
‹õ¡©i⁄
 = 
COLOR_WHITE
;

541 
Ãc_obj
.
∑wn_dbl_move
[0] = 
ILLEGAL_POSITION
;

542 
Ãc_obj
.
∑wn_dbl_move
[1] = 
ILLEGAL_POSITION
;

544 
Ãc_obj
.
ˇ°lög_possibÀ
 = 0x0f;

546 
Ãc_obj
.
is_game_íd
 = 0;

547 
Ãc_obj
.
lo°_side_cﬁ‹
 = 0;

550 
	`cu_CÀ¨MoveHi°‹y
();

552 
	}
}

558 
	$chess_SëupBﬂrdTe°01
()

560 
	`cu_CÀ¨Bﬂrd
();

561 
Ãc_obj
.
bﬂrd
[7+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_KING
);

562 
Ãc_obj
.
bﬂrd
[7+5*8] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_PAWN
);

563 
Ãc_obj
.
bﬂrd
[3] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_KING
);

564 
Ãc_obj
.
bﬂrd
[0+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_ROOK
);

565 
Ãc_obj
.
bﬂrd
[6] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_QUEEN
);

566 
	}
}

569 
	$chess_SëupBﬂrd
()

571 
uöt8_t
 
i
;

572 
uöt8_t
 
bp
, 
wp
;

575 
	`cu_CÀ¨Bﬂrd
();

578 
wp
 = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_PAWN
);

579 
bp
 = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_PAWN
);

582  
i
 = 0; i < 8; i++ )

584 
Ãc_obj
.
bﬂrd
[
i
+8] = 
wp
;

585 
Ãc_obj
.
bﬂrd
[
i
+6*8] = 
bp
;

590 
Ãc_obj
.
bﬂrd
[0] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_ROOK
);

591 
Ãc_obj
.
bﬂrd
[1] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_KNIGHT
);

592 
Ãc_obj
.
bﬂrd
[2] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_BISHOP
);

593 
Ãc_obj
.
bﬂrd
[3] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_QUEEN
);

594 
Ãc_obj
.
bﬂrd
[4] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_KING
);

595 
Ãc_obj
.
bﬂrd
[5] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_BISHOP
);

596 
Ãc_obj
.
bﬂrd
[6] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_KNIGHT
);

597 
Ãc_obj
.
bﬂrd
[7] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_ROOK
);

599 
Ãc_obj
.
bﬂrd
[0+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_ROOK
);

600 
Ãc_obj
.
bﬂrd
[1+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_KNIGHT
);

601 
Ãc_obj
.
bﬂrd
[2+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_BISHOP
);

602 
Ãc_obj
.
bﬂrd
[3+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_QUEEN
);

603 
Ãc_obj
.
bﬂrd
[4+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_KING
);

604 
Ãc_obj
.
bﬂrd
[5+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_BISHOP
);

605 
Ãc_obj
.
bﬂrd
[6+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_KNIGHT
);

606 
Ãc_obj
.
bﬂrd
[7+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_ROOK
);

610 
	}
}

621 
uöt8_t
 
	$cu_IsIŒegÆPosôi⁄
(
uöt8_t
 
pos
, uöt8_à
my_cﬁ‹
)

623 
uöt8_t
 
bﬂrd_˝
;

625 i‡–
	`gpos_IsIŒegÆ
(
pos
) != 0 )

628 
bﬂrd_˝
 = 
	`˝_GëFromBﬂrd
(
pos
);

630 i‡–
bﬂrd_˝
 != 0 )

631 i‡–
	`˝_GëCﬁ‹
(
bﬂrd_˝
Ë=
my_cﬁ‹
 )

635 
	}
}

656 
uöt8_t
 
	g˚_põ˚_weight
[] = { 0, 1, 3, 3, 5, 9, 0 };

657 
uöt8_t
 
	g˚_pos_weight
[] = { 0, 1, 1, 2, 2, 1, 1, 0};

661 
evÆ_t
 
	$˚_EvÆ
()

663 
uöt8_t
 
˝
;

664 
uöt8_t
 
is_my_kög_¥e£¡
 = 0;

665 
uöt8_t
 
is_›posô_kög_¥e£¡
 = 0;

666 
evÆ_t
 
m©îül_my_cﬁ‹
 = 0;

667 
evÆ_t
 
m©îül_›posô_cﬁ‹
 = 0;

668 
evÆ_t
 
posôi⁄_my_cﬁ‹
 = 0;

669 
evÆ_t
 
posôi⁄_›posô_cﬁ‹
 = 0;

670 
evÆ_t
 
ªsu…
;

671 
uöt8_t
 
pos
;

673 
pos
 = 0;

677 
˝
 = 
	`˝_GëFromBﬂrd
(
pos
);

679 i‡–
	`˝_GëPõ˚
(
˝
Ë!
PIECE_NONE
 )

681 i‡–
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
 =
	`˝_GëCﬁ‹
(
˝
) )

685 i‡–
	`˝_GëPõ˚
(
˝
Ë=
PIECE_KING
 )

686 
is_my_kög_¥e£¡
 = 1;

687 
m©îül_my_cﬁ‹
 +
˚_põ˚_weight
[
	`˝_GëPõ˚
(
˝
)];

688 i‡–
	`˝_GëPõ˚
(
˝
Ë=
PIECE_PAWN
 || cp_GëPõ˚(˝Ë=
PIECE_KNIGHT
 )

690 
posôi⁄_my_cﬁ‹
 +
˚_pos_weight
[
pos
&7]*ce_pos_weight[(pos>>4)&7];

696 i‡–
	`˝_GëPõ˚
(
˝
Ë=
PIECE_KING
 )

697 
is_›posô_kög_¥e£¡
 = 1;

698 
m©îül_›posô_cﬁ‹
 +
˚_põ˚_weight
[
	`˝_GëPõ˚
(
˝
)];

699 i‡–
	`˝_GëPõ˚
(
˝
Ë=
PIECE_PAWN
 || cp_GëPõ˚(˝Ë=
PIECE_KNIGHT
 )

701 
posôi⁄_›posô_cﬁ‹
 +
˚_pos_weight
[
pos
&7]*ce_pos_weight[(pos>>4)&7];

705 
pos
 = 
	`cu_NextPos
(pos);

706 }  
pos
 != 0 );

710 i‡–
is_my_kög_¥e£¡
 == 0 )

711  
EVAL_T_MIN
;

712 i‡–
is_›posô_kög_¥e£¡
 == 0 )

713  
EVAL_T_MAX
;

717 
ªsu…
 = 
m©îül_my_cﬁ‹
 - 
m©îül_›posô_cﬁ‹
;

718 
ªsu…
 <<= 3;

719 
ªsu…
 +
posôi⁄_my_cﬁ‹
 - 
posôi⁄_›posô_cﬁ‹
;

720  
ªsu…
;

721 
	}
}

731 
	$cu_CÀ¨MoveHi°‹y
()

733 
Ãc_obj
.
chm_pos
 = 0;

734 
	}
}

736 
	$cu_Redu˚Hi°‹yByFuŒMove
()

738 
uöt8_t
 
i
;

739  
Ãc_obj
.
chm_pos
 > 
CHM_USER_SIZE
 )

741 
i
 = 0;

744 i‡–
i
+2 >
Ãc_obj
.
chm_pos
 )

746 
Ãc_obj
.
chm_li°
[
i
] =Ürc_obj.chm_list[i+2];

747 
i
++;

749 
Ãc_obj
.
chm_pos
 -= 2;

751 
	}
}

753 
	$cu_UndoHÆfMove
()

755 
chm_p
 
chm
;

757 i‡–
Ãc_obj
.
chm_pos
 == 0 )

760 
Ãc_obj
.
chm_pos
--;

762 
chm
 = 
Ãc_obj
.
chm_li°
+Ãc_obj.
chm_pos
;

764 
Ãc_obj
.
∑wn_dbl_move
[0] = 
chm
->pawn_dbl_move[0];

765 
Ãc_obj
.
∑wn_dbl_move
[1] = 
chm
->pawn_dbl_move[1];

766 
Ãc_obj
.
ˇ°lög_possibÀ
 = 
chm
->castling_possible;

768 
	`˝_SëOnBﬂrd
(
chm
->
maö_§c
, chm->
maö_˝
);

769 
	`˝_SëOnBﬂrd
(
chm
->
maö_de°
, 
PIECE_NONE
);

771 i‡–
chm
->
Ÿhî_§c
 !
ILLEGAL_POSITION
 )

772 
	`˝_SëOnBﬂrd
(
chm
->
Ÿhî_§c
, chm->
Ÿhî_˝
);

773 i‡–
chm
->
Ÿhî_de°
 !
ILLEGAL_POSITION
 )

774 
	`˝_SëOnBﬂrd
(
chm
->
Ÿhî_de°
, 
PIECE_NONE
);

776 
	}
}

789 
chm_p
 
	$cu_PushHÆfMove
()

791 
chm_p
 
chm
;

793 
chm
 = 
Ãc_obj
.
chm_li°
+Ãc_obj.
chm_pos
;

794 i‡–
Ãc_obj
.
chm_pos
 < 
CHM_LIST_SIZE
-1)

795 
Ãc_obj
.
chm_pos
++;

797 
chm
->
∑wn_dbl_move
[0] = 
Ãc_obj
.pawn_dbl_move[0];

798 
chm
->
∑wn_dbl_move
[1] = 
Ãc_obj
.pawn_dbl_move[1];

799 
chm
->
ˇ°lög_possibÀ
 = 
Ãc_obj
.castling_possible;

800  
chm
;

801 
	}
}

804 
	gchess_põ˚_to_ch¨
[] = "NBRQK";

812 
	$cu_add_pos
(*
s
, 
uöt8_t
 
pos
Ë
U8G_NOINLINE
;

814 
	$cu_add_pos
(*
s
, 
uöt8_t
 
pos
)

816 *
s
 = 
pos
;

817 *
s
 >>= 4;

818 *
s
 += 'a';

819 
s
++;

820 *
s
 = 
pos
;

821 *
s
 &= 15;

822 *
s
 += '1';

823 
	}
}

825 c⁄° *
	$cu_GëHÆfMoveSå
(
uöt8_t
 
idx
)

827 
chm_p
 
chm
;

828 
buf
[7];

829 *
p
 = 
buf
;

830 
chm
 = 
Ãc_obj
.
chm_li°
+
idx
;

832 i‡–
	`˝_GëPõ˚
(
chm
->
maö_˝
Ë!
PIECE_NONE
 )

834 i‡–
	`˝_GëPõ˚
(
chm
->
maö_˝
Ë> 
PIECE_PAWN
 )

836 *
p
++ = 
chess_põ˚_to_ch¨
[
	`˝_GëPõ˚
(
chm
->
maö_˝
)-2];

838 
	`cu_add_pos
(
p
, 
chm
->
maö_§c
);

839 
p
+=2;

840 i‡–
	`˝_GëPõ˚
(
chm
->
Ÿhî_˝
Ë=
PIECE_NONE
 )

841 *
p
++ = '-';

843 *
p
++ = 'x';

844 
	`cu_add_pos
(
p
, 
chm
->
maö_de°
);

845 
p
+=2;

847 *
p
 = '\0';

848  
buf
;

849 
	}
}

881 
	$cu_Move
(
uöt8_t
 
§c
, uöt8_à
de°
)

884 
chm_p
 
chm
 = 
	`cu_PushHÆfMove
();

887 
uöt8_t
 
˝_§c
, 
˝_de°
;

890 
uöt8_t
 
˛r_pos2
;

891 
uöt8_t
 
£t_pos2
;

892 
uöt8_t
 
£t_˝2
;

895 
˝_§c
 = 
	`˝_GëFromBﬂrd
(
§c
);

896 
˝_de°
 = 
	`˝_GëFromBﬂrd
(
de°
);

900 
chm
->
maö_˝
 = 
˝_§c
;

901 
chm
->
maö_§c
 = 
§c
;

902 
chm
->
maö_de°
 = 
de°
;

904 
chm
->
Ÿhî_˝
 = 
˝_de°
;

905 
chm
->
Ÿhî_§c
 = 
de°
;

906 
chm
->
Ÿhî_de°
 = 
ILLEGAL_POSITION
;

910 
˛r_pos2
 = 
ILLEGAL_POSITION
;

911 
£t_pos2
 = 
ILLEGAL_POSITION
;

912 
£t_˝2
 = 
PIECE_NONE
;

915 i‡–
	`˝_GëPõ˚
(
˝_§c
Ë=
PIECE_PAWN
 )

919 i‡–(
§c
 - 
de°
 == 32) || ( dest - src == 32 ) )

922 
Ãc_obj
.
∑wn_dbl_move
[
	`˝_GëCﬁ‹
(
˝_§c
)] = 
de°
;

926 i‡–(
de°
>>4) == 0 || (dest>>4) == 7 )

929 
˝_§c
 &~
PIECE_PAWN
;

930 
˝_§c
 |
PIECE_QUEEN
;

935 i‡–((
§c
 + 
de°
) & 1) != 0 )

938 i‡–
	`˝_GëPõ˚
(
˝_de°
Ë=
PIECE_NONE
 )

943 
˛r_pos2
 = 
Ãc_obj
.
∑wn_dbl_move
[
	`˝_GëCﬁ‹
(
˝_§c
) ^ 1];

944 
chm
->
Ÿhî_§c
 = 
˛r_pos2
;

945 
chm
->
Ÿhî_˝
 = 
	`˝_GëFromBﬂrd
(
˛r_pos2
);

951 i‡–
	`˝_GëPõ˚
(
˝_§c
Ë=
PIECE_KING
 )

954 i‡–
	`˝_GëCﬁ‹
(
˝_§c
Ë=
COLOR_WHITE
 )

957 
Ãc_obj
.
ˇ°lög_possibÀ
 &= 0x0c;

962 
Ãc_obj
.
ˇ°lög_possibÀ
 &= 0x03;

966 i‡–
§c
 - 
de°
 == 2 )

969 
£t_pos2
 = 
§c
-1;

970 
£t_˝2
 = 
	`˝_GëFromBﬂrd
(
§c
-4);

973 
˛r_pos2
 = 
§c
-4;

975 
chm
->
Ÿhî_˝
 = 
£t_˝2
;

976 
chm
->
Ÿhî_§c
 = 
˛r_pos2
;

977 
chm
->
Ÿhî_de°
 = 
£t_pos2
;

981 i‡–
de°
 - 
§c
 == 2 )

984 
£t_pos2
 = 
§c
+1;

985 
£t_˝2
 = 
	`˝_GëFromBﬂrd
(
§c
+3);

988 
˛r_pos2
 = 
§c
+3;

990 
chm
->
Ÿhî_˝
 = 
£t_˝2
;

991 
chm
->
Ÿhî_§c
 = 
˛r_pos2
;

992 
chm
->
Ÿhî_de°
 = 
£t_pos2
;

999 i‡–
	`˝_GëPõ˚
(
˝_§c
Ë=
PIECE_ROOK
 )

1002 i‡–
§c
 == 0x00 )

1003 
Ãc_obj
.
ˇ°lög_possibÀ
 &= ~0x01;

1005 i‡–
§c
 == 0x07 )

1006 
Ãc_obj
.
ˇ°lög_possibÀ
 &= ~0x02;

1008 i‡–
§c
 == 0x70 )

1009 
Ãc_obj
.
ˇ°lög_possibÀ
 &= ~0x04;

1011 i‡–
§c
 == 0x77 )

1012 
Ãc_obj
.
ˇ°lög_possibÀ
 &= ~0x08;

1018 
	`˝_SëOnBﬂrd
(
de°
, 
˝_§c
);

1020 i‡–
£t_pos2
 !
ILLEGAL_POSITION
 )

1021 
	`˝_SëOnBﬂrd
(
£t_pos2
, 
£t_˝2
);

1023 
	`˝_SëOnBﬂrd
(
§c
, 
PIECE_NONE
);

1025 i‡–
˛r_pos2
 !
ILLEGAL_POSITION
 )

1026 
	`˝_SëOnBﬂrd
(
˛r_pos2
, 
PIECE_NONE
);

1029 
	}
}

1036 
uöt8_t
 
	$˚_Lo›Recur
(
uöt8_t
 
pos
)

1038 
evÆ_t
 
evÆ
;

1042 i‡–
	`cu_IsIŒegÆPosôi⁄
(
pos
, 
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
) != 0 )

1046 
	`cu_Move
(
	`°ack_GëCuºEÀmít
()->
cuºít_pos
, 
pos
);

1053 i‡–
	`°ack_Push
(
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
) == 0 )

1055 
evÆ
 = 
	`˚_EvÆ
();

1060 
	`°ack_InôCuºEÀmít
();

1062 
	`˚_Lo›Põ˚s
();

1064 
evÆ
 = -
	`°ack_GëCuºEÀmít
()->
be°_evÆ
;

1065 
	`°ack_P›
();

1069 
	`°ack_SëMove
(
evÆ
, 
pos
);

1072 
	`cu_UndoHÆfMove
();

1077 i‡–
Ãc_obj
.
check_mode
 != 0 )

1079 
°ack_ñemít_p
 
e
 = 
	`°ack_GëCuºEÀmít
();

1080 i‡–
Ãc_obj
.
check_mode
 =
CHECK_MODE_MOVEABLE
 )

1082 
	`˝_SëOnBﬂrd
(
e
->
cuºít_pos
,É->
cuºít_˝
 | 
CP_MARK_MASK
 );

1084 i‡–
Ãc_obj
.
check_mode
 =
CHECK_MODE_TARGET_MOVE
 )

1086 i‡–
e
->
cuºít_pos
 =
Ãc_obj
.
check_§c_pos
 )

1088 
	`˝_SëOnBﬂrd
(
pos
, 
	`˝_GëFromBﬂrd
’osË| 
CP_MARK_MASK
 );

1093 
	}
}

1107 c⁄° 
uöt8_t
 
	g˚_dú_off£t_rook
[] 
	gPROGMEM
 = { 1, 16, -16, -1, 0 };

1108 c⁄° 
uöt8_t
 
	g˚_dú_off£t_bish›
[] 
	gPROGMEM
 = { 15, 17, -17, -15, 0 };

1109 c⁄° 
uöt8_t
 
	g˚_dú_off£t_quìn
[] 
	gPROGMEM
 = { 1, 16, -16, -1, 15, 17, -17, -15, 0 };

1110 c⁄° 
uöt8_t
 
	g˚_dú_off£t_knight
[] 
	gPROGMEM
 = {14, -14, 18, -18, 31, -31, 33, -33, 0};

1112 
	$˚_Lo›DúsSögÀMu…iSãp
(c⁄° 
uöt8_t
 *
d
, uöt8_à
is_mu…i_°ï
)

1114 
uöt8_t
 
lo›_pos
;

1119 i‡–
	`u8g_pgm_ªad
(
d
) == 0 )

1123 
lo›_pos
 = 
	`°ack_GëCuºEÀmít
()->
cuºít_pos
;

1129 
lo›_pos
 +
	`u8g_pgm_ªad
(
d
);

1136 i‡–
	`˚_Lo›Recur
(
lo›_pos
) == 0 )

1140 i‡–
	`˝_GëPõ˚
(
	`˝_GëFromBﬂrd
(
lo›_pos
)Ë!
PIECE_NONE
 )

1142 }  
is_mu…i_°ï
 );

1143 
d
++;

1145 
	}
}

1147 
	$˚_Lo›Rook
()

1149 
	`˚_Lo›DúsSögÀMu…iSãp
(
˚_dú_off£t_rook
, 1);

1150 
	}
}

1152 
	$˚_Lo›Bish›
()

1154 
	`˚_Lo›DúsSögÀMu…iSãp
(
˚_dú_off£t_bish›
, 1);

1155 
	}
}

1157 
	$˚_Lo›Quìn
()

1159 
	`˚_Lo›DúsSögÀMu…iSãp
(
˚_dú_off£t_quìn
, 1);

1160 
	}
}

1162 
	$˚_Lo›Knight
()

1164 
	`˚_Lo›DúsSögÀMu…iSãp
(
˚_dú_off£t_knight
, 0);

1165 
	}
}

1173 
uöt8_t
 
	$cu_IsKögCa°lög
(
uöt8_t
 
mask
, 
öt8_t
 
dúe˘i⁄
, uöt8_à
˙t
Ë
U8G_NOINLINE
;

1183 
uöt8_t
 
	$cu_IsKögCa°lög
(
uöt8_t
 
mask
, 
öt8_t
 
dúe˘i⁄
, uöt8_à
˙t
)

1185 
uöt8_t
 
pos
;

1186 
uöt8_t
 
›p⁄ít_cﬁ‹
;

1189 i‡–(
Ãc_obj
.
ˇ°lög_possibÀ
 & 
mask
) == 0 )

1193 
pos
 = 
	`°ack_GëCuºEÀmít
()->
cuºít_pos
;

1196 
›p⁄ít_cﬁ‹
 = 1;

1197 
›p⁄ít_cﬁ‹
 -
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
;

1200 i‡–
	`˚_GëPosôi⁄AâackWeight
(
pos
, 
›p⁄ít_cﬁ‹
) > 0 )

1208 
pos
 +
dúe˘i⁄
;

1210 i‡–
	`˝_GëPõ˚
(
	`˝_GëFromBﬂrd
(
pos
)Ë!
PIECE_NONE
 )

1214 i‡–
	`˚_GëPosôi⁄AâackWeight
(
pos
, 
›p⁄ít_cﬁ‹
) > 0 )

1217 
˙t
--;

1218 i‡–
˙t
 == 0 )

1222 
	}
}

1224 
	$˚_Lo›Kög
()

1234 i‡–
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
 =
COLOR_WHITE
 )

1237 i‡–
	`cu_IsKögCa°lög
(1, -1, 3) != 0 )

1240 
	`˚_Lo›Recur
(
	`°ack_GëCuºEÀmít
()->
cuºít_pos
-2);

1243 i‡–
	`cu_IsKögCa°lög
(2, 1, 2) != 0 )

1246 
	`˚_Lo›Recur
(
	`°ack_GëCuºEÀmít
()->
cuºít_pos
+2);

1252 i‡–
	`cu_IsKögCa°lög
(4, -1, 3) != 0 )

1255 
	`˚_Lo›Recur
(
	`°ack_GëCuºEÀmít
()->
cuºít_pos
-2);

1258 i‡–
	`cu_IsKögCa°lög
(8, 1, 2) != 0 )

1261 
	`˚_Lo›Recur
(
	`°ack_GëCuºEÀmít
()->
cuºít_pos
+2);

1266 
	`˚_Lo›DúsSögÀMu…iSãp
(
˚_dú_off£t_quìn
, 0);

1267 
	}
}

1278 
	$˚_Lo›PawnSideC≠tuª
(
uöt8_t
 
lo›_pos
)

1280 i‡–
	`gpos_IsIŒegÆ
(
lo›_pos
) == 0 )

1284 i‡–
	`˝_GëPõ˚
(
	`˝_GëFromBﬂrd
(
lo›_pos
)Ë!
PIECE_NONE
 )

1287 
	`˚_Lo›Recur
(
lo›_pos
);

1293 i‡–
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
 =
COLOR_WHITE
 )

1295 i‡–
Ãc_obj
.
∑wn_dbl_move
[
COLOR_BLACK
]+16 =
lo›_pos
 )

1297 
	`˚_Lo›Recur
(
lo›_pos
);

1303 i‡–
Ãc_obj
.
∑wn_dbl_move
[
COLOR_WHITE
] =
lo›_pos
+16 )

1305 
	`˚_Lo›Recur
(
lo›_pos
);

1311 
	}
}

1313 
	$˚_Lo›Pawn
()

1315 
uöt8_t
 
öôül_pos
 = 
	`°ack_GëCuºEÀmít
()->
cuºít_pos
;

1316 
uöt8_t
 
my_cﬁ‹
 = 
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
;

1318 
uöt8_t
 
lo›_pos
;

1319 
uöt8_t
 
löe
;

1323 
lo›_pos
 = 
öôül_pos
;

1324 
löe
 = 
öôül_pos
;

1325 
löe
 >>= 4;

1326 i‡–
my_cﬁ‹
 =
COLOR_WHITE
 )

1327 
lo›_pos
 += 16;

1329 
lo›_pos
 -= 16;

1330 i‡–
	`gpos_IsIŒegÆ
(
lo›_pos
) == 0 )

1333 i‡–
	`˝_GëPõ˚
(
	`˝_GëFromBﬂrd
(
lo›_pos
)Ë=
PIECE_NONE
 )

1336 
	`˚_Lo›Recur
(
lo›_pos
);

1341 i‡–(
my_cﬁ‹
 =
COLOR_WHITE
 && 
löe
 =1Ë|| (my_cﬁ‹ =
COLOR_BLACK
 &&Üine == 6 ) )

1345 i‡–
my_cﬁ‹
 =
COLOR_WHITE
 )

1346 
lo›_pos
 += 16;

1348 
lo›_pos
 -= 16;

1349 i‡–
	`˝_GëPõ˚
(
	`˝_GëFromBﬂrd
(
lo›_pos
)Ë=
PIECE_NONE
 )

1352 
	`˚_Lo›Recur
(
lo›_pos
);

1360 
lo›_pos
 = 
öôül_pos
;

1361 i‡–
my_cﬁ‹
 =
COLOR_WHITE
 )

1362 
lo›_pos
 += 15;

1364 
lo›_pos
 -= 15;

1365 
	`˚_Lo›PawnSideC≠tuª
(
lo›_pos
);

1368 
lo›_pos
 = 
öôül_pos
;

1369 i‡–
my_cﬁ‹
 =
COLOR_WHITE
 )

1370 
lo›_pos
 += 17;

1372 
lo›_pos
 -= 17;

1373 
	`˚_Lo›PawnSideC≠tuª
(
lo›_pos
);

1374 
	}
}

1391 
	$˚_FödPõ˚BySãp
(
uöt8_t
 
°¨t_pos
, uöt8_à
põ˚
, c⁄° uöt8_à*
d
, uöt8_à
is_mu…i_°ï
)

1393 
uöt8_t
 
lo›_pos
, 
˝
;

1398 i‡–
	`u8g_pgm_ªad
(
d
) == 0 )

1402 
lo›_pos
 = 
°¨t_pos
;

1408 
lo›_pos
 +
	`u8g_pgm_ªad
(
d
);

1411 i‡–(
lo›_pos
 & 0x088) != 0 )

1415 
˝
 = 
	`˝_GëFromBﬂrd
(
lo›_pos
);

1418 i‡–
	`˝_GëPõ˚
(
˝
Ë!
PIECE_NONE
 )

1421 i‡–
	`˝_GëPõ˚
(
˝
Ë=
põ˚
 )

1423 
Ãc_obj
.
föd_põ˚_weight
[
	`˝_GëCﬁ‹
(
˝
)] +
˚_põ˚_weight
[
põ˚
];

1424 
Ãc_obj
.
föd_põ˚_˙t
[
	`˝_GëCﬁ‹
(
˝
)]++;

1429 }  
is_mu…i_°ï
 );

1430 
d
++;

1432 
	}
}

1434 
	$˚_FödPawnPõ˚
(
uöt8_t
 
de°_pos
, uöt8_à
cﬁ‹
)

1436 
uöt8_t
 
˝
;

1438 i‡–(
de°_pos
 & 0x088) == 0 )

1441 
˝
 = 
	`˝_GëFromBﬂrd
(
de°_pos
);

1443 i‡–
	`˝_GëPõ˚
(
˝
Ë=
PIECE_PAWN
 )

1445 i‡–
	`˝_GëCﬁ‹
(
˝
Ë=
cﬁ‹
 )

1448 
Ãc_obj
.
föd_põ˚_weight
[
cﬁ‹
] += 1;

1449 
Ãc_obj
.
föd_põ˚_˙t
[
cﬁ‹
]++;

1453 
	}
}

1476 
	$˚_CÆcuœãPosôi⁄Weight
(
uöt8_t
 
pos
)

1479 
Ãc_obj
.
föd_põ˚_weight
[0] = 0;

1480 
Ãc_obj
.
föd_põ˚_weight
[1] = 0;

1481 
Ãc_obj
.
föd_põ˚_˙t
[0] = 0;

1482 
Ãc_obj
.
föd_põ˚_˙t
[1] = 0;

1484 i‡–(
pos
 & 0x088) != 0 )

1487 
	`˚_FödPõ˚BySãp
(
pos
, 
PIECE_ROOK
, 
˚_dú_off£t_rook
, 1);

1488 
	`˚_FödPõ˚BySãp
(
pos
, 
PIECE_BISHOP
, 
˚_dú_off£t_bish›
, 1);

1489 
	`˚_FödPõ˚BySãp
(
pos
, 
PIECE_QUEEN
, 
˚_dú_off£t_quìn
, 1);

1490 
	`˚_FödPõ˚BySãp
(
pos
, 
PIECE_KNIGHT
, 
˚_dú_off£t_knight
, 0);

1491 
	`˚_FödPõ˚BySãp
(
pos
, 
PIECE_KING
, 
˚_dú_off£t_quìn
, 0);

1493 
	`˚_FödPawnPõ˚
(
pos
+17, 
COLOR_BLACK
);

1494 
	`˚_FödPawnPõ˚
(
pos
+15, 
COLOR_BLACK
);

1495 
	`˚_FödPawnPõ˚
(
pos
-17, 
COLOR_WHITE
);

1496 
	`˚_FödPawnPõ˚
(
pos
-15, 
COLOR_WHITE
);

1497 
	}
}

1507 
uöt8_t
 
	$˚_GëPosôi⁄AâackWeight
(
uöt8_t
 
pos
, uöt8_à
cﬁ‹
)

1509 
	`˚_CÆcuœãPosôi⁄Weight
(
pos
);

1510  
Ãc_obj
.
föd_põ˚_weight
[
cﬁ‹
];

1511 
	}
}

1513 
uöt8_t
 
	$˚_GëPosôi⁄AâackCou¡
(
uöt8_t
 
pos
, uöt8_à
cﬁ‹
)

1515 
	`˚_CÆcuœãPosôi⁄Weight
(
pos
);

1516  
Ãc_obj
.
föd_põ˚_˙t
[
cﬁ‹
];

1517 
	}
}

1524 
	$˚_Lo›Põ˚s
()

1526 
°ack_ñemít_p
 
e
 = 
	`°ack_GëCuºEÀmít
();

1528 
e
->
cuºít_pos
 = 0;

1531 
e
->
cuºít_˝
 = 
	`˝_GëFromBﬂrd
”->
cuºít_pos
);

1533 i‡–
e
->
cuºít_˝
 != 0 )

1536 i‡–
e
->
cuºít_cﬁ‹
 =
	`˝_GëCﬁ‹
”->
cuºít_˝
) )

1538 
	`chess_Thökög
();

1541 
	`˝_GëPõ˚
(
e
->
cuºít_˝
))

1543 
PIECE_NONE
:

1545 
PIECE_PAWN
:

1546 
	`˚_Lo›Pawn
();

1548 
PIECE_KNIGHT
:

1549 
	`˚_Lo›Knight
();

1551 
PIECE_BISHOP
:

1552 
	`˚_Lo›Bish›
();

1554 
PIECE_ROOK
:

1555 
	`˚_Lo›Rook
();

1557 
PIECE_QUEEN
:

1558 
	`˚_Lo›Quìn
();

1560 
PIECE_KING
:

1561 
	`˚_Lo›Kög
();

1566 
e
->
cuºít_pos
 = 
	`cu_NextPos
(e->current_pos);

1567 }  
e
->
cuºít_pos
 != 0 );

1568 
	}
}

1585 
	$chess_CÀ¨M¨ks
()

1587 
uöt8_t
 
i
;

1588  
i
 = 0; i < 64; i++ )

1589 
Ãc_obj
.
bﬂrd
[
i
] &~
CP_MARK_MASK
;

1590 
	}
}

1595 
	$chess_M¨kMovabÀ
()

1597 
	`°ack_Inô
(0);

1599 
Ãc_obj
.
check_mode
 = 
CHECK_MODE_MOVEABLE
;

1600 
	`˚_Lo›Põ˚s
();

1601 
	}
}

1608 
	$chess_M¨kT¨gëMoves
(
uöt8_t
 
§c_pos
)

1610 
	`°ack_Inô
(0);

1611 
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
 = 
	`˝_GëCﬁ‹
(
	`˝_GëFromBﬂrd
(
§c_pos
));

1612 
Ãc_obj
.
check_§c_pos
 = 
§c_pos
;

1613 
Ãc_obj
.
check_mode
 = 
CHECK_MODE_TARGET_MOVE
;

1614 
	`˚_Lo›Põ˚s
();

1615 
	}
}

1623 
uöt8_t
 
	$chess_GëNextM¨ked
(
uöt8_t
 
¨g
, uöt8_à
is_¥ev
)

1625 
uöt8_t
 
i
;

1626 
uöt8_t
 
pos
 = 
¨g
;

1627 
i
 = 0; i < 64; i++)

1629 i‡–
is_¥ev
 != 0 )

1630 
pos
 = 
	`cu_PªvPos
(pos);

1632 
pos
 = 
	`cu_NextPos
(pos);

1633 i‡–
¨g
 !255 && 
pos
 == 0 )

1635 i‡–
	`˝_IsM¨ked
(
	`˝_GëFromBﬂrd
(
pos
)) )

1636  
pos
;

1639 
	}
}

1643 
	$chess_M™uÆMove
(
uöt8_t
 
§c
, uöt8_à
de°
)

1645 
uöt8_t
 
˝
;

1651 
˝
 = 
	`˝_GëFromBﬂrd
(
de°
);

1652 i‡–
	`˝_GëPõ˚
(
˝
Ë=
PIECE_KING
 )

1654 
Ãc_obj
.
is_game_íd
 = 1;

1655 
Ãc_obj
.
lo°_side_cﬁ‹
 = 
	`˝_GëCﬁ‹
(
˝
);

1660 
	`cu_Redu˚Hi°‹yByFuŒMove
();

1662 
	`cu_Move
(
§c
, 
de°
);

1665 
Ãc_obj
.
∑wn_dbl_move
[Ãc_obj.
∂y_cou¡
&1] = 
ILLEGAL_POSITION
;

1668 
Ãc_obj
.
∂y_cou¡
++;

1676 
	`°ack_Inô
(1);

1677 
	`˚_Lo›Põ˚s
();

1684 i‡–
	`°ack_GëCuºEÀmít
()->
be°_‰om_pos
 =
ILLEGAL_POSITION
 )

1686 
uöt8_t
 
cﬁ‹
;

1693 
uöt8_t
 
i
 = 0;

1694 
cﬁ‹
 = 
Ãc_obj
.
∂y_cou¡
;

1695 
cﬁ‹
 &= 1;

1698 
˝
 = 
	`˝_GëFromBﬂrd
(
i
);

1700 i‡–
	`˝_GëPõ˚
(
˝
Ë=
PIECE_KING
 )

1702 i‡–
	`˝_GëCﬁ‹
(
˝
Ë=
cﬁ‹
 )

1705 i‡–
	`˚_GëPosôi⁄AâackCou¡
(
i
, 
cﬁ‹
^1) != 0 )

1708 
Ãc_obj
.
is_game_íd
 = 1;

1709 
Ãc_obj
.
lo°_side_cﬁ‹
 = 
cﬁ‹
;

1714 
Ãc_obj
.
is_game_íd
 = 1;

1715 
Ãc_obj
.
lo°_side_cﬁ‹
 = 2;

1721 
i
 = 
	`cu_NextPos
(i);

1722 }  
i
 != 0 );

1724 
	}
}

1727 
	$chess_CompuãrMove
(
uöt8_t
 
dïth
)

1729 
	`°ack_Inô
(
dïth
);

1734 
	`cu_Redu˚Hi°‹yByFuŒMove
();

1735 
	`˚_Lo›Põ˚s
();

1737 
	`chess_M™uÆMove
(
	`°ack_GëCuºEÀmít
()->
be°_‰om_pos
, sèck_GëCuºEÀmít()->
be°_to_pos
);

1738 
	}
}

1745 #ifde‡
UNIX_MAIN


1747 
	~<°dio.h
>

1748 
	~<°rög.h
>

1750 *
	gpõ˚_°r
[] = {

1795 
	$chess_Thökög
()

1797 
uöt8_t
 
i
;

1798 
uöt8_t
 
˝
 = 
	`˝_GëPõ˚
(
	`°ack_GëCuºEÀmít
()->
cuºít_˝
);

1800 
	`¥ötf
("Thökög: ", 
põ˚_°r
[
˝
], 
	`°ack_GëCuºEÀmít
()->
cuºít_pos
);

1802  
i
 = 0; i <
Ãc_obj
.
cuº_dïth
; i++ )

1803 
	`¥ötf
("%†", 
põ˚_°r
[(
Ãc_obj
.
°ack_mem‹y
+
i
)->
cuºít_˝
]);

1805 
	`¥ötf
(" \r");

1806 
	}
}

1808 
	$bﬂrd_Show
()

1810 
uöt8_t
 
i
, 
j
, 
˝
;

1811 
buf
[10];

1812  
i
 = 0; i < 8; i++ )

1814 
	`¥ötf
("%1d ", 7-
i
);

1815  
j
 = 0; j < 8; j++ )

1818 
˝
 = 
Ãc_obj
.
bﬂrd
[(7-
i
)*8+
j
];

1819 
	`°r˝y
(
buf
, 
põ˚_°r
[
˝
&
COLOR_PIECE_MASK
]);

1821 i‡–(
˝
 & 
CP_MARK_MASK
) != 0 )

1823 
buf
[0] = '#';

1827 
˝
 &
COLOR_PIECE_MASK
;

1828 
	`¥ötf
("%†%02x ", 
buf
, 
˝
);

1831 
	`¥ötf
("\n");

1833 
	}
}

1835 
	$maö
()

1837 
uöt8_t
 
dïth
 = 3;

1838 
	`chess_SëupBﬂrd
();

1839 
	`bﬂrd_Show
();

1840 
	`puts
("");

1849 
	`chess_M™uÆMove
(0x006, 0x066);

1851 
	`¥ötf
("Ãc_obj.is_game_íd: %d\n" , 
Ãc_obj
.
is_game_íd
);

1852 
	`¥ötf
("Ãc_obj.lo°_side_cﬁ‹: %d\n" , 
Ãc_obj
.
lo°_side_cﬁ‹
);

1854 
	`chess_CompuãrMove
(2);

1856 
	`¥ötf
("Ãc_obj.is_game_íd: %d\n" , 
Ãc_obj
.
is_game_íd
);

1857 
	`¥ötf
("Ãc_obj.lo°_side_cﬁ‹: %d\n" , 
Ãc_obj
.
lo°_side_cﬁ‹
);

1859 
	`bﬂrd_Show
();

1861 
	}
}

1872 
	#MNU_FONT
 
u8g_f⁄t_5x8r


	)

1874 
	#MNU_ENTRY_HEIGHT
 9

	)

1876 *
	gmnu_tôÀ
 = "Little Rook Chess";

1877 *
	gmnu_li°
[] = { "New Game (White)", "New Game (Black)", "Undo Move", "Return" };

1878 
uöt8_t
 
	gmnu_pos
 = 0;

1879 
uöt8_t
 
	gmnu_max
 = 4;

1881 
	$mnu_DøwHome
(
uöt8_t
 
is_highlight
)

1883 
uöt8_t
 
x
 = 
Ãc_u8g
->
width
 - 35;

1884 
uöt8_t
 
y
 = (
Ãc_u8g
->
height
-1);

1885 
uöt8_t
 
t
;

1887 
	`u8g_SëF⁄t
(
Ãc_u8g
, 
u8g_f⁄t_5x7r
);

1888 
	`u8g_SëDeÁu…F‹egroundCﬁ‹
(
Ãc_u8g
);

1889 
t
 = 
	`u8g_DøwSåP
(
Ãc_u8g
, 
x
, 
y
 -1, 
	`U8G_PSTR
("Options"));

1891 i‡–
is_highlight
 )

1892 
	`u8g_DøwFøme
(
Ãc_u8g
, 
x
-1, 
y
 - 
MNU_ENTRY_HEIGHT
 +1, 
t
, MNU_ENTRY_HEIGHT);

1893 
	}
}

1895 
	$mnu_DøwE¡ry
(
uöt8_t
 
y
, *
°r
, uöt8_à
is_˛r_background
, uöt8_à
is_highlight
)

1897 
uöt8_t
 
t
, 
x
;

1898 
	`u8g_SëF⁄t
(
Ãc_u8g
, 
MNU_FONT
);

1899 
t
 = 
	`u8g_GëSåWidth
(
Ãc_u8g
, 
°r
);

1900 
x
 = 
	`u8g_GëWidth
(
Ãc_u8g
);

1901 
x
 -
t
;

1902 
x
 >>= 1;

1904 i‡–
is_˛r_background
 )

1906 
	`u8g_SëDeÁu…BackgroundCﬁ‹
(
Ãc_u8g
);

1907 
	`u8g_DøwBox
(
Ãc_u8g
, 
x
-3, (Ãc_u8g->
height
-1Ë- (
y
+
MNU_ENTRY_HEIGHT
-1+2), 
t
+5, MNU_ENTRY_HEIGHT+4);

1910 
	`u8g_SëDeÁu…F‹egroundCﬁ‹
(
Ãc_u8g
);

1911 
	`u8g_DøwSå
(
Ãc_u8g
, 
x
, (Ãc_u8g->
height
-1Ë- 
y
, 
°r
);

1913 i‡–
is_highlight
 )

1915 
	`u8g_DøwFøme
(
Ãc_u8g
, 
x
-1, (Ãc_u8g->
height
-1Ë- 
y
 -
MNU_ENTRY_HEIGHT
 +1, 
t
, MNU_ENTRY_HEIGHT);

1917 
	}
}

1919 
	$mnu_Døw
()

1921 
uöt8_t
 
i
;

1922 
uöt8_t
 
t
,
y
;

1924 
y
 = 
mnu_max
;

1925 
y
++;

1926 
y
++;

1927 
y
 *
MNU_ENTRY_HEIGHT
;

1930 
t
 = 
	`u8g_GëHeight
(
Ãc_u8g
);

1931 
t
 -
y
;

1934 
t
 >>= 1;

1935 
y
 = 
	`u8g_GëHeight
(
Ãc_u8g
);

1936 
y
 -
t
;

1938 
y
 -
MNU_ENTRY_HEIGHT
;

1939 
	`mnu_DøwE¡ry
(
y
, 
mnu_tôÀ
, 0, 0);

1941 
y
 -
MNU_ENTRY_HEIGHT
;

1944  
i
 = 0; i < 
mnu_max
; i++ )

1946 
y
 -
MNU_ENTRY_HEIGHT
;

1947 
	`mnu_DøwE¡ry
(
y
, 
mnu_li°
[
i
], 0, i =
mnu_pos
);

1949 
	}
}

1951 
	$mnu_Sãp
(
uöt8_t
 
key_cmd
)

1953 i‡–
key_cmd
 =
CHESS_KEY_NEXT
 )

1955 i‡–
mnu_pos
+1 < 
mnu_max
 )

1956 
mnu_pos
++;

1958 i‡–
key_cmd
 =
CHESS_KEY_PREV
 )

1960 i‡–
mnu_pos
 > 0 )

1961 
mnu_pos
--;

1963 
	}
}

1968 
uöt8_t
 
	gchess_key_code
 = 0;

1969 
uöt8_t
 
	gchess_key_cmd
 = 0;

1970 
	#CHESS_STATE_MENU
 0

	)

1971 
	#CHESS_STATE_SELECT_START
 1

	)

1972 
	#CHESS_STATE_SELECT_PIECE
 2

	)

1973 
	#CHESS_STATE_SELECT_TARGET_POS
 3

	)

1974 
	#CHESS_STATE_THINKING
 4

	)

1975 
	#CHESS_STATE_GAME_END
 5

	)

1976 
uöt8_t
 
	gchess_°©e
 = 
CHESS_STATE_MENU
;

1977 
uöt8_t
 
	gchess_sour˚_pos
 = 255;

1978 
uöt8_t
 
	gchess_èrgë_pos
 = 255;

1980 c⁄° 
uöt8_t
 
	gchess_põ˚s_body_bm
[] 
	gPROGMEM
 =

1990 #ifde‡
NOT_REQUIRED


1992 c⁄° 
uöt8_t
 
	gchess_whôe_põ˚s_bm
[] 
	gPROGMEM
 =

2003 c⁄° 
uöt8_t
 
	gchess_bœck_põ˚s_bm
[] 
	gPROGMEM
 =

2014 #i‡
deföed
(
DOGXL160_HW_GR
)

2015 
	#BOXSIZE
 13

	)

2016 
	#BOXOFFSET
 3

	)

2018 
	#BOXSIZE
 8

	)

2019 
	#BOXOFFSET
 1

	)

2022 
u8g_uöt_t
 
	gchess_low_edge
;

2023 
uöt8_t
 
	gchess_boxsize
 = 8;

2024 
uöt8_t
 
	gchess_boxoff£t
 = 1;

2027 
	$chess_DøwFøme
(
uöt8_t
 
pos
, uöt8_à
is_bﬁd
)

2029 
u8g_uöt_t
 
x0
, 
y0
;

2031 
x0
 = 
pos
;

2032 
x0
 &= 15;

2033 i‡–
Ãc_obj
.
‹õ¡©i⁄
 !
COLOR_WHITE
 )

2034 
x0
 ^= 7;

2036 
y0
 = 
pos
;

2037 
y0
>>= 4;

2038 i‡–
Ãc_obj
.
‹õ¡©i⁄
 !
COLOR_WHITE
 )

2039 
y0
 ^= 7;

2041 
x0
 *
chess_boxsize
;

2042 
y0
 *
chess_boxsize
;

2044 
	`u8g_SëDeÁu…F‹egroundCﬁ‹
(
Ãc_u8g
);

2045 
	`u8g_DøwFøme
(
Ãc_u8g
, 
x0
, 
chess_low_edge
 - 
y0
 - 
chess_boxsize
+1, chess_boxsize, chess_boxsize);

2048 i‡–
is_bﬁd
 )

2050 
x0
--;

2051 
y0
++;

2053 
	`u8g_DøwFøme
(
Ãc_u8g
, 
x0
, 
chess_low_edge
 - 
y0
 - 
chess_boxsize
 +1, chess_boxsize+2, chess_boxsize+2);

2055 
	}
}

2058 
	$chess_DøwBﬂrd
()

2060 
uöt8_t
 
i
, 
j
, 
˝
;

2061 c⁄° 
uöt8_t
 *
±r
;

2063 i‡–
	`U8G_MODE_GET_BITS_PER_PIXEL
(
	`u8g_GëMode
(
Ãc_u8g
)) > 1 )

2065  
i
 = 0; i < 8; i++ )

2066  
j
 = 0; j < 8; j++ )

2068 
uöt8_t
 
x
,
y
;

2069 
x
 = 
i
;

2070 
x
*=
chess_boxsize
;

2071 
y
 = 
j
;

2072 
y
*=
chess_boxsize
;

2073 i‡–((
i
^
j
) & 1) == 0 )

2074 
	`u8g_SëDeÁu…MidCﬁ‹
(
Ãc_u8g
);

2076 
	`u8g_SëDeÁu…BackgroundCﬁ‹
(
Ãc_u8g
);

2077 
	`u8g_DøwBox
(
Ãc_u8g
, 
x
,
chess_low_edge
-
y
-
chess_boxsize
+1,chess_boxsize,chess_boxsize);

2083 
uöt8_t
 
x_off£t
 = 1;

2084 
	`u8g_SëDeÁu…F‹egroundCﬁ‹
(
Ãc_u8g
);

2085  
i
 = 0; i < 8*8; i+=8 )

2087  
j
 = 0; j < 8*8; j+=8 )

2089 i‡–((
i
^
j
) & 8) == 0 )

2091 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+0+
x_off£t
, 
chess_low_edge
 - 
i
-0);

2092 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+0+
x_off£t
, 
chess_low_edge
 - 
i
-2);

2093 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+0+
x_off£t
, 
chess_low_edge
 - 
i
-4);

2094 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+0+
x_off£t
, 
chess_low_edge
 - 
i
-6);

2095 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+2+
x_off£t
, 
chess_low_edge
 - 
i
-0);

2096 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+2+
x_off£t
, 
chess_low_edge
 - 
i
-6);

2097 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+4+
x_off£t
, 
chess_low_edge
 - 
i
-0);

2098 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+4+
x_off£t
, 
chess_low_edge
 - 
i
-6);

2099 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+6+
x_off£t
, 
chess_low_edge
 - 
i
-0);

2100 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+6+
x_off£t
, 
chess_low_edge
 - 
i
-2);

2101 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+6+
x_off£t
, 
chess_low_edge
 - 
i
-4);

2102 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+6+
x_off£t
, 
chess_low_edge
 - 
i
-6);

2108  
i
 = 0; i < 8; i++ )

2110  
j
 = 0; j < 8; j++ )

2113 i‡–
Ãc_obj
.
‹õ¡©i⁄
 =
COLOR_WHITE
 )

2115 
˝
 = 
Ãc_obj
.
bﬂrd
[
i
*8+
j
];

2119 
˝
 = 
Ãc_obj
.
bﬂrd
[(7-
i
)*8+7-
j
];

2121 i‡–
	`˝_GëPõ˚
(
˝
Ë!
PIECE_NONE
 )

2123 
±r
 = 
chess_bœck_põ˚s_bm
;

2124 
±r
 +(
	`˝_GëPõ˚
(
˝
)-1)*8;

2125 
	`u8g_SëDeÁu…F‹egroundCﬁ‹
(
Ãc_u8g
);

2126 
	`u8g_DøwBôm≠P
(
Ãc_u8g
, 
j
*
chess_boxsize
+
chess_boxoff£t
-1, 
chess_low_edge
 - (
i
*chess_boxsize+chess_boxsize-chess_boxoff£t), 1, 8, 
±r
);

2128 i‡–
	`˝_GëCﬁ‹
(
˝
Ë=
Ãc_obj
.
°rike_out_cﬁ‹
 )

2130 
±r
 = 
chess_põ˚s_body_bm
;

2131 
±r
 +(
	`˝_GëPõ˚
(
˝
)-1)*8;

2132 
	`u8g_SëDeÁu…BackgroundCﬁ‹
(
Ãc_u8g
);

2133 
	`u8g_DøwBôm≠P
(
Ãc_u8g
, 
j
*
chess_boxsize
+
chess_boxoff£t
-1, 
chess_low_edge
 - (
i
*chess_boxsize+chess_boxsize-chess_boxoff£t), 1, 8, 
±r
);

2139 i‡–(
chess_sour˚_pos
 & 0x88) == 0 )

2141 
	`chess_DøwFøme
(
chess_sour˚_pos
, 1);

2144 i‡–(
chess_èrgë_pos
 & 0x88) == 0 )

2146 
	`chess_DøwFøme
(
chess_èrgë_pos
, 0);

2149 
	}
}

2152 
	$chess_Thökög
()

2154 
	}
}

2156 
	$chess_Inô
(
u8g_t
 *
u8g
, 
uöt8_t
 
body_cﬁ‹
)

2158 
Ãc_u8g
 = 
u8g
;

2160 
chess_low_edge
 = 
	`u8g_GëHeight
(
Ãc_u8g
);

2161 
chess_low_edge
--;

2164 i‡–
	`U8G_MODE_GET_BITS_PER_PIXEL
(
	`u8g_GëMode
(
Ãc_u8g
)) == 1 )

2167 
chess_boxsize
 = 8;

2168 
chess_boxoff£t
 = 1;

2179  i‡–
	`u8g_GëHeight
(
Ãc_u8g
) >= 11*8 )

2181 
chess_boxsize
 = 10;

2182 
chess_boxoff£t
 = 2;

2186 
chess_boxsize
 = 8;

2187 
chess_boxoff£t
 = 1;

2190 i‡–
	`u8g_GëHeight
(
Ãc_u8g
) > 64 )

2191 
chess_low_edge
 -(
	`u8g_GëHeight
(
Ãc_u8g
)-
chess_boxsize
*8) / 2;

2195 
Ãc_obj
.
°rike_out_cﬁ‹
 = 
body_cﬁ‹
;

2196 
	`chess_SëupBﬂrd
();

2197 
	}
}

2201 
	$chess_Døw
()

2203 i‡–
chess_°©e
 =
CHESS_STATE_MENU
 )

2205 i‡–
Ãc_obj
.
∂y_cou¡
 == 0)

2206 
mnu_max
 = 2;

2208 
mnu_max
 = 4;

2209 
	`mnu_Døw
();

2213 
	`chess_DøwBﬂrd
();

2216 
uöt8_t
 
i
;

2217 
uöt8_t
 
íåõs
 = 
Ãc_obj
.
chm_pos
;

2218 i‡–
íåõs
 > 4 )

2219 
íåõs
 = 4;

2221 
	`u8g_SëF⁄t
(
Ãc_u8g
, 
u8g_f⁄t_5x7
);

2222 
	`u8g_SëDeÁu…F‹egroundCﬁ‹
(
Ãc_u8g
);

2223  
i
 = 0; i < 
íåõs
; i++ )

2226 #i‡
	`deföed
(
DOGXL160_HW_GR
Ë|| deföed(
DOGXL160_HW_BW
)

2227 
	`dog_DøwSå
(
	`u8g_GëWidth
(
Ãc_u8g
)-35, 
	`u8g_GëHeight
÷rc_u8g)-8*(
i
+1), 
f⁄t_5x7
, 
	`cu_GëHÆfMoveSå
(
Ãc_obj
.
chm_pos
-
íåõs
+i));

2229 
	`u8g_DøwSå
(
Ãc_u8g
, 
	`u8g_GëWidth
÷rc_u8g)-35, 8*(
i
+1), 
	`cu_GëHÆfMoveSå
(
Ãc_obj
.
chm_pos
-
íåõs
+i));

2236 i‡–
chess_°©e
 =
CHESS_STATE_SELECT_PIECE
 )

2237 
	`mnu_DøwHome
(
chess_sour˚_pos
 == 255);

2238 i‡–
chess_°©e
 =
CHESS_STATE_SELECT_TARGET_POS
 )

2239 
	`mnu_DøwHome
(
chess_èrgë_pos
 == 255);

2241 
	`mnu_DøwHome
(0);

2243 i‡–
chess_°©e
 =
CHESS_STATE_GAME_END
 )

2245  
Ãc_obj
.
lo°_side_cﬁ‹
 )

2247 
COLOR_WHITE
:

2248 
	`mnu_DøwE¡ry
(
	`u8g_GëHeight
(
Ãc_u8g
) / 2-2, "Black wins", 1, 1);

2250 
COLOR_BLACK
:

2251 
	`mnu_DøwE¡ry
(
	`u8g_GëHeight
(
Ãc_u8g
) / 2-2, "White wins", 1, 1);

2254 
	`mnu_DøwE¡ry
(
	`u8g_GëHeight
(
Ãc_u8g
) / 2-2, "Stalemate", 1, 1);

2259 
	}
}

2262 
	$chess_Sãp
(
uöt8_t
 
keycode
)

2264 i‡–
keycode
 =
CHESS_KEY_NONE
 )

2266 
chess_key_cmd
 = 
chess_key_code
;

2267 
chess_key_code
 = 
CHESS_KEY_NONE
;

2271 
chess_key_cmd
 = 
CHESS_KEY_NONE
;

2272 
chess_key_code
 = 
keycode
;

2275 
chess_°©e
)

2277 
CHESS_STATE_MENU
:

2278 
	`mnu_Sãp
(
chess_key_cmd
);

2279 i‡–
chess_key_cmd
 =
CHESS_KEY_SELECT
 )

2281 i‡–
mnu_pos
 == 0 )

2283 
	`chess_SëupBﬂrd
();

2284 
Ãc_obj
.
‹õ¡©i⁄
 = 0;

2285 
chess_°©e
 = 
CHESS_STATE_SELECT_START
;

2287 i‡–
mnu_pos
 == 1 )

2289 
	`chess_SëupBﬂrd
();

2290 
Ãc_obj
.
‹õ¡©i⁄
 = 1;

2291 
chess_°©e
 = 
CHESS_STATE_THINKING
;

2293 i‡–
mnu_pos
 == 2 )

2295 i‡–
Ãc_obj
.
∂y_cou¡
 >= 2 )

2297 
	`cu_UndoHÆfMove
();

2298 
	`cu_UndoHÆfMove
();

2299 
Ãc_obj
.
∂y_cou¡
-=2;

2300 i‡–
Ãc_obj
.
∂y_cou¡
 == 0 )

2301 
mnu_pos
 = 0;

2303 
chess_°©e
 = 
CHESS_STATE_SELECT_START
;

2305 i‡–
mnu_pos
 == 3 )

2307 
chess_°©e
 = 
CHESS_STATE_SELECT_START
;

2311 
CHESS_STATE_SELECT_START
:

2312 
	`chess_CÀ¨M¨ks
();

2313 
	`chess_M¨kMovabÀ
();

2314 
chess_sour˚_pos
 = 
	`chess_GëNextM¨ked
(255, 0);

2315 
chess_èrgë_pos
 = 
ILLEGAL_POSITION
;

2316 
chess_°©e
 = 
CHESS_STATE_SELECT_PIECE
;

2319 
CHESS_STATE_SELECT_PIECE
:

2320 i‡–
chess_key_cmd
 =
CHESS_KEY_NEXT
 )

2322 
chess_sour˚_pos
 = 
	`chess_GëNextM¨ked
(chess_source_pos, 0);

2324 i‡–
chess_key_cmd
 =
CHESS_KEY_PREV
 )

2326 
chess_sour˚_pos
 = 
	`chess_GëNextM¨ked
(chess_source_pos, 1);

2328 i‡–
chess_key_cmd
 =
CHESS_KEY_SELECT
 )

2330 i‡–
chess_sour˚_pos
 == 255 )

2332 
chess_°©e
 = 
CHESS_STATE_MENU
;

2336 
	`chess_CÀ¨M¨ks
();

2337 
	`chess_M¨kT¨gëMoves
(
chess_sour˚_pos
);

2338 
chess_èrgë_pos
 = 
	`chess_GëNextM¨ked
(255, 0);

2339 
chess_°©e
 = 
CHESS_STATE_SELECT_TARGET_POS
;

2343 
CHESS_STATE_SELECT_TARGET_POS
:

2344 i‡–
chess_key_cmd
 =
CHESS_KEY_NEXT
 )

2346 
chess_èrgë_pos
 = 
	`chess_GëNextM¨ked
(chess_target_pos, 0);

2348 i‡–
chess_key_cmd
 =
CHESS_KEY_PREV
 )

2350 
chess_èrgë_pos
 = 
	`chess_GëNextM¨ked
(chess_target_pos, 1);

2352 i‡–
chess_key_cmd
 =
CHESS_KEY_BACK
 )

2354 
	`chess_CÀ¨M¨ks
();

2355 
	`chess_M¨kMovabÀ
();

2356 
chess_èrgë_pos
 = 
ILLEGAL_POSITION
;

2357 
chess_°©e
 = 
CHESS_STATE_SELECT_PIECE
;

2359 i‡–
chess_key_cmd
 =
CHESS_KEY_SELECT
 )

2361 
	`chess_M™uÆMove
(
chess_sour˚_pos
, 
chess_èrgë_pos
);

2362 i‡–
Ãc_obj
.
is_game_íd
 != 0 )

2363 
chess_°©e
 = 
CHESS_STATE_GAME_END
;

2365 
chess_°©e
 = 
CHESS_STATE_THINKING
;

2367 
chess_sour˚_pos
 = 
ILLEGAL_POSITION
;

2368 
chess_èrgë_pos
 = 
ILLEGAL_POSITION
;

2369 
	`chess_CÀ¨M¨ks
();

2372 
CHESS_STATE_THINKING
:

2373 
	`chess_CompuãrMove
(2);

2374 i‡–
Ãc_obj
.
is_game_íd
 != 0 )

2375 
chess_°©e
 = 
CHESS_STATE_GAME_END
;

2377 
chess_°©e
 = 
CHESS_STATE_SELECT_START
;

2379 
CHESS_STATE_GAME_END
:

2380 i‡–
chess_key_cmd
 !
CHESS_KEY_NONE
 )

2382 
chess_°©e
 = 
CHESS_STATE_MENU
;

2383 
	`chess_SëupBﬂrd
();

2388 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g.h

36 #i‚de‡
_U8G_H


37 
	#_U8G_H


	)

41 
	~<°ddef.h
>

43 #ifde‡
__18CXX


44 
	tuöt8_t
;

45 sig√d 
	töt8_t
;

46 
	tuöt16_t
;

47 sig√d 
	töt16_t
;

49 
	~<°döt.h
>

52 #i‡
deföed
(
__AVR__
)

53 
	~<avr/pgm•a˚.h
>

56 #ifde‡
__˝lu•lus


62 #ifde‡
__GNUC__


63 
	#U8G_NOINLINE
 
	`__©åibuã__
((
noölöe
))

	)

64 
	#U8G_PURE
 
	`__©åibuã__
 ((
puª
))

	)

65 
	#U8G_NOCOMMON
 
	`__©åibuã__
 ((
nocomm⁄
))

	)

66 
	#U8G_SECTION
(
«me
Ë
	`__©åibuã__
 ((
	`£˘i⁄
 («me)))

	)

68 
	#U8G_NOINLINE


	)

69 
	#U8G_PURE


	)

70 
	#U8G_NOCOMMON


	)

71 
	#U8G_SECTION
(
«me
)

	)

77 #i‡
deföed
(
__AVR__
)

79 
	#U8G_PROGMEM
 
	`U8G_SECTION
(".¥ogmem.d©a")

	)

80 
uöt8_t
 
	tPROGMEM
 
	tu8g_pgm_uöt8_t
;

81 
uöt8_t
 
	tu8g_‚çgm_uöt8_t
;

82 
	#u8g_pgm_ªad
(
adr
Ë
	`pgm_ªad_byã_√¨
◊dr)

	)

83 
	#U8G_PSTR
(
s
Ë((
u8g_pgm_uöt8_t
 *)
	`PSTR
(s))

	)

85 
	#U8G_PROGMEM


	)

86 
	#PROGMEM


	)

87 
uöt8_t
 
	tu8g_pgm_uöt8_t
;

88 
uöt8_t
 
	tu8g_‚çgm_uöt8_t
;

89 
	#u8g_pgm_ªad
(
adr
Ë(*(c⁄° 
u8g_pgm_uöt8_t
 *)◊dr))

	)

90 
	#U8G_PSTR
(
s
Ë((
u8g_pgm_uöt8_t
 *)(s))

	)

95 
_u8g_t
 
	tu8g_t
;

96 
_u8g_dev_t
 
	tu8g_dev_t
;

98 
_u8g_dev_¨g_pixñ_t
 
	tu8g_dev_¨g_pixñ_t
;

99 
_u8g_dev_¨g_bbx_t
 
	tu8g_dev_¨g_bbx_t
;

100 
_u8g_box_t
 
	tu8g_box_t
;

105 #i‡
deföed
(
U8G_16BIT
)

106 
uöt16_t
 
	tu8g_uöt_t
;

107 
öt16_t
 
	tu8g_öt_t
;

109 
uöt8_t
 
	tu8g_uöt_t
;

110 
öt8_t
 
	tu8g_öt_t
;

113 #ifde‡
OBSOLETE


114 
	s_u8g_box_t


116 
u8g_uöt_t
 
x0
, 
y0
, 
x1
, 
y1
;

118 
_u8g_box_t
 
	tu8g_box_t
;

125 #ifde‡
__XC8


127 
uöt8_t
 (*
	tu8g_dev_‚±r
)(*
	tu8g
, *
	tdev
, 
	tuöt8_t
 
	tmsg
, *
	t¨g
);

130 
uöt8_t
 (*
	tu8g_com_‚±r
)(*
	tu8g
, 
	tuöt8_t
 
	tmsg
, uöt8_à
	t¨g_vÆ
, *
	t¨g_±r
);

133 
uöt8_t
 (*
	tu8g_dev_‚±r
)(
	tu8g_t
 *
	tu8g
, 
	tu8g_dev_t
 *
	tdev
, 
	tuöt8_t
 
	tmsg
, *
	t¨g
);

136 
uöt8_t
 (*
	tu8g_com_‚±r
)(
	tu8g_t
 *
	tu8g
, 
	tuöt8_t
 
	tmsg
, uöt8_à
	t¨g_vÆ
, *
	t¨g_±r
);

141 
	s_u8g_dev_t


143 
u8g_dev_‚±r
 
dev_‚
;

144 *
dev_mem
;

145 
u8g_com_‚±r
 
com_‚
;

153 
u8g_dev_t
 
u8g_dev_sdl_1bô
;

154 
u8g_dev_t
 
u8g_dev_sdl_1bô_h
;

155 
u8g_dev_t
 
u8g_dev_sdl_2bô
;

156 
u8g_dev_t
 
u8g_dev_sdl_2bô_doubÀ_mem
;

157 
u8g_dev_t
 
u8g_dev_sdl_8bô
;

158 
u8g_sdl_gë_key
();

161 
u8g_dev_t
 
u8g_dev_°dout
;

164 
u8g_dev_t
 
u8g_dev_pbm
;

165 
u8g_dev_t
 
u8g_dev_pbm_8h1
;

166 
u8g_dev_t
 
u8g_dev_pbm_8h2
;

169 
u8g_dev_t
 
u8g_dev_g¥of
;

172 
u8g_dev_t
 
u8g_dev_uc1701_dogs102_sw_•i
;

173 
u8g_dev_t
 
u8g_dev_uc1701_dogs102_hw_•i
;

176 
u8g_dev_t
 
u8g_dev_uc1701_möi12864_sw_•i
;

177 
u8g_dev_t
 
u8g_dev_uc1701_möi12864_hw_•i
;

180 
u8g_dev_t
 
u8g_dev_°7565_dogm132_sw_•i
;

181 
u8g_dev_t
 
u8g_dev_°7565_dogm132_hw_•i
;

184 
u8g_dev_t
 
u8g_dev_°7565_dogm128_sw_•i
;

185 
u8g_dev_t
 
u8g_dev_°7565_dogm128_hw_•i
;

187 
u8g_dev_t
 
u8g_dev_°7565_lm6063_sw_•i
;

188 
u8g_dev_t
 
u8g_dev_°7565_lm6063_hw_•i
;

190 
u8g_dev_t
 
u8g_dev_°7565_lm6059_sw_•i
;

191 
u8g_dev_t
 
u8g_dev_°7565_lm6059_hw_•i
;

193 
u8g_dev_t
 
u8g_dev_°7565_nhd_c12864_sw_•i
;

194 
u8g_dev_t
 
u8g_dev_°7565_nhd_c12864_hw_•i
;

196 
u8g_dev_t
 
u8g_dev_°7565_nhd_c12832_sw_•i
;

197 
u8g_dev_t
 
u8g_dev_°7565_nhd_c12832_hw_•i
;

198 
u8g_dev_t
 
u8g_dev_°7565_nhd_c12832_∑øŒñ
;

200 
u8g_dev_t
 
u8g_dev_°7565_64128n_sw_•i
;

201 
u8g_dev_t
 
u8g_dev_°7565_64128n_hw_•i
;

204 
u8g_dev_t
 
u8g_dev_°7920_128x64_sw_•i
;

205 
u8g_dev_t
 
u8g_dev_°7920_128x64_hw_•i
;

206 
u8g_dev_t
 
u8g_dev_°7920_128x64_8bô
;

208 
u8g_dev_t
 
u8g_dev_°7920_128x64_4x_sw_•i
;

209 
u8g_dev_t
 
u8g_dev_°7920_128x64_4x_hw_•i
;

210 
u8g_dev_t
 
u8g_dev_°7920_128x64_4x_8bô
;

213 
u8g_dev_t
 
u8g_dev_°7920_192x32_sw_•i
;

214 
u8g_dev_t
 
u8g_dev_°7920_192x32_hw_•i
;

215 
u8g_dev_t
 
u8g_dev_°7920_192x32_8bô
;

217 
u8g_dev_t
 
u8g_dev_°7920_192x32_4x_sw_•i
;

218 
u8g_dev_t
 
u8g_dev_°7920_192x32_4x_hw_•i
;

219 
u8g_dev_t
 
u8g_dev_°7920_192x32_4x_8bô
;

222 
u8g_dev_t
 
u8g_dev_°7920_202x32_sw_•i
;

223 
u8g_dev_t
 
u8g_dev_°7920_202x32_hw_•i
;

224 
u8g_dev_t
 
u8g_dev_°7920_202x32_8bô
;

226 
u8g_dev_t
 
u8g_dev_°7920_202x32_4x_sw_•i
;

227 
u8g_dev_t
 
u8g_dev_°7920_202x32_4x_hw_•i
;

228 
u8g_dev_t
 
u8g_dev_°7920_202x32_4x_8bô
;

231 
u8g_dev_t
 
u8g_dev_lc7981_160x80_8bô
;

233 
u8g_dev_t
 
u8g_dev_lc7981_240x64_8bô
;

235 
u8g_dev_t
 
u8g_dev_lc7981_240x128_8bô
;

237 
u8g_dev_t
 
u8g_dev_lc7981_320x64_8bô
;

240 
u8g_dev_t
 
u8g_dev_t6963_240x128_8bô
;

241 
u8g_dev_t
 
u8g_dev_t6963_240x64_8bô
;

242 
u8g_dev_t
 
u8g_dev_t6963_128x64_8bô
;

245 
u8g_dev_t
 
u8g_dev_uc1610_dogxl160_bw_sw_•i
;

246 
u8g_dev_t
 
u8g_dev_uc1610_dogxl160_bw_hw_•i
;

247 
u8g_dev_t
 
u8g_dev_uc1610_dogxl160_gr_sw_•i
;

248 
u8g_dev_t
 
u8g_dev_uc1610_dogxl160_gr_hw_•i
;

250 
u8g_dev_t
 
u8g_dev_uc1610_dogxl160_2x_bw_sw_•i
;

251 
u8g_dev_t
 
u8g_dev_uc1610_dogxl160_2x_bw_hw_•i
;

252 
u8g_dev_t
 
u8g_dev_uc1610_dogxl160_2x_gr_sw_•i
;

253 
u8g_dev_t
 
u8g_dev_uc1610_dogxl160_2x_gr_hw_•i
;

256 
u8g_dev_t
 
u8g_dev_ks0108_128x64
;

257 
u8g_dev_t
 
u8g_dev_ks0108_128x64_Á°
;

260 
u8g_dev_t
 
u8g_dev_pcd8544_84x48_sw_•i
;

261 
u8g_dev_t
 
u8g_dev_és8204_84x48_sw_•i
;

264 
u8g_dev_t
 
u8g_dev_pcf8812_96x65_sw_•i
;

267 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_bw_sw_•i
;

268 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_bw_hw_•i
;

269 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_bw_∑øŒñ
;

270 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_gr_sw_•i
;

271 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_gr_hw_•i
;

273 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_sw_•i
;

274 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_hw_•i
;

275 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_∑øŒñ
;

276 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_2x_gr_sw_•i
;

277 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_2x_gr_hw_•i
;

280 
u8g_dev_t
 
u8g_dev_ssd1327_96x96_gr_sw_•i
;

281 
u8g_dev_t
 
u8g_dev_ssd1327_96x96_gr_hw_•i
;

282 
u8g_dev_t
 
u8g_dev_ssd1327_96x96_gr_i2c
;

284 
u8g_dev_t
 
u8g_dev_ssd1327_96x96_2x_gr_sw_•i
;

285 
u8g_dev_t
 
u8g_dev_ssd1327_96x96_2x_gr_hw_•i
;

286 
u8g_dev_t
 
u8g_dev_ssd1327_96x96_2x_gr_i2c
;

289 
u8g_dev_t
 
u8g_dev_ssd1322_nhd31ﬁed_bw_sw_•i
;

290 
u8g_dev_t
 
u8g_dev_ssd1322_nhd31ﬁed_bw_hw_•i
;

291 
u8g_dev_t
 
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_sw_•i
;

292 
u8g_dev_t
 
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_hw_•i
;

294 
u8g_dev_t
 
u8g_dev_ssd1322_nhd31ﬁed_gr_sw_•i
;

295 
u8g_dev_t
 
u8g_dev_ssd1322_nhd31ﬁed_gr_hw_•i
;

296 
u8g_dev_t
 
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_sw_•i
;

297 
u8g_dev_t
 
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_hw_•i
;

300 
u8g_dev_t
 
u8g_dev_ssd1306_128x64_sw_•i
;

301 
u8g_dev_t
 
u8g_dev_ssd1306_128x64_hw_•i
;

302 
u8g_dev_t
 
u8g_dev_ssd1306_128x64_i2c
;

305 
u8g_dev_t
 
u8g_dev_ssd1309_128x64_sw_•i
;

306 
u8g_dev_t
 
u8g_dev_ssd1309_128x64_hw_•i
;

307 
u8g_dev_t
 
u8g_dev_ssd1309_128x64_i2c
;

310 
u8g_dev_t
 
u8g_dev_ssd1306_128x32_sw_•i
;

311 
u8g_dev_t
 
u8g_dev_ssd1306_128x32_hw_•i
;

312 
u8g_dev_t
 
u8g_dev_ssd1306_128x32_i2c
;

315 
u8g_dev_t
 
u8g_dev_°7687_c144mvgd_sw_•i
;

316 
u8g_dev_t
 
u8g_dev_°7687_c144mvgd_8bô
;

319 
u8g_dev_t
 
u8g_dev_sbn1661_122x32
;

322 
u8g_dev_t
 
u8g_dev_Êùdisc_2x7
;

323 
u8g_SëFlùDiscCÆlback
(
u8g_t
 *
u8g
, (*
cb
)(
uöt8_t
 
id
, uöt8_à
∑ge
, uöt8_à
width
, uöt8_à*
row1
, uöt8_à*
row2
));

326 
u8g_dev_t
 
u8g_dev_ûi9325d_320x240_8bô
;

329 
u8g_dev_t
 
u8g_dev_vs
;

335 
	s_u8g_dev_¨g_pixñ_t


337 
u8g_uöt_t
 
	gx
, 
	gy
;

338 
uöt8_t
 
	gpixñ
;

339 
uöt8_t
 
	gdú
;

340 
uöt8_t
 
	gcﬁ‹
;

344 
	s_u8g_dev_¨g_bbx_t


346 
u8g_uöt_t
 
	gx
, 
	gy
, 
	gw
, 
	gh
;

350 
	s_u8g_box_t


352 
u8g_uöt_t
 
	gx0
, 
	gy0
, 
	gx1
, 
	gy1
;

357 
	#U8G_DEV_MSG_INIT
 10

	)

358 
	#U8G_DEV_MSG_STOP
 11

	)

361 
	#U8G_DEV_MSG_CONTRAST
 15

	)

363 
	#U8G_DEV_MSG_SLEEP_ON
 16

	)

364 
	#U8G_DEV_MSG_SLEEP_OFF
 17

	)

366 
	#U8G_DEV_MSG_PAGE_FIRST
 20

	)

367 
	#U8G_DEV_MSG_PAGE_NEXT
 21

	)

374 
	#U8G_DEV_MSG_GET_PAGE_BOX
 23

	)

382 
	#U8G_DEV_MSG_SET_PIXEL
 50

	)

383 
	#U8G_DEV_MSG_SET_8PIXEL
 59

	)

385 
	#U8G_DEV_MSG_SET_COLOR_INDEX
 60

	)

387 
	#U8G_DEV_MSG_SET_XY_CB
 61

	)

389 
	#U8G_DEV_MSG_GET_WIDTH
 70

	)

390 
	#U8G_DEV_MSG_GET_HEIGHT
 71

	)

391 
	#U8G_DEV_MSG_GET_MODE
 72

	)

395 
	#U8G_MODE
(
is_cﬁ‹
, 
bôs_≥r_pixñ
Ë(((is_cﬁ‹)<<4)|(bôs_≥r_pixñ))

	)

397 
	#U8G_MODE_UNKNOWN
 0

	)

398 
	#U8G_MODE_BW
 
	`U8G_MODE
(0, 1)

	)

399 
	#U8G_MODE_GRAY2BIT
 
	`U8G_MODE
(0, 2)

	)

400 
	#U8G_MODE_R3G3B2
 
	`U8G_MODE
(1, 8)

	)

402 
	#U8G_MODE_GET_BITS_PER_PIXEL
(
mode
Ë((mode)&15)

	)

403 
	#U8G_MODE_IS_COLOR
(
mode
Ë(((mode)&16)==0?0:1)

	)

414 
	#U8G_COM_MSG_STOP
 0

	)

415 
	#U8G_COM_MSG_INIT
 1

	)

417 
	#U8G_COM_MSG_ADDRESS
 2

	)

420 
	#U8G_COM_MSG_CHIP_SELECT
 3

	)

422 
	#U8G_COM_MSG_RESET
 4

	)

424 
	#U8G_COM_MSG_WRITE_BYTE
 5

	)

425 
	#U8G_COM_MSG_WRITE_SEQ
 6

	)

426 
	#U8G_COM_MSG_WRITE_SEQ_P
 7

	)

430 
uöt8_t
 
u8g_com_nuŒ_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

431 
uöt8_t
 
u8g_com_¨duöo_°d_sw_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

432 
uöt8_t
 
u8g_com_¨duöo_sw_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

433 
uöt8_t
 
u8g_com_¨duöo_hw_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

434 
uöt8_t
 
u8g_com_¨duöo_°7920_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

435 
uöt8_t
 
u8g_com_¨duöo_°7920_hw_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

436 
uöt8_t
 
u8g_com_¨duöo_∑øŒñ_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

437 
uöt8_t
 
u8g_com_¨duöo_Á°_∑øŒñ_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

438 
uöt8_t
 
u8g_com_¨duöo_p‹t_d_wr_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

439 
uöt8_t
 
u8g_com_¨duöo_no_í_∑øŒñ_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

440 
uöt8_t
 
u8g_com_¨duöo_ssd_i2c_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

441 
uöt8_t
 
u8g_com_¨duöo_t6963_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

444 
uöt8_t
 
u8g_com_©mega_hw_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

445 
uöt8_t
 
u8g_com_©mega_sw_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

446 
uöt8_t
 
u8g_com_©mega_°7920_sw_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

447 
uöt8_t
 
u8g_com_©mega_°7920_hw_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

448 
uöt8_t
 
u8g_com_©mega_∑øŒñ_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

465 #i‡
deföed
(
ARDUINO
)

466 #i‡
deföed
(
__AVR__
)

467 
	#U8G_COM_HW_SPI
 
u8g_com_¨duöo_hw_•i_‚


	)

468 
	#U8G_COM_ST7920_HW_SPI
 
u8g_com_¨duöo_°7920_hw_•i_‚


	)

469 #ñi‡
deföed
(
__18CXX
Ë|| deföed(
__PIC32MX
)

470 
	#U8G_COM_HW_SPI
 
u8g_com_nuŒ_‚


	)

471 
	#U8G_COM_ST7920_HW_SPI
 
u8g_com_nuŒ_‚


	)

475 #i‚de‡
U8G_COM_HW_SPI


476 #i‡
deföed
(
__AVR__
)

477 
	#U8G_COM_HW_SPI
 
u8g_com_©mega_hw_•i_‚


	)

478 
	#U8G_COM_ST7920_HW_SPI
 
u8g_com_©mega_°7920_hw_•i_‚


	)

481 #i‚de‡
U8G_COM_HW_SPI


482 
	#U8G_COM_HW_SPI
 
u8g_com_nuŒ_‚


	)

483 
	#U8G_COM_ST7920_HW_SPI
 
u8g_com_nuŒ_‚


	)

487 #i‡
deföed
(
ARDUINO
)

488 #i‡
deföed
(
__AVR__
)

489 
	#U8G_COM_SW_SPI
 
u8g_com_¨duöo_sw_•i_‚


	)

490 
	#U8G_COM_ST7920_SW_SPI
 
u8g_com_¨duöo_°7920_•i_‚


	)

491 #ñi‡
deföed
(
__18CXX
Ë|| deföed(
__PIC32MX
)

492 
	#U8G_COM_SW_SPI
 
u8g_com_¨duöo_sw_•i_‚


	)

493 
	#U8G_COM_ST7920_SW_SPI
 
u8g_com_¨duöo_°7920_•i_‚


	)

494 #ñi‡
deföed
(
__¨m__
)

495 
	#U8G_COM_SW_SPI
 
u8g_com_¨duöo_°d_sw_•i_‚


	)

496 
	#U8G_COM_ST7920_SW_SPI
 
u8g_com_¨duöo_°7920_•i_‚


	)

500 #i‚de‡
U8G_COM_SW_SPI


502 #i‡
deföed
(
__AVR__
)

503 
	#U8G_COM_SW_SPI
 
u8g_com_©mega_sw_•i_‚


	)

504 
	#U8G_COM_ST7920_SW_SPI
 
u8g_com_©mega_°7920_sw_•i_‚


	)

507 #i‚de‡
U8G_COM_SW_SPI


508 
	#U8G_COM_SW_SPI
 
u8g_com_nuŒ_‚


	)

509 
	#U8G_COM_ST7920_SW_SPI
 
u8g_com_nuŒ_‚


	)

513 #i‡
deföed
(
ARDUINO
)

514 #i‡
deföed
(
__AVR__
)

515 
	#U8G_COM_PARALLEL
 
u8g_com_¨duöo_∑øŒñ_‚


	)

516 
	#U8G_COM_FAST_PARALLEL
 
u8g_com_¨duöo_Á°_∑øŒñ_‚


	)

517 
	#U8G_COM_T6963
 
u8g_com_¨duöo_t6963_‚


	)

519 
	#U8G_COM_PARALLEL
 
u8g_com_¨duöo_∑øŒñ_‚


	)

520 
	#U8G_COM_FAST_PARALLEL
 
u8g_com_¨duöo_∑øŒñ_‚


	)

521 
	#U8G_COM_T6963
 
u8g_com_nuŒ_‚


	)

524 #i‚de‡
U8G_COM_PARALLEL


525 #i‡
deföed
(
__AVR__
)

526 
	#U8G_COM_PARALLEL
 
u8g_com_©mega_∑øŒñ_‚


	)

527 
	#U8G_COM_FAST_PARALLEL
 
u8g_com_©mega_∑øŒñ_‚


	)

528 
	#U8G_COM_T6963
 
u8g_com_nuŒ_‚


	)

531 #i‚de‡
U8G_COM_PARALLEL


532 
	#U8G_COM_PARALLEL
 
u8g_com_nuŒ_‚


	)

533 
	#U8G_COM_FAST_PARALLEL
 
u8g_com_nuŒ_‚


	)

534 
	#U8G_COM_T6963
 
u8g_com_nuŒ_‚


	)

537 #i‡
deföed
(
ARDUINO
)

538 #i‡
deföed
(
__AVR__
)

539 
	#U8G_COM_SSD_I2C
 
u8g_com_¨duöo_ssd_i2c_‚


	)

543 #i‚de‡
U8G_COM_SSD_I2C


544 #i‡
deföed
(
__AVR__
)

546 
	#U8G_COM_SSD_I2C
 
u8g_com_¨duöo_ssd_i2c_‚


	)

549 #i‚de‡
U8G_COM_SSD_I2C


550 
	#U8G_COM_SSD_I2C
 
u8g_com_nuŒ_‚


	)

557 
uöt8_t
 
u8g_InôCom
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

558 
u8g_St›Com
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

559 
u8g_E«bÀCom
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

560 
u8g_DißbÀCom
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

561 
u8g_SëChùSñe˘
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
cs
);

562 
u8g_SëRe£tLow
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

563 
u8g_SëRe£tHigh
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

564 
u8g_SëAddªss
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
addªss
);

565 
uöt8_t
 
u8g_WrôeByã
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
vÆ
);

566 
uöt8_t
 
u8g_WrôeSequí˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
˙t
, uöt8_à*
£q
);

567 
uöt8_t
 
u8g_WrôeSequí˚P
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
˙t
, c⁄° uöt8_à*
£q
);

571 
	#U8G_ESC_DLY
(
x
Ë255, ((xË& 0x7f)

	)

572 
	#U8G_ESC_CS
(
x
Ë255, (0xd0 | ((x)&0x0f))

	)

573 
	#U8G_ESC_ADR
(
x
Ë255, (0xe0 | ((x)&0x0f))

	)

574 
	#U8G_ESC_RST
(
x
Ë255, (0xc0 | ((x)&0x0f))

	)

575 
	#U8G_ESC_VCC
(
x
Ë255, (0xbê| ((x)&0x01))

	)

576 
	#U8G_ESC_END
 255, 254

	)

577 
	#U8G_ESC_255
 255, 255

	)

579 
uöt8_t
 
u8g_WrôeEscSeqP
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, c⁄° uöt8_à*
esc_£q
);

583 
uöt8_t
 
u8g_WrôeByãBWTo16GrDevi˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
b
);

584 
uöt8_t
 
u8g_WrôeSequí˚BWTo16GrDevi˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
˙t
, uöt8_à*
±r
);

585 
uöt8_t
 
u8g_WrôeByã4LTo16GrDevi˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
b
);

586 
uöt8_t
 
u8g_WrôeSequí˚4LTo16GrDevi˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
˙t
, uöt8_à*
±r
);

591 
u8g_com_¨duöo_digôÆ_wrôe
(
u8g_t
 *
u8g
, 
uöt8_t
 
pö_ödex
, uöt8_à
vÆue
);

592 
u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g_t
 *
u8g
);

598 
uöt8_t
 
u8g_Pö
(uöt8_à
p‹t
, uöt8_à
bôpos
);

599 
	#PN
(
p‹t
,
bôpos
Ë
	`u8g_Pö
’‹t,bôpos)

	)

602 
u8g_SëPöOuçut
(
uöt8_t
 
öã∫Æ_pö_numbî
);

603 
u8g_SëPöLevñ
(
uöt8_t
 
öã∫Æ_pö_numbî
, uöt8_à
Àvñ
);

604 
u8g_SëPöI≈ut
(
uöt8_t
 
öã∫Æ_pö_numbî
);

605 
uöt8_t
 
u8g_GëPöLevñ
(uöt8_à
öã∫Æ_pö_numbî
);

608 
u8g_SëPIOuçut
(
u8g_t
 *
u8g
, 
uöt8_t
 
pi
);

609 
u8g_SëPILevñ
(
u8g_t
 *
u8g
, 
uöt8_t
 
pi
, uöt8_à
Àvñ
);

614 
	s_u8g_∑ge_t


616 
u8g_uöt_t
 
	g∑ge_height
;

617 
u8g_uöt_t
 
	gtŸÆ_height
;

618 
u8g_uöt_t
 
	g∑ge_y0
;

619 
u8g_uöt_t
 
	g∑ge_y1
;

620 
uöt8_t
 
	g∑ge
;

622 
_u8g_∑ge_t
 
	tu8g_∑ge_t
;

624 
u8g_∑ge_Fú°
(
u8g_∑ge_t
 *
p
Ë
	gU8G_NOINLINE
;

625 
u8g_∑ge_Inô
(
u8g_∑ge_t
 *
p
, 
u8g_uöt_t
 
∑ge_height
, u8g_uöt_à
tŸÆ_height
 ) 
	gU8G_NOINLINE
;

626 
uöt8_t
 
u8g_∑ge_Next
(
u8g_∑ge_t
 *
p
Ë
	gU8G_NOINLINE
;

631 
	s_u8g_pb_t


633 
u8g_∑ge_t
 
	gp
;

634 
u8g_uöt_t
 
	gwidth
;

635 *
	gbuf
;

637 
_u8g_pb_t
 
	tu8g_pb_t
;

641 
u8g_pb_CÀ¨
(
u8g_pb_t
 *
b
);

642 
uöt8_t
 
u8g_pb_IsYI¡î£˘i⁄
(
u8g_pb_t
 *
pb
, 
u8g_uöt_t
 
v0
, u8g_uöt_à
v1
);

643 
uöt8_t
 
u8g_pb_IsXI¡î£˘i⁄
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
v0
, u8g_uöt_à
v1
);

644 
uöt8_t
 
u8g_pb_IsI¡î£˘i⁄
(
u8g_pb_t
 *
pb
, 
u8g_dev_¨g_bbx_t
 *
bbx
);

645 
u8g_pb_GëPageBox
(
u8g_pb_t
 *
pb
, 
u8g_box_t
 *
box
);

646 
uöt8_t
 
u8g_pb_Is8PixñVisibÀ
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
);

647 
uöt8_t
 
u8g_pb_WrôeBuf„r
(
u8g_pb_t
 *
b
, 
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

662 
	#U8G_PB_DEV
(
«me
, 
width
, 
height
, 
∑ge_height
, 
dev_‚
, 
com_‚
) \

663 
uöt8_t
 
«me
##
_buf
[
width
] 
U8G_NOCOMMON
 ; \

664 
u8g_pb_t
 
«me
##
_pb
 = { {
∑ge_height
, 
height
, 0, 0, 0}, 
width
,Çame##
_buf
}; \

665 
u8g_dev_t
 
«me
 = { 
dev_‚
, &«me##
_pb
, 
com_‚
 }

	)

668 
u8g_pb8v1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
Ë
	gU8G_NOINLINE
;

669 
u8g_pb8v1_CÀ¨
(
u8g_pb_t
 *
b
Ë
	gU8G_NOINLINE
;

671 
uöt8_t
 
u8g_pb8v1_IsYI¡î£˘i⁄
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
v0
, u8g_uöt_à
v1
);

672 
uöt8_t
 
u8g_pb8v1_IsXI¡î£˘i⁄
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
v0
, u8g_uöt_à
v1
);

673 
uöt8_t
 
u8g_pb8v1_WrôeBuf„r
(
u8g_pb_t
 *
b
, 
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

675 
uöt8_t
 
u8g_dev_pb8v1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

678 
uöt8_t
 
u8g_dev_pb16v1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

681 
uöt8_t
 
u8g_dev_pb14v1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

684 
uöt8_t
 
u8g_dev_pb8v2_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

687 
uöt8_t
 
u8g_dev_pb16v2_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

691 
uöt8_t
 
u8g_dev_pb8h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

694 
uöt8_t
 
u8g_dev_pb16h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

697 
uöt8_t
 
u8g_dev_pb32h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

701 
uöt8_t
 
u8g_dev_pb8h2_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

704 
uöt8_t
 
u8g_dev_pb16h2_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

709 
uöt8_t
 
u8g_dev_pb8h1f_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

712 
uöt8_t
 
u8g_dev_pb8h8_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

720 (*
	gu8g_døw_curs‹_‚
)(
	tu8g_t
 *
	tu8g
);

723 
u8g_uöt_t
 (*
	tu8g_f⁄t_ˇlc_vªf_‚±r
)(
	tu8g_t
 *
	tu8g
);

726 (*
	gu8g_°©e_cb
)(
	tuöt8_t
 
	tmsg
);

732 
	#U8G_PI_RESET
 0

	)

735 
	#U8G_PI_A0
 1

	)

736 
	#U8G_PI_DI
 1

	)

739 
	#U8G_PI_CS
 2

	)

740 
	#U8G_PI_CS1
 2

	)

741 
	#U8G_PI_CS2
 3

	)

743 
	#U8G_PI_A0_STATE
 3

	)

746 
	#U8G_PI_EN
 4

	)

747 
	#U8G_PI_CS_STATE
 4

	)

748 
	#U8G_PI_SCK
 4

	)

749 
	#U8G_PI_SCL
 4

	)

750 
	#U8G_PI_RD
 4

	)

754 
	#U8G_PI_D0
 5

	)

755 
	#U8G_PI_MOSI
 5

	)

756 
	#U8G_PI_SDA
 5

	)

757 
	#U8G_PI_D1
 6

	)

758 
	#U8G_PI_MISO
 6

	)

759 
	#U8G_PI_D2
 7

	)

760 
	#U8G_PI_D3
 8

	)

761 
	#U8G_PI_SET_A0
 8

	)

762 
	#U8G_PI_D4
 9

	)

763 
	#U8G_PI_D5
 10

	)

764 
	#U8G_PI_I2C_OPTION
 11

	)

765 
	#U8G_PI_D6
 11

	)

766 
	#U8G_PI_D7
 12

	)

769 
	#U8G_PI_WR
 13

	)

770 
	#U8G_PI_RW
 13

	)

772 
	#U8G_PIN_LIST_LEN
 14

	)

775 
	#U8G_PIN_NONE
 255

	)

777 
	#U8G_FONT_HEIGHT_MODE_TEXT
 0

	)

778 
	#U8G_FONT_HEIGHT_MODE_XTEXT
 1

	)

779 
	#U8G_FONT_HEIGHT_MODE_ALL
 2

	)

781 
	s_u8g_t


783 
u8g_uöt_t
 
	gwidth
;

784 
u8g_uöt_t
 
	gheight
;

787 
u8g_dev_t
 *
	gdev
;

788 c⁄° 
u8g_pgm_uöt8_t
 *
	gf⁄t
;

789 c⁄° 
u8g_pgm_uöt8_t
 *
	gcurs‹_f⁄t
;

790 
uöt8_t
 
	gcurs‹_fg_cﬁ‹
, 
	gcurs‹_bg_cﬁ‹
;

791 
uöt8_t
 
	gcurs‹_ícodög
;

792 
uöt8_t
 
	gmode
;

793 
u8g_uöt_t
 
	gcurs‹_x
;

794 
u8g_uöt_t
 
	gcurs‹_y
;

795 
u8g_døw_curs‹_‚
 
	gcurs‹_‚
;

797 
öt8_t
 
	gglyph_dx
;

798 
öt8_t
 
	gglyph_x
;

799 
öt8_t
 
	gglyph_y
;

800 
uöt8_t
 
	gglyph_width
;

801 
uöt8_t
 
	gglyph_height
;

803 
u8g_f⁄t_ˇlc_vªf_‚±r
 
	gf⁄t_ˇlc_vªf
;

804 
uöt8_t
 
	gf⁄t_height_mode
;

805 
öt8_t
 
	gf⁄t_ªf_as˚¡
;

806 
öt8_t
 
	gf⁄t_ªf_des˚¡
;

807 
uöt8_t
 
	gf⁄t_löe_•acög_Á˘‹
;

808 
uöt8_t
 
	glöe_•acög
;

810 
u8g_dev_¨g_pixñ_t
 
	g¨g_pixñ
;

813 
uöt8_t
 
	gpö_li°
[
U8G_PIN_LIST_LEN
];

815 
u8g_°©e_cb
 
	g°©e_cb
;

817 
u8g_box_t
 
	gcuºít_∑ge
;

821 
	#u8g_GëF⁄tAs˚¡
(
u8g
Ë((u8g)->
f⁄t_ªf_as˚¡
)

	)

822 
	#u8g_GëF⁄tDes˚¡
(
u8g
Ë((u8g)->
f⁄t_ªf_des˚¡
)

	)

823 
	#u8g_GëF⁄tLöeS∑cög
(
u8g
Ë((u8g)->
löe_•acög
)

	)

825 
uöt8_t
 
u8g_ˇŒ_dev_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

827 
uöt8_t
 
u8g_InôLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

828 
u8g_Fú°PageLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

829 
uöt8_t
 
u8g_NextPageLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

830 
uöt8_t
 
u8g_SëC⁄åa°LL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
c⁄åa°
);

831 
u8g_DøwPixñLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
);

832 
u8g_Døw8PixñLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
pixñ
);

833 
uöt8_t
 
u8g_IsBBXI¡î£˘i⁄LL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
);

834 
u8g_uöt_t
 
u8g_GëWidthLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

835 
u8g_uöt_t
 
u8g_GëHeightLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

837 
u8g_Upd©eDimísi⁄
(
u8g_t
 *
u8g
);

838 
uöt8_t
 
u8g_Begö
(
u8g_t
 *
u8g
);

839 
uöt8_t
 
u8g_Inô
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

840 
uöt8_t
 
u8g_InôSPI
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
);

841 
uöt8_t
 
u8g_InôHWSPI
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
);

842 
uöt8_t
 
u8g_InôI2C
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
›ti⁄s
);

843 
uöt8_t
 
u8g_Inô8BôFixedP‹t
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
í
, uöt8_à
cs
, uöt8_à
di
, uöt8_à
rw
, uöt8_à
ª£t
);

844 
uöt8_t
 
u8g_Inô8Bô
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

845 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
, uöt8_à
ª£t
);

846 
uöt8_t
 
u8g_InôRW8Bô
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

847 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
wr
, uöt8_à
rd
, uöt8_à
ª£t
);

848 
u8g_Fú°Page
(
u8g_t
 *
u8g
);

849 
uöt8_t
 
u8g_NextPage
(
u8g_t
 *
u8g
);

850 
uöt8_t
 
u8g_SëC⁄åa°
(
u8g_t
 *
u8g
, uöt8_à
c⁄åa°
);

851 
u8g_SÀïOn
(
u8g_t
 *
u8g
);

852 
u8g_SÀïOff
(
u8g_t
 *
u8g
);

853 
u8g_DøwPixñ
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
);

854 
u8g_Døw8Pixñ
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
pixñ
);

856 
uöt8_t
 
u8g_St›
(
u8g_t
 *
u8g
);

857 
u8g_SëCﬁ‹Index
(
u8g_t
 *
u8g
, 
uöt8_t
 
idx
);

858 
uöt8_t
 
u8g_GëCﬁ‹Index
(
u8g_t
 *
u8g
);

860 
uöt8_t
 
u8g_GëDeÁu…F‹egroundCﬁ‹
(
u8g_t
 *
u8g
);

861 
u8g_SëDeÁu…F‹egroundCﬁ‹
(
u8g_t
 *
u8g
);

863 
uöt8_t
 
u8g_GëDeÁu…BackgroundCﬁ‹
(
u8g_t
 *
u8g
);

864 
u8g_SëDeÁu…BackgroundCﬁ‹
(
u8g_t
 *
u8g
);

866 
uöt8_t
 
u8g_GëDeÁu…MidCﬁ‹
(
u8g_t
 *
u8g
);

867 
u8g_SëDeÁu…MidCﬁ‹
(
u8g_t
 *
u8g
);

869 
	#u8g_GëWidth
(
u8g
Ë((u8g)->
width
)

	)

870 
	#u8g_GëHeight
(
u8g
Ë((u8g)->
height
)

	)

871 
	#u8g_GëMode
(
u8g
Ë((u8g)->
mode
)

	)

878 
	#U8G_STATE_ENV_IDX
 0

	)

879 
	#U8G_STATE_U8G_IDX
 1

	)

880 
	#U8G_STATE_RESTORE
 0

	)

881 
	#U8G_STATE_BACKUP
 1

	)

882 
	#U8G_STATE_MSG_COMPOSE
(
cmd
,
idx
Ë(((cmd)<<1Ë| (idx))

	)

884 
	#U8G_STATE_MSG_RESTORE_ENV
 
	`U8G_STATE_MSG_COMPOSE
(
U8G_STATE_RESTORE
,
U8G_STATE_ENV_IDX
)

	)

885 
	#U8G_STATE_MSG_BACKUP_ENV
 
	`U8G_STATE_MSG_COMPOSE
(
U8G_STATE_BACKUP
,
U8G_STATE_ENV_IDX
)

	)

886 
	#U8G_STATE_MSG_RESTORE_U8G
 
	`U8G_STATE_MSG_COMPOSE
(
U8G_STATE_RESTORE
,
U8G_STATE_U8G_IDX
)

	)

887 
	#U8G_STATE_MSG_BACKUP_U8G
 
	`U8G_STATE_MSG_COMPOSE
(
U8G_STATE_BACKUP
,
U8G_STATE_U8G_IDX
)

	)

889 
	#U8G_STATE_MSG_GET_IDX
(
msg
Ë((msg)&1)

	)

890 
	#U8G_STATE_MSG_IS_BACKUP
(
msg
Ë((msg)&2)

	)

894 
u8g_°©e_dummy_cb
(
uöt8_t
 
msg
);

895 
u8g_backup_avr_•i
(
uöt8_t
 
msg
);

897 
u8g_SëH¨dw¨eBackup
(
u8g_t
 *
u8g
, 
u8g_°©e_cb
 
backup_cb
);

901 
uöt8_t
 
u8g_IsBBXI¡î£˘i⁄
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
);

906 
u8g_UndoRŸ©i⁄
(
u8g_t
 *
u8g
);

907 
u8g_SëRŸ90
(
u8g_t
 *
u8g
);

908 
u8g_SëRŸ180
(
u8g_t
 *
u8g
);

909 
u8g_SëRŸ270
(
u8g_t
 *
u8g
);

913 
u8g_UndoSˇÀ
(
u8g_t
 *
u8g
);

914 
u8g_SëSˇÀ2x2
(
u8g_t
 *
u8g
);

919 
size_t
 
u8g_f⁄t_GëSize
(c⁄° *
f⁄t
);

920 
uöt8_t
 
u8g_f⁄t_GëF⁄tSèπEncodög
(c⁄° *
f⁄t
Ë
	gU8G_NOINLINE
;

921 
uöt8_t
 
u8g_f⁄t_GëF⁄tEndEncodög
(c⁄° *
f⁄t
Ë
	gU8G_NOINLINE
;

923 
u8g_SëF⁄t
(
u8g_t
 *
u8g
, c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
);

925 
uöt8_t
 
u8g_GëF⁄tBBXWidth
(
u8g_t
 *
u8g
);

926 
uöt8_t
 
u8g_GëF⁄tBBXHeight
(
u8g_t
 *
u8g
);

927 
öt8_t
 
u8g_GëF⁄tBBXOffX
(
u8g_t
 *
u8g
);

928 
öt8_t
 
u8g_GëF⁄tBBXOffY
(
u8g_t
 *
u8g
);

929 
uöt8_t
 
u8g_GëF⁄tC≠ôÆAHeight
(
u8g_t
 *
u8g
);

931 
uöt8_t
 
u8g_IsGlyph
(
u8g_t
 *
u8g
, uöt8_à
ªque°ed_ícodög
);

932 
öt8_t
 
u8g_GëGlyphDñèX
(
u8g_t
 *
u8g
, 
uöt8_t
 
ªque°ed_ícodög
);

934 
öt8_t
 
u8g_døw_glyph
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
);

936 
öt8_t
 
u8g_DøwGlyphDú
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
ícodög
);

937 
öt8_t
 
u8g_DøwGlyph
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
);

938 
öt8_t
 
u8g_DøwGlyph90
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
);

939 
öt8_t
 
u8g_DøwGlyph180
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
);

940 
öt8_t
 
u8g_DøwGlyph270
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
);

941 
öt8_t
 
u8g_DøwGlyphF⁄tBBX
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
ícodög
);

943 
u8g_uöt_t
 
u8g_DøwSå
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, c⁄° *
s
);

944 
u8g_uöt_t
 
u8g_DøwSå90
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, c⁄° *
s
);

945 
u8g_uöt_t
 
u8g_DøwSå180
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, c⁄° *
s
);

946 
u8g_uöt_t
 
u8g_DøwSå270
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, c⁄° *
s
);

948 
u8g_uöt_t
 
u8g_DøwSåDú
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, c⁄° *
s
);

951 
u8g_uöt_t
 
u8g_DøwSåP
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
);

952 
u8g_uöt_t
 
u8g_DøwSå90P
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
);

953 
u8g_uöt_t
 
u8g_DøwSå180P
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
);

954 
u8g_uöt_t
 
u8g_DøwSå270P
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
);

957 
u8g_SëF⁄tRefHeightText
(
u8g_t
 *
u8g
);

958 
u8g_SëF⁄tRefHeightExãndedText
(
u8g_t
 *
u8g
);

959 
u8g_SëF⁄tRefHeightAŒ
(
u8g_t
 *
u8g
);

960 
u8g_SëF⁄tLöeS∑cögFa˘‹
(
u8g_t
 *
u8g
, 
uöt8_t
 
Á˘‹
);

962 
u8g_uöt_t
 
u8g_f⁄t_ˇlc_vªf_f⁄t
(
u8g_t
 *
u8g
);

963 
u8g_uöt_t
 
u8g_f⁄t_ˇlc_vªf_bŸtom
(
u8g_t
 *
u8g
);

964 
u8g_uöt_t
 
u8g_f⁄t_ˇlc_vªf_t›
(
u8g_t
 *
u8g
);

965 
u8g_uöt_t
 
u8g_f⁄t_ˇlc_vªf_˚¡î
(
u8g_t
 *
u8g
);

967 
u8g_SëF⁄tPosBa£löe
(
u8g_t
 *
u8g
);

968 
u8g_SëF⁄tPosBŸtom
(
u8g_t
 *
u8g
);

969 
u8g_SëF⁄tPosCíãr
(
u8g_t
 *
u8g
);

970 
u8g_SëF⁄tPosT›
(
u8g_t
 *
u8g
);

973 
u8g_uöt_t
 
u8g_GëSåPixñWidth
(
u8g_t
 *
u8g
, c⁄° *
s
);

974 
u8g_uöt_t
 
u8g_GëSåPixñWidthP
(
u8g_t
 *
u8g
, c⁄° 
u8g_pgm_uöt8_t
 *
s
);

975 
öt8_t
 
u8g_GëSåX
(
u8g_t
 *
u8g
, c⁄° *
s
);

976 
öt8_t
 
u8g_GëSåXP
(
u8g_t
 *
u8g
, c⁄° 
u8g_pgm_uöt8_t
 *
s
);

977 
u8g_uöt_t
 
u8g_GëSåWidth
(
u8g_t
 *
u8g
, c⁄° *
s
);

978 
u8g_uöt_t
 
u8g_GëSåWidthP
(
u8g_t
 *
u8g
, c⁄° 
u8g_pgm_uöt8_t
 *
s
);

980 
u8g_uöt_t
 
u8g_DøwSåF⁄tBBX
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, c⁄° *
s
);

982 
u8g_GëSåMöBox
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_uöt_t
 *
x
, u8g_uöt_à*
y
, u8g_uöt_à*
width
, u8g_uöt_à*
height
);

983 
u8g_GëSåAMöBox
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_uöt_t
 *
x
, u8g_uöt_à*
y
, u8g_uöt_à*
width
, u8g_uöt_à*
height
);

987 
u8g_døw_box
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
Ë
	gU8G_NOINLINE
;

989 
u8g_DøwHLöe
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
);

990 
u8g_DøwVLöe
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
);

991 
u8g_DøwFøme
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
);

992 
u8g_DøwBox
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
);

994 
u8g_DøwRFøme
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, u8g_uöt_à
r
);

995 
u8g_DøwRBox
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, u8g_uöt_à
r
);

999 
u8g_DøwHBôm≠
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, c⁄° 
uöt8_t
 *
bôm≠
);

1000 
u8g_DøwHBôm≠P
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
);

1001 
u8g_DøwBôm≠
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, u8g_uöt_à
h
, c⁄° 
uöt8_t
 *
bôm≠
);

1002 
u8g_DøwBôm≠P
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, u8g_uöt_à
h
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
);

1004 
u8g_DøwXBM
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, c⁄° 
uöt8_t
 *
bôm≠
);

1005 
u8g_DøwXBMP
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
);

1009 
u8g_DøwLöe
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x1
, u8g_uöt_à
y1
, u8g_uöt_à
x2
, u8g_uöt_à
y2
);

1025 
	#U8G_DRAW_UPPER_RIGHT
 0x01

	)

1026 
	#U8G_DRAW_UPPER_LEFT
 0x02

	)

1027 
	#U8G_DRAW_LOWER_LEFT
 0x04

	)

1028 
	#U8G_DRAW_LOWER_RIGHT
 0x08

	)

1029 
	#U8G_DRAW_ALL
 (
U8G_DRAW_UPPER_RIGHT
|
U8G_DRAW_UPPER_LEFT
|
U8G_DRAW_LOWER_RIGHT
|
U8G_DRAW_LOWER_LEFT
)

	)

1031 
u8g_døw_cú˛e
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
Ë
	gU8G_NOINLINE
;

1032 
u8g_døw_disc
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
Ë
	gU8G_NOINLINE
;

1034 
u8g_DøwCú˛e
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
);

1035 
u8g_DøwDisc
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
);

1038 
uöt8_t
 
u8g_is_box_bbx_öãr£˘i⁄
(
u8g_box_t
 *
box
, 
u8g_dev_¨g_bbx_t
 *
bbx
);

1042 
u8g_SëCurs‹F⁄t
(
u8g_t
 *
u8g
, c⁄° 
u8g_pgm_uöt8_t
 *
curs‹_f⁄t
);

1043 
u8g_SëCurs‹StyÀ
(
u8g_t
 *
u8g
, 
uöt8_t
 
ícodög
);

1044 
u8g_SëCurs‹Pos
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
curs‹_x
, u8g_uöt_à
curs‹_y
);

1045 
u8g_SëCurs‹Cﬁ‹
(
u8g_t
 *
u8g
, 
uöt8_t
 
fg
, uöt8_à
bg
);

1046 
u8g_E«bÀCurs‹
(
u8g_t
 *
u8g
);

1047 
u8g_DißbÀCurs‹
(
u8g_t
 *
u8g
);

1048 
u8g_DøwCurs‹
(
u8g_t
 *
u8g
);

1054 
u8g_SëVútuÆS¸ìnDimísi⁄
(
u8g_t
 *
vs_u8g
, 
u8g_uöt_t
 
width
, u8g_uöt_à
height
);

1055 
uöt8_t
 
u8g_AddToVútuÆS¸ìn
(
u8g_t
 *
vs_u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_à*
chûd_u8g
);

1058 
°_Døw
(
uöt8_t
 
Âs
);

1059 
°_Sãp
(
uöt8_t
 
∂ayî_pos
, uöt8_à
is_auto_fúe
, uöt8_à
is_fúe
);

1065 
	#U8G_I2C_OPT_NONE
 0

	)

1068 
	#U8G_I2C_ERR_NONE
 0x00

	)

1070 
	#U8G_I2C_ERR_TIMEOUT
 0x01

	)

1071 
	#U8G_I2C_ERR_BUS
 0x02

	)

1073 
u8g_i2c_˛ór_îr‹
(Ë
	gU8G_NOINLINE
;

1074 
uöt8_t
 
u8g_i2c_gë_îr‹
(Ë
	gU8G_NOINLINE
;

1075 
uöt8_t
 
u8g_i2c_gë_îr_pos
(Ë
	gU8G_NOINLINE
;

1076 
u8g_i2c_öô
(
uöt8_t
 
›ti⁄s
Ë
	gU8G_NOINLINE
;

1077 
uöt8_t
 
u8g_i2c_waô
(uöt8_à
mask
, uöt8_à
pos
Ë
	gU8G_NOINLINE
;

1078 
uöt8_t
 
u8g_i2c_°¨t
(uöt8_à
¶a
Ë
	gU8G_NOINLINE
;

1079 
uöt8_t
 
u8g_i2c_£nd_byã
(uöt8_à
d©a
Ë
	gU8G_NOINLINE
;

1080 
u8g_i2c_°›
(Ë
	gU8G_NOINLINE
;

1086 c⁄° *
u8g_u8tﬂ
(
uöt8_t
 
v
, uöt8_à
d
);

1090 c⁄° *
u8g_u16tﬂ
(
uöt16_t
 
v
, 
uöt8_t
 
d
);

1096 
u8g_Dñay
(
uöt16_t
 
vÆ
);

1099 
u8g_Mi¸oDñay
();

1102 
u8g_10Mi¸oDñay
();

1106 
	#CHESS_KEY_NONE
 0

	)

1107 
	#CHESS_KEY_NEXT
 1

	)

1108 
	#CHESS_KEY_PREV
 2

	)

1109 
	#CHESS_KEY_SELECT
 3

	)

1110 
	#CHESS_KEY_BACK
 4

	)

1112 
chess_Inô
(
u8g_t
 *
u8g
, 
uöt8_t
 
em±y_body_cﬁ‹
);

1113 
chess_Døw
();

1114 
chess_Sãp
(
uöt8_t
 
keycode
);

1119 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_m2ic⁄_5
[] 
U8G_SECTION
(".progmem.u8g_font_m2icon_5");

1120 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_m2ic⁄_7
[] 
U8G_SECTION
(".progmem.u8g_font_m2icon_7");

1121 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_m2ic⁄_9
[] 
U8G_SECTION
(".progmem.u8g_font_m2icon_9");

1123 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_u8glib_4
[] 
U8G_SECTION
(".progmem.u8g_font_u8glib_4");

1124 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_u8glib_4r
[] 
U8G_SECTION
(".progmem.u8g_font_u8glib_4r");

1127 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x12_75r
[] 
U8G_SECTION
(".progmem.u8g_font_6x12_75r");

1128 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13_75r
[] 
U8G_SECTION
(".progmem.u8g_font_6x13_75r");

1129 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13_75r
[] 
U8G_SECTION
(".progmem.u8g_font_7x13_75r");

1130 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_8x13_75r
[] 
U8G_SECTION
(".progmem.u8g_font_8x13_75r");

1131 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x15_75r
[] 
U8G_SECTION
(".progmem.u8g_font_9x15_75r");

1132 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x18_75r
[] 
U8G_SECTION
(".progmem.u8g_font_9x18_75r");

1133 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_cu12_75r
[] 
U8G_SECTION
(".progmem.u8g_font_cu12_75r");

1134 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_75r
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_75r");

1135 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_10x20_75r
[] 
U8G_SECTION
(".progmem.u8g_font_10x20_75r");

1137 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_10x20_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_10x20_67_75");

1138 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_10x20_78_79
[] 
U8G_SECTION
(".progmem.u8g_font_10x20_78_79");

1139 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_10x20
[] 
U8G_SECTION
(".progmem.u8g_font_10x20");

1140 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_10x20r
[] 
U8G_SECTION
(".progmem.u8g_font_10x20r");

1141 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_4x6
[] 
U8G_SECTION
(".progmem.u8g_font_4x6");

1142 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_4x6r
[] 
U8G_SECTION
(".progmem.u8g_font_4x6r");

1144 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_5x7
[] 
U8G_SECTION
(".progmem.u8g_font_5x7");

1145 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_5x7r
[] 
U8G_SECTION
(".progmem.u8g_font_5x7r");

1146 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_5x8
[] 
U8G_SECTION
(".progmem.u8g_font_5x8");

1147 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_5x8r
[] 
U8G_SECTION
(".progmem.u8g_font_5x8r");

1148 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x10
[] 
U8G_SECTION
(".progmem.u8g_font_6x10");

1149 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x10r
[] 
U8G_SECTION
(".progmem.u8g_font_6x10r");

1150 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x12_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_6x12_67_75");

1151 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x12_78_79
[] 
U8G_SECTION
(".progmem.u8g_font_6x12_78_79");

1152 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x12
[] 
U8G_SECTION
(".progmem.u8g_font_6x12");

1153 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x12r
[] 
U8G_SECTION
(".progmem.u8g_font_6x12r");

1154 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_6x13_67_75");

1155 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13_78_79
[] 
U8G_SECTION
(".progmem.u8g_font_6x13_78_79");

1156 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13B
[] 
U8G_SECTION
(".progmem.u8g_font_6x13B");

1157 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13Br
[] 
U8G_SECTION
(".progmem.u8g_font_6x13Br");

1158 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13
[] 
U8G_SECTION
(".progmem.u8g_font_6x13");

1159 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13r
[] 
U8G_SECTION
(".progmem.u8g_font_6x13r");

1160 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13O
[] 
U8G_SECTION
(".progmem.u8g_font_6x13O");

1161 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13Or
[] 
U8G_SECTION
(".progmem.u8g_font_6x13Or");

1162 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_7x13_67_75");

1163 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13_78_79
[] 
U8G_SECTION
(".progmem.u8g_font_7x13_78_79");

1164 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13B
[] 
U8G_SECTION
(".progmem.u8g_font_7x13B");

1165 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13Br
[] 
U8G_SECTION
(".progmem.u8g_font_7x13Br");

1166 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13
[] 
U8G_SECTION
(".progmem.u8g_font_7x13");

1167 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13r
[] 
U8G_SECTION
(".progmem.u8g_font_7x13r");

1168 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13O
[] 
U8G_SECTION
(".progmem.u8g_font_7x13O");

1169 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13Or
[] 
U8G_SECTION
(".progmem.u8g_font_7x13Or");

1170 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x14B
[] 
U8G_SECTION
(".progmem.u8g_font_7x14B");

1171 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x14Br
[] 
U8G_SECTION
(".progmem.u8g_font_7x14Br");

1172 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x14
[] 
U8G_SECTION
(".progmem.u8g_font_7x14");

1173 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x14r
[] 
U8G_SECTION
(".progmem.u8g_font_7x14r");

1174 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_8x13_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_8x13_67_75");

1175 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_8x13B
[] 
U8G_SECTION
(".progmem.u8g_font_8x13B");

1176 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_8x13Br
[] 
U8G_SECTION
(".progmem.u8g_font_8x13Br");

1177 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_8x13
[] 
U8G_SECTION
(".progmem.u8g_font_8x13");

1178 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_8x13r
[] 
U8G_SECTION
(".progmem.u8g_font_8x13r");

1179 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_8x13O
[] 
U8G_SECTION
(".progmem.u8g_font_8x13O");

1180 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_8x13Or
[] 
U8G_SECTION
(".progmem.u8g_font_8x13Or");

1182 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x15_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_9x15_67_75");

1183 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x15_78_79
[] 
U8G_SECTION
(".progmem.u8g_font_9x15_78_79");

1184 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x15B
[] 
U8G_SECTION
(".progmem.u8g_font_9x15B");

1185 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x15Br
[] 
U8G_SECTION
(".progmem.u8g_font_9x15Br");

1186 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x15
[] 
U8G_SECTION
(".progmem.u8g_font_9x15");

1187 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x15r
[] 
U8G_SECTION
(".progmem.u8g_font_9x15r");

1189 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x18_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_9x18_67_75");

1190 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x18_78_79
[] 
U8G_SECTION
(".progmem.u8g_font_9x18_78_79");

1191 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x18B
[] 
U8G_SECTION
(".progmem.u8g_font_9x18B");

1192 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x18
[] 
U8G_SECTION
(".progmem.u8g_font_9x18");

1193 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x18Br
[] 
U8G_SECTION
(".progmem.u8g_font_9x18Br");

1194 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x18r
[] 
U8G_SECTION
(".progmem.u8g_font_9x18r");

1196 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_curs‹
[] 
U8G_SECTION
(".progmem.u8g_font_cursor");

1197 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_curs‹r
[] 
U8G_SECTION
(".progmem.u8g_font_cursorr");

1198 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_mi¸o
[] 
U8G_SECTION
(".progmem.u8g_font_micro");

1200 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_cu12_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_cu12_67_75");

1201 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_cu12_78_79
[] 
U8G_SECTION
(".progmem.u8g_font_cu12_78_79");

1202 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_cu12
[] 
U8G_SECTION
(".progmem.u8g_font_cu12");

1211 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub11
[] 
U8G_SECTION
(".progmem.u8g_font_fub11");

1212 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub11r
[] 
U8G_SECTION
(".progmem.u8g_font_fub11r");

1213 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub11n
[] 
U8G_SECTION
(".progmem.u8g_font_fub11n");

1214 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub14
[] 
U8G_SECTION
(".progmem.u8g_font_fub14");

1215 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub14r
[] 
U8G_SECTION
(".progmem.u8g_font_fub14r");

1216 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub14n
[] 
U8G_SECTION
(".progmem.u8g_font_fub14n");

1217 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub17
[] 
U8G_SECTION
(".progmem.u8g_font_fub17");

1218 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub17r
[] 
U8G_SECTION
(".progmem.u8g_font_fub17r");

1219 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub17n
[] 
U8G_SECTION
(".progmem.u8g_font_fub17n");

1220 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub20
[] 
U8G_SECTION
(".progmem.u8g_font_fub20");

1221 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub20r
[] 
U8G_SECTION
(".progmem.u8g_font_fub20r");

1222 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub20n
[] 
U8G_SECTION
(".progmem.u8g_font_fub20n");

1223 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub25
[] 
U8G_SECTION
(".progmem.u8g_font_fub25");

1224 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub25r
[] 
U8G_SECTION
(".progmem.u8g_font_fub25r");

1225 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub25n
[] 
U8G_SECTION
(".progmem.u8g_font_fub25n");

1226 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub30
[] 
U8G_SECTION
(".progmem.u8g_font_fub30");

1227 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub30r
[] 
U8G_SECTION
(".progmem.u8g_font_fub30r");

1228 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub30n
[] 
U8G_SECTION
(".progmem.u8g_font_fub30n");

1229 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub35n
[] 
U8G_SECTION
(".progmem.u8g_font_fub35n");

1230 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub42n
[] 
U8G_SECTION
(".progmem.u8g_font_fub42n");

1231 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub49n
[] 
U8G_SECTION
(".progmem.u8g_font_fub49n");

1240 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur11
[] 
U8G_SECTION
(".progmem.u8g_font_fur11");

1241 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur11r
[] 
U8G_SECTION
(".progmem.u8g_font_fur11r");

1242 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur11n
[] 
U8G_SECTION
(".progmem.u8g_font_fur11n");

1243 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur14
[] 
U8G_SECTION
(".progmem.u8g_font_fur14");

1244 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur14r
[] 
U8G_SECTION
(".progmem.u8g_font_fur14r");

1245 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur14n
[] 
U8G_SECTION
(".progmem.u8g_font_fur14n");

1246 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur17
[] 
U8G_SECTION
(".progmem.u8g_font_fur17");

1247 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur17r
[] 
U8G_SECTION
(".progmem.u8g_font_fur17r");

1248 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur17n
[] 
U8G_SECTION
(".progmem.u8g_font_fur17n");

1249 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur20
[] 
U8G_SECTION
(".progmem.u8g_font_fur20");

1250 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur20r
[] 
U8G_SECTION
(".progmem.u8g_font_fur20r");

1251 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur20n
[] 
U8G_SECTION
(".progmem.u8g_font_fur20n");

1252 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur25
[] 
U8G_SECTION
(".progmem.u8g_font_fur25");

1253 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur25r
[] 
U8G_SECTION
(".progmem.u8g_font_fur25r");

1254 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur25n
[] 
U8G_SECTION
(".progmem.u8g_font_fur25n");

1255 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur30
[] 
U8G_SECTION
(".progmem.u8g_font_fur30");

1256 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur30r
[] 
U8G_SECTION
(".progmem.u8g_font_fur30r");

1257 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur30n
[] 
U8G_SECTION
(".progmem.u8g_font_fur30n");

1258 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur35n
[] 
U8G_SECTION
(".progmem.u8g_font_fur35n");

1259 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur42n
[] 
U8G_SECTION
(".progmem.u8g_font_fur42n");

1260 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur49n
[] 
U8G_SECTION
(".progmem.u8g_font_fur49n");

1269 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb11
[] 
U8G_SECTION
(".progmem.u8g_font_gdb11");

1270 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb12
[] 
U8G_SECTION
(".progmem.u8g_font_gdb12");

1271 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb14
[] 
U8G_SECTION
(".progmem.u8g_font_gdb14");

1272 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb17
[] 
U8G_SECTION
(".progmem.u8g_font_gdb17");

1273 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb20
[] 
U8G_SECTION
(".progmem.u8g_font_gdb20");

1274 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb25
[] 
U8G_SECTION
(".progmem.u8g_font_gdb25");

1275 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb30
[] 
U8G_SECTION
(".progmem.u8g_font_gdb30");

1277 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb11r
[] 
U8G_SECTION
(".progmem.u8g_font_gdb11r");

1278 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb12r
[] 
U8G_SECTION
(".progmem.u8g_font_gdb12r");

1279 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb14r
[] 
U8G_SECTION
(".progmem.u8g_font_gdb14r");

1280 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb17r
[] 
U8G_SECTION
(".progmem.u8g_font_gdb17r");

1281 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb20r
[] 
U8G_SECTION
(".progmem.u8g_font_gdb20r");

1282 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb25r
[] 
U8G_SECTION
(".progmem.u8g_font_gdb25r");

1283 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb30r
[] 
U8G_SECTION
(".progmem.u8g_font_gdb30r");

1285 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb11n
[] 
U8G_SECTION
(".progmem.u8g_font_gdb11n");

1286 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb12n
[] 
U8G_SECTION
(".progmem.u8g_font_gdb12n");

1287 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb14n
[] 
U8G_SECTION
(".progmem.u8g_font_gdb14n");

1288 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb17n
[] 
U8G_SECTION
(".progmem.u8g_font_gdb17n");

1289 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb20n
[] 
U8G_SECTION
(".progmem.u8g_font_gdb20n");

1290 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb25n
[] 
U8G_SECTION
(".progmem.u8g_font_gdb25n");

1291 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb30n
[] 
U8G_SECTION
(".progmem.u8g_font_gdb30n");

1300 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr9
[] 
U8G_SECTION
(".progmem.u8g_font_gdr9");

1301 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr10
[] 
U8G_SECTION
(".progmem.u8g_font_gdr10");

1302 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr11
[] 
U8G_SECTION
(".progmem.u8g_font_gdr11");

1303 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr12
[] 
U8G_SECTION
(".progmem.u8g_font_gdr12");

1304 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr14
[] 
U8G_SECTION
(".progmem.u8g_font_gdr14");

1305 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr17
[] 
U8G_SECTION
(".progmem.u8g_font_gdr17");

1306 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr20
[] 
U8G_SECTION
(".progmem.u8g_font_gdr20");

1307 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr25
[] 
U8G_SECTION
(".progmem.u8g_font_gdr25");

1308 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr30
[] 
U8G_SECTION
(".progmem.u8g_font_gdr30");

1310 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr9r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr9r");

1311 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr10r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr10r");

1312 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr11r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr11r");

1313 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr12r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr12r");

1314 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr14r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr14r");

1315 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr17r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr17r");

1316 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr20r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr20r");

1317 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr25r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr25r");

1318 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr30r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr30r");

1320 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr9n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr9n");

1321 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr10n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr10n");

1322 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr11n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr11n");

1323 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr12n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr12n");

1324 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr14n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr14n");

1325 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr17n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr17n");

1326 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr20n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr20n");

1327 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr25n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr25n");

1328 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr30n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr30n");

1337 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb18
[] 
U8G_SECTION
(".progmem.u8g_font_osb18");

1338 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb21
[] 
U8G_SECTION
(".progmem.u8g_font_osb21");

1339 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb26
[] 
U8G_SECTION
(".progmem.u8g_font_osb26");

1340 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb29
[] 
U8G_SECTION
(".progmem.u8g_font_osb29");

1341 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb35
[] 
U8G_SECTION
(".progmem.u8g_font_osb35");

1343 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb18r
[] 
U8G_SECTION
(".progmem.u8g_font_osb18r");

1344 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb21r
[] 
U8G_SECTION
(".progmem.u8g_font_osb21r");

1345 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb26r
[] 
U8G_SECTION
(".progmem.u8g_font_osb26r");

1346 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb29r
[] 
U8G_SECTION
(".progmem.u8g_font_osb29r");

1347 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb35r
[] 
U8G_SECTION
(".progmem.u8g_font_osb35r");

1349 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb18n
[] 
U8G_SECTION
(".progmem.u8g_font_osb18n");

1350 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb21n
[] 
U8G_SECTION
(".progmem.u8g_font_osb21n");

1351 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb26n
[] 
U8G_SECTION
(".progmem.u8g_font_osb26n");

1352 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb29n
[] 
U8G_SECTION
(".progmem.u8g_font_osb29n");

1353 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb35n
[] 
U8G_SECTION
(".progmem.u8g_font_osb35n");

1362 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§18
[] 
U8G_SECTION
(".progmem.u8g_font_osr18");

1363 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§21
[] 
U8G_SECTION
(".progmem.u8g_font_osr21");

1364 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§26
[] 
U8G_SECTION
(".progmem.u8g_font_osr26");

1365 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§29
[] 
U8G_SECTION
(".progmem.u8g_font_osr29");

1366 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§35
[] 
U8G_SECTION
(".progmem.u8g_font_osr35");

1368 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§18r
[] 
U8G_SECTION
(".progmem.u8g_font_osr18r");

1369 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§21r
[] 
U8G_SECTION
(".progmem.u8g_font_osr21r");

1370 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§26r
[] 
U8G_SECTION
(".progmem.u8g_font_osr26r");

1371 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§29r
[] 
U8G_SECTION
(".progmem.u8g_font_osr29r");

1372 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§35r
[] 
U8G_SECTION
(".progmem.u8g_font_osr35r");

1374 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§18n
[] 
U8G_SECTION
(".progmem.u8g_font_osr18n");

1375 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§21n
[] 
U8G_SECTION
(".progmem.u8g_font_osr21n");

1376 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§26n
[] 
U8G_SECTION
(".progmem.u8g_font_osr26n");

1377 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§29n
[] 
U8G_SECTION
(".progmem.u8g_font_osr29n");

1378 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§35n
[] 
U8G_SECTION
(".progmem.u8g_font_osr35n");

1384 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_18_19
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_18_19");

1385 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_72_73
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_72_73");

1386 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_67_75");

1387 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_76
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_76");

1388 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_77
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_77");

1389 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_78_79
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_78_79");

1390 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_86
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_86");

1391 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t
[] 
U8G_SECTION
(".progmem.u8g_font_unifont");

1392 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄å
[] 
U8G_SECTION
(".progmem.u8g_font_unifontr");

1393 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_0_8
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_0_8");

1394 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_2_3
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_2_3");

1395 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_4_5
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_4_5");

1396 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_8_9
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_8_9");

1397 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_12_13
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_12_13");

1402 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_03b
[] 
U8G_SECTION
(".progmem.u8g_font_04b_03b");

1403 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_03bn
[] 
U8G_SECTION
(".progmem.u8g_font_04b_03bn");

1404 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_03br
[] 
U8G_SECTION
(".progmem.u8g_font_04b_03br");

1405 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_03
[] 
U8G_SECTION
(".progmem.u8g_font_04b_03");

1406 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_03n
[] 
U8G_SECTION
(".progmem.u8g_font_04b_03n");

1407 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_03r
[] 
U8G_SECTION
(".progmem.u8g_font_04b_03r");

1408 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_24
[] 
U8G_SECTION
(".progmem.u8g_font_04b_24");

1409 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_24n
[] 
U8G_SECTION
(".progmem.u8g_font_04b_24n");

1410 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_24r
[] 
U8G_SECTION
(".progmem.u8g_font_04b_24r");

1414 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_‹gv01
[] 
U8G_SECTION
(".progmem.u8g_font_orgv01");

1415 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_‹gv01r
[] 
U8G_SECTION
(".progmem.u8g_font_orgv01r");

1416 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_‹gv01n
[] 
U8G_SECTION
(".progmem.u8g_font_orgv01n");

1418 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fixed_v0
[] 
U8G_SECTION
(".progmem.u8g_font_fixed_v0");

1419 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fixed_v0r
[] 
U8G_SECTION
(".progmem.u8g_font_fixed_v0r");

1420 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fixed_v0n
[] 
U8G_SECTION
(".progmem.u8g_font_fixed_v0n");

1422 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_çssb
[] 
U8G_SECTION
(".progmem.u8g_font_tpssb");

1423 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_çssbr
[] 
U8G_SECTION
(".progmem.u8g_font_tpssbr");

1424 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_çssbn
[] 
U8G_SECTION
(".progmem.u8g_font_tpssbn");

1426 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_çss
[] 
U8G_SECTION
(".progmem.u8g_font_tpss");

1427 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_çs§
[] 
U8G_SECTION
(".progmem.u8g_font_tpssr");

1428 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_çs¢
[] 
U8G_SECTION
(".progmem.u8g_font_tpssn");

1432 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_‰ìdoomr25n
[] 
U8G_SECTION
(".progmem.u8g_font_freedoomr25n");

1433 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_‰ìdoomr10r
[] 
U8G_SECTION
(".progmem.u8g_font_freedoomr10r");

1436 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB08
[] 
U8G_SECTION
(".progmem.u8g_font_courB08");

1437 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB08r
[] 
U8G_SECTION
(".progmem.u8g_font_courB08r");

1438 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB10
[] 
U8G_SECTION
(".progmem.u8g_font_courB10");

1439 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB10r
[] 
U8G_SECTION
(".progmem.u8g_font_courB10r");

1440 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB12
[] 
U8G_SECTION
(".progmem.u8g_font_courB12");

1441 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB12r
[] 
U8G_SECTION
(".progmem.u8g_font_courB12r");

1442 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB14
[] 
U8G_SECTION
(".progmem.u8g_font_courB14");

1443 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB14r
[] 
U8G_SECTION
(".progmem.u8g_font_courB14r");

1444 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB18
[] 
U8G_SECTION
(".progmem.u8g_font_courB18");

1445 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB18r
[] 
U8G_SECTION
(".progmem.u8g_font_courB18r");

1446 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB24
[] 
U8G_SECTION
(".progmem.u8g_font_courB24");

1447 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB24r
[] 
U8G_SECTION
(".progmem.u8g_font_courB24r");

1448 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB24n
[] 
U8G_SECTION
(".progmem.u8g_font_courB24n");

1450 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR08
[] 
U8G_SECTION
(".progmem.u8g_font_courR08");

1451 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR08r
[] 
U8G_SECTION
(".progmem.u8g_font_courR08r");

1452 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR10
[] 
U8G_SECTION
(".progmem.u8g_font_courR10");

1453 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR10r
[] 
U8G_SECTION
(".progmem.u8g_font_courR10r");

1454 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR12
[] 
U8G_SECTION
(".progmem.u8g_font_courR12");

1455 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR12r
[] 
U8G_SECTION
(".progmem.u8g_font_courR12r");

1456 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR14
[] 
U8G_SECTION
(".progmem.u8g_font_courR14");

1457 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR14r
[] 
U8G_SECTION
(".progmem.u8g_font_courR14r");

1458 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR18
[] 
U8G_SECTION
(".progmem.u8g_font_courR18");

1459 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR18r
[] 
U8G_SECTION
(".progmem.u8g_font_courR18r");

1460 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR24
[] 
U8G_SECTION
(".progmem.u8g_font_courR24");

1461 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR24r
[] 
U8G_SECTION
(".progmem.u8g_font_courR24r");

1462 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR24n
[] 
U8G_SECTION
(".progmem.u8g_font_courR24n");

1464 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB08
[] 
U8G_SECTION
(".progmem.u8g_font_helvB08");

1465 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB08r
[] 
U8G_SECTION
(".progmem.u8g_font_helvB08r");

1466 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB10
[] 
U8G_SECTION
(".progmem.u8g_font_helvB10");

1467 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB10r
[] 
U8G_SECTION
(".progmem.u8g_font_helvB10r");

1468 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB12
[] 
U8G_SECTION
(".progmem.u8g_font_helvB12");

1469 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB12r
[] 
U8G_SECTION
(".progmem.u8g_font_helvB12r");

1470 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB14
[] 
U8G_SECTION
(".progmem.u8g_font_helvB14");

1471 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB14r
[] 
U8G_SECTION
(".progmem.u8g_font_helvB14r");

1472 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB18
[] 
U8G_SECTION
(".progmem.u8g_font_helvB18");

1473 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB18r
[] 
U8G_SECTION
(".progmem.u8g_font_helvB18r");

1474 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB24
[] 
U8G_SECTION
(".progmem.u8g_font_helvB24");

1475 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB24r
[] 
U8G_SECTION
(".progmem.u8g_font_helvB24r");

1476 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB24n
[] 
U8G_SECTION
(".progmem.u8g_font_helvB24n");

1478 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR08
[] 
U8G_SECTION
(".progmem.u8g_font_helvR08");

1479 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR08r
[] 
U8G_SECTION
(".progmem.u8g_font_helvR08r");

1480 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR10
[] 
U8G_SECTION
(".progmem.u8g_font_helvR10");

1481 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR10r
[] 
U8G_SECTION
(".progmem.u8g_font_helvR10r");

1482 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR12
[] 
U8G_SECTION
(".progmem.u8g_font_helvR12");

1483 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR12r
[] 
U8G_SECTION
(".progmem.u8g_font_helvR12r");

1484 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR14
[] 
U8G_SECTION
(".progmem.u8g_font_helvR14");

1485 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR14r
[] 
U8G_SECTION
(".progmem.u8g_font_helvR14r");

1486 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR18
[] 
U8G_SECTION
(".progmem.u8g_font_helvR18");

1487 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR18r
[] 
U8G_SECTION
(".progmem.u8g_font_helvR18r");

1488 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR24
[] 
U8G_SECTION
(".progmem.u8g_font_helvR24");

1489 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR24r
[] 
U8G_SECTION
(".progmem.u8g_font_helvR24r");

1490 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR24n
[] 
U8G_SECTION
(".progmem.u8g_font_helvR24n");

1492 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB08
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB08");

1493 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB08r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB08r");

1494 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB10
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB10");

1495 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB10r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB10r");

1496 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB12
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB12");

1497 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB12r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB12r");

1498 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB14
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB14");

1499 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB14r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB14r");

1500 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB18
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB18");

1501 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB18r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB18r");

1502 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB24
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB24");

1503 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB24r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB24r");

1504 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB24n
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB24n");

1506 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR08
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR08");

1507 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR08r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR08r");

1508 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR10
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR10");

1509 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR10r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR10r");

1510 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR12
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR12");

1511 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR12r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR12r");

1512 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR14
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR14");

1513 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR14r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR14r");

1514 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR18
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR18");

1515 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR18r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR18r");

1516 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR24
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR24");

1517 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR24r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR24r");

1518 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR24n
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR24n");

1520 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb08
[] 
U8G_SECTION
(".progmem.u8g_font_symb08");

1521 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb08r
[] 
U8G_SECTION
(".progmem.u8g_font_symb08r");

1522 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb10
[] 
U8G_SECTION
(".progmem.u8g_font_symb10");

1523 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb10r
[] 
U8G_SECTION
(".progmem.u8g_font_symb10r");

1524 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb12
[] 
U8G_SECTION
(".progmem.u8g_font_symb12");

1525 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb12r
[] 
U8G_SECTION
(".progmem.u8g_font_symb12r");

1526 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb14
[] 
U8G_SECTION
(".progmem.u8g_font_symb14");

1527 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb14r
[] 
U8G_SECTION
(".progmem.u8g_font_symb14r");

1528 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb18
[] 
U8G_SECTION
(".progmem.u8g_font_symb18");

1529 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb18r
[] 
U8G_SECTION
(".progmem.u8g_font_symb18r");

1530 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb24
[] 
U8G_SECTION
(".progmem.u8g_font_symb24");

1531 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb24r
[] 
U8G_SECTION
(".progmem.u8g_font_symb24r");

1533 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB08
[] 
U8G_SECTION
(".progmem.u8g_font_timB08");

1534 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB08r
[] 
U8G_SECTION
(".progmem.u8g_font_timB08r");

1535 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB10
[] 
U8G_SECTION
(".progmem.u8g_font_timB10");

1536 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB10r
[] 
U8G_SECTION
(".progmem.u8g_font_timB10r");

1537 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB12
[] 
U8G_SECTION
(".progmem.u8g_font_timB12");

1538 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB12r
[] 
U8G_SECTION
(".progmem.u8g_font_timB12r");

1539 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB14
[] 
U8G_SECTION
(".progmem.u8g_font_timB14");

1540 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB14r
[] 
U8G_SECTION
(".progmem.u8g_font_timB14r");

1541 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB18
[] 
U8G_SECTION
(".progmem.u8g_font_timB18");

1542 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB18r
[] 
U8G_SECTION
(".progmem.u8g_font_timB18r");

1543 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB24
[] 
U8G_SECTION
(".progmem.u8g_font_timB24");

1544 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB24r
[] 
U8G_SECTION
(".progmem.u8g_font_timB24r");

1545 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB24n
[] 
U8G_SECTION
(".progmem.u8g_font_timB24n");

1547 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR08
[] 
U8G_SECTION
(".progmem.u8g_font_timR08");

1548 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR08r
[] 
U8G_SECTION
(".progmem.u8g_font_timR08r");

1549 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR10
[] 
U8G_SECTION
(".progmem.u8g_font_timR10");

1550 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR10r
[] 
U8G_SECTION
(".progmem.u8g_font_timR10r");

1551 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR12
[] 
U8G_SECTION
(".progmem.u8g_font_timR12");

1552 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR12r
[] 
U8G_SECTION
(".progmem.u8g_font_timR12r");

1553 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR14
[] 
U8G_SECTION
(".progmem.u8g_font_timR14");

1554 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR14r
[] 
U8G_SECTION
(".progmem.u8g_font_timR14r");

1555 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR18
[] 
U8G_SECTION
(".progmem.u8g_font_timR18");

1556 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR18r
[] 
U8G_SECTION
(".progmem.u8g_font_timR18r");

1557 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR24
[] 
U8G_SECTION
(".progmem.u8g_font_timR24");

1558 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR24r
[] 
U8G_SECTION
(".progmem.u8g_font_timR24r");

1559 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR24n
[] 
U8G_SECTION
(".progmem.u8g_font_timR24n");

1563 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_p01ty≥
[] 
U8G_SECTION
(".progmem.u8g_font_p01type");

1564 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_p01ty≥r
[] 
U8G_SECTION
(".progmem.u8g_font_p01typer");

1565 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_p01ty≥n
[] 
U8G_SECTION
(".progmem.u8g_font_p01typen");

1567 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_luˇsf⁄t_Æã∫©e
[] 
U8G_SECTION
(".progmem.u8g_font_lucasfont_alternate");

1568 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_luˇsf⁄t_Æã∫©î
[] 
U8G_SECTION
(".progmem.u8g_font_lucasfont_alternater");

1569 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_luˇsf⁄t_Æã∫©í
[] 
U8G_SECTION
(".progmem.u8g_font_lucasfont_alternaten");

1575 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_chikôa
[] 
U8G_SECTION
(".progmem.u8g_font_chikita");

1576 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_chikô¨
[] 
U8G_SECTION
(".progmem.u8g_font_chikitar");

1577 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_chikô™
[] 
U8G_SECTION
(".progmem.u8g_font_chikitan");

1579 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_pixñÀ_mi¸o
[] 
U8G_SECTION
(".progmem.u8g_font_pixelle_micro");

1580 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_pixñÀ_mi¸‹
[] 
U8G_SECTION
(".progmem.u8g_font_pixelle_micror");

1581 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_pixñÀ_mi¸⁄
[] 
U8G_SECTION
(".progmem.u8g_font_pixelle_micron");

1583 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_åixñ_squ¨e
[] 
U8G_SECTION
(".progmem.u8g_font_trixel_square");

1584 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_åixñ_squ¨î
[] 
U8G_SECTION
(".progmem.u8g_font_trixel_squarer");

1585 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_åixñ_squ¨í
[] 
U8G_SECTION
(".progmem.u8g_font_trixel_squaren");

1587 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_robŸ_de_núo
[] 
U8G_SECTION
(".progmem.u8g_font_robot_de_niro");

1588 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_robŸ_de_nú‹
[] 
U8G_SECTION
(".progmem.u8g_font_robot_de_niror");

1589 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_robŸ_de_nú⁄
[] 
U8G_SECTION
(".progmem.u8g_font_robot_de_niron");

1591 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_baby
[] 
U8G_SECTION
(".progmem.u8g_font_baby");

1592 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_babyr
[] 
U8G_SECTION
(".progmem.u8g_font_babyr");

1593 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_babyn
[] 
U8G_SECTION
(".progmem.u8g_font_babyn");

1595 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_blù„°_07
[] 
U8G_SECTION
(".progmem.u8g_font_blipfest_07");

1596 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_blù„°_07r
[] 
U8G_SECTION
(".progmem.u8g_font_blipfest_07r");

1597 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_blù„°_07n
[] 
U8G_SECTION
(".progmem.u8g_font_blipfest_07n");

1599 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x10_m¨lö
[] 
U8G_SECTION
(".progmem.u8g_font_6x10_marlin");

1600 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x9
[] 
U8G_SECTION
(".progmem.u8g_font_6x9");

1602 #ifde‡
__˝lu•lus


	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_bitmap.c

37 
	~"u8g.h
"

39 
	$u8g_DøwHBôm≠
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, c⁄° 
uöt8_t
 *
bôm≠
)

41  
˙t
 > 0 )

43 
	`u8g_Døw8Pixñ
(
u8g
, 
x
, 
y
, 0, *
bôm≠
);

44 
bôm≠
++;

45 
˙t
--;

46 
x
+=8;

48 
	}
}

50 
	$u8g_DøwBôm≠
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, u8g_uöt_à
h
, c⁄° 
uöt8_t
 *
bôm≠
)

52 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
˙t
*8, 
h
) == 0 )

54  
h
 > 0 )

56 
	`u8g_DøwHBôm≠
(
u8g
, 
x
, 
y
, 
˙t
, 
bôm≠
);

57 
bôm≠
 +
˙t
;

58 
y
++;

59 
h
--;

61 
	}
}

64 
	$u8g_DøwHBôm≠P
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
)

66  
˙t
 > 0 )

68 
	`u8g_Døw8Pixñ
(
u8g
, 
x
, 
y
, 0, 
	`u8g_pgm_ªad
(
bôm≠
));

69 
bôm≠
++;

70 
˙t
--;

71 
x
+=8;

73 
	}
}

75 
	$u8g_DøwBôm≠P
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, u8g_uöt_à
h
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
)

77 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
˙t
*8, 
h
) == 0 )

79  
h
 > 0 )

81 
	`u8g_DøwHBôm≠P
(
u8g
, 
x
, 
y
, 
˙t
, 
bôm≠
);

82 
bôm≠
 +
˙t
;

83 
y
++;

84 
h
--;

86 
	}
}

90 
	$u8g_DøwHXBM
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, c⁄° 
uöt8_t
 *
bôm≠
)

92 
uöt8_t
 
d
;

93 
x
+=7;

94  
w
 >= 8 )

96 
	`u8g_Døw8Pixñ
(
u8g
, 
x
, 
y
, 2, *
bôm≠
);

97 
bôm≠
++;

98 
w
-= 8;

99 
x
+=8;

101 i‡–
w
 > 0 )

103 
d
 = *
bôm≠
;

104 
x
 -= 7;

107 i‡–
d
 & 1 )

108 
	`u8g_DøwPixñ
(
u8g
, 
x
, 
y
);

109 
x
++;

110 
w
--;

111 
d
 >>= 1;

112 }  
w
 > 0 );

114 
	}
}

116 
	$u8g_DøwXBM
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, c⁄° 
uöt8_t
 *
bôm≠
)

118 
u8g_uöt_t
 
b
;

119 
b
 = 
w
;

120 
b
 += 7;

121 
b
 >>= 3;

123 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
w
, 
h
) == 0 )

126  
h
 > 0 )

128 
	`u8g_DøwHXBM
(
u8g
, 
x
, 
y
, 
w
, 
bôm≠
);

129 
bôm≠
 +
b
;

130 
y
++;

131 
h
--;

133 
	}
}

135 
	$u8g_DøwHXBMP
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
)

137 
uöt8_t
 
d
;

138 
x
+=7;

139  
w
 >= 8 )

141 
	`u8g_Døw8Pixñ
(
u8g
, 
x
, 
y
, 2, 
	`u8g_pgm_ªad
(
bôm≠
));

142 
bôm≠
++;

143 
w
-= 8;

144 
x
+=8;

146 i‡–
w
 > 0 )

148 
d
 = 
	`u8g_pgm_ªad
(
bôm≠
);

149 
x
 -= 7;

152 i‡–
d
 & 1 )

153 
	`u8g_DøwPixñ
(
u8g
, 
x
, 
y
);

154 
x
++;

155 
w
--;

156 
d
 >>= 1;

157 }  
w
 > 0 );

159 
	}
}

161 
	$u8g_DøwXBMP
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
)

163 
u8g_uöt_t
 
b
;

164 
b
 = 
w
;

165 
b
 += 7;

166 
b
 >>= 3;

168 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
w
, 
h
) == 0 )

170  
h
 > 0 )

172 
	`u8g_DøwHXBMP
(
u8g
, 
x
, 
y
, 
w
, 
bôm≠
);

173 
bôm≠
 +
b
;

174 
y
++;

175 
h
--;

177 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_circle.c

43 
	~"u8g.h
"

45 #ifde‡
OLD_CODE


47 
	$cúc_uµîRight
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
) {

48 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
x
, 
y0
 - 
y
);

49 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
y
, 
y0
 - 
x
);

50 
	}
}

52 
	$cúc_uµîLe·
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
) {

53 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
x
, 
y0
 - 
y
);

54 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
y
, 
y0
 - 
x
);

55 
	}
}

57 
	$cúc_lowîRight
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
) {

58 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
x
, 
y0
 + 
y
);

59 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
y
, 
y0
 + 
x
);

60 
	}
}

62 
	$cúc_lowîLe·
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
) {

63 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
x
, 
y0
 + 
y
);

64 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
y
, 
y0
 + 
x
);

65 
	}
}

67 
	$cúc_Æl
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
) {

68 
	`cúc_uµîRight
(
u8g
, 
x
, 
y
, 
x0
, 
y0
);

69 
	`cúc_uµîLe·
(
u8g
, 
x
, 
y
, 
x0
, 
y0
);

70 
	`cúc_lowîRight
(
u8g
, 
x
, 
y
, 
x0
, 
y0
);

71 
	`cúc_lowîLe·
(
u8g
, 
x
, 
y
, 
x0
, 
y0
);

72 
	}
}

74 
	$u8g_DøwEmpCúc
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
)

76 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x0
-
ød
-1, 
y0
-rad-1, 2*rad+1, 2*rad+1) == 0)

79 
f
 = 1 - 
ød
;

80 
ddF_x
 = 1;

81 
ddF_y
 = -2*
ød
;

82 
uöt8_t
 
x
 = 0;

83 
uöt8_t
 
y
 = 
ød
;

85 –*
cúc_utû
 )(
u8g_t
 *, 
u8g_uöt_t
, u8g_uint_t, u8g_uint_t, u8g_uint_t);

87 
›ti⁄
)

89 
U8G_CIRC_UPPER_RIGHT
:

90 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
 - 
ød
);

91 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
ød
, 
y0
);

92 
cúc_utû
 = 
cúc_uµîRight
;

94 
U8G_CIRC_UPPER_LEFT
:

95 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
 - 
ød
);

96 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
ød
, 
y0
);

97 
cúc_utû
 = 
cúc_uµîLe·
;

99 
U8G_CIRC_LOWER_RIGHT
:

100 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
 + 
ød
);

101 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
ød
, 
y0
);

102 
cúc_utû
 = 
cúc_lowîRight
;

104 
U8G_CIRC_LOWER_LEFT
:

105 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
 + 
ød
);

106 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
ød
, 
y0
);

107 
cúc_utû
 = 
cúc_lowîLe·
;

110 
U8G_CIRC_ALL
:

111 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
 + 
ød
);

112 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
 - 
ød
);

113 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
ød
, 
y0
);

114 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
ød
, 
y0
);

115 
cúc_utû
 = 
cúc_Æl
;

119  
x
 < 
y
 )

121 if(
f
 >= 0)

123 
y
--;

124 
ddF_y
 += 2;

125 
f
 +
ddF_y
;

127 
x
++;

128 
ddF_x
 += 2;

129 
f
 +
ddF_x
;

131 
	`cúc_utû
(
u8g
, 
x
, 
y
, 
x0
, 
y0
);

133 
	}
}

136 
	$u8g_DøwFûlCúc
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
)

138 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x0
-
ød
-1, 
y0
-rad-1, 2*rad+1, 2*rad+1) == 0)

141 
f
 = 1 - 
ød
;

142 
ddF_x
 = 1;

143 
ddF_y
 = -2*
ød
;

144 
uöt8_t
 
x
 = 0;

145 
uöt8_t
 
y
 = 
ød
;

150 i‡(
›ti⁄
 =
U8G_CIRC_UPPER_LEFT
 || o±i⁄ =
U8G_CIRC_UPPER_RIGHT
) {

151 
	`u8g_DøwVLöe
(
u8g
, 
x0
, 
y0
 - 
ød
,Ñad+1);

153 i‡(
›ti⁄
 =
U8G_CIRC_LOWER_LEFT
 || o±i⁄ =
U8G_CIRC_LOWER_RIGHT
) {

154 
	`u8g_DøwVLöe
(
u8g
, 
x0
, 
y0
, 
ød
+1);

157 
	`u8g_DøwVLöe
(
u8g
, 
x0
, 
y0
 - 
ød
, 2*rad+1);

160  
x
 < 
y
 )

162 if(
f
 >= 0)

164 
y
--;

165 
ddF_y
 += 2;

166 
f
 +
ddF_y
;

168 
x
++;

169 
ddF_x
 += 2;

170 
f
 +
ddF_x
;

174 
›ti⁄
)

176 
U8G_CIRC_UPPER_RIGHT
:

177 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
x
, 
y0
-
y
, y+1);

178 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
y
, 
y0
-
x
, x+1);

180 
U8G_CIRC_UPPER_LEFT
:

181 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
x
, 
y0
-
y
, y+1);

182 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
y
, 
y0
-
x
, x+1);

184 
U8G_CIRC_LOWER_RIGHT
:

185 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
x
, 
y0
, 
y
+1);

186 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
y
, 
y0
, 
x
+1);

188 
U8G_CIRC_LOWER_LEFT
:

189 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
x
, 
y0
, 
y
+1);

190 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
y
, 
y0
, 
x
+1);

192 
U8G_CIRC_ALL
:

193 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
x
, 
y0
-
y
, 2*y+1);

194 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
x
, 
y0
-
y
, 2*y+1);

195 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
y
, 
y0
-
x
, 2*x+1);

196 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
y
, 
y0
-
x
, 2*x+1);

200 
	}
}

206 
	$u8g_døw_cú˛e_£˘i⁄
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
, 
uöt8_t
 
›ti⁄
Ë
U8G_NOINLINE
;

208 
	$u8g_døw_cú˛e_£˘i⁄
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
, 
uöt8_t
 
›ti⁄
)

211 i‡–
›ti⁄
 & 
U8G_DRAW_UPPER_RIGHT
 )

213 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
x
, 
y0
 - 
y
);

214 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
y
, 
y0
 - 
x
);

218 i‡–
›ti⁄
 & 
U8G_DRAW_UPPER_LEFT
 )

220 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
x
, 
y0
 - 
y
);

221 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
y
, 
y0
 - 
x
);

225 i‡–
›ti⁄
 & 
U8G_DRAW_LOWER_RIGHT
 )

227 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
x
, 
y0
 + 
y
);

228 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
y
, 
y0
 + 
x
);

232 i‡–
›ti⁄
 & 
U8G_DRAW_LOWER_LEFT
 )

234 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
x
, 
y0
 + 
y
);

235 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
y
, 
y0
 + 
x
);

237 
	}
}

239 
	$u8g_døw_cú˛e
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
)

241 
u8g_öt_t
 
f
;

242 
u8g_öt_t
 
ddF_x
;

243 
u8g_öt_t
 
ddF_y
;

244 
u8g_uöt_t
 
x
;

245 
u8g_uöt_t
 
y
;

247 
f
 = 1;

248 
f
 -
ød
;

249 
ddF_x
 = 1;

250 
ddF_y
 = 0;

251 
ddF_y
 -
ød
;

252 
ddF_y
 *= 2;

253 
x
 = 0;

254 
y
 = 
ød
;

256 
	`u8g_døw_cú˛e_£˘i⁄
(
u8g
, 
x
, 
y
, 
x0
, 
y0
, 
›ti⁄
);

258  
x
 < 
y
 )

260 i‡(
f
 >= 0)

262 
y
--;

263 
ddF_y
 += 2;

264 
f
 +
ddF_y
;

266 
x
++;

267 
ddF_x
 += 2;

268 
f
 +
ddF_x
;

270 
	`u8g_døw_cú˛e_£˘i⁄
(
u8g
, 
x
, 
y
, 
x0
, 
y0
, 
›ti⁄
);

272 
	}
}

274 
	$u8g_DøwCú˛e
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
)

278 
u8g_uöt_t
 
ødp
, 
ødp2
;

280 
ødp
 = 
ød
;

281 
ødp
++;

282 
ødp2
 = 
ødp
;

283 
ødp2
 *= 2;

285 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x0
-
ødp
, 
y0
-ødp, 
ødp2
,Ñadp2) == 0)

290 
	`u8g_døw_cú˛e
(
u8g
, 
x0
, 
y0
, 
ød
, 
›ti⁄
);

291 
	}
}

293 
	$u8g_døw_disc_£˘i⁄
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
, 
uöt8_t
 
›ti⁄
Ë
U8G_NOINLINE
;

295 
	$u8g_døw_disc_£˘i⁄
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
, 
uöt8_t
 
›ti⁄
)

298 i‡–
›ti⁄
 & 
U8G_DRAW_UPPER_RIGHT
 )

300 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
x
, 
y0
-
y
, y+1);

301 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
y
, 
y0
-
x
, x+1);

305 i‡–
›ti⁄
 & 
U8G_DRAW_UPPER_LEFT
 )

307 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
x
, 
y0
-
y
, y+1);

308 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
y
, 
y0
-
x
, x+1);

312 i‡–
›ti⁄
 & 
U8G_DRAW_LOWER_RIGHT
 )

314 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
x
, 
y0
, 
y
+1);

315 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
y
, 
y0
, 
x
+1);

319 i‡–
›ti⁄
 & 
U8G_DRAW_LOWER_LEFT
 )

321 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
x
, 
y0
, 
y
+1);

322 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
y
, 
y0
, 
x
+1);

324 
	}
}

326 
	$u8g_døw_disc
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
)

328 
u8g_öt_t
 
f
;

329 
u8g_öt_t
 
ddF_x
;

330 
u8g_öt_t
 
ddF_y
;

331 
u8g_uöt_t
 
x
;

332 
u8g_uöt_t
 
y
;

334 
f
 = 1;

335 
f
 -
ød
;

336 
ddF_x
 = 1;

337 
ddF_y
 = 0;

338 
ddF_y
 -
ød
;

339 
ddF_y
 *= 2;

340 
x
 = 0;

341 
y
 = 
ød
;

343 
	`u8g_døw_disc_£˘i⁄
(
u8g
, 
x
, 
y
, 
x0
, 
y0
, 
›ti⁄
);

345  
x
 < 
y
 )

347 i‡(
f
 >= 0)

349 
y
--;

350 
ddF_y
 += 2;

351 
f
 +
ddF_y
;

353 
x
++;

354 
ddF_x
 += 2;

355 
f
 +
ddF_x
;

357 
	`u8g_døw_disc_£˘i⁄
(
u8g
, 
x
, 
y
, 
x0
, 
y0
, 
›ti⁄
);

359 
	}
}

361 
	$u8g_DøwDisc
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
)

365 
u8g_uöt_t
 
ødp
, 
ødp2
;

367 
ødp
 = 
ød
;

368 
ødp
++;

369 
ødp2
 = 
ødp
;

370 
ødp2
 *= 2;

372 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x0
-
ødp
, 
y0
-ødp, 
ødp2
,Ñadp2) == 0)

377 
	`u8g_døw_disc
(
u8g
, 
x0
, 
y0
, 
ød
, 
›ti⁄
);

378 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_clip.c

59 
	~"u8g.h
"

61 #ifde‡
__GNUC__


62 
	#U8G_ALWAYS_INLINE
 
	`__©åibuã__
((
Æways_ölöe
))

	)

64 
	#U8G_ALWAYS_INLINE


	)

77 #ifde‡
OLD_CODE_WHICH_IS_TOO_SLOW


78 
uöt8_t
 
	$u8g_is_öãr£˘i⁄_boﬁón
(
u8g_uöt_t
 
a0
, u8g_uöt_à
a1
, u8g_uöt_à
v0
, u8g_uöt_à
v1
)

80 
uöt8_t
 
c1
, 
c2
, 
c3
, 
tmp
;

81 
c1
 = 
v0
 <
a1
;

82 
c2
 = 
v1
 >
a0
;

83 
c3
 = 
v0
 > 
v1
;

85 
tmp
 = 
c1
;

86 
c1
 &
c2
;

87 
c2
 &
c3
;

88 
c3
 &
tmp
;

89 
c1
 |
c2
;

90 
c1
 |
c3
;

91  
c1
 & 1;

92 
	}
}

95 
	#U8G_IS_INTERSECTION_MACRO
(
a0
,
a1
,
v0
,
v1
Ë((
uöt8_t
)–(v0Ë<◊1ËË? ( ( (v1Ë>◊0ËË? ( 1 ) : ( (v0Ë> (v1ËËË: ( ( (v1Ë>◊0ËË? ( (v0Ë> (v1ËË: ( 0 ) ))

	)

97 
uöt8_t
 
	$u8g_is_öãr£˘i⁄_decisi⁄_åì
(
u8g_uöt_t
 
a0
, u8g_uöt_à
a1
, u8g_uöt_à
v0
, u8g_uöt_à
v1
Ë
U8G_ALWAYS_INLINE
;

98 
uöt8_t
 
	$u8g_is_öãr£˘i⁄_decisi⁄_åì
(
u8g_uöt_t
 
a0
, u8g_uöt_à
a1
, u8g_uöt_à
v0
, u8g_uöt_à
v1
)

102 i‡–
v0
 <
a1
 )

104 i‡–
v1
 >
a0
 )

110 i‡–
v0
 > 
v1
 )

122 i‡–
v1
 >
a0
 )

124 i‡–
v0
 > 
v1
 )

138 
	}
}

141 
uöt8_t
 
	$u8g_IsBBXI¡î£˘i⁄
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
)

143 
u8g_uöt_t
 
tmp
;

144 
tmp
 = 
y
;

145 
tmp
 +
h
;

146 
tmp
--;

147 i‡–
	`u8g_is_öãr£˘i⁄_decisi⁄_åì
(
u8g
->
cuºít_∑ge
.
y0
, u8g->cuºít_∑ge.
y1
, 
y
, 
tmp
) == 0 )

150 
tmp
 = 
x
;

151 
tmp
 +
w
;

152 
tmp
--;

153  
	`u8g_is_öãr£˘i⁄_decisi⁄_åì
(
u8g
->
cuºít_∑ge
.
x0
, u8g->cuºít_∑ge.
x1
, 
x
, 
tmp
);

154 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_api.c

37 
	~"u8g.h
"

39 
uöt8_t
 
	$u8g_InôCom
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

41  
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_INIT
, 0, 
NULL
);

42 
	}
}

44 
	$u8g_St›Com
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

46 
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_STOP
, 0, 
NULL
);

47 
	}
}

50 
	$u8g_SëChùSñe˘
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
cs
)

52 
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_CHIP_SELECT
, 
cs
, 
NULL
);

53 
	}
}

55 
	$u8g_SëRe£tLow
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

57 
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_RESET
, 0, 
NULL
);

58 
	}
}

60 
	$u8g_SëRe£tHigh
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

62 
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_RESET
, 1, 
NULL
);

63 
	}
}

66 
	$u8g_SëAddªss
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
addªss
)

68 
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_ADDRESS
, 
addªss
, 
NULL
);

69 
	}
}

71 
uöt8_t
 
	$u8g_WrôeByã
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
vÆ
)

73  
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_WRITE_BYTE
, 
vÆ
, 
NULL
);

74 
	}
}

76 
uöt8_t
 
	$u8g_WrôeSequí˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
˙t
, uöt8_à*
£q
)

78  
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_WRITE_SEQ
, 
˙t
, 
£q
);

79 
	}
}

81 
uöt8_t
 
	$u8g_WrôeSequí˚P
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
˙t
, c⁄° uöt8_à*
£q
)

83  
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_WRITE_SEQ_P
, 
˙t
, (*)
£q
);

84 
	}
}

106 
uöt8_t
 
	$u8g_WrôeEscSeqP
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, c⁄° 
uöt8_t
 *
esc_£q
)

108 
uöt8_t
 
is_esˇ≥
 = 0;

109 
uöt8_t
 
vÆue
;

112 
vÆue
 = 
	`u8g_pgm_ªad
(
esc_£q
);

113 i‡–
is_esˇ≥
 == 0 )

115 i‡–
vÆue
 != 255 )

117 i‡–
	`u8g_WrôeByã
(
u8g
, 
dev
, 
vÆue
) == 0 )

122 
is_esˇ≥
 = 1;

127 i‡–
vÆue
 == 255 )

129 i‡–
	`u8g_WrôeByã
(
u8g
, 
dev
, 
vÆue
) == 0 )

132 i‡–
vÆue
 == 254 )

136 i‡–
vÆue
 >= 0x0f0 )

140 i‡–
vÆue
 >= 0xe0 )

142 
	`u8g_SëAddªss
(
u8g
, 
dev
, 
vÆue
 & 0x0f);

144 i‡–
vÆue
 >= 0xd0 )

146 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 
vÆue
 & 0x0f);

148 i‡–
vÆue
 >= 0xc0 )

150 
	`u8g_SëRe£tLow
(
u8g
, 
dev
);

151 
vÆue
 &= 0x0f;

152 
vÆue
 <<= 4;

153 
vÆue
+=2;

154 
	`u8g_Dñay
(
vÆue
);

155 
	`u8g_SëRe£tHigh
(
u8g
, 
dev
);

156 
	`u8g_Dñay
(
vÆue
);

158 i‡–
vÆue
 >= 0xbe )

163 i‡–
vÆue
 <= 127 )

165 
	`u8g_Dñay
(
vÆue
);

167 
is_esˇ≥
 = 0;

169 
esc_£q
++;

172 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_api_16gr.c

41 
	~"u8g.h
"

46 
uöt8_t
 
	$u8g_WrôeByãBWTo16GrDevi˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
b
)

48 
uöt8_t
 
buf
[4];

49 
uöt8_t
 
m≠
[4] = { 0, 0x00f, 0x0f0, 0x0ff };

50 
buf
 [3] = 
m≠
[
b
 & 3];

51 
b
>>=2;

52 
buf
 [2] = 
m≠
[
b
 & 3];

53 
b
>>=2;

54 
buf
 [1] = 
m≠
[
b
 & 3];

55 
b
>>=2;

56 
buf
 [0] = 
m≠
[
b
 & 3];

57  
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_WRITE_SEQ
, 4, 
buf
);

58 
	}
}

60 
uöt8_t
 
	$u8g_WrôeSequí˚BWTo16GrDevi˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
˙t
, uöt8_à*
±r
)

64 i‡–
	`u8g_WrôeByãBWTo16GrDevi˚
(
u8g
, 
dev
, *
±r
++) == 0 )

66 
˙t
--;

67 }  
˙t
 != 0 );

69 
	}
}

72 
uöt8_t
 
	$u8g_WrôeByã4LTo16GrDevi˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
b
)

76 
uöt8_t
 
m≠
[16] = { 0x000, 0x040, 0x0a0, 0x0f0, 0x004, 0x044, 0x0a4, 0x0f4, 0x00a, 0x04a, 0x0aa, 0x0fa, 0x00f, 0x04f, 0x0af, 0x0ff};

77 
uöt8_t
 
bb
;

78 
bb
 = 
b
;

79 
bb
 &= 15;

80 
b
>>=4;

81 
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_WRITE_BYTE
, 
m≠
[
bb
], 
NULL
);

82  
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_WRITE_BYTE
, 
m≠
[
b
], 
NULL
);

83 
	}
}

85 
uöt8_t
 
	$u8g_WrôeSequí˚4LTo16GrDevi˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
˙t
, uöt8_à*
±r
)

89 i‡–
	`u8g_WrôeByã4LTo16GrDevi˚
(
u8g
, 
dev
, *
±r
++) == 0 )

91 
˙t
--;

92 }  
˙t
 != 0 );

94 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_arduino_common.c

39 
	~"u8g.h
"

41 #i‡
deföed
(
ARDUINO
)

43 #i‡
ARDUINO
 < 100

44 
	~<WProgøm.h
>

46 
	~<Arduöo.h
>

49 
	$u8g_com_¨duöo_digôÆ_wrôe
(
u8g_t
 *
u8g
, 
uöt8_t
 
pö_ödex
, uöt8_à
vÆue
)

51 
uöt8_t
 
pö
;

52 
pö
 = 
u8g
->
pö_li°
[
pö_ödex
];

53 i‡–
pö
 !
U8G_PIN_NONE
 )

54 
	`digôÆWrôe
(
pö
, 
vÆue
);

55 
	}
}

58 
	$u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g_t
 *
u8g
)

60 
uöt8_t
 
i
;

62  
i
 = 0; i < 
U8G_PIN_LIST_LEN
-1; i++ )

64 i‡–
u8g
->
pö_li°
[
i
] !
U8G_PIN_NONE
 )

66 
	`pöMode
(
u8g
->
pö_li°
[
i
], 
OUTPUT
);

67 
	`digôÆWrôe
(
u8g
->
pö_li°
[
i
], 
HIGH
);

70 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_arduino_fast_parallel.c

54 
	~"u8g.h
"

56 #i‡ 
deföed
(
ARDUINO
)

58 #i‡
ARDUINO
 < 100

60 
	~<wúög_¥iv©e.h
>

61 
	~<pös_¨duöo.h
>

63 
	~<Arduöo.h
>

67 
	#PIN_D0
 8

	)

68 
	#PIN_D1
 9

	)

69 
	#PIN_D2
 10

	)

70 
	#PIN_D3
 11

	)

71 
	#PIN_D4
 4

	)

72 
	#PIN_D5
 5

	)

73 
	#PIN_D6
 6

	)

74 
	#PIN_D7
 7

	)

76 
	#PIN_CS1
 14

	)

77 
	#PIN_CS2
 15

	)

78 
	#PIN_RW
 16

	)

79 
	#PIN_DI
 17

	)

80 
	#PIN_EN
 18

	)

85 #i‡
deföed
(
__PIC32MX
)

87 vﬁ©ûê
uöt32_t
 *
	gu8g_d©a_p‹t
[8];

88 
uöt32_t
 
	gu8g_d©a_mask
[8];

90 vﬁ©ûê
uöt8_t
 *
	gu8g_d©a_p‹t
[8];

91 
uöt8_t
 
	gu8g_d©a_mask
[8];

96 
	$u8g_com_¨duöo_Á°_∑øŒñ_öô
(
u8g_t
 *
u8g
)

98 
u8g_d©a_p‹t
[0] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D0
]));

99 
u8g_d©a_mask
[0] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D0
]);

100 
u8g_d©a_p‹t
[1] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D1
]));

101 
u8g_d©a_mask
[1] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D1
]);

102 
u8g_d©a_p‹t
[2] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D2
]));

103 
u8g_d©a_mask
[2] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D2
]);

104 
u8g_d©a_p‹t
[3] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D3
]));

105 
u8g_d©a_mask
[3] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D3
]);

107 
u8g_d©a_p‹t
[4] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D4
]));

108 
u8g_d©a_mask
[4] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D4
]);

109 
u8g_d©a_p‹t
[5] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D5
]));

110 
u8g_d©a_mask
[5] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D5
]);

111 
u8g_d©a_p‹t
[6] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D6
]));

112 
u8g_d©a_mask
[6] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D6
]);

113 
u8g_d©a_p‹t
[7] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D7
]));

114 
u8g_d©a_mask
[7] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D7
]);

115 
	}
}

117 
	$u8g_com_¨duöo_Á°_wrôe_d©a_pö
(
uöt8_t
 
pö
, uöt8_à
vÆ
)

119 i‡–
vÆ
 != 0 )

120 *
u8g_d©a_p‹t
[
pö
] |
u8g_d©a_mask
[pin];

122 *
u8g_d©a_p‹t
[
pö
] &~
u8g_d©a_mask
[pin];

123 
	}
}

126 
	$u8g_com_¨duöo_Á°_∑øŒñ_wrôe
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

128 
	`u8g_com_¨duöo_Á°_wrôe_d©a_pö
–0, 
vÆ
&1 );

129 
vÆ
 >>= 1;

130 
	`u8g_com_¨duöo_Á°_wrôe_d©a_pö
–1, 
vÆ
&1 );

131 
vÆ
 >>= 1;

132 
	`u8g_com_¨duöo_Á°_wrôe_d©a_pö
–2, 
vÆ
&1 );

133 
vÆ
 >>= 1;

134 
	`u8g_com_¨duöo_Á°_wrôe_d©a_pö
–3, 
vÆ
&1 );

135 
vÆ
 >>= 1;

137 
	`u8g_com_¨duöo_Á°_wrôe_d©a_pö
–4, 
vÆ
&1 );

138 
vÆ
 >>= 1;

139 
	`u8g_com_¨duöo_Á°_wrôe_d©a_pö
–5, 
vÆ
&1 );

140 
vÆ
 >>= 1;

141 
	`u8g_com_¨duöo_Á°_wrôe_d©a_pö
–6, 
vÆ
&1 );

142 
vÆ
 >>= 1;

143 
	`u8g_com_¨duöo_Á°_wrôe_d©a_pö
–7, 
vÆ
&1 );

144 
vÆ
 >>= 1;

147 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_EN
, 
HIGH
);

148 
	`u8g_Mi¸oDñay
();

149 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_EN
, 
LOW
);

150 
	`u8g_10Mi¸oDñay
();

151 
	`u8g_10Mi¸oDñay
();

152 
	}
}

155 
uöt8_t
 
	$u8g_com_¨duöo_Á°_∑øŒñ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

157 
msg
)

159 
U8G_COM_MSG_INIT
:

160 
	`u8g_com_¨duöo_Á°_∑øŒñ_öô
(
u8g
);

162 i‡–
u8g
->
pö_li°
[
U8G_PI_RW
] !
U8G_PIN_NONE
 )

164 
	`pöMode
(
u8g
->
pö_li°
[
U8G_PI_RW
], 
OUTPUT
);

165 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RW
, 
LOW
);

168 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

170 
U8G_COM_MSG_STOP
:

173 
U8G_COM_MSG_CHIP_SELECT
:

174 i‡–
¨g_vÆ
 == 0 )

177 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
HIGH
);

178 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
HIGH
);

180 i‡–
¨g_vÆ
 == 1 )

183 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
LOW
);

184 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
HIGH
);

186 i‡–
¨g_vÆ
 == 2 )

189 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
HIGH
);

190 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
LOW
);

195 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
LOW
);

196 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
LOW
);

199 
U8G_COM_MSG_WRITE_BYTE
:

200 
	`u8g_com_¨duöo_Á°_∑øŒñ_wrôe
(
u8g
, 
¨g_vÆ
);

202 
U8G_COM_MSG_WRITE_SEQ
:

204 
uöt8_t
 *
±r
 = 
¨g_±r
;

205  
¨g_vÆ
 > 0 )

207 
	`u8g_com_¨duöo_Á°_∑øŒñ_wrôe
(
u8g
, *
±r
++);

208 
¨g_vÆ
--;

212 
U8G_COM_MSG_WRITE_SEQ_P
:

214 
uöt8_t
 *
±r
 = 
¨g_±r
;

215  
¨g_vÆ
 > 0 )

217 
	`u8g_com_¨duöo_Á°_∑øŒñ_wrôe
(
u8g
, 
	`u8g_pgm_ªad
(
±r
));

218 
±r
++;

219 
¨g_vÆ
--;

223 
U8G_COM_MSG_ADDRESS
:

224 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_DI
, 
¨g_vÆ
);

226 
U8G_COM_MSG_RESET
:

227 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

228 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

233 
	}
}

238 
uöt8_t
 
	$u8g_com_¨duöo_Á°_∑øŒñ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

241 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_arduino_hw_spi.c

37 
	~"u8g.h
"

39 #i‡
deföed
(
ARDUINO
)

41 #i‡
deföed
(
__AVR__
)

43 
	~<avr/öãºu±.h
>

44 
	~<avr/io.h
>

46 #i‡
ARDUINO
 < 100

47 
	~<WProgøm.h
>

50 #i‡
deföed
(
__AVR_ATmega644P__
Ë|| deföed(
__AVR_ATmega1284P__
)

51 
	#PIN_SCK
 7

	)

52 
	#PIN_MISO
 6

	)

53 
	#PIN_MOSI
 5

	)

54 
	#PIN_CS
 4

	)

56 
	#PIN_SCK
 13

	)

57 
	#PIN_MISO
 12

	)

58 
	#PIN_MOSI
 11

	)

59 
	#PIN_CS
 10

	)

64 
	~<Arduöo.h
>

67 
	#PIN_SCK
 
SCK


	)

68 
	#PIN_MISO
 
MISO


	)

69 
	#PIN_MOSI
 
MOSI


	)

70 
	#PIN_CS
 
SS


	)

77 
uöt8_t
 
	$u8g_•i_out
(
uöt8_t
 
d©a
)

81 
SPDR
 = 
d©a
;

83 !(
SPSR
 & (1<<
SPIF
)))

86  
SPDR
;

87 
	}
}

90 
uöt8_t
 
	$u8g_com_¨duöo_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

92 
msg
)

94 
U8G_COM_MSG_STOP
:

97 
U8G_COM_MSG_INIT
:

98 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

99 
	`pöMode
(
PIN_SCK
, 
OUTPUT
);

100 
	`digôÆWrôe
(
PIN_SCK
, 
LOW
);

101 
	`pöMode
(
PIN_MOSI
, 
OUTPUT
);

102 
	`digôÆWrôe
(
PIN_MOSI
, 
LOW
);

105 
	`pöMode
(
PIN_CS
, 
OUTPUT
);

106 
	`digôÆWrôe
(
PIN_CS
, 
HIGH
);

117 
SPCR
 = 0;

118 
SPCR
 = (1<<
SPE
Ë| (1<<
MSTR
)|(0<<
SPR1
)|(1<<
SPR0
)|(0<<
CPOL
)|(0<<
CPHA
);

119 #ifde‡
U8G_HW_SPI_2X


120 
SPSR
 = (1 << 
SPI2X
);

125 
U8G_COM_MSG_ADDRESS
:

126 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 
¨g_vÆ
);

129 
U8G_COM_MSG_CHIP_SELECT
:

130 i‡–
¨g_vÆ
 == 0 )

133 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
HIGH
);

138 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_SCK
, 
LOW
);

139 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
LOW
);

143 
U8G_COM_MSG_RESET
:

144 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

145 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

148 
U8G_COM_MSG_WRITE_BYTE
:

149 
	`u8g_•i_out
(
¨g_vÆ
);

152 
U8G_COM_MSG_WRITE_SEQ
:

154 
uöt8_t
 *
±r
 = 
¨g_±r
;

155  
¨g_vÆ
 > 0 )

157 
	`u8g_•i_out
(*
±r
++);

158 
¨g_vÆ
--;

162 
U8G_COM_MSG_WRITE_SEQ_P
:

164 
uöt8_t
 *
±r
 = 
¨g_±r
;

165  
¨g_vÆ
 > 0 )

167 
	`u8g_•i_out
(
	`u8g_pgm_ªad
(
±r
));

168 
±r
++;

169 
¨g_vÆ
--;

175 
	}
}

185 
uöt8_t
 
	$u8g_com_¨duöo_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

188 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_arduino_no_en_parallel.c

54 
	~"u8g.h
"

56 #i‡ 
deföed
(
ARDUINO
)

58 #i‡
ARDUINO
 < 100

60 
	~<wúög_¥iv©e.h
>

61 
	~<pös_¨duöo.h
>

63 
	~<Arduöo.h
>

68 #i‡
deföed
(
__PIC32MX
)

70 vﬁ©ûê
uöt32_t
 *
	gu8g_d©a_p‹t
[8];

71 
uöt32_t
 
	gu8g_d©a_mask
[8];

73 vﬁ©ûê
uöt8_t
 *
	gu8g_d©a_p‹t
[8];

74 
uöt8_t
 
	gu8g_d©a_mask
[8];

79 
	$u8g_com_¨duöo_no_í_∑øŒñ_öô
(
u8g_t
 *
u8g
)

81 
u8g_d©a_p‹t
[0] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D0
]));

82 
u8g_d©a_mask
[0] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D0
]);

83 
u8g_d©a_p‹t
[1] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D1
]));

84 
u8g_d©a_mask
[1] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D1
]);

85 
u8g_d©a_p‹t
[2] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D2
]));

86 
u8g_d©a_mask
[2] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D2
]);

87 
u8g_d©a_p‹t
[3] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D3
]));

88 
u8g_d©a_mask
[3] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D3
]);

90 
u8g_d©a_p‹t
[4] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D4
]));

91 
u8g_d©a_mask
[4] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D4
]);

92 
u8g_d©a_p‹t
[5] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D5
]));

93 
u8g_d©a_mask
[5] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D5
]);

94 
u8g_d©a_p‹t
[6] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D6
]));

95 
u8g_d©a_mask
[6] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D6
]);

96 
u8g_d©a_p‹t
[7] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D7
]));

97 
u8g_d©a_mask
[7] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D7
]);

98 
	}
}

100 
	$u8g_com_¨duöo_no_í_wrôe_d©a_pö
(
uöt8_t
 
pö
, uöt8_à
vÆ
)

102 i‡–
vÆ
 != 0 )

103 *
u8g_d©a_p‹t
[
pö
] |
u8g_d©a_mask
[pin];

105 *
u8g_d©a_p‹t
[
pö
] &~
u8g_d©a_mask
[pin];

106 
	}
}

109 
	$u8g_com_¨duöo_no_í_∑øŒñ_wrôe
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

111 
	`u8g_com_¨duöo_no_í_wrôe_d©a_pö
–0, 
vÆ
&1 );

112 
vÆ
 >>= 1;

113 
	`u8g_com_¨duöo_no_í_wrôe_d©a_pö
–1, 
vÆ
&1 );

114 
vÆ
 >>= 1;

115 
	`u8g_com_¨duöo_no_í_wrôe_d©a_pö
–2, 
vÆ
&1 );

116 
vÆ
 >>= 1;

117 
	`u8g_com_¨duöo_no_í_wrôe_d©a_pö
–3, 
vÆ
&1 );

118 
vÆ
 >>= 1;

120 
	`u8g_com_¨duöo_no_í_wrôe_d©a_pö
–4, 
vÆ
&1 );

121 
vÆ
 >>= 1;

122 
	`u8g_com_¨duöo_no_í_wrôe_d©a_pö
–5, 
vÆ
&1 );

123 
vÆ
 >>= 1;

124 
	`u8g_com_¨duöo_no_í_wrôe_d©a_pö
–6, 
vÆ
&1 );

125 
vÆ
 >>= 1;

126 
	`u8g_com_¨duöo_no_í_wrôe_d©a_pö
–7, 
vÆ
&1 );

127 
vÆ
 >>= 1;

130 i‡–
u8g
->
pö_li°
[
U8G_PI_CS_STATE
] == 1 )

132 
	`u8g_Mi¸oDñay
();

133 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
HIGH
);

134 
	`u8g_Mi¸oDñay
();

135 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
LOW
);

136 
	`u8g_Mi¸oDñay
();

138 i‡–
u8g
->
pö_li°
[
U8G_PI_CS_STATE
] == 2 )

140 
	`u8g_Mi¸oDñay
();

141 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
HIGH
);

142 
	`u8g_Mi¸oDñay
();

143 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
LOW
);

144 
	`u8g_Mi¸oDñay
();

146 
	}
}

149 
uöt8_t
 
	$u8g_com_¨duöo_no_í_∑øŒñ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

151 
msg
)

153 
U8G_COM_MSG_INIT
:

154 
	`u8g_com_¨duöo_no_í_∑øŒñ_öô
(
u8g
);

156 i‡–
u8g
->
pö_li°
[
U8G_PI_RW
] !
U8G_PIN_NONE
 )

158 
	`pöMode
(
u8g
->
pö_li°
[
U8G_PI_RW
], 
OUTPUT
);

159 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RW
, 
LOW
);

162 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

164 
U8G_COM_MSG_STOP
:

167 
U8G_COM_MSG_CHIP_SELECT
:

174 
u8g
->
pö_li°
[
U8G_PI_CS_STATE
] = 
¨g_vÆ
;

176 
U8G_COM_MSG_WRITE_BYTE
:

177 
	`u8g_com_¨duöo_no_í_∑øŒñ_wrôe
(
u8g
, 
¨g_vÆ
);

179 
U8G_COM_MSG_WRITE_SEQ
:

181 
uöt8_t
 *
±r
 = 
¨g_±r
;

182  
¨g_vÆ
 > 0 )

184 
	`u8g_com_¨duöo_no_í_∑øŒñ_wrôe
(
u8g
, *
±r
++);

185 
¨g_vÆ
--;

189 
U8G_COM_MSG_WRITE_SEQ_P
:

191 
uöt8_t
 *
±r
 = 
¨g_±r
;

192  
¨g_vÆ
 > 0 )

194 
	`u8g_com_¨duöo_no_í_∑øŒñ_wrôe
(
u8g
, 
	`u8g_pgm_ªad
(
±r
));

195 
±r
++;

196 
¨g_vÆ
--;

200 
U8G_COM_MSG_ADDRESS
:

201 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_DI
, 
¨g_vÆ
);

203 
U8G_COM_MSG_RESET
:

204 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

205 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

209 
	}
}

214 
uöt8_t
 
	$u8g_com_¨duöo_no_í_∑øŒñ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

217 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_arduino_parallel.c

55 
	~"u8g.h
"

58 #i‡ 
deföed
(
ARDUINO
)

60 #i‡
ARDUINO
 < 100

61 
	~<WProgøm.h
>

63 
	~<Arduöo.h
>

71 
	$u8g_com_¨duöo_∑øŒñ_wrôe
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

73 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_D0
, 
vÆ
&1);

74 
vÆ
 >>= 1;

75 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_D1
, 
vÆ
&1);

76 
vÆ
 >>= 1;

77 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_D2
, 
vÆ
&1);

78 
vÆ
 >>= 1;

79 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_D3
, 
vÆ
&1);

80 
vÆ
 >>= 1;

81 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_D4
, 
vÆ
&1);

82 
vÆ
 >>= 1;

83 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_D5
, 
vÆ
&1);

84 
vÆ
 >>= 1;

85 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_D6
, 
vÆ
&1);

86 
vÆ
 >>= 1;

87 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_D7
, 
vÆ
&1);

91 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_EN
, 
HIGH
);

93 
	`u8g_Mi¸oDñay
();

94 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_EN
, 
LOW
);

95 
	`u8g_10Mi¸oDñay
();

97 
	}
}

100 
uöt8_t
 
	$u8g_com_¨duöo_∑øŒñ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

102 
msg
)

104 
U8G_COM_MSG_INIT
:

106 i‡–
u8g
->
pö_li°
[
U8G_PI_RW
] !
U8G_PIN_NONE
 )

108 
	`pöMode
(
u8g
->
pö_li°
[
U8G_PI_RW
], 
OUTPUT
);

109 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RW
, 
LOW
);

112 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

114 
U8G_COM_MSG_STOP
:

116 
U8G_COM_MSG_CHIP_SELECT
:

117 i‡–
¨g_vÆ
 == 0 )

120 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
HIGH
);

121 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
HIGH
);

123 i‡–
¨g_vÆ
 == 1 )

126 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
LOW
);

127 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
HIGH
);

129 i‡–
¨g_vÆ
 == 2 )

132 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
HIGH
);

133 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
LOW
);

138 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
LOW
);

139 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
LOW
);

142 
U8G_COM_MSG_WRITE_BYTE
:

143 
	`u8g_com_¨duöo_∑øŒñ_wrôe
(
u8g
, 
¨g_vÆ
);

145 
U8G_COM_MSG_WRITE_SEQ
:

147 
uöt8_t
 *
±r
 = 
¨g_±r
;

148  
¨g_vÆ
 > 0 )

150 
	`u8g_com_¨duöo_∑øŒñ_wrôe
(
u8g
, *
±r
++);

151 
¨g_vÆ
--;

155 
U8G_COM_MSG_WRITE_SEQ_P
:

157 
uöt8_t
 *
±r
 = 
¨g_±r
;

158  
¨g_vÆ
 > 0 )

160 
	`u8g_com_¨duöo_∑øŒñ_wrôe
(
u8g
, 
	`u8g_pgm_ªad
(
±r
));

161 
±r
++;

162 
¨g_vÆ
--;

166 
U8G_COM_MSG_ADDRESS
:

167 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_DI
, 
¨g_vÆ
);

169 
U8G_COM_MSG_RESET
:

170 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

171 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

176 
	}
}

181 
uöt8_t
 
	$u8g_com_¨duöo_∑øŒñ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

184 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_arduino_port_d_wr.c

47 
	~"u8g.h
"

50 #i‡ 
deföed
(
ARDUINO
Ë&& deföed(
PORTD
)

52 #i‡
ARDUINO
 < 100

53 
	~<WProgøm.h
>

55 
	~<Arduöo.h
>

63 
	$u8g_com_¨duöo_p‹t_d_8bô_wr
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

65 
PORTD
 = 
vÆ
;

68 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_EN
, 
LOW
);

69 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_EN
, 
HIGH
);

70 
	}
}

73 
uöt8_t
 
	$u8g_com_¨duöo_p‹t_d_wr_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

76 
msg
)

78 
U8G_COM_MSG_INIT
:

80 #ifde‡
UCSR0B


81 
UCSR0B
 = 0;

83 
DDRD
 = 0x0ff;

84 
PORTD
 = 0x0ff;

87 i‡–
u8g
->
pö_li°
[
U8G_PI_RW
] !
U8G_PIN_NONE
 )

89 
	`pöMode
(
u8g
->
pö_li°
[
U8G_PI_RW
], 
OUTPUT
);

90 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RW
, 
HIGH
);

93 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

94 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_EN
, 
HIGH
);

96 
U8G_COM_MSG_STOP
:

98 
U8G_COM_MSG_CHIP_SELECT
:

99 i‡–
¨g_vÆ
 == 0 )

102 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
HIGH
);

103 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
HIGH
);

105 i‡–
¨g_vÆ
 == 1 )

108 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
LOW
);

109 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
HIGH
);

111 i‡–
¨g_vÆ
 == 2 )

114 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
HIGH
);

115 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
LOW
);

120 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
LOW
);

121 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
LOW
);

124 
U8G_COM_MSG_WRITE_BYTE
:

125 
	`u8g_com_¨duöo_p‹t_d_8bô_wr
(
u8g
, 
¨g_vÆ
);

127 
U8G_COM_MSG_WRITE_SEQ
:

129 
uöt8_t
 *
±r
 = 
¨g_±r
;

130  
¨g_vÆ
 > 0 )

132 
	`u8g_com_¨duöo_p‹t_d_8bô_wr
(
u8g
, *
±r
++);

133 
¨g_vÆ
--;

137 
U8G_COM_MSG_WRITE_SEQ_P
:

139 
uöt8_t
 *
±r
 = 
¨g_±r
;

140  
¨g_vÆ
 > 0 )

142 
	`u8g_com_¨duöo_p‹t_d_8bô_wr
(
u8g
, 
	`u8g_pgm_ªad
(
±r
));

143 
±r
++;

144 
¨g_vÆ
--;

148 
U8G_COM_MSG_ADDRESS
:

149 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_DI
, 
¨g_vÆ
);

151 
U8G_COM_MSG_RESET
:

152 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

153 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

157 
	}
}

162 
uöt8_t
 
	$u8g_com_¨duöo_p‹t_d_wr_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

165 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_arduino_ssd_i2c.c

55 
	~"u8g.h
"

57 
	#I2C_SLA
 (0x3c*2)

	)

59 
	#I2C_CMD_MODE
 0x000

	)

60 
	#I2C_DATA_MODE
 0x040

	)

63 
uöt8_t
 
	$u8g_com_¨duöo_ssd_°¨t_£quí˚
(
u8g_t
 *
u8g
)

66 i‡–
u8g
->
pö_li°
[
U8G_PI_SET_A0
] == 0 )

70 i‡–
	`u8g_i2c_°¨t
(
I2C_SLA
) == 0 )

72 i‡–
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] == 0 )

74 i‡–
	`u8g_i2c_£nd_byã
(
I2C_CMD_MODE
) == 0 )

79 i‡–
	`u8g_i2c_£nd_byã
(
I2C_DATA_MODE
) == 0 )

84 
u8g
->
pö_li°
[
U8G_PI_SET_A0
] = 0;

86 
	}
}

88 
uöt8_t
 
	$u8g_com_¨duöo_ssd_i2c_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

90 
msg
)

92 
U8G_COM_MSG_INIT
:

97 
	`u8g_i2c_öô
(
u8g
->
pö_li°
[
U8G_PI_I2C_OPTION
]);

101 
U8G_COM_MSG_STOP
:

104 
U8G_COM_MSG_RESET
:

109 
U8G_COM_MSG_CHIP_SELECT
:

110 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 0;

111 
u8g
->
pö_li°
[
U8G_PI_SET_A0
] = 1;

112 i‡–
¨g_vÆ
 == 0 )

115 
	`u8g_i2c_°›
();

123 
U8G_COM_MSG_WRITE_BYTE
:

125 i‡–
	`u8g_com_¨duöo_ssd_°¨t_£quí˚
(
u8g
) == 0 )

126  
	`u8g_i2c_°›
(), 0;

127 i‡–
	`u8g_i2c_£nd_byã
(
¨g_vÆ
) == 0 )

128  
	`u8g_i2c_°›
(), 0;

132 
U8G_COM_MSG_WRITE_SEQ
:

134 i‡–
	`u8g_com_¨duöo_ssd_°¨t_£quí˚
(
u8g
) == 0 )

135  
	`u8g_i2c_°›
(), 0;

137 
uöt8_t
 *
±r
 = 
¨g_±r
;

138  
¨g_vÆ
 > 0 )

140 i‡–
	`u8g_i2c_£nd_byã
(*
±r
++) == 0 )

141  
	`u8g_i2c_°›
(), 0;

142 
¨g_vÆ
--;

148 
U8G_COM_MSG_WRITE_SEQ_P
:

150 i‡–
	`u8g_com_¨duöo_ssd_°¨t_£quí˚
(
u8g
) == 0 )

151  
	`u8g_i2c_°›
(), 0;

153 
uöt8_t
 *
±r
 = 
¨g_±r
;

154  
¨g_vÆ
 > 0 )

156 i‡–
	`u8g_i2c_£nd_byã
(
	`u8g_pgm_ªad
(
±r
)) == 0 )

158 
±r
++;

159 
¨g_vÆ
--;

165 
U8G_COM_MSG_ADDRESS
:

166 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 
¨g_vÆ
;

167 
u8g
->
pö_li°
[
U8G_PI_SET_A0
] = 1;

169 #ifde‡
OLD_CODE


170 i‡–
i2c_°©e
 != 0 )

172 
	`u8g_i2c_°›
();

173 
i2c_°©e
 = 0;

176 i‡–
	`u8g_com_¨duöo_ssd_°¨t_£quí˚
(
¨g_vÆ
) == 0 )

201 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_arduino_st7920_hw_spi.c

38 
	~"u8g.h
"

40 #i‡
deföed
(
ARDUINO
)

42 #i‡
ARDUINO
 < 100

43 
	~<WProgøm.h
>

44 
	~"wúög_¥iv©e.h
"

45 
	~"pös_¨duöo.h
"

48 
	~<Arduöo.h
>

49 
	~"wúög_¥iv©e.h
"

52 #i‡
deföed
(
__AVR__
)

53 
	#U8G_ARDUINO_ATMEGA_HW_SPI


	)

56 #i‡
__AVR_ARCH__
 == 2

57 #unde‡
U8G_ATMEGA_HW_SPI


59 #i‡
__AVR_ARCH__
 == 25

60 #unde‡
U8G_ATMEGA_HW_SPI


66 #i‡
deföed
(
U8G_ARDUINO_ATMEGA_HW_SPI
)

68 
	~<avr/öãºu±.h
>

69 
	~<avr/io.h
>

71 
uöt8_t
 
	$u8g_¨duöo_°7920_hw_•i_shi·_out
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
Ë
U8G_NOINLINE
;

72 
uöt8_t
 
	$u8g_¨duöo_°7920_hw_•i_shi·_out
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

75 
SPDR
 = 
vÆ
;

77 !(
SPSR
 & (1<<
SPIF
)))

80  
SPDR
;

81 
	}
}

84 
	$u8g_com_¨duöo_°7920_wrôe_byã_hw_•i
(
u8g_t
 *
u8g
, 
uöt8_t
 
rs
, uöt8_à
vÆ
Ë
U8G_NOINLINE
;

85 
	$u8g_com_¨duöo_°7920_wrôe_byã_hw_•i
(
u8g_t
 *
u8g
, 
uöt8_t
 
rs
, uöt8_à
vÆ
)

87 
uöt8_t
 
i
;

89 i‡–
rs
 == 0 )

92 
	`u8g_¨duöo_°7920_hw_•i_shi·_out
(
u8g
, 0x0f8);

94 i‡–
rs
 == 1 )

97 
	`u8g_¨duöo_°7920_hw_•i_shi·_out
(
u8g
, 0x0fa);

104 
	`u8g_¨duöo_°7920_hw_•i_shi·_out
(
u8g
, 
vÆ
 & 0x0f0);

105 
	`u8g_¨duöo_°7920_hw_•i_shi·_out
(
u8g
, 
vÆ
 << 4);

107  
i
 = 0; i < 4; i++ )

108 
	`u8g_10Mi¸oDñay
();

109 
	}
}

112 
uöt8_t
 
	$u8g_com_¨duöo_°7920_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

114 
msg
)

116 
U8G_COM_MSG_INIT
:

117 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

118 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
LOW
);

120 
DDRB
 |
	`_BV
(3);

121 
DDRB
 |
	`_BV
(5);

122 
DDRB
 |
	`_BV
(2);

124 
PORTB
 &~
	`_BV
(3);

125 
PORTB
 &~
	`_BV
(5);

134 
SPCR
 = 0;

137 
SPCR
 = (1<<
SPE
Ë| (1<<
MSTR
)|(0<<
SPR1
)|(0<<
SPR0
)|(1<<
CPOL
)|(1<<
CPHA
);

138 #ifde‡
U8G_HW_SPI_2X


139 
SPSR
 = (1 << 
SPI2X
);

141 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 0;

144 
U8G_COM_MSG_STOP
:

147 
U8G_COM_MSG_RESET
:

148 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

149 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

152 
U8G_COM_MSG_CHIP_SELECT
:

153 i‡–
¨g_vÆ
 == 0 )

156 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
LOW
);

162 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
HIGH
);

166 
U8G_COM_MSG_WRITE_BYTE
:

167 
	`u8g_com_¨duöo_°7920_wrôe_byã_hw_•i
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], 
¨g_vÆ
);

172 
U8G_COM_MSG_WRITE_SEQ
:

174 
uöt8_t
 *
±r
 = 
¨g_±r
;

175  
¨g_vÆ
 > 0 )

177 
	`u8g_com_¨duöo_°7920_wrôe_byã_hw_•i
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], *
±r
++);

179 
¨g_vÆ
--;

184 
U8G_COM_MSG_WRITE_SEQ_P
:

186 
uöt8_t
 *
±r
 = 
¨g_±r
;

187  
¨g_vÆ
 > 0 )

189 
	`u8g_com_¨duöo_°7920_wrôe_byã_hw_•i
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], 
	`u8g_pgm_ªad
(
±r
) );

191 
±r
++;

192 
¨g_vÆ
--;

197 
U8G_COM_MSG_ADDRESS
:

198 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 
¨g_vÆ
;

202 
	}
}

206 
uöt8_t
 
	$u8g_com_¨duöo_°7920_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

209 
	}
}

214 
uöt8_t
 
	$u8g_com_¨duöo_°7920_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

217 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_arduino_st7920_spi.c

38 
	~"u8g.h
"

40 #i‡
deföed
(
ARDUINO
)

42 #i‡
ARDUINO
 < 100

43 
	~<WProgøm.h
>

44 
	~"wúög_¥iv©e.h
"

45 
	~"pös_¨duöo.h
"

48 
	~<Arduöo.h
>

49 
	~"wúög_¥iv©e.h
"

52 #i‡
deföed
(
__AVR__
)

54 
uöt8_t
 
	gu8g_bôD©a
, 
	gu8g_bôNŸD©a
;

55 
uöt8_t
 
	gu8g_bôClock
, 
	gu8g_bôNŸClock
;

56 vﬁ©ûê
uöt8_t
 *
	gu8g_outD©a
;

57 vﬁ©ûê
uöt8_t
 *
	gu8g_outClock
;

59 
	$u8g_com_¨duöo_öô_shi·_out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
)

61 
u8g_outD©a
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
d©aPö
));

62 
u8g_outClock
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
˛ockPö
));

63 
u8g_bôD©a
 = 
	`digôÆPöToBôMask
(
d©aPö
);

64 
u8g_bôClock
 = 
	`digôÆPöToBôMask
(
˛ockPö
);

66 
u8g_bôNŸClock
 = 
u8g_bôClock
;

67 
u8g_bôNŸClock
 ^= 0x0ff;

69 
u8g_bôNŸD©a
 = 
u8g_bôD©a
;

70 
u8g_bôNŸD©a
 ^= 0x0ff;

71 
	}
}

73 
	$u8g_com_¨duöo_do_shi·_out_msb_fú°
(
uöt8_t
 
vÆ
Ë
U8G_NOINLINE
;

74 
	$u8g_com_¨duöo_do_shi·_out_msb_fú°
(
uöt8_t
 
vÆ
)

76 
uöt8_t
 
˙t
 = 8;

77 
uöt8_t
 
bôD©a
 = 
u8g_bôD©a
;

78 
uöt8_t
 
bôNŸD©a
 = 
u8g_bôNŸD©a
;

79 
uöt8_t
 
bôClock
 = 
u8g_bôClock
;

80 
uöt8_t
 
bôNŸClock
 = 
u8g_bôNŸClock
;

81 vﬁ©ûê
uöt8_t
 *
outD©a
 = 
u8g_outD©a
;

82 vﬁ©ûê
uöt8_t
 *
outClock
 = 
u8g_outClock
;

85 i‡–
vÆ
 & 128 )

86 *
outD©a
 |
bôD©a
;

88 *
outD©a
 &
bôNŸD©a
;

97 
vÆ
 <<= 1;

98 *
outClock
 &
bôNŸClock
;

99 
˙t
--;

102 *
outClock
 |
bôClock
;

104 }  
˙t
 != 0 );

105 
	}
}

107 #ñi‡
deföed
(
__18CXX
Ë|| deföed(
__PIC32MX
)

109 
uöt16_t
 
	gdog_bôD©a
, 
	gdog_bôNŸD©a
;

110 
uöt16_t
 
	gdog_bôClock
, 
	gdog_bôNŸClock
;

111 vﬁ©ûê
uöt32_t
 *
	gdog_outD©a
;

112 vﬁ©ûê
uöt32_t
 *
	gdog_outClock
;

113 vﬁ©ûê
uöt32_t
 
	gdog_pic32_•i_tmp
;

115 
	$u8g_com_¨duöo_öô_shi·_out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
)

117 
dog_outD©a
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
d©aPö
));

118 
dog_outClock
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
˛ockPö
));

119 
dog_bôD©a
 = 
	`digôÆPöToBôMask
(
d©aPö
);

120 
dog_bôClock
 = 
	`digôÆPöToBôMask
(
˛ockPö
);

122 
dog_bôNŸClock
 = 
dog_bôClock
;

123 
dog_bôNŸClock
 ^= 0x0ffff;

125 
dog_bôNŸD©a
 = 
dog_bôD©a
;

126 
dog_bôNŸD©a
 ^= 0x0ffff;

127 
	}
}

129 
	$u8g_com_¨duöo_do_shi·_out_msb_fú°
(
uöt8_t
 
vÆ
)

131 
uöt8_t
 
˙t
 = 8;

134 i‡–
vÆ
 & 128 )

135 *
dog_outD©a
 |
dog_bôD©a
;

137 *
dog_outD©a
 &
dog_bôNŸD©a
;

138 
vÆ
 <<= 1;

141 *
dog_outClock
 &
dog_bôNŸClock
;

142 
˙t
--;

143 
	`u8g_Mi¸oDñay
();

145 *
dog_outClock
 |
dog_bôClock
;

146 
	`u8g_Mi¸oDñay
();

148 }  
˙t
 != 0 );

149 
	}
}

155 
uöt8_t
 
	gu8g_d©a_pö
;

156 
uöt8_t
 
	gu8g_˛ock_pö
;

158 
	$u8g_com_¨duöo_öô_shi·_out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
)

160 
u8g_d©a_pö
 = 
d©aPö
;

161 
u8g_˛ock_pö
 = 
˛ockPö
;

162 
	}
}

164 
	$u8g_com_¨duöo_do_shi·_out_msb_fú°
(
uöt8_t
 
vÆ
)

166 
uöt8_t
 
˙t
 = 8;

169 i‡–
vÆ
 & 128 )

170 
	`digôÆWrôe
(
u8g_d©a_pö
, 
HIGH
);

172 
	`digôÆWrôe
(
u8g_d©a_pö
, 
LOW
);

173 
vÆ
 <<= 1;

175 
	`digôÆWrôe
(
u8g_˛ock_pö
, 
LOW
);

176 
˙t
--;

177 
	`u8g_Mi¸oDñay
();

178 
	`digôÆWrôe
(
u8g_˛ock_pö
, 
HIGH
);

179 
	`u8g_Mi¸oDñay
();

180 }  
˙t
 != 0 );

181 
	}
}

188 
	$u8g_com_¨duöo_°7920_wrôe_byã
(
uöt8_t
 
rs
, uöt8_à
vÆ
)

190 
uöt8_t
 
i
;

192 i‡–
rs
 == 0 )

195 
	`u8g_com_¨duöo_do_shi·_out_msb_fú°
(0x0f8);

197 i‡–
rs
 == 1 )

200 
	`u8g_com_¨duöo_do_shi·_out_msb_fú°
(0x0fa);

203 
	`u8g_com_¨duöo_do_shi·_out_msb_fú°
(
vÆ
 & 0x0f0);

204 
	`u8g_com_¨duöo_do_shi·_out_msb_fú°
(
vÆ
 << 4);

206  
i
 = 0; i < 4; i++ )

207 
	`u8g_10Mi¸oDñay
();

209 
	}
}

213 
uöt8_t
 
	$u8g_com_¨duöo_°7920_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

215 
msg
)

217 
U8G_COM_MSG_INIT
:

218 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

219 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
LOW
);

221 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_SCK
, 
HIGH
);

222 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_MOSI
, 
LOW
);

223 
	`u8g_com_¨duöo_öô_shi·_out
(
u8g
->
pö_li°
[
U8G_PI_MOSI
], u8g->pö_li°[
U8G_PI_SCK
]);

224 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 0;

227 
U8G_COM_MSG_STOP
:

230 
U8G_COM_MSG_RESET
:

231 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

232 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

235 
U8G_COM_MSG_CHIP_SELECT
:

236 i‡–
¨g_vÆ
 == 0 )

239 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
LOW
);

245 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
HIGH
);

249 
U8G_COM_MSG_WRITE_BYTE
:

250 
	`u8g_com_¨duöo_°7920_wrôe_byã
–
u8g
->
pö_li°
[
U8G_PI_A0_STATE
], 
¨g_vÆ
);

255 
U8G_COM_MSG_WRITE_SEQ
:

257 
uöt8_t
 *
±r
 = 
¨g_±r
;

258  
¨g_vÆ
 > 0 )

260 
	`u8g_com_¨duöo_°7920_wrôe_byã
(
u8g
->
pö_li°
[
U8G_PI_A0_STATE
], *
±r
++);

262 
¨g_vÆ
--;

267 
U8G_COM_MSG_WRITE_SEQ_P
:

269 
uöt8_t
 *
±r
 = 
¨g_±r
;

270  
¨g_vÆ
 > 0 )

272 
	`u8g_com_¨duöo_°7920_wrôe_byã
(
u8g
->
pö_li°
[
U8G_PI_A0_STATE
], 
	`u8g_pgm_ªad
(
±r
) );

274 
±r
++;

275 
¨g_vÆ
--;

280 
U8G_COM_MSG_ADDRESS
:

281 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 
¨g_vÆ
;

285 
	}
}

289 
uöt8_t
 
	$u8g_com_¨duöo_°7920_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

292 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_arduino_std_sw_spi.c

37 
	~"u8g.h
"

40 #i‡
deföed
(
ARDUINO
)

42 #i‡
ARDUINO
 < 100

43 
	~<WProgøm.h
>

45 
	~<Arduöo.h
>

48 
	$u8g_¨duöo_sw_•i_shi·_out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
vÆ
)

50 
uöt8_t
 
i
 = 8;

53 i‡–
vÆ
 & 128 )

54 
	`digôÆWrôe
(
d©aPö
, 
HIGH
);

56 
	`digôÆWrôe
(
d©aPö
, 
LOW
);

57 
vÆ
 <<= 1;

58 
	`u8g_Mi¸oDñay
();

60 
	`digôÆWrôe
(
˛ockPö
, 
HIGH
);

61 
	`u8g_Mi¸oDñay
();

63 
	`digôÆWrôe
(
˛ockPö
, 
LOW
);

64 
	`u8g_Mi¸oDñay
();

66 
i
--;

67 }  
i
 != 0 );

68 
	}
}

70 
uöt8_t
 
	$u8g_com_¨duöo_°d_sw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

72 
msg
)

74 
U8G_COM_MSG_INIT
:

75 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

76 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_SCK
, 
LOW
);

77 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_MOSI
, 
LOW
);

80 
U8G_COM_MSG_STOP
:

83 
U8G_COM_MSG_RESET
:

84 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

85 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

88 
U8G_COM_MSG_CHIP_SELECT
:

89 i‡–
¨g_vÆ
 == 0 )

92 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
HIGH
);

97 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_SCK
, 
LOW
);

98 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
LOW
);

102 
U8G_COM_MSG_WRITE_BYTE
:

103 
	`u8g_¨duöo_sw_•i_shi·_out
(
u8g
->
pö_li°
[
U8G_PI_MOSI
], u8g->pö_li°[
U8G_PI_SCK
], 
¨g_vÆ
);

106 
U8G_COM_MSG_WRITE_SEQ
:

108 
uöt8_t
 *
±r
 = 
¨g_±r
;

109  
¨g_vÆ
 > 0 )

111 
	`u8g_¨duöo_sw_•i_shi·_out
(
u8g
->
pö_li°
[
U8G_PI_MOSI
], u8g->pö_li°[
U8G_PI_SCK
], *
±r
++);

112 
¨g_vÆ
--;

117 
U8G_COM_MSG_WRITE_SEQ_P
:

119 
uöt8_t
 *
±r
 = 
¨g_±r
;

120  
¨g_vÆ
 > 0 )

122 
	`u8g_¨duöo_sw_•i_shi·_out
(
u8g
->
pö_li°
[
U8G_PI_MOSI
], u8g->pö_li°[
U8G_PI_SCK
], 
	`u8g_pgm_ªad
(
±r
));

123 
±r
++;

124 
¨g_vÆ
--;

129 
U8G_COM_MSG_ADDRESS
:

130 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 
¨g_vÆ
);

134 
	}
}

138 
uöt8_t
 
	$u8g_com_¨duöo_°d_sw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

141 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_arduino_sw_spi.c

37 
	~"u8g.h
"

39 #i‡
deföed
(
ARDUINO
)

41 #i‡
ARDUINO
 < 100

42 
	~<WProgøm.h
>

43 
	~"wúög_¥iv©e.h
"

44 
	~"pös_¨duöo.h
"

47 
	~<Arduöo.h
>

48 
	~"wúög_¥iv©e.h
"

51 #i‡
deföed
(
__AVR__
)

53 
uöt8_t
 
	gu8g_bôD©a
, 
	gu8g_bôNŸD©a
;

54 
uöt8_t
 
	gu8g_bôClock
, 
	gu8g_bôNŸClock
;

55 vﬁ©ûê
uöt8_t
 *
	gu8g_outD©a
;

56 vﬁ©ûê
uöt8_t
 *
	gu8g_outClock
;

58 
	$u8g_com_¨duöo_öô_shi·_out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
)

60 
u8g_outD©a
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
d©aPö
));

61 
u8g_outClock
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
˛ockPö
));

62 
u8g_bôD©a
 = 
	`digôÆPöToBôMask
(
d©aPö
);

63 
u8g_bôClock
 = 
	`digôÆPöToBôMask
(
˛ockPö
);

65 
u8g_bôNŸClock
 = 
u8g_bôClock
;

66 
u8g_bôNŸClock
 ^= 0x0ff;

68 
u8g_bôNŸD©a
 = 
u8g_bôD©a
;

69 
u8g_bôNŸD©a
 ^= 0x0ff;

70 
	}
}

72 
	$u8g_com_¨duöo_do_shi·_out_msb_fú°
(
uöt8_t
 
vÆ
Ë
U8G_NOINLINE
;

73 
	$u8g_com_¨duöo_do_shi·_out_msb_fú°
(
uöt8_t
 
vÆ
)

75 
uöt8_t
 
˙t
 = 8;

76 
uöt8_t
 
bôD©a
 = 
u8g_bôD©a
;

77 
uöt8_t
 
bôNŸD©a
 = 
u8g_bôNŸD©a
;

78 
uöt8_t
 
bôClock
 = 
u8g_bôClock
;

79 
uöt8_t
 
bôNŸClock
 = 
u8g_bôNŸClock
;

80 vﬁ©ûê
uöt8_t
 *
outD©a
 = 
u8g_outD©a
;

81 vﬁ©ûê
uöt8_t
 *
outClock
 = 
u8g_outClock
;

84 i‡–
vÆ
 & 128 )

85 *
outD©a
 |
bôD©a
;

87 *
outD©a
 &
bôNŸD©a
;

89 *
outClock
 |
bôClock
;

90 
vÆ
 <<= 1;

91 
˙t
--;

92 *
outClock
 &
bôNŸClock
;

93 }  
˙t
 != 0 );

94 
	}
}

96 #ñi‡
deföed
(
__18CXX
Ë|| deföed(
__PIC32MX
)

98 
uöt16_t
 
	gdog_bôD©a
, 
	gdog_bôNŸD©a
;

99 
uöt16_t
 
	gdog_bôClock
, 
	gdog_bôNŸClock
;

100 vﬁ©ûê
uöt32_t
 *
	gdog_outD©a
;

101 vﬁ©ûê
uöt32_t
 *
	gdog_outClock
;

102 vﬁ©ûê
uöt32_t
 
	gdog_pic32_•i_tmp
;

104 
	$u8g_com_¨duöo_öô_shi·_out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
)

106 
dog_outD©a
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
d©aPö
));

107 
dog_outClock
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
˛ockPö
));

108 
dog_bôD©a
 = 
	`digôÆPöToBôMask
(
d©aPö
);

109 
dog_bôClock
 = 
	`digôÆPöToBôMask
(
˛ockPö
);

111 
dog_bôNŸClock
 = 
dog_bôClock
;

112 
dog_bôNŸClock
 ^= 0x0ffff;

114 
dog_bôNŸD©a
 = 
dog_bôD©a
;

115 
dog_bôNŸD©a
 ^= 0x0ffff;

116 
	}
}

118 
	$u8g_com_¨duöo_do_shi·_out_msb_fú°
(
uöt8_t
 
vÆ
)

120 
uöt8_t
 
˙t
 = 8;

123 i‡–
vÆ
 & 128 )

124 *
dog_outD©a
 |
dog_bôD©a
;

126 *
dog_outD©a
 &
dog_bôNŸD©a
;

127 
vÆ
 <<= 1;

134 *
dog_outClock
 |
dog_bôClock
;

135 
˙t
--;

136 *
dog_outClock
 &
dog_bôNŸClock
;

141 
dog_pic32_•i_tmp
 = *
dog_outClock
;

142 
dog_pic32_•i_tmp
 = *
dog_outClock
;

143 
dog_pic32_•i_tmp
 = *
dog_outClock
;

144 }  
˙t
 != 0 );

145 
	}
}

150 
	$u8g_com_¨duöo_öô_shi·_out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
)

152 
	}
}

154 
	$u8g_com_¨duöo_do_shi·_out_msb_fú°
(
uöt8_t
 
vÆ
)

156 
	}
}

161 
uöt8_t
 
	$u8g_com_¨duöo_sw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

163 
msg
)

165 
U8G_COM_MSG_INIT
:

166 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

167 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_SCK
, 
LOW
);

168 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_MOSI
, 
LOW
);

169 
	`u8g_com_¨duöo_öô_shi·_out
(
u8g
->
pö_li°
[
U8G_PI_MOSI
], u8g->pö_li°[
U8G_PI_SCK
]);

172 
U8G_COM_MSG_STOP
:

175 
U8G_COM_MSG_RESET
:

176 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

177 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

180 
U8G_COM_MSG_CHIP_SELECT
:

181 i‡–
¨g_vÆ
 == 0 )

184 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
HIGH
);

189 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_SCK
, 
LOW
);

190 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
LOW
);

194 
U8G_COM_MSG_WRITE_BYTE
:

195 
	`u8g_com_¨duöo_do_shi·_out_msb_fú°
–
¨g_vÆ
 );

199 
U8G_COM_MSG_WRITE_SEQ
:

201 
uöt8_t
 *
±r
 = 
¨g_±r
;

202  
¨g_vÆ
 > 0 )

204 
	`u8g_com_¨duöo_do_shi·_out_msb_fú°
(*
±r
++);

206 
¨g_vÆ
--;

211 
U8G_COM_MSG_WRITE_SEQ_P
:

213 
uöt8_t
 *
±r
 = 
¨g_±r
;

214  
¨g_vÆ
 > 0 )

216 
	`u8g_com_¨duöo_do_shi·_out_msb_fú°
–
	`u8g_pgm_ªad
(
±r
) );

218 
±r
++;

219 
¨g_vÆ
--;

224 
U8G_COM_MSG_ADDRESS
:

225 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 
¨g_vÆ
);

229 
	}
}

233 
uöt8_t
 
	$u8g_com_¨duöo_sw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

236 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_arduino_t6963.c

55 
	~"u8g.h
"

57 #i‡ 
deföed
(
ARDUINO
)

59 #i‡
ARDUINO
 < 100

61 
	~<wúög_¥iv©e.h
>

62 
	~<pös_¨duöo.h
>

64 
	~<Arduöo.h
>

68 #i‡
deföed
(
__PIC32MX
)

70 vﬁ©ûê
uöt32_t
 *
	gu8g_ouçut_d©a_p‹t
[8];

71 vﬁ©ûê
uöt32_t
 *
	gu8g_öput_d©a_p‹t
[8];

72 vﬁ©ûê
uöt32_t
 *
	gu8g_mode_p‹t
[8];

73 
uöt32_t
 
	gu8g_d©a_mask
[8];

75 vﬁ©ûê
uöt8_t
 *
	gu8g_ouçut_d©a_p‹t
[8];

76 vﬁ©ûê
uöt8_t
 *
	gu8g_öput_d©a_p‹t
[8];

77 vﬁ©ûê
uöt8_t
 *
	gu8g_mode_p‹t
[8];

78 
uöt8_t
 
	gu8g_d©a_mask
[8];

83 
	$u8g_com_¨duöo_t6963_öô
(
u8g_t
 *
u8g
)

85 
u8g_ouçut_d©a_p‹t
[0] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D0
]));

86 
u8g_öput_d©a_p‹t
[0] = 
	`p‹tI≈utRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D0
]));

87 
u8g_mode_p‹t
[0] = 
	`p‹tModeRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D0
]));

88 
u8g_d©a_mask
[0] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D0
]);

90 
u8g_ouçut_d©a_p‹t
[1] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D1
]));

91 
u8g_öput_d©a_p‹t
[1] = 
	`p‹tI≈utRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D1
]));

92 
u8g_mode_p‹t
[1] = 
	`p‹tModeRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D1
]));

93 
u8g_d©a_mask
[1] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D1
]);

95 
u8g_ouçut_d©a_p‹t
[2] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D2
]));

96 
u8g_öput_d©a_p‹t
[2] = 
	`p‹tI≈utRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D2
]));

97 
u8g_mode_p‹t
[2] = 
	`p‹tModeRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D2
]));

98 
u8g_d©a_mask
[2] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D2
]);

100 
u8g_ouçut_d©a_p‹t
[3] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D3
]));

101 
u8g_öput_d©a_p‹t
[3] = 
	`p‹tI≈utRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D3
]));

102 
u8g_mode_p‹t
[3] = 
	`p‹tModeRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D3
]));

103 
u8g_d©a_mask
[3] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D3
]);

105 
u8g_ouçut_d©a_p‹t
[4] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D4
]));

106 
u8g_öput_d©a_p‹t
[4] = 
	`p‹tI≈utRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D4
]));

107 
u8g_mode_p‹t
[4] = 
	`p‹tModeRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D4
]));

108 
u8g_d©a_mask
[4] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D4
]);

110 
u8g_ouçut_d©a_p‹t
[5] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D5
]));

111 
u8g_öput_d©a_p‹t
[5] = 
	`p‹tI≈utRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D5
]));

112 
u8g_mode_p‹t
[5] = 
	`p‹tModeRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D5
]));

113 
u8g_d©a_mask
[5] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D5
]);

115 
u8g_ouçut_d©a_p‹t
[6] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D6
]));

116 
u8g_öput_d©a_p‹t
[6] = 
	`p‹tI≈utRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D6
]));

117 
u8g_mode_p‹t
[6] = 
	`p‹tModeRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D6
]));

118 
u8g_d©a_mask
[6] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D6
]);

120 
u8g_ouçut_d©a_p‹t
[7] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D7
]));

121 
u8g_öput_d©a_p‹t
[7] = 
	`p‹tI≈utRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D7
]));

122 
u8g_mode_p‹t
[7] = 
	`p‹tModeRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D7
]));

123 
u8g_d©a_mask
[7] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D7
]);

124 
	}
}

126 
	$u8g_com_¨duöo_t6963_wrôe_d©a_pö
(
uöt8_t
 
pö
, uöt8_à
vÆ
)

128 i‡–
vÆ
 != 0 )

129 *
u8g_ouçut_d©a_p‹t
[
pö
] |
u8g_d©a_mask
[pin];

131 *
u8g_ouçut_d©a_p‹t
[
pö
] &~
u8g_d©a_mask
[pin];

132 
	}
}

134 
	$u8g_com_¨duöo_t6963_£t_p‹t_ouçut
()

136 
uöt8_t
 
i
;

137  
i
 = 0; i < 8; i++ )

139 #i‡
	`deföed
(
__PIC32MX
)

141 *
u8g_mode_p‹t
[
i
] |
u8g_d©a_mask
[i];

142 #ñi‡
	`deföed
(
__AVR__
)

143 *
u8g_mode_p‹t
[
i
] |
u8g_d©a_mask
[i];

146 *
u8g_mode_p‹t
[
i
] |
u8g_d©a_mask
[i];

150 
	}
}

152 
	$u8g_com_¨duöo_t6963_£t_p‹t_öput
()

154 
uöt8_t
 
i
;

155  
i
 = 0; i < 8; i++ )

157 #i‡
	`deföed
(
__PIC32MX
)

159 *
u8g_mode_p‹t
[
i
] &~
u8g_d©a_mask
[i];

160 #ñi‡
	`deföed
(
__AVR__
)

162 *
u8g_mode_p‹t
[
i
] &~
u8g_d©a_mask
[i];

163 *
u8g_ouçut_d©a_p‹t
[
i
] &~
u8g_d©a_mask
[i];

166 *
u8g_mode_p‹t
[
i
] &~
u8g_d©a_mask
[i];

167 *
u8g_ouçut_d©a_p‹t
[
i
] &~
u8g_d©a_mask
[i];

170 
	}
}

173 
	$u8g_com_¨duöo_t6963_wrôe
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

175 
	`u8g_com_¨duöo_t6963_wrôe_d©a_pö
–0, 
vÆ
&1 );

176 
vÆ
 >>= 1;

177 
	`u8g_com_¨duöo_t6963_wrôe_d©a_pö
–1, 
vÆ
&1 );

178 
vÆ
 >>= 1;

179 
	`u8g_com_¨duöo_t6963_wrôe_d©a_pö
–2, 
vÆ
&1 );

180 
vÆ
 >>= 1;

181 
	`u8g_com_¨duöo_t6963_wrôe_d©a_pö
–3, 
vÆ
&1 );

182 
vÆ
 >>= 1;

184 
	`u8g_com_¨duöo_t6963_wrôe_d©a_pö
–4, 
vÆ
&1 );

185 
vÆ
 >>= 1;

186 
	`u8g_com_¨duöo_t6963_wrôe_d©a_pö
–5, 
vÆ
&1 );

187 
vÆ
 >>= 1;

188 
	`u8g_com_¨duöo_t6963_wrôe_d©a_pö
–6, 
vÆ
&1 );

189 
vÆ
 >>= 1;

190 
	`u8g_com_¨duöo_t6963_wrôe_d©a_pö
–7, 
vÆ
&1 );

191 
vÆ
 >>= 1;

193 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_WR
, 0);

194 
	`u8g_Mi¸oDñay
();

195 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_WR
, 1);

196 
	`u8g_Mi¸oDñay
();

197 
	}
}

199 
uöt8_t
 
	$u8g_com_¨duöo_t6963_ªad
(
u8g_t
 *
u8g
)

201 
uöt8_t
 
vÆ
 = 0;

203 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RD
, 0);

204 
	`u8g_Mi¸oDñay
();

207 i‡–(*
u8g_öput_d©a_p‹t
[3] & 
u8g_d©a_mask
[3]) != 0 )

208 
vÆ
++;

209 
vÆ
 <<= 1;

210 
vÆ
 <<= 1;

211 i‡–(*
u8g_öput_d©a_p‹t
[1] & 
u8g_d©a_mask
[1]) != 0 )

212 
vÆ
++;

213 
vÆ
 <<= 1;

214 i‡–(*
u8g_öput_d©a_p‹t
[0] & 
u8g_d©a_mask
[0]) != 0 )

215 
vÆ
++;

217 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RD
, 1);

218 
	`u8g_Mi¸oDñay
();

220  
vÆ
;

221 
	}
}

223 
	#U8G_STATUS_TIMEOUT
 50

	)

225 
uöt8_t
 
	$u8g_com_¨duöo_t6963_u¡û_01_ok
(
u8g_t
 *
u8g
)

227 
x
;

229 
	`u8g_com_¨duöo_t6963_£t_p‹t_öput
();

230 
x
 = 
	`mûlis
();

231 
x
 +
U8G_STATUS_TIMEOUT
;

235 i‡–(
	`u8g_com_¨duöo_t6963_ªad
(
u8g
) & 3) == 3 )

237 i‡–
x
 < 
	`mûlis
() )

240 
	`u8g_com_¨duöo_t6963_£t_p‹t_ouçut
();

242 
	}
}

244 
uöt8_t
 
	$u8g_com_¨duöo_t6963_u¡û_3_ok
(
u8g_t
 *
u8g
)

246 
x
;

248 
	`u8g_com_¨duöo_t6963_£t_p‹t_öput
();

249 
x
 = 
	`mûlis
();

250 
x
 +
U8G_STATUS_TIMEOUT
;

254 i‡–(
	`u8g_com_¨duöo_t6963_ªad
(
u8g
) & 8) == 8 )

256 i‡–
x
 < 
	`mûlis
() )

259 
	`u8g_com_¨duöo_t6963_£t_p‹t_ouçut
();

261 
	}
}

263 
uöt8_t
 
	$u8g_com_¨duöo_t6963_wrôe_cmd
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

265 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 1);

266 i‡–
	`u8g_com_¨duöo_t6963_u¡û_01_ok
(
u8g
) == 0 )

268 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 1);

269 
	`u8g_com_¨duöo_t6963_wrôe
(
u8g
, 
vÆ
);

271 
	}
}

273 
uöt8_t
 
	$u8g_com_¨duöo_t6963_wrôe_d©a
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

275 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 1);

276 i‡–
	`u8g_com_¨duöo_t6963_u¡û_01_ok
(
u8g
) == 0 )

278 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 0);

279 
	`u8g_com_¨duöo_t6963_wrôe
(
u8g
, 
vÆ
);

281 
	}
}

283 
uöt8_t
 
	$u8g_com_¨duöo_t6963_wrôe_auto_d©a
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

285 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 1);

286 i‡–
	`u8g_com_¨duöo_t6963_u¡û_3_ok
(
u8g
) == 0 )

288 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 0);

289 
	`u8g_com_¨duöo_t6963_wrôe
(
u8g
, 
vÆ
);

291 
	}
}

294 
uöt8_t
 
	$u8g_com_¨duöo_t6963_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

296 
msg
)

298 
U8G_COM_MSG_INIT
:

299 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 0;

300 
	`u8g_com_¨duöo_t6963_öô
(
u8g
);

302 i‡–
u8g
->
pö_li°
[
U8G_PI_WR
] !
U8G_PIN_NONE
 )

304 
	`pöMode
(
u8g
->
pö_li°
[
U8G_PI_WR
], 
OUTPUT
);

305 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_WR
, 
HIGH
);

308 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

310 
U8G_COM_MSG_STOP
:

313 
U8G_COM_MSG_CHIP_SELECT
:

314 i‡–
¨g_vÆ
 == 0 )

317 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
HIGH
);

322 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
LOW
);

325 
U8G_COM_MSG_WRITE_BYTE
:

326 i‡–
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] == 0 )

328 
	`u8g_com_¨duöo_t6963_wrôe_d©a
(
u8g
, 
¨g_vÆ
);

332 
	`u8g_com_¨duöo_t6963_wrôe_cmd
(
u8g
, 
¨g_vÆ
);

335 
U8G_COM_MSG_WRITE_SEQ
:

337 
uöt8_t
 *
±r
 = 
¨g_±r
;

338 
	`u8g_com_¨duöo_t6963_wrôe_cmd
(
u8g
, 0x0b0);

339  
¨g_vÆ
 > 0 )

341 i‡–
	`u8g_com_¨duöo_t6963_wrôe_auto_d©a
(
u8g
, *
±r
++) == 0 )

343 
¨g_vÆ
--;

345 
	`u8g_com_¨duöo_t6963_wrôe_cmd
(
u8g
, 0x0b2);

348 
U8G_COM_MSG_WRITE_SEQ_P
:

350 
uöt8_t
 *
±r
 = 
¨g_±r
;

351 
	`u8g_com_¨duöo_t6963_wrôe_cmd
(
u8g
, 0x0b0);

352  
¨g_vÆ
 > 0 )

354 i‡–
	`u8g_com_¨duöo_t6963_wrôe_auto_d©a
(
u8g
, 
	`u8g_pgm_ªad
(
±r
)) == 0 )

356 
±r
++;

357 
¨g_vÆ
--;

359 
	`u8g_com_¨duöo_t6963_wrôe_cmd
(
u8g
, 0x0b2);

362 
U8G_COM_MSG_ADDRESS
:

363 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 
¨g_vÆ
;

366 
U8G_COM_MSG_RESET
:

367 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

368 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

373 
	}
}

378 
uöt8_t
 
	$u8g_com_¨duöo_t6963_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

381 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_atmega_hw_spi.c

42 
	~"u8g.h
"

45 #i‡
deföed
(
__AVR__
)

46 
	#U8G_ATMEGA_HW_SPI


	)

49 #i‡
__AVR_ARCH__
 == 2

50 #unde‡
U8G_ATMEGA_HW_SPI


52 #i‡
__AVR_ARCH__
 == 25

53 #unde‡
U8G_ATMEGA_HW_SPI


58 #i‡
deföed
(
U8G_ATMEGA_HW_SPI
)

60 
	~<avr/öãºu±.h
>

61 
	~<avr/io.h
>

64 
uöt8_t
 
	$u8g_©mega_•i_out
(
uöt8_t
 
d©a
)

68 
SPDR
 = 
d©a
;

70 !(
SPSR
 & (1<<
SPIF
)))

73  
SPDR
;

74 
	}
}

77 
uöt8_t
 
	$u8g_com_©mega_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

79 
msg
)

81 
U8G_COM_MSG_STOP
:

84 
U8G_COM_MSG_INIT
:

86 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_CS
);

87 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_A0
);

89 
DDRB
 |
	`_BV
(3);

90 
DDRB
 |
	`_BV
(5);

91 
DDRB
 |
	`_BV
(2);

93 
PORTB
 &~
	`_BV
(3);

94 
PORTB
 &~
	`_BV
(5);

95 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 1);

104 
SPCR
 = 0;

105 
SPCR
 = (1<<
SPE
Ë| (1<<
MSTR
)|(0<<
SPR1
)|(0<<
SPR0
)|(0<<
CPOL
)|(0<<
CPHA
);

106 #ifde‡
U8G_HW_SPI_2X


107 
SPSR
 = (1 << 
SPI2X
);

112 
U8G_COM_MSG_ADDRESS
:

113 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_A0
, 
¨g_vÆ
);

116 
U8G_COM_MSG_CHIP_SELECT
:

118 i‡–
¨g_vÆ
 == 0 )

121 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 1);

125 
PORTB
 &~
	`_BV
(5);

127 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 0);

132 
U8G_COM_MSG_RESET
:

133 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

136 
U8G_COM_MSG_WRITE_BYTE
:

137 
	`u8g_©mega_•i_out
(
¨g_vÆ
);

140 
U8G_COM_MSG_WRITE_SEQ
:

142 
uöt8_t
 *
±r
 = 
¨g_±r
;

143  
¨g_vÆ
 > 0 )

145 
	`u8g_©mega_•i_out
(*
±r
++);

146 
¨g_vÆ
--;

150 
U8G_COM_MSG_WRITE_SEQ_P
:

152 
uöt8_t
 *
±r
 = 
¨g_±r
;

153  
¨g_vÆ
 > 0 )

155 
	`u8g_©mega_•i_out
(
	`u8g_pgm_ªad
(
±r
));

156 
±r
++;

157 
¨g_vÆ
--;

163 
	}
}

167 
uöt8_t
 
	$u8g_com_©mega_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

170 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_atmega_parallel.c

55 
	~"u8g.h
"

57 #i‡
deföed
(
__AVR__
)

59 
	$u8g_com_©mega_∑øŒñ_wrôe
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
Ë
U8G_NOINLINE
;

60 
	$u8g_com_©mega_∑øŒñ_wrôe
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

63 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_D0
, 
vÆ
&1);

64 
vÆ
 >>= 1;

65 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_D1
, 
vÆ
&1);

66 
vÆ
 >>= 1;

67 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_D2
, 
vÆ
&1);

68 
vÆ
 >>= 1;

69 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_D3
, 
vÆ
&1);

70 
vÆ
 >>= 1;

71 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_D4
, 
vÆ
&1);

72 
vÆ
 >>= 1;

73 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_D5
, 
vÆ
&1);

74 
vÆ
 >>= 1;

75 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_D6
, 
vÆ
&1);

76 
vÆ
 >>= 1;

77 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_D7
, 
vÆ
&1);

80 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_EN
, 1);

81 
	`u8g_Mi¸oDñay
();

82 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_EN
, 0);

83 
	`u8g_10Mi¸oDñay
();

84 
	`u8g_10Mi¸oDñay
();

85 
	}
}

88 
uöt8_t
 
	$u8g_com_©mega_∑øŒñ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

90 
msg
)

92 
U8G_COM_MSG_INIT
:

94 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_RW
);

95 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_RW
, 0);

97 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_D0
);

98 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_D1
);

99 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_D2
);

100 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_D3
);

101 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_D4
);

102 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_D5
);

103 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_D6
);

104 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_D7
);

105 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_EN
);

106 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_CS1
);

107 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_CS2
);

108 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_DI
);

109 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS1
, 1);

110 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS2
, 1);

113 
U8G_COM_MSG_STOP
:

115 
U8G_COM_MSG_CHIP_SELECT
:

116 i‡–
¨g_vÆ
 == 0 )

119 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS1
, 1);

120 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS2
, 1);

122 i‡–
¨g_vÆ
 == 1 )

125 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS1
, 0);

126 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS2
, 1);

128 i‡–
¨g_vÆ
 == 2 )

131 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS1
, 1);

132 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS2
, 0);

137 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS1
, 0);

138 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS2
, 0);

141 
U8G_COM_MSG_WRITE_BYTE
:

142 
	`u8g_com_©mega_∑øŒñ_wrôe
(
u8g
, 
¨g_vÆ
);

144 
U8G_COM_MSG_WRITE_SEQ
:

146 
uöt8_t
 *
±r
 = 
¨g_±r
;

147  
¨g_vÆ
 > 0 )

149 
	`u8g_com_©mega_∑øŒñ_wrôe
(
u8g
, *
±r
++);

150 
¨g_vÆ
--;

154 
U8G_COM_MSG_WRITE_SEQ_P
:

156 
uöt8_t
 *
±r
 = 
¨g_±r
;

157  
¨g_vÆ
 > 0 )

159 
	`u8g_com_©mega_∑øŒñ_wrôe
(
u8g
, 
	`u8g_pgm_ªad
(
±r
));

160 
±r
++;

161 
¨g_vÆ
--;

165 
U8G_COM_MSG_ADDRESS
:

166 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_DI
, 
¨g_vÆ
);

168 
U8G_COM_MSG_RESET
:

169 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

173 
	}
}

177 
uöt8_t
 
	$u8g_com_©mega_∑øŒñ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

180 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_atmega_st7920_hw_spi.c

44 
	~"u8g.h
"

46 #i‡
deföed
(
__AVR__
)

47 
	#U8G_ATMEGA_HW_SPI


	)

50 #i‡
__AVR_ARCH__
 == 2

51 #unde‡
U8G_ATMEGA_HW_SPI


53 #i‡
__AVR_ARCH__
 == 25

54 #unde‡
U8G_ATMEGA_HW_SPI


59 #i‡
deföed
(
U8G_ATMEGA_HW_SPI
)

61 
	~<avr/öãºu±.h
>

62 
	~<avr/io.h
>

64 
uöt8_t
 
	$u8g_©mega_°7920_hw_•i_shi·_out
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
Ë
U8G_NOINLINE
;

65 
uöt8_t
 
	$u8g_©mega_°7920_hw_•i_shi·_out
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

68 
SPDR
 = 
vÆ
;

70 !(
SPSR
 & (1<<
SPIF
)))

73  
SPDR
;

74 
	}
}

77 
	$u8g_com_©mega_°7920_wrôe_byã_hw_•i
(
u8g_t
 *
u8g
, 
uöt8_t
 
rs
, uöt8_à
vÆ
Ë
U8G_NOINLINE
;

78 
	$u8g_com_©mega_°7920_wrôe_byã_hw_•i
(
u8g_t
 *
u8g
, 
uöt8_t
 
rs
, uöt8_à
vÆ
)

80 
uöt8_t
 
i
;

82 i‡–
rs
 == 0 )

85 
	`u8g_©mega_°7920_hw_•i_shi·_out
(
u8g
, 0x0f8);

87 i‡–
rs
 == 1 )

90 
	`u8g_©mega_°7920_hw_•i_shi·_out
(
u8g
, 0x0fa);

93 
	`u8g_©mega_°7920_hw_•i_shi·_out
(
u8g
, 
vÆ
 & 0x0f0);

94 
	`u8g_©mega_°7920_hw_•i_shi·_out
(
u8g
, 
vÆ
 << 4);

96  
i
 = 0; i < 4; i++ )

97 
	`u8g_10Mi¸oDñay
();

98 
	}
}

101 
uöt8_t
 
	$u8g_com_©mega_°7920_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

103 
msg
)

105 
U8G_COM_MSG_INIT
:

106 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_CS
);

109 
DDRB
 |
	`_BV
(3);

110 
DDRB
 |
	`_BV
(5);

111 
DDRB
 |
	`_BV
(2);

113 
PORTB
 &~
	`_BV
(3);

114 
PORTB
 &~
	`_BV
(5);

115 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 1);

124 
SPCR
 = 0;

128 
SPCR
 = (1<<
SPE
Ë| (1<<
MSTR
)|(0<<
SPR1
)|(0<<
SPR0
)|(0<<
CPOL
)|(0<<
CPHA
);

129 #ifde‡
U8G_HW_SPI_2X


130 
SPSR
 = (1 << 
SPI2X
);

132 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 0;

135 
U8G_COM_MSG_STOP
:

138 
U8G_COM_MSG_RESET
:

139 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

142 
U8G_COM_MSG_ADDRESS
:

143 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 
¨g_vÆ
;

146 
U8G_COM_MSG_CHIP_SELECT
:

147 i‡–
¨g_vÆ
 == 0 )

150 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 0);

156 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 1);

161 
U8G_COM_MSG_WRITE_BYTE
:

162 
	`u8g_com_©mega_°7920_wrôe_byã_hw_•i
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], 
¨g_vÆ
);

166 
U8G_COM_MSG_WRITE_SEQ
:

168 
uöt8_t
 *
±r
 = 
¨g_±r
;

169  
¨g_vÆ
 > 0 )

171 
	`u8g_com_©mega_°7920_wrôe_byã_hw_•i
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], *
±r
++);

173 
¨g_vÆ
--;

178 
U8G_COM_MSG_WRITE_SEQ_P
:

180 
uöt8_t
 *
±r
 = 
¨g_±r
;

181  
¨g_vÆ
 > 0 )

183 
	`u8g_com_©mega_°7920_wrôe_byã_hw_•i
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], 
	`u8g_pgm_ªad
(
±r
));

185 
±r
++;

186 
¨g_vÆ
--;

192 
	}
}

197 
uöt8_t
 
	$u8g_com_©mega_°7920_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

200 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_atmega_st7920_spi.c

38 
	~"u8g.h
"

40 #i‡
deföed
(
__AVR__
)

42 
	$u8g_©mega_°7920_sw_•i_shi·_out
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
Ë
U8G_NOINLINE
;

43 
	$u8g_©mega_°7920_sw_•i_shi·_out
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

45 
uöt8_t
 
i
 = 8;

48 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_MOSI
, 
vÆ
 & 128 );

49 
vÆ
 <<= 1;

50 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_SCK
, 1 );

51 
	`u8g_Mi¸oDñay
();

52 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_SCK
, 0 );

53 
	`u8g_Mi¸oDñay
();

54 
i
--;

55 }  
i
 != 0 );

56 
	}
}

58 
	$u8g_com_©mega_°7920_wrôe_byã
(
u8g_t
 *
u8g
, 
uöt8_t
 
rs
, uöt8_à
vÆ
Ë
U8G_NOINLINE
;

59 
	$u8g_com_©mega_°7920_wrôe_byã
(
u8g_t
 *
u8g
, 
uöt8_t
 
rs
, uöt8_à
vÆ
)

61 
uöt8_t
 
i
;

63 i‡–
rs
 == 0 )

66 
	`u8g_©mega_°7920_sw_•i_shi·_out
(
u8g
, 0x0f8);

68 i‡–
rs
 == 1 )

71 
	`u8g_©mega_°7920_sw_•i_shi·_out
(
u8g
, 0x0fa);

74 
	`u8g_©mega_°7920_sw_•i_shi·_out
(
u8g
, 
vÆ
 & 0x0f0);

75 
	`u8g_©mega_°7920_sw_•i_shi·_out
(
u8g
, 
vÆ
 << 4);

77  
i
 = 0; i < 4; i++ )

78 
	`u8g_10Mi¸oDñay
();

79 
	}
}

82 
uöt8_t
 
	$u8g_com_©mega_°7920_sw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

84 
msg
)

86 
U8G_COM_MSG_INIT
:

87 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_SCK
);

88 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_MOSI
);

90 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_CS
);

91 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_RESET
);

93 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_SCK
, 0 );

94 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_MOSI
, 0 );

95 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 0 );

98 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 0;

101 
U8G_COM_MSG_STOP
:

104 
U8G_COM_MSG_RESET
:

105 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

108 
U8G_COM_MSG_ADDRESS
:

109 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 
¨g_vÆ
;

112 
U8G_COM_MSG_CHIP_SELECT
:

113 i‡–
¨g_vÆ
 == 0 )

116 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 0);

122 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 1);

127 
U8G_COM_MSG_WRITE_BYTE
:

128 
	`u8g_com_©mega_°7920_wrôe_byã
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], 
¨g_vÆ
);

129 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 2;

132 
U8G_COM_MSG_WRITE_SEQ
:

134 
uöt8_t
 *
±r
 = 
¨g_±r
;

135  
¨g_vÆ
 > 0 )

137 
	`u8g_com_©mega_°7920_wrôe_byã
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], *
±r
++);

138 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 2;

139 
¨g_vÆ
--;

144 
U8G_COM_MSG_WRITE_SEQ_P
:

146 
uöt8_t
 *
±r
 = 
¨g_±r
;

147  
¨g_vÆ
 > 0 )

149 
	`u8g_com_©mega_°7920_wrôe_byã
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], 
	`u8g_pgm_ªad
(
±r
));

150 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 2;

151 
±r
++;

152 
¨g_vÆ
--;

158 
	}
}

163 
uöt8_t
 
	$u8g_com_©mega_°7920_sw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

166 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_atmega_sw_spi.c

37 
	~"u8g.h
"

39 #i‡
deföed
(
__AVR__
)

41 
	$u8g_©mega_sw_•i_shi·_out
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
Ë
U8G_NOINLINE
;

42 
	$u8g_©mega_sw_•i_shi·_out
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

44 
uöt8_t
 
i
 = 8;

47 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_MOSI
, 
vÆ
 & 128 );

48 
vÆ
 <<= 1;

49 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_SCK
, 1 );

50 
	`u8g_Mi¸oDñay
();

51 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_SCK
, 0 );

52 
	`u8g_Mi¸oDñay
();

53 
i
--;

54 }  
i
 != 0 );

55 
	}
}

57 
uöt8_t
 
	$u8g_com_©mega_sw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

59 
msg
)

61 
U8G_COM_MSG_INIT
:

62 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_SCK
);

63 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_MOSI
);

64 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_A0
);

65 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_CS
);

66 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_RESET
);

68 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_SCK
, 0 );

69 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_MOSI
, 0 );

70 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 1 );

71 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_A0
, 0);

74 
U8G_COM_MSG_STOP
:

77 
U8G_COM_MSG_ADDRESS
:

78 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_A0
, 
¨g_vÆ
);

81 
U8G_COM_MSG_CHIP_SELECT
:

83 i‡–
¨g_vÆ
 == 0 )

86 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 1);

90 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_SCK
, 0 );

92 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 0);

96 
U8G_COM_MSG_RESET
:

97 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

101 
U8G_COM_MSG_WRITE_BYTE
:

102 
	`u8g_©mega_sw_•i_shi·_out
(
u8g
, 
¨g_vÆ
);

105 
U8G_COM_MSG_WRITE_SEQ
:

107 
uöt8_t
 *
±r
 = 
¨g_±r
;

108  
¨g_vÆ
 > 0 )

110 
	`u8g_©mega_sw_•i_shi·_out
(
u8g
, *
±r
++);

111 
¨g_vÆ
--;

116 
U8G_COM_MSG_WRITE_SEQ_P
:

118 
uöt8_t
 *
±r
 = 
¨g_±r
;

119  
¨g_vÆ
 > 0 )

121 
	`u8g_©mega_sw_•i_shi·_out
(
u8g
, 
	`u8g_pgm_ªad
(
±r
));

122 
±r
++;

123 
¨g_vÆ
--;

129 
	}
}

134 
uöt8_t
 
	$u8g_com_©mega_sw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

137 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_i2c.c

38 
	~"u8g.h
"

40 
uöt8_t
 
	gu8g_i2c_îr_code
;

47 
uöt8_t
 
	gu8g_i2c_îr_pos
;

50 
	$u8g_i2c_˛ór_îr‹
()

52 
u8g_i2c_îr_code
 = 
U8G_I2C_ERR_NONE
;

53 
u8g_i2c_îr_pos
 = 0;

54 
	}
}

56 
uöt8_t
 
	$u8g_i2c_gë_îr‹
()

58  
u8g_i2c_îr_code
;

59 
	}
}

61 
uöt8_t
 
	$u8g_i2c_gë_îr_pos
()

63  
u8g_i2c_îr_pos
;

64 
	}
}

66 
	$u8g_i2c_£t_îr‹
(
uöt8_t
 
code
, uöt8_à
pos
)

68 i‡–
u8g_i2c_îr_code
 > 0 )

70 
u8g_i2c_îr_code
 |
code
;

71 
u8g_i2c_îr_pos
 = 
pos
;

72 
	}
}

76 #i‡
deföed
(
__AVR__
)

77 
	#U8G_ATMEGA_HW_TWI


	)

80 #i‡
__AVR_ARCH__
 == 2

81 #unde‡
U8G_ATMEGA_HW_TWI


83 #i‡
__AVR_ARCH__
 == 25

84 #unde‡
U8G_ATMEGA_HW_TWI


88 #i‡
deföed
(
U8G_ATMEGA_HW_TWI
)

90 
	~<avr/io.h
>

91 
	~<utû/twi.h
>

95 
	$u8g_i2c_öô
(
uöt8_t
 
›ti⁄s
)

120 
TWSR
 = 0;

121 
TWBR
 = 
F_CPU
/(2*100000)-8;

122 
	`u8g_i2c_˛ór_îr‹
();

123 
	}
}

125 
uöt8_t
 
	$u8g_i2c_waô
(
uöt8_t
 
mask
, uöt8_à
pos
)

127 vﬁ©ûê
uöt16_t
 
˙t
 = 2000;

128  !(
TWCR
 & 
mask
) )

130 i‡–
˙t
 == 0 )

132 
	`u8g_i2c_£t_îr‹
(
U8G_I2C_ERR_TIMEOUT
, 
pos
);

135 
˙t
--;

138 
	}
}

141 
uöt8_t
 
	$u8g_i2c_°¨t
(
uöt8_t
 
¶a
)

143 
uöt8_t
 
°©us
;

146 
TWCR
 = 
	`_BV
(
TWINT
Ë| _BV(
TWSTA
Ë| _BV(
TWEN
);

149 i‡–
	`u8g_i2c_waô
(
	`_BV
(
TWINT
), 1) == 0 )

152 
°©us
 = 
TW_STATUS
;

155 i‡–
°©us
 !
TW_START
 && sètu†!
TW_REP_START
 )

157 
	`u8g_i2c_£t_îr‹
(
U8G_I2C_ERR_BUS
, 1);

162 
TWDR
 = 
¶a
;

165 
TWCR
 = 
	`_BV
(
TWINT
Ë| _BV(
TWEN
);

168 i‡–
	`u8g_i2c_waô
(
	`_BV
(
TWINT
), 2) == 0 )

170 
°©us
 = 
TW_STATUS
;

173 i‡–
°©us
 !
TW_MT_SLA_ACK
 )

175 
	`u8g_i2c_£t_îr‹
(
U8G_I2C_ERR_BUS
, 2);

180 
	}
}

182 
uöt8_t
 
	$u8g_i2c_£nd_byã
(
uöt8_t
 
d©a
)

184 
uöt8_t
 
°©us
;

185 
TWDR
 = 
d©a
;

186 
TWCR
 = 
	`_BV
(
TWINT
Ë| _BV(
TWEN
);

187 i‡–
	`u8g_i2c_waô
(
	`_BV
(
TWINT
), 3) == 0 )

189 
°©us
 = 
TW_STATUS
;

191 i‡–
°©us
 !
TW_MT_DATA_ACK
 )

193 
	`u8g_i2c_£t_îr‹
(
U8G_I2C_ERR_BUS
, 3);

198 
	}
}

200 
	$u8g_i2c_°›
()

203 
TWCR
 = 
	`_BV
(
TWINT
Ë| _BV(
TWEN
Ë| _BV(
TWSTO
);

206 
	`u8g_i2c_waô
(
	`_BV
(
TWSTO
), 4);

208 
	}
}

224 
	$u8g_i2c_öô
(
uöt8_t
 
›ti⁄s
)

226 
	`u8g_i2c_˛ór_îr‹
();

227 
	}
}

229 
uöt8_t
 
	$u8g_i2c_waô
(
uöt8_t
 
mask
, uöt8_à
pos
)

232 
	}
}

234 
uöt8_t
 
	$u8g_i2c_°¨t
(
uöt8_t
 
¶a
)

237 
	}
}

238 
uöt8_t
 
	$u8g_i2c_£nd_byã
(
uöt8_t
 
d©a
)

241 
	}
}

243 
	$u8g_i2c_°›
()

245 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_io.c

39 
	~"u8g.h
"

41 #i‡
deföed
(
__AVR__
)

43 
	~<avr/öãºu±.h
>

44 
	~<avr/io.h
>

46 vﬁ©ûê
	tuöt8_t
 * 
	tIO_PTR
;

49 
uöt8_t
 
	$u8g_Pö
(
uöt8_t
 
p‹t
, uöt8_à
bôpos
)

51 
p‹t
 <<= 3;

52 
p‹t
 +
bôpos
;

53  
p‹t
;

54 
	}
}

56 c⁄° 
IO_PTR
 
	gu8g_avr_ddr_P
[] 
	gPROGMEM
 = {

57 #ifde‡
DDRA


58 &
DDRA
,

62 &
DDRB
,

63 #ifde‡
DDRC


64 &
DDRC
,

65 #ifde‡
DDRD


66 &
DDRD
,

67 #ifde‡
DDRE


68 &
DDRE
,

69 #ifde‡
DDRF


70 &
DDRF
,

71 #ifde‡
DDRG


72 &
DDRG
,

73 #ifde‡
DDRH


74 &
DDRH
,

84 c⁄° 
IO_PTR
 
	gu8g_avr_p‹t_P
[] 
	gPROGMEM
 = {

85 #ifde‡
PORTA


86 &
PORTA
,

90 &
PORTB
,

91 #ifde‡
PORTC


92 &
PORTC
,

93 #ifde‡
PORTD


94 &
PORTD
,

95 #ifde‡
PORTE


96 &
PORTE
,

97 #ifde‡
PORTF


98 &
PORTF
,

99 #ifde‡
PORTG


100 &
PORTG
,

101 #ifde‡
PORTH


102 &
PORTH
,

111 c⁄° 
IO_PTR
 
	gu8g_avr_pö_P
[] 
	gPROGMEM
 = {

112 #ifde‡
PINA


113 &
PINA
,

117 &
PINB
,

118 #ifde‡
PINC


119 &
PINC
,

120 #ifde‡
PIND


121 &
PIND
,

122 #ifde‡
PINE


123 &
PINE
,

124 #ifde‡
PINF


125 &
PINF
,

126 #ifde‡
PING


127 &
PING
,

128 #ifde‡
PINH


129 &
PINH
,

138 vﬁ©ûê
uöt8_t
 *
	$u8g_gë_avr_io_±r
(c⁄° 
IO_PTR
 *
ba£
, 
uöt8_t
 
off£t
)

140 vﬁ©ûê
uöt8_t
 * 
tmp
;

141 
ba£
 +
off£t
;

142 
	`mem˝y_P
(&
tmp
, 
ba£
, (vﬁ©ûê
uöt8_t
 * 
PROGMEM
));

143  
tmp
;

144 
	}
}

147 
	$u8g_SëPöOuçut
(
uöt8_t
 
öã∫Æ_pö_numbî
)

149 *
	`u8g_gë_avr_io_±r
(
u8g_avr_ddr_P
, 
öã∫Æ_pö_numbî
>>3Ë|
	`_BV
(internal_pin_number&7);

150 
	}
}

152 
	$u8g_SëPöI≈ut
(
uöt8_t
 
öã∫Æ_pö_numbî
)

154 *
	`u8g_gë_avr_io_±r
(
u8g_avr_ddr_P
, 
öã∫Æ_pö_numbî
>>3Ë&~
	`_BV
(internal_pin_number&7);

155 
	}
}

157 
	$u8g_SëPöLevñ
(
uöt8_t
 
öã∫Æ_pö_numbî
, uöt8_à
Àvñ
)

159 vﬁ©ûê
uöt8_t
 * 
tmp
 = 
	`u8g_gë_avr_io_±r
(
u8g_avr_p‹t_P
, 
öã∫Æ_pö_numbî
>>3);

161 i‡–
Àvñ
 == 0 )

162 *
tmp
 &~
	`_BV
(
öã∫Æ_pö_numbî
&7);

164 *
tmp
 |
	`_BV
(
öã∫Æ_pö_numbî
&7);

165 
	}
}

167 
uöt8_t
 
	$u8g_GëPöLevñ
(
uöt8_t
 
öã∫Æ_pö_numbî
)

169 vﬁ©ûê
uöt8_t
 * 
tmp
 = 
	`u8g_gë_avr_io_±r
(
u8g_avr_pö_P
, 
öã∫Æ_pö_numbî
>>3);

170 i‡–((*
tmp
Ë& 
	`_BV
(
öã∫Æ_pö_numbî
&7)) != 0 )

173 
	}
}

177 
uöt8_t
 
	$u8g_Pö
(
uöt8_t
 
p‹t
, uöt8_à
bôpos
)

179 
p‹t
 <<= 3;

180 
p‹t
 +
bôpos
;

181  
p‹t
;

182 
	}
}

184 
	$u8g_SëPöOuçut
(
uöt8_t
 
öã∫Æ_pö_numbî
)

186 
	}
}

188 
	$u8g_SëPöI≈ut
(
uöt8_t
 
öã∫Æ_pö_numbî
)

190 
	}
}

192 
	$u8g_SëPöLevñ
(
uöt8_t
 
öã∫Æ_pö_numbî
, uöt8_à
Àvñ
)

194 
	}
}

196 
uöt8_t
 
	$u8g_GëPöLevñ
(
uöt8_t
 
öã∫Æ_pö_numbî
)

199 
	}
}

204 
	$u8g_SëPIOuçut
(
u8g_t
 *
u8g
, 
uöt8_t
 
pi
)

206 
uöt8_t
 
pö
;

207 
pö
 = 
u8g
->
pö_li°
[
pi
];

208 i‡–
pö
 !
U8G_PIN_NONE
 )

209 
	`u8g_SëPöOuçut
(
pö
);

210 
	}
}

212 
	$u8g_SëPILevñ
(
u8g_t
 *
u8g
, 
uöt8_t
 
pi
, uöt8_à
Àvñ
)

214 
uöt8_t
 
pö
;

215 
pö
 = 
u8g
->
pö_li°
[
pi
];

216 i‡–
pö
 !
U8G_PIN_NONE
 )

217 
	`u8g_SëPöLevñ
(
pö
, 
Àvñ
);

218 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_null.c

39 
	~"u8g.h
"

41 
uöt8_t
 
	$u8g_com_nuŒ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

43 
msg
)

45 
U8G_COM_MSG_INIT
:

47 
U8G_COM_MSG_STOP
:

51 
U8G_COM_MSG_CHIP_SELECT
:

56 
U8G_COM_MSG_WRITE_BYTE
:

58 
U8G_COM_MSG_WRITE_SEQ
:

62 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_cursor.c

37 
	~"u8g.h
"

39 
	$u8g_SëCurs‹F⁄t
(
u8g_t
 *
u8g
, c⁄° 
u8g_pgm_uöt8_t
 *
curs‹_f⁄t
)

41 
u8g
->
curs‹_f⁄t
 = cursor_font;

42 
	}
}

44 
	$u8g_SëCurs‹StyÀ
(
u8g_t
 *
u8g
, 
uöt8_t
 
ícodög
)

46 
u8g
->
curs‹_ícodög
 = 
ícodög
;

47 
	}
}

49 
	$u8g_SëCurs‹Cﬁ‹
(
u8g_t
 *
u8g
, 
uöt8_t
 
fg
, uöt8_à
bg
)

51 
u8g
->
curs‹_bg_cﬁ‹
 = 
bg
;

52 
u8g
->
curs‹_fg_cﬁ‹
 = 
fg
;

53 
	}
}

55 
	$u8g_SëCurs‹Pos
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
curs‹_x
, u8g_uöt_à
curs‹_y
)

57 
u8g
->
curs‹_x
 = cursor_x;

58 
u8g
->
curs‹_y
 = cursor_y;

59 
	}
}

61 
	$u8g_E«bÀCurs‹
(
u8g_t
 *
u8g
)

63 
u8g
->
curs‹_‚
 = 
u8g_DøwCurs‹
;

64 
	}
}

66 
	$u8g_DißbÀCurs‹
(
u8g_t
 *
u8g
)

68 
u8g
->
curs‹_‚
 = (
u8g_døw_curs‹_‚
)0;

69 
	}
}

71 
	$u8g_DøwCurs‹
(
u8g_t
 *
u8g
)

73 c⁄° 
u8g_pgm_uöt8_t
 *
f⁄t
;

74 
uöt8_t
 
cﬁ‹
;

75 
uöt8_t
 
ícodög
 = 
u8g
->
curs‹_ícodög
;

78 
cﬁ‹
 = 
	`u8g_GëCﬁ‹Index
(
u8g
);

79 
f⁄t
 = 
u8g
->font;

82 
u8g
->
f⁄t
 = u8g->
curs‹_f⁄t
;

83 
ícodög
++;

84 
	`u8g_SëCﬁ‹Index
(
u8g
, u8g->
curs‹_bg_cﬁ‹
);

87 
	`u8g_døw_glyph
(
u8g
, u8g->
curs‹_x
, u8g->
curs‹_y
, 
ícodög
);

88 
ícodög
--;

89 
	`u8g_SëCﬁ‹Index
(
u8g
, u8g->
curs‹_fg_cﬁ‹
);

93 
	`u8g_døw_glyph
(
u8g
, u8g->
curs‹_x
, u8g->
curs‹_y
, 
ícodög
);

96 
u8g
->
f⁄t
 = font;

97 
	`u8g_SëCﬁ‹Index
(
u8g
, 
cﬁ‹
);

98 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_delay.c

38 
	~"u8g.h
"

42 #i‡
deföed
(
ARDUINO
)

43 #i‡
deföed
(
__AVR__
)

44 
	#USE_AVR_DELAY


	)

45 #ñi‡
deföed
(
__PIC32MX
)

46 
	#USE_PIC32_DELAY


	)

47 #ñi‡
deföed
(
__¨m__
)

48 
	#USE_ARDUINO_DELAY


	)

50 
	#USE_ARDUINO_DELAY


	)

52 #ñi‡
deföed
(
__AVR__
)

53 
	#USE_AVR_DELAY


	)

54 #ñi‡
deföed
(
__18CXX
)

55 
	#USE_PIC18_DELAY


	)

57 
	#USE_DUMMY_DELAY


	)

66 #i‡
deföed
(
USE_AVR_DELAY
)

67 
	~<avr/öãºu±.h
>

68 
	~<avr/io.h
>

69 
	~<utû/dñay.h
>

89 
	$u8g_Dñay
(
uöt16_t
 
vÆ
)

92  
vÆ
 != 0 )

94 
	`_dñay_lo›_2
–(
F_CPU
 / 4000 ) -2);

95 
vÆ
--;

97 
	}
}

100 
	$u8g_Mi¸oDñay
()

102 #i‡(
F_CPU
 / 4000000 ) > 0

103 
	`_dñay_lo›_2
–(
F_CPU
 / 4000000 ) );

105 
	}
}

108 
	$u8g_10Mi¸oDñay
()

110 #i‡(
F_CPU
 / 400000 ) > 0

111 
	`_dñay_lo›_2
–(
F_CPU
 / 400000 ) );

113 
	}
}

120 #i‡
deföed
(
USE_PIC18_DELAY
)

121 
	~<dñays.h
>

122 
	#GëSy°emClock
() (64000000ul)

123 
	#GëIn°ru˘i⁄Clock
(Ë(
	`GëSy°emClock
()/4)

	)

125 
	$u8g_Dñay
(
uöt16_t
 
vÆ
)

131 
	}
}

132 
	$u8g_Mi¸oDñay
()

135 
	}
}

136 
	$u8g_10Mi¸oDñay
()

139 
	}
}

144 #i‡
deföed
(
USE_ARDUINO_DELAY
)

145 
	$u8g_Dñay
(
uöt16_t
 
vÆ
)

147 
	`dñay
(
vÆ
);

148 
	}
}

149 
	$u8g_Mi¸oDñay
()

151 
	`dñayMi¸o£c⁄ds
(1);

152 
	}
}

153 
	$u8g_10Mi¸oDñay
()

155 
	`dñayMi¸o£c⁄ds
(10);

156 
	}
}

159 #i‡
deföed
(
USE_PIC32_DELAY
)

167 
	#CPU_COUNTS_PER_SECOND
 (
F_CPU
/2UL)

	)

168 
	#TICKS_PER_MILLISECOND
 (
CPU_COUNTS_PER_SECOND
/1000UL)

	)

169 
	~"∂ib.h
"

170 
	$u8g_Dñay
(
uöt16_t
 
vÆ
)

172 
uöt32_t
 
d
;

173 
uöt32_t
 
s
;

174 
d
 = 
vÆ
;

175 
d
 *
TICKS_PER_MILLISECOND
;

176 
s
 = 
	`RódC‹eTimî
();

177  (
uöt32_t
)(
	`RódC‹eTimî
(Ë- 
s
Ë< 
d
 )

179 
	}
}

181 
	$u8g_Mi¸oDñay
()

183 
uöt32_t
 
d
;

184 
uöt32_t
 
s
;

185 
d
 = 
TICKS_PER_MILLISECOND
/1000;

186 
s
 = 
	`RódC‹eTimî
();

187  (
uöt32_t
)(
	`RódC‹eTimî
(Ë- 
s
Ë< 
d
 )

189 
	}
}

191 
	$u8g_10Mi¸oDñay
()

193 
uöt32_t
 
d
;

194 
uöt32_t
 
s
;

195 
d
 = 
TICKS_PER_MILLISECOND
/100;

196 
s
 = 
	`RódC‹eTimî
();

197  (
uöt32_t
)(
	`RódC‹eTimî
(Ë- 
s
Ë< 
d
 )

199 
	}
}

204 #i‡
deföed
(
USE_DUMMY_DELAY
)

205 
	$u8g_Dñay
(
uöt16_t
 
vÆ
)

208 
	}
}

209 
	$u8g_Mi¸oDñay
()

211 
	}
}

212 
	$u8g_10Mi¸oDñay
()

214 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_flipdisc_2x7.c

39 
	~"u8g.h
"

41 
	#WIDTH
 28

	)

42 
	#HEIGHT
 14

	)

43 
	#PAGE_HEIGHT
 14

	)

55 
wrôeFlùDiscM©rix
(
uöt8_t
 
id
, uöt8_à
∑ge
, uöt8_à
width
, uöt8_à*
row1
, uöt8_à*
row2
);

59 (*
u8g_wrôe_Êù_disc_m©rix
)(
uöt8_t
 
id
, uöt8_à
∑ge
, uöt8_à
width
, uöt8_à*
row1
, uöt8_à*
row2
);

61 
	`u8g_SëFlùDiscCÆlback
(
u8g_t
 *
u8g
, (*
cb
)(
uöt8_t
 
id
, uöt8_à
∑ge
, uöt8_à
width
, uöt8_à*
row1
, uöt8_à*
row2
))

63 
u8g_wrôe_Êù_disc_m©rix
 = 
cb
;

64 
	}
}

66 
uöt8_t
 
	$u8g_dev_Êùdisc_2x7_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

68 
msg
)

70 
U8G_DEV_MSG_INIT
:

72 
U8G_DEV_MSG_STOP
:

74 
U8G_DEV_MSG_PAGE_NEXT
:

76 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

81 (*
u8g_wrôe_Êù_disc_m©rix
)(0, 
pb
->
p
.
∑ge
, 
WIDTH
,Öb->
buf
,Öb->buf+WIDTH);

84 
U8G_DEV_MSG_CONTRAST
:

87  
	`u8g_dev_pb14v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

88 
	}
}

90 
uöt8_t
 
	gu8g_dev_Êùdisc_2x7_bw_buf
[
WIDTH
*2] 
	gU8G_NOCOMMON
 ;

91 
u8g_pb_t
 
	gu8g_dev_Êùdisc_2x7_bw_pb
 = { {16, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_Êùdisc_2x7_bw_buf
};

92 
u8g_dev_t
 
	gu8g_dev_Êùdisc_2x7
 = { 
u8g_dev_Êùdisc_2x7_bw_‚
, &
u8g_dev_Êùdisc_2x7_bw_pb
, 
u8g_com_nuŒ_‚
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_gprof.c

41 
	~"u8g.h
"

44 
	#WIDTH
 128

	)

45 
	#HEIGHT
 64

	)

46 
	#PAGE_HEIGHT
 8

	)

48 
uöt8_t
 
u8g_dev_g¥of_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

50 
uöt8_t
 
	gu8g_pb_dev_g¥of_buf
[
WIDTH
];

51 
u8g_pb_t
 
	gu8g_pb_dev_g¥of
 = { {
PAGE_HEIGHT
, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_pb_dev_g¥of_buf
 };

53 
u8g_dev_t
 
	gu8g_dev_g¥of
 = { 
u8g_dev_g¥of_‚
, &
u8g_pb_dev_g¥of
, 
NULL
 };

55 
uöt8_t
 
	$u8g_dev_g¥of_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

57 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

59 
msg
)

61 
U8G_DEV_MSG_INIT
:

63 
U8G_DEV_MSG_STOP
:

65 
U8G_DEV_MSG_PAGE_FIRST
:

66 
	`u8g_pb_CÀ¨
(
pb
);

67 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

69 
U8G_DEV_MSG_PAGE_NEXT
:

91 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

96 
	`u8g_pb_CÀ¨
(
pb
);

98 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


99 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

101 
u8g_dev_¨g_bbx_t
 *
bbx
 = (u8g_dev_¨g_bbx_à*)
¨g
;

102 
u8g_uöt_t
 
x2
, 
y2
;

104 
y2
 = 
bbx
->
y
;

105 
y2
 +
bbx
->
h
;

106 
y2
--;

108 i‡–
	`u8g_pb_IsYI¡î£˘i⁄
(
pb
, 
bbx
->
y
, 
y2
) == 0 )

112 
x2
 = 
bbx
->
x
;

113 
x2
 +
bbx
->
w
;

114 
x2
--;

116 i‡–
	`u8g_pb_IsXI¡î£˘i⁄
(
pb
, 
bbx
->
x
, 
x2
) == 0 )

121 
U8G_DEV_MSG_GET_PAGE_BOX
:

122 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

124 
U8G_DEV_MSG_SET_COLOR_INDEX
:

126 
U8G_DEV_MSG_SET_XY_CB
:

129  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

130 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_ili9325d_320x240.c

42 
	~"u8g.h
"

44 
	#WIDTH
 240

	)

46 #i‡
deföed
(
U8G_16BIT
)

47 
	#HEIGHT
 320

	)

50 
	#HEIGHT
 240

	)

52 
	#PAGE_HEIGHT
 4

	)

68 c⁄° 
uöt8_t
 
	gu8g_dev_ûi9325d_320x240_öô_£q
[] 
	gPROGMEM
 = {

69 
U8G_ESC_CS
(0),

70 
U8G_ESC_DLY
(50),

71 
U8G_ESC_RST
(15),

72 
U8G_ESC_DLY
(50),

73 
U8G_ESC_RST
(15),

74 
U8G_ESC_DLY
(50),

75 
U8G_ESC_CS
(1),

76 
U8G_ESC_DLY
(50),

81 
U8G_ESC_ADR
(0), 0x000, 0x001,

82 
U8G_ESC_ADR
(1), 0x001, 0x000,

83 
U8G_ESC_ADR
(0), 0x000, 0x002,

84 
U8G_ESC_ADR
(1), 0x002, 0x000,

85 
U8G_ESC_ADR
(0), 0x000, 0x003,

86 
U8G_ESC_ADR
(1), 0x010, 0x030,

87 
U8G_ESC_ADR
(0), 0x000, 0x004,

88 
U8G_ESC_ADR
(1), 0x000, 0x000,

89 
U8G_ESC_ADR
(0), 0x000, 0x008,

90 
U8G_ESC_ADR
(1), 0x002, 0x007,

92 
U8G_ESC_ADR
(0), 0x000, 0x009,

93 
U8G_ESC_ADR
(1), 0x000, 0x000,

95 
U8G_ESC_ADR
(0), 0x000, 0x00a,

96 
U8G_ESC_ADR
(1), 0x000, 0x000,

97 
U8G_ESC_ADR
(0), 0x000, 0x00c,

98 
U8G_ESC_ADR
(1), 0x000, 0x000,

99 
U8G_ESC_ADR
(0), 0x000, 0x00d,

100 
U8G_ESC_ADR
(1), 0x000, 0x000,

101 
U8G_ESC_ADR
(0), 0x000, 0x00f,

102 
U8G_ESC_ADR
(1), 0x000, 0x000,

103 
U8G_ESC_ADR
(0), 0x000, 0x010,

104 
U8G_ESC_ADR
(1), 0x000, 0x000,

105 
U8G_ESC_ADR
(0), 0x000, 0x011,

106 
U8G_ESC_ADR
(1), 0x000, 0x007,

107 
U8G_ESC_ADR
(0), 0x000, 0x012,

108 
U8G_ESC_ADR
(1), 0x000, 0x000,

109 
U8G_ESC_ADR
(0), 0x000, 0x013,

110 
U8G_ESC_ADR
(1), 0x000, 0x000,

111 
U8G_ESC_ADR
(0), 0x000, 0x007,

112 
U8G_ESC_ADR
(1), 0x000, 0x001,

114 
U8G_ESC_DLY
(100),

115 
U8G_ESC_DLY
(100),

117 
U8G_ESC_ADR
(0), 0x000, 0x010,

118 
U8G_ESC_ADR
(1), 0x016, 0x090,

119 
U8G_ESC_ADR
(0), 0x000, 0x011,

120 
U8G_ESC_ADR
(1), 0x002, 0x027,

122 
U8G_ESC_DLY
(50),

124 
U8G_ESC_ADR
(0), 0x000, 0x012,

125 
U8G_ESC_ADR
(1), 0x000, 0x00d,

127 
U8G_ESC_DLY
(50),

129 
U8G_ESC_ADR
(0), 0x000, 0x013,

130 
U8G_ESC_ADR
(1), 0x012, 0x000,

131 
U8G_ESC_ADR
(0), 0x000, 0x029,

132 
U8G_ESC_ADR
(1), 0x000, 0x00a,

133 
U8G_ESC_ADR
(0), 0x000, 0x02b,

134 
U8G_ESC_ADR
(1), 0x000, 0x00d,

136 
U8G_ESC_DLY
(50),

138 
U8G_ESC_ADR
(0), 0x000, 0x020,

139 
U8G_ESC_ADR
(1), 0x000, 0x000,

140 
U8G_ESC_ADR
(0), 0x000, 0x021,

141 
U8G_ESC_ADR
(1), 0x000, 0x000,

144 
U8G_ESC_ADR
(0), 0x000, 0x030,

145 
U8G_ESC_ADR
(1), 0x000, 0x000,

146 
U8G_ESC_ADR
(0), 0x000, 0x031,

147 
U8G_ESC_ADR
(1), 0x004, 0x004,

148 
U8G_ESC_ADR
(0), 0x000, 0x032,

149 
U8G_ESC_ADR
(1), 0x000, 0x003,

150 
U8G_ESC_ADR
(0), 0x000, 0x035,

151 
U8G_ESC_ADR
(1), 0x004, 0x005,

152 
U8G_ESC_ADR
(0), 0x000, 0x036,

153 
U8G_ESC_ADR
(1), 0x008, 0x008,

154 
U8G_ESC_ADR
(0), 0x000, 0x037,

155 
U8G_ESC_ADR
(1), 0x004, 0x007,

156 
U8G_ESC_ADR
(0), 0x000, 0x038,

157 
U8G_ESC_ADR
(1), 0x003, 0x003,

158 
U8G_ESC_ADR
(0), 0x000, 0x039,

159 
U8G_ESC_ADR
(1), 0x007, 0x007,

160 
U8G_ESC_ADR
(0), 0x000, 0x03c,

161 
U8G_ESC_ADR
(1), 0x005, 0x004,

162 
U8G_ESC_ADR
(0), 0x000, 0x03d,

163 
U8G_ESC_ADR
(1), 0x008, 0x008,

165 
U8G_ESC_ADR
(0), 0x000, 0x050,

166 
U8G_ESC_ADR
(1), 0x000, 0x000,

167 
U8G_ESC_ADR
(0), 0x000, 0x051,

168 
U8G_ESC_ADR
(1), 0x000, 0x0EF,

169 
U8G_ESC_ADR
(0), 0x000, 0x052,

170 
U8G_ESC_ADR
(1), 0x000, 0x000,

171 
U8G_ESC_ADR
(0), 0x000, 0x053,

172 
U8G_ESC_ADR
(1), 0x001, 0x03F,

174 
U8G_ESC_ADR
(0), 0x000, 0x060,

175 
U8G_ESC_ADR
(1), 0x0a7, 0x000,

176 
U8G_ESC_ADR
(0), 0x000, 0x061,

177 
U8G_ESC_ADR
(1), 0x000, 0x001,

178 
U8G_ESC_ADR
(0), 0x000, 0x06a,

179 
U8G_ESC_ADR
(1), 0x000, 0x000,

181 
U8G_ESC_ADR
(0), 0x000, 0x080,

182 
U8G_ESC_ADR
(1), 0x000, 0x000,

183 
U8G_ESC_ADR
(0), 0x000, 0x081,

184 
U8G_ESC_ADR
(1), 0x000, 0x000,

185 
U8G_ESC_ADR
(0), 0x000, 0x082,

186 
U8G_ESC_ADR
(1), 0x000, 0x000,

187 
U8G_ESC_ADR
(0), 0x000, 0x083,

188 
U8G_ESC_ADR
(1), 0x000, 0x000,

189 
U8G_ESC_ADR
(0), 0x000, 0x084,

190 
U8G_ESC_ADR
(1), 0x000, 0x000,

191 
U8G_ESC_ADR
(0), 0x000, 0x085,

192 
U8G_ESC_ADR
(1), 0x000, 0x000,

194 
U8G_ESC_ADR
(0), 0x000, 0x090,

195 
U8G_ESC_ADR
(1), 0x000, 0x010,

196 
U8G_ESC_ADR
(0), 0x000, 0x092,

197 
U8G_ESC_ADR
(1), 0x000, 0x000,

199 
U8G_ESC_ADR
(0), 0x000, 0x007,

200 
U8G_ESC_ADR
(1), 0x001, 0x033,

202 
U8G_ESC_DLY
(10),

205 
U8G_ESC_ADR
(0), 0x000, 0x020,

206 
U8G_ESC_ADR
(1), 0x000, 0x000,

207 
U8G_ESC_ADR
(0), 0x000, 0x021,

208 
U8G_ESC_ADR
(1), 0x000, 0x010,

209 
U8G_ESC_ADR
(0), 0x000, 0x022,

210 
U8G_ESC_ADR
(1), 0x0fe, 0x0fe,

228 
U8G_ESC_CS
(0),

229 
U8G_ESC_END


233 c⁄° 
uöt8_t
 
	gu8g_dev_ûi9325d_320x240_∑ge_£q
[] 
	gPROGMEM
 = {

234 
U8G_ESC_CS
(1),

235 
U8G_ESC_ADR
(0), 0x000, 0x020,

236 
U8G_ESC_ADR
(1), 0x000, 0x000,

237 
U8G_ESC_ADR
(0), 0x000, 0x021,

238 
U8G_ESC_ADR
(1),

239 
U8G_ESC_END


243 
uöt8_t
 
	$u8g_dev_ûi9325d_gë_65K_high_byã
(
uöt8_t
 
cﬁ‹
)

245 
uöt8_t
 
h
;

246 
h
 = 
cﬁ‹
;

247 
h
 &= 0x0e0;

248 
h
 |= h>>3;

249 
h
 &= 0x0f8;

250 
cﬁ‹
>>=2;

251 
cﬁ‹
 &= 7;

252 
h
 |
cﬁ‹
;

253  
h
;

254 
	}
}

257 
uöt8_t
 
	$u8g_dev_ûi9325d_gë_65K_low_byã
(
uöt8_t
 
cﬁ‹
)

259 
uöt8_t
 
l
;

260 
l
 = 
cﬁ‹
;

261 
l
 <<= 3;

262 
cﬁ‹
 &= 3;

263 
cﬁ‹
 <<= 1;

264 
l
 |
cﬁ‹
;

265  
l
;

266 
	}
}

269 
uöt8_t
 
	$u8g_dev_ûi9325d_320x240_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

272 
msg
)

274 
U8G_DEV_MSG_INIT
:

275 
	`u8g_InôCom
(
u8g
, 
dev
);

277 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ûi9325d_320x240_öô_£q
);

280 
U8G_DEV_MSG_STOP
:

282 
U8G_DEV_MSG_PAGE_NEXT
:

284 
uöt8_t
 
i
;

285 
uöt16_t
 
y
, 
j
;

286 
uöt8_t
 *
±r
;

287 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

289 
y
 = 
pb
->
p
.
∑ge_y0
;

290 
±r
 = 
pb
->
buf
;

291  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i ++ )

293 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ûi9325d_320x240_∑ge_£q
);

294 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
y
 >> 8 );

295 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
y
 & 255 );

297 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

298 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0 );

299 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x022 );

301 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

303  
j
 = 0; j < 
pb
->
width
; j++ )

305 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`u8g_dev_ûi9325d_gë_65K_high_byã
(*
±r
) );

306 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`u8g_dev_ûi9325d_gë_65K_low_byã
(*
±r
) );

308 
±r
++;

310 
y
++;

312 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

316  
	`u8g_dev_pb8h8_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

317 
	}
}

319 
uöt8_t
 
	gu8g_ûi9325d_320x240_8h8_buf
[
WIDTH
*
PAGE_HEIGHT
] 
	gU8G_NOCOMMON
 ;

320 
u8g_pb_t
 
u8g_ûi9325d_320x240_8h8_pb
 
	gU8G_NOCOMMON
 = { {
PAGE_HEIGHT
, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_ûi9325d_320x240_8h8_buf
};

321 
u8g_dev_t
 
u8g_dev_ûi9325d_320x240_8bô
 
	gU8G_NOCOMMON
 = { 
u8g_dev_ûi9325d_320x240_‚
, &
u8g_ûi9325d_320x240_8h8_pb
, 
u8g_com_¨duöo_p‹t_d_wr_‚
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_ks0108_128x64.c

47 
	~"u8g.h
"

49 
	#WIDTH
 128

	)

50 
	#HEIGHT
 64

	)

51 
	#PAGE_HEIGHT
 8

	)

53 c⁄° 
uöt8_t
 
	gu8g_dev_ks0108_128x64_öô_£q
[] 
	gPROGMEM
 = {

54 
U8G_ESC_CS
(0),

55 
U8G_ESC_ADR
(0),

56 
U8G_ESC_RST
(1),

57 
U8G_ESC_CS
(1),

60 
U8G_ESC_DLY
(20),

61 
U8G_ESC_CS
(2),

64 
U8G_ESC_DLY
(20),

65 
U8G_ESC_CS
(0),

66 
U8G_ESC_END


70 
uöt8_t
 
	$u8g_dev_ks0108_128x64_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

73 
msg
)

75 
U8G_DEV_MSG_INIT
:

76 
	`u8g_InôCom
(
u8g
, 
dev
);

77 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ks0108_128x64_öô_£q
);

79 
U8G_DEV_MSG_STOP
:

81 
U8G_DEV_MSG_PAGE_NEXT
:

83 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

85 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

86 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 2);

87 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b8 | 
pb
->
p
.
∑ge
);

88 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x040 );

89 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

90 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 64, 
pb
->
buf
);

91 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

93 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

94 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

95 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b8 | 
pb
->
p
.
∑ge
);

96 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x040 );

97 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

98 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 64, 64+(
uöt8_t
 *)
pb
->
buf
);

99 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

104  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

105 
	}
}

107 
U8G_PB_DEV
(
u8g_dev_ks0108_128x64
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ks0108_128x64_‚
, 
U8G_COM_PARALLEL
);

108 
U8G_PB_DEV
(
u8g_dev_ks0108_128x64_Á°
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ks0108_128x64_‚
, 
U8G_COM_FAST_PARALLEL
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_lc7981_160x80.c

37 
	~"u8g.h
"

39 
	#WIDTH
 160

	)

40 
	#HEIGHT
 80

	)

41 
	#PAGE_HEIGHT
 8

	)

52 c⁄° 
uöt8_t
 
	gu8g_dev_lc7981_160x80_öô_£q
[] 
	gPROGMEM
 = {

53 
U8G_ESC_CS
(0),

54 
U8G_ESC_ADR
(1),

55 
U8G_ESC_RST
(15),

56 
U8G_ESC_CS
(1),

57 
U8G_ESC_DLY
(50),

60 
U8G_ESC_ADR
(1),

62 
U8G_ESC_ADR
(0),

65 
U8G_ESC_ADR
(1),

67 
U8G_ESC_ADR
(0),

70 
U8G_ESC_ADR
(1),

72 
U8G_ESC_ADR
(0),

73 
WIDTH
/8-1,

75 
U8G_ESC_ADR
(1),

77 
U8G_ESC_ADR
(0),

80 
U8G_ESC_ADR
(1),

82 
U8G_ESC_ADR
(0),

85 
U8G_ESC_ADR
(1),

87 
U8G_ESC_ADR
(0),

90 
U8G_ESC_DLY
(10),

92 
U8G_ESC_CS
(0),

93 
U8G_ESC_END


96 
uöt8_t
 
	$u8g_dev_lc7981_160x80_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

98 
msg
)

100 
U8G_DEV_MSG_INIT
:

101 
	`u8g_InôCom
(
u8g
, 
dev
);

102 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_lc7981_160x80_öô_£q
);

104 
U8G_DEV_MSG_STOP
:

106 
U8G_DEV_MSG_PAGE_NEXT
:

108 
uöt8_t
 
y
, 
i
;

109 
uöt16_t
 
di•_øm_adr
;

110 
uöt8_t
 *
±r
;

111 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

113 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

114 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

115 
y
 = 
pb
->
p
.
∑ge_y0
;

116 
±r
 = 
pb
->
buf
;

117 
di•_øm_adr
 = 
WIDTH
/8;

118 
di•_øm_adr
 *
y
;

119  
i
 = 0; i < 8; i ++ )

121 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

122 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00a );

123 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

124 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
 & 0x0ff );

126 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

127 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00b );

128 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

129 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
 >> 8 );

131 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

132 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00c );

133 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

134 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

135 
±r
 +
WIDTH
/8;

136 
di•_øm_adr
 +
WIDTH
/8;

138 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

142  
	`u8g_dev_pb8h1f_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

143 
	}
}

145 
U8G_PB_DEV
(
u8g_dev_lc7981_160x80_8bô
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_lc7981_160x80_‚
, 
U8G_COM_FAST_PARALLEL
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_lc7981_240x128.c

39 
	~"u8g.h
"

41 
	#WIDTH
 240

	)

42 
	#HEIGHT
 128

	)

43 
	#PAGE_HEIGHT
 8

	)

50 c⁄° 
uöt8_t
 
	gu8g_dev_lc7981_240x128_öô_£q
[] 
	gPROGMEM
 = {

51 
U8G_ESC_CS
(0),

52 
U8G_ESC_ADR
(1),

53 
U8G_ESC_RST
(15),

54 
U8G_ESC_CS
(1),

55 
U8G_ESC_DLY
(50),

58 
U8G_ESC_ADR
(1),

60 
U8G_ESC_ADR
(0),

63 
U8G_ESC_ADR
(1),

65 
U8G_ESC_ADR
(0),

68 
U8G_ESC_ADR
(1),

70 
U8G_ESC_ADR
(0),

71 
WIDTH
/8-1,

73 
U8G_ESC_ADR
(1),

75 
U8G_ESC_ADR
(0),

78 
U8G_ESC_ADR
(1),

80 
U8G_ESC_ADR
(0),

83 
U8G_ESC_ADR
(1),

85 
U8G_ESC_ADR
(0),

88 
U8G_ESC_DLY
(10),

90 
U8G_ESC_CS
(0),

91 
U8G_ESC_END


94 
uöt8_t
 
	$u8g_dev_lc7981_240x128_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

96 
msg
)

98 
U8G_DEV_MSG_INIT
:

99 
	`u8g_InôCom
(
u8g
, 
dev
);

100 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_lc7981_240x128_öô_£q
);

102 
U8G_DEV_MSG_STOP
:

104 
U8G_DEV_MSG_PAGE_NEXT
:

106 
uöt8_t
 
y
, 
i
;

107 
uöt16_t
 
di•_øm_adr
;

108 
uöt8_t
 *
±r
;

109 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

111 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

112 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

113 
y
 = 
pb
->
p
.
∑ge_y0
;

114 
±r
 = 
pb
->
buf
;

115 
di•_øm_adr
 = 
WIDTH
/8;

116 
di•_øm_adr
 *
y
;

117  
i
 = 0; i < 8; i ++ )

119 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

120 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00a );

121 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

122 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
 & 0x0ff );

124 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

125 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00b );

126 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

127 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
 >> 8 );

129 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

130 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00c );

131 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

132 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

133 
±r
 +
WIDTH
/8;

134 
di•_øm_adr
 +
WIDTH
/8;

136 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

140  
	`u8g_dev_pb8h1f_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

141 
	}
}

143 
U8G_PB_DEV
(
u8g_dev_lc7981_240x128_8bô
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_lc7981_240x128_‚
, 
U8G_COM_FAST_PARALLEL
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_lc7981_240x64.c

39 
	~"u8g.h
"

41 
	#WIDTH
 240

	)

42 
	#HEIGHT
 64

	)

43 
	#PAGE_HEIGHT
 8

	)

50 c⁄° 
uöt8_t
 
	gu8g_dev_lc7981_240x64_öô_£q
[] 
	gPROGMEM
 = {

51 
U8G_ESC_CS
(0),

52 
U8G_ESC_ADR
(1),

53 
U8G_ESC_RST
(15),

54 
U8G_ESC_CS
(1),

55 
U8G_ESC_DLY
(50),

58 
U8G_ESC_ADR
(1),

60 
U8G_ESC_ADR
(0),

63 
U8G_ESC_ADR
(1),

65 
U8G_ESC_ADR
(0),

68 
U8G_ESC_ADR
(1),

70 
U8G_ESC_ADR
(0),

71 
WIDTH
/8-1,

73 
U8G_ESC_ADR
(1),

75 
U8G_ESC_ADR
(0),

78 
U8G_ESC_ADR
(1),

80 
U8G_ESC_ADR
(0),

83 
U8G_ESC_ADR
(1),

85 
U8G_ESC_ADR
(0),

88 
U8G_ESC_DLY
(10),

90 
U8G_ESC_CS
(0),

91 
U8G_ESC_END


94 
uöt8_t
 
	$u8g_dev_lc7981_240x64_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

96 
msg
)

98 
U8G_DEV_MSG_INIT
:

99 
	`u8g_InôCom
(
u8g
, 
dev
);

100 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_lc7981_240x64_öô_£q
);

102 
U8G_DEV_MSG_STOP
:

104 
U8G_DEV_MSG_PAGE_NEXT
:

106 
uöt8_t
 
y
, 
i
;

107 
uöt16_t
 
di•_øm_adr
;

108 
uöt8_t
 *
±r
;

109 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

111 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

112 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

113 
y
 = 
pb
->
p
.
∑ge_y0
;

114 
±r
 = 
pb
->
buf
;

115 
di•_øm_adr
 = 
WIDTH
/8;

116 
di•_øm_adr
 *
y
;

117  
i
 = 0; i < 8; i ++ )

119 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

120 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00a );

121 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

122 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
 & 0x0ff );

124 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

125 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00b );

126 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

127 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
 >> 8 );

129 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

130 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00c );

131 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

132 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

133 
±r
 +
WIDTH
/8;

134 
di•_øm_adr
 +
WIDTH
/8;

136 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

140  
	`u8g_dev_pb8h1f_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

141 
	}
}

143 
U8G_PB_DEV
(
u8g_dev_lc7981_240x64_8bô
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_lc7981_240x64_‚
, 
U8G_COM_FAST_PARALLEL
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_lc7981_320x64.c

41 
	~"u8g.h
"

43 
	#WIDTH
 320

	)

44 
	#HEIGHT
 64

	)

45 
	#PAGE_HEIGHT
 8

	)

52 c⁄° 
uöt8_t
 
	gu8g_dev_lc7981_320x64_öô_£q
[] 
	gPROGMEM
 = {

53 
U8G_ESC_CS
(0),

54 
U8G_ESC_ADR
(1),

55 
U8G_ESC_RST
(15),

56 
U8G_ESC_CS
(1),

57 
U8G_ESC_DLY
(50),

60 
U8G_ESC_ADR
(1),

62 
U8G_ESC_ADR
(0),

65 
U8G_ESC_ADR
(1),

67 
U8G_ESC_ADR
(0),

70 
U8G_ESC_ADR
(1),

72 
U8G_ESC_ADR
(0),

73 
WIDTH
/8-1,

75 
U8G_ESC_ADR
(1),

77 
U8G_ESC_ADR
(0),

80 
U8G_ESC_ADR
(1),

82 
U8G_ESC_ADR
(0),

85 
U8G_ESC_ADR
(1),

87 
U8G_ESC_ADR
(0),

90 
U8G_ESC_DLY
(10),

92 
U8G_ESC_CS
(0),

93 
U8G_ESC_END


96 
uöt8_t
 
	$u8g_dev_lc7981_320x64_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

98 
msg
)

100 
U8G_DEV_MSG_INIT
:

101 
	`u8g_InôCom
(
u8g
, 
dev
);

102 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_lc7981_320x64_öô_£q
);

104 
U8G_DEV_MSG_STOP
:

106 
U8G_DEV_MSG_PAGE_NEXT
:

108 
uöt8_t
 
y
, 
i
;

109 
uöt16_t
 
di•_øm_adr
;

110 
uöt8_t
 *
±r
;

111 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

113 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

114 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

115 
y
 = 
pb
->
p
.
∑ge_y0
;

116 
±r
 = 
pb
->
buf
;

117 
di•_øm_adr
 = 
WIDTH
/8;

118 
di•_øm_adr
 *
y
;

119  
i
 = 0; i < 8; i ++ )

121 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

122 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00a );

123 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

124 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
 & 0x0ff );

126 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

127 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00b );

128 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

129 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
 >> 8 );

131 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

132 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00c );

133 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

134 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

135 
±r
 +
WIDTH
/8;

136 
di•_øm_adr
 +
WIDTH
/8;

138 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

142  
	`u8g_dev_pb8h1f_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

143 
	}
}

145 
U8G_PB_DEV
(
u8g_dev_lc7981_320x64_8bô
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_lc7981_320x64_‚
, 
U8G_COM_FAST_PARALLEL
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_null.c

37 
	~"u8g.h
"

39 
uöt8_t
 
	$u8g_dev_nuŒ
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

41 
msg
)

43 
U8G_DEV_MSG_SET_8PIXEL
:

45 
U8G_DEV_MSG_SET_PIXEL
:

47 
U8G_DEV_MSG_INIT
:

49 
U8G_DEV_MSG_STOP
:

51 
U8G_DEV_MSG_PAGE_FIRST
:

53 
U8G_DEV_MSG_PAGE_NEXT
:

55 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


56 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

59 
U8G_DEV_MSG_GET_PAGE_BOX
:

61 
U8G_DEV_MSG_SET_COLOR_INDEX
:

63 
U8G_DEV_MSG_SET_XY_CB
:

67 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_pcd8544_84x48.c

42 
	~"u8g.h
"

44 
	#WIDTH
 84

	)

45 
	#HEIGHT
 48

	)

46 
	#PAGE_HEIGHT
 8

	)

49 c⁄° 
uöt8_t
 
	gu8g_dev_pcd8544_öô_£q
[] 
	gPROGMEM
 = {

50 
U8G_ESC_CS
(0),

51 
U8G_ESC_ADR
(0),

52 
U8G_ESC_RST
(1),

53 
U8G_ESC_CS
(1),

60 
U8G_ESC_DLY
(100),

63 
U8G_ESC_DLY
(100),

64 
U8G_ESC_DLY
(100),

67 
U8G_ESC_DLY
(100),

68 
U8G_ESC_CS
(0),

69 
U8G_ESC_END


72 
uöt8_t
 
	$u8g_dev_pcd8544_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

74 
msg
)

76 
U8G_DEV_MSG_INIT
:

77 
	`u8g_InôCom
(
u8g
, 
dev
);

78 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_pcd8544_öô_£q
);

80 
U8G_DEV_MSG_STOP
:

82 
U8G_DEV_MSG_PAGE_NEXT
:

84 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

85 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

86 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

87 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x020 );

88 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

89 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x040 | 
pb
->
p
.
∑ge
);

90 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

91 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

93 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

96 
U8G_DEV_MSG_CONTRAST
:

98 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

99 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

100 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x021);

101 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | ( (*(
uöt8_t
 *)
¨g
) >> 1 ) );

102 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

105  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

106 
	}
}

109 
U8G_PB_DEV
(
u8g_dev_pcd8544_84x48_sw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_pcd8544_‚
, 
U8G_COM_SW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_pcf8812_96x65.c

56 
	~"u8g.h
"

58 
	#WIDTH
 96

	)

59 
	#HEIGHT
 65

	)

60 
	#PAGE_HEIGHT
 8

	)

63 c⁄° 
uöt8_t
 
	gu8g_dev_pcf8812_öô_£q
[] 
	gPROGMEM
 = {

64 
U8G_ESC_CS
(0),

65 
U8G_ESC_ADR
(0),

66 
U8G_ESC_RST
(1),

67 
U8G_ESC_CS
(1),

74 
U8G_ESC_DLY
(100),

77 
U8G_ESC_DLY
(100),

78 
U8G_ESC_DLY
(100),

81 
U8G_ESC_DLY
(100),

82 
U8G_ESC_CS
(0),

83 
U8G_ESC_END


86 
uöt8_t
 
	$u8g_dev_pcf8812_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

88 
msg
)

90 
U8G_DEV_MSG_INIT
:

91 
	`u8g_InôCom
(
u8g
, 
dev
);

92 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_pcf8812_öô_£q
);

94 
U8G_DEV_MSG_STOP
:

96 
U8G_DEV_MSG_PAGE_NEXT
:

98 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

99 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

100 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

101 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x020 );

102 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

103 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x040 | 
pb
->
p
.
∑ge
);

104 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

105 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

107 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

110 
U8G_DEV_MSG_CONTRAST
:

112 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

113 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

114 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x021);

115 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | ( (*(
uöt8_t
 *)
¨g
) >> 1 ) );

116 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

119  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

120 
	}
}

123 
U8G_PB_DEV
(
u8g_dev_pcf8812_96x65_sw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_pcf8812_‚
, 
U8G_COM_SW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_sbn1661_122x32.c

40 
	~"u8g.h
"

42 
	#WIDTH
 122

	)

43 
	#HEIGHT
 32

	)

44 
	#PAGE_HEIGHT
 8

	)

47 c⁄° 
uöt8_t
 
	gu8g_dev_sbn1661_122x32_öô_£q
[] 
	gPROGMEM
 = {

48 
U8G_ESC_CS
(0),

49 
U8G_ESC_ADR
(0),

50 
U8G_ESC_RST
(15),

51 
U8G_ESC_CS
(1),

56 
U8G_ESC_CS
(2),

62 
U8G_ESC_CS
(0),

65 
U8G_ESC_END


68 
uöt8_t
 
	$u8g_dev_sbn1661_122x32_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

70 
msg
)

72 
U8G_DEV_MSG_INIT
:

73 
	`u8g_InôCom
(
u8g
, 
dev
);

74 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_sbn1661_122x32_öô_£q
);

76 
U8G_DEV_MSG_STOP
:

78 
U8G_DEV_MSG_PAGE_NEXT
:

80 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

82 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

83 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

84 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b8 | 
pb
->
p
.
∑ge
);

85 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x000 );

86 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

87 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/2, 
pb
->
buf
);

89 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

90 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 2);

91 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b8 | 
pb
->
p
.
∑ge
);

92 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x000 );

93 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

94 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/2, WIDTH/2+(
uöt8_t
 *)
pb
->
buf
);

96 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

100 
U8G_DEV_MSG_CONTRAST
:

103  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

104 
	}
}

107 
U8G_PB_DEV
(
u8g_dev_sbn1661_122x32
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_sbn1661_122x32_‚
, 
u8g_com_¨duöo_no_í_∑øŒñ_‚
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_ssd1306_128x32.c

40 
	~"u8g.h
"

42 
	#WIDTH
 128

	)

43 
	#HEIGHT
 32

	)

44 
	#PAGE_HEIGHT
 8

	)

48 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x32_ada‰uô1_öô_£q
[] 
	gPROGMEM
 = {

49 
U8G_ESC_CS
(0),

50 
U8G_ESC_ADR
(0),

51 
U8G_ESC_RST
(1),

52 
U8G_ESC_CS
(1),

77 
U8G_ESC_CS
(0),

78 
U8G_ESC_END


83 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x32_ada‰uô2_öô_£q
[] 
	gPROGMEM
 = {

84 
U8G_ESC_CS
(0),

85 
U8G_ESC_ADR
(0),

86 
U8G_ESC_RST
(1),

87 
U8G_ESC_CS
(1),

112 
U8G_ESC_CS
(0),

113 
U8G_ESC_END


118 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x32_ada‰uô3_öô_£q
[] 
	gPROGMEM
 = {

119 
U8G_ESC_CS
(0),

120 
U8G_ESC_ADR
(0),

121 
U8G_ESC_RST
(1),

122 
U8G_ESC_CS
(1),

147 
U8G_ESC_CS
(0),

148 
U8G_ESC_END


153 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x32_univisi⁄_öô_£q
[] 
	gPROGMEM
 = {

154 
U8G_ESC_CS
(0),

155 
U8G_ESC_ADR
(0),

156 
U8G_ESC_RST
(1),

157 
U8G_ESC_CS
(1),

175 
U8G_ESC_CS
(0),

176 
U8G_ESC_END


184 
	#u8g_dev_ssd1306_128x32_öô_£q
 
u8g_dev_ssd1306_128x32_ada‰uô3_öô_£q


	)

187 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x32_d©a_°¨t
[] 
	gPROGMEM
 = {

188 
U8G_ESC_ADR
(0),

189 
U8G_ESC_CS
(1),

192 
U8G_ESC_END


195 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_⁄
[] 
	gPROGMEM
 = {

196 
U8G_ESC_ADR
(0),

197 
U8G_ESC_CS
(1),

199 
U8G_ESC_CS
(1),

200 
U8G_ESC_END


203 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_off
[] 
	gPROGMEM
 = {

204 
U8G_ESC_ADR
(0),

205 
U8G_ESC_CS
(1),

207 
U8G_ESC_DLY
(50),

208 
U8G_ESC_CS
(1),

209 
U8G_ESC_END


212 
uöt8_t
 
	$u8g_dev_ssd1306_128x32_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

214 
msg
)

216 
U8G_DEV_MSG_INIT
:

217 
	`u8g_InôCom
(
u8g
, 
dev
);

218 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1306_128x32_öô_£q
);

220 
U8G_DEV_MSG_STOP
:

222 
U8G_DEV_MSG_PAGE_NEXT
:

224 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

225 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1306_128x32_d©a_°¨t
);

226 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

227 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

228 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

230 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

233 
U8G_DEV_MSG_SLEEP_ON
:

234 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

236 
U8G_DEV_MSG_SLEEP_OFF
:

237 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

241  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

242 
	}
}

244 
U8G_PB_DEV
(
u8g_dev_ssd1306_128x32_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1306_128x32_‚
, 
U8G_COM_SW_SPI
);

245 
U8G_PB_DEV
(
u8g_dev_ssd1306_128x32_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1306_128x32_‚
, 
U8G_COM_HW_SPI
);

246 
U8G_PB_DEV
(
u8g_dev_ssd1306_128x32_i2c
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1306_128x32_‚
, 
U8G_COM_SSD_I2C
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_ssd1306_128x64.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

44 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x64_ada‰uô1_öô_£q
[] 
	gPROGMEM
 = {

45 
U8G_ESC_CS
(0),

46 
U8G_ESC_ADR
(0),

47 
U8G_ESC_RST
(1),

48 
U8G_ESC_CS
(1),

73 
U8G_ESC_CS
(0),

74 
U8G_ESC_END


78 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x64_ada‰uô2_öô_£q
[] 
	gPROGMEM
 = {

79 
U8G_ESC_CS
(0),

80 
U8G_ESC_ADR
(0),

81 
U8G_ESC_RST
(1),

82 
U8G_ESC_CS
(1),

107 
U8G_ESC_CS
(0),

108 
U8G_ESC_END


112 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x64_ada‰uô3_öô_£q
[] 
	gPROGMEM
 = {

113 
U8G_ESC_CS
(0),

114 
U8G_ESC_ADR
(0),

115 
U8G_ESC_RST
(1),

116 
U8G_ESC_CS
(1),

141 
U8G_ESC_CS
(0),

142 
U8G_ESC_END


146 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x64_univisi⁄_öô_£q
[] 
	gPROGMEM
 = {

147 
U8G_ESC_CS
(0),

148 
U8G_ESC_ADR
(0),

149 
U8G_ESC_RST
(1),

150 
U8G_ESC_CS
(1),

168 
U8G_ESC_CS
(0),

169 
U8G_ESC_END


176 
	#u8g_dev_ssd1306_128x64_öô_£q
 
u8g_dev_ssd1306_128x64_ada‰uô3_öô_£q


	)

179 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x64_d©a_°¨t
[] 
	gPROGMEM
 = {

180 
U8G_ESC_ADR
(0),

181 
U8G_ESC_CS
(1),

184 
U8G_ESC_END


187 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_⁄
[] 
	gPROGMEM
 = {

188 
U8G_ESC_ADR
(0),

189 
U8G_ESC_CS
(1),

191 
U8G_ESC_CS
(1),

192 
U8G_ESC_END


195 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_off
[] 
	gPROGMEM
 = {

196 
U8G_ESC_ADR
(0),

197 
U8G_ESC_CS
(1),

199 
U8G_ESC_DLY
(50),

200 
U8G_ESC_CS
(1),

201 
U8G_ESC_END


204 
uöt8_t
 
	$u8g_dev_ssd1306_128x64_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

206 
msg
)

208 
U8G_DEV_MSG_INIT
:

209 
	`u8g_InôCom
(
u8g
, 
dev
);

210 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1306_128x64_öô_£q
);

212 
U8G_DEV_MSG_STOP
:

214 
U8G_DEV_MSG_PAGE_NEXT
:

216 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

217 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1306_128x64_d©a_°¨t
);

218 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

219 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

220 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

222 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

225 
U8G_DEV_MSG_SLEEP_ON
:

226 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

228 
U8G_DEV_MSG_SLEEP_OFF
:

229 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

232  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

233 
	}
}

235 
U8G_PB_DEV
(
u8g_dev_ssd1306_128x64_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1306_128x64_‚
, 
U8G_COM_SW_SPI
);

236 
U8G_PB_DEV
(
u8g_dev_ssd1306_128x64_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1306_128x64_‚
, 
U8G_COM_HW_SPI
);

237 
U8G_PB_DEV
(
u8g_dev_ssd1306_128x64_i2c
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1306_128x64_‚
, 
U8G_COM_SSD_I2C
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_ssd1309_128x64.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

45 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1309_128x64_öô_£q
[] 
	gPROGMEM
={

46 
U8G_ESC_CS
(0),

47 
U8G_ESC_ADR
(0),

48 
U8G_ESC_RST
(1),

49 
U8G_ESC_CS
(1),

65 
U8G_ESC_VCC
(1),

66 
U8G_ESC_DLY
(50),

68 
U8G_ESC_DLY
(50),

69 
U8G_ESC_CS
(0),

70 
U8G_ESC_END


74 
	#u8g_dev_ssd1309_128x64_öô_£q
 
u8g_dev_ssd1309_128x64_öô_£q


	)

77 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1309_128x64_d©a_°¨t
[] 
	gPROGMEM
 = {

78 
U8G_ESC_ADR
(0),

79 
U8G_ESC_CS
(1),

82 
U8G_ESC_END


85 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_⁄
[] 
	gPROGMEM
 = {

86 
U8G_ESC_ADR
(0),

87 
U8G_ESC_CS
(1),

89 
U8G_ESC_CS
(1),

90 
U8G_ESC_END


93 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_off
[] 
	gPROGMEM
 = {

94 
U8G_ESC_ADR
(0),

95 
U8G_ESC_CS
(1),

97 
U8G_ESC_DLY
(50),

98 
U8G_ESC_CS
(1),

99 
U8G_ESC_END


102 
uöt8_t
 
	$u8g_dev_ssd1309_128x64_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

104 
msg
)

106 
U8G_DEV_MSG_INIT
:

107 
	`u8g_InôCom
(
u8g
, 
dev
);

108 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1309_128x64_öô_£q
);

110 
U8G_DEV_MSG_STOP
:

112 
U8G_DEV_MSG_PAGE_NEXT
:

114 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

115 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1309_128x64_d©a_°¨t
);

116 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

117 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

118 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

120 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

123 
U8G_DEV_MSG_CONTRAST
:

124 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

125 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

126 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

127 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

128 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

130 
U8G_DEV_MSG_SLEEP_ON
:

131 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

133 
U8G_DEV_MSG_SLEEP_OFF
:

134 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

137  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

138 
	}
}

140 
U8G_PB_DEV
(
u8g_dev_ssd1309_128x64_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1309_128x64_‚
, 
U8G_COM_HW_SPI
);

141 
U8G_PB_DEV
(
u8g_dev_ssd1309_128x64_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1309_128x64_‚
, 
U8G_COM_SW_SPI
);

142 
U8G_PB_DEV
(
u8g_dev_ssd1309_128x64_i2c
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1309_128x64_‚
, 
U8G_COM_SSD_I2C
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_ssd1322_nhd31oled_bw.c

44 
	~"u8g.h
"

47 #i‡
deföed
(
U8G_16BIT
)

48 
	#WIDTH
 256

	)

50 
	#WIDTH
 248

	)

52 
	#HEIGHT
 64

	)

53 
	#PAGE_HEIGHT
 8

	)

60 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1322_1bô_nhd_312_öô_£q
[] 
	gPROGMEM
 = {

61 
U8G_ESC_DLY
(10),

62 
U8G_ESC_CS
(0),

63 
U8G_ESC_ADR
(0),

64 
U8G_ESC_RST
(1),

65 
U8G_ESC_CS
(1),

67 
U8G_ESC_DLY
(100),

68 
U8G_ESC_DLY
(100),

70 
U8G_ESC_ADR
(0),

72 
U8G_ESC_ADR
(1),

75 
U8G_ESC_ADR
(0),

78 
U8G_ESC_ADR
(0),

80 
U8G_ESC_ADR
(1),

83 
U8G_ESC_ADR
(0),

85 
U8G_ESC_ADR
(1),

88 
U8G_ESC_ADR
(0),

90 
U8G_ESC_ADR
(1),

93 
U8G_ESC_ADR
(0),

95 
U8G_ESC_ADR
(1),

98 
U8G_ESC_ADR
(0),

100 
U8G_ESC_ADR
(1),

104 
U8G_ESC_ADR
(0),

106 
U8G_ESC_ADR
(1),

109 
U8G_ESC_ADR
(0),

111 
U8G_ESC_ADR
(1),

115 
U8G_ESC_ADR
(0),

117 
U8G_ESC_ADR
(1),

120 
U8G_ESC_ADR
(0),

122 
U8G_ESC_ADR
(1),

125 
U8G_ESC_ADR
(0),

128 
U8G_ESC_ADR
(0),

130 
U8G_ESC_ADR
(1),

133 
U8G_ESC_ADR
(0),

135 
U8G_ESC_ADR
(1),

139 
U8G_ESC_ADR
(0),

141 
U8G_ESC_ADR
(1),

144 
U8G_ESC_ADR
(0),

146 
U8G_ESC_ADR
(1),

149 
U8G_ESC_ADR
(0),

151 
U8G_ESC_ADR
(1),

154 
U8G_ESC_ADR
(0),

157 
U8G_ESC_ADR
(0),

160 
U8G_ESC_ADR
(0),

164 
U8G_ESC_CS
(0),

165 
U8G_ESC_END


168 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1322_1bô_nhd_312_¥ï¨e_∑ge_£q
[] 
	gPROGMEM
 = {

169 
U8G_ESC_ADR
(0),

170 
U8G_ESC_CS
(1),

172 
U8G_ESC_ADR
(1),

175 
U8G_ESC_ADR
(0),

177 
U8G_ESC_ADR
(1),

178 
U8G_ESC_END


181 
	$u8g_dev_ssd1322_1bô_¥ï¨e_row
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
dñè_row
)

183 
uöt8_t
 
row
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.
∑ge
;

185 
row
 *((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.
∑ge_height
;

186 
row
 +
dñè_row
;

188 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1322_1bô_nhd_312_¥ï¨e_∑ge_£q
);

190 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
row
);

191 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
row
+1);

193 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

194 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x05c);

195 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

196 
	}
}

198 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_⁄
[] 
	gPROGMEM
 = {

199 
U8G_ESC_ADR
(0),

200 
U8G_ESC_CS
(1),

202 
U8G_ESC_CS
(1),

203 
U8G_ESC_END


206 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_off
[] 
	gPROGMEM
 = {

207 
U8G_ESC_ADR
(0),

208 
U8G_ESC_CS
(1),

210 
U8G_ESC_DLY
(50),

211 
U8G_ESC_CS
(1),

212 
U8G_ESC_END


216 
uöt8_t
 
	$u8g_dev_ssd1322_nhd31ﬁed_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

218 
msg
)

220 
U8G_DEV_MSG_INIT
:

221 
	`u8g_InôCom
(
u8g
, 
dev
);

222 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1322_1bô_nhd_312_öô_£q
);

224 
U8G_DEV_MSG_STOP
:

226 
U8G_DEV_MSG_PAGE_NEXT
:

228 
uöt8_t
 
i
;

229 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

230 
uöt8_t
 *
p
 = 
pb
->
buf
;

231 
u8g_uöt_t
 
˙t
;

232 
˙t
 = 
pb
->
width
;

233 
˙t
 >>= 3;

235  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i++ )

237 
	`u8g_dev_ssd1322_1bô_¥ï¨e_row
(
u8g
, 
dev
, 
i
);

238 #i‡!
	`deföed
(
U8G_16BIT
)

239 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0ff);

240 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0ff);

242 
	`u8g_WrôeSequí˚BWTo16GrDevi˚
(
u8g
, 
dev
, 
˙t
, 
p
);

243 #i‡!
	`deföed
(
U8G_16BIT
)

244 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0ff);

245 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0ff);

247 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

248 
p
+=
˙t
;

252 
U8G_DEV_MSG_CONTRAST
:

253 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

254 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

255 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

256 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

257 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

258 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

260 
U8G_DEV_MSG_SLEEP_ON
:

261 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

263 
U8G_DEV_MSG_SLEEP_OFF
:

264 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

267  
	`u8g_dev_pb8h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

268 
	}
}

271 
uöt8_t
 
	$u8g_dev_ssd1322_nhd31ﬁed_2x_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

273 
msg
)

275 
U8G_DEV_MSG_INIT
:

276 
	`u8g_InôCom
(
u8g
, 
dev
);

277 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1322_1bô_nhd_312_öô_£q
);

279 
U8G_DEV_MSG_STOP
:

281 
U8G_DEV_MSG_PAGE_NEXT
:

283 
uöt8_t
 
i
;

284 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

285 
uöt8_t
 *
p
 = 
pb
->
buf
;

286 
u8g_uöt_t
 
˙t
;

287 
˙t
 = 
pb
->
width
;

288 
˙t
 >>= 3;

290  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i++ )

292 
	`u8g_dev_ssd1322_1bô_¥ï¨e_row
(
u8g
, 
dev
, 
i
);

293 #i‡!
	`deföed
(
U8G_16BIT
)

294 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0ff);

295 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0ff);

297 
	`u8g_WrôeSequí˚BWTo16GrDevi˚
(
u8g
, 
dev
, 
˙t
, 
p
);

298 #i‡!
	`deföed
(
U8G_16BIT
)

299 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0ff);

300 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0ff);

302 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

303 
p
+=
˙t
;

307 
U8G_DEV_MSG_CONTRAST
:

308 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

309 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

310 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

311 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

312 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

313 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

315 
U8G_DEV_MSG_SLEEP_ON
:

316 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

318 
U8G_DEV_MSG_SLEEP_OFF
:

319 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

322  
	`u8g_dev_pb16h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

323 
	}
}

326 
U8G_PB_DEV
(
u8g_dev_ssd1322_nhd31ﬁed_bw_sw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1322_nhd31ﬁed_bw_‚
, 
U8G_COM_SW_SPI
);

327 
U8G_PB_DEV
(
u8g_dev_ssd1322_nhd31ﬁed_bw_hw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1322_nhd31ﬁed_bw_‚
, 
U8G_COM_HW_SPI
);

329 
	#DWIDTH
 (
WIDTH
*2)

	)

330 
uöt8_t
 
	gu8g_dev_ssd1322_nhd31ﬁed_2x_bw_buf
[
DWIDTH
] 
	gU8G_NOCOMMON
 ;

331 
u8g_pb_t
 
	gu8g_dev_ssd1322_nhd31ﬁed_2x_bw_pb
 = { {16, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_buf
};

332 
u8g_dev_t
 
	gu8g_dev_ssd1322_nhd31ﬁed_2x_bw_sw_•i
 = { 
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_‚
, &
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_pb
, 
U8G_COM_SW_SPI
 };

333 
u8g_dev_t
 
	gu8g_dev_ssd1322_nhd31ﬁed_2x_bw_hw_•i
 = { 
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_‚
, &
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_pb
, 
U8G_COM_HW_SPI
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_ssd1322_nhd31oled_gr.c

44 
	~"u8g.h
"

47 #i‡
deföed
(
U8G_16BIT
)

48 
	#WIDTH
 256

	)

50 
	#WIDTH
 248

	)

52 
	#HEIGHT
 64

	)

53 
	#PAGE_HEIGHT
 8

	)

60 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1322_2bô_nhd_312_öô_£q
[] 
	gPROGMEM
 = {

61 
U8G_ESC_DLY
(10),

62 
U8G_ESC_CS
(0),

63 
U8G_ESC_ADR
(0),

64 
U8G_ESC_RST
(1),

65 
U8G_ESC_CS
(1),

67 
U8G_ESC_DLY
(100),

68 
U8G_ESC_DLY
(100),

70 
U8G_ESC_ADR
(0),

72 
U8G_ESC_ADR
(1),

75 
U8G_ESC_ADR
(0),

78 
U8G_ESC_ADR
(0),

80 
U8G_ESC_ADR
(1),

83 
U8G_ESC_ADR
(0),

85 
U8G_ESC_ADR
(1),

88 
U8G_ESC_ADR
(0),

90 
U8G_ESC_ADR
(1),

93 
U8G_ESC_ADR
(0),

95 
U8G_ESC_ADR
(1),

98 
U8G_ESC_ADR
(0),

100 
U8G_ESC_ADR
(1),

104 
U8G_ESC_ADR
(0),

106 
U8G_ESC_ADR
(1),

109 
U8G_ESC_ADR
(0),

111 
U8G_ESC_ADR
(1),

115 
U8G_ESC_ADR
(0),

117 
U8G_ESC_ADR
(1),

120 
U8G_ESC_ADR
(0),

122 
U8G_ESC_ADR
(1),

125 
U8G_ESC_ADR
(0),

128 
U8G_ESC_ADR
(0),

130 
U8G_ESC_ADR
(1),

133 
U8G_ESC_ADR
(0),

135 
U8G_ESC_ADR
(1),

139 
U8G_ESC_ADR
(0),

141 
U8G_ESC_ADR
(1),

144 
U8G_ESC_ADR
(0),

146 
U8G_ESC_ADR
(1),

149 
U8G_ESC_ADR
(0),

151 
U8G_ESC_ADR
(1),

154 
U8G_ESC_ADR
(0),

157 
U8G_ESC_ADR
(0),

160 
U8G_ESC_ADR
(0),

164 
U8G_ESC_CS
(0),

165 
U8G_ESC_END


168 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1322_2bô_nhd_312_¥ï¨e_∑ge_£q
[] 
	gPROGMEM
 = {

169 
U8G_ESC_ADR
(0),

170 
U8G_ESC_CS
(1),

172 
U8G_ESC_ADR
(1),

175 
U8G_ESC_ADR
(0),

177 
U8G_ESC_ADR
(1),

178 
U8G_ESC_END


181 
	$u8g_dev_ssd1322_2bô_¥ï¨e_row
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
dñè_row
)

183 
uöt8_t
 
row
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.
∑ge
;

185 
row
 *((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.
∑ge_height
;

186 
row
 +
dñè_row
;

188 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1322_2bô_nhd_312_¥ï¨e_∑ge_£q
);

190 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
row
);

191 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
row
+1);

193 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

194 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x05c);

195 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

196 
	}
}

198 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_⁄
[] 
	gPROGMEM
 = {

199 
U8G_ESC_ADR
(0),

200 
U8G_ESC_CS
(1),

202 
U8G_ESC_CS
(1),

203 
U8G_ESC_END


206 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_off
[] 
	gPROGMEM
 = {

207 
U8G_ESC_ADR
(0),

208 
U8G_ESC_CS
(1),

210 
U8G_ESC_DLY
(50),

211 
U8G_ESC_CS
(1),

212 
U8G_ESC_END


215 
uöt8_t
 
	$u8g_dev_ssd1322_nhd31ﬁed_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

217 
msg
)

219 
U8G_DEV_MSG_INIT
:

220 
	`u8g_InôCom
(
u8g
, 
dev
);

221 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1322_2bô_nhd_312_öô_£q
);

223 
U8G_DEV_MSG_STOP
:

225 
U8G_DEV_MSG_PAGE_NEXT
:

227 
uöt8_t
 
i
;

228 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

229 
uöt8_t
 *
p
 = 
pb
->
buf
;

230 
u8g_uöt_t
 
˙t
;

231 
˙t
 = 
pb
->
width
;

232 
˙t
 >>= 2;

234  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i++ )

236 
	`u8g_dev_ssd1322_2bô_¥ï¨e_row
(
u8g
, 
dev
, 
i
);

237 #i‡!
	`deföed
(
U8G_16BIT
)

238 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00);

239 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00);

241 
	`u8g_WrôeSequí˚4LTo16GrDevi˚
(
u8g
, 
dev
, 
˙t
, 
p
);

242 #i‡!
	`deföed
(
U8G_16BIT
)

243 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00);

244 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00);

246 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

247 
p
+=
˙t
;

251 
U8G_DEV_MSG_CONTRAST
:

252 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

253 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

254 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

255 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

256 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

257 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

259 
U8G_DEV_MSG_SLEEP_ON
:

260 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

262 
U8G_DEV_MSG_SLEEP_OFF
:

263 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

266  
	`u8g_dev_pb8h2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

267 
	}
}

270 
uöt8_t
 
	$u8g_dev_ssd1322_nhd31ﬁed_2x_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

272 
msg
)

274 
U8G_DEV_MSG_INIT
:

275 
	`u8g_InôCom
(
u8g
, 
dev
);

276 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1322_2bô_nhd_312_öô_£q
);

278 
U8G_DEV_MSG_STOP
:

280 
U8G_DEV_MSG_PAGE_NEXT
:

282 
uöt8_t
 
i
;

283 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

284 
uöt8_t
 *
p
 = 
pb
->
buf
;

285 
u8g_uöt_t
 
˙t
;

286 
˙t
 = 
pb
->
width
;

287 
˙t
 >>= 3;

289  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i++ )

291 
	`u8g_dev_ssd1322_2bô_¥ï¨e_row
(
u8g
, 
dev
, 
i
);

292 #i‡!
	`deföed
(
U8G_16BIT
)

293 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00);

294 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00);

296 
	`u8g_WrôeSequí˚4LTo16GrDevi˚
(
u8g
, 
dev
, 
˙t
, 
p
);

297 #i‡!
	`deföed
(
U8G_16BIT
)

298 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00);

299 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00);

301 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

302 
p
+=
˙t
;

306 
U8G_DEV_MSG_CONTRAST
:

307 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

308 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

309 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

310 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

311 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

312 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

314 
U8G_DEV_MSG_SLEEP_ON
:

315 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

317 
U8G_DEV_MSG_SLEEP_OFF
:

318 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

321  
	`u8g_dev_pb16h2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

322 
	}
}

325 
U8G_PB_DEV
(
u8g_dev_ssd1322_nhd31ﬁed_gr_sw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1322_nhd31ﬁed_gr_‚
, 
U8G_COM_SW_SPI
);

326 
U8G_PB_DEV
(
u8g_dev_ssd1322_nhd31ﬁed_gr_hw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1322_nhd31ﬁed_gr_‚
, 
U8G_COM_HW_SPI
);

328 
	#DWIDTH
 (
WIDTH
*2)

	)

329 
uöt8_t
 
	gu8g_dev_ssd1322_nhd31ﬁed_2x_gr_buf
[
DWIDTH
] 
	gU8G_NOCOMMON
 ;

330 
u8g_pb_t
 
	gu8g_dev_ssd1322_nhd31ﬁed_2x_gr_pb
 = { {16, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_buf
};

331 
u8g_dev_t
 
	gu8g_dev_ssd1322_nhd31ﬁed_2x_gr_sw_•i
 = { 
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_‚
, &
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_pb
, 
U8G_COM_SW_SPI
 };

332 
u8g_dev_t
 
	gu8g_dev_ssd1322_nhd31ﬁed_2x_gr_hw_•i
 = { 
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_‚
, &
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_pb
, 
U8G_COM_HW_SPI
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_ssd1325_nhd27oled_bw.c

44 #ifde‡
OBSOLETE_CODE


46 
	~"u8g.h
"

48 
	#WIDTH
 128

	)

49 
	#HEIGHT
 64

	)

50 
	#PAGE_HEIGHT
 8

	)

53 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1325_1bô_nhd_27_12864ucy3_öô_£q
[] 
	gPROGMEM
 = {

54 
U8G_ESC_DLY
(10),

55 
U8G_ESC_CS
(0),

56 
U8G_ESC_ADR
(0),

57 
U8G_ESC_RST
(1),

58 
U8G_ESC_CS
(1),

79 
U8G_ESC_DLY
(100),

80 
U8G_ESC_DLY
(100),

82 
U8G_ESC_CS
(0),

83 
U8G_ESC_END


86 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1325_1bô_nhd_27_12864ucy3_¥ï¨e_∑ge_£q
[] 
	gPROGMEM
 = {

87 
U8G_ESC_ADR
(0),

88 
U8G_ESC_CS
(1),

93 
U8G_ESC_END


97 
	$u8g_dev_ssd1325_1bô_¥ï¨e_∑ge
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

99 
uöt8_t
 
∑ge
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.page;

101 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_1bô_nhd_27_12864ucy3_¥ï¨e_∑ge_£q
);

103 
∑ge
 <<= 3;

104 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

105 
∑ge
 += 7;

106 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

108 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

109 
	}
}

111 
	$u8g_dev_ssd1325_1bô_2x_¥ï¨e_∑ge
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
is_odd
)

113 
uöt8_t
 
∑ge
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.page;

115 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_1bô_nhd_27_12864ucy3_¥ï¨e_∑ge_£q
);

117 
∑ge
 <<= 1;

118 
∑ge
 +
is_odd
;

120 
∑ge
 <<= 3;

121 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

122 
∑ge
 += 7;

123 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

125 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

126 
	}
}

129 #ifde‡
OLD


130 
	$_OLD_u8g_dev_ssd1325_1bô_wrôe_16_pixñ
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
À·
, uöt8_à
right
)

132 
uöt8_t
 
d
, 
˙t
;

133 
˙t
 = 8;

136 
d
 = 0;

137 i‡–
À·
 & 1 )

138 
d
 |= 0x0f0;

139 i‡–
right
 & 1 )

140 
d
 |= 0x00f;

141 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
d
);

142 
À·
 >>= 1;

143 
right
 >>= 1;

144 
˙t
--;

145 } 
˙t
 > 0 );

146 
	}
}

149 
	$u8g_dev_ssd1325_1bô_wrôe_16_pixñ
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
À·
, uöt8_à
right
)

151 
uöt8_t
 
d
, 
˙t
;

152 
uöt8_t
 
buf
[8];

153 
˙t
 = 8;

156 
d
 = 0;

157 i‡–
À·
 & 128 )

158 
d
 |= 0x0f0;

159 i‡–
right
 & 128 )

160 
d
 |= 0x00f;

161 
˙t
--;

162 
buf
[
˙t
] = 
d
;

163 
À·
 <<= 1;

164 
right
 <<= 1;

165 } 
˙t
 > 0 );

166 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 8, 
buf
);

167 
	}
}

169 
	$u8g_dev_ssd1325_1bô_wrôe_buf„r
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
is_odd
)

171 
uöt8_t
 
˙t
, 
À·
, 
right
;

172 
uöt8_t
 *
±r
;

173 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

175 
±r
 = 
pb
->
buf
;

176 
˙t
 = 
pb
->
width
;

177 i‡–
is_odd
 )

178 
±r
 +
˙t
;

179 
˙t
 >>= 1;

182 
À·
 = *
±r
++;

183 
right
 = *
±r
++;

184 
	`u8g_dev_ssd1325_1bô_wrôe_16_pixñ
(
u8g
, 
dev
, 
À·
, 
right
);

185 
˙t
--;

186 }  
˙t
 > 0 );

187 
	}
}

189 
uöt8_t
 
	$u8g_dev_ssd1325_nhd27ﬁed_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

191 
msg
)

193 
U8G_DEV_MSG_INIT
:

194 
	`u8g_InôCom
(
u8g
, 
dev
);

195 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_1bô_nhd_27_12864ucy3_öô_£q
);

197 
U8G_DEV_MSG_STOP
:

199 
U8G_DEV_MSG_PAGE_NEXT
:

201 
	`u8g_dev_ssd1325_1bô_¥ï¨e_∑ge
(
u8g
, 
dev
);

202 
	`u8g_dev_ssd1325_1bô_wrôe_buf„r
(
u8g
, 
dev
, 0);

203 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

206 
U8G_DEV_MSG_CONTRAST
:

207 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

208 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

209 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

210 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

211 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

214  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

215 
	}
}

217 
uöt8_t
 
	$u8g_dev_ssd1325_nhd27ﬁed_2x_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

219 
msg
)

221 
U8G_DEV_MSG_INIT
:

222 
	`u8g_InôCom
(
u8g
, 
dev
);

223 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_1bô_nhd_27_12864ucy3_öô_£q
);

225 
U8G_DEV_MSG_STOP
:

227 
U8G_DEV_MSG_PAGE_NEXT
:

229 
	`u8g_dev_ssd1325_1bô_2x_¥ï¨e_∑ge
(
u8g
, 
dev
, 0);

230 
	`u8g_dev_ssd1325_1bô_wrôe_buf„r
(
u8g
, 
dev
, 0);

231 
	`u8g_dev_ssd1325_1bô_2x_¥ï¨e_∑ge
(
u8g
, 
dev
, 1);

232 
	`u8g_dev_ssd1325_1bô_wrôe_buf„r
(
u8g
, 
dev
, 1);

233 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

236 
U8G_DEV_MSG_CONTRAST
:

237 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

238 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

239 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

240 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

241 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

244  
	`u8g_dev_pb16v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

245 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_ssd1325_nhd27oled_bw_new.c

45 
	~"u8g.h
"

48 
	#WIDTH
 128

	)

49 
	#HEIGHT
 64

	)

52 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1325_nhd_27_12864_öô_£q
[] 
	gPROGMEM
 = {

53 
U8G_ESC_DLY
(10),

54 
U8G_ESC_CS
(0),

55 
U8G_ESC_ADR
(0),

56 
U8G_ESC_RST
(1),

57 
U8G_ESC_CS
(1),

79 
U8G_ESC_DLY
(50),

80 
U8G_ESC_CS
(0),

81 
U8G_ESC_END


84 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1325_¥ï¨e_row_£q
[] 
	gPROGMEM
 = {

85 
U8G_ESC_ADR
(0),

86 
U8G_ESC_CS
(1),

91 
U8G_ESC_END


94 
	$u8g_dev_ssd1325_¥ï¨e_row
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
dñè_row
)

96 
uöt8_t
 
row
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.
∑ge
;

98 
row
 *((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.
∑ge_height
;

99 
row
 +
dñè_row
;

101 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_¥ï¨e_row_£q
);

103 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
row
);

104 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
row
+1);

108 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

109 
	}
}

111 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_⁄
[] 
	gPROGMEM
 = {

112 
U8G_ESC_ADR
(0),

113 
U8G_ESC_CS
(1),

115 
U8G_ESC_CS
(1),

116 
U8G_ESC_END


119 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_off
[] 
	gPROGMEM
 = {

120 
U8G_ESC_ADR
(0),

121 
U8G_ESC_CS
(1),

123 
U8G_ESC_DLY
(50),

124 
U8G_ESC_CS
(1),

125 
U8G_ESC_END


129 
uöt8_t
 
	$u8g_dev_ssd1325_nhd27ﬁed_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

131 
msg
)

135 
U8G_DEV_MSG_INIT
:

136 
	`u8g_InôCom
(
u8g
, 
dev
);

137 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_nhd_27_12864_öô_£q
);

139 
U8G_DEV_MSG_STOP
:

141 
U8G_DEV_MSG_PAGE_NEXT
:

143 
uöt8_t
 
i
;

144 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

145 
uöt8_t
 *
p
 = 
pb
->
buf
;

146 
u8g_uöt_t
 
˙t
;

147 
˙t
 = 
pb
->
width
;

148 
˙t
 >>= 3;

150  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i++ )

152 
	`u8g_dev_ssd1325_¥ï¨e_row
(
u8g
, 
dev
, 
i
);

153 
	`u8g_WrôeSequí˚BWTo16GrDevi˚
(
u8g
, 
dev
, 
˙t
, 
p
);

154 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

155 
p
+=
˙t
;

159 
U8G_DEV_MSG_CONTRAST
:

160 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

161 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

162 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

163 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

164 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

166 
U8G_DEV_MSG_SLEEP_ON
:

167 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

169 
U8G_DEV_MSG_SLEEP_OFF
:

170 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

173  
	`u8g_dev_pb8h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

174 
	}
}

176 
uöt8_t
 
	$u8g_dev_ssd1325_nhd27ﬁed_2x_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

178 
msg
)

180 
U8G_DEV_MSG_INIT
:

181 
	`u8g_InôCom
(
u8g
, 
dev
);

182 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_nhd_27_12864_öô_£q
);

184 
U8G_DEV_MSG_STOP
:

186 
U8G_DEV_MSG_PAGE_NEXT
:

188 
uöt8_t
 
i
;

189 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

190 
uöt8_t
 *
p
 = 
pb
->
buf
;

191 
u8g_uöt_t
 
˙t
;

192 
˙t
 = 
pb
->
width
;

193 
˙t
 >>= 3;

195  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i++ )

197 
	`u8g_dev_ssd1325_¥ï¨e_row
(
u8g
, 
dev
, 
i
);

198 
	`u8g_WrôeSequí˚BWTo16GrDevi˚
(
u8g
, 
dev
, 
˙t
, 
p
);

199 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

200 
p
+=
˙t
;

204 
U8G_DEV_MSG_CONTRAST
:

205 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

206 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

207 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

208 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

209 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

211 
U8G_DEV_MSG_SLEEP_ON
:

212 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

214 
U8G_DEV_MSG_SLEEP_OFF
:

215 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

218  
	`u8g_dev_pb16h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

219 
	}
}

223 
U8G_PB_DEV
(
u8g_dev_ssd1325_nhd27ﬁed_bw_sw_•i
 , 
WIDTH
, 
HEIGHT
, 8, 
u8g_dev_ssd1325_nhd27ﬁed_bw_‚
, 
U8G_COM_SW_SPI
);

224 
U8G_PB_DEV
(
u8g_dev_ssd1325_nhd27ﬁed_bw_hw_•i
 , 
WIDTH
, 
HEIGHT
, 8, 
u8g_dev_ssd1325_nhd27ﬁed_bw_‚
, 
U8G_COM_HW_SPI
);

225 
U8G_PB_DEV
(
u8g_dev_ssd1325_nhd27ﬁed_bw_∑øŒñ
 , 
WIDTH
, 
HEIGHT
, 8, 
u8g_dev_ssd1325_nhd27ﬁed_bw_‚
, 
U8G_COM_FAST_PARALLEL
);

227 
uöt8_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_bw_buf
[
WIDTH
*2] 
	gU8G_NOCOMMON
 ;

228 
u8g_pb_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_bw_pb
 = { {16, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_buf
};

229 
u8g_dev_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_bw_sw_•i
 = { 
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_‚
, &
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_pb
, 
U8G_COM_SW_SPI
 };

230 
u8g_dev_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_bw_hw_•i
 = { 
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_‚
, &
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_pb
, 
U8G_COM_HW_SPI
 };

231 
u8g_dev_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_bw_∑øŒñ
 = { 
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_‚
, &
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_pb
, 
U8G_COM_FAST_PARALLEL
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_ssd1325_nhd27oled_gr.c

44 #ifde‡
OBSOLETE_CODE


46 
	~"u8g.h
"

48 
	#WIDTH
 128

	)

49 
	#HEIGHT
 64

	)

52 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1325_2bô_nhd_27_12864ucy3_öô_£q
[] 
	gPROGMEM
 = {

53 
U8G_ESC_DLY
(10),

54 
U8G_ESC_CS
(0),

55 
U8G_ESC_ADR
(0),

56 
U8G_ESC_RST
(1),

57 
U8G_ESC_CS
(1),

79 
U8G_ESC_DLY
(100),

80 
U8G_ESC_DLY
(100),

82 
U8G_ESC_CS
(0),

83 
U8G_ESC_END


86 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1325_2bô_nhd_27_12864ucy3_¥ï¨e_∑ge_£q
[] 
	gPROGMEM
 = {

87 
U8G_ESC_ADR
(0),

88 
U8G_ESC_CS
(1),

93 
U8G_ESC_END


97 
	$u8g_dev_ssd1325_2bô_¥ï¨e_∑ge
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

99 
uöt8_t
 
∑ge
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.page;

101 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_2bô_nhd_27_12864ucy3_¥ï¨e_∑ge_£q
);

103 
∑ge
 <<= 2;

104 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

105 
∑ge
 += 3;

106 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

108 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

109 
	}
}

111 
	$u8g_dev_ssd1325_2bô_2x_¥ï¨e_∑ge
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
is_odd
)

113 
uöt8_t
 
∑ge
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.page;

115 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_2bô_nhd_27_12864ucy3_¥ï¨e_∑ge_£q
);

117 
∑ge
 <<= 1;

118 
∑ge
 +
is_odd
;

121 
∑ge
 <<= 2;

122 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

123 
∑ge
 += 3;

124 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

126 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

127 
	}
}

130 
	$u8g_dev_ssd1325_2bô_wrôe_4_pixñ
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
À·
, uöt8_à
right
)

132 
uöt8_t
 
d
, 
tmp
, 
˙t
;

133 
˙t
 = 4;

136 
d
 = 
À·
;

137 
d
 &= 3;

138 
d
 <<= 4;

139 
tmp
 = 
right
;

140 
tmp
 &= 3;

141 
d
 |
tmp
;

142 
d
 <<= 2;

143 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
d
);

144 
À·
 >>= 2;

145 
right
 >>= 2;

146 
˙t
--;

147 } 
˙t
 > 0 );

148 
	}
}

150 
	$u8g_dev_ssd1325_2bô_wrôe_buf„r
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

152 
uöt8_t
 
˙t
, 
À·
, 
right
;

153 
uöt8_t
 *
±r
;

154 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

156 
˙t
 = 
pb
->
width
;

157 
˙t
 >>= 1;

158 
±r
 = 
pb
->
buf
;

161 
À·
 = *
±r
++;

162 
right
 = *
±r
++;

163 
	`u8g_dev_ssd1325_2bô_wrôe_4_pixñ
(
u8g
, 
dev
, 
À·
, 
right
);

164 
˙t
--;

165 }  
˙t
 > 0 );

166 
	}
}

168 
	$u8g_dev_ssd1325_2bô_2x_wrôe_buf„r
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
is_odd
)

170 
uöt8_t
 
˙t
, 
À·
, 
right
;

171 
uöt8_t
 *
±r
;

172 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

174 
±r
 = 
pb
->
buf
;

175 
˙t
 = 
pb
->
width
;

176 i‡–
is_odd
 )

177 
±r
 +
˙t
;

178 
˙t
 >>= 1;

181 
À·
 = *
±r
++;

182 
right
 = *
±r
++;

183 
	`u8g_dev_ssd1325_2bô_wrôe_4_pixñ
(
u8g
, 
dev
, 
À·
, 
right
);

184 
˙t
--;

185 }  
˙t
 > 0 );

186 
	}
}

188 
uöt8_t
 
	$u8g_dev_ssd1325_nhd27ﬁed_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

190 
msg
)

192 
U8G_DEV_MSG_INIT
:

193 
	`u8g_InôCom
(
u8g
, 
dev
);

194 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_2bô_nhd_27_12864ucy3_öô_£q
);

196 
U8G_DEV_MSG_STOP
:

198 
U8G_DEV_MSG_PAGE_NEXT
:

200 
	`u8g_dev_ssd1325_2bô_¥ï¨e_∑ge
(
u8g
, 
dev
);

201 
	`u8g_dev_ssd1325_2bô_wrôe_buf„r
(
u8g
, 
dev
);

202 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

205 
U8G_DEV_MSG_CONTRAST
:

206 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

207 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

208 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

209 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

210 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

213  
	`u8g_dev_pb8v2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

214 
	}
}

216 
uöt8_t
 
	$u8g_dev_ssd1325_nhd27ﬁed_2x_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

218 
msg
)

220 
U8G_DEV_MSG_INIT
:

221 
	`u8g_InôCom
(
u8g
, 
dev
);

222 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_2bô_nhd_27_12864ucy3_öô_£q
);

224 
U8G_DEV_MSG_STOP
:

226 
U8G_DEV_MSG_PAGE_NEXT
:

228 
	`u8g_dev_ssd1325_2bô_2x_¥ï¨e_∑ge
(
u8g
, 
dev
, 0);

229 
	`u8g_dev_ssd1325_2bô_2x_wrôe_buf„r
(
u8g
, 
dev
, 0);

230 
	`u8g_dev_ssd1325_2bô_2x_¥ï¨e_∑ge
(
u8g
, 
dev
, 1);

231 
	`u8g_dev_ssd1325_2bô_2x_wrôe_buf„r
(
u8g
, 
dev
, 1);

232 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

235 
U8G_DEV_MSG_CONTRAST
:

236 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

237 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

238 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

239 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

240 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

243  
	`u8g_dev_pb16v2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

244 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_ssd1325_nhd27oled_gr_new.c

45 
	~"u8g.h
"

47 
	#WIDTH
 128

	)

48 
	#HEIGHT
 64

	)

51 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1325_2bô_nhd_27_12864ucy3_öô_£q
[] 
	gPROGMEM
 = {

52 
U8G_ESC_DLY
(10),

53 
U8G_ESC_CS
(0),

54 
U8G_ESC_ADR
(0),

55 
U8G_ESC_RST
(1),

56 
U8G_ESC_CS
(1),

78 
U8G_ESC_DLY
(50),

79 
U8G_ESC_CS
(0),

80 
U8G_ESC_END


83 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1325_2bô_nhd_27_12864ucy3_¥ï¨e_∑ge_£q
[] 
	gPROGMEM
 = {

84 
U8G_ESC_ADR
(0),

85 
U8G_ESC_CS
(1),

90 
U8G_ESC_END


93 
	$u8g_dev_ssd1325_gr_¥ï¨e_row
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
dñè_row
)

95 
uöt8_t
 
row
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.
∑ge
;

97 
row
 *((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.
∑ge_height
;

98 
row
 +
dñè_row
;

100 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_2bô_nhd_27_12864ucy3_¥ï¨e_∑ge_£q
);

102 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
row
);

103 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
row
+1);

107 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

108 
	}
}

110 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_⁄
[] 
	gPROGMEM
 = {

111 
U8G_ESC_ADR
(0),

112 
U8G_ESC_CS
(1),

114 
U8G_ESC_CS
(1),

115 
U8G_ESC_END


118 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_off
[] 
	gPROGMEM
 = {

119 
U8G_ESC_ADR
(0),

120 
U8G_ESC_CS
(1),

122 
U8G_ESC_DLY
(50),

123 
U8G_ESC_CS
(1),

124 
U8G_ESC_END


129 
uöt8_t
 
	$u8g_dev_ssd1325_nhd27ﬁed_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

131 
msg
)

133 
U8G_DEV_MSG_INIT
:

134 
	`u8g_InôCom
(
u8g
, 
dev
);

135 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_2bô_nhd_27_12864ucy3_öô_£q
);

137 
U8G_DEV_MSG_STOP
:

139 
U8G_DEV_MSG_PAGE_NEXT
:

141 
uöt8_t
 
i
;

142 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

143 
uöt8_t
 *
p
 = 
pb
->
buf
;

144 
u8g_uöt_t
 
˙t
;

145 
˙t
 = 
pb
->
width
;

146 
˙t
 >>= 2;

148  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i++ )

150 
	`u8g_dev_ssd1325_gr_¥ï¨e_row
(
u8g
, 
dev
, 
i
);

151 
	`u8g_WrôeSequí˚4LTo16GrDevi˚
(
u8g
, 
dev
, 
˙t
, 
p
);

152 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

153 
p
+=
˙t
;

157 
U8G_DEV_MSG_CONTRAST
:

158 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

159 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

160 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

161 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

162 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

164 
U8G_DEV_MSG_SLEEP_ON
:

165 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

167 
U8G_DEV_MSG_SLEEP_OFF
:

168 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

171  
	`u8g_dev_pb8h2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

172 
	}
}

176 
uöt8_t
 
	$u8g_dev_ssd1325_nhd27ﬁed_2x_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

178 
msg
)

180 
U8G_DEV_MSG_INIT
:

181 
	`u8g_InôCom
(
u8g
, 
dev
);

182 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_2bô_nhd_27_12864ucy3_öô_£q
);

184 
U8G_DEV_MSG_STOP
:

186 
U8G_DEV_MSG_PAGE_NEXT
:

188 
uöt8_t
 
i
;

189 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

190 
uöt8_t
 *
p
 = 
pb
->
buf
;

191 
u8g_uöt_t
 
˙t
;

192 
˙t
 = 
pb
->
width
;

193 
˙t
 >>= 2;

195  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i++ )

197 
	`u8g_dev_ssd1325_gr_¥ï¨e_row
(
u8g
, 
dev
, 
i
);

198 
	`u8g_WrôeSequí˚4LTo16GrDevi˚
(
u8g
, 
dev
, 
˙t
, 
p
);

199 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

200 
p
+=
˙t
;

204 
U8G_DEV_MSG_CONTRAST
:

205 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

206 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

207 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

208 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

209 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

211 
U8G_DEV_MSG_SLEEP_ON
:

212 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

214 
U8G_DEV_MSG_SLEEP_OFF
:

215 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

218  
	`u8g_dev_pb16h2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

219 
	}
}

221 
U8G_PB_DEV
(
u8g_dev_ssd1325_nhd27ﬁed_gr_sw_•i
 , 
WIDTH
, 
HEIGHT
, 4, 
u8g_dev_ssd1325_nhd27ﬁed_gr_‚
, 
U8G_COM_SW_SPI
);

222 
U8G_PB_DEV
(
u8g_dev_ssd1325_nhd27ﬁed_gr_hw_•i
 , 
WIDTH
, 
HEIGHT
, 4, 
u8g_dev_ssd1325_nhd27ﬁed_gr_‚
, 
U8G_COM_HW_SPI
);

224 
uöt8_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_buf
[
WIDTH
*2] 
	gU8G_NOCOMMON
 ;

225 
u8g_pb_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_pb
 = { {8, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_ssd1325_nhd27ﬁed_2x_buf
};

226 
u8g_dev_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_gr_sw_•i
 = { 
u8g_dev_ssd1325_nhd27ﬁed_2x_gr_‚
, &
u8g_dev_ssd1325_nhd27ﬁed_2x_pb
, 
U8G_COM_SW_SPI
 };

227 
u8g_dev_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_gr_hw_•i
 = { 
u8g_dev_ssd1325_nhd27ﬁed_2x_gr_‚
, &
u8g_dev_ssd1325_nhd27ﬁed_2x_pb
, 
U8G_COM_HW_SPI
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_ssd1327_96x96_gr.c

45 
	~"u8g.h
"

47 
	#WIDTH
 96

	)

48 
	#HEIGHT
 96

	)

49 
	#XOFFSET
 8

	)

54 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1327_2bô_96x96_öô_£q
[] 
	gPROGMEM
 = {

55 
U8G_ESC_DLY
(10),

56 
U8G_ESC_CS
(0),

57 
U8G_ESC_ADR
(0),

58 
U8G_ESC_RST
(1),

59 
U8G_ESC_CS
(1),

96 
U8G_ESC_DLY
(100),

98 
U8G_ESC_DLY
(100),

101 
U8G_ESC_DLY
(100),

112 
U8G_ESC_ADR
(1),

118 
U8G_ESC_CS
(0),

119 
U8G_ESC_END


122 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1327_2bô_96x96_¥ï¨e_∑ge_£q
[] 
	gPROGMEM
 = {

123 
U8G_ESC_ADR
(0),

124 
U8G_ESC_CS
(1),

126 
XOFFSET
,

129 
U8G_ESC_END


133 
	$u8g_dev_ssd1327_2bô_¥ï¨e_∑ge
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

135 
uöt8_t
 
∑ge
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.page;

137 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1327_2bô_96x96_¥ï¨e_∑ge_£q
);

139 
∑ge
 <<= 2;

140 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

141 
∑ge
 += 3;

142 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

144 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

145 
	}
}

147 
	$u8g_dev_ssd1327_2bô_2x_¥ï¨e_∑ge
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
is_odd
)

149 
uöt8_t
 
∑ge
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.page;

151 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1327_2bô_96x96_¥ï¨e_∑ge_£q
);

153 
∑ge
 <<= 1;

154 
∑ge
 +
is_odd
;

156 
∑ge
 <<= 2;

157 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

158 
∑ge
 += 3;

159 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

161 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

162 
	}
}

165 
	$u8g_dev_ssd1327_2bô_wrôe_4_pixñ
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
À·
, uöt8_à
right
)

167 
uöt8_t
 
d
, 
tmp
, 
˙t
;

168 
uöt8_t
 
buf
[4];

169 
buf
[0] = 0;

170 
buf
[1] = 0;

171 
buf
[2] = 0;

172 
buf
[3] = 0;

173 
˙t
 = 0;

176 i‡–
À·
 =0 && 
right
 == 0 )

178 
d
 = 
À·
;

179 
d
 &= 3;

180 
d
 <<= 4;

181 
tmp
 = 
right
;

182 
tmp
 &= 3;

183 
d
 |
tmp
;

184 
d
 <<= 2;

185 
buf
[
˙t
] = 
d
;

186 
À·
 >>= 2;

187 
right
 >>= 2;

188 
˙t
++;

189 } 
˙t
 < 4 );

190 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 4, 
buf
);

191 
	}
}

193 
	$u8g_dev_ssd1327_2bô_wrôe_buf„r
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

195 
uöt8_t
 
˙t
, 
À·
, 
right
;

196 
uöt8_t
 *
±r
;

197 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

199 
˙t
 = 
pb
->
width
;

200 
˙t
 >>= 1;

201 
±r
 = 
pb
->
buf
;

204 
À·
 = *
±r
++;

205 
right
 = *
±r
++;

206 
	`u8g_dev_ssd1327_2bô_wrôe_4_pixñ
(
u8g
, 
dev
, 
À·
, 
right
);

207 
˙t
--;

208 }  
˙t
 > 0 );

209 
	}
}

211 
	$u8g_dev_ssd1327_2bô_2x_wrôe_buf„r
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
is_odd
)

213 
uöt8_t
 
˙t
, 
À·
, 
right
;

214 
uöt8_t
 *
±r
;

215 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

217 
±r
 = 
pb
->
buf
;

218 
˙t
 = 
pb
->
width
;

219 i‡–
is_odd
 )

220 
±r
 +
˙t
;

221 
˙t
 >>= 1;

224 
À·
 = *
±r
++;

225 
right
 = *
±r
++;

226 
	`u8g_dev_ssd1327_2bô_wrôe_4_pixñ
(
u8g
, 
dev
, 
À·
, 
right
);

227 
˙t
--;

228 }  
˙t
 > 0 );

229 
	}
}

231 
uöt8_t
 
	$u8g_dev_ssd1327_96x96_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

233 
msg
)

235 
U8G_DEV_MSG_INIT
:

236 
	`u8g_InôCom
(
u8g
, 
dev
);

237 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1327_2bô_96x96_öô_£q
);

239 
U8G_DEV_MSG_STOP
:

241 
U8G_DEV_MSG_PAGE_NEXT
:

243 
	`u8g_dev_ssd1327_2bô_¥ï¨e_∑ge
(
u8g
, 
dev
);

244 
	`u8g_dev_ssd1327_2bô_wrôe_buf„r
(
u8g
, 
dev
);

245 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

248 
U8G_DEV_MSG_CONTRAST
:

249 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

250 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

251 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

252 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

253 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

256  
	`u8g_dev_pb8v2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

257 
	}
}

259 
uöt8_t
 
	$u8g_dev_ssd1327_96x96_2x_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

261 
msg
)

263 
U8G_DEV_MSG_INIT
:

264 
	`u8g_InôCom
(
u8g
, 
dev
);

265 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1327_2bô_96x96_öô_£q
);

267 
U8G_DEV_MSG_STOP
:

269 
U8G_DEV_MSG_PAGE_NEXT
:

271 
	`u8g_dev_ssd1327_2bô_2x_¥ï¨e_∑ge
(
u8g
, 
dev
, 0);

272 
	`u8g_dev_ssd1327_2bô_2x_wrôe_buf„r
(
u8g
, 
dev
, 0);

273 
	`u8g_dev_ssd1327_2bô_2x_¥ï¨e_∑ge
(
u8g
, 
dev
, 1);

274 
	`u8g_dev_ssd1327_2bô_2x_wrôe_buf„r
(
u8g
, 
dev
, 1);

275 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

278 
U8G_DEV_MSG_CONTRAST
:

279 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

280 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

281 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

282 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

283 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

286  
	`u8g_dev_pb16v2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

287 
	}
}

289 
U8G_PB_DEV
(
u8g_dev_ssd1327_96x96_gr_sw_•i
 , 
WIDTH
, 
HEIGHT
, 4, 
u8g_dev_ssd1327_96x96_gr_‚
, 
U8G_COM_SW_SPI
);

290 
U8G_PB_DEV
(
u8g_dev_ssd1327_96x96_gr_hw_•i
 , 
WIDTH
, 
HEIGHT
, 4, 
u8g_dev_ssd1327_96x96_gr_‚
, 
U8G_COM_HW_SPI
);

291 
U8G_PB_DEV
(
u8g_dev_ssd1327_96x96_gr_i2c
 , 
WIDTH
, 
HEIGHT
, 4, 
u8g_dev_ssd1327_96x96_gr_‚
, 
U8G_COM_SSD_I2C
);

293 
	#DWIDTH
 (2*
WIDTH
)

	)

294 
uöt8_t
 
	gu8g_dev_ssd1327_96x96_2x_buf
[
DWIDTH
] 
	gU8G_NOCOMMON
 ;

295 
u8g_pb_t
 
	gu8g_dev_ssd1327_96x96_2x_pb
 = { {8, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_ssd1327_96x96_2x_buf
};

296 
u8g_dev_t
 
	gu8g_dev_ssd1327_96x96_2x_gr_sw_•i
 = { 
u8g_dev_ssd1327_96x96_2x_gr_‚
, &
u8g_dev_ssd1327_96x96_2x_pb
, 
U8G_COM_SW_SPI
 };

297 
u8g_dev_t
 
	gu8g_dev_ssd1327_96x96_2x_gr_hw_•i
 = { 
u8g_dev_ssd1327_96x96_2x_gr_‚
, &
u8g_dev_ssd1327_96x96_2x_pb
, 
U8G_COM_HW_SPI
 };

298 
u8g_dev_t
 
	gu8g_dev_ssd1327_96x96_2x_gr_i2c
 = { 
u8g_dev_ssd1327_96x96_2x_gr_‚
, &
u8g_dev_ssd1327_96x96_2x_pb
, 
U8G_COM_SSD_I2C
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_st7565_64128n.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

44 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_64128n_öô_£q
[] 
	gPROGMEM
 = {

45 
U8G_ESC_CS
(0),

46 
U8G_ESC_ADR
(0),

47 
U8G_ESC_CS
(1),

48 
U8G_ESC_RST
(15),

57 
U8G_ESC_DLY
(50),

60 
U8G_ESC_DLY
(50),

63 
U8G_ESC_DLY
(50),

75 
U8G_ESC_DLY
(100),

77 
U8G_ESC_DLY
(100),

78 
U8G_ESC_DLY
(100),

80 
U8G_ESC_CS
(0),

81 
U8G_ESC_END


84 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_64128n_d©a_°¨t
[] 
	gPROGMEM
 = {

85 
U8G_ESC_ADR
(0),

86 
U8G_ESC_CS
(1),

89 
U8G_ESC_END


92 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_64128n_¶ìp_⁄
[] 
	gPROGMEM
 = {

93 
U8G_ESC_ADR
(0),

94 
U8G_ESC_CS
(1),

99 
U8G_ESC_CS
(1),

100 
U8G_ESC_END


103 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_64128n_¶ìp_off
[] 
	gPROGMEM
 = {

104 
U8G_ESC_ADR
(0),

105 
U8G_ESC_CS
(1),

108 
U8G_ESC_DLY
(50),

109 
U8G_ESC_CS
(1),

110 
U8G_ESC_END


113 
uöt8_t
 
	$u8g_dev_°7565_64128n_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

115 
msg
)

117 
U8G_DEV_MSG_INIT
:

118 
	`u8g_InôCom
(
u8g
, 
dev
);

119 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_64128n_öô_£q
);

121 
U8G_DEV_MSG_STOP
:

123 
U8G_DEV_MSG_PAGE_NEXT
:

125 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

126 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_64128n_d©a_°¨t
);

127 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

128 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

129 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

131 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

134 
U8G_DEV_MSG_CONTRAST
:

135 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

136 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

137 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

138 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

139 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

141 
U8G_DEV_MSG_SLEEP_ON
:

142 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_64128n_¶ìp_⁄
);

144 
U8G_DEV_MSG_SLEEP_OFF
:

145 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_64128n_¶ìp_off
);

148  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

149 
	}
}

151 
U8G_PB_DEV
(
u8g_dev_°7565_64128n_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_64128n_‚
, 
U8G_COM_SW_SPI
);

152 
U8G_PB_DEV
(
u8g_dev_°7565_64128n_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_64128n_‚
, 
U8G_COM_HW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_st7565_dogm128.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

43 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_dogm128_öô_£q
[] 
	gPROGMEM
 = {

44 
U8G_ESC_CS
(0),

45 
U8G_ESC_ADR
(0),

46 
U8G_ESC_RST
(1),

47 
U8G_ESC_CS
(1),

64 
U8G_ESC_DLY
(50),

66 
U8G_ESC_CS
(0),

67 
U8G_ESC_END


70 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_dogm128_d©a_°¨t
[] 
	gPROGMEM
 = {

71 
U8G_ESC_ADR
(0),

72 
U8G_ESC_CS
(1),

75 
U8G_ESC_END


78 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_dogm128_¶ìp_⁄
[] 
	gPROGMEM
 = {

79 
U8G_ESC_ADR
(0),

80 
U8G_ESC_CS
(1),

85 
U8G_ESC_CS
(1),

86 
U8G_ESC_END


89 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_dogm128_¶ìp_off
[] 
	gPROGMEM
 = {

90 
U8G_ESC_ADR
(0),

91 
U8G_ESC_CS
(1),

94 
U8G_ESC_DLY
(50),

95 
U8G_ESC_CS
(1),

96 
U8G_ESC_END


99 
uöt8_t
 
	$u8g_dev_°7565_dogm128_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

101 
msg
)

103 
U8G_DEV_MSG_INIT
:

104 
	`u8g_InôCom
(
u8g
, 
dev
);

105 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_dogm128_öô_£q
);

107 
U8G_DEV_MSG_STOP
:

109 
U8G_DEV_MSG_PAGE_NEXT
:

111 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

112 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_dogm128_d©a_°¨t
);

113 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

114 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

115 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

117 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

120 
U8G_DEV_MSG_CONTRAST
:

121 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

122 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

123 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

124 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

125 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

127 
U8G_DEV_MSG_SLEEP_ON
:

128 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_dogm128_¶ìp_⁄
);

130 
U8G_DEV_MSG_SLEEP_OFF
:

131 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_dogm128_¶ìp_off
);

134  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

135 
	}
}

137 
U8G_PB_DEV
(
u8g_dev_°7565_dogm128_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_dogm128_‚
, 
U8G_COM_SW_SPI
);

138 
U8G_PB_DEV
(
u8g_dev_°7565_dogm128_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_dogm128_‚
, 
U8G_COM_HW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_st7565_dogm132.c

37 
	~"u8g.h
"

39 
	#WIDTH
 132

	)

40 
	#HEIGHT
 32

	)

41 
	#PAGE_HEIGHT
 8

	)

43 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_dogm132_öô_£q
[] 
	gPROGMEM
 = {

44 
U8G_ESC_CS
(0),

45 
U8G_ESC_ADR
(0),

46 
U8G_ESC_RST
(1),

47 
U8G_ESC_CS
(1),

64 #ifde‡
OBSOLETE_DOGM128


80 
U8G_ESC_DLY
(100),

82 
U8G_ESC_DLY
(100),

83 
U8G_ESC_DLY
(100),

85 
U8G_ESC_CS
(0),

86 
U8G_ESC_END


89 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_dogm132_d©a_°¨t
[] 
	gPROGMEM
 = {

90 
U8G_ESC_ADR
(0),

91 
U8G_ESC_CS
(1),

94 
U8G_ESC_END


97 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_dogm132_¶ìp_⁄
[] 
	gPROGMEM
 = {

98 
U8G_ESC_ADR
(0),

99 
U8G_ESC_CS
(1),

104 
U8G_ESC_CS
(1),

105 
U8G_ESC_END


108 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_dogm132_¶ìp_off
[] 
	gPROGMEM
 = {

109 
U8G_ESC_ADR
(0),

110 
U8G_ESC_CS
(1),

113 
U8G_ESC_DLY
(50),

114 
U8G_ESC_CS
(1),

115 
U8G_ESC_END


118 
uöt8_t
 
	$u8g_dev_°7565_dogm132_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

120 
msg
)

122 
U8G_DEV_MSG_INIT
:

123 
	`u8g_InôCom
(
u8g
, 
dev
);

124 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_dogm132_öô_£q
);

126 
U8G_DEV_MSG_STOP
:

128 
U8G_DEV_MSG_PAGE_NEXT
:

130 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

131 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_dogm132_d©a_°¨t
);

132 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

133 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

134 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

136 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

139 
U8G_DEV_MSG_CONTRAST
:

140 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

141 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

142 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

143 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

144 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

146 
U8G_DEV_MSG_SLEEP_ON
:

147 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_dogm132_¶ìp_⁄
);

149 
U8G_DEV_MSG_SLEEP_OFF
:

150 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_dogm132_¶ìp_off
);

153  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

154 
	}
}

156 
U8G_PB_DEV
(
u8g_dev_°7565_dogm132_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_dogm132_‚
, 
U8G_COM_SW_SPI
);

157 
U8G_PB_DEV
(
u8g_dev_°7565_dogm132_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_dogm132_‚
, 
U8G_COM_HW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_st7565_lm6059.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

44 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_lm6059_öô_£q
[] 
	gPROGMEM
 = {

45 
U8G_ESC_CS
(0),

46 
U8G_ESC_ADR
(0),

47 
U8G_ESC_CS
(1),

48 
U8G_ESC_RST
(15),

57 
U8G_ESC_DLY
(50),

60 
U8G_ESC_DLY
(50),

63 
U8G_ESC_DLY
(50),

77 
U8G_ESC_DLY
(100),

79 
U8G_ESC_DLY
(100),

80 
U8G_ESC_DLY
(100),

82 
U8G_ESC_CS
(0),

83 
U8G_ESC_END


86 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_lm6059_d©a_°¨t
[] 
	gPROGMEM
 = {

87 
U8G_ESC_ADR
(0),

88 
U8G_ESC_CS
(1),

91 
U8G_ESC_END


94 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_lm6059_¶ìp_⁄
[] 
	gPROGMEM
 = {

95 
U8G_ESC_ADR
(0),

96 
U8G_ESC_CS
(1),

101 
U8G_ESC_CS
(1),

102 
U8G_ESC_END


105 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_lm6059_¶ìp_off
[] 
	gPROGMEM
 = {

106 
U8G_ESC_ADR
(0),

107 
U8G_ESC_CS
(1),

110 
U8G_ESC_DLY
(50),

111 
U8G_ESC_CS
(1),

112 
U8G_ESC_END


116 
uöt8_t
 
	$u8g_dev_°7565_lm6059_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

118 
msg
)

120 
U8G_DEV_MSG_INIT
:

121 
	`u8g_InôCom
(
u8g
, 
dev
);

122 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_lm6059_öô_£q
);

124 
U8G_DEV_MSG_STOP
:

126 
U8G_DEV_MSG_PAGE_NEXT
:

128 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

129 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_lm6059_d©a_°¨t
);

130 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

131 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

132 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

134 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

137 
U8G_DEV_MSG_CONTRAST
:

138 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

139 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

140 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

141 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

142 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

144 
U8G_DEV_MSG_SLEEP_ON
:

145 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_lm6059_¶ìp_⁄
);

147 
U8G_DEV_MSG_SLEEP_OFF
:

148 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_lm6059_¶ìp_off
);

151  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

152 
	}
}

154 
U8G_PB_DEV
(
u8g_dev_°7565_lm6059_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_lm6059_‚
, 
U8G_COM_SW_SPI
);

155 
U8G_PB_DEV
(
u8g_dev_°7565_lm6059_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_lm6059_‚
, 
U8G_COM_HW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_st7565_lm6063.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

43 #ifde‡
OLD_ADAFRUIT_CODE


44 c⁄° 
uöt8_t
 
	gOLD_u8g_dev_°7565_lm6063_öô_£q
[] 
	gPROGMEM
 = {

45 
U8G_ESC_CS
(0),

46 
U8G_ESC_ADR
(0),

47 
U8G_ESC_RST
(1),

48 
U8G_ESC_CS
(1),

65 
U8G_ESC_DLY
(100),

67 
U8G_ESC_DLY
(100),

68 
U8G_ESC_DLY
(100),

70 
U8G_ESC_CS
(0),

71 
U8G_ESC_END


76 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_lm6063_öô_£q
[] 
	gPROGMEM
 = {

77 
U8G_ESC_CS
(0),

78 
U8G_ESC_ADR
(0),

79 
U8G_ESC_CS
(1),

80 
U8G_ESC_RST
(15),

88 
U8G_ESC_DLY
(50),

91 
U8G_ESC_DLY
(50),

94 
U8G_ESC_DLY
(50),

108 
U8G_ESC_DLY
(100),

110 
U8G_ESC_DLY
(100),

111 
U8G_ESC_DLY
(100),

113 
U8G_ESC_CS
(0),

114 
U8G_ESC_END


117 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_lm6063_d©a_°¨t
[] 
	gPROGMEM
 = {

118 
U8G_ESC_ADR
(0),

119 
U8G_ESC_CS
(1),

122 
U8G_ESC_END


125 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_°7565_¶ìp_⁄
[] 
	gPROGMEM
 = {

126 
U8G_ESC_ADR
(0),

127 
U8G_ESC_CS
(1),

132 
U8G_ESC_CS
(1),

133 
U8G_ESC_END


136 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_°7565_¶ìp_off
[] 
	gPROGMEM
 = {

137 
U8G_ESC_ADR
(0),

138 
U8G_ESC_CS
(1),

141 
U8G_ESC_DLY
(50),

142 
U8G_ESC_CS
(1),

143 
U8G_ESC_END


147 
uöt8_t
 
	$u8g_dev_°7565_lm6063_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

149 
msg
)

151 
U8G_DEV_MSG_INIT
:

152 
	`u8g_InôCom
(
u8g
, 
dev
);

153 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_lm6063_öô_£q
);

155 
U8G_DEV_MSG_STOP
:

157 
U8G_DEV_MSG_PAGE_NEXT
:

159 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

160 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_lm6063_d©a_°¨t
);

161 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

162 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

163 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

165 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

168 
U8G_DEV_MSG_CONTRAST
:

169 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

170 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

171 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

172 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

173 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

175 
U8G_DEV_MSG_SLEEP_ON
:

176 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_°7565_¶ìp_⁄
);

178 
U8G_DEV_MSG_SLEEP_OFF
:

179 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_°7565_¶ìp_off
);

182  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

183 
	}
}

185 
U8G_PB_DEV
(
u8g_dev_°7565_lm6063_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_lm6063_‚
, 
U8G_COM_SW_SPI
);

186 
U8G_PB_DEV
(
u8g_dev_°7565_lm6063_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_lm6063_‚
, 
U8G_COM_HW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_st7565_nhd_c12832.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 32

	)

41 
	#PAGE_HEIGHT
 8

	)

43 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_c12832_öô_£q
[] 
	gPROGMEM
 = {

44 
U8G_ESC_CS
(0),

45 
U8G_ESC_ADR
(0),

46 
U8G_ESC_RST
(1),

47 
U8G_ESC_CS
(1),

65 
U8G_ESC_DLY
(100),

67 
U8G_ESC_DLY
(100),

68 
U8G_ESC_DLY
(100),

70 
U8G_ESC_CS
(0),

71 
U8G_ESC_END


74 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_c12832_d©a_°¨t
[] 
	gPROGMEM
 = {

75 
U8G_ESC_ADR
(0),

76 
U8G_ESC_CS
(1),

79 
U8G_ESC_END


82 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_c12832_¶ìp_⁄
[] 
	gPROGMEM
 = {

83 
U8G_ESC_ADR
(0),

84 
U8G_ESC_CS
(1),

89 
U8G_ESC_CS
(1),

90 
U8G_ESC_END


93 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_c12832_¶ìp_off
[] 
	gPROGMEM
 = {

94 
U8G_ESC_ADR
(0),

95 
U8G_ESC_CS
(1),

98 
U8G_ESC_DLY
(50),

99 
U8G_ESC_CS
(1),

100 
U8G_ESC_END


103 
uöt8_t
 
	$u8g_dev_°7565_c12832_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

105 
msg
)

107 
U8G_DEV_MSG_INIT
:

108 
	`u8g_InôCom
(
u8g
, 
dev
);

109 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_c12832_öô_£q
);

111 
U8G_DEV_MSG_STOP
:

113 
U8G_DEV_MSG_PAGE_NEXT
:

115 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

116 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_c12832_d©a_°¨t
);

117 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

118 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

119 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

121 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

124 
U8G_DEV_MSG_CONTRAST
:

125 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

126 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

127 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

128 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

129 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

131 
U8G_DEV_MSG_SLEEP_ON
:

132 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_c12832_¶ìp_⁄
);

134 
U8G_DEV_MSG_SLEEP_OFF
:

135 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_c12832_¶ìp_off
);

138  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

139 
	}
}

141 
U8G_PB_DEV
(
u8g_dev_°7565_nhd_c12832_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_c12832_‚
, 
U8G_COM_SW_SPI
);

142 
U8G_PB_DEV
(
u8g_dev_°7565_nhd_c12832_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_c12832_‚
, 
U8G_COM_HW_SPI
);

143 
U8G_PB_DEV
(
u8g_dev_°7565_nhd_c12832_∑øŒñ
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_c12832_‚
, 
U8G_COM_PARALLEL
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_st7565_nhd_c12864.c

39 
	~"u8g.h
"

41 
	#WIDTH
 128

	)

42 
	#HEIGHT
 64

	)

43 
	#PAGE_HEIGHT
 8

	)

45 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_nhd_c12864_öô_£q
[] 
	gPROGMEM
 = {

46 
U8G_ESC_CS
(0),

47 
U8G_ESC_ADR
(0),

48 
U8G_ESC_RST
(10),

49 
U8G_ESC_CS
(1),

66 
U8G_ESC_DLY
(100),

68 
U8G_ESC_DLY
(100),

69 
U8G_ESC_DLY
(100),

71 
U8G_ESC_CS
(0),

72 
U8G_ESC_END


75 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_nhd_c12864_d©a_°¨t
[] 
	gPROGMEM
 = {

76 
U8G_ESC_ADR
(0),

77 
U8G_ESC_CS
(1),

80 
U8G_ESC_END


83 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_c12864_¶ìp_⁄
[] 
	gPROGMEM
 = {

84 
U8G_ESC_ADR
(0),

85 
U8G_ESC_CS
(1),

90 
U8G_ESC_CS
(1),

91 
U8G_ESC_END


94 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_c12864_¶ìp_off
[] 
	gPROGMEM
 = {

95 
U8G_ESC_ADR
(0),

96 
U8G_ESC_CS
(1),

99 
U8G_ESC_DLY
(50),

100 
U8G_ESC_CS
(1),

101 
U8G_ESC_END


104 
uöt8_t
 
	$u8g_dev_°7565_nhd_c12864_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

106 
msg
)

108 
U8G_DEV_MSG_INIT
:

109 
	`u8g_InôCom
(
u8g
, 
dev
);

110 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_nhd_c12864_öô_£q
);

112 
U8G_DEV_MSG_STOP
:

114 
U8G_DEV_MSG_PAGE_NEXT
:

116 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

117 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_nhd_c12864_d©a_°¨t
);

118 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

119 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

120 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

122 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

125 
U8G_DEV_MSG_CONTRAST
:

126 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

127 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

128 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

129 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

130 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

132 
U8G_DEV_MSG_SLEEP_ON
:

133 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_c12864_¶ìp_⁄
);

135 
U8G_DEV_MSG_SLEEP_OFF
:

136 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_c12864_¶ìp_off
);

139  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

140 
	}
}

142 
U8G_PB_DEV
(
u8g_dev_°7565_nhd_c12864_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_nhd_c12864_‚
, 
U8G_COM_SW_SPI
);

143 
U8G_PB_DEV
(
u8g_dev_°7565_nhd_c12864_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_nhd_c12864_‚
, 
U8G_COM_HW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_st7687_c144mvgd.c

39 
	~"u8g.h
"

41 
	#WIDTH
 128

	)

42 
	#HEIGHT
 128

	)

43 
	#PAGE_HEIGHT
 8

	)

46 #ifde‡
FIRST_VERSION


52 c⁄° 
uöt8_t
 
	gu8g_dev_°7687_c144mvgd_öô_£q
[] 
	gPROGMEM
 = {

53 
U8G_ESC_CS
(0),

54 
U8G_ESC_ADR
(0),

55 
U8G_ESC_CS
(1),

56 
U8G_ESC_RST
(15),

59 
U8G_ESC_DLY
(200),

62 
U8G_ESC_ADR
(1),

64 
U8G_ESC_ADR
(0),

65 
U8G_ESC_DLY
(100),

68 
U8G_ESC_ADR
(1),

70 
U8G_ESC_ADR
(0),

71 
U8G_ESC_DLY
(100),

73 #ifde‡
NOT_REQUIRED


75 
U8G_ESC_ADR
(1),

77 
U8G_ESC_ADR
(0),

78 
U8G_ESC_DLY
(100),

82 
U8G_ESC_DLY
(100),

85 
U8G_ESC_DLY
(100),

89 
U8G_ESC_DLY
(100),

92 
U8G_ESC_ADR
(1),

95 
U8G_ESC_ADR
(0),

96 
U8G_ESC_DLY
(100),

99 
U8G_ESC_ADR
(1),

101 
U8G_ESC_ADR
(0),

104 
U8G_ESC_ADR
(1),

106 
U8G_ESC_ADR
(0),

109 
U8G_ESC_ADR
(1),

111 
U8G_ESC_ADR
(0),

114 
U8G_ESC_ADR
(1),

116 
U8G_ESC_ADR
(0),

119 
U8G_ESC_ADR
(1),

121 
U8G_ESC_ADR
(0),

124 
U8G_ESC_ADR
(1),

126 
U8G_ESC_ADR
(0),

130 
U8G_ESC_ADR
(1),

132 
U8G_ESC_ADR
(0),

135 
U8G_ESC_ADR
(1),

137 
U8G_ESC_ADR
(0),

140 
U8G_ESC_ADR
(1),

142 
U8G_ESC_ADR
(0),

145 
U8G_ESC_ADR
(1),

147 
U8G_ESC_ADR
(0),

150 
U8G_ESC_ADR
(1),

152 
U8G_ESC_ADR
(0),

155 
U8G_ESC_ADR
(1),

160 
U8G_ESC_ADR
(0),

163 
U8G_ESC_ADR
(1),

180 
U8G_ESC_ADR
(0),

183 
U8G_ESC_ADR
(1),

192 
U8G_ESC_ADR
(0),

196 
U8G_ESC_CS
(0),

197 
U8G_ESC_END


207 c⁄° 
uöt8_t
 
	gu8g_dev_°7687_c144mvgd_öô_£q
[] 
	gPROGMEM
 = {

208 
U8G_ESC_CS
(0),

209 
U8G_ESC_ADR
(0),

210 
U8G_ESC_CS
(1),

211 
U8G_ESC_RST
(15),

214 
U8G_ESC_DLY
(5),

217 
U8G_ESC_ADR
(1),

219 
U8G_ESC_ADR
(0),

223 
U8G_ESC_ADR
(1),

225 
U8G_ESC_ADR
(0),

228 
U8G_ESC_ADR
(1),

230 
U8G_ESC_ADR
(0),

234 
U8G_ESC_ADR
(1),

250 
U8G_ESC_ADR
(0),

253 
U8G_ESC_ADR
(1),

269 
U8G_ESC_ADR
(0),

272 
U8G_ESC_ADR
(1),

275 
U8G_ESC_ADR
(0),

279 
U8G_ESC_ADR
(1),

281 
U8G_ESC_ADR
(0),

284 
U8G_ESC_ADR
(1),

287 
U8G_ESC_ADR
(0),

290 
U8G_ESC_ADR
(1),

292 
U8G_ESC_ADR
(0),

295 
U8G_ESC_ADR
(1),

298 
U8G_ESC_ADR
(0),

301 
U8G_ESC_ADR
(1),

303 
U8G_ESC_ADR
(0),

306 
U8G_ESC_ADR
(1),

311 
U8G_ESC_ADR
(0),

314 
U8G_ESC_ADR
(1),

319 
U8G_ESC_ADR
(0),

322 
U8G_ESC_ADR
(1),

324 
U8G_ESC_ADR
(0),

331 
U8G_ESC_CS
(0),

332 
U8G_ESC_END


342 
uöt8_t
 
	$gë_byã_1
(
uöt8_t
 
v
)

344 
v
 >>= 4;

345 
v
 &= 0x0e;

346  
v
;

347 
	}
}

349 
uöt8_t
 
	$gë_byã_2
(
uöt8_t
 
v
)

351 
uöt8_t
 
w
;

352 
w
 = 
v
;

353 
w
 &= 3;

354 
w
 = (w<<2) | w;

355 
v
 <<= 3;

356 
v
 &= 0x0e0;

357 
w
 |
v
;

358  
w
;

359 
	}
}

361 
uöt8_t
 
	$u8g_dev_°7687_c144mvgd_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

363 
msg
)

365 
U8G_DEV_MSG_INIT
:

366 
	`u8g_InôCom
(
u8g
, 
dev
);

367 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7687_c144mvgd_öô_£q
);

369 
U8G_DEV_MSG_STOP
:

371 
U8G_DEV_MSG_PAGE_NEXT
:

373 
uöt8_t
 
y
, 
i
, 
j
;

374 
uöt8_t
 *
±r
;

375 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

377 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

378 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

379 
y
 = 
pb
->
p
.
∑ge_y0
;

380 
±r
 = 
pb
->
buf
;

382 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

383 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x02a );

384 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

385 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x000 );

386 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
WIDTH
-1 );

387 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

388 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x02b );

389 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

390 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
y
 );

391 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
y
+
PAGE_HEIGHT
-1 );

392 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

393 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x02c );

394 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

396  
i
 = 0; i < 
PAGE_HEIGHT
; i ++ )

399  
j
 = 0; j < 
WIDTH
; j ++ )

401 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`gë_byã_1
(*
±r
) );

402 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`gë_byã_2
(*
±r
) );

403 
±r
++;

406 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

407 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

411  
	`u8g_dev_pb8h8_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

412 
	}
}

415 
uöt8_t
 
	gu8g_°7687_c144mvgd_8h8_buf
[
WIDTH
*8] 
	gU8G_NOCOMMON
 ;

416 
u8g_pb_t
 
	gu8g_°7687_c144mvgd_8h8_pb
 = { {8, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_°7687_c144mvgd_8h8_buf
};

418 
u8g_dev_t
 
	gu8g_dev_°7687_c144mvgd_sw_•i
 = { 
u8g_dev_°7687_c144mvgd_‚
, &
u8g_°7687_c144mvgd_8h8_pb
, 
u8g_com_¨duöo_sw_•i_‚
 };

420 
u8g_dev_t
 
	gu8g_dev_°7687_c144mvgd_8bô
 = { 
u8g_dev_°7687_c144mvgd_‚
, &
u8g_°7687_c144mvgd_8h8_pb
, 
U8G_COM_PARALLEL
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_st7920_128x64.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

45 c⁄° 
uöt8_t
 
	gu8g_dev_°7920_128x64_öô_£q
[] 
	gPROGMEM
 = {

46 
U8G_ESC_CS
(0),

47 
U8G_ESC_ADR
(0),

48 
U8G_ESC_RST
(15),

49 
U8G_ESC_DLY
(100),

50 
U8G_ESC_CS
(1),

51 
U8G_ESC_DLY
(50),

58 
U8G_ESC_DLY
(100),

60 
U8G_ESC_CS
(0),

61 
U8G_ESC_END


64 
uöt8_t
 
	$u8g_dev_°7920_128x64_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

66 
msg
)

68 
U8G_DEV_MSG_INIT
:

69 
	`u8g_InôCom
(
u8g
, 
dev
);

70 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7920_128x64_öô_£q
);

72 
U8G_DEV_MSG_STOP
:

74 
U8G_DEV_MSG_PAGE_NEXT
:

76 
uöt8_t
 
y
, 
i
;

77 
uöt8_t
 *
±r
;

78 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

80 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

81 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

82 
y
 = 
pb
->
p
.
∑ge_y0
;

83 
±r
 = 
pb
->
buf
;

84  
i
 = 0; i < 8; i ++ )

86 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

87 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x03e );

89 i‡–
y
 < 32 )

91 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | 
y
 );

92 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

96 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | (
y
-32) );

97 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | 8);

100 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

101 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

102 
±r
 +
WIDTH
/8;

103 
y
++;

105 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

109  
	`u8g_dev_pb8h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

110 
	}
}

112 
uöt8_t
 
	$u8g_dev_°7920_128x64_4x_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

114 
msg
)

116 
U8G_DEV_MSG_INIT
:

117 
	`u8g_InôCom
(
u8g
, 
dev
);

118 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7920_128x64_öô_£q
);

120 
U8G_DEV_MSG_STOP
:

122 
U8G_DEV_MSG_PAGE_NEXT
:

124 
uöt8_t
 
y
, 
i
;

125 
uöt8_t
 *
±r
;

126 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

128 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

129 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

130 
y
 = 
pb
->
p
.
∑ge_y0
;

131 
±r
 = 
pb
->
buf
;

132  
i
 = 0; i < 32; i ++ )

134 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

135 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x03e );

137 i‡–
y
 < 32 )

139 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | 
y
 );

140 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

144 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | (
y
-32) );

145 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | 8);

148 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

149 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

150 
±r
 +
WIDTH
/8;

151 
y
++;

153 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

157  
	`u8g_dev_pb32h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

158 
	}
}

160 
U8G_PB_DEV
(
u8g_dev_°7920_128x64_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7920_128x64_‚
, 
U8G_COM_ST7920_SW_SPI
);

161 
U8G_PB_DEV
(
u8g_dev_°7920_128x64_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7920_128x64_‚
, 
U8G_COM_ST7920_HW_SPI
);

162 
U8G_PB_DEV
(
u8g_dev_°7920_128x64_8bô
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7920_128x64_‚
, 
U8G_COM_FAST_PARALLEL
);

164 
	#QWIDTH
 (
WIDTH
*4)

	)

165 
uöt8_t
 
	gu8g_dev_°7920_128x64_4x_buf
[
QWIDTH
] 
	gU8G_NOCOMMON
 ;

166 
u8g_pb_t
 
	gu8g_dev_°7920_128x64_4x_pb
 = { {32, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_°7920_128x64_4x_buf
};

167 
u8g_dev_t
 
	gu8g_dev_°7920_128x64_4x_sw_•i
 = { 
u8g_dev_°7920_128x64_4x_‚
, &
u8g_dev_°7920_128x64_4x_pb
, 
U8G_COM_ST7920_SW_SPI
 };

168 
u8g_dev_t
 
	gu8g_dev_°7920_128x64_4x_hw_•i
 = { 
u8g_dev_°7920_128x64_4x_‚
, &
u8g_dev_°7920_128x64_4x_pb
, 
U8G_COM_ST7920_HW_SPI
 };

169 
u8g_dev_t
 
	gu8g_dev_°7920_128x64_4x_8bô
 = { 
u8g_dev_°7920_128x64_4x_‚
, &
u8g_dev_°7920_128x64_4x_pb
, 
U8G_COM_FAST_PARALLEL
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_st7920_192x32.c

37 
	~"u8g.h
"

39 
	#WIDTH
 192

	)

40 
	#HEIGHT
 32

	)

44 c⁄° 
uöt8_t
 
	gu8g_dev_°7920_192x32_öô_£q
[] 
	gPROGMEM
 = {

45 
U8G_ESC_CS
(0),

46 
U8G_ESC_ADR
(0),

47 
U8G_ESC_RST
(15),

48 
U8G_ESC_DLY
(100),

49 
U8G_ESC_CS
(1),

50 
U8G_ESC_DLY
(50),

57 
U8G_ESC_DLY
(100),

59 
U8G_ESC_CS
(0),

60 
U8G_ESC_END


63 
uöt8_t
 
	$u8g_dev_°7920_192x32_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

65 
msg
)

67 
U8G_DEV_MSG_INIT
:

68 
	`u8g_InôCom
(
u8g
, 
dev
);

69 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7920_192x32_öô_£q
);

71 
U8G_DEV_MSG_STOP
:

73 
U8G_DEV_MSG_PAGE_NEXT
:

75 
uöt8_t
 
y
, 
i
;

76 
uöt8_t
 *
±r
;

77 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

79 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

80 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

81 
y
 = 
pb
->
p
.
∑ge_y0
;

82 
±r
 = 
pb
->
buf
;

83  
i
 = 0; i < 8; i ++ )

85 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

86 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x03e );

87 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | 
y
 );

88 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

89 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

90 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

91 
±r
 +
WIDTH
/8;

92 
y
++;

94 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

98  
	`u8g_dev_pb8h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

99 
	}
}

101 
uöt8_t
 
	$u8g_dev_°7920_192x32_4x_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

103 
msg
)

105 
U8G_DEV_MSG_INIT
:

106 
	`u8g_InôCom
(
u8g
, 
dev
);

107 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7920_192x32_öô_£q
);

109 
U8G_DEV_MSG_STOP
:

111 
U8G_DEV_MSG_PAGE_NEXT
:

113 
uöt8_t
 
y
, 
i
;

114 
uöt8_t
 *
±r
;

115 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

117 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

118 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

119 
y
 = 
pb
->
p
.
∑ge_y0
;

120 
±r
 = 
pb
->
buf
;

121  
i
 = 0; i < 32; i ++ )

123 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

124 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x03e );

125 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | 
y
 );

126 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

127 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

128 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

129 
±r
 +
WIDTH
/8;

130 
y
++;

132 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

136  
	`u8g_dev_pb32h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

137 
	}
}

140 
U8G_PB_DEV
(
u8g_dev_°7920_192x32_sw_•i
, 
WIDTH
, 
HEIGHT
, 8, 
u8g_dev_°7920_192x32_‚
, 
U8G_COM_ST7920_SW_SPI
);

141 
U8G_PB_DEV
(
u8g_dev_°7920_192x32_hw_•i
, 
WIDTH
, 
HEIGHT
, 8, 
u8g_dev_°7920_192x32_‚
, 
U8G_COM_ST7920_HW_SPI
);

142 
U8G_PB_DEV
(
u8g_dev_°7920_192x32_8bô
, 
WIDTH
, 
HEIGHT
, 8, 
u8g_dev_°7920_192x32_‚
, 
U8G_COM_FAST_PARALLEL
);

145 
	#QWIDTH
 (
WIDTH
*4)

	)

146 
uöt8_t
 
	gu8g_dev_°7920_192x32_4x_buf
[
QWIDTH
] 
	gU8G_NOCOMMON
 ;

147 
u8g_pb_t
 
	gu8g_dev_°7920_192x32_4x_pb
 = { {32, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_°7920_192x32_4x_buf
};

148 
u8g_dev_t
 
	gu8g_dev_°7920_192x32_4x_sw_•i
 = { 
u8g_dev_°7920_192x32_4x_‚
, &
u8g_dev_°7920_192x32_4x_pb
, 
U8G_COM_ST7920_SW_SPI
 };

149 
u8g_dev_t
 
	gu8g_dev_°7920_192x32_4x_hw_•i
 = { 
u8g_dev_°7920_192x32_4x_‚
, &
u8g_dev_°7920_192x32_4x_pb
, 
U8G_COM_ST7920_HW_SPI
 };

150 
u8g_dev_t
 
	gu8g_dev_°7920_192x32_4x_8bô
 = { 
u8g_dev_°7920_192x32_4x_‚
, &
u8g_dev_°7920_192x32_4x_pb
, 
U8G_COM_FAST_PARALLEL
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_st7920_202x32.c

39 
	~"u8g.h
"

41 
	#WIDTH
 202

	)

42 
	#HEIGHT
 32

	)

43 
	#PAGE_HEIGHT
 8

	)

47 c⁄° 
uöt8_t
 
	gu8g_dev_°7920_202x32_öô_£q
[] 
	gPROGMEM
 = {

48 
U8G_ESC_CS
(0),

49 
U8G_ESC_ADR
(0),

50 
U8G_ESC_RST
(15),

51 
U8G_ESC_DLY
(100),

52 
U8G_ESC_CS
(1),

53 
U8G_ESC_DLY
(50),

60 
U8G_ESC_DLY
(100),

62 
U8G_ESC_CS
(0),

63 
U8G_ESC_END


66 
uöt8_t
 
	$u8g_dev_°7920_202x32_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

68 
msg
)

70 
U8G_DEV_MSG_INIT
:

71 
	`u8g_InôCom
(
u8g
, 
dev
);

72 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7920_202x32_öô_£q
);

74 
U8G_DEV_MSG_STOP
:

76 
U8G_DEV_MSG_PAGE_NEXT
:

78 
uöt8_t
 
y
, 
i
;

79 
uöt8_t
 *
±r
;

80 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

82 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

83 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

84 
y
 = 
pb
->
p
.
∑ge_y0
;

85 
±r
 = 
pb
->
buf
;

86  
i
 = 0; i < 8; i ++ )

88 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

89 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x03e );

90 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | 
y
 );

91 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

92 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

93 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

94 
±r
 +
WIDTH
/8;

95 
y
++;

97 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

101  
	`u8g_dev_pb8h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

102 
	}
}

104 
uöt8_t
 
	$u8g_dev_°7920_202x32_4x_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

106 
msg
)

108 
U8G_DEV_MSG_INIT
:

109 
	`u8g_InôCom
(
u8g
, 
dev
);

110 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7920_202x32_öô_£q
);

112 
U8G_DEV_MSG_STOP
:

114 
U8G_DEV_MSG_PAGE_NEXT
:

116 
uöt8_t
 
y
, 
i
;

117 
uöt8_t
 *
±r
;

118 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

120 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

121 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

122 
y
 = 
pb
->
p
.
∑ge_y0
;

123 
±r
 = 
pb
->
buf
;

124  
i
 = 0; i < 32; i ++ )

126 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

127 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x03e );

128 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | 
y
 );

129 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

130 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

131 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

132 
±r
 +
WIDTH
/8;

133 
y
++;

135 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

139  
	`u8g_dev_pb32h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

140 
	}
}

143 
U8G_PB_DEV
(
u8g_dev_°7920_202x32_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7920_202x32_‚
, 
U8G_COM_ST7920_SW_SPI
);

144 
U8G_PB_DEV
(
u8g_dev_°7920_202x32_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7920_202x32_‚
, 
U8G_COM_ST7920_HW_SPI
);

145 
U8G_PB_DEV
(
u8g_dev_°7920_202x32_8bô
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7920_202x32_‚
, 
U8G_COM_FAST_PARALLEL
);

147 
	#QWIDTH
 (
WIDTH
*4)

	)

148 
uöt8_t
 
	gu8g_dev_°7920_202x32_4x_buf
[
QWIDTH
] 
	gU8G_NOCOMMON
 ;

149 
u8g_pb_t
 
	gu8g_dev_°7920_202x32_4x_pb
 = { {32, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_°7920_202x32_4x_buf
};

150 
u8g_dev_t
 
	gu8g_dev_°7920_202x32_4x_sw_•i
 = { 
u8g_dev_°7920_202x32_4x_‚
, &
u8g_dev_°7920_202x32_4x_pb
, 
U8G_COM_ST7920_SW_SPI
 };

151 
u8g_dev_t
 
	gu8g_dev_°7920_202x32_4x_hw_•i
 = { 
u8g_dev_°7920_202x32_4x_‚
, &
u8g_dev_°7920_202x32_4x_pb
, 
U8G_COM_ST7920_HW_SPI
 };

152 
u8g_dev_t
 
	gu8g_dev_°7920_202x32_4x_8bô
 = { 
u8g_dev_°7920_202x32_4x_‚
, &
u8g_dev_°7920_202x32_4x_pb
, 
U8G_COM_FAST_PARALLEL
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_t6963_128x64.c

51 
	~"u8g.h
"

53 
	#WIDTH
 128

	)

54 
	#HEIGHT
 64

	)

55 
	#PAGE_HEIGHT
 16

	)

59 c⁄° 
uöt8_t
 
	gu8g_dev_t6963_128x64_öô_£q
[] 
	gPROGMEM
 = {

60 
U8G_ESC_CS
(0),

61 
U8G_ESC_ADR
(0),

62 
U8G_ESC_RST
(15),

64 
U8G_ESC_CS
(1),

65 
U8G_ESC_DLY
(50),

67 
U8G_ESC_ADR
(0),

70 
U8G_ESC_ADR
(1),

73 
U8G_ESC_ADR
(0),

76 
U8G_ESC_ADR
(1),

79 
U8G_ESC_ADR
(0),

82 
U8G_ESC_ADR
(1),

85 
U8G_ESC_ADR
(0),

86 
WIDTH
/8,

88 
U8G_ESC_ADR
(1),

91 
U8G_ESC_ADR
(0),

94 
U8G_ESC_ADR
(1),

97 
U8G_ESC_ADR
(0),

98 
WIDTH
/8,

100 
U8G_ESC_ADR
(1),

110 
U8G_ESC_ADR
(1),

113 
U8G_ESC_ADR
(1),

126 
U8G_ESC_ADR
(0),

129 
U8G_ESC_ADR
(1),

133 
U8G_ESC_DLY
(100),

135 
U8G_ESC_ADR
(0),

136 
U8G_ESC_CS
(0),

137 
U8G_ESC_END


140 
uöt8_t
 
	$u8g_dev_t6963_128x64_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

142 
msg
)

144 
U8G_DEV_MSG_INIT
:

145 
	`u8g_InôCom
(
u8g
, 
dev
);

146 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_t6963_128x64_öô_£q
);

148 
U8G_DEV_MSG_STOP
:

150 
U8G_DEV_MSG_PAGE_NEXT
:

152 
uöt8_t
 
y
, 
i
;

153 
uöt16_t
 
di•_øm_adr
;

154 
uöt8_t
 *
±r
;

155 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

158 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

159 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

160 
y
 = 
pb
->
p
.
∑ge_y0
;

161 
±r
 = 
pb
->
buf
;

162 
di•_øm_adr
 = 
WIDTH
/8;

163 
di•_øm_adr
 *
y
;

164  
i
 = 0; i < 
PAGE_HEIGHT
; i ++ )

166 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

167 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
&255 );

168 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
>>8 );

169 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

170 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x024 );

172 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

174 
±r
 +
WIDTH
/8;

175 
di•_øm_adr
 +
WIDTH
/8;

177 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

178 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

182  
	`u8g_dev_pb16h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

183 
	}
}

187 
uöt8_t
 
	gu8g_dev_t6963_128x64_2x_bw_buf
[
WIDTH
/8*
PAGE_HEIGHT
] 
	gU8G_NOCOMMON
 ;

188 
u8g_pb_t
 
	gu8g_dev_t6963_128x64_2x_bw_pb
 = { {
PAGE_HEIGHT
, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_t6963_128x64_2x_bw_buf
};

189 
u8g_dev_t
 
	gu8g_dev_t6963_128x64_8bô
 = { 
u8g_dev_t6963_128x64_‚
, &
u8g_dev_t6963_128x64_2x_bw_pb
, 
U8G_COM_T6963
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_t6963_240x128.c

51 
	~"u8g.h
"

53 
	#WIDTH
 240

	)

54 
	#HEIGHT
 128

	)

55 
	#PAGE_HEIGHT
 16

	)

63 c⁄° 
uöt8_t
 
	gu8g_dev_t6963_240x128_öô_£q
[] 
	gPROGMEM
 = {

64 
U8G_ESC_CS
(0),

65 
U8G_ESC_ADR
(0),

66 
U8G_ESC_RST
(15),

68 
U8G_ESC_CS
(1),

69 
U8G_ESC_DLY
(50),

71 
U8G_ESC_ADR
(0),

74 
U8G_ESC_ADR
(1),

77 
U8G_ESC_ADR
(0),

80 
U8G_ESC_ADR
(1),

83 
U8G_ESC_ADR
(0),

86 
U8G_ESC_ADR
(1),

89 
U8G_ESC_ADR
(0),

90 
WIDTH
/8,

92 
U8G_ESC_ADR
(1),

95 
U8G_ESC_ADR
(0),

98 
U8G_ESC_ADR
(1),

101 
U8G_ESC_ADR
(0),

102 
WIDTH
/8,

104 
U8G_ESC_ADR
(1),

114 
U8G_ESC_ADR
(1),

117 
U8G_ESC_ADR
(1),

130 
U8G_ESC_ADR
(0),

133 
U8G_ESC_ADR
(1),

137 
U8G_ESC_DLY
(100),

139 
U8G_ESC_ADR
(0),

140 
U8G_ESC_CS
(0),

141 
U8G_ESC_END


144 
uöt8_t
 
	$u8g_dev_t6963_240x128_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

146 
msg
)

148 
U8G_DEV_MSG_INIT
:

149 
	`u8g_InôCom
(
u8g
, 
dev
);

150 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_t6963_240x128_öô_£q
);

152 
U8G_DEV_MSG_STOP
:

154 
U8G_DEV_MSG_PAGE_NEXT
:

156 
uöt8_t
 
y
, 
i
;

157 
uöt16_t
 
di•_øm_adr
;

158 
uöt8_t
 *
±r
;

159 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

162 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

163 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

164 
y
 = 
pb
->
p
.
∑ge_y0
;

165 
±r
 = 
pb
->
buf
;

166 
di•_øm_adr
 = 
WIDTH
/8;

167 
di•_øm_adr
 *
y
;

168  
i
 = 0; i < 
PAGE_HEIGHT
; i ++ )

170 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

171 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
&255 );

172 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
>>8 );

173 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

174 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x024 );

176 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

178 
±r
 +
WIDTH
/8;

179 
di•_øm_adr
 +
WIDTH
/8;

181 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

182 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

186  
	`u8g_dev_pb16h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

187 
	}
}

191 
uöt8_t
 
	gu8g_dev_t6963_240x128_2x_bw_buf
[
WIDTH
/8*
PAGE_HEIGHT
] 
	gU8G_NOCOMMON
 ;

192 
u8g_pb_t
 
	gu8g_dev_t6963_240x128_2x_bw_pb
 = { {
PAGE_HEIGHT
, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_t6963_240x128_2x_bw_buf
};

193 
u8g_dev_t
 
	gu8g_dev_t6963_240x128_8bô
 = { 
u8g_dev_t6963_240x128_‚
, &
u8g_dev_t6963_240x128_2x_bw_pb
, 
U8G_COM_T6963
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_t6963_240x64.c

51 
	~"u8g.h
"

53 
	#WIDTH
 240

	)

54 
	#HEIGHT
 64

	)

55 
	#PAGE_HEIGHT
 16

	)

63 c⁄° 
uöt8_t
 
	gu8g_dev_t6963_240x64_öô_£q
[] 
	gPROGMEM
 = {

64 
U8G_ESC_CS
(0),

65 
U8G_ESC_ADR
(0),

66 
U8G_ESC_RST
(15),

68 
U8G_ESC_CS
(1),

69 
U8G_ESC_DLY
(50),

71 
U8G_ESC_ADR
(0),

74 
U8G_ESC_ADR
(1),

77 
U8G_ESC_ADR
(0),

80 
U8G_ESC_ADR
(1),

83 
U8G_ESC_ADR
(0),

86 
U8G_ESC_ADR
(1),

89 
U8G_ESC_ADR
(0),

90 
WIDTH
/8,

92 
U8G_ESC_ADR
(1),

95 
U8G_ESC_ADR
(0),

98 
U8G_ESC_ADR
(1),

101 
U8G_ESC_ADR
(0),

102 
WIDTH
/8,

104 
U8G_ESC_ADR
(1),

114 
U8G_ESC_ADR
(1),

117 
U8G_ESC_ADR
(1),

130 
U8G_ESC_ADR
(0),

133 
U8G_ESC_ADR
(1),

137 
U8G_ESC_DLY
(100),

139 
U8G_ESC_ADR
(0),

140 
U8G_ESC_CS
(0),

141 
U8G_ESC_END


144 
uöt8_t
 
	$u8g_dev_t6963_240x64_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

146 
msg
)

148 
U8G_DEV_MSG_INIT
:

149 
	`u8g_InôCom
(
u8g
, 
dev
);

150 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_t6963_240x64_öô_£q
);

152 
U8G_DEV_MSG_STOP
:

154 
U8G_DEV_MSG_PAGE_NEXT
:

156 
uöt8_t
 
y
, 
i
;

157 
uöt16_t
 
di•_øm_adr
;

158 
uöt8_t
 *
±r
;

159 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

162 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

163 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

164 
y
 = 
pb
->
p
.
∑ge_y0
;

165 
±r
 = 
pb
->
buf
;

166 
di•_øm_adr
 = 
WIDTH
/8;

167 
di•_øm_adr
 *
y
;

168  
i
 = 0; i < 
PAGE_HEIGHT
; i ++ )

170 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

171 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
&255 );

172 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
>>8 );

173 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

174 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x024 );

176 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

178 
±r
 +
WIDTH
/8;

179 
di•_øm_adr
 +
WIDTH
/8;

181 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

182 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

186  
	`u8g_dev_pb16h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

187 
	}
}

191 
uöt8_t
 
	gu8g_dev_t6963_240x64_2x_bw_buf
[
WIDTH
/8*
PAGE_HEIGHT
] 
	gU8G_NOCOMMON
 ;

192 
u8g_pb_t
 
	gu8g_dev_t6963_240x64_2x_bw_pb
 = { {
PAGE_HEIGHT
, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_t6963_240x64_2x_bw_buf
};

193 
u8g_dev_t
 
	gu8g_dev_t6963_240x64_8bô
 = { 
u8g_dev_t6963_240x64_‚
, &
u8g_dev_t6963_240x64_2x_bw_pb
, 
U8G_COM_T6963
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_tls8204_84x48.c

43 
	~"u8g.h
"

45 
	#WIDTH
 84

	)

46 
	#HEIGHT
 48

	)

47 
	#PAGE_HEIGHT
 8

	)

50 c⁄° 
uöt8_t
 
	gu8g_dev_és8204_öô_£q
[] 
	gPROGMEM
 = {

51 
U8G_ESC_CS
(0),

52 
U8G_ESC_ADR
(0),

53 
U8G_ESC_RST
(1),

54 
U8G_ESC_CS
(1),

63 
U8G_ESC_DLY
(100),

66 
U8G_ESC_DLY
(100),

67 
U8G_ESC_DLY
(100),

70 
U8G_ESC_DLY
(100),

71 
U8G_ESC_CS
(0),

72 
U8G_ESC_END


76 
uöt8_t
 
	$u8g_dev_és8204_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

78 
msg
)

80 
U8G_DEV_MSG_INIT
:

81 
	`u8g_InôCom
(
u8g
, 
dev
);

82 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_és8204_öô_£q
);

84 
U8G_DEV_MSG_STOP
:

86 
U8G_DEV_MSG_PAGE_NEXT
:

88 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

89 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

90 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

91 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x020 );

92 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

93 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x040 | 
pb
->
p
.
∑ge
);

94 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

95 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

97 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

100 
U8G_DEV_MSG_CONTRAST
:

102 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

103 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

104 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x021);

105 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | ( (*(
uöt8_t
 *)
¨g
) >> 1 ) );

106 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x020);

107 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

110  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

111 
	}
}

114 
U8G_PB_DEV
(
u8g_dev_és8204_84x48_sw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_és8204_‚
, 
U8G_COM_SW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_uc1610_dogxl160.c

37 
	~"u8g.h
"

39 
	#WIDTH
 160

	)

40 
	#HEIGHT
 104

	)

42 c⁄° 
uöt8_t
 
	gu8g_dev_uc1610_dogxl160_öô_£q
[] 
	gPROGMEM
 = {

43 
U8G_ESC_CS
(0),

44 
U8G_ESC_ADR
(0),

45 
U8G_ESC_RST
(1),

46 
U8G_ESC_CS
(1),

60 
U8G_ESC_DLY
(100),

62 
U8G_ESC_DLY
(100),

63 
U8G_ESC_DLY
(100),

67 
U8G_ESC_CS
(0),

68 
U8G_ESC_END


71 c⁄° 
uöt8_t
 
	gu8g_dev_uc1610_dogxl160_d©a_°¨t
[] 
	gPROGMEM
 = {

72 
U8G_ESC_ADR
(0),

73 
U8G_ESC_CS
(1),

76 
U8G_ESC_END


79 
uöt8_t
 
	$u8g_dev_1to2
(
uöt8_t
 
n
)

81 
uöt8_t
 
a
,
b
,
c
;

82 
a
 = 
n
;

83 
a
 &= 1;

84 
n
 <<= 1;

85 
b
 = 
n
;

86 
b
 &= 4;

87 
n
 <<= 1;

88 
c
 = 
n
;

89 
c
 &= 16;

90 
n
 <<= 1;

91 
n
 &= 64;

92 
n
 |
a
;

93 
n
 |
b
;

94 
n
 |
c
;

95 
n
 |=Ç << 1;

96  
n
;

97 
	}
}

99 
uöt8_t
 
	$u8g_dev_uc1610_dogxl160_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

101 
msg
)

103 
U8G_DEV_MSG_INIT
:

104 
	`u8g_InôCom
(
u8g
, 
dev
);

105 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_öô_£q
);

107 
U8G_DEV_MSG_STOP
:

109 
U8G_DEV_MSG_PAGE_NEXT
:

111 
i
;

112 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

113 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

114 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
*2) );

115 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

116  
i
 = 0; i < 
WIDTH
; i++ )

118 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`u8g_dev_1to2
–((
uöt8_t
 *)(
pb
->
buf
))[
i
] ) );

121 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

122 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
*2+1) );

123 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

124  
i
 = 0; i < 
WIDTH
; i++ )

126 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`u8g_dev_1to2
–((
uöt8_t
 *)(
pb
->
buf
))[
i
] >> 4 ) );

129 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

132 
U8G_DEV_MSG_CONTRAST
:

133 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

134 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

135 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

136 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

137 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

140  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

141 
	}
}

143 
uöt8_t
 
	$u8g_dev_uc1610_dogxl160_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

145 
msg
)

147 
U8G_DEV_MSG_INIT
:

148 
	`u8g_InôCom
(
u8g
, 
dev
);

149 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_öô_£q
);

151 
U8G_DEV_MSG_STOP
:

153 
U8G_DEV_MSG_PAGE_NEXT
:

155 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

156 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

157 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
) );

158 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

159 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

161 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

164 
U8G_DEV_MSG_CONTRAST
:

165 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

166 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

167 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

168 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

169 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

172  
	`u8g_dev_pb8v2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

173 
	}
}

175 
uöt8_t
 
	$u8g_dev_uc1610_dogxl160_2x_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

177 
msg
)

179 
U8G_DEV_MSG_INIT
:

180 
	`u8g_InôCom
(
u8g
, 
dev
);

181 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_öô_£q
);

183 
U8G_DEV_MSG_STOP
:

185 
U8G_DEV_MSG_PAGE_NEXT
:

187 
i
;

188 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

190 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

191 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
*4) );

192 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

193  
i
 = 0; i < 
WIDTH
; i++ )

195 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`u8g_dev_1to2
–((
uöt8_t
 *)(
pb
->
buf
))[
i
] ) );

198 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

199 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
*4+1) );

200 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

201  
i
 = 0; i < 
WIDTH
; i++ )

203 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`u8g_dev_1to2
–((
uöt8_t
 *)(
pb
->
buf
))[
i
] >> 4 ) );

206 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

207 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
*4+2) );

208 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

209  
i
 = 0; i < 
WIDTH
; i++ )

211 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`u8g_dev_1to2
–((
uöt8_t
 *)(
pb
->
buf
+
WIDTH
))[
i
] ) );

214 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

215 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
*4+3) );

216 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

217  
i
 = 0; i < 
WIDTH
; i++ )

219 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`u8g_dev_1to2
–((
uöt8_t
 *)(
pb
->
buf
+
WIDTH
))[
i
] >> 4 ) );

222 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

225 
U8G_DEV_MSG_CONTRAST
:

226 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

227 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

228 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

229 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

230 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

233  
	`u8g_dev_pb16v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

234 
	}
}

236 
uöt8_t
 
	$u8g_dev_uc1610_dogxl160_2x_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

238 
msg
)

240 
U8G_DEV_MSG_INIT
:

241 
	`u8g_InôCom
(
u8g
, 
dev
);

242 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_öô_£q
);

244 
U8G_DEV_MSG_STOP
:

246 
U8G_DEV_MSG_PAGE_NEXT
:

248 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

250 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

251 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
*2) );

252 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

253 i‡–
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
, 
pb
->
buf
) == 0 )

256 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

257 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
*2+1) );

258 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

259 i‡–
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
, 
pb
->
buf
+WIDTH) == 0 )

262 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

265 
U8G_DEV_MSG_CONTRAST
:

266 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

267 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

268 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

269 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

270 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

273  
	`u8g_dev_pb16v2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

274 
	}
}

276 
U8G_PB_DEV
(
u8g_dev_uc1610_dogxl160_bw_sw_•i
, 
WIDTH
, 
HEIGHT
, 8, 
u8g_dev_uc1610_dogxl160_bw_‚
, 
U8G_COM_SW_SPI
);

277 
U8G_PB_DEV
(
u8g_dev_uc1610_dogxl160_bw_hw_•i
, 
WIDTH
, 
HEIGHT
, 8, 
u8g_dev_uc1610_dogxl160_bw_‚
, 
U8G_COM_HW_SPI
);

279 
U8G_PB_DEV
(
u8g_dev_uc1610_dogxl160_gr_sw_•i
, 
WIDTH
, 
HEIGHT
, 4, 
u8g_dev_uc1610_dogxl160_gr_‚
, 
U8G_COM_SW_SPI
);

280 
U8G_PB_DEV
(
u8g_dev_uc1610_dogxl160_gr_hw_•i
, 
WIDTH
, 
HEIGHT
, 4, 
u8g_dev_uc1610_dogxl160_gr_‚
, 
U8G_COM_HW_SPI
);

282 
uöt8_t
 
	gu8g_dev_uc1610_dogxl160_2x_bw_buf
[
WIDTH
*2] 
	gU8G_NOCOMMON
 ;

283 
u8g_pb_t
 
	gu8g_dev_uc1610_dogxl160_2x_bw_pb
 = { {16, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_uc1610_dogxl160_2x_bw_buf
};

284 
u8g_dev_t
 
	gu8g_dev_uc1610_dogxl160_2x_bw_sw_•i
 = { 
u8g_dev_uc1610_dogxl160_2x_bw_‚
, &
u8g_dev_uc1610_dogxl160_2x_bw_pb
, 
U8G_COM_SW_SPI
 };

285 
u8g_dev_t
 
	gu8g_dev_uc1610_dogxl160_2x_bw_hw_•i
 = { 
u8g_dev_uc1610_dogxl160_2x_bw_‚
, &
u8g_dev_uc1610_dogxl160_2x_bw_pb
, 
U8G_COM_HW_SPI
 };

287 
uöt8_t
 
	gu8g_dev_uc1610_dogxl160_2x_gr_buf
[
WIDTH
*2] 
	gU8G_NOCOMMON
 ;

288 
u8g_pb_t
 
	gu8g_dev_uc1610_dogxl160_2x_gr_pb
 = { {8, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_uc1610_dogxl160_2x_gr_buf
};

289 
u8g_dev_t
 
	gu8g_dev_uc1610_dogxl160_2x_gr_sw_•i
 = { 
u8g_dev_uc1610_dogxl160_2x_gr_‚
, &
u8g_dev_uc1610_dogxl160_2x_gr_pb
, 
U8G_COM_SW_SPI
 };

290 
u8g_dev_t
 
	gu8g_dev_uc1610_dogxl160_2x_gr_hw_•i
 = { 
u8g_dev_uc1610_dogxl160_2x_gr_‚
, &
u8g_dev_uc1610_dogxl160_2x_gr_pb
, 
U8G_COM_HW_SPI
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_uc1701_dogs102.c

37 
	~"u8g.h
"

39 
	#WIDTH
 102

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

43 c⁄° 
uöt8_t
 
	gu8g_dev_dogs102_öô_£q
[] 
	gPROGMEM
 = {

44 
U8G_ESC_CS
(0),

45 
U8G_ESC_ADR
(0),

46 
U8G_ESC_RST
(1),

47 
U8G_ESC_CS
(1),

61 
U8G_ESC_DLY
(100),

63 
U8G_ESC_DLY
(100),

64 
U8G_ESC_DLY
(100),

66 
U8G_ESC_CS
(0),

67 
U8G_ESC_END


70 c⁄° 
uöt8_t
 
	gu8g_dev_dogs102_d©a_°¨t
[] 
	gPROGMEM
 = {

71 
U8G_ESC_ADR
(0),

72 
U8G_ESC_CS
(1),

75 
U8G_ESC_END


78 
uöt8_t
 
	$u8g_dev_dogs102_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

80 
msg
)

82 
U8G_DEV_MSG_INIT
:

83 
	`u8g_InôCom
(
u8g
, 
dev
);

84 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_dogs102_öô_£q
);

86 
U8G_DEV_MSG_STOP
:

88 
U8G_DEV_MSG_PAGE_NEXT
:

90 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

91 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_dogs102_d©a_°¨t
);

92 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

93 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

94 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

96 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

99 
U8G_DEV_MSG_CONTRAST
:

100 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

101 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

102 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

103 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

104 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

107  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

108 
	}
}

110 
U8G_PB_DEV
(
u8g_dev_uc1701_dogs102_sw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_dogs102_‚
, 
U8G_COM_SW_SPI
);

111 
U8G_PB_DEV
(
u8g_dev_uc1701_dogs102_hw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_dogs102_‚
, 
U8G_COM_HW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_uc1701_mini12864.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

43 c⁄° 
uöt8_t
 
	gu8g_dev_uc1701_möi12864_öô_£q
[] 
	gPROGMEM
 = {

44 
U8G_ESC_CS
(0),

45 
U8G_ESC_ADR
(0),

46 
U8G_ESC_RST
(1),

47 
U8G_ESC_CS
(1),

64 
U8G_ESC_DLY
(100),

66 
U8G_ESC_DLY
(100),

67 
U8G_ESC_DLY
(100),

69 
U8G_ESC_CS
(0),

70 
U8G_ESC_END


73 c⁄° 
uöt8_t
 
	gu8g_dev_uc1701_möi12864_d©a_°¨t
[] 
	gPROGMEM
 = {

74 
U8G_ESC_ADR
(0),

75 
U8G_ESC_CS
(1),

78 
U8G_ESC_END


81 
uöt8_t
 
	$u8g_dev_uc1701_möi12864_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

83 
msg
)

85 
U8G_DEV_MSG_INIT
:

86 
	`u8g_InôCom
(
u8g
, 
dev
);

87 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1701_möi12864_öô_£q
);

89 
U8G_DEV_MSG_STOP
:

91 
U8G_DEV_MSG_PAGE_NEXT
:

93 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

94 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1701_möi12864_d©a_°¨t
);

95 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

96 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

97 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

99 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

102 
U8G_DEV_MSG_CONTRAST
:

103 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

104 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

105 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

106 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

107 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

110  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

111 
	}
}

113 
U8G_PB_DEV
(
u8g_dev_uc1701_möi12864_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_uc1701_möi12864_‚
, 
U8G_COM_SW_SPI
);

114 
U8G_PB_DEV
(
u8g_dev_uc1701_möi12864_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_uc1701_möi12864_‚
, 
U8G_COM_HW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_ellipse.c

43 
	~"u8g.h
"

46 #ifde‡
WORK_IN_PROGRESS


48 
	$u8g_DøwEŒù£Re˘
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
x1
, u8g_uöt_à
y1
)

50 
a
 = 
	`abs
(
x1
 - 
x0
);

51 
b
 = 
	`abs
(
y1
 - 
y0
);

52 
b1
 = 
b
&1;

53 
dx
 = 4*(1-
a
)*
b
*b;

54 
dy
 = 4*(
b1
+1)*
a
*a;

55 
îr
 = 
dx
+
dy
+
b1
*
a
*a;

56 
e2
;

58 i‡(
x0
 > 
x1
Ë{ x0 = x1; x1 +
a
; }

59 i‡(
y0
 > 
y1
) { y0 = y1; }

60 
y0
 +(
b
+1)/2;

61 
y1
 = 
y0
-
b1
;

62 
a
 *= 8*a;

63 
b1
 = 8*
b
*b;

66 
	`u8g_DøwPixñ
(
u8g
, 
x1
, 
y0
);

67 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
);

68 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y1
);

69 
	`u8g_DøwPixñ
(
u8g
, 
x1
, 
y1
);

70 
e2
 = 2*
îr
;

71 i‡(
e2
 >
dx
) {

72 
x0
++;

73 
x1
--;

74 
îr
 +
dx
 +
b1
;

76 i‡(
e2
 <
dy
) {

77 
y0
++;

78 
y1
--;

79 
îr
 +
dy
 +
a
;

81 } 
x0
 <
x1
);

83 
y0
-
y1
 < 
b
) {

84 
	`u8g_DøwPixñ
(
u8g
, 
x0
-1, 
y0
);

85 
	`u8g_DøwPixñ
(
u8g
, 
x1
+1, 
y0
++);

86 
	`u8g_DøwPixñ
(
u8g
, 
x0
-1, 
y1
);

87 
	`u8g_DøwPixñ
(
u8g
, 
x1
+1, 
y1
--);

89 
	}
}

91 
	$u8g_DøwEŒù£
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
xr
, u8g_uöt_à
yr
)

93 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
+
yr
);

94 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
-
yr
);

95 
	`u8g_DøwPixñ
(
u8g
, 
x0
+
xr
, 
y0
);

96 
	`u8g_DøwPixñ
(
u8g
, 
x0
-
xr
, 
y0
);

97 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_font.c

39 
	~"u8g.h
"

44 * 
	tu8g_glyph_t
;

47 
	#U8G_FONT_DATA_STRUCT_SIZE
 17

	)

72 
u8g_f⁄t_GëSåSize
(c⁄° *
f⁄t
, c⁄° *
s
, 
u8g_uöt_t
 *
width
, u8g_uöt_à*
height
);

73 
u8g_f⁄t_GëSåSizeP
(c⁄° *
f⁄t
, c⁄° *
s
, 
u8g_uöt_t
 *
width
, u8g_uöt_à*
height
);

76 
u8g_f⁄t_Adju°XYToDøw
(c⁄° *
f⁄t
, c⁄° *
s
, 
u8g_uöt_t
 *
x
, u8g_uöt_à*
y
);

77 
u8g_f⁄t_Adju°XYToDøwP
(c⁄° *
f⁄t
, c⁄° *
s
, 
u8g_uöt_t
 *
x
, u8g_uöt_à*
y
);

80 
u8g_f⁄t_GëSåMöBox
(
u8g_t
 *
u8g
, c⁄° *
f⁄t
, c⁄° *
s
, 
u8g_uöt_t
 *
x
, u8g_uöt_à*
y
, u8g_uöt_à*
width
, u8g_uöt_à*
height
);

89 
uöt8_t
 
	$u8g_f⁄t_gë_byã
(c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
, 
uöt8_t
 
off£t
)

91 
f⁄t
 +
off£t
;

92  
	`u8g_pgm_ªad
–(
u8g_pgm_uöt8_t
 *)
f⁄t
 );

93 
	}
}

95 
uöt16_t
 
	$u8g_f⁄t_gë_w‹d
(c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
, 
uöt8_t
 
off£t
Ë
U8G_NOINLINE
;

96 
uöt16_t
 
	$u8g_f⁄t_gë_w‹d
(c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
, 
uöt8_t
 
off£t
)

98 
uöt16_t
 
pos
;

99 
f⁄t
 +
off£t
;

100 
pos
 = 
	`u8g_pgm_ªad
–(
u8g_pgm_uöt8_t
 *)
f⁄t
 );

101 
f⁄t
++;

102 
pos
 <<= 8;

103 
pos
 +
	`u8g_pgm_ªad
–(
u8g_pgm_uöt8_t
 *)
f⁄t
);

104  
pos
;

105 
	}
}

110 
uöt8_t
 
	$u8g_f⁄t_GëF‹m©
(c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
Ë
U8G_NOINLINE
;

111 
uöt8_t
 
	$u8g_f⁄t_GëF‹m©
(c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
)

113  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 0);

114 
	}
}

116 
uöt8_t
 
	$u8g_f⁄t_GëF⁄tGlyphSåu˘uªSize
(c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
Ë
U8G_NOINLINE
;

117 
uöt8_t
 
	$u8g_f⁄t_GëF⁄tGlyphSåu˘uªSize
(c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
)

119 
	`u8g_f⁄t_GëF‹m©
(
f⁄t
))

125 
	}
}

127 
uöt8_t
 
	$u8g_f⁄t_GëBBXWidth
(c⁄° *
f⁄t
)

129  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 1);

130 
	}
}

132 
uöt8_t
 
	$u8g_f⁄t_GëBBXHeight
(c⁄° *
f⁄t
)

134  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 2);

135 
	}
}

137 
öt8_t
 
	$u8g_f⁄t_GëBBXOffX
(c⁄° *
f⁄t
)

139  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 3);

140 
	}
}

142 
öt8_t
 
	$u8g_f⁄t_GëBBXOffY
(c⁄° *
f⁄t
)

144  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 4);

145 
	}
}

147 
uöt8_t
 
	$u8g_f⁄t_GëC≠ôÆAHeight
(c⁄° *
f⁄t
)

149  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 5);

150 
	}
}

152 
uöt16_t
 
	$u8g_f⁄t_GëEncodög65Pos
(c⁄° *
f⁄t
Ë
U8G_NOINLINE
;

153 
uöt16_t
 
	$u8g_f⁄t_GëEncodög65Pos
(c⁄° *
f⁄t
)

155  
	`u8g_f⁄t_gë_w‹d
(
f⁄t
, 6);

156 
	}
}

158 
uöt16_t
 
	$u8g_f⁄t_GëEncodög97Pos
(c⁄° *
f⁄t
Ë
U8G_NOINLINE
;

159 
uöt16_t
 
	$u8g_f⁄t_GëEncodög97Pos
(c⁄° *
f⁄t
)

161  
	`u8g_f⁄t_gë_w‹d
(
f⁄t
, 8);

162 
	}
}

164 
uöt8_t
 
	$u8g_f⁄t_GëF⁄tSèπEncodög
(c⁄° *
f⁄t
)

166  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 10);

167 
	}
}

169 
uöt8_t
 
	$u8g_f⁄t_GëF⁄tEndEncodög
(c⁄° *
f⁄t
)

171  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 11);

172 
	}
}

174 
öt8_t
 
	$u8g_f⁄t_GëLowîGDes˚¡
(c⁄° *
f⁄t
)

176  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 12);

177 
	}
}

179 
öt8_t
 
	$u8g_f⁄t_GëF⁄tAs˚¡
(c⁄° *
f⁄t
)

181  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 13);

182 
	}
}

184 
öt8_t
 
	$u8g_f⁄t_GëF⁄tDes˚¡
(c⁄° *
f⁄t
)

186  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 14);

187 
	}
}

189 
öt8_t
 
	$u8g_f⁄t_GëF⁄tXAs˚¡
(c⁄° *
f⁄t
)

191  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 15);

192 
	}
}

194 
öt8_t
 
	$u8g_f⁄t_GëF⁄tXDes˚¡
(c⁄° *
f⁄t
)

196  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 16);

197 
	}
}

201 
uöt8_t
 *
	$u8g_f⁄t_GëGlyphD©aSèπ
(c⁄° *
f⁄t
, 
u8g_glyph_t
 
g
)

203  ((
u8g_‚çgm_uöt8_t
 *)
g
Ë+ 
	`u8g_f⁄t_GëF⁄tGlyphSåu˘uªSize
(
f⁄t
);

204 
	}
}

207 
size_t
 
	$u8g_f⁄t_GëSize
(c⁄° *
f⁄t
)

209 
uöt8_t
 *
p
 = (uöt8_à*)(
f⁄t
);

210 
uöt8_t
 
f⁄t_f‹m©
 = 
	`u8g_f⁄t_GëF‹m©
(
f⁄t
);

211 
uöt8_t
 
d©a_°ru˘uª_size
 = 
	`u8g_f⁄t_GëF⁄tGlyphSåu˘uªSize
(
f⁄t
);

212 
uöt8_t
 
°¨t
, 
íd
;

213 
uöt8_t
 
i
;

214 
uöt8_t
 
mask
 = 255;

216 
°¨t
 = 
	`u8g_f⁄t_GëF⁄tSèπEncodög
(
f⁄t
);

217 
íd
 = 
	`u8g_f⁄t_GëF⁄tEndEncodög
(
f⁄t
);

219 i‡–
f⁄t_f‹m©
 == 1 )

220 
mask
 = 15;

222 
p
 +
U8G_FONT_DATA_STRUCT_SIZE
;

224 
i
 = 
°¨t
;

227 i‡–
	`u8g_pgm_ªad
((
u8g_pgm_uöt8_t
 *)(
p
)) == 255 )

229 
p
 += 1;

233 
p
 +
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)’)Ë+ 2 ) & 
mask
;

234 
p
 +
d©a_°ru˘uª_size
;

236 i‡–
i
 =
íd
 )

238 
i
++;

241  
p
 - (
uöt8_t
 *)
f⁄t
;

242 
	}
}

247 
uöt8_t
 
	$u8g_GëF⁄tBBXWidth
(
u8g_t
 *
u8g
)

249  
	`u8g_f⁄t_GëBBXWidth
(
u8g
->
f⁄t
);

250 
	}
}

252 
uöt8_t
 
	$u8g_GëF⁄tBBXHeight
(
u8g_t
 *
u8g
)

254  
	`u8g_f⁄t_GëBBXHeight
(
u8g
->
f⁄t
);

255 
	}
}

257 
öt8_t
 
	$u8g_GëF⁄tBBXOffX
(
u8g_t
 *
u8g
Ë
U8G_NOINLINE
;

258 
öt8_t
 
	$u8g_GëF⁄tBBXOffX
(
u8g_t
 *
u8g
)

260  
	`u8g_f⁄t_GëBBXOffX
(
u8g
->
f⁄t
);

261 
	}
}

263 
öt8_t
 
	$u8g_GëF⁄tBBXOffY
(
u8g_t
 *
u8g
Ë
U8G_NOINLINE
;

264 
öt8_t
 
	$u8g_GëF⁄tBBXOffY
(
u8g_t
 *
u8g
)

266  
	`u8g_f⁄t_GëBBXOffY
(
u8g
->
f⁄t
);

267 
	}
}

269 
uöt8_t
 
	$u8g_GëF⁄tC≠ôÆAHeight
(
u8g_t
 *
u8g
Ë
U8G_NOINLINE
;

270 
uöt8_t
 
	$u8g_GëF⁄tC≠ôÆAHeight
(
u8g_t
 *
u8g
)

272  
	`u8g_f⁄t_GëC≠ôÆAHeight
(
u8g
->
f⁄t
);

273 
	}
}

278 
	$u8g_C›yGlyphD©aToCache
(
u8g_t
 *
u8g
, 
u8g_glyph_t
 
g
)

280 
uöt8_t
 
tmp
;

281  
	`u8g_f⁄t_GëF‹m©
(
u8g
->
f⁄t
) )

296 
u8g
->
glyph_width
 = 
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)
g
) + 0 );

297 
u8g
->
glyph_height
 = 
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)
g
) + 1 );

298 
u8g
->
glyph_dx
 = 
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)
g
) + 3 );

299 
u8g
->
glyph_x
 = 
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)
g
) + 4 );

300 
u8g
->
glyph_y
 = 
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)
g
) + 5 );

315 
tmp
 = 
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)
g
) + 0 );

316 
u8g
->
glyph_y
 = 
tmp
 & 15;

317 
u8g
->
glyph_y
-=2;

318 
tmp
 >>= 4;

319 
u8g
->
glyph_x
 = 
tmp
;

321 
tmp
 = 
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)
g
) + 1 );

322 
u8g
->
glyph_height
 = 
tmp
 & 15;

323 
tmp
 >>= 4;

324 
u8g
->
glyph_width
 = 
tmp
;

326 
tmp
 = 
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)
g
) + 2 );

327 
tmp
 >>= 4;

328 
u8g
->
glyph_dx
 = 
tmp
;

333 
	}
}

336 
	$u8g_FûlEm±yGlyphCache
(
u8g_t
 *
u8g
)

338 
u8g
->
glyph_dx
 = 0;

339 
u8g
->
glyph_width
 = 0;

340 
u8g
->
glyph_height
 = 0;

341 
u8g
->
glyph_x
 = 0;

342 
u8g
->
glyph_y
 = 0;

343 
	}
}

349 
u8g_glyph_t
 
	$u8g_GëGlyph
(
u8g_t
 *
u8g
, 
uöt8_t
 
ªque°ed_ícodög
)

351 
uöt8_t
 *
p
 = (uöt8_à*)(
u8g
->
f⁄t
);

352 
uöt8_t
 
f⁄t_f‹m©
 = 
	`u8g_f⁄t_GëF‹m©
(
u8g
->
f⁄t
);

353 
uöt8_t
 
d©a_°ru˘uª_size
 = 
	`u8g_f⁄t_GëF⁄tGlyphSåu˘uªSize
(
u8g
->
f⁄t
);

354 
uöt8_t
 
°¨t
, 
íd
;

355 
uöt16_t
 
pos
;

356 
uöt8_t
 
i
;

357 
uöt8_t
 
mask
 = 255;

359 i‡–
f⁄t_f‹m©
 == 1 )

360 
mask
 = 15;

362 
°¨t
 = 
	`u8g_f⁄t_GëF⁄tSèπEncodög
(
u8g
->
f⁄t
);

363 
íd
 = 
	`u8g_f⁄t_GëF⁄tEndEncodög
(
u8g
->
f⁄t
);

365 
pos
 = 
	`u8g_f⁄t_GëEncodög97Pos
(
u8g
->
f⁄t
);

366 i‡–
ªque°ed_ícodög
 >97 && 
pos
 > 0 )

368 
p
+
pos
;

369 
°¨t
 = 97;

373 
pos
 = 
	`u8g_f⁄t_GëEncodög65Pos
(
u8g
->
f⁄t
);

374 i‡–
ªque°ed_ícodög
 >65 && 
pos
 > 0 )

376 
p
+
pos
;

377 
°¨t
 = 65;

380 
p
 +
U8G_FONT_DATA_STRUCT_SIZE
;

383 i‡–
ªque°ed_ícodög
 > 
íd
 )

385 
	`u8g_FûlEm±yGlyphCache
(
u8g
);

386  
NULL
;

389 
i
 = 
°¨t
;

390 i‡–
i
 <
íd
 )

394 i‡–
	`u8g_pgm_ªad
((
u8g_pgm_uöt8_t
 *)(
p
)) == 255 )

396 
p
 += 1;

400 i‡–
i
 =
ªque°ed_ícodög
 )

402 
	`u8g_C›yGlyphD©aToCache
(
u8g
, 
p
);

403  
p
;

405 
p
 +
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)’)Ë+ 2 ) & 
mask
;

406 
p
 +
d©a_°ru˘uª_size
;

408 i‡–
i
 =
íd
 )

410 
i
++;

414 
	`u8g_FûlEm±yGlyphCache
(
u8g
);

416  
NULL
;

417 
	}
}

419 
uöt8_t
 
	$u8g_IsGlyph
(
u8g_t
 *
u8g
, 
uöt8_t
 
ªque°ed_ícodög
)

421 i‡–
	`u8g_GëGlyph
(
u8g
, 
ªque°ed_ícodög
Ë!
NULL
 )

424 
	}
}

426 
öt8_t
 
	$u8g_GëGlyphDñèX
(
u8g_t
 *
u8g
, 
uöt8_t
 
ªque°ed_ícodög
)

428 i‡–
	`u8g_GëGlyph
(
u8g
, 
ªque°ed_ícodög
Ë=
NULL
 )

430  
u8g
->
glyph_dx
;

431 
	}
}

437 #ifde‡
OBSOLETE


442 
öt8_t
 
	$u8g_DøwGlyphDú
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
ícodög
)

444 
u8g_glyph_t
 
g
;

445 
uöt8_t
 
w
, 
h
, 
i
, 
j
;

446 c⁄° 
u8g_pgm_uöt8_t
 *
d©a
;

447 
uöt8_t
 
byãs_≥r_löe
;

448 
u8g_uöt_t
 
ix
, 
iy
;

450 
g
 = 
	`u8g_GëGlyph
(
u8g
, 
ícodög
);

451 i‡–
g
 =
NULL
 )

453 
w
 = 
u8g
->
glyph_width
;

454 
h
 = 
u8g
->
glyph_height
;

456 
byãs_≥r_löe
 = 
w
;

457 
byãs_≥r_löe
 += 7;

458 
byãs_≥r_löe
 /= 8;

460 
d©a
 = 
	`u8g_f⁄t_GëGlyphD©aSèπ
(
u8g
->
f⁄t
, 
g
);

462 
dú
)

465 
x
 +
u8g
->
glyph_x
;

466 
y
 -
u8g
->
glyph_y
;

467 
y
--;

469 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
-
h
+1, 
w
, h) == 0 )

470  
u8g
->
glyph_dx
;

472 
iy
 = 
y
;

473 
iy
 -
h
;

474 
iy
++;

476  
j
 = 0; j < 
h
; j++ )

478 
ix
 = 
x
;

479  
i
 = 0; i < 
byãs_≥r_löe
; i++ )

481 
	`u8g_Døw8Pixñ
(
u8g
, 
ix
, 
iy
, 
dú
, 
	`u8g_pgm_ªad
(
d©a
));

482 
d©a
++;

483 
ix
+=8;

485 
iy
++;

489 
x
 +
u8g
->
glyph_y
;

490 
x
++;

491 
y
 +
u8g
->
glyph_x
;

494 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
h
, 
w
) == 0 )

495  
u8g
->
glyph_dx
;

497 
ix
 = 
x
;

498 
ix
 +
h
;

499 
ix
--;

500  
j
 = 0; j < 
h
; j++ )

502 
iy
 = 
y
;

503  
i
 = 0; i < 
byãs_≥r_löe
; i++ )

505 
	`u8g_Døw8Pixñ
(
u8g
, 
ix
, 
iy
, 
dú
, 
	`u8g_pgm_ªad
(
d©a
));

506 
d©a
++;

507 
iy
+=8;

509 
ix
--;

513 
x
 -
u8g
->
glyph_x
;

514 
y
 +
u8g
->
glyph_y
;

515 
y
++;

516 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
-
w
-1, 
y
, w, 
h
) == 0 )

517  
u8g
->
glyph_dx
;

519 
iy
 = 
y
;

520 
iy
 +
h
;

521 
iy
--;

522  
j
 = 0; j < 
h
; j++ )

524 
ix
 = 
x
;

525  
i
 = 0; i < 
byãs_≥r_löe
; i++ )

527 
	`u8g_Døw8Pixñ
(
u8g
, 
ix
, 
iy
, 
dú
, 
	`u8g_pgm_ªad
(
d©a
));

528 
d©a
++;

529 
ix
-=8;

531 
iy
--;

535 
x
 -
u8g
->
glyph_y
;

536 
x
--;

537 
y
 -
u8g
->
glyph_x
;

539 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
-
h
-1, 
y
-
w
-1, h, w) == 0 )

540  
u8g
->
glyph_dx
;

542 
ix
 = 
x
;

543 
ix
 -
h
;

544 
ix
++;

546  
j
 = 0; j < 
h
; j++ )

548 
iy
 = 
y
;

549  
i
 = 0; i < 
byãs_≥r_löe
; i++ )

551 
	`u8g_Døw8Pixñ
(
u8g
, 
ix
, 
iy
, 
dú
, 
	`u8g_pgm_ªad
(
d©a
));

552 
d©a
++;

553 
iy
-=8;

555 
ix
++;

559  
u8g
->
glyph_dx
;

560 
	}
}

563 
öt8_t
 
	$u8g_døw_glyph
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
)

565 c⁄° 
u8g_pgm_uöt8_t
 *
d©a
;

566 
uöt8_t
 
w
, 
h
;

567 
uöt8_t
 
i
, 
j
;

568 
u8g_uöt_t
 
ix
, 
iy
;

571 
u8g_glyph_t
 
g
 = 
	`u8g_GëGlyph
(
u8g
, 
ícodög
);

572 i‡–
g
 =
NULL
 )

574 
d©a
 = 
	`u8g_f⁄t_GëGlyphD©aSèπ
(
u8g
->
f⁄t
, 
g
);

577 
w
 = 
u8g
->
glyph_width
;

578 
h
 = 
u8g
->
glyph_height
;

580 
x
 +
u8g
->
glyph_x
;

581 
y
 -
u8g
->
glyph_y
;

582 
y
--;

584 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
-
h
+1, 
w
, h) == 0 )

585  
u8g
->
glyph_dx
;

588 
w
 += 7;

589 
w
 /= 8;

591 
iy
 = 
y
;

592 
iy
 -
h
;

593 
iy
++;

595  
j
 = 0; j < 
h
; j++ )

597 
ix
 = 
x
;

598  
i
 = 0; i < 
w
; i++ )

600 
	`u8g_Døw8Pixñ
(
u8g
, 
ix
, 
iy
, 0, 
	`u8g_pgm_ªad
(
d©a
));

601 
d©a
++;

602 
ix
+=8;

604 
iy
++;

606  
u8g
->
glyph_dx
;

607 
	}
}

609 
öt8_t
 
	$u8g_DøwGlyph
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
)

611 
y
 +
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

612  
	`u8g_døw_glyph
(
u8g
, 
x
, 
y
, 
ícodög
);

613 
	}
}

615 
öt8_t
 
	$u8g_døw_glyph90
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
)

617 c⁄° 
u8g_pgm_uöt8_t
 *
d©a
;

618 
uöt8_t
 
w
, 
h
;

619 
uöt8_t
 
i
, 
j
;

620 
u8g_uöt_t
 
ix
, 
iy
;

623 
u8g_glyph_t
 
g
 = 
	`u8g_GëGlyph
(
u8g
, 
ícodög
);

624 i‡–
g
 =
NULL
 )

626 
d©a
 = 
	`u8g_f⁄t_GëGlyphD©aSèπ
(
u8g
->
f⁄t
, 
g
);

629 
w
 = 
u8g
->
glyph_width
;

630 
h
 = 
u8g
->
glyph_height
;

632 
x
 +
u8g
->
glyph_y
;

633 
x
++;

634 
y
 +
u8g
->
glyph_x
;

636 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
h
, 
w
) == 0 )

637  
u8g
->
glyph_dx
;

640 
w
 += 7;

641 
w
 /= 8;

643 
ix
 = 
x
;

644 
ix
 +
h
;

645 
ix
--;

646  
j
 = 0; j < 
h
; j++ )

648 
iy
 = 
y
;

649  
i
 = 0; i < 
w
; i++ )

651 
	`u8g_Døw8Pixñ
(
u8g
, 
ix
, 
iy
, 1, 
	`u8g_pgm_ªad
(
d©a
));

652 
d©a
++;

653 
iy
+=8;

655 
ix
--;

657  
u8g
->
glyph_dx
;

658 
	}
}

660 
öt8_t
 
	$u8g_DøwGlyph90
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
)

662 
x
 -
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

663  
	`u8g_døw_glyph90
(
u8g
, 
x
, 
y
, 
ícodög
);

664 
	}
}

667 
öt8_t
 
	$u8g_døw_glyph180
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
)

669 c⁄° 
u8g_pgm_uöt8_t
 *
d©a
;

670 
uöt8_t
 
w
, 
h
;

671 
uöt8_t
 
i
, 
j
;

672 
u8g_uöt_t
 
ix
, 
iy
;

675 
u8g_glyph_t
 
g
 = 
	`u8g_GëGlyph
(
u8g
, 
ícodög
);

676 i‡–
g
 =
NULL
 )

678 
d©a
 = 
	`u8g_f⁄t_GëGlyphD©aSèπ
(
u8g
->
f⁄t
, 
g
);

681 
w
 = 
u8g
->
glyph_width
;

682 
h
 = 
u8g
->
glyph_height
;

684 
x
 -
u8g
->
glyph_x
;

685 
y
 +
u8g
->
glyph_y
;

686 
y
++;

688 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
-(
w
-1), 
y
, w, 
h
) == 0 )

689  
u8g
->
glyph_dx
;

692 
w
 += 7;

693 
w
 /= 8;

695 
iy
 = 
y
;

696 
iy
 +
h
;

697 
iy
--;

698  
j
 = 0; j < 
h
; j++ )

700 
ix
 = 
x
;

701  
i
 = 0; i < 
w
; i++ )

703 
	`u8g_Døw8Pixñ
(
u8g
, 
ix
, 
iy
, 2, 
	`u8g_pgm_ªad
(
d©a
));

704 
d©a
++;

705 
ix
-=8;

707 
iy
--;

709  
u8g
->
glyph_dx
;

710 
	}
}

712 
öt8_t
 
	$u8g_DøwGlyph180
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
)

714 
y
 -
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

715  
	`u8g_døw_glyph180
(
u8g
, 
x
, 
y
, 
ícodög
);

716 
	}
}

719 
öt8_t
 
	$u8g_døw_glyph270
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
)

721 c⁄° 
u8g_pgm_uöt8_t
 *
d©a
;

722 
uöt8_t
 
w
, 
h
;

723 
uöt8_t
 
i
, 
j
;

724 
u8g_uöt_t
 
ix
, 
iy
;

727 
u8g_glyph_t
 
g
 = 
	`u8g_GëGlyph
(
u8g
, 
ícodög
);

728 i‡–
g
 =
NULL
 )

730 
d©a
 = 
	`u8g_f⁄t_GëGlyphD©aSèπ
(
u8g
->
f⁄t
, 
g
);

733 
w
 = 
u8g
->
glyph_width
;

734 
h
 = 
u8g
->
glyph_height
;

736 
x
 -
u8g
->
glyph_y
;

737 
x
--;

738 
y
 -
u8g
->
glyph_x
;

740 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
-(
h
-1), 
y
-(
w
-1), h, w) == 0 )

741  
u8g
->
glyph_dx
;

745 
w
 += 7;

746 
w
 /= 8;

748 
ix
 = 
x
;

749 
ix
 -
h
;

750 
ix
++;

752  
j
 = 0; j < 
h
; j++ )

754 
iy
 = 
y
;

755  
i
 = 0; i < 
w
; i++ )

757 
	`u8g_Døw8Pixñ
(
u8g
, 
ix
, 
iy
, 3, 
	`u8g_pgm_ªad
(
d©a
));

758 
d©a
++;

759 
iy
-=8;

761 
ix
++;

763  
u8g
->
glyph_dx
;

764 
	}
}

766 
öt8_t
 
	$u8g_DøwGlyph270
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
)

768 
x
 +
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

769  
	`u8g_døw_glyph270
(
u8g
, 
x
, 
y
, 
ícodög
);

770 
	}
}

774 #ifde‡
OBSOLETE


779 
öt8_t
 
	$u8g_DøwGlyphF⁄tBBX
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
ícodög
)

782 
x
 -
	`u8g_GëF⁄tBBXOffX
(
u8g
);

783 
y
 +
	`u8g_GëF⁄tBBXOffY
(
u8g
);

784  
	`u8g_DøwGlyphDú
(
u8g
, 
x
, 
y
, 
dú
, 
ícodög
);

785 
	}
}

792 
u8g_uöt_t
 
	$u8g_DøwSå
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° *
s
)

794 
u8g_uöt_t
 
t
 = 0;

795 
öt8_t
 
d
;

800 
y
 +
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

802  *
s
 != '\0' )

804 
d
 = 
	`u8g_døw_glyph
(
u8g
, 
x
, 
y
, *
s
);

805 
x
 +
d
;

806 
t
 +
d
;

807 
s
++;

809  
t
;

810 
	}
}

812 
u8g_uöt_t
 
	$u8g_DøwSå90
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° *
s
)

814 
u8g_uöt_t
 
t
 = 0;

815 
öt8_t
 
d
;

817 
x
 -
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

819  *
s
 != '\0' )

821 
d
 = 
	`u8g_døw_glyph90
(
u8g
, 
x
, 
y
, *
s
);

822 
y
 +
d
;

823 
t
 +
d
;

824 
s
++;

826  
t
;

827 
	}
}

829 
u8g_uöt_t
 
	$u8g_DøwSå180
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° *
s
)

831 
u8g_uöt_t
 
t
 = 0;

832 
öt8_t
 
d
;

834 
y
 -
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

836  *
s
 != '\0' )

838 
d
 = 
	`u8g_døw_glyph180
(
u8g
, 
x
, 
y
, *
s
);

839 
x
 -
d
;

840 
t
 +
d
;

841 
s
++;

843  
t
;

844 
	}
}

846 
u8g_uöt_t
 
	$u8g_DøwSå270
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° *
s
)

848 
u8g_uöt_t
 
t
 = 0;

849 
öt8_t
 
d
;

851 
x
 +
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

853  *
s
 != '\0' )

855 
d
 = 
	`u8g_døw_glyph270
(
u8g
, 
x
, 
y
, *
s
);

856 
y
 -
d
;

857 
t
 +
d
;

858 
s
++;

860  
t
;

861 
	}
}

863 
u8g_uöt_t
 
	$u8g_DøwSåDú
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, c⁄° *
s
)

865 
dú
)

868  
	`u8g_DøwSå
(
u8g
, 
x
, 
y
, 
s
);

870  
	`u8g_DøwSå90
(
u8g
, 
x
, 
y
, 
s
);

872  
	`u8g_DøwSå180
(
u8g
, 
x
, 
y
, 
s
);

874  
	`u8g_DøwSå270
(
u8g
, 
x
, 
y
, 
s
);

877 
	}
}

879 
u8g_uöt_t
 
	$u8g_DøwSåP
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
)

881 
u8g_uöt_t
 
t
 = 0;

882 
öt8_t
 
d
;

883 
uöt8_t
 
c
;

885 
y
 +
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

889 
c
 = 
	`u8g_pgm_ªad
(
s
);

890 i‡–
c
 == '\0' )

892 
d
 = 
	`u8g_døw_glyph
(
u8g
, 
x
, 
y
, 
c
);

893 
x
 +
d
;

894 
t
 +
d
;

895 
s
++;

897  
t
;

898 
	}
}

900 
u8g_uöt_t
 
	$u8g_DøwSå90P
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
)

902 
u8g_uöt_t
 
t
 = 0;

903 
öt8_t
 
d
;

905 
x
 -
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

907  *
s
 != '\0' )

909 
d
 = 
	`u8g_DøwGlyph90
(
u8g
, 
x
, 
y
, 
	`u8g_pgm_ªad
(
s
));

910 
y
 +
d
;

911 
t
 +
d
;

912 
s
++;

914  
t
;

915 
	}
}

917 
u8g_uöt_t
 
	$u8g_DøwSå180P
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
)

919 
u8g_uöt_t
 
t
 = 0;

920 
öt8_t
 
d
;

922 
y
 -
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

924  *
s
 != '\0' )

926 
d
 = 
	`u8g_DøwGlyph180
(
u8g
, 
x
, 
y
, 
	`u8g_pgm_ªad
(
s
));

927 
x
 -
d
;

928 
t
 +
d
;

929 
s
++;

931  
t
;

932 
	}
}

934 
u8g_uöt_t
 
	$u8g_DøwSå270P
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
)

936 
u8g_uöt_t
 
t
 = 0;

937 
öt8_t
 
d
;

939 
x
 +
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

941  *
s
 != '\0' )

943 
d
 = 
	`u8g_DøwGlyph270
(
u8g
, 
x
, 
y
, 
	`u8g_pgm_ªad
(
s
));

944 
y
 -
d
;

945 
t
 +
d
;

946 
s
++;

948  
t
;

949 
	}
}

951 
u8g_uöt_t
 
	$u8g_DøwSåF⁄tBBX
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, c⁄° *
s
)

953 
x
 -
	`u8g_GëF⁄tBBXOffX
(
u8g
);

954 
y
 +
	`u8g_GëF⁄tBBXOffY
(
u8g
);

955  
	`u8g_DøwSåDú
(
u8g
, 
x
, 
y
, 
dú
, 
s
);

956 
	}
}

959 
öt8_t
 
	$u8g_DøwGlyphF⁄tBBX
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
ícodög
)

961 
x
 -
	`u8g_GëF⁄tBBXOffX
(
u8g
);

962 
y
 +
	`u8g_GëF⁄tBBXOffY
(
u8g
);

963 
	`u8g_døw_glyph
(
u8g
, 
x
, 
y
, 
ícodög
);

964 
	}
}

970 
	$u8g_Upd©eRefHeight
(
u8g_t
 *
u8g
)

972 
uöt16_t
 
ls
;

973 i‡–
u8g
->
f⁄t
 =
NULL
 )

975 i‡–
u8g
->
f⁄t_height_mode
 =
U8G_FONT_HEIGHT_MODE_TEXT
 )

977 
u8g
->
f⁄t_ªf_as˚¡
 = 
	`u8g_f⁄t_GëC≠ôÆAHeight
(u8g->
f⁄t
);

978 
u8g
->
f⁄t_ªf_des˚¡
 = 
	`u8g_f⁄t_GëLowîGDes˚¡
(u8g->
f⁄t
);

980 i‡–
u8g
->
f⁄t_height_mode
 =
U8G_FONT_HEIGHT_MODE_XTEXT
 )

982 
u8g
->
f⁄t_ªf_as˚¡
 = 
	`u8g_f⁄t_GëF⁄tXAs˚¡
(u8g->
f⁄t
);

983 
u8g
->
f⁄t_ªf_des˚¡
 = 
	`u8g_f⁄t_GëF⁄tXDes˚¡
(u8g->
f⁄t
);

987 
u8g
->
f⁄t_ªf_as˚¡
 = 
	`u8g_f⁄t_GëF⁄tAs˚¡
(u8g->
f⁄t
);

988 
u8g
->
f⁄t_ªf_des˚¡
 = 
	`u8g_f⁄t_GëF⁄tDes˚¡
(u8g->
f⁄t
);

991 
ls
 = 
u8g
->
f⁄t_ªf_as˚¡
 - u8g->
f⁄t_ªf_des˚¡
;

992 i‡–
u8g
->
f⁄t_löe_•acög_Á˘‹
 != 64 )

994 
ls
 &= 255;

995 
ls
 *
u8g
->
f⁄t_löe_•acög_Á˘‹
;

996 
ls
 >>= 6;

998 
u8g
->
löe_•acög
 = 
ls
;

999 
	}
}

1001 
	$u8g_SëF⁄tRefHeightText
(
u8g_t
 *
u8g
)

1003 
u8g
->
f⁄t_height_mode
 = 
U8G_FONT_HEIGHT_MODE_TEXT
;

1004 
	`u8g_Upd©eRefHeight
(
u8g
);

1005 
	}
}

1007 
	$u8g_SëF⁄tRefHeightExãndedText
(
u8g_t
 *
u8g
)

1009 
u8g
->
f⁄t_height_mode
 = 
U8G_FONT_HEIGHT_MODE_XTEXT
;

1010 
	`u8g_Upd©eRefHeight
(
u8g
);

1011 
	}
}

1014 
	$u8g_SëF⁄tRefHeightAŒ
(
u8g_t
 *
u8g
)

1016 
u8g
->
f⁄t_height_mode
 = 
U8G_FONT_HEIGHT_MODE_ALL
;

1017 
	`u8g_Upd©eRefHeight
(
u8g
);

1018 
	}
}

1021 
	$u8g_SëF⁄tLöeS∑cögFa˘‹
(
u8g_t
 *
u8g
, 
uöt8_t
 
Á˘‹
)

1023 
u8g
->
f⁄t_löe_•acög_Á˘‹
 = 
Á˘‹
;

1024 
	`u8g_Upd©eRefHeight
(
u8g
);

1025 
	}
}

1032 
u8g_uöt_t
 
	$u8g_f⁄t_ˇlc_vªf_f⁄t
(
u8g_t
 *
u8g
)

1035 
	}
}

1037 
	$u8g_SëF⁄tPosBa£löe
(
u8g_t
 *
u8g
)

1039 
u8g
->
f⁄t_ˇlc_vªf
 = 
u8g_f⁄t_ˇlc_vªf_f⁄t
;

1040 
	}
}

1043 
u8g_uöt_t
 
	$u8g_f⁄t_ˇlc_vªf_bŸtom
(
u8g_t
 *
u8g
)

1046  (
u8g_uöt_t
)(
u8g_öt_t
)(
u8g
->
f⁄t_ªf_des˚¡
);

1047 
	}
}

1049 
	$u8g_SëF⁄tPosBŸtom
(
u8g_t
 *
u8g
)

1051 
u8g
->
f⁄t_ˇlc_vªf
 = 
u8g_f⁄t_ˇlc_vªf_bŸtom
;

1052 
	}
}

1054 
u8g_uöt_t
 
	$u8g_f⁄t_ˇlc_vªf_t›
(
u8g_t
 *
u8g
)

1056 
u8g_uöt_t
 
tmp
;

1063 
tmp
 = (
u8g_uöt_t
)(
u8g_öt_t
)(
u8g
->
f⁄t_ªf_as˚¡
);

1064 
tmp
++;

1065  
tmp
;

1066 
	}
}

1068 
	$u8g_SëF⁄tPosT›
(
u8g_t
 *
u8g
)

1070 
u8g
->
f⁄t_ˇlc_vªf
 = 
u8g_f⁄t_ˇlc_vªf_t›
;

1071 
	}
}

1073 
u8g_uöt_t
 
	$u8g_f⁄t_ˇlc_vªf_˚¡î
(
u8g_t
 *
u8g
)

1075 
öt8_t
 
tmp
;

1076 
tmp
 = 
u8g
->
f⁄t_ªf_as˚¡
;

1077 
tmp
 -
u8g
->
f⁄t_ªf_des˚¡
;

1078 
tmp
 /= 2;

1079 
tmp
 +
u8g
->
f⁄t_ªf_des˚¡
;

1081  
tmp
;

1082 
	}
}

1084 
	$u8g_SëF⁄tPosCíãr
(
u8g_t
 *
u8g
)

1086 
u8g
->
f⁄t_ˇlc_vªf
 = 
u8g_f⁄t_ˇlc_vªf_˚¡î
;

1087 
	}
}

1092 
	$u8g_f⁄t_gë_ch¨
(c⁄° *
s
)

1094  *(c⁄° *)(
s
);

1095 
	}
}

1097 
	$u8g_f⁄t_gë_ch¨P
(c⁄° *
s
)

1099  
	`u8g_pgm_ªad
(
s
);

1100 
	}
}

1102 (*
	tu8g_f⁄t_gë_ch¨_‚
)(c⁄° *
	ts
);

1105 
u8g_uöt_t
 
	$u8g_f⁄t_ˇlc_°r_pixñ_width
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_f⁄t_gë_ch¨_‚
 
gë_ch¨
 )

1107 
u8g_uöt_t
 
w
;

1108 
uöt8_t
 
íc
;

1111 
w
 = 0;

1113 
íc
 = 
	`gë_ch¨
(
s
);

1116 i‡–
íc
 == '\0' )

1118  
w
;

1123 
	`u8g_GëGlyph
(
u8g
, 
íc
);

1131 
w
 = -
u8g
->
glyph_x
;

1136 
s
++;

1137 i‡–
	`gë_ch¨
(
s
) == '\0' )

1141 
w
 +
u8g
->
glyph_dx
;

1144 
íc
 = 
	`gë_ch¨
(
s
);

1147 
	`u8g_GëGlyph
(
u8g
, 
íc
);

1152 i‡–
íc
 != ' ' )

1155 
w
 +
u8g
->
glyph_width
;

1156 
w
 +
u8g
->
glyph_x
;

1160 
w
 +
u8g
->
glyph_dx
;

1164  
w
;

1165 
	}
}

1167 
u8g_uöt_t
 
	$u8g_GëSåPixñWidth
(
u8g_t
 *
u8g
, c⁄° *
s
)

1169  
	`u8g_f⁄t_ˇlc_°r_pixñ_width
(
u8g
, 
s
, 
u8g_f⁄t_gë_ch¨
);

1170 
	}
}

1172 
u8g_uöt_t
 
	$u8g_GëSåPixñWidthP
(
u8g_t
 *
u8g
, c⁄° 
u8g_pgm_uöt8_t
 *
s
)

1174  
	`u8g_f⁄t_ˇlc_°r_pixñ_width
(
u8g
, (c⁄° *)
s
, 
u8g_f⁄t_gë_ch¨P
);

1175 
	}
}

1177 
öt8_t
 
	$u8g_GëSåX
(
u8g_t
 *
u8g
, c⁄° *
s
)

1179 
	`u8g_GëGlyph
(
u8g
, *
s
);

1180  
u8g
->
glyph_x
;

1181 
	}
}

1183 
öt8_t
 
	$u8g_GëSåXP
(
u8g_t
 *
u8g
, c⁄° 
u8g_pgm_uöt8_t
 *
s
)

1185 
	`u8g_GëGlyph
(
u8g
, 
	`u8g_pgm_ªad
(
s
));

1186  
u8g
->
glyph_x
;

1187 
	}
}

1192 
u8g_uöt_t
 
	$u8g_GëSåWidth
(
u8g_t
 *
u8g
, c⁄° *
s
)

1194 
u8g_uöt_t
 
w
;

1195 
uöt8_t
 
ícodög
;

1198 
w
 = 0;

1202 
ícodög
 = *
s
;

1203 i‡–
ícodög
 == 0 )

1207 
	`u8g_GëGlyph
(
u8g
, 
ícodög
);

1208 
w
 +
u8g
->
glyph_dx
;

1211 
s
++;

1214  
w
;

1215 
	}
}

1218 
u8g_uöt_t
 
	$u8g_GëSåWidthP
(
u8g_t
 *
u8g
, c⁄° 
u8g_pgm_uöt8_t
 *
s
)

1220 
u8g_uöt_t
 
w
;

1221 
uöt8_t
 
ícodög
;

1224 
w
 = 0;

1228 
ícodög
 = 
	`u8g_pgm_ªad
(
s
);

1229 i‡–
ícodög
 == 0 )

1233 
	`u8g_GëGlyph
(
u8g
, 
ícodög
);

1234 
w
 +
u8g
->
glyph_dx
;

1237 
s
++;

1240  
w
;

1241 
	}
}

1256 
	su8g_°r_size_°ru˘


1258 
öt8_t
 
	my_mö
;

1259 
öt8_t
 
	my_max
;

1260 
öt8_t
 
	mx
, 
	my
;

1261 
u8g_uöt_t
 
	mw
;

1263 
u8g_°r_size_°ru˘
 
	tu8g_°r_size_t
;

1265 
	$u8g_f⁄t_ˇlc_°r_mö_box
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_°r_size_t
 *
buf
)

1268 
öt8_t
 
tmp
;

1271 
buf
->
w
 = 0;

1274 i‡–*
s
 == '\0' )

1276 
buf
->
y_mö
 = 0;

1277 
buf
->
y_max
 = 0;

1278 
buf
->
x
 = 0;

1279 
buf
->
y
 = 0;

1285 
buf
->
y_mö
 = 127;

1288 
buf
->
y_max
 = -128;

1291 
	`u8g_GëGlyph
(
u8g
, *
s
);

1300 
buf
->
w
 = - 
u8g
->
glyph_x
;

1303 
buf
->
x
 = 
u8g
->
glyph_x
;

1304 
buf
->
y
 = 
u8g
->
glyph_y
;

1312 
tmp
 = 
u8g
->
glyph_y
;

1313 i‡–
buf
->
y_mö
 > 
tmp
 )

1314 
buf
->
y_mö
 = 
tmp
;

1316 
tmp
 +=
u8g
->
glyph_height
;

1317 i‡–
buf
->
y_max
 < 
tmp
 )

1318 
buf
->
y_max
 = 
tmp
;

1321 
s
++;

1322 i‡–*
s
 == '\0' )

1326 
buf
->
w
 +
u8g
->
glyph_dx
;

1329 
	`u8g_GëGlyph
(
u8g
, *
s
);

1334 
buf
->
w
 +
u8g
->
glyph_width
;

1337 
buf
->
w
 +
u8g
->
glyph_x
;

1338 
	}
}

1341 
	$u8g_f⁄t_box_mö
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_°r_size_t
 *
buf
)

1343 
	`u8g_f⁄t_ˇlc_°r_mö_box
(
u8g
, 
s
, 
buf
);

1344 
	}
}

1347 
	$u8g_f⁄t_box_À·_gA
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_°r_size_t
 *
buf
)

1350 
	}
}

1353 
	$u8g_f⁄t_box_Æl_gA
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_°r_size_t
 *
buf
)

1356 
	}
}

1359 
	$u8g_f⁄t_gë_°r_box_fûl_¨gs
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_°r_size_t
 *
buf
, 
u8g_uöt_t
 *
x
, u8g_uöt_à*
y
, u8g_uöt_à*
width
, u8g_uöt_à*
height
)

1365 
	`u8g_GëGlyph
(
u8g
, *
s
);

1366 *
x
 +
u8g
->
glyph_x
;

1367 *
width
 = 
buf
->
w
;

1368 *
y
 -
buf
->
y_max
;

1373 *
height
 = 
buf
->
y_max
;

1374 *
height
 -
buf
->
y_mö
;

1375 
	}
}

1378 
	$u8g_GëSåMöBox
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_uöt_t
 *
x
, u8g_uöt_à*
y
, u8g_uöt_à*
width
, u8g_uöt_à*
height
)

1380 
u8g_°r_size_t
 
buf
;

1382 i‡–*
s
 == '\0' )

1384 *
width
= 0;

1385 *
height
 = 0;

1389 
	`u8g_f⁄t_ˇlc_°r_mö_box
(
u8g
, 
s
, &
buf
);

1390 
	`u8g_f⁄t_gë_°r_box_fûl_¨gs
(
u8g
, 
s
, &
buf
, 
x
, 
y
, 
width
, 
height
);

1391 
	}
}

1394 
	$u8g_GëSåAMöBox
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_uöt_t
 *
x
, u8g_uöt_à*
y
, u8g_uöt_à*
width
, u8g_uöt_à*
height
)

1396 
u8g_°r_size_t
 
buf
;

1397 
uöt8_t
 
ˇp_a
;

1399 i‡–*
s
 == '\0' )

1401 *
width
= 0;

1402 *
height
 = 0;

1406 
ˇp_a
 = 
	`u8g_f⁄t_GëC≠ôÆAHeight
(
u8g
->
f⁄t
);

1407 
	`u8g_f⁄t_ˇlc_°r_mö_box
(
u8g
, 
s
, &
buf
);

1408 i‡–
buf
.
y_max
 < 
ˇp_a
 )

1409 
buf
.
y_max
 = 
ˇp_a
;

1410 
	`u8g_f⁄t_gë_°r_box_fûl_¨gs
(
u8g
, 
s
, &
buf
, 
x
, 
y
, 
width
, 
height
);

1411 
	}
}

1413 
	$u8g_SëF⁄t
(
u8g_t
 *
u8g
, c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
)

1415 i‡–
u8g
->
f⁄t
 != font )

1417 
u8g
->
f⁄t
 = font;

1418 
	`u8g_Upd©eRefHeight
(
u8g
);

1419 
	`u8g_SëF⁄tPosBa£löe
(
u8g
);

1421 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_font_data.c

12 
	~"u8g.h
"

13 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_03b
[826] 
U8G_SECTION
(".progmem.u8g_font_04b_03b") = {

77 
	~"u8g.h
"

78 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_03bn
[130] 
U8G_SECTION
(".progmem.u8g_font_04b_03bn") = {

99 
	~"u8g.h
"

100 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_03br
[696] 
U8G_SECTION
(".progmem.u8g_font_04b_03br") = {

156 
	~"u8g.h
"

157 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_03
[859] 
U8G_SECTION
(".progmem.u8g_font_04b_03") = {

223 
	~"u8g.h
"

224 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_03n
[130] 
U8G_SECTION
(".progmem.u8g_font_04b_03n") = {

245 
	~"u8g.h
"

246 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_03r
[729] 
U8G_SECTION
(".progmem.u8g_font_04b_03r") = {

304 
	~"u8g.h
"

305 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_24
[912] 
U8G_SECTION
(".progmem.u8g_font_04b_24") = {

375 
	~"u8g.h
"

376 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_24n
[130] 
U8G_SECTION
(".progmem.u8g_font_04b_24n") = {

397 
	~"u8g.h
"

398 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_24r
[735] 
U8G_SECTION
(".progmem.u8g_font_04b_24r") = {

456 
	~"u8g.h
"

457 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_10x20_67_75
[4734] 
U8G_SECTION
(".progmem.u8g_font_10x20_67_75") = {

765 
	~"u8g.h
"

766 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_10x20_75r
[693] 
U8G_SECTION
(".progmem.u8g_font_10x20_75r") = {

822 
	~"u8g.h
"

823 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_10x20_78_79
[2638] 
U8G_SECTION
(".progmem.u8g_font_10x20_78_79") = {

1000 
	~"u8g.h
"

1001 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_10x20
[3453] 
U8G_SECTION
(".progmem.u8g_font_10x20") = {

1229 
	~"u8g.h
"

1230 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_10x20r
[1667] 
U8G_SECTION
(".progmem.u8g_font_10x20r") = {

1347 
	~"u8g.h
"

1348 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_4x6
[1500] 
U8G_SECTION
(".progmem.u8g_font_4x6") = {

1454 
	~"u8g.h
"

1455 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_4x6r
[734] 
U8G_SECTION
(".progmem.u8g_font_4x6r") = {

1513 
	~"u8g.h
"

1514 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_5x7
[1624] 
U8G_SECTION
(".progmem.u8g_font_5x7") = {

1628 
	~"u8g.h
"

1629 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_5x7r
[789] 
U8G_SECTION
(".progmem.u8g_font_5x7r") = {

1691 
	~"u8g.h
"

1692 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_5x8
[1693] 
U8G_SECTION
(".progmem.u8g_font_5x8") = {

1810 
	~"u8g.h
"

1811 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_5x8r
[805] 
U8G_SECTION
(".progmem.u8g_font_5x8r") = {

1874 
	~"u8g.h
"

1875 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x10
[1866] 
U8G_SECTION
(".progmem.u8g_font_6x10") = {

2004 
	~"u8g.h
"

2005 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x10r
[889] 
U8G_SECTION
(".progmem.u8g_font_6x10r") = {

2073 
	~"u8g.h
"

2074 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x12_67_75
[2382] 
U8G_SECTION
(".progmem.u8g_font_6x12_67_75") = {

2235 
	~"u8g.h
"

2236 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x12_75r
[427] 
U8G_SECTION
(".progmem.u8g_font_6x12_75r") = {

2275 
	~"u8g.h
"

2276 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x12_78_79
[2316] 
U8G_SECTION
(".progmem.u8g_font_6x12_78_79") = {

2433 
	~"u8g.h
"

2434 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x12
[1933] 
U8G_SECTION
(".progmem.u8g_font_6x12") = {

2567 
	~"u8g.h
"

2568 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x12r
[898] 
U8G_SECTION
(".progmem.u8g_font_6x12r") = {

2637 
	~"u8g.h
"

2638 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13_67_75
[2236] 
U8G_SECTION
(".progmem.u8g_font_6x13_67_75") = {

2790 
	~"u8g.h
"

2791 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13_75r
[447] 
U8G_SECTION
(".progmem.u8g_font_6x13_75r") = {

2831 
	~"u8g.h
"

2832 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13_78_79
[1470] 
U8G_SECTION
(".progmem.u8g_font_6x13_78_79") = {

2936 
	~"u8g.h
"

2937 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13B
[2171] 
U8G_SECTION
(".progmem.u8g_font_6x13B") = {

3085 
	~"u8g.h
"

3086 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13Br
[1040] 
U8G_SECTION
(".progmem.u8g_font_6x13Br") = {

3164 
	~"u8g.h
"

3165 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13
[2160] 
U8G_SECTION
(".progmem.u8g_font_6x13") = {

3313 
	~"u8g.h
"

3314 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13O
[2162] 
U8G_SECTION
(".progmem.u8g_font_6x13O") = {

3462 
	~"u8g.h
"

3463 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13Or
[1043] 
U8G_SECTION
(".progmem.u8g_font_6x13Or") = {

3541 
	~"u8g.h
"

3542 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13r
[1041] 
U8G_SECTION
(".progmem.u8g_font_6x13r") = {

3620 
	~"u8g.h
"

3621 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x13_67_75
[2197] 
U8G_SECTION
(".progmem.u8g_font_7x13_67_75") = {

3771 
	~"u8g.h
"

3772 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x13_75r
[471] 
U8G_SECTION
(".progmem.u8g_font_7x13_75r") = {

3814 
	~"u8g.h
"

3815 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x13B
[2172] 
U8G_SECTION
(".progmem.u8g_font_7x13B") = {

3963 
	~"u8g.h
"

3964 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x13Br
[1041] 
U8G_SECTION
(".progmem.u8g_font_7x13Br") = {

4042 
	~"u8g.h
"

4043 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x13
[2157] 
U8G_SECTION
(".progmem.u8g_font_7x13") = {

4190 
	~"u8g.h
"

4191 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x13O
[2158] 
U8G_SECTION
(".progmem.u8g_font_7x13O") = {

4338 
	~"u8g.h
"

4339 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x13Or
[1035] 
U8G_SECTION
(".progmem.u8g_font_7x13Or") = {

4416 
	~"u8g.h
"

4417 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x13r
[1034] 
U8G_SECTION
(".progmem.u8g_font_7x13r") = {

4494 
	~"u8g.h
"

4495 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x14B
[2390] 
U8G_SECTION
(".progmem.u8g_font_7x14B") = {

4657 
	~"u8g.h
"

4658 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x14Br
[1151] 
U8G_SECTION
(".progmem.u8g_font_7x14Br") = {

4742 
	~"u8g.h
"

4743 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x14
[2374] 
U8G_SECTION
(".progmem.u8g_font_7x14") = {

4904 
	~"u8g.h
"

4905 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x14r
[1151] 
U8G_SECTION
(".progmem.u8g_font_7x14r") = {

4989 
	~"u8g.h
"

4990 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_8x13_67_75
[2420] 
U8G_SECTION
(".progmem.u8g_font_8x13_67_75") = {

5154 
	~"u8g.h
"

5155 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_8x13_75r
[496] 
U8G_SECTION
(".progmem.u8g_font_8x13_75r") = {

5199 
	~"u8g.h
"

5200 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_8x13B
[2302] 
U8G_SECTION
(".progmem.u8g_font_8x13B") = {

5356 
	~"u8g.h
"

5357 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_8x13Br
[1123] 
U8G_SECTION
(".progmem.u8g_font_8x13Br") = {

5440 
	~"u8g.h
"

5441 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_8x13
[2152] 
U8G_SECTION
(".progmem.u8g_font_8x13") = {

5588 
	~"u8g.h
"

5589 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_8x13O
[2153] 
U8G_SECTION
(".progmem.u8g_font_8x13O") = {

5736 
	~"u8g.h
"

5737 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_8x13Or
[1029] 
U8G_SECTION
(".progmem.u8g_font_8x13Or") = {

5814 
	~"u8g.h
"

5815 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_8x13r
[1028] 
U8G_SECTION
(".progmem.u8g_font_8x13r") = {

5892 
	~"u8g.h
"

5893 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x15_67_75
[3804] 
U8G_SECTION
(".progmem.u8g_font_9x15_67_75") = {

6143 
	~"u8g.h
"

6144 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x15_75r
[792] 
U8G_SECTION
(".progmem.u8g_font_9x15_75r") = {

6206 
	~"u8g.h
"

6207 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x15_78_79
[3795] 
U8G_SECTION
(".progmem.u8g_font_9x15_78_79") = {

6457 
	~"u8g.h
"

6458 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x15B
[2990] 
U8G_SECTION
(".progmem.u8g_font_9x15B") = {

6657 
	~"u8g.h
"

6658 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x15Br
[1423] 
U8G_SECTION
(".progmem.u8g_font_9x15Br") = {

6759 
	~"u8g.h
"

6760 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x15
[2959] 
U8G_SECTION
(".progmem.u8g_font_9x15") = {

6957 
	~"u8g.h
"

6958 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x15r
[1427] 
U8G_SECTION
(".progmem.u8g_font_9x15r") = {

7060 
	~"u8g.h
"

7061 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x18_67_75
[3936] 
U8G_SECTION
(".progmem.u8g_font_9x18_67_75") = {

7320 
	~"u8g.h
"

7321 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x18_75r
[792] 
U8G_SECTION
(".progmem.u8g_font_9x18_75r") = {

7383 
	~"u8g.h
"

7384 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x18_78_79
[3336] 
U8G_SECTION
(".progmem.u8g_font_9x18_78_79") = {

7605 
	~"u8g.h
"

7606 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x18B
[3026] 
U8G_SECTION
(".progmem.u8g_font_9x18B") = {

7808 
	~"u8g.h
"

7809 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x18Br
[1434] 
U8G_SECTION
(".progmem.u8g_font_9x18Br") = {

7911 
	~"u8g.h
"

7912 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x18
[3011] 
U8G_SECTION
(".progmem.u8g_font_9x18") = {

8113 
	~"u8g.h
"

8114 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x18r
[1424] 
U8G_SECTION
(".progmem.u8g_font_9x18r") = {

8216 
	~"u8g.h
"

8217 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_baby
[2227] 
U8G_SECTION
(".progmem.u8g_font_baby") = {

8369 
	~"u8g.h
"

8370 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_babyn
[180] 
U8G_SECTION
(".progmem.u8g_font_babyn") = {

8394 
	~"u8g.h
"

8395 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_babyr
[1040] 
U8G_SECTION
(".progmem.u8g_font_babyr") = {

8473 
	~"u8g.h
"

8474 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_blù„°_07
[948] 
U8G_SECTION
(".progmem.u8g_font_blipfest_07") = {

8546 
	~"u8g.h
"

8547 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_blù„°_07n
[160] 
U8G_SECTION
(".progmem.u8g_font_blipfest_07n") = {

8570 
	~"u8g.h
"

8571 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_blù„°_07r
[820] 
U8G_SECTION
(".progmem.u8g_font_blipfest_07r") = {

8635 
	~"u8g.h
"

8636 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_chikôa
[2236] 
U8G_SECTION
(".progmem.u8g_font_chikita") = {

8788 
	~"u8g.h
"

8789 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_chikô™
[180] 
U8G_SECTION
(".progmem.u8g_font_chikitan") = {

8813 
	~"u8g.h
"

8814 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_chikô¨
[1032] 
U8G_SECTION
(".progmem.u8g_font_chikitar") = {

8891 
	~"u8g.h
"

8892 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB08
[2425] 
U8G_SECTION
(".progmem.u8g_font_courB08") = {

9056 
	~"u8g.h
"

9057 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB08r
[1145] 
U8G_SECTION
(".progmem.u8g_font_courB08r") = {

9141 
	~"u8g.h
"

9142 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB10
[3355] 
U8G_SECTION
(".progmem.u8g_font_courB10") = {

9364 
	~"u8g.h
"

9365 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB10r
[1551] 
U8G_SECTION
(".progmem.u8g_font_courB10r") = {

9474 
	~"u8g.h
"

9475 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB12
[3959] 
U8G_SECTION
(".progmem.u8g_font_courB12") = {

9735 
	~"u8g.h
"

9736 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB12r
[1857] 
U8G_SECTION
(".progmem.u8g_font_courB12r") = {

9865 
	~"u8g.h
"

9866 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB14
[4784] 
U8G_SECTION
(".progmem.u8g_font_courB14") = {

10178 
	~"u8g.h
"

10179 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB14r
[2167] 
U8G_SECTION
(".progmem.u8g_font_courB14r") = {

10327 
	~"u8g.h
"

10328 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB18
[6429] 
U8G_SECTION
(".progmem.u8g_font_courB18") = {

10742 
	~"u8g.h
"

10743 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB18r
[3001] 
U8G_SECTION
(".progmem.u8g_font_courB18r") = {

10943 
	~"u8g.h
"

10944 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB24
[10502] 
U8G_SECTION
(".progmem.u8g_font_courB24") = {

11613 
	~"u8g.h
"

11614 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB24r
[4775] 
U8G_SECTION
(".progmem.u8g_font_courB24r") = {

11925 
	~"u8g.h
"

11926 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB24n
[686] 
U8G_SECTION
(".progmem.u8g_font_courB24n") = {

11981 
	~"u8g.h
"

11982 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR08
[2433] 
U8G_SECTION
(".progmem.u8g_font_courR08") = {

12147 
	~"u8g.h
"

12148 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR08r
[1157] 
U8G_SECTION
(".progmem.u8g_font_courR08r") = {

12233 
	~"u8g.h
"

12234 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR10
[3052] 
U8G_SECTION
(".progmem.u8g_font_courR10") = {

12437 
	~"u8g.h
"

12438 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR10r
[1443] 
U8G_SECTION
(".progmem.u8g_font_courR10r") = {

12541 
	~"u8g.h
"

12542 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR12
[3471] 
U8G_SECTION
(".progmem.u8g_font_courR12") = {

12771 
	~"u8g.h
"

12772 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR12r
[1592] 
U8G_SECTION
(".progmem.u8g_font_courR12r") = {

12884 
	~"u8g.h
"

12885 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR14
[4276] 
U8G_SECTION
(".progmem.u8g_font_courR14") = {

13165 
	~"u8g.h
"

13166 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR14r
[1988] 
U8G_SECTION
(".progmem.u8g_font_courR14r") = {

13303 
	~"u8g.h
"

13304 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR18
[6152] 
U8G_SECTION
(".progmem.u8g_font_courR18") = {

13701 
	~"u8g.h
"

13702 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR18r
[2862] 
U8G_SECTION
(".progmem.u8g_font_courR18r") = {

13893 
	~"u8g.h
"

13894 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR24
[8729] 
U8G_SECTION
(".progmem.u8g_font_courR24") = {

14452 
	~"u8g.h
"

14453 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR24n
[638] 
U8G_SECTION
(".progmem.u8g_font_courR24n") = {

14505 
	~"u8g.h
"

14506 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR24r
[3991] 
U8G_SECTION
(".progmem.u8g_font_courR24r") = {

14768 
	~"u8g.h
"

14769 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_cu12_67_75
[3981] 
U8G_SECTION
(".progmem.u8g_font_cu12_67_75") = {

15030 
	~"u8g.h
"

15031 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_cu12_75r
[1123] 
U8G_SECTION
(".progmem.u8g_font_cu12_75r") = {

15114 
	~"u8g.h
"

15115 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_cu12
[3993] 
U8G_SECTION
(".progmem.u8g_font_cu12") = {

15377 
	~"u8g.h
"

15378 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_curs‹
[5286] 
U8G_SECTION
(".progmem.u8g_font_cursor") = {

15721 
	~"u8g.h
"

15722 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_curs‹r
[492] 
U8G_SECTION
(".progmem.u8g_font_cursorr") = {

15765 
	~"u8g.h
"

15766 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fixed_v0
[1702] 
U8G_SECTION
(".progmem.u8g_font_fixed_v0") = {

15885 
	~"u8g.h
"

15886 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fixed_v0n
[159] 
U8G_SECTION
(".progmem.u8g_font_fixed_v0n") = {

15908 
	~"u8g.h
"

15909 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fixed_v0r
[878] 
U8G_SECTION
(".progmem.u8g_font_fixed_v0r") = {

15976 
	~"u8g.h
"

15977 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_‰ìdoomr10r
[1042] 
U8G_SECTION
(".progmem.u8g_font_freedoomr10r") = {

16055 
	~"u8g.h
"

16056 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_‰ìdoomr25n
[943] 
U8G_SECTION
(".progmem.u8g_font_freedoomr25n") = {

16127 
	~"u8g.h
"

16128 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub11
[3948] 
U8G_SECTION
(".progmem.u8g_font_fub11") = {

16387 
	~"u8g.h
"

16388 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub11n
[266] 
U8G_SECTION
(".progmem.u8g_font_fub11n") = {

16417 
	~"u8g.h
"

16418 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub11r
[1829] 
U8G_SECTION
(".progmem.u8g_font_fub11r") = {

16545 
	~"u8g.h
"

16546 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub14
[5788] 
U8G_SECTION
(".progmem.u8g_font_fub14") = {

16920 
	~"u8g.h
"

16921 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub14n
[436] 
U8G_SECTION
(".progmem.u8g_font_fub14n") = {

16961 
	~"u8g.h
"

16962 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub14r
[2680] 
U8G_SECTION
(".progmem.u8g_font_fub14r") = {

17142 
	~"u8g.h
"

17143 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub17
[6938] 
U8G_SECTION
(".progmem.u8g_font_fub17") = {

17589 
	~"u8g.h
"

17590 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub17n
[512] 
U8G_SECTION
(".progmem.u8g_font_fub17n") = {

17635 
	~"u8g.h
"

17636 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub17r
[3222] 
U8G_SECTION
(".progmem.u8g_font_fub17r") = {

17850 
	~"u8g.h
"

17851 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub20
[8916] 
U8G_SECTION
(".progmem.u8g_font_fub20") = {

18421 
	~"u8g.h
"

18422 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub20n
[583] 
U8G_SECTION
(".progmem.u8g_font_fub20n") = {

18471 
	~"u8g.h
"

18472 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub20r
[4022] 
U8G_SECTION
(".progmem.u8g_font_fub20r") = {

18736 
	~"u8g.h
"

18737 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub25
[12908] 
U8G_SECTION
(".progmem.u8g_font_fub25") = {

19556 
	~"u8g.h
"

19557 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub25n
[957] 
U8G_SECTION
(".progmem.u8g_font_fub25n") = {

19629 
	~"u8g.h
"

19630 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub25r
[5936] 
U8G_SECTION
(".progmem.u8g_font_fub25r") = {

20014 
	~"u8g.h
"

20015 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub30
[16953] 
U8G_SECTION
(".progmem.u8g_font_fub30") = {

21087 
	~"u8g.h
"

21088 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub30n
[1179] 
U8G_SECTION
(".progmem.u8g_font_fub30n") = {

21174 
	~"u8g.h
"

21175 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub30r
[7686] 
U8G_SECTION
(".progmem.u8g_font_fub30r") = {

21668 
	~"u8g.h
"

21669 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub35n
[1667] 
U8G_SECTION
(".progmem.u8g_font_fub35n") = {

21786 
	~"u8g.h
"

21787 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub42n
[2235] 
U8G_SECTION
(".progmem.u8g_font_fub42n") = {

21939 
	~"u8g.h
"

21940 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub49n
[3074] 
U8G_SECTION
(".progmem.u8g_font_fub49n") = {

22145 
	~"u8g.h
"

22146 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur11
[3712] 
U8G_SECTION
(".progmem.u8g_font_fur11") = {

22391 
	~"u8g.h
"

22392 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur11n
[265] 
U8G_SECTION
(".progmem.u8g_font_fur11n") = {

22421 
	~"u8g.h
"

22422 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur11r
[1729] 
U8G_SECTION
(".progmem.u8g_font_fur11r") = {

22543 
	~"u8g.h
"

22544 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur14
[5349] 
U8G_SECTION
(".progmem.u8g_font_fur14") = {

22891 
	~"u8g.h
"

22892 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur14n
[405] 
U8G_SECTION
(".progmem.u8g_font_fur14n") = {

22930 
	~"u8g.h
"

22931 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur14r
[2489] 
U8G_SECTION
(".progmem.u8g_font_fur14r") = {

23099 
	~"u8g.h
"

23100 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur17
[6799] 
U8G_SECTION
(".progmem.u8g_font_fur17") = {

23537 
	~"u8g.h
"

23538 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur17n
[510] 
U8G_SECTION
(".progmem.u8g_font_fur17n") = {

23582 
	~"u8g.h
"

23583 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur17r
[3146] 
U8G_SECTION
(".progmem.u8g_font_fur17r") = {

23792 
	~"u8g.h
"

23793 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur20
[8654] 
U8G_SECTION
(".progmem.u8g_font_fur20") = {

24346 
	~"u8g.h
"

24347 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur20n
[596] 
U8G_SECTION
(".progmem.u8g_font_fur20n") = {

24397 
	~"u8g.h
"

24398 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur20r
[3976] 
U8G_SECTION
(".progmem.u8g_font_fur20r") = {

24659 
	~"u8g.h
"

24660 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur25
[11949] 
U8G_SECTION
(".progmem.u8g_font_fur25") = {

25419 
	~"u8g.h
"

25420 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur25n
[774] 
U8G_SECTION
(".progmem.u8g_font_fur25n") = {

25481 
	~"u8g.h
"

25482 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur25r
[5389] 
U8G_SECTION
(".progmem.u8g_font_fur25r") = {

25831 
	~"u8g.h
"

25832 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur30
[16505] 
U8G_SECTION
(".progmem.u8g_font_fur30") = {

26876 
	~"u8g.h
"

26877 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur30n
[1175] 
U8G_SECTION
(".progmem.u8g_font_fur30n") = {

26963 
	~"u8g.h
"

26964 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur30r
[7380] 
U8G_SECTION
(".progmem.u8g_font_fur30r") = {

27438 
	~"u8g.h
"

27439 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur35n
[1417] 
U8G_SECTION
(".progmem.u8g_font_fur35n") = {

27540 
	~"u8g.h
"

27541 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur42n
[2135] 
U8G_SECTION
(".progmem.u8g_font_fur42n") = {

27687 
	~"u8g.h
"

27688 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur49n
[2643] 
U8G_SECTION
(".progmem.u8g_font_fur49n") = {

27866 
	~"u8g.h
"

27867 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb11
[4313] 
U8G_SECTION
(".progmem.u8g_font_gdb11") = {

28149 
	~"u8g.h
"

28150 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb11n
[263] 
U8G_SECTION
(".progmem.u8g_font_gdb11n") = {

28179 
	~"u8g.h
"

28180 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb11r
[2001] 
U8G_SECTION
(".progmem.u8g_font_gdb11r") = {

28318 
	~"u8g.h
"

28319 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb12
[4626] 
U8G_SECTION
(".progmem.u8g_font_gdb12") = {

28621 
	~"u8g.h
"

28622 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb12n
[286] 
U8G_SECTION
(".progmem.u8g_font_gdb12n") = {

28652 
	~"u8g.h
"

28653 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb12r
[2190] 
U8G_SECTION
(".progmem.u8g_font_gdb12r") = {

28802 
	~"u8g.h
"

28803 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb14
[6044] 
U8G_SECTION
(".progmem.u8g_font_gdb14") = {

29193 
	~"u8g.h
"

29194 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb14n
[448] 
U8G_SECTION
(".progmem.u8g_font_gdb14n") = {

29235 
	~"u8g.h
"

29236 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb14r
[2842] 
U8G_SECTION
(".progmem.u8g_font_gdb14r") = {

29426 
	~"u8g.h
"

29427 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb17
[7600] 
U8G_SECTION
(".progmem.u8g_font_gdb17") = {

29915 
	~"u8g.h
"

29916 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb17n
[542] 
U8G_SECTION
(".progmem.u8g_font_gdb17n") = {

29962 
	~"u8g.h
"

29963 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb17r
[3540] 
U8G_SECTION
(".progmem.u8g_font_gdb17r") = {

30197 
	~"u8g.h
"

30198 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb20
[10077] 
U8G_SECTION
(".progmem.u8g_font_gdb20") = {

30840 
	~"u8g.h
"

30841 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb20n
[624] 
U8G_SECTION
(".progmem.u8g_font_gdb20n") = {

30893 
	~"u8g.h
"

30894 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb20r
[4680] 
U8G_SECTION
(".progmem.u8g_font_gdb20r") = {

31199 
	~"u8g.h
"

31200 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb25
[14643] 
U8G_SECTION
(".progmem.u8g_font_gdb25") = {

32128 
	~"u8g.h
"

32129 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb25n
[960] 
U8G_SECTION
(".progmem.u8g_font_gdb25n") = {

32202 
	~"u8g.h
"

32203 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb25r
[6779] 
U8G_SECTION
(".progmem.u8g_font_gdb25r") = {

32639 
	~"u8g.h
"

32640 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb30
[19508] 
U8G_SECTION
(".progmem.u8g_font_gdb30") = {

33872 
	~"u8g.h
"

33873 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb30n
[1275] 
U8G_SECTION
(".progmem.u8g_font_gdb30n") = {

33965 
	~"u8g.h
"

33966 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb30r
[9112] 
U8G_SECTION
(".progmem.u8g_font_gdb30r") = {

34548 
	~"u8g.h
"

34549 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr10
[3670] 
U8G_SECTION
(".progmem.u8g_font_gdr10") = {

34791 
	~"u8g.h
"

34792 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr10n
[249] 
U8G_SECTION
(".progmem.u8g_font_gdr10n") = {

34820 
	~"u8g.h
"

34821 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr10r
[1723] 
U8G_SECTION
(".progmem.u8g_font_gdr10r") = {

34941 
	~"u8g.h
"

34942 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr11
[3977] 
U8G_SECTION
(".progmem.u8g_font_gdr11") = {

35203 
	~"u8g.h
"

35204 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr11n
[262] 
U8G_SECTION
(".progmem.u8g_font_gdr11n") = {

35233 
	~"u8g.h
"

35234 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr11r
[1868] 
U8G_SECTION
(".progmem.u8g_font_gdr11r") = {

35363 
	~"u8g.h
"

35364 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr12
[4200] 
U8G_SECTION
(".progmem.u8g_font_gdr12") = {

35639 
	~"u8g.h
"

35640 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr12n
[270] 
U8G_SECTION
(".progmem.u8g_font_gdr12n") = {

35669 
	~"u8g.h
"

35670 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr12r
[1992] 
U8G_SECTION
(".progmem.u8g_font_gdr12r") = {

35807 
	~"u8g.h
"

35808 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr14
[5942] 
U8G_SECTION
(".progmem.u8g_font_gdr14") = {

36192 
	~"u8g.h
"

36193 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr14n
[445] 
U8G_SECTION
(".progmem.u8g_font_gdr14n") = {

36233 
	~"u8g.h
"

36234 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr14r
[2791] 
U8G_SECTION
(".progmem.u8g_font_gdr14r") = {

36421 
	~"u8g.h
"

36422 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr17
[7056] 
U8G_SECTION
(".progmem.u8g_font_gdr17") = {

36876 
	~"u8g.h
"

36877 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr17n
[539] 
U8G_SECTION
(".progmem.u8g_font_gdr17n") = {

36923 
	~"u8g.h
"

36924 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr17r
[3380] 
U8G_SECTION
(".progmem.u8g_font_gdr17r") = {

37148 
	~"u8g.h
"

37149 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr20
[9119] 
U8G_SECTION
(".progmem.u8g_font_gdr20") = {

37731 
	~"u8g.h
"

37732 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr20n
[619] 
U8G_SECTION
(".progmem.u8g_font_gdr20n") = {

37783 
	~"u8g.h
"

37784 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr20r
[4232] 
U8G_SECTION
(".progmem.u8g_font_gdr20r") = {

38061 
	~"u8g.h
"

38062 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr25
[13042] 
U8G_SECTION
(".progmem.u8g_font_gdr25") = {

38890 
	~"u8g.h
"

38891 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr25n
[810] 
U8G_SECTION
(".progmem.u8g_font_gdr25n") = {

38954 
	~"u8g.h
"

38955 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr25r
[6239] 
U8G_SECTION
(".progmem.u8g_font_gdr25r") = {

39357 
	~"u8g.h
"

39358 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr30
[18369] 
U8G_SECTION
(".progmem.u8g_font_gdr30") = {

40519 
	~"u8g.h
"

40520 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr30n
[1252] 
U8G_SECTION
(".progmem.u8g_font_gdr30n") = {

40611 
	~"u8g.h
"

40612 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr30r
[8588] 
U8G_SECTION
(".progmem.u8g_font_gdr30r") = {

41161 
	~"u8g.h
"

41162 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr9
[3248] 
U8G_SECTION
(".progmem.u8g_font_gdr9") = {

41378 
	~"u8g.h
"

41379 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr9n
[235] 
U8G_SECTION
(".progmem.u8g_font_gdr9n") = {

41406 
	~"u8g.h
"

41407 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr9r
[1553] 
U8G_SECTION
(".progmem.u8g_font_gdr9r") = {

41517 
	~"u8g.h
"

41518 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB08
[2677] 
U8G_SECTION
(".progmem.u8g_font_helvB08") = {

41698 
	~"u8g.h
"

41699 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB08r
[1287] 
U8G_SECTION
(".progmem.u8g_font_helvB08r") = {

41792 
	~"u8g.h
"

41793 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB10
[3692] 
U8G_SECTION
(".progmem.u8g_font_helvB10") = {

42036 
	~"u8g.h
"

42037 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB10r
[1720] 
U8G_SECTION
(".progmem.u8g_font_helvB10r") = {

42157 
	~"u8g.h
"

42158 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB12
[4077] 
U8G_SECTION
(".progmem.u8g_font_helvB12") = {

42425 
	~"u8g.h
"

42426 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB12r
[1914] 
U8G_SECTION
(".progmem.u8g_font_helvB12r") = {

42558 
	~"u8g.h
"

42559 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB14
[5489] 
U8G_SECTION
(".progmem.u8g_font_helvB14") = {

42915 
	~"u8g.h
"

42916 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB14r
[2548] 
U8G_SECTION
(".progmem.u8g_font_helvB14r") = {

43088 
	~"u8g.h
"

43089 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB18
[7527] 
U8G_SECTION
(".progmem.u8g_font_helvB18") = {

43572 
	~"u8g.h
"

43573 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB18r
[3453] 
U8G_SECTION
(".progmem.u8g_font_helvB18r") = {

43801 
	~"u8g.h
"

43802 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB24
[11554] 
U8G_SECTION
(".progmem.u8g_font_helvB24") = {

44537 
	~"u8g.h
"

44538 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB24n
[720] 
U8G_SECTION
(".progmem.u8g_font_helvB24n") = {

44596 
	~"u8g.h
"

44597 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB24r
[5214] 
U8G_SECTION
(".progmem.u8g_font_helvB24r") = {

44935 
	~"u8g.h
"

44936 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR08
[2687] 
U8G_SECTION
(".progmem.u8g_font_helvR08") = {

45116 
	~"u8g.h
"

45117 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR08r
[1276] 
U8G_SECTION
(".progmem.u8g_font_helvR08r") = {

45209 
	~"u8g.h
"

45210 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR10
[3527] 
U8G_SECTION
(".progmem.u8g_font_helvR10") = {

45443 
	~"u8g.h
"

45444 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR10r
[1648] 
U8G_SECTION
(".progmem.u8g_font_helvR10r") = {

45560 
	~"u8g.h
"

45561 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR12
[4077] 
U8G_SECTION
(".progmem.u8g_font_helvR12") = {

45828 
	~"u8g.h
"

45829 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR12r
[1907] 
U8G_SECTION
(".progmem.u8g_font_helvR12r") = {

45961 
	~"u8g.h
"

45962 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR14
[4920] 
U8G_SECTION
(".progmem.u8g_font_helvR14") = {

46282 
	~"u8g.h
"

46283 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR14r
[2281] 
U8G_SECTION
(".progmem.u8g_font_helvR14r") = {

46438 
	~"u8g.h
"

46439 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR18
[7307] 
U8G_SECTION
(".progmem.u8g_font_helvR18") = {

46908 
	~"u8g.h
"

46909 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR18r
[3381] 
U8G_SECTION
(".progmem.u8g_font_helvR18r") = {

47133 
	~"u8g.h
"

47134 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR24
[10931] 
U8G_SECTION
(".progmem.u8g_font_helvR24") = {

47830 
	~"u8g.h
"

47831 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR24n
[702] 
U8G_SECTION
(".progmem.u8g_font_helvR24n") = {

47887 
	~"u8g.h
"

47888 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR24r
[4992] 
U8G_SECTION
(".progmem.u8g_font_helvR24r") = {

48213 
	~"u8g.h
"

48214 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_luˇsf⁄t_Æã∫©e
[2193] 
U8G_SECTION
(".progmem.u8g_font_lucasfont_alternate") = {

48364 
	~"u8g.h
"

48365 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_luˇsf⁄t_Æã∫©í
[206] 
U8G_SECTION
(".progmem.u8g_font_lucasfont_alternaten") = {

48390 
	~"u8g.h
"

48391 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_luˇsf⁄t_Æã∫©î
[1138] 
U8G_SECTION
(".progmem.u8g_font_lucasfont_alternater") = {

48475 
	~"u8g.h
"

48476 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_m2ic⁄_5
[221] 
U8G_SECTION
(".progmem.u8g_font_m2icon_5") = {

48502 
	~"u8g.h
"

48503 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_m2ic⁄_7
[275] 
U8G_SECTION
(".progmem.u8g_font_m2icon_7") = {

48533 
	~"u8g.h
"

48534 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_m2ic⁄_9
[471] 
U8G_SECTION
(".progmem.u8g_font_m2icon_9") = {

48576 
	~"u8g.h
"

48577 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_mi¸o
[855] 
U8G_SECTION
(".progmem.u8g_font_micro") = {

48643 
	~"u8g.h
"

48644 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB08
[2760] 
U8G_SECTION
(".progmem.u8g_font_ncenB08") = {

48829 
	~"u8g.h
"

48830 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB08r
[1315] 
U8G_SECTION
(".progmem.u8g_font_ncenB08r") = {

48925 
	~"u8g.h
"

48926 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB10
[4003] 
U8G_SECTION
(".progmem.u8g_font_ncenB10") = {

49189 
	~"u8g.h
"

49190 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB10r
[1853] 
U8G_SECTION
(".progmem.u8g_font_ncenB10r") = {

49318 
	~"u8g.h
"

49319 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB12
[4735] 
U8G_SECTION
(".progmem.u8g_font_ncenB12") = {

49627 
	~"u8g.h
"

49628 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB12r
[2194] 
U8G_SECTION
(".progmem.u8g_font_ncenB12r") = {

49778 
	~"u8g.h
"

49779 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB14
[5558] 
U8G_SECTION
(".progmem.u8g_font_ncenB14") = {

50139 
	~"u8g.h
"

50140 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB14r
[2603] 
U8G_SECTION
(".progmem.u8g_font_ncenB14r") = {

50315 
	~"u8g.h
"

50316 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB18
[8114] 
U8G_SECTION
(".progmem.u8g_font_ncenB18") = {

50836 
	~"u8g.h
"

50837 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB18r
[3736] 
U8G_SECTION
(".progmem.u8g_font_ncenB18r") = {

51083 
	~"u8g.h
"

51084 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB24
[12964] 
U8G_SECTION
(".progmem.u8g_font_ncenB24") = {

51907 
	~"u8g.h
"

51908 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB24n
[846] 
U8G_SECTION
(".progmem.u8g_font_ncenB24n") = {

51973 
	~"u8g.h
"

51974 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB24r
[5937] 
U8G_SECTION
(".progmem.u8g_font_ncenB24r") = {

52358 
	~"u8g.h
"

52359 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR08
[2642] 
U8G_SECTION
(".progmem.u8g_font_ncenR08") = {

52537 
	~"u8g.h
"

52538 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR08r
[1266] 
U8G_SECTION
(".progmem.u8g_font_ncenR08r") = {

52630 
	~"u8g.h
"

52631 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR10
[3813] 
U8G_SECTION
(".progmem.u8g_font_ncenR10") = {

52882 
	~"u8g.h
"

52883 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR10r
[1781] 
U8G_SECTION
(".progmem.u8g_font_ncenR10r") = {

53007 
	~"u8g.h
"

53008 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR12
[4247] 
U8G_SECTION
(".progmem.u8g_font_ncenR12") = {

53286 
	~"u8g.h
"

53287 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR12r
[1976] 
U8G_SECTION
(".progmem.u8g_font_ncenR12r") = {

53423 
	~"u8g.h
"

53424 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR14
[5319] 
U8G_SECTION
(".progmem.u8g_font_ncenR14") = {

53769 
	~"u8g.h
"

53770 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR14r
[2534] 
U8G_SECTION
(".progmem.u8g_font_ncenR14r") = {

53941 
	~"u8g.h
"

53942 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR18
[7488] 
U8G_SECTION
(".progmem.u8g_font_ncenR18") = {

54423 
	~"u8g.h
"

54424 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR18r
[3477] 
U8G_SECTION
(".progmem.u8g_font_ncenR18r") = {

54654 
	~"u8g.h
"

54655 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR24
[11729] 
U8G_SECTION
(".progmem.u8g_font_ncenR24") = {

55401 
	~"u8g.h
"

55402 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR24n
[722] 
U8G_SECTION
(".progmem.u8g_font_ncenR24n") = {

55460 
	~"u8g.h
"

55461 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR24r
[5367] 
U8G_SECTION
(".progmem.u8g_font_ncenR24r") = {

55809 
	~"u8g.h
"

55810 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_‹gv01
[1535] 
U8G_SECTION
(".progmem.u8g_font_orgv01") = {

55918 
	~"u8g.h
"

55919 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_‹gv01n
[130] 
U8G_SECTION
(".progmem.u8g_font_orgv01n") = {

55940 
	~"u8g.h
"

55941 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_‹gv01r
[719] 
U8G_SECTION
(".progmem.u8g_font_orgv01r") = {

55998 
	~"u8g.h
"

55999 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb18
[7637] 
U8G_SECTION
(".progmem.u8g_font_osb18") = {

56489 
	~"u8g.h
"

56490 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb18n
[600] 
U8G_SECTION
(".progmem.u8g_font_osb18n") = {

56540 
	~"u8g.h
"

56541 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb18r
[3611] 
U8G_SECTION
(".progmem.u8g_font_osb18r") = {

56779 
	~"u8g.h
"

56780 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb21
[9612] 
U8G_SECTION
(".progmem.u8g_font_osb21") = {

57393 
	~"u8g.h
"

57394 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb21n
[703] 
U8G_SECTION
(".progmem.u8g_font_osb21n") = {

57450 
	~"u8g.h
"

57451 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb21r
[4521] 
U8G_SECTION
(".progmem.u8g_font_osb21r") = {

57746 
	~"u8g.h
"

57747 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb26
[12640] 
U8G_SECTION
(".progmem.u8g_font_osb26") = {

58550 
	~"u8g.h
"

58551 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb26n
[880] 
U8G_SECTION
(".progmem.u8g_font_osb26n") = {

58619 
	~"u8g.h
"

58620 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb26r
[5950] 
U8G_SECTION
(".progmem.u8g_font_osb26r") = {

59004 
	~"u8g.h
"

59005 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb29
[15818] 
U8G_SECTION
(".progmem.u8g_font_osb29") = {

60006 
	~"u8g.h
"

60007 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb29n
[1232] 
U8G_SECTION
(".progmem.u8g_font_osb29n") = {

60097 
	~"u8g.h
"

60098 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb29r
[7481] 
U8G_SECTION
(".progmem.u8g_font_osb29r") = {

60578 
	~"u8g.h
"

60579 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb35
[22095] 
U8G_SECTION
(".progmem.u8g_font_osb35") = {

61972 
	~"u8g.h
"

61973 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb35n
[1539] 
U8G_SECTION
(".progmem.u8g_font_osb35n") = {

62082 
	~"u8g.h
"

62083 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb35r
[10245] 
U8G_SECTION
(".progmem.u8g_font_osb35r") = {

62736 
	~"u8g.h
"

62737 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§18
[7816] 
U8G_SECTION
(".progmem.u8g_font_osr18") = {

63238 
	~"u8g.h
"

63239 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§18n
[595] 
U8G_SECTION
(".progmem.u8g_font_osr18n") = {

63289 
	~"u8g.h
"

63290 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§18r
[3683] 
U8G_SECTION
(".progmem.u8g_font_osr18r") = {

63533 
	~"u8g.h
"

63534 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§21
[9530] 
U8G_SECTION
(".progmem.u8g_font_osr21") = {

64142 
	~"u8g.h
"

64143 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§21n
[702] 
U8G_SECTION
(".progmem.u8g_font_osr21n") = {

64199 
	~"u8g.h
"

64200 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§21r
[4396] 
U8G_SECTION
(".progmem.u8g_font_osr21r") = {

64487 
	~"u8g.h
"

64488 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§26
[13186] 
U8G_SECTION
(".progmem.u8g_font_osr26") = {

65325 
	~"u8g.h
"

65326 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§26n
[932] 
U8G_SECTION
(".progmem.u8g_font_osr26n") = {

65397 
	~"u8g.h
"

65398 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§26r
[6049] 
U8G_SECTION
(".progmem.u8g_font_osr26r") = {

65789 
	~"u8g.h
"

65790 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§29
[16232] 
U8G_SECTION
(".progmem.u8g_font_osr29") = {

66817 
	~"u8g.h
"

66818 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§29n
[1201] 
U8G_SECTION
(".progmem.u8g_font_osr29n") = {

66906 
	~"u8g.h
"

66907 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§29r
[7573] 
U8G_SECTION
(".progmem.u8g_font_osr29r") = {

67393 
	~"u8g.h
"

67394 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§35
[22370] 
U8G_SECTION
(".progmem.u8g_font_osr35") = {

68805 
	~"u8g.h
"

68806 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§35n
[1560] 
U8G_SECTION
(".progmem.u8g_font_osr35n") = {

68916 
	~"u8g.h
"

68917 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§35r
[10371] 
U8G_SECTION
(".progmem.u8g_font_osr35r") = {

69578 
	~"u8g.h
"

69579 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_p01ty≥
[1163] 
U8G_SECTION
(".progmem.u8g_font_p01type") = {

69664 
	~"u8g.h
"

69665 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_p01ty≥n
[177] 
U8G_SECTION
(".progmem.u8g_font_p01typen") = {

69689 
	~"u8g.h
"

69690 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_p01ty≥r
[938] 
U8G_SECTION
(".progmem.u8g_font_p01typer") = {

69761 
	~"u8g.h
"

69762 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_pixñÀ_mi¸o
[1140] 
U8G_SECTION
(".progmem.u8g_font_pixelle_micro") = {

69846 
	~"u8g.h
"

69847 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_pixñÀ_mi¸⁄
[180] 
U8G_SECTION
(".progmem.u8g_font_pixelle_micron") = {

69871 
	~"u8g.h
"

69872 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_pixñÀ_mi¸‹
[1012] 
U8G_SECTION
(".progmem.u8g_font_pixelle_micror") = {

69948 
	~"u8g.h
"

69949 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_robŸ_de_núo
[1376] 
U8G_SECTION
(".progmem.u8g_font_robot_de_niro") = {

70048 
	~"u8g.h
"

70049 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_robŸ_de_nú⁄
[178] 
U8G_SECTION
(".progmem.u8g_font_robot_de_niron") = {

70073 
	~"u8g.h
"

70074 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_robŸ_de_nú‹
[1041] 
U8G_SECTION
(".progmem.u8g_font_robot_de_niror") = {

70152 
	~"u8g.h
"

70153 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb08
[2612] 
U8G_SECTION
(".progmem.u8g_font_symb08") = {

70329 
	~"u8g.h
"

70330 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb08r
[1211] 
U8G_SECTION
(".progmem.u8g_font_symb08r") = {

70418 
	~"u8g.h
"

70419 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb10
[3433] 
U8G_SECTION
(".progmem.u8g_font_symb10") = {

70646 
	~"u8g.h
"

70647 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb10r
[1633] 
U8G_SECTION
(".progmem.u8g_font_symb10r") = {

70762 
	~"u8g.h
"

70763 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb12
[4136] 
U8G_SECTION
(".progmem.u8g_font_symb12") = {

71034 
	~"u8g.h
"

71035 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb12r
[1985] 
U8G_SECTION
(".progmem.u8g_font_symb12r") = {

71172 
	~"u8g.h
"

71173 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb14
[4665] 
U8G_SECTION
(".progmem.u8g_font_symb14") = {

71477 
	~"u8g.h
"

71478 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb14r
[2261] 
U8G_SECTION
(".progmem.u8g_font_symb14r") = {

71632 
	~"u8g.h
"

71633 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb18
[6604] 
U8G_SECTION
(".progmem.u8g_font_symb18") = {

72058 
	~"u8g.h
"

72059 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb18r
[3303] 
U8G_SECTION
(".progmem.u8g_font_symb18r") = {

72278 
	~"u8g.h
"

72279 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb24
[10727] 
U8G_SECTION
(".progmem.u8g_font_symb24") = {

72962 
	~"u8g.h
"

72963 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb24r
[5335] 
U8G_SECTION
(".progmem.u8g_font_symb24r") = {

73309 
	~"u8g.h
"

73310 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB08
[2551] 
U8G_SECTION
(".progmem.u8g_font_timB08") = {

73482 
	~"u8g.h
"

73483 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB08r
[1221] 
U8G_SECTION
(".progmem.u8g_font_timB08r") = {

73572 
	~"u8g.h
"

73573 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB10
[3539] 
U8G_SECTION
(".progmem.u8g_font_timB10") = {

73807 
	~"u8g.h
"

73808 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB10r
[1632] 
U8G_SECTION
(".progmem.u8g_font_timB10r") = {

73923 
	~"u8g.h
"

73924 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB12
[3887] 
U8G_SECTION
(".progmem.u8g_font_timB12") = {

74179 
	~"u8g.h
"

74180 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB12r
[1834] 
U8G_SECTION
(".progmem.u8g_font_timB12r") = {

74307 
	~"u8g.h
"

74308 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB14
[4851] 
U8G_SECTION
(".progmem.u8g_font_timB14") = {

74624 
	~"u8g.h
"

74625 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB14r
[2295] 
U8G_SECTION
(".progmem.u8g_font_timB14r") = {

74781 
	~"u8g.h
"

74782 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB18
[7223] 
U8G_SECTION
(".progmem.u8g_font_timB18") = {

75246 
	~"u8g.h
"

75247 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB18r
[3355] 
U8G_SECTION
(".progmem.u8g_font_timB18r") = {

75469 
	~"u8g.h
"

75470 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB24
[10820] 
U8G_SECTION
(".progmem.u8g_font_timB24") = {

76159 
	~"u8g.h
"

76160 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB24n
[701] 
U8G_SECTION
(".progmem.u8g_font_timB24n") = {

76216 
	~"u8g.h
"

76217 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB24r
[5003] 
U8G_SECTION
(".progmem.u8g_font_timB24r") = {

76542 
	~"u8g.h
"

76543 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR08
[2512] 
U8G_SECTION
(".progmem.u8g_font_timR08") = {

76713 
	~"u8g.h
"

76714 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR08r
[1198] 
U8G_SECTION
(".progmem.u8g_font_timR08r") = {

76801 
	~"u8g.h
"

76802 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR10
[3359] 
U8G_SECTION
(".progmem.u8g_font_timR10") = {

77024 
	~"u8g.h
"

77025 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR10r
[1571] 
U8G_SECTION
(".progmem.u8g_font_timR10r") = {

77136 
	~"u8g.h
"

77137 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR12
[3905] 
U8G_SECTION
(".progmem.u8g_font_timR12") = {

77394 
	~"u8g.h
"

77395 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR12r
[1784] 
U8G_SECTION
(".progmem.u8g_font_timR12r") = {

77519 
	~"u8g.h
"

77520 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR14
[4577] 
U8G_SECTION
(".progmem.u8g_font_timR14") = {

77819 
	~"u8g.h
"

77820 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR14r
[2156] 
U8G_SECTION
(".progmem.u8g_font_timR14r") = {

77967 
	~"u8g.h
"

77968 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR18
[6850] 
U8G_SECTION
(".progmem.u8g_font_timR18") = {

78409 
	~"u8g.h
"

78410 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR18r
[3208] 
U8G_SECTION
(".progmem.u8g_font_timR18r") = {

78623 
	~"u8g.h
"

78624 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR24
[10419] 
U8G_SECTION
(".progmem.u8g_font_timR24") = {

79288 
	~"u8g.h
"

79289 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR24n
[696] 
U8G_SECTION
(".progmem.u8g_font_timR24n") = {

79345 
	~"u8g.h
"

79346 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR24r
[4764] 
U8G_SECTION
(".progmem.u8g_font_timR24r") = {

79656 
	~"u8g.h
"

79657 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_çssb
[2656] 
U8G_SECTION
(".progmem.u8g_font_tpssb") = {

79836 
	~"u8g.h
"

79837 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_çssbn
[230] 
U8G_SECTION
(".progmem.u8g_font_tpssbn") = {

79864 
	~"u8g.h
"

79865 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_çssbr
[1346] 
U8G_SECTION
(".progmem.u8g_font_tpssbr") = {

79962 
	~"u8g.h
"

79963 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_çss
[2605] 
U8G_SECTION
(".progmem.u8g_font_tpss") = {

80138 
	~"u8g.h
"

80139 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_çs¢
[228] 
U8G_SECTION
(".progmem.u8g_font_tpssn") = {

80166 
	~"u8g.h
"

80167 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_çs§
[1317] 
U8G_SECTION
(".progmem.u8g_font_tpssr") = {

80262 
	~"u8g.h
"

80263 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_åixñ_squ¨e
[1236] 
U8G_SECTION
(".progmem.u8g_font_trixel_square") = {

80353 
	~"u8g.h
"

80354 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_åixñ_squ¨í
[178] 
U8G_SECTION
(".progmem.u8g_font_trixel_squaren") = {

80378 
	~"u8g.h
"

80379 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_åixñ_squ¨î
[994] 
U8G_SECTION
(".progmem.u8g_font_trixel_squarer") = {

80454 
	~"u8g.h
"

80455 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_u8glib_4
[1660] 
U8G_SECTION
(".progmem.u8g_font_u8glib_4") = {

80571 
	~"u8g.h
"

80572 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_u8glib_4r
[664] 
U8G_SECTION
(".progmem.u8g_font_u8glib_4r") = {

80626 
	~"u8g.h
"

80627 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_0_8
[4239] 
U8G_SECTION
(".progmem.u8g_font_unifont_0_8") = {

80904 
	~"u8g.h
"

80905 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_12_13
[3934] 
U8G_SECTION
(".progmem.u8g_font_unifont_12_13") = {

81163 
	~"u8g.h
"

81164 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_18_19
[6498] 
U8G_SECTION
(".progmem.u8g_font_unifont_18_19") = {

81583 
	~"u8g.h
"

81584 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_2_3
[4628] 
U8G_SECTION
(".progmem.u8g_font_unifont_2_3") = {

81886 
	~"u8g.h
"

81887 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_4_5
[3783] 
U8G_SECTION
(".progmem.u8g_font_unifont_4_5") = {

82136 
	~"u8g.h
"

82137 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_67_75
[3556] 
U8G_SECTION
(".progmem.u8g_font_unifont_67_75") = {

82372 
	~"u8g.h
"

82373 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_72_73
[7240] 
U8G_SECTION
(".progmem.u8g_font_unifont_72_73") = {

82838 
	~"u8g.h
"

82839 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_75r
[580] 
U8G_SECTION
(".progmem.u8g_font_unifont_75r") = {

82888 
	~"u8g.h
"

82889 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_76
[2532] 
U8G_SECTION
(".progmem.u8g_font_unifont_76") = {

83060 
	~"u8g.h
"

83061 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_77
[1587] 
U8G_SECTION
(".progmem.u8g_font_unifont_77") = {

83173 
	~"u8g.h
"

83174 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_78_79
[6975] 
U8G_SECTION
(".progmem.u8g_font_unifont_78_79") = {

83622 
	~"u8g.h
"

83623 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_86
[1876] 
U8G_SECTION
(".progmem.u8g_font_unifont_86") = {

83753 
	~"u8g.h
"

83754 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_8_9
[4272] 
U8G_SECTION
(".progmem.u8g_font_unifont_8_9") = {

84034 
	~"u8g.h
"

84035 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t
[5516] 
U8G_SECTION
(".progmem.u8g_font_unifont") = {

84392 
	~"u8g.h
"

84393 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄å
[1483] 
U8G_SECTION
(".progmem.u8g_font_unifontr") = {

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_line.c

36 
	~"u8g.h
"

38 
	$u8g_DøwLöe
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x1
, u8g_uöt_à
y1
, u8g_uöt_à
x2
, u8g_uöt_à
y2
)

40 
u8g_uöt_t
 
tmp
;

41 
u8g_uöt_t
 
x
,
y
;

42 
u8g_uöt_t
 
dx
, 
dy
;

43 
u8g_öt_t
 
îr
;

44 
u8g_öt_t
 
y°ï
;

46 
uöt8_t
 
sw≠xy
 = 0;

50 i‡–
x1
 > 
x2
 ) 
dx
 = x1-x2; dx = x2-x1;

51 i‡–
y1
 > 
y2
 ) 
dy
 = y1-y2; dy = y2-y1;

53 i‡–
dy
 > 
dx
 )

55 
sw≠xy
 = 1;

56 
tmp
 = 
dx
; dx =
dy
; dy =Åmp;

57 
tmp
 = 
x1
; x1 =
y1
; y1 =Åmp;

58 
tmp
 = 
x2
; x2 =
y2
; y2 =Åmp;

60 i‡–
x1
 > 
x2
 )

62 
tmp
 = 
x1
; x1 =
x2
; x2 =Åmp;

63 
tmp
 = 
y1
; y1 =
y2
; y2 =Åmp;

65 
îr
 = 
dx
 >> 1;

66 i‡–
y2
 > 
y1
 ) 
y°ï
 = 1; ystep = -1;

67 
y
 = 
y1
;

68  
x
 = 
x1
; x <
x2
; x++ )

70 i‡–
sw≠xy
 == 0 )

71 
	`u8g_DøwPixñ
(
u8g
, 
x
, 
y
);

73 
	`u8g_DøwPixñ
(
u8g
, 
y
, 
x
);

74 
îr
 -(
uöt8_t
)
dy
;

75 i‡–
îr
 < 0 )

77 
y
 +(
u8g_uöt_t
)
y°ï
;

78 
îr
 +(
u8g_uöt_t
)
dx
;

81 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_ll_api.c

39 
	~<°ddef.h
>

40 
	~"u8g.h
"

42 
uöt8_t
 
	$u8g_ˇŒ_dev_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

44  
dev
->
	`dev_‚
(
u8g
, dev, 
msg
, 
¨g
);

45 
	}
}

49 
uöt8_t
 
	$u8g_InôLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

51 
uöt8_t
 
r
;

52 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_BACKUP_ENV
);

53 
r
 = 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_INIT
, 
NULL
);

54 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_BACKUP_U8G
);

55 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_RESTORE_ENV
);

56  
r
;

57 
	}
}

59 
	$u8g_Fú°PageLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

61 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_BACKUP_ENV
);

62 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_RESTORE_U8G
);

63 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_PAGE_FIRST
, 
NULL
);

64 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_GET_PAGE_BOX
, &(u8g->
cuºít_∑ge
));

65 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_RESTORE_ENV
);

66 
	}
}

68 
uöt8_t
 
	$u8g_NextPageLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

70 
uöt8_t
 
r
;

71 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_BACKUP_ENV
);

72 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_RESTORE_U8G
);

73 
r
 = 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_PAGE_NEXT
, 
NULL
);

74 i‡–
r
 != 0 )

76 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_GET_PAGE_BOX
, &(u8g->
cuºít_∑ge
));

78 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_RESTORE_ENV
);

79  
r
;

80 
	}
}

82 
uöt8_t
 
	$u8g_SëC⁄åa°LL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
c⁄åa°
)

84  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_CONTRAST
, &
c⁄åa°
);

85 
	}
}

87 
	$u8g_DøwPixñLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
)

89 
u8g_dev_¨g_pixñ_t
 *
¨g
 = &(
u8g
->
¨g_pixñ
);

90 
¨g
->
x
 = x;

91 
¨g
->
y
 = y;

92 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_SET_PIXEL
, 
¨g
);

93 
	}
}

95 
	$u8g_Døw8PixñLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
pixñ
)

97 
u8g_dev_¨g_pixñ_t
 *
¨g
 = &(
u8g
->
¨g_pixñ
);

98 
¨g
->
x
 = x;

99 
¨g
->
y
 = y;

100 
¨g
->
dú
 = dir;

101 
¨g
->
pixñ
 =Öixel;

102 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_SET_8PIXEL
, 
¨g
);

103 
	}
}

105 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


106 
uöt8_t
 
	$u8g_IsBBXI¡î£˘i⁄LL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
)

108  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_IS_BBX_INTERSECTION
, &
¨g
);

109 
	}
}

114 
u8g_uöt_t
 
	$u8g_GëWidthLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

116 
u8g_uöt_t
 
r
;

117 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_GET_WIDTH
, &
r
);

118  
r
;

119 
	}
}

121 
u8g_uöt_t
 
	$u8g_GëHeightLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

123 
u8g_uöt_t
 
r
;

124 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_GET_HEIGHT
, &
r
);

125  
r
;

126 
	}
}

128 
u8g_uöt_t
 
	$u8g_GëModeLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

130  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_GET_MODE
, 
NULL
);

131 
	}
}

137 
	$u8g_Upd©eDimísi⁄
(
u8g_t
 *
u8g
)

139 
u8g
->
width
 = 
	`u8g_GëWidthLL
(u8g, u8g->
dev
);

140 
u8g
->
height
 = 
	`u8g_GëHeightLL
(u8g, u8g->
dev
);

141 
u8g
->
mode
 = 
	`u8g_GëModeLL
(u8g, u8g->
dev
);

143 
	`u8g_ˇŒ_dev_‚
(
u8g
, u8g->
dev
, 
U8G_DEV_MSG_GET_PAGE_BOX
, &(u8g->
cuºít_∑ge
));

144 
	}
}

146 
	$u8g_öô_d©a
(
u8g_t
 *
u8g
)

148 
uöt8_t
 
i
;

149 
u8g
->
f⁄t
 = 
NULL
;

150 
u8g
->
curs‹_f⁄t
 = 
NULL
;

151 
u8g
->
curs‹_bg_cﬁ‹
 = 0;

152 
u8g
->
curs‹_fg_cﬁ‹
 = 1;

153 
u8g
->
curs‹_ícodög
 = 34;

154 
u8g
->
curs‹_‚
 = (
u8g_døw_curs‹_‚
)0;

156  
i
 = 0; i < 
U8G_PIN_LIST_LEN
; i++ )

157 
u8g
->
pö_li°
[
i
] = 
U8G_PIN_NONE
;

159 
	`u8g_SëCﬁ‹Index
(
u8g
, 1);

161 
	`u8g_SëF⁄tPosBa£löe
(
u8g
);

163 
u8g
->
f⁄t_height_mode
 = 
U8G_FONT_HEIGHT_MODE_XTEXT
;

164 
u8g
->
f⁄t_ªf_as˚¡
 = 0;

165 
u8g
->
f⁄t_ªf_des˚¡
 = 0;

166 
u8g
->
f⁄t_löe_•acög_Á˘‹
 = 64;

167 
u8g
->
löe_•acög
 = 0;

169 
u8g
->
°©e_cb
 = 
u8g_°©e_dummy_cb
;

171 
	}
}

173 
uöt8_t
 
	$u8g_Begö
(
u8g_t
 *
u8g
)

176 i‡–
	`u8g_InôLL
(
u8g
, u8g->
dev
) == 0 )

179 
	`u8g_Upd©eDimísi⁄
(
u8g
);

181 
	}
}

183 
uöt8_t
 
	$u8g_Inô
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

185 
	`u8g_öô_d©a
(
u8g
);

186 
u8g
->
dev
 = dev;

192  
	`u8g_Begö
(
u8g
);

193 
	}
}

195 
uöt8_t
 
	$u8g_InôSPI
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
)

199 
	`u8g_öô_d©a
(
u8g
);

200 
u8g
->
dev
 = dev;

203 
u8g
->
pö_li°
[
U8G_PI_SCK
] = 
sck
;

204 
u8g
->
pö_li°
[
U8G_PI_MOSI
] = 
mosi
;

205 
u8g
->
pö_li°
[
U8G_PI_CS
] = 
cs
;

206 
u8g
->
pö_li°
[
U8G_PI_A0
] = 
a0
;

207 
u8g
->
pö_li°
[
U8G_PI_RESET
] = 
ª£t
;

213  
	`u8g_Begö
(
u8g
);

214 
	}
}

216 
uöt8_t
 
	$u8g_InôHWSPI
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
)

219 
	`u8g_öô_d©a
(
u8g
);

220 
u8g
->
dev
 = dev;

224 
u8g
->
pö_li°
[
U8G_PI_CS
] = 
cs
;

225 
u8g
->
pö_li°
[
U8G_PI_A0
] = 
a0
;

226 
u8g
->
pö_li°
[
U8G_PI_RESET
] = 
ª£t
;

228  
	`u8g_Begö
(
u8g
);

229 
	}
}

231 
uöt8_t
 
	$u8g_InôI2C
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
›ti⁄s
)

234 
	`u8g_öô_d©a
(
u8g
);

235 
u8g
->
dev
 = dev;

237 
u8g
->
pö_li°
[
U8G_PI_I2C_OPTION
] = 
›ti⁄s
;

239  
	`u8g_Begö
(
u8g
);

240 
	}
}

243 
uöt8_t
 
	$u8g_Inô8BôFixedP‹t
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
í
, uöt8_à
cs
, uöt8_à
di
, uöt8_à
rw
, uöt8_à
ª£t
)

247 
	`u8g_öô_d©a
(
u8g
);

248 
u8g
->
dev
 = dev;

252 
u8g
->
pö_li°
[
U8G_PI_EN
] = 
í
;

253 
u8g
->
pö_li°
[
U8G_PI_CS
] = 
cs
;

254 
u8g
->
pö_li°
[
U8G_PI_DI
] = 
di
;

255 
u8g
->
pö_li°
[
U8G_PI_RW
] = 
rw
;

256 
u8g
->
pö_li°
[
U8G_PI_RESET
] = 
ª£t
;

258  
	`u8g_Begö
(
u8g
);

259 
	}
}

261 
uöt8_t
 
	$u8g_Inô8Bô
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

262 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
, uöt8_à
ª£t
)

266 
	`u8g_öô_d©a
(
u8g
);

267 
u8g
->
dev
 = dev;

271 
u8g
->
pö_li°
[
U8G_PI_D0
] = 
d0
;

272 
u8g
->
pö_li°
[
U8G_PI_D1
] = 
d1
;

273 
u8g
->
pö_li°
[
U8G_PI_D2
] = 
d2
;

274 
u8g
->
pö_li°
[
U8G_PI_D3
] = 
d3
;

275 
u8g
->
pö_li°
[
U8G_PI_D4
] = 
d4
;

276 
u8g
->
pö_li°
[
U8G_PI_D5
] = 
d5
;

277 
u8g
->
pö_li°
[
U8G_PI_D6
] = 
d6
;

278 
u8g
->
pö_li°
[
U8G_PI_D7
] = 
d7
;

280 
u8g
->
pö_li°
[
U8G_PI_EN
] = 
í
;

281 
u8g
->
pö_li°
[
U8G_PI_CS1
] = 
cs1
;

282 
u8g
->
pö_li°
[
U8G_PI_CS2
] = 
cs2
;

283 
u8g
->
pö_li°
[
U8G_PI_DI
] = 
di
;

284 
u8g
->
pö_li°
[
U8G_PI_RW
] = 
rw
;

285 
u8g
->
pö_li°
[
U8G_PI_RESET
] = 
ª£t
;

287  
	`u8g_Begö
(
u8g
);

288 
	}
}

312 
uöt8_t
 
	$u8g_InôRW8Bô
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

313 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
wr
, uöt8_à
rd
, uöt8_à
ª£t
)

317 
	`u8g_öô_d©a
(
u8g
);

318 
u8g
->
dev
 = dev;

322 
u8g
->
pö_li°
[
U8G_PI_D0
] = 
d0
;

323 
u8g
->
pö_li°
[
U8G_PI_D1
] = 
d1
;

324 
u8g
->
pö_li°
[
U8G_PI_D2
] = 
d2
;

325 
u8g
->
pö_li°
[
U8G_PI_D3
] = 
d3
;

326 
u8g
->
pö_li°
[
U8G_PI_D4
] = 
d4
;

327 
u8g
->
pö_li°
[
U8G_PI_D5
] = 
d5
;

328 
u8g
->
pö_li°
[
U8G_PI_D6
] = 
d6
;

329 
u8g
->
pö_li°
[
U8G_PI_D7
] = 
d7
;

331 
u8g
->
pö_li°
[
U8G_PI_CS
] = 
cs
;

332 
u8g
->
pö_li°
[
U8G_PI_A0
] = 
a0
;

333 
u8g
->
pö_li°
[
U8G_PI_WR
] = 
wr
;

334 
u8g
->
pö_li°
[
U8G_PI_RD
] = 
rd
;

335 
u8g
->
pö_li°
[
U8G_PI_RESET
] = 
ª£t
;

337  
	`u8g_Begö
(
u8g
);

338 
	}
}

340 
	$u8g_Fú°Page
(
u8g_t
 *
u8g
)

342 
	`u8g_Fú°PageLL
(
u8g
, u8g->
dev
);

343 
	}
}

345 
uöt8_t
 
	$u8g_NextPage
(
u8g_t
 *
u8g
)

347 i‡–
u8g
->
curs‹_‚
 !(
u8g_døw_curs‹_‚
)0 )

349 
u8g
->
	`curs‹_‚
(u8g);

351  
	`u8g_NextPageLL
(
u8g
, u8g->
dev
);

352 
	}
}

354 
uöt8_t
 
	$u8g_SëC⁄åa°
(
u8g_t
 *
u8g
, 
uöt8_t
 
c⁄åa°
)

356  
	`u8g_SëC⁄åa°LL
(
u8g
, u8g->
dev
, 
c⁄åa°
);

357 
	}
}

359 
	$u8g_SÀïOn
(
u8g_t
 *
u8g
)

361 
	`u8g_ˇŒ_dev_‚
(
u8g
, u8g->
dev
, 
U8G_DEV_MSG_SLEEP_ON
, 
NULL
);

362 
	}
}

364 
	$u8g_SÀïOff
(
u8g_t
 *
u8g
)

366 
	`u8g_ˇŒ_dev_‚
(
u8g
, u8g->
dev
, 
U8G_DEV_MSG_SLEEP_OFF
, 
NULL
);

367 
	}
}

370 
	$u8g_DøwPixñ
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
)

372 
	`u8g_DøwPixñLL
(
u8g
, u8g->
dev
, 
x
, 
y
);

373 
	}
}

375 
	$u8g_Døw8Pixñ
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
pixñ
)

377 
	`u8g_Døw8PixñLL
(
u8g
, u8g->
dev
, 
x
, 
y
, 
dú
, 
pixñ
);

378 
	}
}

381 #ifde‡
OBSOLETE_CODE


382 
uöt8_t
 
	$u8g_IsBBXI¡î£˘i⁄
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
)

385 
u8g_dev_¨g_bbx_t
 
¨g
;

386 
¨g
.
x
 = x;

387 
¨g
.
y
 = y;

388 
¨g
.
w
 = w;

389 
¨g
.
h
 = h;

390  
	`u8g_is_box_bbx_öãr£˘i⁄
(&(
u8g
->
cuºít_∑ge
), &
¨g
);

394 
	}
}

397 
	$u8g_SëCﬁ‹Index
(
u8g_t
 *
u8g
, 
uöt8_t
 
idx
)

399 
u8g
->
¨g_pixñ
.
cﬁ‹
 = 
idx
;

401 
	}
}

403 
uöt8_t
 
	$u8g_GëCﬁ‹Index
(
u8g_t
 *
u8g
)

405  
u8g
->
¨g_pixñ
.
cﬁ‹
;

406 
	}
}

408 
uöt8_t
 
	$u8g_GëDeÁu…F‹egroundCﬁ‹
(
u8g_t
 *
u8g
)

410 
uöt8_t
 
mode
;

411 
mode
 = 
	`u8g_GëMode
(
u8g
);

412 i‡–
mode
 =
U8G_MODE_R3G3B2
 )

414 i‡–
	`u8g_GëMode
(
u8g
Ë=
U8G_MODE_GRAY2BIT
 )

419 
	}
}

421 
	$u8g_SëDeÁu…F‹egroundCﬁ‹
(
u8g_t
 *
u8g
)

423 
	`u8g_SëCﬁ‹Index
(
u8g
, 
	`u8g_GëDeÁu…F‹egroundCﬁ‹
(u8g));

424 
	}
}

426 
uöt8_t
 
	$u8g_GëDeÁu…BackgroundCﬁ‹
(
u8g_t
 *
u8g
)

429 
	}
}

431 
	$u8g_SëDeÁu…BackgroundCﬁ‹
(
u8g_t
 *
u8g
)

433 
	`u8g_SëCﬁ‹Index
(
u8g
, 
	`u8g_GëDeÁu…BackgroundCﬁ‹
(u8g));

434 
	}
}

436 
uöt8_t
 
	$u8g_GëDeÁu…MidCﬁ‹
(
u8g_t
 *
u8g
)

438 
uöt8_t
 
mode
;

439 
mode
 = 
	`u8g_GëMode
(
u8g
);

440 i‡–
mode
 =
U8G_MODE_R3G3B2
 )

442 i‡–
	`u8g_GëMode
(
u8g
Ë=
U8G_MODE_GRAY2BIT
 )

447 
	}
}

449 
	$u8g_SëDeÁu…MidCﬁ‹
(
u8g_t
 *
u8g
)

451 
	`u8g_SëCﬁ‹Index
(
u8g
, 
	`u8g_GëDeÁu…MidCﬁ‹
(u8g));

452 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_page.c

39 
	~"u8g.h
"

45 
	$u8g_∑ge_Inô
(
u8g_∑ge_t
 *
p
, 
u8g_uöt_t
 
∑ge_height
, u8g_uöt_à
tŸÆ_height
 )

47 
p
->
∑ge_height
 =Öage_height;

48 
p
->
tŸÆ_height
 =Åotal_height;

49 
p
->
∑ge
 = 0;

50 
	`u8g_∑ge_Fú°
(
p
);

51 
	}
}

53 
	$u8g_∑ge_Fú°
(
u8g_∑ge_t
 *
p
)

55 
p
->
∑ge_y0
 = 0;

56 
p
->
∑ge_y1
 =Ö->
∑ge_height
;

57 
p
->
∑ge_y1
--;

58 
p
->
∑ge
 = 0;

59 
	}
}

61 
uöt8_t
 
	$u8g_∑ge_Next
(
u8g_∑ge_t
 * 
p
)

63 
u8g_uöt_t
 
y1
;

64 
p
->
∑ge_y0
 +p->
∑ge_height
;

65 i‡–
p
->
∑ge_y0
 >p->
tŸÆ_height
 )

67 
p
->
∑ge
++;

68 
y1
 = 
p
->
∑ge_y1
;

69 
y1
 +
p
->
∑ge_height
;

70 i‡–
y1
 >
p
->
tŸÆ_height
 )

72 
y1
 = 
p
->
tŸÆ_height
;

73 
y1
--;

75 
p
->
∑ge_y1
 = 
y1
;

78 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_pb.c

39 
	~"u8g.h
"

41 
	$u8g_pb_CÀ¨
(
u8g_pb_t
 *
b
)

43 
uöt8_t
 *
±r
 = (uöt8_à*)
b
->
buf
;

44 
uöt8_t
 *
íd_±r
 = 
±r
;

45 
íd_±r
 +
b
->
width
;

48 *
±r
++ = 0;

49 }  
±r
 !
íd_±r
 );

50 
	}
}

90 
uöt8_t
 
	$u8g_pb_IsYI¡î£˘i⁄
(
u8g_pb_t
 *
pb
, 
u8g_uöt_t
 
v0
, u8g_uöt_à
v1
)

92 
uöt8_t
 
c1
, 
c2
, 
c3
, 
tmp
;

93 
c1
 = 
v0
 <
pb
->
p
.
∑ge_y1
;

94 
c2
 = 
v1
 >
pb
->
p
.
∑ge_y0
;

95 
c3
 = 
v0
 > 
v1
;

106 
tmp
 = 
c1
;

107 
c1
 &
c2
;

108 
c2
 &
c3
;

109 
c3
 &
tmp
;

110 
c1
 |
c2
;

111 
c1
 |
c3
;

112  
c1
 & 1;

113 
	}
}

116 
uöt8_t
 
	$u8g_pb_IsXI¡î£˘i⁄
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
v0
, u8g_uöt_à
v1
)

118 
uöt8_t
 
c2
, 
c3
;

127 
c2
 = 
v0
 > 
b
->
width
;

128 
c3
 = 
v1
 > 
b
->
width
;

130 i‡–
c2
 && 
c3
 )  0;

133 
	}
}

135 
uöt8_t
 
	$u8g_pb_IsI¡î£˘i⁄
(
u8g_pb_t
 *
pb
, 
u8g_dev_¨g_bbx_t
 *
bbx
)

137 
u8g_uöt_t
 
tmp
;

139 
tmp
 = 
bbx
->
y
;

140 
tmp
 +
bbx
->
h
;

141 
tmp
--;

143 i‡–
	`u8g_pb_IsYI¡î£˘i⁄
(
pb
, 
bbx
->
y
, 
tmp
) == 0 )

147 
tmp
 = 
bbx
->
x
;

148 
tmp
 +
bbx
->
w
;

149 
tmp
--;

151  
	`u8g_pb_IsXI¡î£˘i⁄
(
pb
, 
bbx
->
x
, 
tmp
);

152 
	}
}

154 
	$u8g_pb_GëPageBox
(
u8g_pb_t
 *
pb
, 
u8g_box_t
 *
box
)

156 
box
->
x0
 = 0;

157 
box
->
y0
 = 
pb
->
p
.
∑ge_y0
;

158 
box
->
x1
 = 
pb
->
width
;

159 
box
->
x1
--;

160 
box
->
y1
 = 
pb
->
p
.
∑ge_y1
;

161 
	}
}

164 
uöt8_t
 
	$u8g_pb_Is8PixñVisibÀ
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

166 
u8g_uöt_t
 
v0
, 
v1
;

167 
v0
 = 
¨g_pixñ
->
y
;

168 
v1
 = 
v0
;

169  
¨g_pixñ
->
dú
 )

174 
v1
 += 8;

179 
v0
 -= 8;

182  
	`u8g_pb_IsYI¡î£˘i⁄
(
b
, 
v0
, 
v1
);

183 
	}
}

187 
uöt8_t
 
	$u8g_pb_WrôeBuf„r
(
u8g_pb_t
 *
b
, 
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

189  
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
b
->
width
, b->
buf
);

190 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_pb14v1.c

40 
	~"u8g.h
"

41 
	~<°rög.h
>

44 
	$u8g_pb14v1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
Ë
U8G_NOINLINE
;

45 
	$u8g_pb14v1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

46 
	$u8g_pb14v1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
Ë
U8G_NOINLINE
 ;

47 
	$u8g_pb14v1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
Ë
U8G_NOINLINE
;

50 
	$u8g_pb14v1_CÀ¨
(
u8g_pb_t
 *
b
)

52 
uöt8_t
 *
±r
 = (uöt8_à*)
b
->
buf
;

53 
uöt8_t
 *
íd_±r
 = 
±r
;

54 
íd_±r
 +
b
->
width
*2;

57 *
±r
++ = 0;

58 }  
±r
 !
íd_±r
 );

59 
	}
}

62 
	$u8g_pb14v1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

64 
b
->
buf
 = buf;

65 
b
->
width
 = width;

66 
	`u8g_pb14v1_CÀ¨
(
b
);

67 
	}
}

69 
	$u8g_pb14v1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

71 
uöt8_t
 
mask
;

72 
uöt8_t
 *
±r
 = 
b
->
buf
;

74 
y
 -
b
->
p
.
∑ge_y0
;

75 i‡–
y
 >= 7 )

77 
±r
 +
b
->
width
;

78 
y
 -= 7;

80 
mask
 = 1;

81 
mask
 <<
y
;

82 
±r
 +
x
;

83 i‡–
cﬁ‹_ödex
 )

85 *
±r
 |
mask
;

89 
mask
 ^=0xff;

90 *
±r
 &
mask
;

92 
	}
}

95 
	$u8g_pb14v1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

97 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

99 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

101 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

103 
	`u8g_pb14v1_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

104 
	}
}

106 
	$u8g_pb14v1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

108 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

111 i‡–
pixñ
 & 128 )

113 
	`u8g_pb14v1_SëPixñ
(
b
, 
¨g_pixñ
);

115  
¨g_pixñ
->
dú
 )

117 0: 
¨g_pixñ
->
x
++; ;

118 1: 
¨g_pixñ
->
y
++; ;

119 2: 
¨g_pixñ
->
x
--; ;

120 3: 
¨g_pixñ
->
y
--; ;

122 
pixñ
 <<= 1;

123 }  
pixñ
 != 0 );

124 
	}
}

127 
	$u8g_pb14v1_Së8PixñO±2
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

129 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

130 
u8g_uöt_t
 
dx
 = 0;

131 
u8g_uöt_t
 
dy
 = 0;

133  
¨g_pixñ
->
dú
 )

135 0: 
dx
++; ;

136 1: 
dy
++; ;

137 2: 
dx
--; ;

138 3: 
dy
--; ;

143 i‡–
pixñ
 & 128 )

144 
	`u8g_pb14v1_SëPixñ
(
b
, 
¨g_pixñ
);

145 
¨g_pixñ
->
x
 +
dx
;

146 
¨g_pixñ
->
y
 +
dy
;

147 
pixñ
 <<= 1;

148 }  
pixñ
 != 0 );

150 
	}
}

152 
uöt8_t
 
	$u8g_dev_pb14v1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

154 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

155 
msg
)

157 
U8G_DEV_MSG_SET_8PIXEL
:

158 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

159 
	`u8g_pb14v1_Së8PixñO±2
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

161 
U8G_DEV_MSG_SET_PIXEL
:

162 
	`u8g_pb14v1_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

164 
U8G_DEV_MSG_INIT
:

166 
U8G_DEV_MSG_STOP
:

168 
U8G_DEV_MSG_PAGE_FIRST
:

169 
	`u8g_pb14v1_CÀ¨
(
pb
);

170 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

172 
U8G_DEV_MSG_PAGE_NEXT
:

173 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

175 
	`u8g_pb14v1_CÀ¨
(
pb
);

177 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


178 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

179  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

181 
U8G_DEV_MSG_GET_PAGE_BOX
:

182 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

184 
U8G_DEV_MSG_GET_WIDTH
:

185 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

187 
U8G_DEV_MSG_GET_HEIGHT
:

188 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

190 
U8G_DEV_MSG_SET_COLOR_INDEX
:

192 
U8G_DEV_MSG_SET_XY_CB
:

194 
U8G_DEV_MSG_GET_MODE
:

195  
U8G_MODE_BW
;

198 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_pb16h1.c

43 
	~"u8g.h
"

44 
	~<°rög.h
>

47 
	$u8g_pb16h1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
Ë
U8G_NOINLINE
;

48 
	$u8g_pb16h1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

49 
	$u8g_pb16h1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
Ë
U8G_NOINLINE
 ;

50 
	$u8g_pb16h1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
Ë
U8G_NOINLINE
;

51 
uöt8_t
 
	`u8g_dev_pb8h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

53 
	$u8g_pb16h1_CÀ¨
(
u8g_pb_t
 *
b
)

55 
uöt8_t
 *
±r
 = (uöt8_à*)
b
->
buf
;

56 
uöt8_t
 *
íd_±r
 = 
±r
;

57 
íd_±r
 +
b
->
width
*2;

60 *
±r
++ = 0;

61 }  
±r
 !
íd_±r
 );

62 
	}
}

66 
	$u8g_pb16h1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

68 
b
->
buf
 = buf;

69 
b
->
width
 = width;

70 
	`u8g_pb16h1_CÀ¨
(
b
);

71 
	}
}

75 
	$u8g_pb16h1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

77 
uöt8_t
 
mask
;

78 
u8g_uöt_t
 
tmp
;

79 
uöt8_t
 *
±r
 = 
b
->
buf
;

81 
y
 -
b
->
p
.
∑ge_y0
;

82 i‡–
y
 >= 8 )

84 
±r
 +
b
->
width
;

85 
y
 &= 0x07;

87 
tmp
 = 
b
->
width
;

88 
tmp
 >>= 3;

89 
tmp
 *(
uöt8_t
)
y
;

90 
±r
 +
tmp
;

92 
mask
 = 0x080;

93 
mask
 >>
x
 & 7;

94 
x
 >>= 3;

95 
±r
 +
x
;

96 i‡–
cﬁ‹_ödex
 )

98 *
±r
 |
mask
;

102 
mask
 ^=0xff;

103 *
±r
 &
mask
;

106 
	}
}

109 
	$u8g_pb16h1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

111 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

113 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

115 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

117 
	`u8g_pb16h1_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

118 
	}
}

120 
	$u8g_pb16h1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

122 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

125 i‡–
pixñ
 & 128 )

127 
	`u8g_pb16h1_SëPixñ
(
b
, 
¨g_pixñ
);

129  
¨g_pixñ
->
dú
 )

131 0: 
¨g_pixñ
->
x
++; ;

132 1: 
¨g_pixñ
->
y
++; ;

133 2: 
¨g_pixñ
->
x
--; ;

134 3: 
¨g_pixñ
->
y
--; ;

136 
pixñ
 <<= 1;

137 }  
pixñ
 != 0 );

138 
	}
}

140 
	$u8g_pb16h1_Së8PixñO±2
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

142 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

143 
u8g_uöt_t
 
dx
 = 0;

144 
u8g_uöt_t
 
dy
 = 0;

146  
¨g_pixñ
->
dú
 )

148 0: 
dx
++; ;

149 1: 
dy
++; ;

150 2: 
dx
--; ;

151 3: 
dy
--; ;

156 i‡–
pixñ
 & 128 )

157 
	`u8g_pb16h1_SëPixñ
(
b
, 
¨g_pixñ
);

158 
¨g_pixñ
->
x
 +
dx
;

159 
¨g_pixñ
->
y
 +
dy
;

160 
pixñ
 <<= 1;

161 }  
pixñ
 != 0 );

162 
	}
}

165 
uöt8_t
 
	$u8g_dev_pb16h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

167 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

168 
msg
)

170 
U8G_DEV_MSG_SET_8PIXEL
:

171 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

172 
	`u8g_pb16h1_Së8PixñO±2
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

174 
U8G_DEV_MSG_SET_PIXEL
:

175 
	`u8g_pb16h1_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

177 
U8G_DEV_MSG_INIT
:

179 
U8G_DEV_MSG_STOP
:

181 
U8G_DEV_MSG_PAGE_FIRST
:

182 
	`u8g_pb16h1_CÀ¨
(
pb
);

183 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

185 
U8G_DEV_MSG_PAGE_NEXT
:

186 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

188 
	`u8g_pb16h1_CÀ¨
(
pb
);

190 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


191 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

192  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

194 
U8G_DEV_MSG_GET_PAGE_BOX
:

195 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

197 
U8G_DEV_MSG_GET_WIDTH
:

198 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

200 
U8G_DEV_MSG_GET_HEIGHT
:

201 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

203 
U8G_DEV_MSG_SET_COLOR_INDEX
:

205 
U8G_DEV_MSG_SET_XY_CB
:

207 
U8G_DEV_MSG_GET_MODE
:

208  
U8G_MODE_BW
;

211 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_pb16h2.c

40 
	~"u8g.h
"

41 
	~<°rög.h
>

43 
	$u8g_pb16h2_CÀ¨
(
u8g_pb_t
 *
b
)

45 
uöt8_t
 *
±r
 = (uöt8_à*)
b
->
buf
;

46 
uöt8_t
 *
íd_±r
 = 
±r
;

49 
íd_±r
 +
b
->
width
;

50 
íd_±r
 +
b
->
width
;

54 *
±r
++ = 0;

55 }  
±r
 !
íd_±r
 );

56 
	}
}

58 
	$u8g_pb16h2_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

60 
b
->
buf
 = buf;

61 
b
->
width
 = width;

62 
	`u8g_pb16h2_CÀ¨
(
b
);

63 
	}
}

65 
	$u8g_pb16h2_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

66 
	$u8g_pb16h2_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

68 
uöt8_t
 
mask
;

69 
uöt16_t
 
tmp
;

71 
uöt8_t
 *
±r
 = 
b
->
buf
;

73 
y
 -
b
->
p
.
∑ge_y0
;

75 
tmp
 = 
b
->
width
;

76 
tmp
 >>= 2;

77 
tmp
 *(
uöt8_t
)
y
;

78 
±r
 +
tmp
;

80 
tmp
 = 
x
;

81 
tmp
 >>= 2;

82 
±r
 +
tmp
;

84 
tmp
 = 
x
;

85 
tmp
 &= 3;

86 
tmp
 <<= 1;

87 
mask
 = 3;

88 
mask
 <<
tmp
;

89 
mask
 = ~mask;

90 
cﬁ‹_ödex
 &= 3;

91 
cﬁ‹_ödex
 <<
tmp
;

93 *
±r
 &
mask
;

94 *
±r
 |
cﬁ‹_ödex
;

95 
	}
}

98 
	$u8g_pb16h2_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

100 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

102 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

104 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

106 
	`u8g_pb16h2_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

107 
	}
}

110 
	$u8g_pb16h2_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

112 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

115 i‡–
pixñ
 & 128 )

117 
	`u8g_pb16h2_SëPixñ
(
b
, 
¨g_pixñ
);

119  
¨g_pixñ
->
dú
 )

121 0: 
¨g_pixñ
->
x
++; ;

122 1: 
¨g_pixñ
->
y
++; ;

123 2: 
¨g_pixñ
->
x
--; ;

124 3: 
¨g_pixñ
->
y
--; ;

126 
pixñ
 <<= 1;

127 }  
pixñ
 != 0 );

128 
	}
}

132 
uöt8_t
 
	$u8g_dev_pb16h2_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

134 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

135 
msg
)

137 
U8G_DEV_MSG_SET_8PIXEL
:

138 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

140 
	`u8g_pb16h2_Së8PixñStd
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

143 
U8G_DEV_MSG_SET_PIXEL
:

144 
	`u8g_pb16h2_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

146 
U8G_DEV_MSG_INIT
:

148 
U8G_DEV_MSG_STOP
:

150 
U8G_DEV_MSG_PAGE_FIRST
:

151 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

152 
	`u8g_pb16h2_CÀ¨
(
pb
);

154 
U8G_DEV_MSG_PAGE_NEXT
:

155 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

157 
	`u8g_pb16h2_CÀ¨
(
pb
);

159 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


160 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

161  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

163 
U8G_DEV_MSG_GET_PAGE_BOX
:

164 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

166 
U8G_DEV_MSG_GET_WIDTH
:

167 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

169 
U8G_DEV_MSG_GET_HEIGHT
:

170 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

172 
U8G_DEV_MSG_SET_COLOR_INDEX
:

174 
U8G_DEV_MSG_SET_XY_CB
:

176 
U8G_DEV_MSG_GET_MODE
:

177  
U8G_MODE_GRAY2BIT
;

180 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_pb16v1.c

40 
	~"u8g.h
"

41 
	~<°rög.h
>

44 
	$u8g_pb16v1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
Ë
U8G_NOINLINE
;

45 
	$u8g_pb16v1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

46 
	$u8g_pb16v1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
Ë
U8G_NOINLINE
 ;

47 
	$u8g_pb16v1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
Ë
U8G_NOINLINE
;

50 
	$u8g_pb16v1_CÀ¨
(
u8g_pb_t
 *
b
)

52 
uöt8_t
 *
±r
 = (uöt8_à*)
b
->
buf
;

53 
uöt8_t
 *
íd_±r
 = 
±r
;

54 
íd_±r
 +
b
->
width
*2;

57 *
±r
++ = 0;

58 }  
±r
 !
íd_±r
 );

59 
	}
}

62 
	$u8g_pb16v1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

64 
b
->
buf
 = buf;

65 
b
->
width
 = width;

66 
	`u8g_pb16v1_CÀ¨
(
b
);

67 
	}
}

69 
	$u8g_pb16v1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

71 
uöt8_t
 
mask
;

72 
uöt8_t
 *
±r
 = 
b
->
buf
;

74 
y
 -
b
->
p
.
∑ge_y0
;

75 i‡–
y
 >= 8 )

77 
±r
 +
b
->
width
;

78 
y
 &= 0x07;

80 
mask
 = 1;

81 
mask
 <<
y
;

82 
±r
 +
x
;

83 i‡–
cﬁ‹_ödex
 )

85 *
±r
 |
mask
;

89 
mask
 ^=0xff;

90 *
±r
 &
mask
;

92 
	}
}

95 
	$u8g_pb16v1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

97 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

99 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

101 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

103 
	`u8g_pb16v1_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

104 
	}
}

106 
	$u8g_pb16v1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

108 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

111 i‡–
pixñ
 & 128 )

113 
	`u8g_pb16v1_SëPixñ
(
b
, 
¨g_pixñ
);

115  
¨g_pixñ
->
dú
 )

117 0: 
¨g_pixñ
->
x
++; ;

118 1: 
¨g_pixñ
->
y
++; ;

119 2: 
¨g_pixñ
->
x
--; ;

120 3: 
¨g_pixñ
->
y
--; ;

122 
pixñ
 <<= 1;

123 }  
pixñ
 != 0 );

124 
	}
}

127 
	$u8g_pb16v1_Së8PixñO±2
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

129 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

130 
u8g_uöt_t
 
dx
 = 0;

131 
u8g_uöt_t
 
dy
 = 0;

133  
¨g_pixñ
->
dú
 )

135 0: 
dx
++; ;

136 1: 
dy
++; ;

137 2: 
dx
--; ;

138 3: 
dy
--; ;

143 i‡–
pixñ
 & 128 )

144 
	`u8g_pb16v1_SëPixñ
(
b
, 
¨g_pixñ
);

145 
¨g_pixñ
->
x
 +
dx
;

146 
¨g_pixñ
->
y
 +
dy
;

147 
pixñ
 <<= 1;

148 }  
pixñ
 != 0 );

150 
	}
}

152 
uöt8_t
 
	$u8g_dev_pb16v1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

154 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

155 
msg
)

157 
U8G_DEV_MSG_SET_8PIXEL
:

158 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

159 
	`u8g_pb16v1_Së8PixñO±2
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

161 
U8G_DEV_MSG_SET_PIXEL
:

162 
	`u8g_pb16v1_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

164 
U8G_DEV_MSG_INIT
:

166 
U8G_DEV_MSG_STOP
:

168 
U8G_DEV_MSG_PAGE_FIRST
:

169 
	`u8g_pb16v1_CÀ¨
(
pb
);

170 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

172 
U8G_DEV_MSG_PAGE_NEXT
:

173 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

175 
	`u8g_pb16v1_CÀ¨
(
pb
);

177 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


178 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

179  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

181 
U8G_DEV_MSG_GET_PAGE_BOX
:

182 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

184 
U8G_DEV_MSG_GET_WIDTH
:

185 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

187 
U8G_DEV_MSG_GET_HEIGHT
:

188 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

190 
U8G_DEV_MSG_SET_COLOR_INDEX
:

192 
U8G_DEV_MSG_SET_XY_CB
:

194 
U8G_DEV_MSG_GET_MODE
:

195  
U8G_MODE_BW
;

198 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_pb16v2.c

40 
	~"u8g.h
"

41 
	~<°rög.h
>

44 
	$u8g_pb16v2_CÀ¨
(
u8g_pb_t
 *
b
)

46 
uöt8_t
 *
±r
 = (uöt8_à*)
b
->
buf
;

47 
uöt8_t
 *
íd_±r
 = 
±r
;

50 
íd_±r
 +
b
->
width
;

51 
íd_±r
 +
b
->
width
;

55 *
±r
++ = 0;

56 }  
±r
 !
íd_±r
 );

57 
	}
}

59 
	$u8g_pb16v2Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

61 
b
->
buf
 = buf;

62 
b
->
width
 = width;

63 
	`u8g_pb16v2_CÀ¨
(
b
);

64 
	}
}

66 
	$u8g_pb16v2_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

68 
uöt8_t
 
mask
;

69 
uöt8_t
 *
±r
 = 
b
->
buf
;

70 
y
 -
b
->
p
.
∑ge_y0
;

71 i‡–
y
 >= 4 )

73 
±r
 +
b
->
width
;

75 
mask
 = 0x03;

76 
y
 &= 0x03;

77 
y
 <<= 1;

78 
mask
 <<
y
;

79 
mask
 ^=0xff;

80 
cﬁ‹_ödex
 &= 3;

81 
cﬁ‹_ödex
 <<
y
;

82 
±r
 +
x
;

83 *
±r
 &
mask
;

84 *
±r
 |
cﬁ‹_ödex
;

85 
	}
}

88 
	$u8g_pb16v2_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

90 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

92 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

94 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

96 
	`u8g_pb16v2_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

97 
	}
}

100 
	$u8g_pb16v2_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

102 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

105 i‡–
pixñ
 & 128 )

107 
	`u8g_pb16v2_SëPixñ
(
b
, 
¨g_pixñ
);

109  
¨g_pixñ
->
dú
 )

111 0: 
¨g_pixñ
->
x
++; ;

112 1: 
¨g_pixñ
->
y
++; ;

113 2: 
¨g_pixñ
->
x
--; ;

114 3: 
¨g_pixñ
->
y
--; ;

116 
pixñ
 <<= 1;

117 }  
pixñ
 != 0 );

118 
	}
}

122 
uöt8_t
 
	$u8g_dev_pb16v2_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

124 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

125 
msg
)

127 
U8G_DEV_MSG_SET_8PIXEL
:

128 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

130 
	`u8g_pb16v2_Së8PixñStd
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

133 
U8G_DEV_MSG_SET_PIXEL
:

134 
	`u8g_pb16v2_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

136 
U8G_DEV_MSG_INIT
:

138 
U8G_DEV_MSG_STOP
:

140 
U8G_DEV_MSG_PAGE_FIRST
:

141 
	`u8g_pb16v2_CÀ¨
(
pb
);

142 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

144 
U8G_DEV_MSG_PAGE_NEXT
:

145 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

147 
	`u8g_pb16v2_CÀ¨
(
pb
);

149 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


150 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

151  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

153 
U8G_DEV_MSG_GET_PAGE_BOX
:

154 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

156 
U8G_DEV_MSG_GET_WIDTH
:

157 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

159 
U8G_DEV_MSG_GET_HEIGHT
:

160 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

162 
U8G_DEV_MSG_SET_COLOR_INDEX
:

164 
U8G_DEV_MSG_SET_XY_CB
:

166 
U8G_DEV_MSG_GET_MODE
:

167  
U8G_MODE_GRAY2BIT
;

170 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_pb32h1.c

43 
	~"u8g.h
"

44 
	~<°rög.h
>

47 
	$u8g_pb32h1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
Ë
U8G_NOINLINE
;

48 
	$u8g_pb32h1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

49 
	$u8g_pb32h1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
Ë
U8G_NOINLINE
 ;

50 
	$u8g_pb32h1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
Ë
U8G_NOINLINE
;

51 
uöt8_t
 
	`u8g_dev_pb8h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

53 
	$u8g_pb32h1_CÀ¨
(
u8g_pb_t
 *
b
)

55 
uöt8_t
 *
±r
 = (uöt8_à*)
b
->
buf
;

56 
uöt8_t
 *
íd_±r
 = 
±r
;

57 
íd_±r
 +
b
->
width
*4;

60 *
±r
++ = 0;

61 }  
±r
 !
íd_±r
 );

62 
	}
}

66 
	$u8g_pb32h1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

68 
b
->
buf
 = buf;

69 
b
->
width
 = width;

70 
	`u8g_pb32h1_CÀ¨
(
b
);

71 
	}
}

75 
	$u8g_pb32h1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

77 
uöt8_t
 
mask
;

78 
uöt16_t
 
tmp
;

79 
uöt8_t
 *
±r
 = 
b
->
buf
;

81 
y
 -
b
->
p
.
∑ge_y0
;

82 
tmp
 = 
b
->
width
;

83 
tmp
 >>= 3;

84 
tmp
 *
y
;

85 
±r
 +
tmp
;

87 
mask
 = 0x080;

88 
mask
 >>
x
 & 7;

89 
x
 >>= 3;

90 
±r
 +
x
;

91 i‡–
cﬁ‹_ödex
 )

93 *
±r
 |
mask
;

97 
mask
 ^=0xff;

98 *
±r
 &
mask
;

101 
	}
}

104 
	$u8g_pb32h1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

106 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

108 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

110 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

112 
	`u8g_pb32h1_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

113 
	}
}

115 
	$u8g_pb32h1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

117 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

120 i‡–
pixñ
 & 128 )

122 
	`u8g_pb32h1_SëPixñ
(
b
, 
¨g_pixñ
);

124  
¨g_pixñ
->
dú
 )

126 0: 
¨g_pixñ
->
x
++; ;

127 1: 
¨g_pixñ
->
y
++; ;

128 2: 
¨g_pixñ
->
x
--; ;

129 3: 
¨g_pixñ
->
y
--; ;

131 
pixñ
 <<= 1;

132 }  
pixñ
 != 0 );

133 
	}
}

135 
	$u8g_pb32h1_Së8PixñO±2
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

137 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

138 
u8g_uöt_t
 
dx
 = 0;

139 
u8g_uöt_t
 
dy
 = 0;

141  
¨g_pixñ
->
dú
 )

143 0: 
dx
++; ;

144 1: 
dy
++; ;

145 2: 
dx
--; ;

146 3: 
dy
--; ;

151 i‡–
pixñ
 & 128 )

152 
	`u8g_pb32h1_SëPixñ
(
b
, 
¨g_pixñ
);

153 
¨g_pixñ
->
x
 +
dx
;

154 
¨g_pixñ
->
y
 +
dy
;

155 
pixñ
 <<= 1;

156 }  
pixñ
 != 0 );

157 
	}
}

160 
uöt8_t
 
	$u8g_dev_pb32h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

162 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

163 
msg
)

165 
U8G_DEV_MSG_SET_8PIXEL
:

166 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

167 
	`u8g_pb32h1_Së8PixñO±2
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

169 
U8G_DEV_MSG_SET_PIXEL
:

170 
	`u8g_pb32h1_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

172 
U8G_DEV_MSG_INIT
:

174 
U8G_DEV_MSG_STOP
:

176 
U8G_DEV_MSG_PAGE_FIRST
:

177 
	`u8g_pb32h1_CÀ¨
(
pb
);

178 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

180 
U8G_DEV_MSG_PAGE_NEXT
:

181 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

183 
	`u8g_pb32h1_CÀ¨
(
pb
);

185 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


186 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

187  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

189 
U8G_DEV_MSG_GET_PAGE_BOX
:

190 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

192 
U8G_DEV_MSG_GET_WIDTH
:

193 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

195 
U8G_DEV_MSG_GET_HEIGHT
:

196 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

198 
U8G_DEV_MSG_SET_COLOR_INDEX
:

200 
U8G_DEV_MSG_SET_XY_CB
:

202 
U8G_DEV_MSG_GET_MODE
:

203  
U8G_MODE_BW
;

206 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_pb8h1.c

44 
	~"u8g.h
"

45 
	~<°rög.h
>

47 #ifde‡
__unix__


48 
	~<as£π.h
>

55 #ifde‡
__unix__


56 *
	gu8g_buf_lowî_limô
;

57 *
	gu8g_buf_uµî_limô
;

60 
	$u8g_pb8h1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
Ë
U8G_NOINLINE
;

61 
	$u8g_pb8h1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

62 
	$u8g_pb8h1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
Ë
U8G_NOINLINE
 ;

63 
	$u8g_pb8h1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
Ë
U8G_NOINLINE
;

64 
uöt8_t
 
	`u8g_dev_pb8h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

67 #ifde‡
NEW_CODE


68 
	su8g_pb_h1_°ru˘


70 
u8g_uöt_t
 
x
;

71 
u8g_uöt_t
 
y
;

72 
uöt8_t
 *
±r
;

73 
uöt8_t
 
mask
;

74 
uöt8_t
 
löe_byã_Àn
;

75 
uöt8_t
 
˙t
;

78 
uöt8_t
 
u8g_pb8h1_bômask
[8] = { 0x080, 0x040, 0x020, 0x010, 0x008, 0x004, 0x002, 0x001 
	}
};

80 
	$u8g_pb8h1_°©e_right
(
u8g_pb_h1_°ru˘
 *
s
Ë
U8G_NOINLINE
;

81 
	$u8g_pb8h1_°©e_right
(
u8g_pb_h1_°ru˘
 *
s
)

83 
u8g_uöt_t
 
x
;

84 
x
 = 
s
->x;

85 
x
++;

86 
s
->
x
 = x;

87 
x
 &= 7;

88 
s
->
mask
 = 
u8g_pb8h1_bômask
[
x
];

89 i‡–
x
 == 0 )

90 
s
->
±r
++;

91 
	}
}

93 
	$u8g_pb8h1_°©e_À·
(
u8g_pb_h1_°ru˘
 *
s
)

95 
u8g_uöt_t
 
x
;

96 
x
 = 
s
->x;

97 
x
--;

98 
s
->
x
 = x;

99 
x
 &= 7;

100 
s
->
mask
 = 
u8g_pb8h1_bômask
[
x
];

101 i‡–
x
 == 7 )

102 
s
->
±r
--;

103 
	}
}

105 
	$u8g_pb8h1_°©e_down
(
u8g_pb_h1_°ru˘
 *
s
)

107 
s
->
y
++;

108 
s
->
±r
 +s->
löe_byã_Àn
;

109 
	}
}

111 
	$u8g_pb8h1_°©e_up
(
u8g_pb_h1_°ru˘
 *
s
)

113 
s
->
y
--;

114 
s
->
±r
 -s->
löe_byã_Àn
;

115 
	}
}

117 
	$u8g_pb8h1_°©e_öô
(
u8g_pb_h1_°ru˘
 *
s
, 
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
Ë
U8G_NOINLINE
;

118 
	$u8g_pb8h1_°©e_öô
(
u8g_pb_h1_°ru˘
 *
s
, 
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
)

120 
u8g_uöt_t
 
tmp
;

122 
uöt8_t
 *
±r
 = 
b
->
buf
;

124 
s
->
x
 = x;

125 
s
->
y
 = y;

127 
y
 -
b
->
p
.
∑ge_y0
;

129 
tmp
 = 
b
->
width
;

130 
tmp
 >>= 3;

131 
s
->
löe_byã_Àn
 = 
tmp
;

134 
±r
 -
tmp
*8;

135 
y
+=8;

137 
±r
 +
tmp
*
y
;

139 
s
->
mask
 = 
u8g_pb8h1_bômask
[
x
 & 7];

142 
±r
--;

143 
x
 += 8;

144 
x
 >>= 3;

145 
±r
 +
x
;

146 
s
->
±r
 =Ötr;

147 
	}
}

149 
	$u8g_pb8h1_°©e_£t_pixñ
(
u8g_pb_h1_°ru˘
 *
s
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

150 
	$u8g_pb8h1_°©e_£t_pixñ
(
u8g_pb_h1_°ru˘
 *
s
, 
uöt8_t
 
cﬁ‹_ödex
)

153 #ifde‡
__unix__


154 
	`as£π
–
s
->
±r
 >
u8g_buf_lowî_limô
 );

155 
	`as£π
–
s
->
±r
 < 
u8g_buf_uµî_limô
 );

158 i‡–
cﬁ‹_ödex
 )

160 *
s
->
±r
 |s->
mask
;

164 
uöt8_t
 
mask
 = 
s
->mask;

165 
mask
 ^=0xff;

166 *
s
->
±r
 &
mask
;

168 
	}
}

172 
	$u8g_pb8h1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

174 
b
->
buf
 = buf;

175 
b
->
width
 = width;

176 
	`u8g_pb_CÀ¨
(
b
);

177 
	}
}

180 
	$u8g_pb8h1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

182 #ifde‡
NEW_CODE


183 
u8g_pb_h1_°ru˘
 
s
;

184 
	`u8g_pb8h1_°©e_öô
(&
s
, 
b
, 
x
, 
y
);

185 
	`u8g_pb8h1_°©e_£t_pixñ
(&
s
, 
cﬁ‹_ödex
);

194 
uöt8_t
 
mask
;

195 
u8g_uöt_t
 
tmp
;

196 
uöt8_t
 *
±r
 = 
b
->
buf
;

198 
y
 -
b
->
p
.
∑ge_y0
;

199 
tmp
 = 
b
->
width
;

200 
tmp
 >>= 3;

201 
tmp
 *(
uöt8_t
)
y
;

202 
±r
 +
tmp
;

204 
mask
 = 0x080;

205 
mask
 >>
x
 & 7;

206 
x
 >>= 3;

207 
±r
 +
x
;

208 i‡–
cﬁ‹_ödex
 )

210 *
±r
 |
mask
;

214 
mask
 ^=0xff;

215 *
±r
 &
mask
;

218 
	}
}

221 
	$u8g_pb8h1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

223 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

225 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

227 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

229 
	`u8g_pb8h1_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

230 
	}
}

232 
	$u8g_pb8h1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

234 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

237 i‡–
pixñ
 & 128 )

239 
	`u8g_pb8h1_SëPixñ
(
b
, 
¨g_pixñ
);

241  
¨g_pixñ
->
dú
 )

243 0: 
¨g_pixñ
->
x
++; ;

244 1: 
¨g_pixñ
->
y
++; ;

245 2: 
¨g_pixñ
->
x
--; ;

246 3: 
¨g_pixñ
->
y
--; ;

248 
pixñ
 <<= 1;

249 }  
pixñ
 != 0 );

250 
	}
}

252 
	$u8g_pb8h1_Së8PixñO±2
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

254 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

255 
u8g_uöt_t
 
dx
 = 0;

256 
u8g_uöt_t
 
dy
 = 0;

258  
¨g_pixñ
->
dú
 )

260 0: 
dx
++; ;

261 1: 
dy
++; ;

262 2: 
dx
--; ;

263 3: 
dy
--; ;

268 i‡–
pixñ
 & 128 )

269 
	`u8g_pb8h1_SëPixñ
(
b
, 
¨g_pixñ
);

270 
¨g_pixñ
->
x
 +
dx
;

271 
¨g_pixñ
->
y
 +
dy
;

272 
pixñ
 <<= 1;

273 }  
pixñ
 != 0 );

274 
	}
}

276 #ifde‡
NEW_CODE


277 
	$u8g_pb8h1_Së8PixñSèã
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

279 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

280 
u8g_pb_h1_°ru˘
 
s
;

281 
uöt8_t
 
˙t
;

282 
	`u8g_pb8h1_°©e_öô
(&
s
, 
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
);

283 
˙t
 = 8;

284  
¨g_pixñ
->
dú
 )

289 i‡–
s
.
x
 < 
b
->
width
 )

290 i‡–
pixñ
 & 128 )

291 
	`u8g_pb8h1_°©e_£t_pixñ
(&
s
, 
¨g_pixñ
->
cﬁ‹
);

292 
	`u8g_pb8h1_°©e_right
(&
s
);

293 
pixñ
 <<= 1;

294 
˙t
--;

295 }  
˙t
 > 0 && 
pixñ
 != 0 );

300 i‡–
s
.
y
 >
b
->
p
.
∑ge_y0
 )

301 i‡–
s
.
y
 <
b
->
p
.
∑ge_y1
 )

302 i‡–
pixñ
 & 128 )

303 
	`u8g_pb8h1_°©e_£t_pixñ
(&
s
, 
¨g_pixñ
->
cﬁ‹
);

304 
	`u8g_pb8h1_°©e_down
(&
s
);

305 
pixñ
 <<= 1;

306 
˙t
--;

307 }  
˙t
 > 0 && 
pixñ
 != 0 );

312 i‡–
s
.
x
 < 
b
->
width
 )

313 i‡–
pixñ
 & 128 )

314 
	`u8g_pb8h1_°©e_£t_pixñ
(&
s
, 
¨g_pixñ
->
cﬁ‹
);

315 
	`u8g_pb8h1_°©e_À·
(&
s
);

316 
pixñ
 <<= 1;

317 
˙t
--;

318 }  
˙t
 > 0 && 
pixñ
 != 0 );

323 i‡–
s
.
y
 >
b
->
p
.
∑ge_y0
 )

324 i‡–
s
.
y
 <
b
->
p
.
∑ge_y1
 )

325 i‡–
pixñ
 & 128 )

326 
	`u8g_pb8h1_°©e_£t_pixñ
(&
s
, 
¨g_pixñ
->
cﬁ‹
);

327 
	`u8g_pb8h1_°©e_up
(&
s
);

328 
pixñ
 <<= 1;

329 
˙t
--;

330 }  
˙t
 > 0 && 
pixñ
 != 0 );

333 
	}
}

336 
uöt8_t
 
	$u8g_dev_pb8h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

338 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

339 
msg
)

341 
U8G_DEV_MSG_SET_8PIXEL
:

342 #ifde‡
NEW_CODE


343 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

344 
	`u8g_pb8h1_Së8PixñSèã
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

346 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

347 
	`u8g_pb8h1_Së8PixñO±2
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

350 
U8G_DEV_MSG_SET_PIXEL
:

351 
	`u8g_pb8h1_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

353 
U8G_DEV_MSG_INIT
:

355 
U8G_DEV_MSG_STOP
:

357 
U8G_DEV_MSG_PAGE_FIRST
:

358 
	`u8g_pb_CÀ¨
(
pb
);

359 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

361 
U8G_DEV_MSG_PAGE_NEXT
:

362 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

364 
	`u8g_pb_CÀ¨
(
pb
);

366 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


367 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

368  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

370 
U8G_DEV_MSG_GET_PAGE_BOX
:

371 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

373 
U8G_DEV_MSG_GET_WIDTH
:

374 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

376 
U8G_DEV_MSG_GET_HEIGHT
:

377 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

379 
U8G_DEV_MSG_SET_COLOR_INDEX
:

381 
U8G_DEV_MSG_SET_XY_CB
:

383 
U8G_DEV_MSG_GET_MODE
:

384  
U8G_MODE_BW
;

387 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_pb8h1f.c

43 
	~"u8g.h
"

44 
	~<°rög.h
>

47 
	$u8g_pb8h1f_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
Ë
U8G_NOINLINE
;

48 
	$u8g_pb8h1f_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

49 
	$u8g_pb8h1f_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
Ë
U8G_NOINLINE
 ;

50 
	$u8g_pb8h1f_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
Ë
U8G_NOINLINE
;

51 
uöt8_t
 
	`u8g_dev_pb8h1f_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

54 
	$u8g_pb8h1f_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

56 
b
->
buf
 = buf;

57 
b
->
width
 = width;

58 
	`u8g_pb_CÀ¨
(
b
);

59 
	}
}

62 
	$u8g_pb8h1f_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

65 
uöt8_t
 
mask
;

66 
u8g_uöt_t
 
tmp
;

67 
uöt8_t
 *
±r
 = 
b
->
buf
;

69 
y
 -
b
->
p
.
∑ge_y0
;

70 
tmp
 = 
b
->
width
 >> 3;

71 
tmp
 *(
uöt8_t
)
y
;

72 
±r
 +
tmp
;

74 
mask
 = 1;

75 
mask
 <<
x
 & 7;

76 
x
 >>= 3;

77 
±r
 +
x
;

78 i‡–
cﬁ‹_ödex
 )

80 *
±r
 |
mask
;

84 
mask
 ^=0xff;

85 *
±r
 &
mask
;

87 
	}
}

90 
	$u8g_pb8h1f_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

92 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

94 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

96 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

98 
	`u8g_pb8h1f_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

99 
	}
}

101 
	$u8g_pb8h1f_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

103 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

106 i‡–
pixñ
 & 128 )

108 
	`u8g_pb8h1f_SëPixñ
(
b
, 
¨g_pixñ
);

110  
¨g_pixñ
->
dú
 )

112 0: 
¨g_pixñ
->
x
++; ;

113 1: 
¨g_pixñ
->
y
++; ;

114 2: 
¨g_pixñ
->
x
--; ;

115 3: 
¨g_pixñ
->
y
--; ;

117 
pixñ
 <<= 1;

118 }  
pixñ
 != 0 );

119 
	}
}

121 
	$u8g_pb8h1f_Së8PixñO±2
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

123 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

124 
u8g_uöt_t
 
dx
 = 0;

125 
u8g_uöt_t
 
dy
 = 0;

127  
¨g_pixñ
->
dú
 )

129 0: 
dx
++; ;

130 1: 
dy
++; ;

131 2: 
dx
--; ;

132 3: 
dy
--; ;

137 i‡–
pixñ
 & 128 )

138 
	`u8g_pb8h1f_SëPixñ
(
b
, 
¨g_pixñ
);

139 
¨g_pixñ
->
x
 +
dx
;

140 
¨g_pixñ
->
y
 +
dy
;

141 
pixñ
 <<= 1;

142 }  
pixñ
 != 0 );

143 
	}
}

146 
uöt8_t
 
	$u8g_dev_pb8h1f_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

148 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

149 
msg
)

151 
U8G_DEV_MSG_SET_8PIXEL
:

152 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

153 
	`u8g_pb8h1f_Së8PixñO±2
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

155 
U8G_DEV_MSG_SET_PIXEL
:

156 
	`u8g_pb8h1f_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

158 
U8G_DEV_MSG_INIT
:

160 
U8G_DEV_MSG_STOP
:

162 
U8G_DEV_MSG_PAGE_FIRST
:

163 
	`u8g_pb_CÀ¨
(
pb
);

164 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

166 
U8G_DEV_MSG_PAGE_NEXT
:

167 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

169 
	`u8g_pb_CÀ¨
(
pb
);

171 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


172 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

173  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

175 
U8G_DEV_MSG_GET_PAGE_BOX
:

176 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

178 
U8G_DEV_MSG_GET_WIDTH
:

179 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

181 
U8G_DEV_MSG_GET_HEIGHT
:

182 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

184 
U8G_DEV_MSG_SET_COLOR_INDEX
:

186 
U8G_DEV_MSG_SET_XY_CB
:

188 
U8G_DEV_MSG_GET_MODE
:

189  
U8G_MODE_BW
;

192 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_pb8h2.c

40 
	~"u8g.h
"

41 
	~<°rög.h
>

43 
	$u8g_pb8h2_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

45 
b
->
buf
 = buf;

46 
b
->
width
 = width;

47 
	`u8g_pb_CÀ¨
(
b
);

48 
	}
}

50 
	$u8g_pb8h2_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

51 
	$u8g_pb8h2_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

53 
uöt8_t
 
mask
;

54 
uöt16_t
 
tmp
;

56 
uöt8_t
 *
±r
 = 
b
->
buf
;

58 
y
 -
b
->
p
.
∑ge_y0
;

60 
tmp
 = 
b
->
width
;

61 
tmp
 >>= 2;

62 
tmp
 *(
uöt8_t
)
y
;

63 
±r
 +
tmp
;

65 
tmp
 = 
x
;

66 
tmp
 >>= 2;

67 
±r
 +
tmp
;

69 
tmp
 = 
x
;

70 
tmp
 &= 3;

71 
tmp
 <<= 1;

72 
mask
 = 3;

73 
mask
 <<
tmp
;

74 
mask
 = ~mask;

75 
cﬁ‹_ödex
 &= 3;

76 
cﬁ‹_ödex
 <<
tmp
;

78 *
±r
 &
mask
;

79 *
±r
 |
cﬁ‹_ödex
;

80 
	}
}

83 
	$u8g_pb8h2_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

85 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

87 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

89 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

91 
	`u8g_pb8h2_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

92 
	}
}

95 
	$u8g_pb8h2_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

97 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

100 i‡–
pixñ
 & 128 )

102 
	`u8g_pb8h2_SëPixñ
(
b
, 
¨g_pixñ
);

104  
¨g_pixñ
->
dú
 )

106 0: 
¨g_pixñ
->
x
++; ;

107 1: 
¨g_pixñ
->
y
++; ;

108 2: 
¨g_pixñ
->
x
--; ;

109 3: 
¨g_pixñ
->
y
--; ;

111 
pixñ
 <<= 1;

112 }  
pixñ
 != 0 );

113 
	}
}

117 
uöt8_t
 
	$u8g_dev_pb8h2_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

119 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

120 
msg
)

122 
U8G_DEV_MSG_SET_8PIXEL
:

123 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

125 
	`u8g_pb8h2_Së8PixñStd
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

128 
U8G_DEV_MSG_SET_PIXEL
:

129 
	`u8g_pb8h2_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

131 
U8G_DEV_MSG_INIT
:

133 
U8G_DEV_MSG_STOP
:

135 
U8G_DEV_MSG_PAGE_FIRST
:

136 
	`u8g_pb_CÀ¨
(
pb
);

137 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

139 
U8G_DEV_MSG_PAGE_NEXT
:

140 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

142 
	`u8g_pb_CÀ¨
(
pb
);

144 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


145 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

146  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

148 
U8G_DEV_MSG_GET_PAGE_BOX
:

149 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

151 
U8G_DEV_MSG_GET_WIDTH
:

152 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

154 
U8G_DEV_MSG_GET_HEIGHT
:

155 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

157 
U8G_DEV_MSG_SET_COLOR_INDEX
:

159 
U8G_DEV_MSG_SET_XY_CB
:

161 
U8G_DEV_MSG_GET_MODE
:

162  
U8G_MODE_GRAY2BIT
;

165 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_pb8h8.c

52 
	~"u8g.h
"

54 
	#WIDTH_BITS
 7

	)

55 
	#WIDTH
 (1<<
WIDTH_BITS
)

	)

56 
	#PAGE_HEIGHT_BITS
 3

	)

57 
	#PAGE_HEIGHT
 (1<<
PAGE_HEIGHT_BITS
)

	)

59 
	$u8g_pb8h8_CÀ¨
(
u8g_pb_t
 *
b
)

61 
uöt8_t
 *
±r
 = (uöt8_à*)
b
->
buf
;

62 
uöt8_t
 *
íd_±r
 = 
±r
;

63 
uöt8_t
 
˙t
 = 
b
->
p
.
∑ge_height
;

66 
íd_±r
 +
b
->
width
;

67 
˙t
--;

68 }  
˙t
 > 0 );

71 *
±r
++ = 0;

72 }  
±r
 !
íd_±r
 );

73 
	}
}

76 
	$u8g_pb8h8_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

78 
b
->
buf
 = buf;

79 
b
->
width
 = width;

80 
	`u8g_pb8h8_CÀ¨
(
b
);

81 
	}
}

83 
	$u8g_pb8h8_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

85 
uöt16_t
 
tmp
;

86 
uöt8_t
 *
±r
 = 
b
->
buf
;

87 
y
 -
b
->
p
.
∑ge_y0
;

88 
tmp
 = 
y
;

89 
tmp
 *
b
->
width
;

90 
tmp
 +
x
;

91 
±r
 +
tmp
;

92 *
±r
 = 
cﬁ‹_ödex
;

93 
	}
}

95 
	$u8g_pb8h8_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

97 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

99 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

101 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

103 
	`u8g_pb8h8_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

104 
	}
}

107 
	$u8g_pb8h8_Së8Pixñ
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

109 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

110 
u8g_uöt_t
 
dx
 = 0;

111 
u8g_uöt_t
 
dy
 = 0;

113  
¨g_pixñ
->
dú
 )

115 0: 
dx
++; ;

116 1: 
dy
++; ;

117 2: 
dx
--; ;

118 3: 
dy
--; ;

123 i‡–
pixñ
 & 128 )

124 
	`u8g_pb8h8_SëPixñ
(
b
, 
¨g_pixñ
);

125 
¨g_pixñ
->
x
 +
dx
;

126 
¨g_pixñ
->
y
 +
dy
;

127 
pixñ
 <<= 1;

128 }  
pixñ
 != 0 );

129 
	}
}

132 
uöt8_t
 
	$u8g_dev_pb8h8_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

134 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

135 
msg
)

137 
U8G_DEV_MSG_SET_8PIXEL
:

138 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

139 
	`u8g_pb8h8_Së8Pixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

141 
U8G_DEV_MSG_SET_PIXEL
:

142 
	`u8g_pb8h8_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

144 
U8G_DEV_MSG_INIT
:

146 
U8G_DEV_MSG_STOP
:

148 
U8G_DEV_MSG_PAGE_FIRST
:

149 
	`u8g_pb8h8_CÀ¨
(
pb
);

150 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

152 
U8G_DEV_MSG_PAGE_NEXT
:

153 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

155 
	`u8g_pb8h8_CÀ¨
(
pb
);

157 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


158 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

159  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

161 
U8G_DEV_MSG_GET_PAGE_BOX
:

162 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

164 
U8G_DEV_MSG_GET_WIDTH
:

165 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

167 
U8G_DEV_MSG_GET_HEIGHT
:

168 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

170 
U8G_DEV_MSG_SET_COLOR_INDEX
:

172 
U8G_DEV_MSG_SET_XY_CB
:

174 
U8G_DEV_MSG_GET_MODE
:

175  
U8G_MODE_R3G3B2
;

178 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_pb8v1.c

40 
	~"u8g.h
"

41 
	~<°rög.h
>

44 
	$u8g_pb8v1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
Ë
U8G_NOINLINE
;

45 
	$u8g_pb8v1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

46 
	$u8g_pb8v1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
Ë
U8G_NOINLINE
 ;

47 
	$u8g_pb8v1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
Ë
U8G_NOINLINE
;

50 
	$u8g_pb8v1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

52 
b
->
buf
 = buf;

53 
b
->
width
 = width;

54 
	`u8g_pb_CÀ¨
(
b
);

55 
	}
}

57 
	$u8g_pb8v1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

59 
uöt8_t
 
mask
;

60 
uöt8_t
 *
±r
 = 
b
->
buf
;

62 
y
 -
b
->
p
.
∑ge_y0
;

63 
mask
 = 1;

64 
y
 &= 0x07;

65 
mask
 <<
y
;

66 
±r
 +
x
;

67 i‡–
cﬁ‹_ödex
 )

69 *
±r
 |
mask
;

73 
mask
 ^=0xff;

74 *
±r
 &
mask
;

76 
	}
}

79 
	$u8g_pb8v1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

81 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

83 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

85 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

87 
	`u8g_pb8v1_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

88 
	}
}

90 
	$u8g_pb8v1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

92 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

95 i‡–
pixñ
 & 128 )

97 
	`u8g_pb8v1_SëPixñ
(
b
, 
¨g_pixñ
);

99  
¨g_pixñ
->
dú
 )

101 0: 
¨g_pixñ
->
x
++; ;

102 1: 
¨g_pixñ
->
y
++; ;

103 2: 
¨g_pixñ
->
x
--; ;

104 3: 
¨g_pixñ
->
y
--; ;

106 
pixñ
 <<= 1;

107 }  
pixñ
 != 0 );

108 
	}
}

111 
	$u8g_pb8v1_Së8PixñO±2
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

113 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

114 
u8g_uöt_t
 
dx
 = 0;

115 
u8g_uöt_t
 
dy
 = 0;

117  
¨g_pixñ
->
dú
 )

119 0: 
dx
++; ;

120 1: 
dy
++; ;

121 2: 
dx
--; ;

122 3: 
dy
--; ;

127 i‡–
pixñ
 & 128 )

128 
	`u8g_pb8v1_SëPixñ
(
b
, 
¨g_pixñ
);

129 
¨g_pixñ
->
x
 +
dx
;

130 
¨g_pixñ
->
y
 +
dy
;

131 
pixñ
 <<= 1;

132 }  
pixñ
 != 0 );

134 
	}
}

136 
uöt8_t
 
	$u8g_dev_pb8v1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

138 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

139 
msg
)

141 
U8G_DEV_MSG_SET_8PIXEL
:

142 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

143 
	`u8g_pb8v1_Së8PixñO±2
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

145 
U8G_DEV_MSG_SET_PIXEL
:

146 
	`u8g_pb8v1_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

148 
U8G_DEV_MSG_INIT
:

150 
U8G_DEV_MSG_STOP
:

152 
U8G_DEV_MSG_PAGE_FIRST
:

153 
	`u8g_pb_CÀ¨
(
pb
);

154 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

156 
U8G_DEV_MSG_PAGE_NEXT
:

157 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

159 
	`u8g_pb_CÀ¨
(
pb
);

161 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


162 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

163  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

165 
U8G_DEV_MSG_GET_PAGE_BOX
:

166 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

168 
U8G_DEV_MSG_GET_WIDTH
:

169 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

171 
U8G_DEV_MSG_GET_HEIGHT
:

172 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

174 
U8G_DEV_MSG_SET_COLOR_INDEX
:

176 
U8G_DEV_MSG_SET_XY_CB
:

178 
U8G_DEV_MSG_GET_MODE
:

179  
U8G_MODE_BW
;

182 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_pb8v2.c

40 
	~"u8g.h
"

41 
	~<°rög.h
>

43 
	$u8g_pb8v2_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

45 
b
->
buf
 = buf;

46 
b
->
width
 = width;

47 
	`u8g_pb_CÀ¨
(
b
);

48 
	}
}

50 
	$u8g_pb8v2_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

52 
uöt8_t
 
mask
;

53 
uöt8_t
 *
±r
 = 
b
->
buf
;

54 
y
 -
b
->
p
.
∑ge_y0
;

55 
mask
 = 0x03;

56 
y
 &= 0x03;

57 
y
 <<= 1;

58 
mask
 <<
y
;

59 
mask
 ^=0xff;

60 
cﬁ‹_ödex
 &= 3;

61 
cﬁ‹_ödex
 <<
y
;

62 
±r
 +
x
;

63 *
±r
 &
mask
;

64 *
±r
 |
cﬁ‹_ödex
;

65 
	}
}

68 
	$u8g_pb8v2_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

70 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

72 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

74 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

76 
	`u8g_pb8v2_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

77 
	}
}

80 
	$u8g_pb8v2_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

82 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

85 i‡–
pixñ
 & 128 )

87 
	`u8g_pb8v2_SëPixñ
(
b
, 
¨g_pixñ
);

89  
¨g_pixñ
->
dú
 )

91 0: 
¨g_pixñ
->
x
++; ;

92 1: 
¨g_pixñ
->
y
++; ;

93 2: 
¨g_pixñ
->
x
--; ;

94 3: 
¨g_pixñ
->
y
--; ;

96 
pixñ
 <<= 1;

97 }  
pixñ
 != 0 );

99 
	}
}

103 
uöt8_t
 
	$u8g_dev_pb8v2_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

105 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

106 
msg
)

108 
U8G_DEV_MSG_SET_8PIXEL
:

109 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

111 
	`u8g_pb8v2_Së8PixñStd
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

114 
U8G_DEV_MSG_SET_PIXEL
:

115 
	`u8g_pb8v2_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

117 
U8G_DEV_MSG_INIT
:

119 
U8G_DEV_MSG_STOP
:

121 
U8G_DEV_MSG_PAGE_FIRST
:

122 
	`u8g_pb_CÀ¨
(
pb
);

123 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

125 
U8G_DEV_MSG_PAGE_NEXT
:

126 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

128 
	`u8g_pb_CÀ¨
(
pb
);

130 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


131 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

132  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

134 
U8G_DEV_MSG_GET_PAGE_BOX
:

135 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

137 
U8G_DEV_MSG_GET_WIDTH
:

138 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

140 
U8G_DEV_MSG_GET_HEIGHT
:

141 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

143 
U8G_DEV_MSG_SET_COLOR_INDEX
:

145 
U8G_DEV_MSG_SET_XY_CB
:

147 
U8G_DEV_MSG_GET_MODE
:

148  
U8G_MODE_GRAY2BIT
;

151 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_rect.c

39 
	~"u8g.h
"

41 
	$u8g_døw_hlöe
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
)

43 
uöt8_t
 
pixñ
 = 0x0ff;

44  
w
 >= 8 )

46 
	`u8g_Døw8Pixñ
(
u8g
, 
x
, 
y
, 0, 
pixñ
);

47 
w
-=8;

48 
x
+=8;

50 i‡–
w
 != 0 )

52 
w
 ^=7;

53 
w
++;

54 
pixñ
 <<
w
&7;

55 
	`u8g_Døw8Pixñ
(
u8g
, 
x
, 
y
, 0, 
pixñ
);

57 
	}
}

59 
	$u8g_døw_vlöe
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
h
)

61 
uöt8_t
 
pixñ
 = 0x0ff;

62  
h
 >= 8 )

64 
	`u8g_Døw8Pixñ
(
u8g
, 
x
, 
y
, 1, 
pixñ
);

65 
h
-=8;

66 
y
+=8;

68 i‡–
h
 != 0 )

70 
h
 ^=7;

71 
h
++;

72 
pixñ
 <<
h
&7;

73 
	`u8g_Døw8Pixñ
(
u8g
, 
x
, 
y
, 1, 
pixñ
);

75 
	}
}

77 
	$u8g_DøwHLöe
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
)

79 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
w
, 1) == 0 )

81 
	`u8g_døw_hlöe
(
u8g
, 
x
, 
y
, 
w
);

82 
	}
}

84 
	$u8g_DøwVLöe
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
)

86 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 1, 
w
) == 0 )

88 
	`u8g_døw_vlöe
(
u8g
, 
x
, 
y
, 
w
);

89 
	}
}

92 
	$u8g_DøwFøme
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
)

94 
u8g_uöt_t
 
xtmp
 = 
x
;

96 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
w
, 
h
) == 0 )

100 
	`u8g_døw_hlöe
(
u8g
, 
x
, 
y
, 
w
);

101 
	`u8g_døw_vlöe
(
u8g
, 
x
, 
y
, 
h
);

102 
x
+=
w
;

103 
x
--;

104 
	`u8g_døw_vlöe
(
u8g
, 
x
, 
y
, 
h
);

105 
y
+=
h
;

106 
y
--;

107 
	`u8g_døw_hlöe
(
u8g
, 
xtmp
, 
y
, 
w
);

108 
	}
}

110 
	$u8g_døw_box
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
)

114 
	`u8g_døw_hlöe
(
u8g
, 
x
, 
y
, 
w
);

115 
y
++;

116 
h
--;

117 }  
h
 != 0 );

118 
	}
}

121 
	$u8g_DøwBox
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
)

123 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
w
, 
h
) == 0 )

125 
	`u8g_døw_box
(
u8g
, 
x
, 
y
, 
w
, 
h
);

126 
	}
}

129 
	$u8g_DøwRFøme
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, u8g_uöt_à
r
)

131 
u8g_uöt_t
 
xl
, 
yu
;

133 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
w
, 
h
) == 0 )

136 
xl
 = 
x
;

137 
xl
 +
r
;

138 
yu
 = 
y
;

139 
yu
 +
r
;

142 
u8g_uöt_t
 
yl
, 
xr
;

144 
xr
 = 
x
;

145 
xr
 +
w
;

146 
xr
 -
r
;

147 
xr
 -= 1;

149 
yl
 = 
y
;

150 
yl
 +
h
;

151 
yl
 -
r
;

152 
yl
 -= 1;

154 
	`u8g_døw_cú˛e
(
u8g
, 
xl
, 
yu
, 
r
, 
U8G_DRAW_UPPER_LEFT
);

155 
	`u8g_døw_cú˛e
(
u8g
, 
xr
, 
yu
, 
r
, 
U8G_DRAW_UPPER_RIGHT
);

156 
	`u8g_døw_cú˛e
(
u8g
, 
xl
, 
yl
, 
r
, 
U8G_DRAW_LOWER_LEFT
);

157 
	`u8g_døw_cú˛e
(
u8g
, 
xr
, 
yl
, 
r
, 
U8G_DRAW_LOWER_RIGHT
);

161 
u8g_uöt_t
 
ww
, 
hh
;

163 
ww
 = 
w
;

164 
ww
 -
r
;

165 
ww
 -
r
;

166 
ww
 -= 2;

167 
hh
 = 
h
;

168 
hh
 -
r
;

169 
hh
 -
r
;

170 
hh
 -= 2;

172 
xl
++;

173 
yu
++;

174 
h
--;

175 
w
--;

176 
	`u8g_døw_hlöe
(
u8g
, 
xl
, 
y
, 
ww
);

177 
	`u8g_døw_hlöe
(
u8g
, 
xl
, 
y
+
h
, 
ww
);

178 
	`u8g_døw_vlöe
(
u8g
, 
x
, 
yu
, 
hh
);

179 
	`u8g_døw_vlöe
(
u8g
, 
x
+
w
, 
yu
, 
hh
);

181 
	}
}

183 
	$u8g_DøwRBox
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, u8g_uöt_à
r
)

185 
u8g_uöt_t
 
xl
, 
yu
;

186 
u8g_uöt_t
 
yl
, 
xr
;

188 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
w
, 
h
) == 0 )

191 
xl
 = 
x
;

192 
xl
 +
r
;

193 
yu
 = 
y
;

194 
yu
 +
r
;

196 
xr
 = 
x
;

197 
xr
 +
w
;

198 
xr
 -
r
;

199 
xr
 -= 1;

201 
yl
 = 
y
;

202 
yl
 +
h
;

203 
yl
 -
r
;

204 
yl
 -= 1;

206 
	`u8g_døw_disc
(
u8g
, 
xl
, 
yu
, 
r
, 
U8G_DRAW_UPPER_LEFT
);

207 
	`u8g_døw_disc
(
u8g
, 
xr
, 
yu
, 
r
, 
U8G_DRAW_UPPER_RIGHT
);

208 
	`u8g_døw_disc
(
u8g
, 
xl
, 
yl
, 
r
, 
U8G_DRAW_LOWER_LEFT
);

209 
	`u8g_døw_disc
(
u8g
, 
xr
, 
yl
, 
r
, 
U8G_DRAW_LOWER_RIGHT
);

212 
u8g_uöt_t
 
ww
, 
hh
;

214 
ww
 = 
w
;

215 
ww
 -
r
;

216 
ww
 -
r
;

217 
ww
 -= 2;

218 
hh
 = 
h
;

219 
hh
 -
r
;

220 
hh
 -
r
;

221 
hh
 -= 2;

223 
xl
++;

224 
yu
++;

225 
h
--;

226 
	`u8g_døw_box
(
u8g
, 
xl
, 
y
, 
ww
, 
r
+1);

227 
	`u8g_døw_box
(
u8g
, 
xl
, 
yl
, 
ww
, 
r
+1);

229 
	`u8g_døw_box
(
u8g
, 
x
, 
yu
, 
w
, 
hh
);

232 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_rot.c

37 
	~"u8g.h
"

39 
uöt8_t
 
u8g_dev_rŸ90_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

40 
uöt8_t
 
u8g_dev_rŸ180_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

41 
uöt8_t
 
u8g_dev_rŸ270_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

43 
u8g_dev_t
 
	gu8g_dev_rŸ
 = { 
u8g_dev_rŸ90_‚
, 
NULL
, NULL };

46 
	$u8g_UndoRŸ©i⁄
(
u8g_t
 *
u8g
)

48 i‡–
u8g
->
dev
 !&
u8g_dev_rŸ
 )

50 
u8g
->
dev
 = 
u8g_dev_rŸ
.
dev_mem
;

51 
	`u8g_Upd©eDimísi⁄
(
u8g
);

52 
	}
}

54 
	$u8g_SëRŸ90
(
u8g_t
 *
u8g
)

56 i‡–
u8g
->
dev
 !&
u8g_dev_rŸ
 )

58 
u8g_dev_rŸ
.
dev_mem
 = 
u8g
->
dev
;

59 
u8g
->
dev
 = &
u8g_dev_rŸ
;

61 
u8g_dev_rŸ
.
dev_‚
 = 
u8g_dev_rŸ90_‚
;

62 
	`u8g_Upd©eDimísi⁄
(
u8g
);

63 
	}
}

65 
	$u8g_SëRŸ180
(
u8g_t
 *
u8g
)

67 i‡–
u8g
->
dev
 !&
u8g_dev_rŸ
 )

69 
u8g_dev_rŸ
.
dev_mem
 = 
u8g
->
dev
;

70 
u8g
->
dev
 = &
u8g_dev_rŸ
;

72 
u8g_dev_rŸ
.
dev_‚
 = 
u8g_dev_rŸ180_‚
;

73 
	`u8g_Upd©eDimísi⁄
(
u8g
);

74 
	}
}

76 
	$u8g_SëRŸ270
(
u8g_t
 *
u8g
)

78 i‡–
u8g
->
dev
 !&
u8g_dev_rŸ
 )

80 
u8g_dev_rŸ
.
dev_mem
 = 
u8g
->
dev
;

81 
u8g
->
dev
 = &
u8g_dev_rŸ
;

83 
u8g_dev_rŸ
.
dev_‚
 = 
u8g_dev_rŸ270_‚
;

84 
	`u8g_Upd©eDimísi⁄
(
u8g
);

85 
	}
}

87 
uöt8_t
 
	$u8g_dev_rŸ90_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

89 
u8g_dev_t
 *
rŸ©i⁄_chaö
 = (u8g_dev_à*)(
dev
->
dev_mem
);

90 
msg
)

101  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

102 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


103 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

105 
u8g_dev_¨g_bbx_t
 *
bbx
 = (u8g_dev_¨g_bbx_à*)
¨g
;

106 
u8g_uöt_t
 
x
, 
y
, 
tmp
;

109 
y
 = 
bbx
->
x
;

110 
x
 = 
u8g
->
height
;

112 
x
 -
bbx
->
y
;

113 
x
--;

116 
x
 -
bbx
->
h
;

117 
x
++;

120 
tmp
 = 
bbx
->
w
;

121 
bbx
->
w
 = bbx->
h
;

122 
bbx
->
h
 = 
tmp
;

125 
bbx
->
x
 = x;

126 
bbx
->
y
 = y;

128  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

130 
U8G_DEV_MSG_GET_PAGE_BOX
:

132 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

135 
u8g_box_t
 
√w_box
;

139 
√w_box
.
x0
 = ((
u8g_box_t
 *)
¨g
)->
y0
;

140 
√w_box
.
x1
 = ((
u8g_box_t
 *)
¨g
)->
y1
;

141 
√w_box
.
y0
 = ((
u8g_box_t
 *)
¨g
)->
x0
;

142 
√w_box
.
y1
 = ((
u8g_box_t
 *)
¨g
)->
x1
;

143 *((
u8g_box_t
 *)
¨g
Ë
√w_box
;

147 
U8G_DEV_MSG_GET_WIDTH
:

148 *((
u8g_uöt_t
 *)
¨g
Ë
	`u8g_GëHeightLL
(
u8g
,
rŸ©i⁄_chaö
);

150 
U8G_DEV_MSG_GET_HEIGHT
:

151 *((
u8g_uöt_t
 *)
¨g
Ë
	`u8g_GëWidthLL
(
u8g
, 
rŸ©i⁄_chaö
);

153 
U8G_DEV_MSG_SET_PIXEL
:

155 
u8g_uöt_t
 
x
, 
y
;

156 
y
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
;

157 
x
 = 
	`u8g_GëWidthLL
(
u8g
, 
rŸ©i⁄_chaö
);

158 
x
 -((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
;

159 
x
--;

160 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

161 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

163 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

165 
U8G_DEV_MSG_SET_8PIXEL
:

167 
u8g_uöt_t
 
x
, 
y
;

169 
y
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
;

170 
x
 = 
	`u8g_GëWidthLL
(
u8g
, 
rŸ©i⁄_chaö
);

171 
x
 -((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
;

172 
x
--;

173 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

174 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

175 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
+=1;

176 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
 &= 3;

178 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

182 
	}
}

184 
uöt8_t
 
	$u8g_dev_rŸ180_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

186 
u8g_dev_t
 *
rŸ©i⁄_chaö
 = (u8g_dev_à*)(
dev
->
dev_mem
);

187 
msg
)

198  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

199 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


200 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

202 
u8g_dev_¨g_bbx_t
 *
bbx
 = (u8g_dev_¨g_bbx_à*)
¨g
;

203 
u8g_uöt_t
 
x
, 
y
;

207 
y
 = 
u8g
->
height
;

208 
y
 -
bbx
->y;

209 
y
--;

212 
x
 = 
u8g
->
width
;

213 
x
 -
bbx
->x;

214 
x
--;

217 
y
 -
bbx
->
h
;

218 
y
++;

220 
x
 -
bbx
->
w
;

221 
x
++;

224 
bbx
->
x
 = x;

225 
bbx
->
y
 = y;

227  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

229 
U8G_DEV_MSG_GET_PAGE_BOX
:

231 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

234 
u8g_box_t
 
√w_box
;

236 
√w_box
.
x0
 = 
	`u8g_GëWidthLL
(
u8g
,
rŸ©i⁄_chaö
Ë- ((
u8g_box_t
 *)
¨g
)->
x1
 - 1;

237 
√w_box
.
x1
 = 
	`u8g_GëWidthLL
(
u8g
,
rŸ©i⁄_chaö
Ë- ((
u8g_box_t
 *)
¨g
)->
x0
 - 1;

238 
√w_box
.
y0
 = 
	`u8g_GëHeightLL
(
u8g
,
rŸ©i⁄_chaö
Ë- ((
u8g_box_t
 *)
¨g
)->
y1
 - 1;

239 
√w_box
.
y1
 = 
	`u8g_GëHeightLL
(
u8g
,
rŸ©i⁄_chaö
Ë- ((
u8g_box_t
 *)
¨g
)->
y0
 - 1;

240 *((
u8g_box_t
 *)
¨g
Ë
√w_box
;

244 
U8G_DEV_MSG_GET_WIDTH
:

245 *((
u8g_uöt_t
 *)
¨g
Ë
	`u8g_GëWidthLL
(
u8g
,
rŸ©i⁄_chaö
);

247 
U8G_DEV_MSG_GET_HEIGHT
:

248 *((
u8g_uöt_t
 *)
¨g
Ë
	`u8g_GëHeightLL
(
u8g
, 
rŸ©i⁄_chaö
);

250 
U8G_DEV_MSG_SET_PIXEL
:

252 
u8g_uöt_t
 
x
, 
y
;

254 
y
 = 
	`u8g_GëHeightLL
(
u8g
, 
rŸ©i⁄_chaö
);

255 
y
 -((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->y;

256 
y
--;

258 
x
 = 
	`u8g_GëWidthLL
(
u8g
, 
rŸ©i⁄_chaö
);

259 
x
 -((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->x;

260 
x
--;

262 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

263 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

265 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

267 
U8G_DEV_MSG_SET_8PIXEL
:

269 
u8g_uöt_t
 
x
, 
y
;

271 
y
 = 
	`u8g_GëHeightLL
(
u8g
, 
rŸ©i⁄_chaö
);

272 
y
 -((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->y;

273 
y
--;

275 
x
 = 
	`u8g_GëWidthLL
(
u8g
, 
rŸ©i⁄_chaö
);

276 
x
 -((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->x;

277 
x
--;

279 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

280 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

281 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
+=2;

282 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
 &= 3;

284 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

288 
	}
}

290 
uöt8_t
 
	$u8g_dev_rŸ270_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

292 
u8g_dev_t
 *
rŸ©i⁄_chaö
 = (u8g_dev_à*)(
dev
->
dev_mem
);

293 
msg
)

304  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

305 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


306 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

308 
u8g_dev_¨g_bbx_t
 *
bbx
 = (u8g_dev_¨g_bbx_à*)
¨g
;

309 
u8g_uöt_t
 
x
, 
y
, 
tmp
;

312 
x
 = 
bbx
->
y
;

314 
y
 = 
u8g
->
width
;

316 
y
 -
bbx
->
x
;

317 
y
--;

320 
y
 -
bbx
->
w
;

321 
y
++;

324 
tmp
 = 
bbx
->
w
;

325 
bbx
->
w
 = bbx->
h
;

326 
bbx
->
h
 = 
tmp
;

329 
bbx
->
x
 = x;

330 
bbx
->
y
 = y;

332  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

334 
U8G_DEV_MSG_GET_PAGE_BOX
:

336 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

339 
u8g_box_t
 
√w_box
;

341 
√w_box
.
x0
 = 
	`u8g_GëHeightLL
(
u8g
,
rŸ©i⁄_chaö
Ë- ((
u8g_box_t
 *)
¨g
)->
y1
 - 1;

342 
√w_box
.
x1
 = 
	`u8g_GëHeightLL
(
u8g
,
rŸ©i⁄_chaö
Ë- ((
u8g_box_t
 *)
¨g
)->
y0
 - 1;

343 
√w_box
.
y0
 = 
	`u8g_GëWidthLL
(
u8g
,
rŸ©i⁄_chaö
Ë- ((
u8g_box_t
 *)
¨g
)->
x1
 - 1;

344 
√w_box
.
y1
 = 
	`u8g_GëWidthLL
(
u8g
,
rŸ©i⁄_chaö
Ë- ((
u8g_box_t
 *)
¨g
)->
x0
 - 1;

345 *((
u8g_box_t
 *)
¨g
Ë
√w_box
;

349 
U8G_DEV_MSG_GET_WIDTH
:

350 *((
u8g_uöt_t
 *)
¨g
Ë
	`u8g_GëHeightLL
(
u8g
,
rŸ©i⁄_chaö
);

352 
U8G_DEV_MSG_GET_HEIGHT
:

353 *((
u8g_uöt_t
 *)
¨g
Ë
	`u8g_GëWidthLL
(
u8g
, 
rŸ©i⁄_chaö
);

355 
U8G_DEV_MSG_SET_PIXEL
:

357 
u8g_uöt_t
 
x
, 
y
;

358 
x
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
;

360 
y
 = 
	`u8g_GëHeightLL
(
u8g
, 
rŸ©i⁄_chaö
);

361 
y
 -((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
;

362 
y
--;

369 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

370 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

372 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

374 
U8G_DEV_MSG_SET_8PIXEL
:

376 
u8g_uöt_t
 
x
, 
y
;

377 
x
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
;

379 
y
 = 
	`u8g_GëHeightLL
(
u8g
, 
rŸ©i⁄_chaö
);

380 
y
 -((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
;

381 
y
--;

388 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

389 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

390 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
+=3;

391 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
 &= 3;

393 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

397 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_scale.c

39 
	~"u8g.h
"

41 
uöt8_t
 
u8g_dev_sˇÀ_2x2_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

44 
u8g_dev_t
 
	gu8g_dev_sˇÀ
 = { 
u8g_dev_sˇÀ_2x2_‚
, 
NULL
, NULL };

46 
	$u8g_UndoSˇÀ
(
u8g_t
 *
u8g
)

48 i‡–
u8g
->
dev
 !&
u8g_dev_sˇÀ
 )

50 
u8g
->
dev
 = 
u8g_dev_sˇÀ
.
dev_mem
;

51 
	`u8g_Upd©eDimísi⁄
(
u8g
);

52 
	}
}

54 
	$u8g_SëSˇÀ2x2
(
u8g_t
 *
u8g
)

56 i‡–
u8g
->
dev
 !&
u8g_dev_sˇÀ
 )

58 
u8g_dev_sˇÀ
.
dev_mem
 = 
u8g
->
dev
;

59 
u8g
->
dev
 = &
u8g_dev_sˇÀ
;

61 
u8g_dev_sˇÀ
.
dev_‚
 = 
u8g_dev_sˇÀ_2x2_‚
;

62 
	`u8g_Upd©eDimísi⁄
(
u8g
);

63 
	}
}

66 
uöt8_t
 
	$u8g_dev_sˇÀ_2x2_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

68 
u8g_dev_t
 *
chaö
 = (u8g_dev_à*)(
dev
->
dev_mem
);

69 
uöt8_t
 
pixñ
;

70 
uöt16_t
 
sˇÀd_pixñ
;

71 
uöt8_t
 
i
;

72 
uöt8_t
 
dú
;

73 
u8g_uöt_t
 
x
, 
y
, 
xx
,
yy
;

75 
msg
)

78  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

79 
U8G_DEV_MSG_GET_WIDTH
:

80 *((
u8g_uöt_t
 *)
¨g
Ë
	`u8g_GëWidthLL
(
u8g
, 
chaö
) / 2;

82 
U8G_DEV_MSG_GET_HEIGHT
:

83 *((
u8g_uöt_t
 *)
¨g
Ë
	`u8g_GëHeightLL
(
u8g
, 
chaö
) / 2;

85 
U8G_DEV_MSG_GET_PAGE_BOX
:

87 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

88 ((
u8g_box_t
 *)
¨g
)->
x0
 /= 2;

89 ((
u8g_box_t
 *)
¨g
)->
x1
 /= 2;

90 ((
u8g_box_t
 *)
¨g
)->
y0
 /= 2;

91 ((
u8g_box_t
 *)
¨g
)->
y1
 /= 2;

93 
U8G_DEV_MSG_SET_PIXEL
:

94 
x
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->x;

95 
x
 *= 2;

96 
y
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->y;

97 
y
 *= 2;

98 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

99 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

100 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

101 
x
++;

102 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

103 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

104 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

105 
y
++;

106 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

107 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

108 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

109 
x
--;

110 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

111 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

112 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

114 
U8G_DEV_MSG_SET_8PIXEL
:

115 
pixñ
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->pixel;

116 
dú
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->dir;

117 
sˇÀd_pixñ
 = 0;

118  
i
 = 0; i < 8; i++ )

120 
sˇÀd_pixñ
<<=2;

121 i‡–
pixñ
 & 128 )

123 
sˇÀd_pixñ
 |= 3;

125 
pixñ
<<=1;

127 
x
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->x;

128 
x
 *= 2;

129 
xx
 = 
x
;

130 
y
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->y;

131 
y
 *= 2;

132 
yy
 = 
y
;

133 i‡–((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
 & 1 )

135 
xx
++;

139 
yy
++;

142 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
pixñ
 = 
sˇÀd_pixñ
>>8;

143 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

144 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

145 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
 = dir;

146 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

149 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = 
xx
;

150 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = 
yy
;

151 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
 = dir;

152 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

154 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
pixñ
 = 
sˇÀd_pixñ
&255;

156 
dú
)

159 
x
+=8;

160 
xx
+=8;

163 
y
+=8;

164 
yy
+=8;

167 
x
-=8;

168 
xx
-=8;

171 
y
-=8;

172 
yy
-=8;

175 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

176 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

177 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
 = dir;

178 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

180 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = 
xx
;

181 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = 
yy
;

182 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
 = dir;

183 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

187 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_state.c

49 
	~<°ddef.h
>

50 
	~"u8g.h
"

52 
	$u8g_°©e_dummy_cb
(
uöt8_t
 
msg
)

55 
	}
}

57 
	$u8g_SëH¨dw¨eBackup
(
u8g_t
 *
u8g
, 
u8g_°©e_cb
 
backup_cb
)

59 
u8g
->
°©e_cb
 = 
backup_cb
;

62 
	`backup_cb
(
U8G_STATE_MSG_BACKUP_U8G
);

63 
	}
}

69 #i‡
deföed
(
__AVR__
)

70 
	#U8G_ATMEGA_HW_SPI


	)

73 #i‡
__AVR_ARCH__
 == 2

74 #unde‡
U8G_ATMEGA_HW_SPI


76 #i‡
__AVR_ARCH__
 == 25

77 #unde‡
U8G_ATMEGA_HW_SPI


81 #i‡
deföed
(
U8G_ATMEGA_HW_SPI
)

82 
	~<avr/öãºu±.h
>

83 
uöt8_t
 
	gu8g_°©e_avr_•i_mem‹y
[2];

85 
	$u8g_backup_avr_•i
(
uöt8_t
 
msg
)

87 i‡–
	`U8G_STATE_MSG_IS_BACKUP
(
msg
) )

89 
u8g_°©e_avr_•i_mem‹y
[
	`U8G_STATE_MSG_GET_IDX
(
msg
)] = 
SPCR
;

93 
uöt8_t
 
tmp
 = 
SREG
;

94 
	`˛i
();

95 
SPCR
 = 0;

96 
SPCR
 = 
u8g_°©e_avr_•i_mem‹y
[
	`U8G_STATE_MSG_GET_IDX
(
msg
)];

97 
SREG
 = 
tmp
;

99 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_u16toa.c

38 
	~"u8g.h
"

40 c⁄° *
	$u8g_u16tﬂp
(* 
de°
, 
uöt16_t
 
v
)

42 
uöt8_t
 
pos
;

43 
uöt8_t
 
d
;

44 
uöt16_t
 
c
;

45 
c
 = 10000;

46  
pos
 = 0;Öos < 5;Öos++ )

48 
d
 = '0';

49  
v
 >
c
 )

51 
v
 -
c
;

52 
d
++;

54 
de°
[
pos
] = 
d
;

55 
c
 /= 10;

57 
de°
[5] = '\0';

58  
de°
;

59 
	}
}

62 c⁄° *
	$u8g_u16tﬂ
(
uöt16_t
 
v
, 
uöt8_t
 
d
)

64 
buf
[6];

65 
d
 = 5-d;

66  
	`u8g_u16tﬂp
(
buf
, 
v
Ë+ 
d
;

67 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_u8toa.c

38 
	~"u8g.h
"

40 c⁄° 
	gu8g_u8tﬂ_èb
[3] = { 100, 10, 1 } ;

41 c⁄° *
	$u8g_u8tﬂp
(* 
de°
, 
uöt8_t
 
v
)

43 
uöt8_t
 
pos
;

44 
uöt8_t
 
d
;

45 
uöt8_t
 
c
;

46  
pos
 = 0;Öos < 3;Öos++ )

48 
d
 = '0';

49 
c
 = *(
u8g_u8tﬂ_èb
+
pos
);

50  
v
 >
c
 )

52 
v
 -
c
;

53 
d
++;

55 
de°
[
pos
] = 
d
;

57 
de°
[3] = '\0';

58  
de°
;

59 
	}
}

62 c⁄° *
	$u8g_u8tﬂ
(
uöt8_t
 
v
, uöt8_à
d
)

64 
buf
[4];

65 
d
 = 3-d;

66  
	`u8g_u8tﬂp
(
buf
, 
v
Ë+ 
d
;

67 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_virtual_screen.c

37 
	~"u8g.h
"

39 
	s_u8g_vs_t


41 
u8g_uöt_t
 
	mx
;

42 
u8g_uöt_t
 
	my
;

43 
u8g_t
 *
	mu8g
;

45 
_u8g_vs_t
 
	tu8g_vs_t
;

47 
	#U8g_VS_MAX
 4

	)

48 
uöt8_t
 
	gu8g_vs_˙t
 = 0;

49 
u8g_vs_t
 
	gu8g_vs_li°
[
U8g_VS_MAX
];

50 
uöt8_t
 
	gu8g_vs_cuºít
;

51 
u8g_uöt_t
 
	gu8g_vs_width
;

52 
u8g_uöt_t
 
	gu8g_vs_height
;

54 
uöt8_t
 
	$u8g_dev_vs_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

56 
msg
)

60 
uöt8_t
 
i
;

61  
i
 = 0; i < 
u8g_vs_˙t
; i++ )

63 
	`u8g_ˇŒ_dev_‚
(
u8g_vs_li°
[
i
].
u8g
, u8g_vs_li°[i].u8g->
dev
, 
msg
, 
¨g
);

67 
U8G_DEV_MSG_PAGE_FIRST
:

68 
u8g_vs_cuºít
 = 0;

69 i‡–
u8g_vs_˙t
 != 0 )

70  
	`u8g_ˇŒ_dev_‚
(
u8g_vs_li°
[
u8g_vs_cuºít
].
u8g
, u8g_vs_li°[u8g_vs_cuºít].u8g->
dev
, 
msg
, 
¨g
);

72 
U8G_DEV_MSG_PAGE_NEXT
:

74 
uöt8_t
 
ªt
 = 0;

75 i‡–
u8g_vs_˙t
 != 0 )

76 
ªt
 = 
	`u8g_ˇŒ_dev_‚
(
u8g_vs_li°
[
u8g_vs_cuºít
].
u8g
, u8g_vs_li°[u8g_vs_cuºít].u8g->
dev
, 
msg
, 
¨g
);

77 i‡–
ªt
 != 0 )

78  
ªt
;

79 
u8g_vs_cuºít
++;

80 i‡–
u8g_vs_cuºít
 >
u8g_vs_˙t
 )

82  
	`u8g_ˇŒ_dev_‚
(
u8g_vs_li°
[
u8g_vs_cuºít
].
u8g
, u8g_vs_li°[u8g_vs_cuºít].u8g->
dev
, 
U8G_DEV_MSG_PAGE_FIRST
, 
¨g
);

85 
U8G_DEV_MSG_GET_WIDTH
:

86 *((
u8g_uöt_t
 *)
¨g
Ë
u8g_vs_width
;

88 
U8G_DEV_MSG_GET_HEIGHT
:

89 *((
u8g_uöt_t
 *)
¨g
Ë
u8g_vs_height
;

91 
U8G_DEV_MSG_GET_PAGE_BOX
:

92 i‡–
u8g_vs_cuºít
 < 
u8g_vs_˙t
 )

94 
	`u8g_ˇŒ_dev_‚
(
u8g_vs_li°
[
u8g_vs_cuºít
].
u8g
, u8g_vs_li°[u8g_vs_cuºít].u8g->
dev
, 
msg
, 
¨g
);

95 ((
u8g_box_t
 *)
¨g
)->
x0
 +
u8g_vs_li°
[
u8g_vs_cuºít
].
x
;

96 ((
u8g_box_t
 *)
¨g
)->
x1
 +
u8g_vs_li°
[
u8g_vs_cuºít
].
x
;

97 ((
u8g_box_t
 *)
¨g
)->
y0
 +
u8g_vs_li°
[
u8g_vs_cuºít
].
y
;

98 ((
u8g_box_t
 *)
¨g
)->
y1
 +
u8g_vs_li°
[
u8g_vs_cuºít
].
y
;

102 ((
u8g_box_t
 *)
¨g
)->
x0
 = 0;

103 ((
u8g_box_t
 *)
¨g
)->
x1
 = 0;

104 ((
u8g_box_t
 *)
¨g
)->
y0
 = 0;

105 ((
u8g_box_t
 *)
¨g
)->
y1
 = 0;

108 
U8G_DEV_MSG_SET_PIXEL
:

109 
U8G_DEV_MSG_SET_8PIXEL
:

110 i‡–
u8g_vs_cuºít
 < 
u8g_vs_˙t
 )

112 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 -
u8g_vs_li°
[
u8g_vs_cuºít
].x;

113 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 -
u8g_vs_li°
[
u8g_vs_cuºít
].y;

114  
	`u8g_ˇŒ_dev_‚
(
u8g_vs_li°
[
u8g_vs_cuºít
].
u8g
, u8g_vs_li°[u8g_vs_cuºít].u8g->
dev
, 
msg
, 
¨g
);

119 
	}
}

123 
u8g_dev_t
 
	gu8g_dev_vs
 = { 
u8g_dev_vs_‚
, 
NULL
, NULL };

125 
	$u8g_SëVútuÆS¸ìnDimísi⁄
(
u8g_t
 *
vs_u8g
, 
u8g_uöt_t
 
width
, u8g_uöt_à
height
)

127 i‡–
vs_u8g
->
dev
 !&
u8g_dev_vs
 )

129 
u8g_vs_width
 = 
width
;

130 
u8g_vs_height
 = 
height
;

131 
	}
}

133 
uöt8_t
 
	$u8g_AddToVútuÆS¸ìn
(
u8g_t
 *
vs_u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_à*
chûd_u8g
)

135 i‡–
vs_u8g
->
dev
 !&
u8g_dev_vs
 )

137 i‡–
u8g_vs_˙t
 >
U8g_VS_MAX
 )

139 
u8g_vs_li°
[
u8g_vs_˙t
].
u8g
 = 
chûd_u8g
;

140 
u8g_vs_li°
[
u8g_vs_˙t
].
x
 = x;

141 
u8g_vs_li°
[
u8g_vs_˙t
].
y
 = y;

142 
u8g_vs_˙t
++;

144 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/bootloaders/atmega/ATmegaBOOT_168.c

69 
	~<öây≥s.h
>

70 
	~<avr/io.h
>

71 
	~<avr/pgm•a˚.h
>

72 
	~<avr/öãºu±.h
>

73 
	~<avr/wdt.h
>

74 
	~<utû/dñay.h
>

78 #i‡!
deföed
(
__AVR_ATmega168__
Ë|| !deföed(
__AVR_ATmega328P__
)

79 
	~<avr/ì¥om.h
>

91 
	#MAX_ERROR_COUNT
 5

	)

96 #i‚de‡
BAUD_RATE


97 
	#BAUD_RATE
 19200

	)

103 
	#HW_VER
 0x02

	)

104 
	#SW_MAJOR
 0x01

	)

105 
	#SW_MINOR
 0x10

	)

112 #ifde‡
__AVR_ATmega128__


113 
	#BL_DDR
 
DDRF


	)

114 
	#BL_PORT
 
PORTF


	)

115 
	#BL_PIN
 
PINF


	)

116 
	#BL0
 
PINF7


	)

117 
	#BL1
 
PINF6


	)

118 #ñi‡
deföed
 
__AVR_ATmega1280__


120 #ñi‡
deföed
 
__AVR_ATmega1284P_
 || deföed 
__AVR_ATmega644P__


124 
	#BL_DDR
 
DDRD


	)

125 
	#BL_PORT
 
PORTD


	)

126 
	#BL_PIN
 
PIND


	)

127 
	#BL
 
PIND6


	)

133 #i‡
deföed
 
__AVR_ATmega128__
 || deföed 
__AVR_ATmega1280__


135 
	#LED_DDR
 
DDRB


	)

136 
	#LED_PORT
 
PORTB


	)

137 
	#LED_PIN
 
PINB


	)

138 
	#LED
 
PINB7


	)

139 #ñi‡
deföed
 
__AVR_ATmega1284P__
 || deföed 
__AVR_ATmega644P__


140 
	#LED_DDR
 
DDRB


	)

141 
	#LED_PORT
 
PORTB


	)

142 
	#LED_PIN
 
PINB


	)

143 
	#LED
 
PINB0


	)

147 
	#LED_DDR
 
DDRB


	)

148 
	#LED_PORT
 
PORTB


	)

149 
	#LED_PIN
 
PINB


	)

150 
	#LED
 
PINB5


	)

155 #i‡
deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
)

156 
	#MONITOR
 1

	)

162 
	#SIG1
 0x1E

163 

	)

164 #i‡
deföed
 
__AVR_ATmega1280__


165 
	#SIG2
 0x97

	)

166 
	#SIG3
 0x03

	)

167 
	#PAGE_SIZE
 0x80U

168 

	)

169 #ñi‡
deföed
 
__AVR_ATmega1284P__


170 
	#SIG2
 0x97

	)

171 
	#SIG3
 0x05

	)

172 
	#PAGE_SIZE
 0x080U

173 

	)

174 #ñi‡
deföed
 
__AVR_ATmega1281__


175 
	#SIG2
 0x97

	)

176 
	#SIG3
 0x04

	)

177 
	#PAGE_SIZE
 0x80U

178 

	)

179 #ñi‡
deföed
 
__AVR_ATmega644P__


180 
	#SIG2
 0x96

	)

181 
	#SIG3
 0x0A

	)

182 
	#PAGE_SIZE
 0x080U

183 

	)

184 #ñi‡
deföed
 
__AVR_ATmega128__


185 
	#SIG2
 0x97

	)

186 
	#SIG3
 0x02

	)

187 
	#PAGE_SIZE
 0x80U

188 

	)

189 #ñi‡
deföed
 
__AVR_ATmega64__


190 
	#SIG2
 0x96

	)

191 
	#SIG3
 0x02

	)

192 
	#PAGE_SIZE
 0x80U

193 

	)

194 #ñi‡
deföed
 
__AVR_ATmega32__


195 
	#SIG2
 0x95

	)

196 
	#SIG3
 0x02

	)

197 
	#PAGE_SIZE
 0x40U

198 

	)

199 #ñi‡
deföed
 
__AVR_ATmega16__


200 
	#SIG2
 0x94

	)

201 
	#SIG3
 0x03

	)

202 
	#PAGE_SIZE
 0x40U

203 

	)

204 #ñi‡
deföed
 
__AVR_ATmega8__


205 
	#SIG2
 0x93

	)

206 
	#SIG3
 0x07

	)

207 
	#PAGE_SIZE
 0x20U

208 

	)

209 #ñi‡
deföed
 
__AVR_ATmega88__


210 
	#SIG2
 0x93

	)

211 
	#SIG3
 0x0a

	)

212 
	#PAGE_SIZE
 0x20U

213 

	)

214 #ñi‡
deföed
 
__AVR_ATmega168__


215 
	#SIG2
 0x94

	)

216 
	#SIG3
 0x06

	)

217 
	#PAGE_SIZE
 0x40U

218 

	)

219 #ñi‡
deföed
 
__AVR_ATmega328P__


220 
	#SIG2
 0x95

	)

221 
	#SIG3
 0x0F

	)

222 
	#PAGE_SIZE
 0x40U

223 

	)

224 #ñi‡
deföed
 
__AVR_ATmega162__


225 
	#SIG2
 0x94

	)

226 
	#SIG3
 0x04

	)

227 
	#PAGE_SIZE
 0x40U

228 

	)

229 #ñi‡
deföed
 
__AVR_ATmega163__


230 
	#SIG2
 0x94

	)

231 
	#SIG3
 0x02

	)

232 
	#PAGE_SIZE
 0x40U

233 

	)

234 #ñi‡
deföed
 
__AVR_ATmega169__


235 
	#SIG2
 0x94

	)

236 
	#SIG3
 0x05

	)

237 
	#PAGE_SIZE
 0x40U

238 

	)

239 #ñi‡
deföed
 
__AVR_ATmega8515__


240 
	#SIG2
 0x93

	)

241 
	#SIG3
 0x06

	)

242 
	#PAGE_SIZE
 0x20U

243 

	)

244 #ñi‡
deföed
 
__AVR_ATmega8535__


245 
	#SIG2
 0x93

	)

246 
	#SIG3
 0x08

	)

247 
	#PAGE_SIZE
 0x20U

249 

	)

252 
putch
();

253 
gëch
();

254 
gëNch
(
uöt8_t
);

255 
byã_ª•⁄£
(
uöt8_t
);

256 
nŸhög_ª•⁄£
();

257 
gëhex
();

258 
puthex
();

259 
Êash_Àd
(
uöt8_t
);

262 
	uaddªss_uni⁄
 {

263 
uöt16_t
 
	mw‹d
;

264 
uöt8_t
 
	mbyã
[2];

265 } 
	gaddªss
;

267 
	uÀngth_uni⁄
 {

268 
uöt16_t
 
	mw‹d
;

269 
uöt8_t
 
	mbyã
[2];

270 } 
	gÀngth
;

272 
	sÊags_°ru˘
 {

273 
	mì¥om
 : 1;

274 
	mømpz
 : 1;

275 } 
	gÊags
;

277 
uöt8_t
 
	gbuff
[256];

278 
uöt8_t
 
	gaddªss_high
;

280 
uöt8_t
 
	g∑gesz
=0x80;

282 
uöt8_t
 
	gi
;

283 
uöt8_t
 
	gboŸu¨t
 = 0;

285 
uöt8_t
 
	gîr‹_cou¡
 = 0;

287 (*
≠p_°¨t
)() = 0x0000;

291 
	$maö
()

293 
uöt8_t
 
ch
,
ch2
;

294 
uöt16_t
 
w
;

296 #ifde‡
WATCHDOG_MODS


297 
ch
 = 
MCUSR
;

298 
MCUSR
 = 0;

300 
WDTCSR
 |
	`_BV
(
WDCE
Ë| _BV(
WDE
);

301 
WDTCSR
 = 0;

304 i‡(! (
ch
 & 
	`_BV
(
EXTRF
)))

305 
	`≠p_°¨t
();

307 
asm
 volatile("nop\n\t");

312 #ifde‡
__AVR_ATmega128__


313 
BL_DDR
 &~
	`_BV
(
BL0
);

314 
BL_DDR
 &~
	`_BV
(
BL1
);

315 
BL_PORT
 |
	`_BV
(
BL0
);

316 
BL_PORT
 |
	`_BV
(
BL1
);

327 #ifde‡
__AVR_ATmega128__


329 if(
	`bô_is_˛ór
(
BL_PIN
, 
BL0
)) {

330 
boŸu¨t
 = 1;

332 if(
	`bô_is_˛ór
(
BL_PIN
, 
BL1
)) {

333 
boŸu¨t
 = 2;

337 #i‡
deföed
 
__AVR_ATmega1280__
 || deföed 
__AVR_ATmega1284P__
 || deföed 
__AVR_ATmega644P__


340 
boŸu¨t
 = 1;

344 if(
	`pgm_ªad_byã_√¨
(0x0000) != 0xFF) {

346 #ifde‡
__AVR_ATmega128__


348 if(!
boŸu¨t
) {

349 
	`≠p_°¨t
();

360 #ifde‡
__AVR_ATmega128__


362 if(!
boŸu¨t
) {

363 
boŸu¨t
 = 1;

369 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1284P__
Ë|| deföed(
__AVR_ATmega644P__
)

370 if(
boŸu¨t
 == 1) {

371 
UBRR0L
 = (
uöt8_t
)(
F_CPU
/(
BAUD_RATE
*16L)-1);

372 
UBRR0H
 = (
F_CPU
/(
BAUD_RATE
*16L)-1) >> 8;

373 
UCSR0A
 = 0x00;

374 
UCSR0C
 = 0x06;

375 
UCSR0B
 = 
	`_BV
(
TXEN0
)|_BV(
RXEN0
);

377 if(
boŸu¨t
 == 2) {

378 
UBRR1L
 = (
uöt8_t
)(
F_CPU
/(
BAUD_RATE
*16L)-1);

379 
UBRR1H
 = (
F_CPU
/(
BAUD_RATE
*16L)-1) >> 8;

380 
UCSR1A
 = 0x00;

381 
UCSR1C
 = 0x06;

382 
UCSR1B
 = 
	`_BV
(
TXEN1
)|_BV(
RXEN1
);

384 #ñi‡
deföed
 
__AVR_ATmega163__


385 
UBRR
 = (
uöt8_t
)(
F_CPU
/(
BAUD_RATE
*16L)-1);

386 
UBRRHI
 = (
F_CPU
/(
BAUD_RATE
*16L)-1) >> 8;

387 
UCSRA
 = 0x00;

388 
UCSRB
 = 
	`_BV
(
TXEN
)|_BV(
RXEN
);

389 #ñi‡
	`deföed
(
__AVR_ATmega168__
Ë|| deföed(
__AVR_ATmega328P__
)

391 #ifde‡
DOUBLE_SPEED


392 
UCSR0A
 = (1<<
U2X0
);

393 
UBRR0L
 = (
uöt8_t
)(
F_CPU
/(
BAUD_RATE
*8L)-1);

394 
UBRR0H
 = (
F_CPU
/(
BAUD_RATE
*8L)-1) >> 8;

396 
UBRR0L
 = (
uöt8_t
)(
F_CPU
/(
BAUD_RATE
*16L)-1);

397 
UBRR0H
 = (
F_CPU
/(
BAUD_RATE
*16L)-1) >> 8;

400 
UCSR0B
 = (1<<
RXEN0
Ë| (1<<
TXEN0
);

401 
UCSR0C
 = (1<<
UCSZ00
Ë| (1<<
UCSZ01
);

406 
DDRD
 &~
	`_BV
(
PIND0
);

407 
PORTD
 |
	`_BV
(
PIND0
);

408 #ñi‡
deföed
 
__AVR_ATmega8__


410 
UBRRH
 = (((
F_CPU
/
BAUD_RATE
)/16)-1)>>8;

411 
UBRRL
 = (((
F_CPU
/
BAUD_RATE
)/16)-1);

412 
UCSRB
 = (1<<
RXEN
)|(1<<
TXEN
);

413 
UCSRC
 = (1<<
URSEL
)|(1<<
UCSZ1
)|(1<<
UCSZ0
);

416 
UBRRL
 = (
uöt8_t
)(
F_CPU
/(
BAUD_RATE
*16L)-1);

417 
UBRRH
 = (
F_CPU
/(
BAUD_RATE
*16L)-1) >> 8;

418 
UCSRA
 = 0x00;

419 
UCSRC
 = 0x06;

420 
UCSRB
 = 
	`_BV
(
TXEN
)|_BV(
RXEN
);

423 #i‡
deföed
 
__AVR_ATmega1280__


428 
DDRE
 &~
	`_BV
(
PINE0
);

429 
PORTE
 |
	`_BV
(
PINE0
);

434 
LED_DDR
 |
	`_BV
(
LED
);

438 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1284P__
Ë|| deföed(
__AVR_ATmega644P__
)

440 
	`Êash_Àd
(
NUM_LED_FLASHES
 + 
boŸu¨t
);

442 
	`Êash_Àd
(
NUM_LED_FLASHES
);

453 
ch
 = 
	`gëch
();

458 if(
ch
=='0') {

459 
	`nŸhög_ª•⁄£
();

466 if(
ch
=='1') {

467 i‡(
	`gëch
() == ' ') {

468 
	`putch
(0x14);

469 
	`putch
('A');

470 
	`putch
('V');

471 
	`putch
('R');

472 
	`putch
(' ');

473 
	`putch
('I');

474 
	`putch
('S');

475 
	`putch
('P');

476 
	`putch
(0x10);

478 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

479 
	`≠p_°¨t
();

485 if(
ch
=='@') {

486 
ch2
 = 
	`gëch
();

487 i‡(
ch2
>0x85Ë
	`gëch
();

488 
	`nŸhög_ª•⁄£
();

493 if(
ch
=='A') {

494 
ch2
 = 
	`gëch
();

495 if(
ch2
==0x80Ë
	`byã_ª•⁄£
(
HW_VER
);

496 if(
ch2
==0x81Ë
	`byã_ª•⁄£
(
SW_MAJOR
);

497 if(
ch2
==0x82Ë
	`byã_ª•⁄£
(
SW_MINOR
);

498 if(
ch2
==0x98Ë
	`byã_ª•⁄£
(0x03);

499 
	`byã_ª•⁄£
(0x00);

504 if(
ch
=='B') {

505 
	`gëNch
(20);

506 
	`nŸhög_ª•⁄£
();

511 if(
ch
=='E') {

512 
	`gëNch
(5);

513 
	`nŸhög_ª•⁄£
();

519 if(
ch
=='P' || ch=='R') {

520 
	`nŸhög_ª•⁄£
();

525 if(
ch
=='Q') {

526 
	`nŸhög_ª•⁄£
();

527 #ifde‡
WATCHDOG_MODS


529 
WDTCSR
 = 
	`_BV
(
WDE
);

538 if(
ch
=='U') {

539 
addªss
.
byã
[0] = 
	`gëch
();

540 
addªss
.
byã
[1] = 
	`gëch
();

541 
	`nŸhög_ª•⁄£
();

546 if(
ch
=='V') {

547 i‡(
	`gëch
() == 0x30) {

548 
	`gëch
();

549 
ch
 = 
	`gëch
();

550 
	`gëch
();

551 i‡(
ch
 == 0) {

552 
	`byã_ª•⁄£
(
SIG1
);

553 } i‡(
ch
 == 1) {

554 
	`byã_ª•⁄£
(
SIG2
);

556 
	`byã_ª•⁄£
(
SIG3
);

559 
	`gëNch
(3);

560 
	`byã_ª•⁄£
(0x00);

566 if(
ch
=='d') {

567 
Àngth
.
byã
[1] = 
	`gëch
();

568 
Àngth
.
byã
[0] = 
	`gëch
();

569 
Êags
.
ì¥om
 = 0;

570 i‡(
	`gëch
(Ë='E'Ë
Êags
.
ì¥om
 = 1;

571 
w
=0;w<
Àngth
.
w‹d
;w++) {

572 
buff
[
w
] = 
	`gëch
();

574 i‡(
	`gëch
() == ' ') {

575 i‡(
Êags
.
ì¥om
) {

576 
addªss
.
w‹d
 <<= 1;

577 
w
=0;w<
Àngth
.
w‹d
;w++) {

578 #i‡
	`deföed
(
__AVR_ATmega168__
Ë|| deföed(
__AVR_ATmega328P__
)

579 
EECR
 & (1<<
EEPE
));

580 
EEAR
 = (
uöt16_t
)(*)
addªss
.
w‹d
;

581 
EEDR
 = 
buff
[
w
];

582 
EECR
 |(1<<
EEMPE
);

583 
EECR
 |(1<<
EEPE
);

585 
	`ì¥om_wrôe_byã
((*)
addªss
.
w‹d
,
buff
[
w
]);

587 
addªss
.
w‹d
++;

591 i‡(
addªss
.
byã
[1]>127Ë
addªss_high
 = 0x01;

592 
addªss_high
 = 0x00;

593 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1281__
Ë|| deföed(
__AVR_ATmega1284P__
)

594 
RAMPZ
 = 
addªss_high
;

596 
addªss
.
w‹d
 =áddress.word << 1;

598 i‡((
Àngth
.
byã
[0] & 0x01)ËÀngth.
w‹d
++;

599 
	`˛i
();

600 #i‡
	`deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1281__
Ë|| deföed(
__AVR_ATmega1284P__
Ë|| deföed(
__AVR_ATmega644P__
)

601 
	`bô_is_£t
(
EECR
,
EEPE
));

603 
	`bô_is_£t
(
EECR
,
EEWE
));

605 
asm
 volatile(

624 #ifde‡
__AVR_ATmega163__


637 #ifde‡
__AVR_ATmega163__


664 #ifde‡
__AVR_ATmega163__


670 #ifde‡
__AVR_ATmega163__


683 #ifde‡
__AVR_ATmega163__


699 #i‡
deföed
 
__AVR_ATmega168__
 || 
__AVR_ATmega328P__
 || 
__AVR_ATmega128__
 || 
__AVR_ATmega1280__
 || 
__AVR_ATmega1281__
 || 
__AVR_ATmega1284P__
 || 
__AVR_ATmega644P__


700 : "=m" (
SPMCSR
Ë: "M" (
PAGE_SIZE
) : "r0","r16","r17","r24","r25","r28","r29","r30","r31"

702 : "=m" (
SPMCR
Ë: "M" (
PAGE_SIZE
) : "r0","r16","r17","r24","r25","r28","r29","r30","r31"

708 
	`putch
(0x14);

709 
	`putch
(0x10);

711 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

712 
	`≠p_°¨t
();

718 if(
ch
=='t') {

719 
Àngth
.
byã
[1] = 
	`gëch
();

720 
Àngth
.
byã
[0] = 
	`gëch
();

721 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1284P__
Ë|| deföed(
__AVR_ATmega644P__
)

722 i‡(
addªss
.
w‹d
>0x7FFFË
Êags
.
ømpz
 = 1;

723 
Êags
.
ømpz
 = 0;

725 
addªss
.
w‹d
 =áddress.word << 1;

726 i‡(
	`gëch
(Ë='E'Ë
Êags
.
ì¥om
 = 1;

727 
Êags
.
ì¥om
 = 0;

728 i‡(
	`gëch
() == ' ') {

729 
	`putch
(0x14);

730 
w
=0;w < 
Àngth
.
w‹d
;w++) {

731 i‡(
Êags
.
ì¥om
) {

732 #i‡
	`deföed
(
__AVR_ATmega168__
Ë|| deföed(
__AVR_ATmega328P__
)

733 
EECR
 & (1<<
EEPE
));

734 
EEAR
 = (
uöt16_t
)(*)
addªss
.
w‹d
;

735 
EECR
 |(1<<
EERE
);

736 
	`putch
(
EEDR
);

738 
	`putch
(
	`ì¥om_ªad_byã
((*)
addªss
.
w‹d
));

740 
addªss
.
w‹d
++;

744 i‡(!
Êags
.
ømpz
Ë
	`putch
(
	`pgm_ªad_byã_√¨
(
addªss
.
w‹d
));

745 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1284P__
)

746 
	`putch
(
	`pgm_ªad_byã_Ár
(
addªss
.
w‹d
 + 0x10000));

749 
addªss
.
w‹d
++;

752 
	`putch
(0x10);

758 if(
ch
=='u') {

759 i‡(
	`gëch
() == ' ') {

760 
	`putch
(0x14);

761 
	`putch
(
SIG1
);

762 
	`putch
(
SIG2
);

763 
	`putch
(
SIG3
);

764 
	`putch
(0x10);

766 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

767 
	`≠p_°¨t
();

773 if(
ch
=='v') {

774 
	`byã_ª•⁄£
(0x00);

778 #i‡
deföed
 
MONITOR


783 if(
ch
=='!') {

784 
ch
 = 
	`gëch
();

785 if(
ch
=='!') {

786 
ch
 = 
	`gëch
();

787 if(
ch
=='!') {

788 
PGM_P
 
wñcome
 = "";

789 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
)

790 
uöt16_t
 
exèddr
;

792 
uöt8_t
 
addæ
, 
addrh
;

794 #ifde‡
CRUMB128


795 
wñcome
 = "ATmegaBOOT / Crumb128 - (C) J.P.Kyle, E.Lins - 050815\n\r";

796 #ñi‡
deföed
 
PROBOMEGA128


797 
wñcome
 = "ATmegaBOOT / PROBOmega128 - (C) J.P.Kyle, E.Lins - 050815\n\r";

798 #ñi‡
deföed
 
SAVVY128


799 
wñcome
 = "ATmegaBOOT / Savvy128 - (C) J.P.Kyle, E.Lins - 050815\n\r";

800 #ñi‡
deföed
 
__AVR_ATmega1280__


801 
wñcome
 = "ATmegaBOOT / Arduino Mega - (C) Arduino LLC - 090930\n\r";

805 
LED_DDR
 |
	`_BV
(
LED
);

806 
LED_PORT
 &~
	`_BV
(
LED
);

809 
i
=0; 
wñcome
[i] != '\0'; ++i) {

810 
	`putch
(
wñcome
[
i
]);

815 
	`putch
('\n');

816 
	`putch
('\r');

817 
	`putch
(':');

818 
	`putch
(' ');

820 
ch
 = 
	`gëch
();

821 
	`putch
(
ch
);

824 if(
ch
 == 't') {

825 if(
	`bô_is_£t
(
LED_PIN
,
LED
)) {

826 
LED_PORT
 &~
	`_BV
(
LED
);

827 
	`putch
('1');

829 
LED_PORT
 |
	`_BV
(
LED
);

830 
	`putch
('0');

835 if(
ch
 == 'r') {

836 
ch
 = 
	`gëch
(); 
	`putch
(ch);

837 
addrh
 = 
	`gëhex
();

838 
addæ
 = 
	`gëhex
();

839 
	`putch
('=');

840 
ch
 = *(
uöt8_t
 *)((
addrh
 << 8Ë+ 
addæ
);

841 
	`puthex
(
ch
);

845 if(
ch
 == 'w') {

846 
ch
 = 
	`gëch
(); 
	`putch
(ch);

847 
addrh
 = 
	`gëhex
();

848 
addæ
 = 
	`gëhex
();

849 
ch
 = 
	`gëch
(); 
	`putch
(ch);

850 
ch
 = 
	`gëhex
();

851 *(
uöt8_t
 *)((
addrh
 << 8Ë+ 
addæ
Ë
ch
;

855 if(
ch
 == 'u') {

857 
	`putch
(
	`gëch
());

860 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
)

862 if(
ch
 == 'b') {

863 
	`putch
('b');

864 
	`putch
('u');

865 
	`putch
('s');

866 
MCUCR
 = 0x80;

867 
XMCRA
 = 0;

868 
XMCRB
 = 0;

869 
exèddr
 = 0x1100;

871 
ch
 = *(vﬁ©ûê
uöt8_t
 *)
exèddr
;

872 if(++
exèddr
 == 0) {

873 
exèddr
 = 0x1100;

879 if(
ch
 == 'j') {

880 
	`≠p_°¨t
();

890 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
) {

891 
	`≠p_°¨t
();

895 
	}
}

898 
	$gëhexnib
() {

899 
a
;

900 
a
 = 
	`gëch
(); 
	`putch
(a);

901 if(
a
 >= 'a') {

902  (
a
 - 'a' + 0x0a);

903 } if(
a
 >= '0') {

904 (
a
 - '0');

906  
a
;

907 
	}
}

910 
	$gëhex
() {

911  (
	`gëhexnib
() << 4) + gethexnib();

912 
	}
}

915 
	$puthex
(
ch
) {

916 
ah
;

918 
ah
 = 
ch
 >> 4;

919 if(
ah
 >= 0x0a) {

920 
ah
 =áh - 0x0a + 'a';

922 
ah
 += '0';

925 
ch
 &= 0x0f;

926 if(
ch
 >= 0x0a) {

927 
ch
 = ch - 0x0a + 'a';

929 
ch
 += '0';

932 
	`putch
(
ah
);

933 
	`putch
(
ch
);

934 
	}
}

937 
	$putch
(
ch
)

939 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1284P__
Ë|| deföed(
__AVR_ATmega644P__
)

940 if(
boŸu¨t
 == 1) {

941 !(
UCSR0A
 & 
	`_BV
(
UDRE0
)));

942 
UDR0
 = 
ch
;

944 i‡(
boŸu¨t
 == 2) {

945 !(
UCSR1A
 & 
	`_BV
(
UDRE1
)));

946 
UDR1
 = 
ch
;

948 #ñi‡
	`deföed
(
__AVR_ATmega168__
Ë|| deföed(
__AVR_ATmega328P__
)

949 !(
UCSR0A
 & 
	`_BV
(
UDRE0
)));

950 
UDR0
 = 
ch
;

953 !(
UCSRA
 & 
	`_BV
(
UDRE
)));

954 
UDR
 = 
ch
;

956 
	}
}

959 
	$gëch
()

961 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1284P__
Ë|| deföed(
__AVR_ATmega644P__
)

962 
uöt32_t
 
cou¡
 = 0;

963 if(
boŸu¨t
 == 1) {

964 !(
UCSR0A
 & 
	`_BV
(
RXC0
))) {

967 
cou¡
++;

968 i‡(
cou¡
 > 
MAX_TIME_COUNT
)

969 
	`≠p_°¨t
();

972  
UDR0
;

974 if(
boŸu¨t
 == 2) {

975 !(
UCSR1A
 & 
	`_BV
(
RXC1
))) {

978 
cou¡
++;

979 i‡(
cou¡
 > 
MAX_TIME_COUNT
)

980 
	`≠p_°¨t
();

983  
UDR1
;

986 #ñi‡
	`deföed
(
__AVR_ATmega168__
Ë|| deföed(
__AVR_ATmega328P__
)

987 
uöt32_t
 
cou¡
 = 0;

988 !(
UCSR0A
 & 
	`_BV
(
RXC0
))){

991 
cou¡
++;

992 i‡(
cou¡
 > 
MAX_TIME_COUNT
)

993 
	`≠p_°¨t
();

995  
UDR0
;

998 
uöt32_t
 
cou¡
 = 0;

999 !(
UCSRA
 & 
	`_BV
(
RXC
))){

1002 
cou¡
++;

1003 i‡(
cou¡
 > 
MAX_TIME_COUNT
)

1004 
	`≠p_°¨t
();

1006  
UDR
;

1008 
	}
}

1011 
	$gëNch
(
uöt8_t
 
cou¡
)

1013 
cou¡
--) {

1014 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1284P__
Ë|| deföed(
__AVR_ATmega644P__
)

1015 if(
boŸu¨t
 == 1) {

1016 !(
UCSR0A
 & 
	`_BV
(
RXC0
)));

1017 
UDR0
;

1019 if(
boŸu¨t
 == 2) {

1020 !(
UCSR1A
 & 
	`_BV
(
RXC1
)));

1021 
UDR1
;

1023 #ñi‡
	`deföed
(
__AVR_ATmega168__
Ë|| deföed(
__AVR_ATmega328P__
)

1024 
	`gëch
();

1030 
	`gëch
();

1033 
	}
}

1036 
	$byã_ª•⁄£
(
uöt8_t
 
vÆ
)

1038 i‡(
	`gëch
() == ' ') {

1039 
	`putch
(0x14);

1040 
	`putch
(
vÆ
);

1041 
	`putch
(0x10);

1043 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

1044 
	`≠p_°¨t
();

1046 
	}
}

1049 
	$nŸhög_ª•⁄£
()

1051 i‡(
	`gëch
() == ' ') {

1052 
	`putch
(0x14);

1053 
	`putch
(0x10);

1055 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

1056 
	`≠p_°¨t
();

1058 
	}
}

1060 
	$Êash_Àd
(
uöt8_t
 
cou¡
)

1062 
cou¡
--) {

1063 
LED_PORT
 |
	`_BV
(
LED
);

1064 
	`_dñay_ms
(100);

1065 
LED_PORT
 &~
	`_BV
(
LED
);

1066 
	`_dñay_ms
(100);

1068 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/U8glib.cpp

38 
	~"U8glib.h
"

42 
uöt8_t
 
	gU8GLIB
::
	$öôSPI
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
)

44 
	`¥ï¨e
();

45  
	`u8g_InôSPI
(&
u8g
, 
dev
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
);

46 
	}
}

48 
uöt8_t
 
	gU8GLIB
::
	$öôHWSPI
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
)

50 
	`¥ï¨e
();

51  
	`u8g_InôHWSPI
(&
u8g
, 
dev
, 
cs
, 
a0
, 
ª£t
);

52 
	}
}

54 
uöt8_t
 
	gU8GLIB
::
	$öôI2C
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
›ti⁄s
)

56 
	`¥ï¨e
();

57  
	`u8g_InôI2C
(&
u8g
, 
dev
, 
›ti⁄s
);

58 
	}
}

60 
uöt8_t
 
	gU8GLIB
::
	$öô8Bô
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

61 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
, uöt8_à
ª£t
)

63 
	`¥ï¨e
();

64  
	`u8g_Inô8Bô
(&
u8g
, 
dev
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
cs2
, 
di
, 
rw
, 
ª£t
);

65 
	}
}

67 
uöt8_t
 
	gU8GLIB
::
	$öô8BôFixedP‹t
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
í
, uöt8_à
cs
, uöt8_à
di
, uöt8_à
rw
, uöt8_à
ª£t
)

69 
	`¥ï¨e
();

70  
	`u8g_Inô8BôFixedP‹t
(&
u8g
, 
dev
, 
í
, 
cs
, 
di
, 
rw
, 
ª£t
);

71 
	}
}

73 
uöt8_t
 
	gU8GLIB
::
	$öôRW8Bô
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

74 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
wr
, uöt8_à
rd
, uöt8_à
ª£t
)

76 
	`¥ï¨e
();

77  
	`u8g_InôRW8Bô
(&
u8g
, 
dev
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
cs
, 
a0
, 
wr
, 
rd
, 
ª£t
);

78 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/U8glib.h

38 #i‚de‡
_CPP_U8GLIB


39 
	#_CPP_U8GLIB


	)

41 
	~<Pröt.h
>

42 
	~"utûôy/u8g.h
"

45 ˛as†
	cU8GLIB
 : 
public
 
Pröt


47 
¥iv©e
:

48 
u8g_t
 
u8g
;

49 
u8g_uöt_t
 
	mtx
, 
	mty
;

50 
uöt8_t
 
	mis_begö
;

52 
	$¥ï¨e
(Ë{ 
tx
 = 0; 
ty
 = 0; 
is_begö
 = 0; }

53 
	$cbegö
(Ë{ i‡–
is_begö
 =0 ) { is_begö = 1; 
	`u8g_Begö
(&
u8g
); } 
	}
}

54 
uöt8_t
 
öôSPI
(
u8g_dev_t
 *
dev
, uöt8_à
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
);

55 
uöt8_t
 
öôHWSPI
(
u8g_dev_t
 *
dev
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
);

56 
uöt8_t
 
öôI2C
(
u8g_dev_t
 *
dev
, uöt8_à
›ti⁄s
);

57 
	g¥Ÿe˘ed
:

58 
uöt8_t
 
öô8BôFixedP‹t
(
u8g_dev_t
 *
dev
, uöt8_à
í
, uöt8_à
cs
, uöt8_à
di
, uöt8_à
rw
, uöt8_à
ª£t
);

59 
	g¥iv©e
:

60 
uöt8_t
 
öô8Bô
(
u8g_dev_t
 *
dev
, uöt8_à
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

61 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE);

62 
uöt8_t
 
öôRW8Bô
(
u8g_dev_t
 *
dev
, uöt8_à
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

63 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
wr
, uöt8_à
rd
, uöt8_à
ª£t
);

64 
	gpublic
:

67 
	$U8GLIB
()

68 { 
	}
}

69 
	$U8GLIB
(
u8g_dev_t
 *
dev
)

70 { 
	`¥ï¨e
(); 
	`u8g_Inô
(&
u8g
, 
dev
); 
	}
}

71 
	$U8GLIB
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
)

72 { 
	`öôSPI
(
dev
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
); 
	}
}

73 
	$U8GLIB
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
)

74 { 
	`öôHWSPI
(
dev
, 
cs
, 
a0
, 
ª£t
); 
	}
}

75 
	$U8GLIB
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
›ti⁄s
)

76 { 
	`öôI2C
(
dev
, 
›ti⁄s
); 
	}
}

77 
	$U8GLIB
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

78 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
, uöt8_à
ª£t
)

79 { 
	`öô8Bô
(
dev
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
cs2
, 
di
, 
rw
, 
ª£t
); 
	}
}

80 
	$U8GLIB
(
u8g_dev_t
 *
dev
, 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

81 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
wr
, uöt8_à
rd
, uöt8_à
ª£t
)

82 { 
	`öôRW8Bô
(
dev
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
cs
, 
a0
, 
wr
, 
rd
, 
ª£t
); 
	}
}

84 
uöt8_t
 
	$begö
(Ë{ 
is_begö
 = 1;  
	`u8g_Begö
(&
u8g
); 
	}
}

86 
	$£tPrötPos
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
Ë{ 
tx
 = x; 
ty
 = y; 
	}
}

87 
u8g_t
 *
	$gëU8g
(Ë{  &
u8g
; 
	}
}

91 #i‡
deföed
(
ARDUINO
) && ARDUINO >= 100

92 
size_t
 
	$wrôe
(
uöt8_t
 
c
Ë{ 
tx
 +
	`u8g_DøwGlyph
(&
u8g
,Åx, 
ty
, c);  1;
	}
}

94 
	$wrôe
(
uöt8_t
 
c
Ë{ 
tx
 +
	`u8g_DøwGlyph
(&
u8g
,Åx, 
ty
, c); 
	}
}

98 
	$undoRŸ©i⁄
(Ë{ 
	`u8g_UndoRŸ©i⁄
(&
u8g
); 
	}
}

99 
	$£tRŸ90
(Ë{ 
	`u8g_SëRŸ90
(&
u8g
); 
	}
}

100 
	$£tRŸ180
(Ë{ 
	`u8g_SëRŸ180
(&
u8g
); 
	}
}

101 
	$£tRŸ270
(Ë{ 
	`u8g_SëRŸ270
(&
u8g
); 
	}
}

104 
	$undoSˇÀ
(Ë{ 
	`u8g_UndoSˇÀ
(&
u8g
); 
	}
}

105 
	$£tSˇÀ2x2
(Ë{ 
	`u8g_SëSˇÀ2x2
(&
u8g
); 
	}
}

108 
	$fú°Page
(Ë{ 
	`cbegö
(); 
	`u8g_Fú°Page
(&
u8g
); 
	}
}

109 
uöt8_t
 
	$√xtPage
(Ë{  
	`u8g_NextPage
(&
u8g
); 
	}
}

112 
uöt8_t
 
	$£tC⁄åa°
(
uöt8_t
 
c⁄åa°
Ë{ 
	`cbegö
();  
	`u8g_SëC⁄åa°
(&
u8g
, c⁄åa°); 
	}
}

113 
	$¶ìpOn
(Ë{ 
	`u8g_SÀïOn
(&
u8g
); 
	}
}

114 
	$¶ìpOff
(Ë{ 
	`u8g_SÀïOff
(&
u8g
); 
	}
}

117 
	$£tCﬁ‹Index
(
uöt8_t
 
cﬁ‹_ödex
Ë{ 
	`u8g_SëCﬁ‹Index
(&
u8g
, cﬁ‹_ödex); 
	}
}

118 
uöt8_t
 
	$gëCﬁ‹Index
(Ë{  
	`u8g_GëCﬁ‹Index
(&
u8g
); 
	}
}

120 
	$£tDeÁu…F‹egroundCﬁ‹
(Ë{ 
	`u8g_SëDeÁu…F‹egroundCﬁ‹
(&
u8g
); 
	}
}

121 
	$£tDeÁu…BackgroundCﬁ‹
(Ë{ 
	`u8g_SëDeÁu…BackgroundCﬁ‹
(&
u8g
); 
	}
}

122 
	$£tDeÁu…MidCﬁ‹
(Ë{ 
	`u8g_SëDeÁu…MidCﬁ‹
(&
u8g
); 
	}
}

124 
u8g_uöt_t
 
	$gëWidth
(Ë{  
	`u8g_GëWidth
(&
u8g
); 
	}
}

125 
u8g_uöt_t
 
	$gëHeight
(Ë{  
	`u8g_GëHeight
(&
u8g
); 
	}
}

126 
uöt8_t
 
	$gëMode
(Ë{  
	`u8g_GëMode
(&
u8g
); 
	}
}

128 
	$døwPixñ
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
Ë{  
	`u8g_DøwPixñ
(&
u8g
, x, y); 
	}
}

129 
	$døwHLöe
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
Ë{ 
	`u8g_DøwHLöe
(&
u8g
, x, y, w); 
	}
}

130 
	$døwVLöe
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
h
Ë{ 
	`u8g_DøwVLöe
(&
u8g
, x, y, h); 
	}
}

131 
	$døwLöe
(
u8g_uöt_t
 
x1
, u8g_uöt_à
y1
, u8g_uöt_à
x2
, u8g_uöt_à
y2
Ë{ 
	`u8g_DøwLöe
(&
u8g
, x1, y1, x2, y2); 
	}
}

133 
	$døwFøme
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
Ë{ 
	`u8g_DøwFøme
(&
u8g
, x, y, w, h); 
	}
}

134 
	$døwRFøme
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, u8g_uöt_à
r
Ë{ 
	`u8g_DøwRFøme
(&
u8g
, x, y, w, h,r); 
	}
}

135 
	$døwBox
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
Ë{ 
	`u8g_DøwBox
(&
u8g
, x, y, w, h); 
	}
}

136 
	$døwRBox
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, u8g_uöt_à
r
Ë{ 
	`u8g_DøwRBox
(&
u8g
, x, y, w, h,r); 
	}
}

138 
	$døwCú˛e
(
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›t
 = 
U8G_DRAW_ALL
Ë{ 
	`u8g_DøwCú˛e
(&
u8g
, x0, y0,Ñad, o±); 
	}
}

139 
	$døwDisc
(
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›t
 = 
U8G_DRAW_ALL
Ë{ 
	`u8g_DøwDisc
(&
u8g
, x0, y0,Ñad, o±); 
	}
}

142 
	$døwBôm≠
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, u8g_uöt_à
h
, c⁄° 
uöt8_t
 *
bôm≠
)

143 { 
	`u8g_DøwBôm≠
(&
u8g
, 
x
, 
y
, 
˙t
, 
h
, 
bôm≠
); 
	}
}

144 
	$døwBôm≠P
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, u8g_uöt_à
h
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
)

145 { 
	`u8g_DøwBôm≠P
(&
u8g
, 
x
, 
y
, 
˙t
, 
h
, 
bôm≠
); 
	}
}

147 
	$døwXBM
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, c⁄° 
uöt8_t
 *
bôm≠
)

148 { 
	`u8g_DøwXBM
(&
u8g
, 
x
, 
y
, 
w
, 
h
, 
bôm≠
); 
	}
}

149 
	$døwXBMP
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
)

150 { 
	`u8g_DøwXBMP
(&
u8g
, 
x
, 
y
, 
w
, 
h
, 
bôm≠
); 
	}
}

154 
	$£tF⁄t
(c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
Ë{
	`u8g_SëF⁄t
(&
u8g
, f⁄t); 
	}
}

155 
öt8_t
 
	$gëF⁄tAs˚¡
(Ë{  
	`u8g_GëF⁄tAs˚¡
(&
u8g
); 
	}
}

156 
öt8_t
 
	$gëF⁄tDes˚¡
(Ë{  
	`u8g_GëF⁄tDes˚¡
(&
u8g
); 
	}
}

157 
öt8_t
 
	$gëF⁄tLöeS∑cög
(Ë{  
	`u8g_GëF⁄tLöeS∑cög
(&
u8g
); 
	}
}

159 
u8g_uöt_t
 
	$døwSå
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° *
s
Ë{  
	`u8g_DøwSå
(&
u8g
, x, y, s); 
	}
}

160 
u8g_uöt_t
 
	$døwSå90
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° *
s
Ë{  
	`u8g_DøwSå90
(&
u8g
, x, y, s); 
	}
}

161 
u8g_uöt_t
 
	$døwSå180
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° *
s
Ë{  
	`u8g_DøwSå180
(&
u8g
, x, y, s); 
	}
}

162 
u8g_uöt_t
 
	$døwSå270
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° *
s
Ë{  
	`u8g_DøwSå270
(&
u8g
, x, y, s); 
	}
}

163 
u8g_uöt_t
 
	$døwSåP
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
Ë{  
	`u8g_DøwSåP
(&
u8g
, x, y, s); 
	}
}

164 
u8g_uöt_t
 
	$døwSå90P
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
Ë{  
	`u8g_DøwSå90P
(&
u8g
, x, y, s); 
	}
}

165 
u8g_uöt_t
 
	$døwSå180P
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
Ë{  
	`u8g_DøwSå180P
(&
u8g
, x, y, s); 
	}
}

166 
u8g_uöt_t
 
	$døwSå270P
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
Ë{  
	`u8g_DøwSå270P
(&
u8g
, x, y, s); 
	}
}

168 
	$£tF⁄tPosBa£löe
(Ë{ 
	`u8g_SëF⁄tPosBa£löe
(&
u8g
); 
	}
}

169 
	$£tF⁄tPosBŸtom
(Ë{ 
	`u8g_SëF⁄tPosBŸtom
(&
u8g
); 
	}
}

170 
	$£tF⁄tPosCíãr
(Ë{ 
	`u8g_SëF⁄tPosCíãr
(&
u8g
); 
	}
}

171 
	$£tF⁄tPosT›
(Ë{ 
	`u8g_SëF⁄tPosT›
(&
u8g
); 
	}
}

173 
	$£tF⁄tRefHeightText
(Ë{ 
	`u8g_SëF⁄tRefHeightText
(&
u8g
); 
	}
}

174 
	$£tF⁄tRefHeightExãndedText
(Ë{ 
	`u8g_SëF⁄tRefHeightExãndedText
(&
u8g
); 
	}
}

175 
	$£tF⁄tRefHeightAŒ
(Ë{ 
	`u8g_SëF⁄tRefHeightAŒ
(&
u8g
); 
	}
}

176 
	$£tF⁄tLöeS∑cögFa˘‹
(
uöt8_t
 
Á˘‹
Ë{ 
	`u8g_SëF⁄tLöeS∑cögFa˘‹
(&
u8g
, fa˘‹); 
	}
}

179 
u8g_uöt_t
 
	$gëSåPixñWidth
(c⁄° *
s
Ë{  
	`u8g_GëSåPixñWidth
(&
u8g
, s); 
	}
}

180 
u8g_uöt_t
 
	$gëSåPixñWidthP
(
u8g_pgm_uöt8_t
 *
s
Ë{  
	`u8g_GëSåPixñWidthP
(&
u8g
, s); 
	}
}

181 
u8g_uöt_t
 
	$gëSåWidth
(c⁄° *
s
Ë{  
	`u8g_GëSåWidth
(&
u8g
, s); 
	}
}

182 
u8g_uöt_t
 
	$gëSåWidthP
(
u8g_pgm_uöt8_t
 *
s
Ë{  
	`u8g_GëSåWidthP
(&
u8g
, s); 
	}
}

184 
	$£tH¨dw¨eBackup
(
u8g_°©e_cb
 
backup_cb
Ë{ 
	`u8g_SëH¨dw¨eBackup
(&
u8g
, backup_cb); 
	}
}

186 #i‡
deföed
(
ARDUINO
) && ARDUINO >= 100

189 
u8g_uöt_t
 
	$døwSå
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
__FœshSåögHñ≥r
 *
s
Ë{  
	`u8g_DøwSåP
(&
u8g
, x, y, (
u8g_pgm_uöt8_t
 *)s); 
	}
}

190 
u8g_uöt_t
 
	$døwSå90
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
__FœshSåögHñ≥r
 *
s
Ë{  
	`u8g_DøwSå90P
(&
u8g
, x, y, (
u8g_pgm_uöt8_t
 *)s); 
	}
}

191 
u8g_uöt_t
 
	$døwSå180
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
__FœshSåögHñ≥r
 *
s
Ë{  
	`u8g_DøwSå180P
(&
u8g
, x, y, (
u8g_pgm_uöt8_t
 *)s); 
	}
}

192 
u8g_uöt_t
 
	$døwSå270
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
__FœshSåögHñ≥r
 *
s
Ë{  
	`u8g_DøwSå270P
(&
u8g
, x, y, (
u8g_pgm_uöt8_t
 *)s); 
	}
}

194 
u8g_uöt_t
 
	$gëSåPixñWidth
(c⁄° 
__FœshSåögHñ≥r
 *
s
Ë{  
	`u8g_GëSåPixñWidthP
(&
u8g
, (
u8g_pgm_uöt8_t
 *)s); 
	}
}

195 
u8g_uöt_t
 
	$gëSåWidth
(c⁄° 
__FœshSåögHñ≥r
 *
s
Ë{  
	`u8g_GëSåWidthP
(&
u8g
, (
u8g_pgm_uöt8_t
 *)s); 
	}
}

199 
	$£tCurs‹F⁄t
(c⁄° 
u8g_pgm_uöt8_t
 *
curs‹_f⁄t
Ë{ 
	`u8g_SëCurs‹F⁄t
(&
u8g
, curs‹_f⁄t); 
	}
}

200 
	$£tCurs‹StyÀ
(
uöt8_t
 
ícodög
Ë{ 
	`u8g_SëCurs‹StyÀ
(&
u8g
,Éncodög); 
	}
}

201 
	$£tCurs‹Pos
(
u8g_uöt_t
 
curs‹_x
, u8g_uöt_à
curs‹_y
Ë{ 
	`u8g_SëCurs‹Pos
(&
u8g
, curs‹_x, curs‹_y); 
	}
}

202 
	$£tCurs‹Cﬁ‹
(
uöt8_t
 
fg
, uöt8_à
bg
Ë{ 
	`u8g_SëCurs‹Cﬁ‹
(&
u8g
, fg, bg); 
	}
}

203 
	$íabÀCurs‹
(Ë{ 
	`u8g_E«bÀCurs‹
(&
u8g
); 
	}
}

204 
	$dißbÀCurs‹
(Ë{ 
	`u8g_DißbÀCurs‹
(&
u8g
); 
	}
}

205 
	$døwCurs‹
(Ë{ 
	`u8g_DøwCurs‹
(&
u8g
); 
	}
}

209 
	$£tVútuÆS¸ìnDimísi⁄
(
u8g_uöt_t
 
width
, u8g_uöt_à
height
Ë{ 
	`u8g_SëVútuÆS¸ìnDimísi⁄
(&
u8g
, width, height); 
	}
}

210 
uöt8_t
 
	$addToVútuÆS¸ìn
(
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
U8GLIB
 &
chûd_u8g
Ë{  
	`u8g_AddToVútuÆS¸ìn
(&
u8g
, x, y, &chûd_u8g.u8g); 
	}
}

215 ˛as†
	cU8GLIB_DOGS102
 : 
public
 
U8GLIB


217 
public
:

218 
	$U8GLIB_DOGS102
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

219 : 
	$U8GLIB
(&
u8g_dev_uc1701_dogs102_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

221 
	$U8GLIB_DOGS102
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

222 : 
	$U8GLIB
(&
u8g_dev_uc1701_dogs102_hw_•i
, 
cs
, 
a0
, 
ª£t
)

223 { 
	}
}

226 ˛as†
	cU8GLIB_MINI12864
 : 
public
 
U8GLIB


228 
public
:

229 
	$U8GLIB_MINI12864
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

230 : 
	$U8GLIB
(&
u8g_dev_uc1701_möi12864_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

232 
	$U8GLIB_MINI12864
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

233 : 
	$U8GLIB
(&
u8g_dev_uc1701_möi12864_hw_•i
, 
cs
, 
a0
, 
ª£t
)

234 { 
	}
}

237 ˛as†
	cU8GLIB_DOGM132
 : 
public
 
U8GLIB


239 
public
:

240 
	$U8GLIB_DOGM132
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

241 : 
	$U8GLIB
(&
u8g_dev_°7565_dogm132_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

243 
	$U8GLIB_DOGM132
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

244 : 
	$U8GLIB
(&
u8g_dev_°7565_dogm132_hw_•i
, 
cs
, 
a0
, 
ª£t
)

245 { 
	}
}

248 ˛as†
	cU8GLIB_NHD_C12832
 : 
public
 
U8GLIB


250 
public
:

251 
	$U8GLIB_NHD_C12832
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

252 : 
	$U8GLIB
(&
u8g_dev_°7565_nhd_c12832_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

254 
	$U8GLIB_NHD_C12832
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

255 : 
	$U8GLIB
(&
u8g_dev_°7565_nhd_c12832_hw_•i
, 
cs
, 
a0
, 
ª£t
)

256 { 
	}
}

257 
	$U8GLIB_NHD_C12832
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

258 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

259 : 
	$U8GLIB
(&
u8g_dev_°7565_nhd_c12832_∑øŒñ
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
U8G_PIN_NONE
, 
di
, 
rw
, 
ª£t
)

260 { 
	}
}

263 ˛as†
	cU8GLIB_DOGM128
 : 
public
 
U8GLIB


265 
public
:

266 
	$U8GLIB_DOGM128
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

267 : 
	$U8GLIB
(&
u8g_dev_°7565_dogm128_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

269 
	$U8GLIB_DOGM128
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

270 : 
	$U8GLIB
(&
u8g_dev_°7565_dogm128_hw_•i
, 
cs
, 
a0
, 
ª£t
)

271 { 
	}
}

274 ˛as†
	cU8GLIB_LM6059
 : 
public
 
U8GLIB


276 
public
:

277 
	$U8GLIB_LM6059
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

278 : 
	$U8GLIB
(&
u8g_dev_°7565_lm6059_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

280 
	$U8GLIB_LM6059
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

281 : 
	$U8GLIB
(&
u8g_dev_°7565_lm6059_hw_•i
, 
cs
, 
a0
, 
ª£t
)

282 { 
	}
}

285 ˛as†
	cU8GLIB_LM6063
 : 
public
 
U8GLIB


287 
public
:

288 
	$U8GLIB_LM6063
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

289 : 
	$U8GLIB
(&
u8g_dev_°7565_lm6063_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

291 
	$U8GLIB_LM6063
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

292 : 
	$U8GLIB
(&
u8g_dev_°7565_lm6063_hw_•i
, 
cs
, 
a0
, 
ª£t
)

293 { 
	}
}

296 ˛as†
	cU8GLIB_64128N
 : 
public
 
U8GLIB


298 
public
:

299 
	$U8GLIB_64128N
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

300 : 
	$U8GLIB
(&
u8g_dev_°7565_64128n_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

302 
	$U8GLIB_64128N
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

303 : 
	$U8GLIB
(&
u8g_dev_°7565_64128n_hw_•i
, 
cs
, 
a0
, 
ª£t
)

304 { 
	}
}

307 ˛as†
	cU8GLIB_NHD_C12864
 : 
public
 
U8GLIB


309 
public
:

310 
	$U8GLIB_NHD_C12864
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

311 : 
	$U8GLIB
(&
u8g_dev_°7565_nhd_c12864_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

313 
	$U8GLIB_NHD_C12864
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

314 : 
	$U8GLIB
(&
u8g_dev_°7565_nhd_c12864_hw_•i
, 
cs
, 
a0
, 
ª£t
)

315 { 
	}
}

319 ˛as†
	cU8GLIB_ST7920_128X64
 : 
public
 
U8GLIB


321 
public
:

322 
	$U8GLIB_ST7920_128X64
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

323 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

325 
	$U8GLIB_ST7920_128X64
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

326 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_hw_•i
, 
cs
, 
a0
, 
ª£t
)

327 { 
	}
}

328 
	$U8GLIB_ST7920_128X64
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

329 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

330 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
cs2
, 
di
, 
rw
, 
ª£t
)

331 { 
	}
}

337 ˛as†
	cU8GLIB_ST7920_128X64_1X
 : 
public
 
U8GLIB


339 
public
:

340 
	$U8GLIB_ST7920_128X64_1X
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

341 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_sw_•i
, 
sck
, 
mosi
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

343 
	$U8GLIB_ST7920_128X64_1X
(
uöt8_t
 
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

344 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_hw_•i
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

345 { 
	}
}

346 
	$U8GLIB_ST7920_128X64_1X
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

347 
uöt8_t
 
í
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

348 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
U8G_PIN_NONE
, U8G_PIN_NONE, 
di
, 
rw
, 
ª£t
)

349 { 
	}
}

352 ˛as†
	cU8GLIB_ST7920_128X64_4X
 : 
public
 
U8GLIB


354 
public
:

355 
	$U8GLIB_ST7920_128X64_4X
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

356 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_4x_sw_•i
, 
sck
, 
mosi
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

358 
	$U8GLIB_ST7920_128X64_4X
(
uöt8_t
 
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

359 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_4x_hw_•i
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

360 { 
	}
}

361 
	$U8GLIB_ST7920_128X64_4X
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

362 
uöt8_t
 
í
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

363 : 
	$U8GLIB
(&
u8g_dev_°7920_128x64_4x_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
U8G_PIN_NONE
, U8G_PIN_NONE, 
di
, 
rw
, 
ª£t
)

364 { 
	}
}

369 ˛as†
	cU8GLIB_ST7920_192X32
 : 
public
 
U8GLIB


371 
public
:

372 
	$U8GLIB_ST7920_192X32
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

373 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

375 
	$U8GLIB_ST7920_192X32
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

376 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_hw_•i
, 
cs
, 
a0
, 
ª£t
)

377 { 
	}
}

378 
	$U8GLIB_ST7920_192X32
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

379 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

380 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
cs2
, 
di
, 
rw
, 
ª£t
)

381 { 
	}
}

384 ˛as†
	cU8GLIB_ST7920_192X32_1X
 : 
public
 
U8GLIB


386 
public
:

387 
	$U8GLIB_ST7920_192X32_1X
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

388 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_sw_•i
, 
sck
, 
mosi
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

390 
	$U8GLIB_ST7920_192X32_1X
(
uöt8_t
 
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

391 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_hw_•i
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

392 { 
	}
}

393 
	$U8GLIB_ST7920_192X32_1X
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

394 
uöt8_t
 
í
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

395 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
U8G_PIN_NONE
, U8G_PIN_NONE, 
di
, 
rw
, 
ª£t
)

396 { 
	}
}

399 ˛as†
	cU8GLIB_ST7920_192X32_4X
 : 
public
 
U8GLIB


401 
public
:

402 
	$U8GLIB_ST7920_192X32_4X
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

403 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_4x_sw_•i
, 
sck
, 
mosi
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

405 
	$U8GLIB_ST7920_192X32_4X
(
uöt8_t
 
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

406 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_4x_hw_•i
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

407 { 
	}
}

408 
	$U8GLIB_ST7920_192X32_4X
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

409 
uöt8_t
 
í
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

410 : 
	$U8GLIB
(&
u8g_dev_°7920_192x32_4x_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
U8G_PIN_NONE
, U8G_PIN_NONE, 
di
, 
rw
, 
ª£t
)

411 { 
	}
}

415 ˛as†
	cU8GLIB_ST7920_202X32
 : 
public
 
U8GLIB


417 
public
:

418 
	$U8GLIB_ST7920_202X32
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

419 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

421 
	$U8GLIB_ST7920_202X32
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

422 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_hw_•i
, 
cs
, 
a0
, 
ª£t
)

423 { 
	}
}

424 
	$U8GLIB_ST7920_202X32
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

425 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

426 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
cs2
, 
di
, 
rw
, 
ª£t
)

427 { 
	}
}

430 ˛as†
	cU8GLIB_ST7920_202X32_1X
 : 
public
 
U8GLIB


432 
public
:

433 
	$U8GLIB_ST7920_202X32_1X
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

434 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_sw_•i
, 
sck
, 
mosi
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

436 
	$U8GLIB_ST7920_202X32_1X
(
uöt8_t
 
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

437 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_hw_•i
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

438 { 
	}
}

439 
	$U8GLIB_ST7920_202X32_1X
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

440 
uöt8_t
 
í
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

441 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
U8G_PIN_NONE
, U8G_PIN_NONE, 
di
, 
rw
, 
ª£t
)

442 { 
	}
}

445 ˛as†
	cU8GLIB_ST7920_202X32_4X
 : 
public
 
U8GLIB


447 
public
:

448 
	$U8GLIB_ST7920_202X32_4X
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

449 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_4x_sw_•i
, 
sck
, 
mosi
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

451 
	$U8GLIB_ST7920_202X32_4X
(
uöt8_t
 
cs
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

452 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_4x_hw_•i
, 
cs
, 
U8G_PIN_NONE
, 
ª£t
)

453 { 
	}
}

454 
	$U8GLIB_ST7920_202X32_4X
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

455 
uöt8_t
 
í
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

456 : 
	$U8GLIB
(&
u8g_dev_°7920_202x32_4x_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
U8G_PIN_NONE
, U8G_PIN_NONE, 
di
, 
rw
, 
ª£t
)

457 { 
	}
}

461 ˛as†
	cU8GLIB_LC7981_160X80
 : 
public
 
U8GLIB


463 
public
:

464 
	$U8GLIB_LC7981_160X80
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

465 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

466 : 
	$U8GLIB
(&
u8g_dev_lc7981_160x80_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
U8G_PIN_NONE
, 
di
, 
rw
, 
ª£t
)

468 
	}
};

470 ˛as†
	cU8GLIB_LC7981_240X64
 : 
public
 
U8GLIB


472 
public
:

473 
	$U8GLIB_LC7981_240X64
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

474 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

475 : 
	$U8GLIB
(&
u8g_dev_lc7981_240x64_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
U8G_PIN_NONE
, 
di
, 
rw
, 
ª£t
)

477 
	}
};

479 ˛as†
	cU8GLIB_LC7981_240X128
 : 
public
 
U8GLIB


481 
public
:

482 
	$U8GLIB_LC7981_240X128
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

483 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

484 : 
	$U8GLIB
(&
u8g_dev_lc7981_240x128_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
U8G_PIN_NONE
, 
di
, 
rw
, 
ª£t
)

486 
	}
};

489 ˛as†
	cU8GLIB_LC7981_320X64
 : 
public
 
U8GLIB


491 
public
:

492 
	$U8GLIB_LC7981_320X64
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

493 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

494 : 
	$U8GLIB
(&
u8g_dev_lc7981_320x64_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
U8G_PIN_NONE
, 
di
, 
rw
, 
ª£t
)

496 
	}
};

500 ˛as†
	cU8GLIB_DOGXL160_BW
 : 
public
 
U8GLIB


502 
public
:

503 
	$U8GLIB_DOGXL160_BW
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

504 : 
	$U8GLIB
(&
u8g_dev_uc1610_dogxl160_bw_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

506 
	$U8GLIB_DOGXL160_BW
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

507 : 
	$U8GLIB
(&
u8g_dev_uc1610_dogxl160_bw_hw_•i
, 
cs
, 
a0
, 
ª£t
)

508 { 
	}
}

511 ˛as†
	cU8GLIB_DOGXL160_GR
 : 
public
 
U8GLIB


513 
public
:

514 
	$U8GLIB_DOGXL160_GR
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

515 : 
	$U8GLIB
(&
u8g_dev_uc1610_dogxl160_gr_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

517 
	$U8GLIB_DOGXL160_GR
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

518 : 
	$U8GLIB
(&
u8g_dev_uc1610_dogxl160_gr_hw_•i
, 
cs
, 
a0
, 
ª£t
)

519 { 
	}
}

522 ˛as†
	cU8GLIB_DOGXL160_2X_BW
 : 
public
 
U8GLIB


524 
public
:

525 
	$U8GLIB_DOGXL160_2X_BW
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

526 : 
	$U8GLIB
(&
u8g_dev_uc1610_dogxl160_2x_bw_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

528 
	$U8GLIB_DOGXL160_2X_BW
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

529 : 
	$U8GLIB
(&
u8g_dev_uc1610_dogxl160_2x_bw_hw_•i
, 
cs
, 
a0
, 
ª£t
)

530 { 
	}
}

533 ˛as†
	cU8GLIB_DOGXL160_2X_GR
 : 
public
 
U8GLIB


535 
public
:

536 
	$U8GLIB_DOGXL160_2X_GR
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

537 : 
	$U8GLIB
(&
u8g_dev_uc1610_dogxl160_2x_gr_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

539 
	$U8GLIB_DOGXL160_2X_GR
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

540 : 
	$U8GLIB
(&
u8g_dev_uc1610_dogxl160_2x_gr_hw_•i
, 
cs
, 
a0
, 
ª£t
)

541 { 
	}
}

545 ˛as†
	cU8GLIB_NHD27OLED_BW
 : 
public
 
U8GLIB


547 
public
:

548 
	$U8GLIB_NHD27OLED_BW
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

549 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_bw_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

551 
	$U8GLIB_NHD27OLED_BW
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

552 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_bw_hw_•i
, 
cs
, 
a0
, 
ª£t
)

553 { 
	}
}

554 
	$U8GLIB_NHD27OLED_BW
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

555 
uöt8_t
 
cs
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

556 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_bw_∑øŒñ
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
U8G_PIN_NONE
, 
cs
, U8G_PIN_NONE, 
di
, 
rw
, 
ª£t
)

557 { 
	}
}

560 ˛as†
	cU8GLIB_NHD27OLED_2X_BW
 : 
public
 
U8GLIB


562 
public
:

563 
	$U8GLIB_NHD27OLED_2X_BW
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

564 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

566 
	$U8GLIB_NHD27OLED_2X_BW
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

567 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_hw_•i
, 
cs
, 
a0
, 
ª£t
)

568 { 
	}
}

569 
	$U8GLIB_NHD27OLED_2X_BW
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

570 
uöt8_t
 
cs
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

571 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_∑øŒñ
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
U8G_PIN_NONE
, 
cs
, U8G_PIN_NONE, 
di
, 
rw
, 
ª£t
)

572 { 
	}
}

575 ˛as†
	cU8GLIB_NHD31OLED_BW
 : 
public
 
U8GLIB


577 
public
:

578 
	$U8GLIB_NHD31OLED_BW
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

579 : 
	$U8GLIB
(&
u8g_dev_ssd1322_nhd31ﬁed_bw_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

581 
	$U8GLIB_NHD31OLED_BW
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

582 : 
	$U8GLIB
(&
u8g_dev_ssd1322_nhd31ﬁed_bw_hw_•i
, 
cs
, 
a0
, 
ª£t
)

583 { 
	}
}

586 ˛as†
	cU8GLIB_NHD31OLED_2X_BW
 : 
public
 
U8GLIB


588 
public
:

589 
	$U8GLIB_NHD31OLED_2X_BW
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

590 : 
	$U8GLIB
(&
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

592 
	$U8GLIB_NHD31OLED_2X_BW
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

593 : 
	$U8GLIB
(&
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_hw_•i
, 
cs
, 
a0
, 
ª£t
)

594 { 
	}
}

597 ˛as†
	cU8GLIB_NHD31OLED_GR
 : 
public
 
U8GLIB


599 
public
:

600 
	$U8GLIB_NHD31OLED_GR
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

601 : 
	$U8GLIB
(&
u8g_dev_ssd1322_nhd31ﬁed_gr_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

603 
	$U8GLIB_NHD31OLED_GR
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

604 : 
	$U8GLIB
(&
u8g_dev_ssd1322_nhd31ﬁed_gr_hw_•i
, 
cs
, 
a0
, 
ª£t
)

605 { 
	}
}

608 ˛as†
	cU8GLIB_NHD31OLED_2X_GR
 : 
public
 
U8GLIB


610 
public
:

611 
	$U8GLIB_NHD31OLED_2X_GR
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

612 : 
	$U8GLIB
(&
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

614 
	$U8GLIB_NHD31OLED_2X_GR
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

615 : 
	$U8GLIB
(&
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_hw_•i
, 
cs
, 
a0
, 
ª£t
)

616 { 
	}
}

620 ˛as†
	cU8GLIB_SSD1306_128X64
 : 
public
 
U8GLIB


622 
public
:

623 
	$U8GLIB_SSD1306_128X64
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

624 : 
	$U8GLIB
(&
u8g_dev_ssd1306_128x64_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

626 
	$U8GLIB_SSD1306_128X64
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

627 : 
	$U8GLIB
(&
u8g_dev_ssd1306_128x64_hw_•i
, 
cs
, 
a0
, 
ª£t
)

628 { 
	}
}

629 
	$U8GLIB_SSD1306_128X64
(
uöt8_t
 
›ti⁄s
 = 
U8G_I2C_OPT_NONE
)

630 : 
	$U8GLIB
(&
u8g_dev_ssd1306_128x64_i2c
, 
›ti⁄s
)

631 { 
	}
}

635 ˛as†
	cU8GLIB_SSD1309_128X64
 : 
public
 
U8GLIB


637 
public
:

638 
	$U8GLIB_SSD1309_128X64
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

639 : 
	$U8GLIB
(&
u8g_dev_ssd1309_128x64_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

641 
	$U8GLIB_SSD1309_128X64
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

642 : 
	$U8GLIB
(&
u8g_dev_ssd1309_128x64_hw_•i
, 
cs
, 
a0
, 
ª£t
)

643 { 
	}
}

644 
	$U8GLIB_SSD1309_128X64
(
uöt8_t
 
›ti⁄s
 = 
U8G_I2C_OPT_NONE
)

645 : 
	$U8GLIB
(&
u8g_dev_ssd1309_128x64_i2c
, 
›ti⁄s
)

646 { 
	}
}

650 ˛as†
	cU8GLIB_SSD1306_128X32
 : 
public
 
U8GLIB


652 
public
:

653 
	$U8GLIB_SSD1306_128X32
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

654 : 
	$U8GLIB
(&
u8g_dev_ssd1306_128x32_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

656 
	$U8GLIB_SSD1306_128X32
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

657 : 
	$U8GLIB
(&
u8g_dev_ssd1306_128x32_hw_•i
, 
cs
, 
a0
, 
ª£t
)

658 { 
	}
}

659 
	$U8GLIB_SSD1306_128X32
(
uöt8_t
 
›ti⁄s
 = 
U8G_I2C_OPT_NONE
)

660 : 
	$U8GLIB
(&
u8g_dev_ssd1306_128x32_i2c
, 
›ti⁄s
)

661 { 
	}
}

666 ˛as†
	cU8GLIB_NHD27OLED_GR
 : 
public
 
U8GLIB


668 
public
:

669 
	$U8GLIB_NHD27OLED_GR
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

670 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_gr_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

672 
	$U8GLIB_NHD27OLED_GR
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

673 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_gr_hw_•i
, 
cs
, 
a0
, 
ª£t
)

674 { 
	}
}

677 ˛as†
	cU8GLIB_NHD27OLED_2X_GR
 : 
public
 
U8GLIB


679 
public
:

680 
	$U8GLIB_NHD27OLED_2X_GR
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

681 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_2x_gr_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

683 
	$U8GLIB_NHD27OLED_2X_GR
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

684 : 
	$U8GLIB
(&
u8g_dev_ssd1325_nhd27ﬁed_2x_gr_hw_•i
, 
cs
, 
a0
, 
ª£t
)

685 { 
	}
}

688 ˛as†
	cU8GLIB_SSD1327_96X96_GR
 : 
public
 
U8GLIB


690 
public
:

691 
	$U8GLIB_SSD1327_96X96_GR
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

692 : 
	$U8GLIB
(&
u8g_dev_ssd1327_96x96_gr_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

694 
	$U8GLIB_SSD1327_96X96_GR
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

695 : 
	$U8GLIB
(&
u8g_dev_ssd1327_96x96_gr_hw_•i
, 
cs
, 
a0
, 
ª£t
)

696 { 
	}
}

697 
	$U8GLIB_SSD1327_96X96_GR
(
uöt8_t
 
›ti⁄s
 = 
U8G_I2C_OPT_NONE
)

698 : 
	$U8GLIB
(&
u8g_dev_ssd1327_96x96_gr_i2c
, 
›ti⁄s
)

699 { 
	}
}

702 ˛as†
	cU8GLIB_SSD1327_96X96_2X_GR
 : 
public
 
U8GLIB


704 
public
:

705 
	$U8GLIB_SSD1327_96X96_2X_GR
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

706 : 
	$U8GLIB
(&
u8g_dev_ssd1327_96x96_2x_gr_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

708 
	$U8GLIB_SSD1327_96X96_2X_GR
(
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

709 : 
	$U8GLIB
(&
u8g_dev_ssd1327_96x96_2x_gr_hw_•i
, 
cs
, 
a0
, 
ª£t
)

710 { 
	}
}

711 
	$U8GLIB_SSD1327_96X96_2X_GR
(
uöt8_t
 
›ti⁄s
 = 
U8G_I2C_OPT_NONE
)

712 : 
	$U8GLIB
(&
u8g_dev_ssd1327_96x96_2x_gr_i2c
, 
›ti⁄s
)

713 { 
	}
}

716 ˛as†
	cU8GLIB_PCF8812
 : 
public
 
U8GLIB


718 
public
:

719 
	$U8GLIB_PCF8812
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

720 : 
	$U8GLIB
(&
u8g_dev_pcf8812_96x65_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

722 
	}
};

724 ˛as†
	cU8GLIB_PCD8544
 : 
public
 
U8GLIB


726 
public
:

727 
	$U8GLIB_PCD8544
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

728 : 
	$U8GLIB
(&
u8g_dev_pcd8544_84x48_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

730 
	}
};

732 ˛as†
	cU8GLIB_TLS8204_84X48
 : 
public
 
U8GLIB


734 
public
:

735 
	$U8GLIB_TLS8204_84X48
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

736 : 
	$U8GLIB
(&
u8g_dev_és8204_84x48_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

738 
	}
};

740 ˛as†
	cU8GLIB_KS0108_128
 : 
public
 
U8GLIB


742 
public
:

743 
	$U8GLIB_KS0108_128
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

744 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

745 : 
	$U8GLIB
(&
u8g_dev_ks0108_128x64_Á°
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs1
, 
cs2
, 
di
, 
rw
, 
ª£t
)

747 
	}
};

749 ˛as†
	cU8GLIB_SBN1661_122X32
 : 
public
 
U8GLIB


751 
public
:

752 
	$U8GLIB_SBN1661_122X32
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

753 
uöt8_t
 
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

754 : 
	$U8GLIB
(&
u8g_dev_sbn1661_122x32
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
U8G_PIN_NONE
, 
cs1
, 
cs2
, 
di
, 
rw
, 
ª£t
)

756 
	}
};

758 ˛as†
	cU8GLIB_T6963_240X128
 : 
public
 
U8GLIB


760 
public
:

761 
	$U8GLIB_T6963_240X128
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

762 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
wr
, uöt8_à
rd
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

763 : 
	$U8GLIB
(&
u8g_dev_t6963_240x128_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
cs
, 
a0
, 
wr
, 
rd
, 
ª£t
)

765 
	}
};

767 ˛as†
	cU8GLIB_T6963_240X64
 : 
public
 
U8GLIB


769 
public
:

770 
	$U8GLIB_T6963_240X64
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

771 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
wr
, uöt8_à
rd
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

772 : 
	$U8GLIB
(&
u8g_dev_t6963_240x64_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
cs
, 
a0
, 
wr
, 
rd
, 
ª£t
)

774 
	}
};

776 ˛as†
	cU8GLIB_T6963_128X64
 : 
public
 
U8GLIB


778 
public
:

779 
	$U8GLIB_T6963_128X64
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

780 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
wr
, uöt8_à
rd
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

781 : 
	$U8GLIB
(&
u8g_dev_t6963_128x64_8bô
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
cs
, 
a0
, 
wr
, 
rd
, 
ª£t
)

783 
	}
};

786 ˛as†
	cU8GLIB_ST7687_C144MVGD
: 
public
 
U8GLIB


788 
public
:

789 
	$U8GLIB_ST7687_C144MVGD
(
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
 = 
U8G_PIN_NONE
)

790 : 
	$U8GLIB
(&
u8g_dev_°7687_c144mvgd_sw_•i
, 
sck
, 
mosi
, 
cs
, 
a0
, 
ª£t
)

792 
	$U8GLIB_ST7687_C144MVGD
(
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

793 
uöt8_t
 
í
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

794 : 
	$U8GLIB
(&
u8g_dev_ks0108_128x64_Á°
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
, 
í
, 
cs
, 
U8G_PIN_NONE
, 
a0
, 
rw
, 
ª£t
)

795 { 
	}
}

798 ˛as†
	cU8GLIB_ILI9325D_320x240
 : 
public
 
U8GLIB


800 
public
:

807 
	$U8GLIB_ILI9325D_320x240
–
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
di
, uöt8_à
rw
 = 
U8G_PIN_NONE
, uöt8_à
ª£t
 = U8G_PIN_NONE)

808 { 
	`öô8BôFixedP‹t
(&
u8g_dev_ûi9325d_320x240_8bô
, 
í
, 
cs1
, 
di
, 
rw
, 
ª£t
); }

809 
	}
};

811 ˛as†
	cU8GLIB_FLIPDISC_2X7
 : 
public
 
U8GLIB


813 
public
:

814 
	$U8GLIB_FLIPDISC_2X7
(Ë: 
	$U8GLIB
(&
u8g_dev_Êùdisc_2x7
)

816 
	}
};

818 ˛as†
	cU8GLIB_VS
 : 
public
 
U8GLIB


820 
public
:

821 
	$U8GLIB_VS
(Ë: 
	$U8GLIB
(&
u8g_dev_vs
)

823 
	}
};

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/chessengine.c

103 
	~"u8g.h
"

118 
	#PIECE_NONE
 0

	)

119 
	#PIECE_PAWN
 1

	)

120 
	#PIECE_KNIGHT
 2

	)

121 
	#PIECE_BISHOP
 3

	)

122 
	#PIECE_ROOK
 4

	)

123 
	#PIECE_QUEEN
 5

	)

124 
	#PIECE_KING
 6

	)

127 
	#COLOR_WHITE
 0

	)

128 
	#COLOR_BLACK
 1

	)

131 
	#COLOR_PIECE_MASK
 0x01f

	)

133 
	#CP_MARK_MASK
 0x20

	)

135 
	#ILLEGAL_POSITION
 255

	)

140 
	#STACK_MAX_SIZE
 5

	)

143 
	#CHM_USER_SIZE
 6

	)

147 
	#CHM_LIST_SIZE
 (
STACK_MAX_SIZE
+
CHM_USER_SIZE
+2)

	)

149 
öt16_t
 
	tevÆ_t
;

151 
	#EVAL_T_MIN
 -32767

	)

152 
	#EVAL_T_MAX
 32767

	)

156 
	s_°ack_ñemít_°ru˘


159 
uöt8_t
 
	mcuºít_pos
;

160 
uöt8_t
 
	mcuºít_˝
;

161 
uöt8_t
 
	mcuºít_cﬁ‹
;

164 
uöt8_t
 
	mbe°_‰om_pos
;

165 
uöt8_t
 
	mbe°_to_pos
;

167 
evÆ_t
 
	mbe°_evÆ
;

169 
_°ack_ñemít_°ru˘
 
	t°ack_ñemít_t
;

170 
_°ack_ñemít_°ru˘
 *
	t°ack_ñemít_p
;

173 
	s_chm_°ru˘


175 
uöt8_t
 
	mmaö_˝
;

176 
uöt8_t
 
	mmaö_§c
;

177 
uöt8_t
 
	mmaö_de°
;

179 
uöt8_t
 
	mŸhî_˝
;

180 
uöt8_t
 
	mŸhî_§c
;

181 
uöt8_t
 
	mŸhî_de°
;

187 
uöt8_t
 
	m∑wn_dbl_move
[2];

197 
uöt8_t
 
	mˇ°lög_possibÀ
;

200 
_chm_°ru˘
 
	tchm_t
;

201 
_chm_°ru˘
 *
	tchm_p
;

204 
	s_Ãc_°ru˘


209 
uöt8_t
 
	m∂y_cou¡
;

212 
uöt8_t
 
	mchm_pos
;

216 
uöt8_t
 
	mbﬂrd
[64];

220 
uöt8_t
 
	m∑wn_dbl_move
[2];

229 
uöt8_t
 
	mˇ°lög_possibÀ
;

235 
uöt8_t
 
	m‹õ¡©i⁄
;

240 
uöt8_t
 
	m°rike_out_cﬁ‹
;

244 
uöt8_t
 
	mis_game_íd
;

248 
uöt8_t
 
	mlo°_side_cﬁ‹
;

256 
uöt8_t
 
	mcheck_§c_pos
;

257 
uöt8_t
 
	mcheck_mode
;

261 
uöt8_t
 
	mföd_põ˚_˙t
[2];

264 
uöt8_t
 
	mföd_põ˚_weight
[2];

269 
uöt8_t
 
	mcuº_dïth
;

270 
uöt8_t
 
	mmax_dïth
;

271 
°ack_ñemít_p
 
	mcuº_ñemít
;

274 
°ack_ñemít_t
 
	m°ack_mem‹y
[
STACK_MAX_SIZE
];

277 
chm_t
 
	mchm_li°
[
CHM_LIST_SIZE
];

279 
_Ãc_°ru˘
 
	tÃc_t
;

281 
	#CHECK_MODE_NONE
 0

	)

282 
	#CHECK_MODE_MOVEABLE
 1

	)

283 
	#CHECK_MODE_TARGET_MOVE
 2

	)

291 
u8g_t
 *
	gÃc_u8g
;

293 
Ãc_t
 
	gÃc_obj
;

308 
uöt8_t
 
	$°ack_Push
(
uöt8_t
 
cﬁ‹
Ë
U8G_NOINLINE
;

309 
	$°ack_P›
(Ë
U8G_NOINLINE
;

310 
	$°ack_InôCuºEÀmít
(Ë
U8G_NOINLINE
;

311 
	$°ack_Inô
(
uöt8_t
 
max
Ë
U8G_NOINLINE
;

312 
	$°ack_SëMove
(
evÆ_t
 
vÆ
, 
uöt8_t
 
to_pos
Ë
U8G_NOINLINE
;

313 
uöt8_t
 
	$cu_NextPos
(
uöt8_t
 
pos
Ë
U8G_NOINLINE
;

314 
uöt8_t
 
	`cu_gpos2bpos
(uöt8_à
gpos
);

315 
uöt8_t
 
	`˝_C⁄°ru˘
(uöt8_à
cﬁ‹
, uöt8_à
põ˚
);

316 
uöt8_t
 
	`˝_GëPõ˚
(uöt8_à
˝
);

317 
uöt8_t
 
	`˝_GëCﬁ‹
(uöt8_à
˝
);

318 
uöt8_t
 
	$˝_GëFromBﬂrd
(
uöt8_t
 
pos
Ë
U8G_NOINLINE
;

319 
	$˝_SëOnBﬂrd
(
uöt8_t
 
pos
, uöt8_à
˝
Ë
U8G_NOINLINE
;

321 
	$cu_CÀ¨Bﬂrd
(Ë
U8G_NOINLINE
;

322 
	$chess_SëupBﬂrd
(Ë
U8G_NOINLINE
;

323 
evÆ_t
 
	`˚_EvÆ
();

325 
	$cu_CÀ¨MoveHi°‹y
(Ë
U8G_NOINLINE
;

326 
	$cu_Redu˚Hi°‹yByFuŒMove
(Ë
U8G_NOINLINE
;

327 
	$cu_UndoHÆfMove
(Ë
U8G_NOINLINE
;

328 
chm_p
 
	$cu_PushHÆfMove
(Ë
U8G_NOINLINE
;

331 
	`˚_CÆcuœãPosôi⁄Weight
(
uöt8_t
 
pos
);

332 
uöt8_t
 
	`˚_GëPosôi⁄AâackWeight
(uöt8_à
pos
, uöt8_à
cﬁ‹
);

334 
	`chess_Thökög
();

335 
	`˚_Lo›Põ˚s
();

343 
°ack_ñemít_p
 
	$°ack_GëCuºEÀmít
()

345  
Ãc_obj
.
cuº_ñemít
;

346 
	}
}

348 
uöt8_t
 
	$°ack_Push
(
uöt8_t
 
cﬁ‹
)

350 i‡–
Ãc_obj
.
cuº_dïth
 =Ãc_obj.
max_dïth
 )

352 
Ãc_obj
.
cuº_dïth
++;

353 
Ãc_obj
.
cuº_ñemít
 =Ürc_obj.
°ack_mem‹y
+Ãc_obj.
cuº_dïth
;

356 
cﬁ‹
 ^= 1;

357 
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
 = 
cﬁ‹
;

360 
	}
}

362 
	$°ack_P›
()

364 
Ãc_obj
.
cuº_dïth
--;

365 
Ãc_obj
.
cuº_ñemít
 =Ürc_obj.
°ack_mem‹y
+Ãc_obj.
cuº_dïth
;

366 
	}
}

369 
	$°ack_InôCuºEÀmít
()

371 
°ack_ñemít_p
 
e
 = 
	`°ack_GëCuºEÀmít
();

372 
e
->
be°_evÆ
 = 
EVAL_T_MIN
;

373 
e
->
be°_‰om_pos
 = 
ILLEGAL_POSITION
;

374 
e
->
be°_to_pos
 = 
ILLEGAL_POSITION
;

375 
	}
}

378 
	$°ack_Inô
(
uöt8_t
 
max
)

380 
Ãc_obj
.
cuº_dïth
 = 0;

381 
Ãc_obj
.
cuº_ñemít
 =Ürc_obj.
°ack_mem‹y
;

382 
Ãc_obj
.
max_dïth
 = 
max
;

383 
Ãc_obj
.
check_mode
 = 
CHECK_MODE_NONE
;

384 
	`°ack_InôCuºEÀmít
();

385 
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
 = 
Ãc_obj
.
∂y_cou¡
;

386 
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
 &= 1;

387 
	}
}

391 
	$°ack_SëMove
(
evÆ_t
 
vÆ
, 
uöt8_t
 
to_pos
)

393 
°ack_ñemít_p
 
e
 = 
	`°ack_GëCuºEÀmít
();

394 i‡–
e
->
be°_evÆ
 < 
vÆ
 )

396 
e
->
be°_evÆ
 = 
vÆ
;

397 
e
->
be°_‰om_pos
 =É->
cuºít_pos
;

398 
e
->
be°_to_pos
 = 
to_pos
;

400 
	}
}

414 
uöt8_t
 
	$cu_NextPos
(
uöt8_t
 
pos
)

417 
pos
++;

418 i‡––
pos
 & 0x08 ) != 0 )

420 
pos
+= 0x10;

421 
pos
&= 0xf0;

423 i‡––
pos
 & 0x80 ) != 0 )

424 
pos
 = 0;

425  
pos
;

426 
	}
}

428 
uöt8_t
 
	$cu_PªvPos
(
uöt8_t
 
pos
)

431 
pos
--;

432 i‡––
pos
 & 0x80 ) != 0 )

433 
pos
 = 0x077;

434 i‡––
pos
 & 0x08 ) != 0 )

436 
pos
 &= 0xf0;

437 
pos
 |= 0x07;

439  
pos
;

440 
	}
}

456 
uöt8_t
 
	$cu_gpos2bpos
(
uöt8_t
 
gpos
)

458 
uöt8_t
 
bpos
 = 
gpos
;

459 
bpos
 &= 0xf0;

460 
bpos
 >>= 1;

461 
gpos
 &= 0x0f;

462 
bpos
 |
gpos
;

463  
bpos
;

464 
	}
}

466 
	#gpos_IsIŒegÆ
(
gpos
Ë((gposË& 0x088)

	)

473 
	#˝_IsM¨ked
(
˝
Ë((˝Ë& 
CP_MARK_MASK
)

	)

482 
uöt8_t
 
	$˝_C⁄°ru˘
(
uöt8_t
 
cﬁ‹
, uöt8_à
põ˚
)

484 
cﬁ‹
 <<= 4;

485 
cﬁ‹
 |
põ˚
;

486  
cﬁ‹
;

487 
	}
}

490 
uöt8_t
 
	$˝_GëPõ˚
(
uöt8_t
 
˝
)

492 
˝
 &= 0x0f;

493  
˝
;

494 
	}
}

501 
uöt8_t
 
	$˝_GëCﬁ‹
(
uöt8_t
 
˝
)

503 
˝
 >>= 4;

504 
˝
 &= 1;

505  
˝
;

506 
	}
}

512 
uöt8_t
 
	$˝_GëFromBﬂrd
(
uöt8_t
 
pos
)

514  
Ãc_obj
.
bﬂrd
[
	`cu_gpos2bpos
(
pos
)];

515 
	}
}

521 
	$˝_SëOnBﬂrd
(
uöt8_t
 
pos
, uöt8_à
˝
)

524 
Ãc_obj
.
bﬂrd
[
	`cu_gpos2bpos
(
pos
)] = 
˝
;

525 
	}
}

531 
	$cu_CÀ¨Bﬂrd
()

533 
uöt8_t
 
i
;

535  
i
 = 0; i < 64; i++ )

536 
Ãc_obj
.
bﬂrd
[
i
] = 
PIECE_NONE
;

538 
Ãc_obj
.
∂y_cou¡
 = 0;

539 
Ãc_obj
.
‹õ¡©i⁄
 = 
COLOR_WHITE
;

541 
Ãc_obj
.
∑wn_dbl_move
[0] = 
ILLEGAL_POSITION
;

542 
Ãc_obj
.
∑wn_dbl_move
[1] = 
ILLEGAL_POSITION
;

544 
Ãc_obj
.
ˇ°lög_possibÀ
 = 0x0f;

546 
Ãc_obj
.
is_game_íd
 = 0;

547 
Ãc_obj
.
lo°_side_cﬁ‹
 = 0;

550 
	`cu_CÀ¨MoveHi°‹y
();

552 
	}
}

558 
	$chess_SëupBﬂrdTe°01
()

560 
	`cu_CÀ¨Bﬂrd
();

561 
Ãc_obj
.
bﬂrd
[7+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_KING
);

562 
Ãc_obj
.
bﬂrd
[7+5*8] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_PAWN
);

563 
Ãc_obj
.
bﬂrd
[3] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_KING
);

564 
Ãc_obj
.
bﬂrd
[0+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_ROOK
);

565 
Ãc_obj
.
bﬂrd
[6] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_QUEEN
);

566 
	}
}

569 
	$chess_SëupBﬂrd
()

571 
uöt8_t
 
i
;

572 
uöt8_t
 
bp
, 
wp
;

575 
	`cu_CÀ¨Bﬂrd
();

578 
wp
 = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_PAWN
);

579 
bp
 = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_PAWN
);

582  
i
 = 0; i < 8; i++ )

584 
Ãc_obj
.
bﬂrd
[
i
+8] = 
wp
;

585 
Ãc_obj
.
bﬂrd
[
i
+6*8] = 
bp
;

590 
Ãc_obj
.
bﬂrd
[0] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_ROOK
);

591 
Ãc_obj
.
bﬂrd
[1] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_KNIGHT
);

592 
Ãc_obj
.
bﬂrd
[2] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_BISHOP
);

593 
Ãc_obj
.
bﬂrd
[3] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_QUEEN
);

594 
Ãc_obj
.
bﬂrd
[4] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_KING
);

595 
Ãc_obj
.
bﬂrd
[5] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_BISHOP
);

596 
Ãc_obj
.
bﬂrd
[6] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_KNIGHT
);

597 
Ãc_obj
.
bﬂrd
[7] = 
	`˝_C⁄°ru˘
(
COLOR_WHITE
, 
PIECE_ROOK
);

599 
Ãc_obj
.
bﬂrd
[0+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_ROOK
);

600 
Ãc_obj
.
bﬂrd
[1+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_KNIGHT
);

601 
Ãc_obj
.
bﬂrd
[2+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_BISHOP
);

602 
Ãc_obj
.
bﬂrd
[3+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_QUEEN
);

603 
Ãc_obj
.
bﬂrd
[4+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_KING
);

604 
Ãc_obj
.
bﬂrd
[5+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_BISHOP
);

605 
Ãc_obj
.
bﬂrd
[6+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_KNIGHT
);

606 
Ãc_obj
.
bﬂrd
[7+7*8] = 
	`˝_C⁄°ru˘
(
COLOR_BLACK
, 
PIECE_ROOK
);

610 
	}
}

621 
uöt8_t
 
	$cu_IsIŒegÆPosôi⁄
(
uöt8_t
 
pos
, uöt8_à
my_cﬁ‹
)

623 
uöt8_t
 
bﬂrd_˝
;

625 i‡–
	`gpos_IsIŒegÆ
(
pos
) != 0 )

628 
bﬂrd_˝
 = 
	`˝_GëFromBﬂrd
(
pos
);

630 i‡–
bﬂrd_˝
 != 0 )

631 i‡–
	`˝_GëCﬁ‹
(
bﬂrd_˝
Ë=
my_cﬁ‹
 )

635 
	}
}

656 
uöt8_t
 
	g˚_põ˚_weight
[] = { 0, 1, 3, 3, 5, 9, 0 };

657 
uöt8_t
 
	g˚_pos_weight
[] = { 0, 1, 1, 2, 2, 1, 1, 0};

661 
evÆ_t
 
	$˚_EvÆ
()

663 
uöt8_t
 
˝
;

664 
uöt8_t
 
is_my_kög_¥e£¡
 = 0;

665 
uöt8_t
 
is_›posô_kög_¥e£¡
 = 0;

666 
evÆ_t
 
m©îül_my_cﬁ‹
 = 0;

667 
evÆ_t
 
m©îül_›posô_cﬁ‹
 = 0;

668 
evÆ_t
 
posôi⁄_my_cﬁ‹
 = 0;

669 
evÆ_t
 
posôi⁄_›posô_cﬁ‹
 = 0;

670 
evÆ_t
 
ªsu…
;

671 
uöt8_t
 
pos
;

673 
pos
 = 0;

677 
˝
 = 
	`˝_GëFromBﬂrd
(
pos
);

679 i‡–
	`˝_GëPõ˚
(
˝
Ë!
PIECE_NONE
 )

681 i‡–
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
 =
	`˝_GëCﬁ‹
(
˝
) )

685 i‡–
	`˝_GëPõ˚
(
˝
Ë=
PIECE_KING
 )

686 
is_my_kög_¥e£¡
 = 1;

687 
m©îül_my_cﬁ‹
 +
˚_põ˚_weight
[
	`˝_GëPõ˚
(
˝
)];

688 i‡–
	`˝_GëPõ˚
(
˝
Ë=
PIECE_PAWN
 || cp_GëPõ˚(˝Ë=
PIECE_KNIGHT
 )

690 
posôi⁄_my_cﬁ‹
 +
˚_pos_weight
[
pos
&7]*ce_pos_weight[(pos>>4)&7];

696 i‡–
	`˝_GëPõ˚
(
˝
Ë=
PIECE_KING
 )

697 
is_›posô_kög_¥e£¡
 = 1;

698 
m©îül_›posô_cﬁ‹
 +
˚_põ˚_weight
[
	`˝_GëPõ˚
(
˝
)];

699 i‡–
	`˝_GëPõ˚
(
˝
Ë=
PIECE_PAWN
 || cp_GëPõ˚(˝Ë=
PIECE_KNIGHT
 )

701 
posôi⁄_›posô_cﬁ‹
 +
˚_pos_weight
[
pos
&7]*ce_pos_weight[(pos>>4)&7];

705 
pos
 = 
	`cu_NextPos
(pos);

706 }  
pos
 != 0 );

710 i‡–
is_my_kög_¥e£¡
 == 0 )

711  
EVAL_T_MIN
;

712 i‡–
is_›posô_kög_¥e£¡
 == 0 )

713  
EVAL_T_MAX
;

717 
ªsu…
 = 
m©îül_my_cﬁ‹
 - 
m©îül_›posô_cﬁ‹
;

718 
ªsu…
 <<= 3;

719 
ªsu…
 +
posôi⁄_my_cﬁ‹
 - 
posôi⁄_›posô_cﬁ‹
;

720  
ªsu…
;

721 
	}
}

731 
	$cu_CÀ¨MoveHi°‹y
()

733 
Ãc_obj
.
chm_pos
 = 0;

734 
	}
}

736 
	$cu_Redu˚Hi°‹yByFuŒMove
()

738 
uöt8_t
 
i
;

739  
Ãc_obj
.
chm_pos
 > 
CHM_USER_SIZE
 )

741 
i
 = 0;

744 i‡–
i
+2 >
Ãc_obj
.
chm_pos
 )

746 
Ãc_obj
.
chm_li°
[
i
] =Ürc_obj.chm_list[i+2];

747 
i
++;

749 
Ãc_obj
.
chm_pos
 -= 2;

751 
	}
}

753 
	$cu_UndoHÆfMove
()

755 
chm_p
 
chm
;

757 i‡–
Ãc_obj
.
chm_pos
 == 0 )

760 
Ãc_obj
.
chm_pos
--;

762 
chm
 = 
Ãc_obj
.
chm_li°
+Ãc_obj.
chm_pos
;

764 
Ãc_obj
.
∑wn_dbl_move
[0] = 
chm
->pawn_dbl_move[0];

765 
Ãc_obj
.
∑wn_dbl_move
[1] = 
chm
->pawn_dbl_move[1];

766 
Ãc_obj
.
ˇ°lög_possibÀ
 = 
chm
->castling_possible;

768 
	`˝_SëOnBﬂrd
(
chm
->
maö_§c
, chm->
maö_˝
);

769 
	`˝_SëOnBﬂrd
(
chm
->
maö_de°
, 
PIECE_NONE
);

771 i‡–
chm
->
Ÿhî_§c
 !
ILLEGAL_POSITION
 )

772 
	`˝_SëOnBﬂrd
(
chm
->
Ÿhî_§c
, chm->
Ÿhî_˝
);

773 i‡–
chm
->
Ÿhî_de°
 !
ILLEGAL_POSITION
 )

774 
	`˝_SëOnBﬂrd
(
chm
->
Ÿhî_de°
, 
PIECE_NONE
);

776 
	}
}

789 
chm_p
 
	$cu_PushHÆfMove
()

791 
chm_p
 
chm
;

793 
chm
 = 
Ãc_obj
.
chm_li°
+Ãc_obj.
chm_pos
;

794 i‡–
Ãc_obj
.
chm_pos
 < 
CHM_LIST_SIZE
-1)

795 
Ãc_obj
.
chm_pos
++;

797 
chm
->
∑wn_dbl_move
[0] = 
Ãc_obj
.pawn_dbl_move[0];

798 
chm
->
∑wn_dbl_move
[1] = 
Ãc_obj
.pawn_dbl_move[1];

799 
chm
->
ˇ°lög_possibÀ
 = 
Ãc_obj
.castling_possible;

800  
chm
;

801 
	}
}

804 
	gchess_põ˚_to_ch¨
[] = "NBRQK";

812 
	$cu_add_pos
(*
s
, 
uöt8_t
 
pos
Ë
U8G_NOINLINE
;

814 
	$cu_add_pos
(*
s
, 
uöt8_t
 
pos
)

816 *
s
 = 
pos
;

817 *
s
 >>= 4;

818 *
s
 += 'a';

819 
s
++;

820 *
s
 = 
pos
;

821 *
s
 &= 15;

822 *
s
 += '1';

823 
	}
}

825 c⁄° *
	$cu_GëHÆfMoveSå
(
uöt8_t
 
idx
)

827 
chm_p
 
chm
;

828 
buf
[7];

829 *
p
 = 
buf
;

830 
chm
 = 
Ãc_obj
.
chm_li°
+
idx
;

832 i‡–
	`˝_GëPõ˚
(
chm
->
maö_˝
Ë!
PIECE_NONE
 )

834 i‡–
	`˝_GëPõ˚
(
chm
->
maö_˝
Ë> 
PIECE_PAWN
 )

836 *
p
++ = 
chess_põ˚_to_ch¨
[
	`˝_GëPõ˚
(
chm
->
maö_˝
)-2];

838 
	`cu_add_pos
(
p
, 
chm
->
maö_§c
);

839 
p
+=2;

840 i‡–
	`˝_GëPõ˚
(
chm
->
Ÿhî_˝
Ë=
PIECE_NONE
 )

841 *
p
++ = '-';

843 *
p
++ = 'x';

844 
	`cu_add_pos
(
p
, 
chm
->
maö_de°
);

845 
p
+=2;

847 *
p
 = '\0';

848  
buf
;

849 
	}
}

881 
	$cu_Move
(
uöt8_t
 
§c
, uöt8_à
de°
)

884 
chm_p
 
chm
 = 
	`cu_PushHÆfMove
();

887 
uöt8_t
 
˝_§c
, 
˝_de°
;

890 
uöt8_t
 
˛r_pos2
;

891 
uöt8_t
 
£t_pos2
;

892 
uöt8_t
 
£t_˝2
;

895 
˝_§c
 = 
	`˝_GëFromBﬂrd
(
§c
);

896 
˝_de°
 = 
	`˝_GëFromBﬂrd
(
de°
);

900 
chm
->
maö_˝
 = 
˝_§c
;

901 
chm
->
maö_§c
 = 
§c
;

902 
chm
->
maö_de°
 = 
de°
;

904 
chm
->
Ÿhî_˝
 = 
˝_de°
;

905 
chm
->
Ÿhî_§c
 = 
de°
;

906 
chm
->
Ÿhî_de°
 = 
ILLEGAL_POSITION
;

910 
˛r_pos2
 = 
ILLEGAL_POSITION
;

911 
£t_pos2
 = 
ILLEGAL_POSITION
;

912 
£t_˝2
 = 
PIECE_NONE
;

915 i‡–
	`˝_GëPõ˚
(
˝_§c
Ë=
PIECE_PAWN
 )

919 i‡–(
§c
 - 
de°
 == 32) || ( dest - src == 32 ) )

922 
Ãc_obj
.
∑wn_dbl_move
[
	`˝_GëCﬁ‹
(
˝_§c
)] = 
de°
;

926 i‡–(
de°
>>4) == 0 || (dest>>4) == 7 )

929 
˝_§c
 &~
PIECE_PAWN
;

930 
˝_§c
 |
PIECE_QUEEN
;

935 i‡–((
§c
 + 
de°
) & 1) != 0 )

938 i‡–
	`˝_GëPõ˚
(
˝_de°
Ë=
PIECE_NONE
 )

943 
˛r_pos2
 = 
Ãc_obj
.
∑wn_dbl_move
[
	`˝_GëCﬁ‹
(
˝_§c
) ^ 1];

944 
chm
->
Ÿhî_§c
 = 
˛r_pos2
;

945 
chm
->
Ÿhî_˝
 = 
	`˝_GëFromBﬂrd
(
˛r_pos2
);

951 i‡–
	`˝_GëPõ˚
(
˝_§c
Ë=
PIECE_KING
 )

954 i‡–
	`˝_GëCﬁ‹
(
˝_§c
Ë=
COLOR_WHITE
 )

957 
Ãc_obj
.
ˇ°lög_possibÀ
 &= 0x0c;

962 
Ãc_obj
.
ˇ°lög_possibÀ
 &= 0x03;

966 i‡–
§c
 - 
de°
 == 2 )

969 
£t_pos2
 = 
§c
-1;

970 
£t_˝2
 = 
	`˝_GëFromBﬂrd
(
§c
-4);

973 
˛r_pos2
 = 
§c
-4;

975 
chm
->
Ÿhî_˝
 = 
£t_˝2
;

976 
chm
->
Ÿhî_§c
 = 
˛r_pos2
;

977 
chm
->
Ÿhî_de°
 = 
£t_pos2
;

981 i‡–
de°
 - 
§c
 == 2 )

984 
£t_pos2
 = 
§c
+1;

985 
£t_˝2
 = 
	`˝_GëFromBﬂrd
(
§c
+3);

988 
˛r_pos2
 = 
§c
+3;

990 
chm
->
Ÿhî_˝
 = 
£t_˝2
;

991 
chm
->
Ÿhî_§c
 = 
˛r_pos2
;

992 
chm
->
Ÿhî_de°
 = 
£t_pos2
;

999 i‡–
	`˝_GëPõ˚
(
˝_§c
Ë=
PIECE_ROOK
 )

1002 i‡–
§c
 == 0x00 )

1003 
Ãc_obj
.
ˇ°lög_possibÀ
 &= ~0x01;

1005 i‡–
§c
 == 0x07 )

1006 
Ãc_obj
.
ˇ°lög_possibÀ
 &= ~0x02;

1008 i‡–
§c
 == 0x70 )

1009 
Ãc_obj
.
ˇ°lög_possibÀ
 &= ~0x04;

1011 i‡–
§c
 == 0x77 )

1012 
Ãc_obj
.
ˇ°lög_possibÀ
 &= ~0x08;

1018 
	`˝_SëOnBﬂrd
(
de°
, 
˝_§c
);

1020 i‡–
£t_pos2
 !
ILLEGAL_POSITION
 )

1021 
	`˝_SëOnBﬂrd
(
£t_pos2
, 
£t_˝2
);

1023 
	`˝_SëOnBﬂrd
(
§c
, 
PIECE_NONE
);

1025 i‡–
˛r_pos2
 !
ILLEGAL_POSITION
 )

1026 
	`˝_SëOnBﬂrd
(
˛r_pos2
, 
PIECE_NONE
);

1029 
	}
}

1036 
uöt8_t
 
	$˚_Lo›Recur
(
uöt8_t
 
pos
)

1038 
evÆ_t
 
evÆ
;

1042 i‡–
	`cu_IsIŒegÆPosôi⁄
(
pos
, 
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
) != 0 )

1046 
	`cu_Move
(
	`°ack_GëCuºEÀmít
()->
cuºít_pos
, 
pos
);

1053 i‡–
	`°ack_Push
(
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
) == 0 )

1055 
evÆ
 = 
	`˚_EvÆ
();

1060 
	`°ack_InôCuºEÀmít
();

1062 
	`˚_Lo›Põ˚s
();

1064 
evÆ
 = -
	`°ack_GëCuºEÀmít
()->
be°_evÆ
;

1065 
	`°ack_P›
();

1069 
	`°ack_SëMove
(
evÆ
, 
pos
);

1072 
	`cu_UndoHÆfMove
();

1077 i‡–
Ãc_obj
.
check_mode
 != 0 )

1079 
°ack_ñemít_p
 
e
 = 
	`°ack_GëCuºEÀmít
();

1080 i‡–
Ãc_obj
.
check_mode
 =
CHECK_MODE_MOVEABLE
 )

1082 
	`˝_SëOnBﬂrd
(
e
->
cuºít_pos
,É->
cuºít_˝
 | 
CP_MARK_MASK
 );

1084 i‡–
Ãc_obj
.
check_mode
 =
CHECK_MODE_TARGET_MOVE
 )

1086 i‡–
e
->
cuºít_pos
 =
Ãc_obj
.
check_§c_pos
 )

1088 
	`˝_SëOnBﬂrd
(
pos
, 
	`˝_GëFromBﬂrd
’osË| 
CP_MARK_MASK
 );

1093 
	}
}

1107 c⁄° 
uöt8_t
 
	g˚_dú_off£t_rook
[] 
	gPROGMEM
 = { 1, 16, -16, -1, 0 };

1108 c⁄° 
uöt8_t
 
	g˚_dú_off£t_bish›
[] 
	gPROGMEM
 = { 15, 17, -17, -15, 0 };

1109 c⁄° 
uöt8_t
 
	g˚_dú_off£t_quìn
[] 
	gPROGMEM
 = { 1, 16, -16, -1, 15, 17, -17, -15, 0 };

1110 c⁄° 
uöt8_t
 
	g˚_dú_off£t_knight
[] 
	gPROGMEM
 = {14, -14, 18, -18, 31, -31, 33, -33, 0};

1112 
	$˚_Lo›DúsSögÀMu…iSãp
(c⁄° 
uöt8_t
 *
d
, uöt8_à
is_mu…i_°ï
)

1114 
uöt8_t
 
lo›_pos
;

1119 i‡–
	`u8g_pgm_ªad
(
d
) == 0 )

1123 
lo›_pos
 = 
	`°ack_GëCuºEÀmít
()->
cuºít_pos
;

1129 
lo›_pos
 +
	`u8g_pgm_ªad
(
d
);

1136 i‡–
	`˚_Lo›Recur
(
lo›_pos
) == 0 )

1140 i‡–
	`˝_GëPõ˚
(
	`˝_GëFromBﬂrd
(
lo›_pos
)Ë!
PIECE_NONE
 )

1142 }  
is_mu…i_°ï
 );

1143 
d
++;

1145 
	}
}

1147 
	$˚_Lo›Rook
()

1149 
	`˚_Lo›DúsSögÀMu…iSãp
(
˚_dú_off£t_rook
, 1);

1150 
	}
}

1152 
	$˚_Lo›Bish›
()

1154 
	`˚_Lo›DúsSögÀMu…iSãp
(
˚_dú_off£t_bish›
, 1);

1155 
	}
}

1157 
	$˚_Lo›Quìn
()

1159 
	`˚_Lo›DúsSögÀMu…iSãp
(
˚_dú_off£t_quìn
, 1);

1160 
	}
}

1162 
	$˚_Lo›Knight
()

1164 
	`˚_Lo›DúsSögÀMu…iSãp
(
˚_dú_off£t_knight
, 0);

1165 
	}
}

1173 
uöt8_t
 
	$cu_IsKögCa°lög
(
uöt8_t
 
mask
, 
öt8_t
 
dúe˘i⁄
, uöt8_à
˙t
Ë
U8G_NOINLINE
;

1183 
uöt8_t
 
	$cu_IsKögCa°lög
(
uöt8_t
 
mask
, 
öt8_t
 
dúe˘i⁄
, uöt8_à
˙t
)

1185 
uöt8_t
 
pos
;

1186 
uöt8_t
 
›p⁄ít_cﬁ‹
;

1189 i‡–(
Ãc_obj
.
ˇ°lög_possibÀ
 & 
mask
) == 0 )

1193 
pos
 = 
	`°ack_GëCuºEÀmít
()->
cuºít_pos
;

1196 
›p⁄ít_cﬁ‹
 = 1;

1197 
›p⁄ít_cﬁ‹
 -
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
;

1200 i‡–
	`˚_GëPosôi⁄AâackWeight
(
pos
, 
›p⁄ít_cﬁ‹
) > 0 )

1208 
pos
 +
dúe˘i⁄
;

1210 i‡–
	`˝_GëPõ˚
(
	`˝_GëFromBﬂrd
(
pos
)Ë!
PIECE_NONE
 )

1214 i‡–
	`˚_GëPosôi⁄AâackWeight
(
pos
, 
›p⁄ít_cﬁ‹
) > 0 )

1217 
˙t
--;

1218 i‡–
˙t
 == 0 )

1222 
	}
}

1224 
	$˚_Lo›Kög
()

1234 i‡–
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
 =
COLOR_WHITE
 )

1237 i‡–
	`cu_IsKögCa°lög
(1, -1, 3) != 0 )

1240 
	`˚_Lo›Recur
(
	`°ack_GëCuºEÀmít
()->
cuºít_pos
-2);

1243 i‡–
	`cu_IsKögCa°lög
(2, 1, 2) != 0 )

1246 
	`˚_Lo›Recur
(
	`°ack_GëCuºEÀmít
()->
cuºít_pos
+2);

1252 i‡–
	`cu_IsKögCa°lög
(4, -1, 3) != 0 )

1255 
	`˚_Lo›Recur
(
	`°ack_GëCuºEÀmít
()->
cuºít_pos
-2);

1258 i‡–
	`cu_IsKögCa°lög
(8, 1, 2) != 0 )

1261 
	`˚_Lo›Recur
(
	`°ack_GëCuºEÀmít
()->
cuºít_pos
+2);

1266 
	`˚_Lo›DúsSögÀMu…iSãp
(
˚_dú_off£t_quìn
, 0);

1267 
	}
}

1278 
	$˚_Lo›PawnSideC≠tuª
(
uöt8_t
 
lo›_pos
)

1280 i‡–
	`gpos_IsIŒegÆ
(
lo›_pos
) == 0 )

1284 i‡–
	`˝_GëPõ˚
(
	`˝_GëFromBﬂrd
(
lo›_pos
)Ë!
PIECE_NONE
 )

1287 
	`˚_Lo›Recur
(
lo›_pos
);

1293 i‡–
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
 =
COLOR_WHITE
 )

1295 i‡–
Ãc_obj
.
∑wn_dbl_move
[
COLOR_BLACK
]+16 =
lo›_pos
 )

1297 
	`˚_Lo›Recur
(
lo›_pos
);

1303 i‡–
Ãc_obj
.
∑wn_dbl_move
[
COLOR_WHITE
] =
lo›_pos
+16 )

1305 
	`˚_Lo›Recur
(
lo›_pos
);

1311 
	}
}

1313 
	$˚_Lo›Pawn
()

1315 
uöt8_t
 
öôül_pos
 = 
	`°ack_GëCuºEÀmít
()->
cuºít_pos
;

1316 
uöt8_t
 
my_cﬁ‹
 = 
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
;

1318 
uöt8_t
 
lo›_pos
;

1319 
uöt8_t
 
löe
;

1323 
lo›_pos
 = 
öôül_pos
;

1324 
löe
 = 
öôül_pos
;

1325 
löe
 >>= 4;

1326 i‡–
my_cﬁ‹
 =
COLOR_WHITE
 )

1327 
lo›_pos
 += 16;

1329 
lo›_pos
 -= 16;

1330 i‡–
	`gpos_IsIŒegÆ
(
lo›_pos
) == 0 )

1333 i‡–
	`˝_GëPõ˚
(
	`˝_GëFromBﬂrd
(
lo›_pos
)Ë=
PIECE_NONE
 )

1336 
	`˚_Lo›Recur
(
lo›_pos
);

1341 i‡–(
my_cﬁ‹
 =
COLOR_WHITE
 && 
löe
 =1Ë|| (my_cﬁ‹ =
COLOR_BLACK
 &&Üine == 6 ) )

1345 i‡–
my_cﬁ‹
 =
COLOR_WHITE
 )

1346 
lo›_pos
 += 16;

1348 
lo›_pos
 -= 16;

1349 i‡–
	`˝_GëPõ˚
(
	`˝_GëFromBﬂrd
(
lo›_pos
)Ë=
PIECE_NONE
 )

1352 
	`˚_Lo›Recur
(
lo›_pos
);

1360 
lo›_pos
 = 
öôül_pos
;

1361 i‡–
my_cﬁ‹
 =
COLOR_WHITE
 )

1362 
lo›_pos
 += 15;

1364 
lo›_pos
 -= 15;

1365 
	`˚_Lo›PawnSideC≠tuª
(
lo›_pos
);

1368 
lo›_pos
 = 
öôül_pos
;

1369 i‡–
my_cﬁ‹
 =
COLOR_WHITE
 )

1370 
lo›_pos
 += 17;

1372 
lo›_pos
 -= 17;

1373 
	`˚_Lo›PawnSideC≠tuª
(
lo›_pos
);

1374 
	}
}

1391 
	$˚_FödPõ˚BySãp
(
uöt8_t
 
°¨t_pos
, uöt8_à
põ˚
, c⁄° uöt8_à*
d
, uöt8_à
is_mu…i_°ï
)

1393 
uöt8_t
 
lo›_pos
, 
˝
;

1398 i‡–
	`u8g_pgm_ªad
(
d
) == 0 )

1402 
lo›_pos
 = 
°¨t_pos
;

1408 
lo›_pos
 +
	`u8g_pgm_ªad
(
d
);

1411 i‡–(
lo›_pos
 & 0x088) != 0 )

1415 
˝
 = 
	`˝_GëFromBﬂrd
(
lo›_pos
);

1418 i‡–
	`˝_GëPõ˚
(
˝
Ë!
PIECE_NONE
 )

1421 i‡–
	`˝_GëPõ˚
(
˝
Ë=
põ˚
 )

1423 
Ãc_obj
.
föd_põ˚_weight
[
	`˝_GëCﬁ‹
(
˝
)] +
˚_põ˚_weight
[
põ˚
];

1424 
Ãc_obj
.
föd_põ˚_˙t
[
	`˝_GëCﬁ‹
(
˝
)]++;

1429 }  
is_mu…i_°ï
 );

1430 
d
++;

1432 
	}
}

1434 
	$˚_FödPawnPõ˚
(
uöt8_t
 
de°_pos
, uöt8_à
cﬁ‹
)

1436 
uöt8_t
 
˝
;

1438 i‡–(
de°_pos
 & 0x088) == 0 )

1441 
˝
 = 
	`˝_GëFromBﬂrd
(
de°_pos
);

1443 i‡–
	`˝_GëPõ˚
(
˝
Ë=
PIECE_PAWN
 )

1445 i‡–
	`˝_GëCﬁ‹
(
˝
Ë=
cﬁ‹
 )

1448 
Ãc_obj
.
föd_põ˚_weight
[
cﬁ‹
] += 1;

1449 
Ãc_obj
.
föd_põ˚_˙t
[
cﬁ‹
]++;

1453 
	}
}

1476 
	$˚_CÆcuœãPosôi⁄Weight
(
uöt8_t
 
pos
)

1479 
Ãc_obj
.
föd_põ˚_weight
[0] = 0;

1480 
Ãc_obj
.
föd_põ˚_weight
[1] = 0;

1481 
Ãc_obj
.
föd_põ˚_˙t
[0] = 0;

1482 
Ãc_obj
.
föd_põ˚_˙t
[1] = 0;

1484 i‡–(
pos
 & 0x088) != 0 )

1487 
	`˚_FödPõ˚BySãp
(
pos
, 
PIECE_ROOK
, 
˚_dú_off£t_rook
, 1);

1488 
	`˚_FödPõ˚BySãp
(
pos
, 
PIECE_BISHOP
, 
˚_dú_off£t_bish›
, 1);

1489 
	`˚_FödPõ˚BySãp
(
pos
, 
PIECE_QUEEN
, 
˚_dú_off£t_quìn
, 1);

1490 
	`˚_FödPõ˚BySãp
(
pos
, 
PIECE_KNIGHT
, 
˚_dú_off£t_knight
, 0);

1491 
	`˚_FödPõ˚BySãp
(
pos
, 
PIECE_KING
, 
˚_dú_off£t_quìn
, 0);

1493 
	`˚_FödPawnPõ˚
(
pos
+17, 
COLOR_BLACK
);

1494 
	`˚_FödPawnPõ˚
(
pos
+15, 
COLOR_BLACK
);

1495 
	`˚_FödPawnPõ˚
(
pos
-17, 
COLOR_WHITE
);

1496 
	`˚_FödPawnPõ˚
(
pos
-15, 
COLOR_WHITE
);

1497 
	}
}

1507 
uöt8_t
 
	$˚_GëPosôi⁄AâackWeight
(
uöt8_t
 
pos
, uöt8_à
cﬁ‹
)

1509 
	`˚_CÆcuœãPosôi⁄Weight
(
pos
);

1510  
Ãc_obj
.
föd_põ˚_weight
[
cﬁ‹
];

1511 
	}
}

1513 
uöt8_t
 
	$˚_GëPosôi⁄AâackCou¡
(
uöt8_t
 
pos
, uöt8_à
cﬁ‹
)

1515 
	`˚_CÆcuœãPosôi⁄Weight
(
pos
);

1516  
Ãc_obj
.
föd_põ˚_˙t
[
cﬁ‹
];

1517 
	}
}

1524 
	$˚_Lo›Põ˚s
()

1526 
°ack_ñemít_p
 
e
 = 
	`°ack_GëCuºEÀmít
();

1528 
e
->
cuºít_pos
 = 0;

1531 
e
->
cuºít_˝
 = 
	`˝_GëFromBﬂrd
”->
cuºít_pos
);

1533 i‡–
e
->
cuºít_˝
 != 0 )

1536 i‡–
e
->
cuºít_cﬁ‹
 =
	`˝_GëCﬁ‹
”->
cuºít_˝
) )

1538 
	`chess_Thökög
();

1541 
	`˝_GëPõ˚
(
e
->
cuºít_˝
))

1543 
PIECE_NONE
:

1545 
PIECE_PAWN
:

1546 
	`˚_Lo›Pawn
();

1548 
PIECE_KNIGHT
:

1549 
	`˚_Lo›Knight
();

1551 
PIECE_BISHOP
:

1552 
	`˚_Lo›Bish›
();

1554 
PIECE_ROOK
:

1555 
	`˚_Lo›Rook
();

1557 
PIECE_QUEEN
:

1558 
	`˚_Lo›Quìn
();

1560 
PIECE_KING
:

1561 
	`˚_Lo›Kög
();

1566 
e
->
cuºít_pos
 = 
	`cu_NextPos
(e->current_pos);

1567 }  
e
->
cuºít_pos
 != 0 );

1568 
	}
}

1585 
	$chess_CÀ¨M¨ks
()

1587 
uöt8_t
 
i
;

1588  
i
 = 0; i < 64; i++ )

1589 
Ãc_obj
.
bﬂrd
[
i
] &~
CP_MARK_MASK
;

1590 
	}
}

1595 
	$chess_M¨kMovabÀ
()

1597 
	`°ack_Inô
(0);

1599 
Ãc_obj
.
check_mode
 = 
CHECK_MODE_MOVEABLE
;

1600 
	`˚_Lo›Põ˚s
();

1601 
	}
}

1608 
	$chess_M¨kT¨gëMoves
(
uöt8_t
 
§c_pos
)

1610 
	`°ack_Inô
(0);

1611 
	`°ack_GëCuºEÀmít
()->
cuºít_cﬁ‹
 = 
	`˝_GëCﬁ‹
(
	`˝_GëFromBﬂrd
(
§c_pos
));

1612 
Ãc_obj
.
check_§c_pos
 = 
§c_pos
;

1613 
Ãc_obj
.
check_mode
 = 
CHECK_MODE_TARGET_MOVE
;

1614 
	`˚_Lo›Põ˚s
();

1615 
	}
}

1623 
uöt8_t
 
	$chess_GëNextM¨ked
(
uöt8_t
 
¨g
, uöt8_à
is_¥ev
)

1625 
uöt8_t
 
i
;

1626 
uöt8_t
 
pos
 = 
¨g
;

1627 
i
 = 0; i < 64; i++)

1629 i‡–
is_¥ev
 != 0 )

1630 
pos
 = 
	`cu_PªvPos
(pos);

1632 
pos
 = 
	`cu_NextPos
(pos);

1633 i‡–
¨g
 !255 && 
pos
 == 0 )

1635 i‡–
	`˝_IsM¨ked
(
	`˝_GëFromBﬂrd
(
pos
)) )

1636  
pos
;

1639 
	}
}

1643 
	$chess_M™uÆMove
(
uöt8_t
 
§c
, uöt8_à
de°
)

1645 
uöt8_t
 
˝
;

1651 
˝
 = 
	`˝_GëFromBﬂrd
(
de°
);

1652 i‡–
	`˝_GëPõ˚
(
˝
Ë=
PIECE_KING
 )

1654 
Ãc_obj
.
is_game_íd
 = 1;

1655 
Ãc_obj
.
lo°_side_cﬁ‹
 = 
	`˝_GëCﬁ‹
(
˝
);

1660 
	`cu_Redu˚Hi°‹yByFuŒMove
();

1662 
	`cu_Move
(
§c
, 
de°
);

1665 
Ãc_obj
.
∑wn_dbl_move
[Ãc_obj.
∂y_cou¡
&1] = 
ILLEGAL_POSITION
;

1668 
Ãc_obj
.
∂y_cou¡
++;

1676 
	`°ack_Inô
(1);

1677 
	`˚_Lo›Põ˚s
();

1684 i‡–
	`°ack_GëCuºEÀmít
()->
be°_‰om_pos
 =
ILLEGAL_POSITION
 )

1686 
uöt8_t
 
cﬁ‹
;

1693 
uöt8_t
 
i
 = 0;

1694 
cﬁ‹
 = 
Ãc_obj
.
∂y_cou¡
;

1695 
cﬁ‹
 &= 1;

1698 
˝
 = 
	`˝_GëFromBﬂrd
(
i
);

1700 i‡–
	`˝_GëPõ˚
(
˝
Ë=
PIECE_KING
 )

1702 i‡–
	`˝_GëCﬁ‹
(
˝
Ë=
cﬁ‹
 )

1705 i‡–
	`˚_GëPosôi⁄AâackCou¡
(
i
, 
cﬁ‹
^1) != 0 )

1708 
Ãc_obj
.
is_game_íd
 = 1;

1709 
Ãc_obj
.
lo°_side_cﬁ‹
 = 
cﬁ‹
;

1714 
Ãc_obj
.
is_game_íd
 = 1;

1715 
Ãc_obj
.
lo°_side_cﬁ‹
 = 2;

1721 
i
 = 
	`cu_NextPos
(i);

1722 }  
i
 != 0 );

1724 
	}
}

1727 
	$chess_CompuãrMove
(
uöt8_t
 
dïth
)

1729 
	`°ack_Inô
(
dïth
);

1734 
	`cu_Redu˚Hi°‹yByFuŒMove
();

1735 
	`˚_Lo›Põ˚s
();

1737 
	`chess_M™uÆMove
(
	`°ack_GëCuºEÀmít
()->
be°_‰om_pos
, sèck_GëCuºEÀmít()->
be°_to_pos
);

1738 
	}
}

1745 #ifde‡
UNIX_MAIN


1747 
	~<°dio.h
>

1748 
	~<°rög.h
>

1750 *
	gpõ˚_°r
[] = {

1795 
	$chess_Thökög
()

1797 
uöt8_t
 
i
;

1798 
uöt8_t
 
˝
 = 
	`˝_GëPõ˚
(
	`°ack_GëCuºEÀmít
()->
cuºít_˝
);

1800 
	`¥ötf
("Thökög: ", 
põ˚_°r
[
˝
], 
	`°ack_GëCuºEÀmít
()->
cuºít_pos
);

1802  
i
 = 0; i <
Ãc_obj
.
cuº_dïth
; i++ )

1803 
	`¥ötf
("%†", 
põ˚_°r
[(
Ãc_obj
.
°ack_mem‹y
+
i
)->
cuºít_˝
]);

1805 
	`¥ötf
(" \r");

1806 
	}
}

1808 
	$bﬂrd_Show
()

1810 
uöt8_t
 
i
, 
j
, 
˝
;

1811 
buf
[10];

1812  
i
 = 0; i < 8; i++ )

1814 
	`¥ötf
("%1d ", 7-
i
);

1815  
j
 = 0; j < 8; j++ )

1818 
˝
 = 
Ãc_obj
.
bﬂrd
[(7-
i
)*8+
j
];

1819 
	`°r˝y
(
buf
, 
põ˚_°r
[
˝
&
COLOR_PIECE_MASK
]);

1821 i‡–(
˝
 & 
CP_MARK_MASK
) != 0 )

1823 
buf
[0] = '#';

1827 
˝
 &
COLOR_PIECE_MASK
;

1828 
	`¥ötf
("%†%02x ", 
buf
, 
˝
);

1831 
	`¥ötf
("\n");

1833 
	}
}

1835 
	$maö
()

1837 
uöt8_t
 
dïth
 = 3;

1838 
	`chess_SëupBﬂrd
();

1839 
	`bﬂrd_Show
();

1840 
	`puts
("");

1849 
	`chess_M™uÆMove
(0x006, 0x066);

1851 
	`¥ötf
("Ãc_obj.is_game_íd: %d\n" , 
Ãc_obj
.
is_game_íd
);

1852 
	`¥ötf
("Ãc_obj.lo°_side_cﬁ‹: %d\n" , 
Ãc_obj
.
lo°_side_cﬁ‹
);

1854 
	`chess_CompuãrMove
(2);

1856 
	`¥ötf
("Ãc_obj.is_game_íd: %d\n" , 
Ãc_obj
.
is_game_íd
);

1857 
	`¥ötf
("Ãc_obj.lo°_side_cﬁ‹: %d\n" , 
Ãc_obj
.
lo°_side_cﬁ‹
);

1859 
	`bﬂrd_Show
();

1861 
	}
}

1872 
	#MNU_FONT
 
u8g_f⁄t_5x8r


	)

1874 
	#MNU_ENTRY_HEIGHT
 9

	)

1876 *
	gmnu_tôÀ
 = "Little Rook Chess";

1877 *
	gmnu_li°
[] = { "New Game (White)", "New Game (Black)", "Undo Move", "Return" };

1878 
uöt8_t
 
	gmnu_pos
 = 0;

1879 
uöt8_t
 
	gmnu_max
 = 4;

1881 
	$mnu_DøwHome
(
uöt8_t
 
is_highlight
)

1883 
uöt8_t
 
x
 = 
Ãc_u8g
->
width
 - 35;

1884 
uöt8_t
 
y
 = (
Ãc_u8g
->
height
-1);

1885 
uöt8_t
 
t
;

1887 
	`u8g_SëF⁄t
(
Ãc_u8g
, 
u8g_f⁄t_5x7r
);

1888 
	`u8g_SëDeÁu…F‹egroundCﬁ‹
(
Ãc_u8g
);

1889 
t
 = 
	`u8g_DøwSåP
(
Ãc_u8g
, 
x
, 
y
 -1, 
	`U8G_PSTR
("Options"));

1891 i‡–
is_highlight
 )

1892 
	`u8g_DøwFøme
(
Ãc_u8g
, 
x
-1, 
y
 - 
MNU_ENTRY_HEIGHT
 +1, 
t
, MNU_ENTRY_HEIGHT);

1893 
	}
}

1895 
	$mnu_DøwE¡ry
(
uöt8_t
 
y
, *
°r
, uöt8_à
is_˛r_background
, uöt8_à
is_highlight
)

1897 
uöt8_t
 
t
, 
x
;

1898 
	`u8g_SëF⁄t
(
Ãc_u8g
, 
MNU_FONT
);

1899 
t
 = 
	`u8g_GëSåWidth
(
Ãc_u8g
, 
°r
);

1900 
x
 = 
	`u8g_GëWidth
(
Ãc_u8g
);

1901 
x
 -
t
;

1902 
x
 >>= 1;

1904 i‡–
is_˛r_background
 )

1906 
	`u8g_SëDeÁu…BackgroundCﬁ‹
(
Ãc_u8g
);

1907 
	`u8g_DøwBox
(
Ãc_u8g
, 
x
-3, (Ãc_u8g->
height
-1Ë- (
y
+
MNU_ENTRY_HEIGHT
-1+2), 
t
+5, MNU_ENTRY_HEIGHT+4);

1910 
	`u8g_SëDeÁu…F‹egroundCﬁ‹
(
Ãc_u8g
);

1911 
	`u8g_DøwSå
(
Ãc_u8g
, 
x
, (Ãc_u8g->
height
-1Ë- 
y
, 
°r
);

1913 i‡–
is_highlight
 )

1915 
	`u8g_DøwFøme
(
Ãc_u8g
, 
x
-1, (Ãc_u8g->
height
-1Ë- 
y
 -
MNU_ENTRY_HEIGHT
 +1, 
t
, MNU_ENTRY_HEIGHT);

1917 
	}
}

1919 
	$mnu_Døw
()

1921 
uöt8_t
 
i
;

1922 
uöt8_t
 
t
,
y
;

1924 
y
 = 
mnu_max
;

1925 
y
++;

1926 
y
++;

1927 
y
 *
MNU_ENTRY_HEIGHT
;

1930 
t
 = 
	`u8g_GëHeight
(
Ãc_u8g
);

1931 
t
 -
y
;

1934 
t
 >>= 1;

1935 
y
 = 
	`u8g_GëHeight
(
Ãc_u8g
);

1936 
y
 -
t
;

1938 
y
 -
MNU_ENTRY_HEIGHT
;

1939 
	`mnu_DøwE¡ry
(
y
, 
mnu_tôÀ
, 0, 0);

1941 
y
 -
MNU_ENTRY_HEIGHT
;

1944  
i
 = 0; i < 
mnu_max
; i++ )

1946 
y
 -
MNU_ENTRY_HEIGHT
;

1947 
	`mnu_DøwE¡ry
(
y
, 
mnu_li°
[
i
], 0, i =
mnu_pos
);

1949 
	}
}

1951 
	$mnu_Sãp
(
uöt8_t
 
key_cmd
)

1953 i‡–
key_cmd
 =
CHESS_KEY_NEXT
 )

1955 i‡–
mnu_pos
+1 < 
mnu_max
 )

1956 
mnu_pos
++;

1958 i‡–
key_cmd
 =
CHESS_KEY_PREV
 )

1960 i‡–
mnu_pos
 > 0 )

1961 
mnu_pos
--;

1963 
	}
}

1968 
uöt8_t
 
	gchess_key_code
 = 0;

1969 
uöt8_t
 
	gchess_key_cmd
 = 0;

1970 
	#CHESS_STATE_MENU
 0

	)

1971 
	#CHESS_STATE_SELECT_START
 1

	)

1972 
	#CHESS_STATE_SELECT_PIECE
 2

	)

1973 
	#CHESS_STATE_SELECT_TARGET_POS
 3

	)

1974 
	#CHESS_STATE_THINKING
 4

	)

1975 
	#CHESS_STATE_GAME_END
 5

	)

1976 
uöt8_t
 
	gchess_°©e
 = 
CHESS_STATE_MENU
;

1977 
uöt8_t
 
	gchess_sour˚_pos
 = 255;

1978 
uöt8_t
 
	gchess_èrgë_pos
 = 255;

1980 c⁄° 
uöt8_t
 
	gchess_põ˚s_body_bm
[] 
	gPROGMEM
 =

1990 #ifde‡
NOT_REQUIRED


1992 c⁄° 
uöt8_t
 
	gchess_whôe_põ˚s_bm
[] 
	gPROGMEM
 =

2003 c⁄° 
uöt8_t
 
	gchess_bœck_põ˚s_bm
[] 
	gPROGMEM
 =

2014 #i‡
deföed
(
DOGXL160_HW_GR
)

2015 
	#BOXSIZE
 13

	)

2016 
	#BOXOFFSET
 3

	)

2018 
	#BOXSIZE
 8

	)

2019 
	#BOXOFFSET
 1

	)

2022 
u8g_uöt_t
 
	gchess_low_edge
;

2023 
uöt8_t
 
	gchess_boxsize
 = 8;

2024 
uöt8_t
 
	gchess_boxoff£t
 = 1;

2027 
	$chess_DøwFøme
(
uöt8_t
 
pos
, uöt8_à
is_bﬁd
)

2029 
u8g_uöt_t
 
x0
, 
y0
;

2031 
x0
 = 
pos
;

2032 
x0
 &= 15;

2033 i‡–
Ãc_obj
.
‹õ¡©i⁄
 !
COLOR_WHITE
 )

2034 
x0
 ^= 7;

2036 
y0
 = 
pos
;

2037 
y0
>>= 4;

2038 i‡–
Ãc_obj
.
‹õ¡©i⁄
 !
COLOR_WHITE
 )

2039 
y0
 ^= 7;

2041 
x0
 *
chess_boxsize
;

2042 
y0
 *
chess_boxsize
;

2044 
	`u8g_SëDeÁu…F‹egroundCﬁ‹
(
Ãc_u8g
);

2045 
	`u8g_DøwFøme
(
Ãc_u8g
, 
x0
, 
chess_low_edge
 - 
y0
 - 
chess_boxsize
+1, chess_boxsize, chess_boxsize);

2048 i‡–
is_bﬁd
 )

2050 
x0
--;

2051 
y0
++;

2053 
	`u8g_DøwFøme
(
Ãc_u8g
, 
x0
, 
chess_low_edge
 - 
y0
 - 
chess_boxsize
 +1, chess_boxsize+2, chess_boxsize+2);

2055 
	}
}

2058 
	$chess_DøwBﬂrd
()

2060 
uöt8_t
 
i
, 
j
, 
˝
;

2061 c⁄° 
uöt8_t
 *
±r
;

2063 i‡–
	`U8G_MODE_GET_BITS_PER_PIXEL
(
	`u8g_GëMode
(
Ãc_u8g
)) > 1 )

2065  
i
 = 0; i < 8; i++ )

2066  
j
 = 0; j < 8; j++ )

2068 
uöt8_t
 
x
,
y
;

2069 
x
 = 
i
;

2070 
x
*=
chess_boxsize
;

2071 
y
 = 
j
;

2072 
y
*=
chess_boxsize
;

2073 i‡–((
i
^
j
) & 1) == 0 )

2074 
	`u8g_SëDeÁu…MidCﬁ‹
(
Ãc_u8g
);

2076 
	`u8g_SëDeÁu…BackgroundCﬁ‹
(
Ãc_u8g
);

2077 
	`u8g_DøwBox
(
Ãc_u8g
, 
x
,
chess_low_edge
-
y
-
chess_boxsize
+1,chess_boxsize,chess_boxsize);

2083 
uöt8_t
 
x_off£t
 = 1;

2084 
	`u8g_SëDeÁu…F‹egroundCﬁ‹
(
Ãc_u8g
);

2085  
i
 = 0; i < 8*8; i+=8 )

2087  
j
 = 0; j < 8*8; j+=8 )

2089 i‡–((
i
^
j
) & 8) == 0 )

2091 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+0+
x_off£t
, 
chess_low_edge
 - 
i
-0);

2092 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+0+
x_off£t
, 
chess_low_edge
 - 
i
-2);

2093 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+0+
x_off£t
, 
chess_low_edge
 - 
i
-4);

2094 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+0+
x_off£t
, 
chess_low_edge
 - 
i
-6);

2095 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+2+
x_off£t
, 
chess_low_edge
 - 
i
-0);

2096 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+2+
x_off£t
, 
chess_low_edge
 - 
i
-6);

2097 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+4+
x_off£t
, 
chess_low_edge
 - 
i
-0);

2098 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+4+
x_off£t
, 
chess_low_edge
 - 
i
-6);

2099 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+6+
x_off£t
, 
chess_low_edge
 - 
i
-0);

2100 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+6+
x_off£t
, 
chess_low_edge
 - 
i
-2);

2101 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+6+
x_off£t
, 
chess_low_edge
 - 
i
-4);

2102 
	`u8g_DøwPixñ
(
Ãc_u8g
, 
j
+6+
x_off£t
, 
chess_low_edge
 - 
i
-6);

2108  
i
 = 0; i < 8; i++ )

2110  
j
 = 0; j < 8; j++ )

2113 i‡–
Ãc_obj
.
‹õ¡©i⁄
 =
COLOR_WHITE
 )

2115 
˝
 = 
Ãc_obj
.
bﬂrd
[
i
*8+
j
];

2119 
˝
 = 
Ãc_obj
.
bﬂrd
[(7-
i
)*8+7-
j
];

2121 i‡–
	`˝_GëPõ˚
(
˝
Ë!
PIECE_NONE
 )

2123 
±r
 = 
chess_bœck_põ˚s_bm
;

2124 
±r
 +(
	`˝_GëPõ˚
(
˝
)-1)*8;

2125 
	`u8g_SëDeÁu…F‹egroundCﬁ‹
(
Ãc_u8g
);

2126 
	`u8g_DøwBôm≠P
(
Ãc_u8g
, 
j
*
chess_boxsize
+
chess_boxoff£t
-1, 
chess_low_edge
 - (
i
*chess_boxsize+chess_boxsize-chess_boxoff£t), 1, 8, 
±r
);

2128 i‡–
	`˝_GëCﬁ‹
(
˝
Ë=
Ãc_obj
.
°rike_out_cﬁ‹
 )

2130 
±r
 = 
chess_põ˚s_body_bm
;

2131 
±r
 +(
	`˝_GëPõ˚
(
˝
)-1)*8;

2132 
	`u8g_SëDeÁu…BackgroundCﬁ‹
(
Ãc_u8g
);

2133 
	`u8g_DøwBôm≠P
(
Ãc_u8g
, 
j
*
chess_boxsize
+
chess_boxoff£t
-1, 
chess_low_edge
 - (
i
*chess_boxsize+chess_boxsize-chess_boxoff£t), 1, 8, 
±r
);

2139 i‡–(
chess_sour˚_pos
 & 0x88) == 0 )

2141 
	`chess_DøwFøme
(
chess_sour˚_pos
, 1);

2144 i‡–(
chess_èrgë_pos
 & 0x88) == 0 )

2146 
	`chess_DøwFøme
(
chess_èrgë_pos
, 0);

2149 
	}
}

2152 
	$chess_Thökög
()

2154 
	}
}

2156 
	$chess_Inô
(
u8g_t
 *
u8g
, 
uöt8_t
 
body_cﬁ‹
)

2158 
Ãc_u8g
 = 
u8g
;

2160 
chess_low_edge
 = 
	`u8g_GëHeight
(
Ãc_u8g
);

2161 
chess_low_edge
--;

2164 i‡–
	`U8G_MODE_GET_BITS_PER_PIXEL
(
	`u8g_GëMode
(
Ãc_u8g
)) == 1 )

2167 
chess_boxsize
 = 8;

2168 
chess_boxoff£t
 = 1;

2179  i‡–
	`u8g_GëHeight
(
Ãc_u8g
) >= 11*8 )

2181 
chess_boxsize
 = 10;

2182 
chess_boxoff£t
 = 2;

2186 
chess_boxsize
 = 8;

2187 
chess_boxoff£t
 = 1;

2190 i‡–
	`u8g_GëHeight
(
Ãc_u8g
) > 64 )

2191 
chess_low_edge
 -(
	`u8g_GëHeight
(
Ãc_u8g
)-
chess_boxsize
*8) / 2;

2195 
Ãc_obj
.
°rike_out_cﬁ‹
 = 
body_cﬁ‹
;

2196 
	`chess_SëupBﬂrd
();

2197 
	}
}

2201 
	$chess_Døw
()

2203 i‡–
chess_°©e
 =
CHESS_STATE_MENU
 )

2205 i‡–
Ãc_obj
.
∂y_cou¡
 == 0)

2206 
mnu_max
 = 2;

2208 
mnu_max
 = 4;

2209 
	`mnu_Døw
();

2213 
	`chess_DøwBﬂrd
();

2216 
uöt8_t
 
i
;

2217 
uöt8_t
 
íåõs
 = 
Ãc_obj
.
chm_pos
;

2218 i‡–
íåõs
 > 4 )

2219 
íåõs
 = 4;

2221 
	`u8g_SëF⁄t
(
Ãc_u8g
, 
u8g_f⁄t_5x7
);

2222 
	`u8g_SëDeÁu…F‹egroundCﬁ‹
(
Ãc_u8g
);

2223  
i
 = 0; i < 
íåõs
; i++ )

2226 #i‡
	`deföed
(
DOGXL160_HW_GR
Ë|| deföed(
DOGXL160_HW_BW
)

2227 
	`dog_DøwSå
(
	`u8g_GëWidth
(
Ãc_u8g
)-35, 
	`u8g_GëHeight
÷rc_u8g)-8*(
i
+1), 
f⁄t_5x7
, 
	`cu_GëHÆfMoveSå
(
Ãc_obj
.
chm_pos
-
íåõs
+i));

2229 
	`u8g_DøwSå
(
Ãc_u8g
, 
	`u8g_GëWidth
÷rc_u8g)-35, 8*(
i
+1), 
	`cu_GëHÆfMoveSå
(
Ãc_obj
.
chm_pos
-
íåõs
+i));

2236 i‡–
chess_°©e
 =
CHESS_STATE_SELECT_PIECE
 )

2237 
	`mnu_DøwHome
(
chess_sour˚_pos
 == 255);

2238 i‡–
chess_°©e
 =
CHESS_STATE_SELECT_TARGET_POS
 )

2239 
	`mnu_DøwHome
(
chess_èrgë_pos
 == 255);

2241 
	`mnu_DøwHome
(0);

2243 i‡–
chess_°©e
 =
CHESS_STATE_GAME_END
 )

2245  
Ãc_obj
.
lo°_side_cﬁ‹
 )

2247 
COLOR_WHITE
:

2248 
	`mnu_DøwE¡ry
(
	`u8g_GëHeight
(
Ãc_u8g
) / 2-2, "Black wins", 1, 1);

2250 
COLOR_BLACK
:

2251 
	`mnu_DøwE¡ry
(
	`u8g_GëHeight
(
Ãc_u8g
) / 2-2, "White wins", 1, 1);

2254 
	`mnu_DøwE¡ry
(
	`u8g_GëHeight
(
Ãc_u8g
) / 2-2, "Stalemate", 1, 1);

2259 
	}
}

2262 
	$chess_Sãp
(
uöt8_t
 
keycode
)

2264 i‡–
keycode
 =
CHESS_KEY_NONE
 )

2266 
chess_key_cmd
 = 
chess_key_code
;

2267 
chess_key_code
 = 
CHESS_KEY_NONE
;

2271 
chess_key_cmd
 = 
CHESS_KEY_NONE
;

2272 
chess_key_code
 = 
keycode
;

2275 
chess_°©e
)

2277 
CHESS_STATE_MENU
:

2278 
	`mnu_Sãp
(
chess_key_cmd
);

2279 i‡–
chess_key_cmd
 =
CHESS_KEY_SELECT
 )

2281 i‡–
mnu_pos
 == 0 )

2283 
	`chess_SëupBﬂrd
();

2284 
Ãc_obj
.
‹õ¡©i⁄
 = 0;

2285 
chess_°©e
 = 
CHESS_STATE_SELECT_START
;

2287 i‡–
mnu_pos
 == 1 )

2289 
	`chess_SëupBﬂrd
();

2290 
Ãc_obj
.
‹õ¡©i⁄
 = 1;

2291 
chess_°©e
 = 
CHESS_STATE_THINKING
;

2293 i‡–
mnu_pos
 == 2 )

2295 i‡–
Ãc_obj
.
∂y_cou¡
 >= 2 )

2297 
	`cu_UndoHÆfMove
();

2298 
	`cu_UndoHÆfMove
();

2299 
Ãc_obj
.
∂y_cou¡
-=2;

2300 i‡–
Ãc_obj
.
∂y_cou¡
 == 0 )

2301 
mnu_pos
 = 0;

2303 
chess_°©e
 = 
CHESS_STATE_SELECT_START
;

2305 i‡–
mnu_pos
 == 3 )

2307 
chess_°©e
 = 
CHESS_STATE_SELECT_START
;

2311 
CHESS_STATE_SELECT_START
:

2312 
	`chess_CÀ¨M¨ks
();

2313 
	`chess_M¨kMovabÀ
();

2314 
chess_sour˚_pos
 = 
	`chess_GëNextM¨ked
(255, 0);

2315 
chess_èrgë_pos
 = 
ILLEGAL_POSITION
;

2316 
chess_°©e
 = 
CHESS_STATE_SELECT_PIECE
;

2319 
CHESS_STATE_SELECT_PIECE
:

2320 i‡–
chess_key_cmd
 =
CHESS_KEY_NEXT
 )

2322 
chess_sour˚_pos
 = 
	`chess_GëNextM¨ked
(chess_source_pos, 0);

2324 i‡–
chess_key_cmd
 =
CHESS_KEY_PREV
 )

2326 
chess_sour˚_pos
 = 
	`chess_GëNextM¨ked
(chess_source_pos, 1);

2328 i‡–
chess_key_cmd
 =
CHESS_KEY_SELECT
 )

2330 i‡–
chess_sour˚_pos
 == 255 )

2332 
chess_°©e
 = 
CHESS_STATE_MENU
;

2336 
	`chess_CÀ¨M¨ks
();

2337 
	`chess_M¨kT¨gëMoves
(
chess_sour˚_pos
);

2338 
chess_èrgë_pos
 = 
	`chess_GëNextM¨ked
(255, 0);

2339 
chess_°©e
 = 
CHESS_STATE_SELECT_TARGET_POS
;

2343 
CHESS_STATE_SELECT_TARGET_POS
:

2344 i‡–
chess_key_cmd
 =
CHESS_KEY_NEXT
 )

2346 
chess_èrgë_pos
 = 
	`chess_GëNextM¨ked
(chess_target_pos, 0);

2348 i‡–
chess_key_cmd
 =
CHESS_KEY_PREV
 )

2350 
chess_èrgë_pos
 = 
	`chess_GëNextM¨ked
(chess_target_pos, 1);

2352 i‡–
chess_key_cmd
 =
CHESS_KEY_BACK
 )

2354 
	`chess_CÀ¨M¨ks
();

2355 
	`chess_M¨kMovabÀ
();

2356 
chess_èrgë_pos
 = 
ILLEGAL_POSITION
;

2357 
chess_°©e
 = 
CHESS_STATE_SELECT_PIECE
;

2359 i‡–
chess_key_cmd
 =
CHESS_KEY_SELECT
 )

2361 
	`chess_M™uÆMove
(
chess_sour˚_pos
, 
chess_èrgë_pos
);

2362 i‡–
Ãc_obj
.
is_game_íd
 != 0 )

2363 
chess_°©e
 = 
CHESS_STATE_GAME_END
;

2365 
chess_°©e
 = 
CHESS_STATE_THINKING
;

2367 
chess_sour˚_pos
 = 
ILLEGAL_POSITION
;

2368 
chess_èrgë_pos
 = 
ILLEGAL_POSITION
;

2369 
	`chess_CÀ¨M¨ks
();

2372 
CHESS_STATE_THINKING
:

2373 
	`chess_CompuãrMove
(2);

2374 i‡–
Ãc_obj
.
is_game_íd
 != 0 )

2375 
chess_°©e
 = 
CHESS_STATE_GAME_END
;

2377 
chess_°©e
 = 
CHESS_STATE_SELECT_START
;

2379 
CHESS_STATE_GAME_END
:

2380 i‡–
chess_key_cmd
 !
CHESS_KEY_NONE
 )

2382 
chess_°©e
 = 
CHESS_STATE_MENU
;

2383 
	`chess_SëupBﬂrd
();

2388 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g.h

36 #i‚de‡
_U8G_H


37 
	#_U8G_H


	)

41 
	~<°ddef.h
>

43 #ifde‡
__18CXX


44 
	tuöt8_t
;

45 sig√d 
	töt8_t
;

46 
	tuöt16_t
;

47 sig√d 
	töt16_t
;

49 
	~<°döt.h
>

52 #i‡
deföed
(
__AVR__
)

53 
	~<avr/pgm•a˚.h
>

56 #ifde‡
__˝lu•lus


62 #ifde‡
__GNUC__


63 
	#U8G_NOINLINE
 
	`__©åibuã__
((
noölöe
))

	)

64 
	#U8G_PURE
 
	`__©åibuã__
 ((
puª
))

	)

65 
	#U8G_NOCOMMON
 
	`__©åibuã__
 ((
nocomm⁄
))

	)

66 
	#U8G_SECTION
(
«me
Ë
	`__©åibuã__
 ((
	`£˘i⁄
 («me)))

	)

68 
	#U8G_NOINLINE


	)

69 
	#U8G_PURE


	)

70 
	#U8G_NOCOMMON


	)

71 
	#U8G_SECTION
(
«me
)

	)

77 #i‡
deföed
(
__AVR__
)

79 
	#U8G_PROGMEM
 
	`U8G_SECTION
(".¥ogmem.d©a")

	)

80 
uöt8_t
 
	tPROGMEM
 
	tu8g_pgm_uöt8_t
;

81 
uöt8_t
 
	tu8g_‚çgm_uöt8_t
;

82 
	#u8g_pgm_ªad
(
adr
Ë
	`pgm_ªad_byã_√¨
◊dr)

	)

83 
	#U8G_PSTR
(
s
Ë((
u8g_pgm_uöt8_t
 *)
	`PSTR
(s))

	)

85 
	#U8G_PROGMEM


	)

86 
	#PROGMEM


	)

87 
uöt8_t
 
	tu8g_pgm_uöt8_t
;

88 
uöt8_t
 
	tu8g_‚çgm_uöt8_t
;

89 
	#u8g_pgm_ªad
(
adr
Ë(*(c⁄° 
u8g_pgm_uöt8_t
 *)◊dr))

	)

90 
	#U8G_PSTR
(
s
Ë((
u8g_pgm_uöt8_t
 *)(s))

	)

95 
_u8g_t
 
	tu8g_t
;

96 
_u8g_dev_t
 
	tu8g_dev_t
;

98 
_u8g_dev_¨g_pixñ_t
 
	tu8g_dev_¨g_pixñ_t
;

99 
_u8g_dev_¨g_bbx_t
 
	tu8g_dev_¨g_bbx_t
;

100 
_u8g_box_t
 
	tu8g_box_t
;

105 #i‡
deföed
(
U8G_16BIT
)

106 
uöt16_t
 
	tu8g_uöt_t
;

107 
öt16_t
 
	tu8g_öt_t
;

109 
uöt8_t
 
	tu8g_uöt_t
;

110 
öt8_t
 
	tu8g_öt_t
;

113 #ifde‡
OBSOLETE


114 
	s_u8g_box_t


116 
u8g_uöt_t
 
x0
, 
y0
, 
x1
, 
y1
;

118 
_u8g_box_t
 
	tu8g_box_t
;

125 #ifde‡
__XC8


127 
uöt8_t
 (*
	tu8g_dev_‚±r
)(*
	tu8g
, *
	tdev
, 
	tuöt8_t
 
	tmsg
, *
	t¨g
);

130 
uöt8_t
 (*
	tu8g_com_‚±r
)(*
	tu8g
, 
	tuöt8_t
 
	tmsg
, uöt8_à
	t¨g_vÆ
, *
	t¨g_±r
);

133 
uöt8_t
 (*
	tu8g_dev_‚±r
)(
	tu8g_t
 *
	tu8g
, 
	tu8g_dev_t
 *
	tdev
, 
	tuöt8_t
 
	tmsg
, *
	t¨g
);

136 
uöt8_t
 (*
	tu8g_com_‚±r
)(
	tu8g_t
 *
	tu8g
, 
	tuöt8_t
 
	tmsg
, uöt8_à
	t¨g_vÆ
, *
	t¨g_±r
);

141 
	s_u8g_dev_t


143 
u8g_dev_‚±r
 
dev_‚
;

144 *
dev_mem
;

145 
u8g_com_‚±r
 
com_‚
;

153 
u8g_dev_t
 
u8g_dev_sdl_1bô
;

154 
u8g_dev_t
 
u8g_dev_sdl_1bô_h
;

155 
u8g_dev_t
 
u8g_dev_sdl_2bô
;

156 
u8g_dev_t
 
u8g_dev_sdl_2bô_doubÀ_mem
;

157 
u8g_dev_t
 
u8g_dev_sdl_8bô
;

158 
u8g_sdl_gë_key
();

161 
u8g_dev_t
 
u8g_dev_°dout
;

164 
u8g_dev_t
 
u8g_dev_pbm
;

165 
u8g_dev_t
 
u8g_dev_pbm_8h1
;

166 
u8g_dev_t
 
u8g_dev_pbm_8h2
;

169 
u8g_dev_t
 
u8g_dev_g¥of
;

172 
u8g_dev_t
 
u8g_dev_uc1701_dogs102_sw_•i
;

173 
u8g_dev_t
 
u8g_dev_uc1701_dogs102_hw_•i
;

176 
u8g_dev_t
 
u8g_dev_uc1701_möi12864_sw_•i
;

177 
u8g_dev_t
 
u8g_dev_uc1701_möi12864_hw_•i
;

180 
u8g_dev_t
 
u8g_dev_°7565_dogm132_sw_•i
;

181 
u8g_dev_t
 
u8g_dev_°7565_dogm132_hw_•i
;

184 
u8g_dev_t
 
u8g_dev_°7565_dogm128_sw_•i
;

185 
u8g_dev_t
 
u8g_dev_°7565_dogm128_hw_•i
;

187 
u8g_dev_t
 
u8g_dev_°7565_lm6063_sw_•i
;

188 
u8g_dev_t
 
u8g_dev_°7565_lm6063_hw_•i
;

190 
u8g_dev_t
 
u8g_dev_°7565_lm6059_sw_•i
;

191 
u8g_dev_t
 
u8g_dev_°7565_lm6059_hw_•i
;

193 
u8g_dev_t
 
u8g_dev_°7565_nhd_c12864_sw_•i
;

194 
u8g_dev_t
 
u8g_dev_°7565_nhd_c12864_hw_•i
;

196 
u8g_dev_t
 
u8g_dev_°7565_nhd_c12832_sw_•i
;

197 
u8g_dev_t
 
u8g_dev_°7565_nhd_c12832_hw_•i
;

198 
u8g_dev_t
 
u8g_dev_°7565_nhd_c12832_∑øŒñ
;

200 
u8g_dev_t
 
u8g_dev_°7565_64128n_sw_•i
;

201 
u8g_dev_t
 
u8g_dev_°7565_64128n_hw_•i
;

204 
u8g_dev_t
 
u8g_dev_°7920_128x64_sw_•i
;

205 
u8g_dev_t
 
u8g_dev_°7920_128x64_hw_•i
;

206 
u8g_dev_t
 
u8g_dev_°7920_128x64_8bô
;

208 
u8g_dev_t
 
u8g_dev_°7920_128x64_4x_sw_•i
;

209 
u8g_dev_t
 
u8g_dev_°7920_128x64_4x_hw_•i
;

210 
u8g_dev_t
 
u8g_dev_°7920_128x64_4x_8bô
;

213 
u8g_dev_t
 
u8g_dev_°7920_192x32_sw_•i
;

214 
u8g_dev_t
 
u8g_dev_°7920_192x32_hw_•i
;

215 
u8g_dev_t
 
u8g_dev_°7920_192x32_8bô
;

217 
u8g_dev_t
 
u8g_dev_°7920_192x32_4x_sw_•i
;

218 
u8g_dev_t
 
u8g_dev_°7920_192x32_4x_hw_•i
;

219 
u8g_dev_t
 
u8g_dev_°7920_192x32_4x_8bô
;

222 
u8g_dev_t
 
u8g_dev_°7920_202x32_sw_•i
;

223 
u8g_dev_t
 
u8g_dev_°7920_202x32_hw_•i
;

224 
u8g_dev_t
 
u8g_dev_°7920_202x32_8bô
;

226 
u8g_dev_t
 
u8g_dev_°7920_202x32_4x_sw_•i
;

227 
u8g_dev_t
 
u8g_dev_°7920_202x32_4x_hw_•i
;

228 
u8g_dev_t
 
u8g_dev_°7920_202x32_4x_8bô
;

231 
u8g_dev_t
 
u8g_dev_lc7981_160x80_8bô
;

233 
u8g_dev_t
 
u8g_dev_lc7981_240x64_8bô
;

235 
u8g_dev_t
 
u8g_dev_lc7981_240x128_8bô
;

237 
u8g_dev_t
 
u8g_dev_lc7981_320x64_8bô
;

240 
u8g_dev_t
 
u8g_dev_t6963_240x128_8bô
;

241 
u8g_dev_t
 
u8g_dev_t6963_240x64_8bô
;

242 
u8g_dev_t
 
u8g_dev_t6963_128x64_8bô
;

245 
u8g_dev_t
 
u8g_dev_uc1610_dogxl160_bw_sw_•i
;

246 
u8g_dev_t
 
u8g_dev_uc1610_dogxl160_bw_hw_•i
;

247 
u8g_dev_t
 
u8g_dev_uc1610_dogxl160_gr_sw_•i
;

248 
u8g_dev_t
 
u8g_dev_uc1610_dogxl160_gr_hw_•i
;

250 
u8g_dev_t
 
u8g_dev_uc1610_dogxl160_2x_bw_sw_•i
;

251 
u8g_dev_t
 
u8g_dev_uc1610_dogxl160_2x_bw_hw_•i
;

252 
u8g_dev_t
 
u8g_dev_uc1610_dogxl160_2x_gr_sw_•i
;

253 
u8g_dev_t
 
u8g_dev_uc1610_dogxl160_2x_gr_hw_•i
;

256 
u8g_dev_t
 
u8g_dev_ks0108_128x64
;

257 
u8g_dev_t
 
u8g_dev_ks0108_128x64_Á°
;

260 
u8g_dev_t
 
u8g_dev_pcd8544_84x48_sw_•i
;

261 
u8g_dev_t
 
u8g_dev_és8204_84x48_sw_•i
;

264 
u8g_dev_t
 
u8g_dev_pcf8812_96x65_sw_•i
;

267 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_bw_sw_•i
;

268 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_bw_hw_•i
;

269 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_bw_∑øŒñ
;

270 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_gr_sw_•i
;

271 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_gr_hw_•i
;

273 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_sw_•i
;

274 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_hw_•i
;

275 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_∑øŒñ
;

276 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_2x_gr_sw_•i
;

277 
u8g_dev_t
 
u8g_dev_ssd1325_nhd27ﬁed_2x_gr_hw_•i
;

280 
u8g_dev_t
 
u8g_dev_ssd1327_96x96_gr_sw_•i
;

281 
u8g_dev_t
 
u8g_dev_ssd1327_96x96_gr_hw_•i
;

282 
u8g_dev_t
 
u8g_dev_ssd1327_96x96_gr_i2c
;

284 
u8g_dev_t
 
u8g_dev_ssd1327_96x96_2x_gr_sw_•i
;

285 
u8g_dev_t
 
u8g_dev_ssd1327_96x96_2x_gr_hw_•i
;

286 
u8g_dev_t
 
u8g_dev_ssd1327_96x96_2x_gr_i2c
;

289 
u8g_dev_t
 
u8g_dev_ssd1322_nhd31ﬁed_bw_sw_•i
;

290 
u8g_dev_t
 
u8g_dev_ssd1322_nhd31ﬁed_bw_hw_•i
;

291 
u8g_dev_t
 
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_sw_•i
;

292 
u8g_dev_t
 
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_hw_•i
;

294 
u8g_dev_t
 
u8g_dev_ssd1322_nhd31ﬁed_gr_sw_•i
;

295 
u8g_dev_t
 
u8g_dev_ssd1322_nhd31ﬁed_gr_hw_•i
;

296 
u8g_dev_t
 
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_sw_•i
;

297 
u8g_dev_t
 
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_hw_•i
;

300 
u8g_dev_t
 
u8g_dev_ssd1306_128x64_sw_•i
;

301 
u8g_dev_t
 
u8g_dev_ssd1306_128x64_hw_•i
;

302 
u8g_dev_t
 
u8g_dev_ssd1306_128x64_i2c
;

305 
u8g_dev_t
 
u8g_dev_ssd1309_128x64_sw_•i
;

306 
u8g_dev_t
 
u8g_dev_ssd1309_128x64_hw_•i
;

307 
u8g_dev_t
 
u8g_dev_ssd1309_128x64_i2c
;

310 
u8g_dev_t
 
u8g_dev_ssd1306_128x32_sw_•i
;

311 
u8g_dev_t
 
u8g_dev_ssd1306_128x32_hw_•i
;

312 
u8g_dev_t
 
u8g_dev_ssd1306_128x32_i2c
;

315 
u8g_dev_t
 
u8g_dev_°7687_c144mvgd_sw_•i
;

316 
u8g_dev_t
 
u8g_dev_°7687_c144mvgd_8bô
;

319 
u8g_dev_t
 
u8g_dev_sbn1661_122x32
;

322 
u8g_dev_t
 
u8g_dev_Êùdisc_2x7
;

323 
u8g_SëFlùDiscCÆlback
(
u8g_t
 *
u8g
, (*
cb
)(
uöt8_t
 
id
, uöt8_à
∑ge
, uöt8_à
width
, uöt8_à*
row1
, uöt8_à*
row2
));

326 
u8g_dev_t
 
u8g_dev_ûi9325d_320x240_8bô
;

329 
u8g_dev_t
 
u8g_dev_vs
;

335 
	s_u8g_dev_¨g_pixñ_t


337 
u8g_uöt_t
 
	gx
, 
	gy
;

338 
uöt8_t
 
	gpixñ
;

339 
uöt8_t
 
	gdú
;

340 
uöt8_t
 
	gcﬁ‹
;

344 
	s_u8g_dev_¨g_bbx_t


346 
u8g_uöt_t
 
	gx
, 
	gy
, 
	gw
, 
	gh
;

350 
	s_u8g_box_t


352 
u8g_uöt_t
 
	gx0
, 
	gy0
, 
	gx1
, 
	gy1
;

357 
	#U8G_DEV_MSG_INIT
 10

	)

358 
	#U8G_DEV_MSG_STOP
 11

	)

361 
	#U8G_DEV_MSG_CONTRAST
 15

	)

363 
	#U8G_DEV_MSG_SLEEP_ON
 16

	)

364 
	#U8G_DEV_MSG_SLEEP_OFF
 17

	)

366 
	#U8G_DEV_MSG_PAGE_FIRST
 20

	)

367 
	#U8G_DEV_MSG_PAGE_NEXT
 21

	)

374 
	#U8G_DEV_MSG_GET_PAGE_BOX
 23

	)

382 
	#U8G_DEV_MSG_SET_PIXEL
 50

	)

383 
	#U8G_DEV_MSG_SET_8PIXEL
 59

	)

385 
	#U8G_DEV_MSG_SET_COLOR_INDEX
 60

	)

387 
	#U8G_DEV_MSG_SET_XY_CB
 61

	)

389 
	#U8G_DEV_MSG_GET_WIDTH
 70

	)

390 
	#U8G_DEV_MSG_GET_HEIGHT
 71

	)

391 
	#U8G_DEV_MSG_GET_MODE
 72

	)

395 
	#U8G_MODE
(
is_cﬁ‹
, 
bôs_≥r_pixñ
Ë(((is_cﬁ‹)<<4)|(bôs_≥r_pixñ))

	)

397 
	#U8G_MODE_UNKNOWN
 0

	)

398 
	#U8G_MODE_BW
 
	`U8G_MODE
(0, 1)

	)

399 
	#U8G_MODE_GRAY2BIT
 
	`U8G_MODE
(0, 2)

	)

400 
	#U8G_MODE_R3G3B2
 
	`U8G_MODE
(1, 8)

	)

402 
	#U8G_MODE_GET_BITS_PER_PIXEL
(
mode
Ë((mode)&15)

	)

403 
	#U8G_MODE_IS_COLOR
(
mode
Ë(((mode)&16)==0?0:1)

	)

414 
	#U8G_COM_MSG_STOP
 0

	)

415 
	#U8G_COM_MSG_INIT
 1

	)

417 
	#U8G_COM_MSG_ADDRESS
 2

	)

420 
	#U8G_COM_MSG_CHIP_SELECT
 3

	)

422 
	#U8G_COM_MSG_RESET
 4

	)

424 
	#U8G_COM_MSG_WRITE_BYTE
 5

	)

425 
	#U8G_COM_MSG_WRITE_SEQ
 6

	)

426 
	#U8G_COM_MSG_WRITE_SEQ_P
 7

	)

430 
uöt8_t
 
u8g_com_nuŒ_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

431 
uöt8_t
 
u8g_com_¨duöo_°d_sw_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

432 
uöt8_t
 
u8g_com_¨duöo_sw_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

433 
uöt8_t
 
u8g_com_¨duöo_hw_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

434 
uöt8_t
 
u8g_com_¨duöo_°7920_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

435 
uöt8_t
 
u8g_com_¨duöo_°7920_hw_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

436 
uöt8_t
 
u8g_com_¨duöo_∑øŒñ_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

437 
uöt8_t
 
u8g_com_¨duöo_Á°_∑øŒñ_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

438 
uöt8_t
 
u8g_com_¨duöo_p‹t_d_wr_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

439 
uöt8_t
 
u8g_com_¨duöo_no_í_∑øŒñ_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

440 
uöt8_t
 
u8g_com_¨duöo_ssd_i2c_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

441 
uöt8_t
 
u8g_com_¨duöo_t6963_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

444 
uöt8_t
 
u8g_com_©mega_hw_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

445 
uöt8_t
 
u8g_com_©mega_sw_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

446 
uöt8_t
 
u8g_com_©mega_°7920_sw_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

447 
uöt8_t
 
u8g_com_©mega_°7920_hw_•i_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

448 
uöt8_t
 
u8g_com_©mega_∑øŒñ_‚
(
u8g_t
 *
u8g
, uöt8_à
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
);

465 #i‡
deföed
(
ARDUINO
)

466 #i‡
deföed
(
__AVR__
)

467 
	#U8G_COM_HW_SPI
 
u8g_com_¨duöo_hw_•i_‚


	)

468 
	#U8G_COM_ST7920_HW_SPI
 
u8g_com_¨duöo_°7920_hw_•i_‚


	)

469 #ñi‡
deföed
(
__18CXX
Ë|| deföed(
__PIC32MX
)

470 
	#U8G_COM_HW_SPI
 
u8g_com_nuŒ_‚


	)

471 
	#U8G_COM_ST7920_HW_SPI
 
u8g_com_nuŒ_‚


	)

475 #i‚de‡
U8G_COM_HW_SPI


476 #i‡
deföed
(
__AVR__
)

477 
	#U8G_COM_HW_SPI
 
u8g_com_©mega_hw_•i_‚


	)

478 
	#U8G_COM_ST7920_HW_SPI
 
u8g_com_©mega_°7920_hw_•i_‚


	)

481 #i‚de‡
U8G_COM_HW_SPI


482 
	#U8G_COM_HW_SPI
 
u8g_com_nuŒ_‚


	)

483 
	#U8G_COM_ST7920_HW_SPI
 
u8g_com_nuŒ_‚


	)

487 #i‡
deföed
(
ARDUINO
)

488 #i‡
deföed
(
__AVR__
)

489 
	#U8G_COM_SW_SPI
 
u8g_com_¨duöo_sw_•i_‚


	)

490 
	#U8G_COM_ST7920_SW_SPI
 
u8g_com_¨duöo_°7920_•i_‚


	)

491 #ñi‡
deföed
(
__18CXX
Ë|| deföed(
__PIC32MX
)

492 
	#U8G_COM_SW_SPI
 
u8g_com_¨duöo_sw_•i_‚


	)

493 
	#U8G_COM_ST7920_SW_SPI
 
u8g_com_¨duöo_°7920_•i_‚


	)

494 #ñi‡
deföed
(
__¨m__
)

495 
	#U8G_COM_SW_SPI
 
u8g_com_¨duöo_°d_sw_•i_‚


	)

496 
	#U8G_COM_ST7920_SW_SPI
 
u8g_com_¨duöo_°7920_•i_‚


	)

500 #i‚de‡
U8G_COM_SW_SPI


502 #i‡
deföed
(
__AVR__
)

503 
	#U8G_COM_SW_SPI
 
u8g_com_©mega_sw_•i_‚


	)

504 
	#U8G_COM_ST7920_SW_SPI
 
u8g_com_©mega_°7920_sw_•i_‚


	)

507 #i‚de‡
U8G_COM_SW_SPI


508 
	#U8G_COM_SW_SPI
 
u8g_com_nuŒ_‚


	)

509 
	#U8G_COM_ST7920_SW_SPI
 
u8g_com_nuŒ_‚


	)

513 #i‡
deföed
(
ARDUINO
)

514 #i‡
deföed
(
__AVR__
)

515 
	#U8G_COM_PARALLEL
 
u8g_com_¨duöo_∑øŒñ_‚


	)

516 
	#U8G_COM_FAST_PARALLEL
 
u8g_com_¨duöo_Á°_∑øŒñ_‚


	)

517 
	#U8G_COM_T6963
 
u8g_com_¨duöo_t6963_‚


	)

519 
	#U8G_COM_PARALLEL
 
u8g_com_¨duöo_∑øŒñ_‚


	)

520 
	#U8G_COM_FAST_PARALLEL
 
u8g_com_¨duöo_∑øŒñ_‚


	)

521 
	#U8G_COM_T6963
 
u8g_com_nuŒ_‚


	)

524 #i‚de‡
U8G_COM_PARALLEL


525 #i‡
deföed
(
__AVR__
)

526 
	#U8G_COM_PARALLEL
 
u8g_com_©mega_∑øŒñ_‚


	)

527 
	#U8G_COM_FAST_PARALLEL
 
u8g_com_©mega_∑øŒñ_‚


	)

528 
	#U8G_COM_T6963
 
u8g_com_nuŒ_‚


	)

531 #i‚de‡
U8G_COM_PARALLEL


532 
	#U8G_COM_PARALLEL
 
u8g_com_nuŒ_‚


	)

533 
	#U8G_COM_FAST_PARALLEL
 
u8g_com_nuŒ_‚


	)

534 
	#U8G_COM_T6963
 
u8g_com_nuŒ_‚


	)

537 #i‡
deföed
(
ARDUINO
)

538 #i‡
deföed
(
__AVR__
)

539 
	#U8G_COM_SSD_I2C
 
u8g_com_¨duöo_ssd_i2c_‚


	)

543 #i‚de‡
U8G_COM_SSD_I2C


544 #i‡
deföed
(
__AVR__
)

546 
	#U8G_COM_SSD_I2C
 
u8g_com_¨duöo_ssd_i2c_‚


	)

549 #i‚de‡
U8G_COM_SSD_I2C


550 
	#U8G_COM_SSD_I2C
 
u8g_com_nuŒ_‚


	)

557 
uöt8_t
 
u8g_InôCom
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

558 
u8g_St›Com
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

559 
u8g_E«bÀCom
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

560 
u8g_DißbÀCom
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

561 
u8g_SëChùSñe˘
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
cs
);

562 
u8g_SëRe£tLow
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

563 
u8g_SëRe£tHigh
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

564 
u8g_SëAddªss
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
addªss
);

565 
uöt8_t
 
u8g_WrôeByã
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
vÆ
);

566 
uöt8_t
 
u8g_WrôeSequí˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
˙t
, uöt8_à*
£q
);

567 
uöt8_t
 
u8g_WrôeSequí˚P
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
˙t
, c⁄° uöt8_à*
£q
);

571 
	#U8G_ESC_DLY
(
x
Ë255, ((xË& 0x7f)

	)

572 
	#U8G_ESC_CS
(
x
Ë255, (0xd0 | ((x)&0x0f))

	)

573 
	#U8G_ESC_ADR
(
x
Ë255, (0xe0 | ((x)&0x0f))

	)

574 
	#U8G_ESC_RST
(
x
Ë255, (0xc0 | ((x)&0x0f))

	)

575 
	#U8G_ESC_VCC
(
x
Ë255, (0xbê| ((x)&0x01))

	)

576 
	#U8G_ESC_END
 255, 254

	)

577 
	#U8G_ESC_255
 255, 255

	)

579 
uöt8_t
 
u8g_WrôeEscSeqP
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, c⁄° uöt8_à*
esc_£q
);

583 
uöt8_t
 
u8g_WrôeByãBWTo16GrDevi˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
b
);

584 
uöt8_t
 
u8g_WrôeSequí˚BWTo16GrDevi˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
˙t
, uöt8_à*
±r
);

585 
uöt8_t
 
u8g_WrôeByã4LTo16GrDevi˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
b
);

586 
uöt8_t
 
u8g_WrôeSequí˚4LTo16GrDevi˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
˙t
, uöt8_à*
±r
);

591 
u8g_com_¨duöo_digôÆ_wrôe
(
u8g_t
 *
u8g
, 
uöt8_t
 
pö_ödex
, uöt8_à
vÆue
);

592 
u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g_t
 *
u8g
);

598 
uöt8_t
 
u8g_Pö
(uöt8_à
p‹t
, uöt8_à
bôpos
);

599 
	#PN
(
p‹t
,
bôpos
Ë
	`u8g_Pö
’‹t,bôpos)

	)

602 
u8g_SëPöOuçut
(
uöt8_t
 
öã∫Æ_pö_numbî
);

603 
u8g_SëPöLevñ
(
uöt8_t
 
öã∫Æ_pö_numbî
, uöt8_à
Àvñ
);

604 
u8g_SëPöI≈ut
(
uöt8_t
 
öã∫Æ_pö_numbî
);

605 
uöt8_t
 
u8g_GëPöLevñ
(uöt8_à
öã∫Æ_pö_numbî
);

608 
u8g_SëPIOuçut
(
u8g_t
 *
u8g
, 
uöt8_t
 
pi
);

609 
u8g_SëPILevñ
(
u8g_t
 *
u8g
, 
uöt8_t
 
pi
, uöt8_à
Àvñ
);

614 
	s_u8g_∑ge_t


616 
u8g_uöt_t
 
	g∑ge_height
;

617 
u8g_uöt_t
 
	gtŸÆ_height
;

618 
u8g_uöt_t
 
	g∑ge_y0
;

619 
u8g_uöt_t
 
	g∑ge_y1
;

620 
uöt8_t
 
	g∑ge
;

622 
_u8g_∑ge_t
 
	tu8g_∑ge_t
;

624 
u8g_∑ge_Fú°
(
u8g_∑ge_t
 *
p
Ë
	gU8G_NOINLINE
;

625 
u8g_∑ge_Inô
(
u8g_∑ge_t
 *
p
, 
u8g_uöt_t
 
∑ge_height
, u8g_uöt_à
tŸÆ_height
 ) 
	gU8G_NOINLINE
;

626 
uöt8_t
 
u8g_∑ge_Next
(
u8g_∑ge_t
 *
p
Ë
	gU8G_NOINLINE
;

631 
	s_u8g_pb_t


633 
u8g_∑ge_t
 
	gp
;

634 
u8g_uöt_t
 
	gwidth
;

635 *
	gbuf
;

637 
_u8g_pb_t
 
	tu8g_pb_t
;

641 
u8g_pb_CÀ¨
(
u8g_pb_t
 *
b
);

642 
uöt8_t
 
u8g_pb_IsYI¡î£˘i⁄
(
u8g_pb_t
 *
pb
, 
u8g_uöt_t
 
v0
, u8g_uöt_à
v1
);

643 
uöt8_t
 
u8g_pb_IsXI¡î£˘i⁄
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
v0
, u8g_uöt_à
v1
);

644 
uöt8_t
 
u8g_pb_IsI¡î£˘i⁄
(
u8g_pb_t
 *
pb
, 
u8g_dev_¨g_bbx_t
 *
bbx
);

645 
u8g_pb_GëPageBox
(
u8g_pb_t
 *
pb
, 
u8g_box_t
 *
box
);

646 
uöt8_t
 
u8g_pb_Is8PixñVisibÀ
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
);

647 
uöt8_t
 
u8g_pb_WrôeBuf„r
(
u8g_pb_t
 *
b
, 
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

662 
	#U8G_PB_DEV
(
«me
, 
width
, 
height
, 
∑ge_height
, 
dev_‚
, 
com_‚
) \

663 
uöt8_t
 
«me
##
_buf
[
width
] 
U8G_NOCOMMON
 ; \

664 
u8g_pb_t
 
«me
##
_pb
 = { {
∑ge_height
, 
height
, 0, 0, 0}, 
width
,Çame##
_buf
}; \

665 
u8g_dev_t
 
«me
 = { 
dev_‚
, &«me##
_pb
, 
com_‚
 }

	)

668 
u8g_pb8v1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
Ë
	gU8G_NOINLINE
;

669 
u8g_pb8v1_CÀ¨
(
u8g_pb_t
 *
b
Ë
	gU8G_NOINLINE
;

671 
uöt8_t
 
u8g_pb8v1_IsYI¡î£˘i⁄
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
v0
, u8g_uöt_à
v1
);

672 
uöt8_t
 
u8g_pb8v1_IsXI¡î£˘i⁄
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
v0
, u8g_uöt_à
v1
);

673 
uöt8_t
 
u8g_pb8v1_WrôeBuf„r
(
u8g_pb_t
 *
b
, 
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

675 
uöt8_t
 
u8g_dev_pb8v1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

678 
uöt8_t
 
u8g_dev_pb16v1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

681 
uöt8_t
 
u8g_dev_pb14v1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

684 
uöt8_t
 
u8g_dev_pb8v2_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

687 
uöt8_t
 
u8g_dev_pb16v2_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

691 
uöt8_t
 
u8g_dev_pb8h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

694 
uöt8_t
 
u8g_dev_pb16h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

697 
uöt8_t
 
u8g_dev_pb32h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

701 
uöt8_t
 
u8g_dev_pb8h2_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

704 
uöt8_t
 
u8g_dev_pb16h2_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

709 
uöt8_t
 
u8g_dev_pb8h1f_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

712 
uöt8_t
 
u8g_dev_pb8h8_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

720 (*
	gu8g_døw_curs‹_‚
)(
	tu8g_t
 *
	tu8g
);

723 
u8g_uöt_t
 (*
	tu8g_f⁄t_ˇlc_vªf_‚±r
)(
	tu8g_t
 *
	tu8g
);

726 (*
	gu8g_°©e_cb
)(
	tuöt8_t
 
	tmsg
);

732 
	#U8G_PI_RESET
 0

	)

735 
	#U8G_PI_A0
 1

	)

736 
	#U8G_PI_DI
 1

	)

739 
	#U8G_PI_CS
 2

	)

740 
	#U8G_PI_CS1
 2

	)

741 
	#U8G_PI_CS2
 3

	)

743 
	#U8G_PI_A0_STATE
 3

	)

746 
	#U8G_PI_EN
 4

	)

747 
	#U8G_PI_CS_STATE
 4

	)

748 
	#U8G_PI_SCK
 4

	)

749 
	#U8G_PI_SCL
 4

	)

750 
	#U8G_PI_RD
 4

	)

754 
	#U8G_PI_D0
 5

	)

755 
	#U8G_PI_MOSI
 5

	)

756 
	#U8G_PI_SDA
 5

	)

757 
	#U8G_PI_D1
 6

	)

758 
	#U8G_PI_MISO
 6

	)

759 
	#U8G_PI_D2
 7

	)

760 
	#U8G_PI_D3
 8

	)

761 
	#U8G_PI_SET_A0
 8

	)

762 
	#U8G_PI_D4
 9

	)

763 
	#U8G_PI_D5
 10

	)

764 
	#U8G_PI_I2C_OPTION
 11

	)

765 
	#U8G_PI_D6
 11

	)

766 
	#U8G_PI_D7
 12

	)

769 
	#U8G_PI_WR
 13

	)

770 
	#U8G_PI_RW
 13

	)

772 
	#U8G_PIN_LIST_LEN
 14

	)

775 
	#U8G_PIN_NONE
 255

	)

777 
	#U8G_FONT_HEIGHT_MODE_TEXT
 0

	)

778 
	#U8G_FONT_HEIGHT_MODE_XTEXT
 1

	)

779 
	#U8G_FONT_HEIGHT_MODE_ALL
 2

	)

781 
	s_u8g_t


783 
u8g_uöt_t
 
	gwidth
;

784 
u8g_uöt_t
 
	gheight
;

787 
u8g_dev_t
 *
	gdev
;

788 c⁄° 
u8g_pgm_uöt8_t
 *
	gf⁄t
;

789 c⁄° 
u8g_pgm_uöt8_t
 *
	gcurs‹_f⁄t
;

790 
uöt8_t
 
	gcurs‹_fg_cﬁ‹
, 
	gcurs‹_bg_cﬁ‹
;

791 
uöt8_t
 
	gcurs‹_ícodög
;

792 
uöt8_t
 
	gmode
;

793 
u8g_uöt_t
 
	gcurs‹_x
;

794 
u8g_uöt_t
 
	gcurs‹_y
;

795 
u8g_døw_curs‹_‚
 
	gcurs‹_‚
;

797 
öt8_t
 
	gglyph_dx
;

798 
öt8_t
 
	gglyph_x
;

799 
öt8_t
 
	gglyph_y
;

800 
uöt8_t
 
	gglyph_width
;

801 
uöt8_t
 
	gglyph_height
;

803 
u8g_f⁄t_ˇlc_vªf_‚±r
 
	gf⁄t_ˇlc_vªf
;

804 
uöt8_t
 
	gf⁄t_height_mode
;

805 
öt8_t
 
	gf⁄t_ªf_as˚¡
;

806 
öt8_t
 
	gf⁄t_ªf_des˚¡
;

807 
uöt8_t
 
	gf⁄t_löe_•acög_Á˘‹
;

808 
uöt8_t
 
	glöe_•acög
;

810 
u8g_dev_¨g_pixñ_t
 
	g¨g_pixñ
;

813 
uöt8_t
 
	gpö_li°
[
U8G_PIN_LIST_LEN
];

815 
u8g_°©e_cb
 
	g°©e_cb
;

817 
u8g_box_t
 
	gcuºít_∑ge
;

821 
	#u8g_GëF⁄tAs˚¡
(
u8g
Ë((u8g)->
f⁄t_ªf_as˚¡
)

	)

822 
	#u8g_GëF⁄tDes˚¡
(
u8g
Ë((u8g)->
f⁄t_ªf_des˚¡
)

	)

823 
	#u8g_GëF⁄tLöeS∑cög
(
u8g
Ë((u8g)->
löe_•acög
)

	)

825 
uöt8_t
 
u8g_ˇŒ_dev_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

827 
uöt8_t
 
u8g_InôLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

828 
u8g_Fú°PageLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

829 
uöt8_t
 
u8g_NextPageLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

830 
uöt8_t
 
u8g_SëC⁄åa°LL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
c⁄åa°
);

831 
u8g_DøwPixñLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
);

832 
u8g_Døw8PixñLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
pixñ
);

833 
uöt8_t
 
u8g_IsBBXI¡î£˘i⁄LL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
);

834 
u8g_uöt_t
 
u8g_GëWidthLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

835 
u8g_uöt_t
 
u8g_GëHeightLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

837 
u8g_Upd©eDimísi⁄
(
u8g_t
 *
u8g
);

838 
uöt8_t
 
u8g_Begö
(
u8g_t
 *
u8g
);

839 
uöt8_t
 
u8g_Inô
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
);

840 
uöt8_t
 
u8g_InôSPI
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
);

841 
uöt8_t
 
u8g_InôHWSPI
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
);

842 
uöt8_t
 
u8g_InôI2C
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
›ti⁄s
);

843 
uöt8_t
 
u8g_Inô8BôFixedP‹t
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
í
, uöt8_à
cs
, uöt8_à
di
, uöt8_à
rw
, uöt8_à
ª£t
);

844 
uöt8_t
 
u8g_Inô8Bô
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

845 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
, uöt8_à
ª£t
);

846 
uöt8_t
 
u8g_InôRW8Bô
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

847 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
wr
, uöt8_à
rd
, uöt8_à
ª£t
);

848 
u8g_Fú°Page
(
u8g_t
 *
u8g
);

849 
uöt8_t
 
u8g_NextPage
(
u8g_t
 *
u8g
);

850 
uöt8_t
 
u8g_SëC⁄åa°
(
u8g_t
 *
u8g
, uöt8_à
c⁄åa°
);

851 
u8g_SÀïOn
(
u8g_t
 *
u8g
);

852 
u8g_SÀïOff
(
u8g_t
 *
u8g
);

853 
u8g_DøwPixñ
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
);

854 
u8g_Døw8Pixñ
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
pixñ
);

856 
uöt8_t
 
u8g_St›
(
u8g_t
 *
u8g
);

857 
u8g_SëCﬁ‹Index
(
u8g_t
 *
u8g
, 
uöt8_t
 
idx
);

858 
uöt8_t
 
u8g_GëCﬁ‹Index
(
u8g_t
 *
u8g
);

860 
uöt8_t
 
u8g_GëDeÁu…F‹egroundCﬁ‹
(
u8g_t
 *
u8g
);

861 
u8g_SëDeÁu…F‹egroundCﬁ‹
(
u8g_t
 *
u8g
);

863 
uöt8_t
 
u8g_GëDeÁu…BackgroundCﬁ‹
(
u8g_t
 *
u8g
);

864 
u8g_SëDeÁu…BackgroundCﬁ‹
(
u8g_t
 *
u8g
);

866 
uöt8_t
 
u8g_GëDeÁu…MidCﬁ‹
(
u8g_t
 *
u8g
);

867 
u8g_SëDeÁu…MidCﬁ‹
(
u8g_t
 *
u8g
);

869 
	#u8g_GëWidth
(
u8g
Ë((u8g)->
width
)

	)

870 
	#u8g_GëHeight
(
u8g
Ë((u8g)->
height
)

	)

871 
	#u8g_GëMode
(
u8g
Ë((u8g)->
mode
)

	)

878 
	#U8G_STATE_ENV_IDX
 0

	)

879 
	#U8G_STATE_U8G_IDX
 1

	)

880 
	#U8G_STATE_RESTORE
 0

	)

881 
	#U8G_STATE_BACKUP
 1

	)

882 
	#U8G_STATE_MSG_COMPOSE
(
cmd
,
idx
Ë(((cmd)<<1Ë| (idx))

	)

884 
	#U8G_STATE_MSG_RESTORE_ENV
 
	`U8G_STATE_MSG_COMPOSE
(
U8G_STATE_RESTORE
,
U8G_STATE_ENV_IDX
)

	)

885 
	#U8G_STATE_MSG_BACKUP_ENV
 
	`U8G_STATE_MSG_COMPOSE
(
U8G_STATE_BACKUP
,
U8G_STATE_ENV_IDX
)

	)

886 
	#U8G_STATE_MSG_RESTORE_U8G
 
	`U8G_STATE_MSG_COMPOSE
(
U8G_STATE_RESTORE
,
U8G_STATE_U8G_IDX
)

	)

887 
	#U8G_STATE_MSG_BACKUP_U8G
 
	`U8G_STATE_MSG_COMPOSE
(
U8G_STATE_BACKUP
,
U8G_STATE_U8G_IDX
)

	)

889 
	#U8G_STATE_MSG_GET_IDX
(
msg
Ë((msg)&1)

	)

890 
	#U8G_STATE_MSG_IS_BACKUP
(
msg
Ë((msg)&2)

	)

894 
u8g_°©e_dummy_cb
(
uöt8_t
 
msg
);

895 
u8g_backup_avr_•i
(
uöt8_t
 
msg
);

897 
u8g_SëH¨dw¨eBackup
(
u8g_t
 *
u8g
, 
u8g_°©e_cb
 
backup_cb
);

901 
uöt8_t
 
u8g_IsBBXI¡î£˘i⁄
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
);

906 
u8g_UndoRŸ©i⁄
(
u8g_t
 *
u8g
);

907 
u8g_SëRŸ90
(
u8g_t
 *
u8g
);

908 
u8g_SëRŸ180
(
u8g_t
 *
u8g
);

909 
u8g_SëRŸ270
(
u8g_t
 *
u8g
);

913 
u8g_UndoSˇÀ
(
u8g_t
 *
u8g
);

914 
u8g_SëSˇÀ2x2
(
u8g_t
 *
u8g
);

919 
size_t
 
u8g_f⁄t_GëSize
(c⁄° *
f⁄t
);

920 
uöt8_t
 
u8g_f⁄t_GëF⁄tSèπEncodög
(c⁄° *
f⁄t
Ë
	gU8G_NOINLINE
;

921 
uöt8_t
 
u8g_f⁄t_GëF⁄tEndEncodög
(c⁄° *
f⁄t
Ë
	gU8G_NOINLINE
;

923 
u8g_SëF⁄t
(
u8g_t
 *
u8g
, c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
);

925 
uöt8_t
 
u8g_GëF⁄tBBXWidth
(
u8g_t
 *
u8g
);

926 
uöt8_t
 
u8g_GëF⁄tBBXHeight
(
u8g_t
 *
u8g
);

927 
öt8_t
 
u8g_GëF⁄tBBXOffX
(
u8g_t
 *
u8g
);

928 
öt8_t
 
u8g_GëF⁄tBBXOffY
(
u8g_t
 *
u8g
);

929 
uöt8_t
 
u8g_GëF⁄tC≠ôÆAHeight
(
u8g_t
 *
u8g
);

931 
uöt8_t
 
u8g_IsGlyph
(
u8g_t
 *
u8g
, uöt8_à
ªque°ed_ícodög
);

932 
öt8_t
 
u8g_GëGlyphDñèX
(
u8g_t
 *
u8g
, 
uöt8_t
 
ªque°ed_ícodög
);

934 
öt8_t
 
u8g_døw_glyph
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
);

936 
öt8_t
 
u8g_DøwGlyphDú
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
ícodög
);

937 
öt8_t
 
u8g_DøwGlyph
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
);

938 
öt8_t
 
u8g_DøwGlyph90
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
);

939 
öt8_t
 
u8g_DøwGlyph180
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
);

940 
öt8_t
 
u8g_DøwGlyph270
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
);

941 
öt8_t
 
u8g_DøwGlyphF⁄tBBX
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
ícodög
);

943 
u8g_uöt_t
 
u8g_DøwSå
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, c⁄° *
s
);

944 
u8g_uöt_t
 
u8g_DøwSå90
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, c⁄° *
s
);

945 
u8g_uöt_t
 
u8g_DøwSå180
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, c⁄° *
s
);

946 
u8g_uöt_t
 
u8g_DøwSå270
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, c⁄° *
s
);

948 
u8g_uöt_t
 
u8g_DøwSåDú
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, c⁄° *
s
);

951 
u8g_uöt_t
 
u8g_DøwSåP
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
);

952 
u8g_uöt_t
 
u8g_DøwSå90P
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
);

953 
u8g_uöt_t
 
u8g_DøwSå180P
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
);

954 
u8g_uöt_t
 
u8g_DøwSå270P
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
);

957 
u8g_SëF⁄tRefHeightText
(
u8g_t
 *
u8g
);

958 
u8g_SëF⁄tRefHeightExãndedText
(
u8g_t
 *
u8g
);

959 
u8g_SëF⁄tRefHeightAŒ
(
u8g_t
 *
u8g
);

960 
u8g_SëF⁄tLöeS∑cögFa˘‹
(
u8g_t
 *
u8g
, 
uöt8_t
 
Á˘‹
);

962 
u8g_uöt_t
 
u8g_f⁄t_ˇlc_vªf_f⁄t
(
u8g_t
 *
u8g
);

963 
u8g_uöt_t
 
u8g_f⁄t_ˇlc_vªf_bŸtom
(
u8g_t
 *
u8g
);

964 
u8g_uöt_t
 
u8g_f⁄t_ˇlc_vªf_t›
(
u8g_t
 *
u8g
);

965 
u8g_uöt_t
 
u8g_f⁄t_ˇlc_vªf_˚¡î
(
u8g_t
 *
u8g
);

967 
u8g_SëF⁄tPosBa£löe
(
u8g_t
 *
u8g
);

968 
u8g_SëF⁄tPosBŸtom
(
u8g_t
 *
u8g
);

969 
u8g_SëF⁄tPosCíãr
(
u8g_t
 *
u8g
);

970 
u8g_SëF⁄tPosT›
(
u8g_t
 *
u8g
);

973 
u8g_uöt_t
 
u8g_GëSåPixñWidth
(
u8g_t
 *
u8g
, c⁄° *
s
);

974 
u8g_uöt_t
 
u8g_GëSåPixñWidthP
(
u8g_t
 *
u8g
, c⁄° 
u8g_pgm_uöt8_t
 *
s
);

975 
öt8_t
 
u8g_GëSåX
(
u8g_t
 *
u8g
, c⁄° *
s
);

976 
öt8_t
 
u8g_GëSåXP
(
u8g_t
 *
u8g
, c⁄° 
u8g_pgm_uöt8_t
 *
s
);

977 
u8g_uöt_t
 
u8g_GëSåWidth
(
u8g_t
 *
u8g
, c⁄° *
s
);

978 
u8g_uöt_t
 
u8g_GëSåWidthP
(
u8g_t
 *
u8g
, c⁄° 
u8g_pgm_uöt8_t
 *
s
);

980 
u8g_uöt_t
 
u8g_DøwSåF⁄tBBX
(
u8g_t
 *
u8g
, u8g_uöt_à
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, c⁄° *
s
);

982 
u8g_GëSåMöBox
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_uöt_t
 *
x
, u8g_uöt_à*
y
, u8g_uöt_à*
width
, u8g_uöt_à*
height
);

983 
u8g_GëSåAMöBox
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_uöt_t
 *
x
, u8g_uöt_à*
y
, u8g_uöt_à*
width
, u8g_uöt_à*
height
);

987 
u8g_døw_box
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
Ë
	gU8G_NOINLINE
;

989 
u8g_DøwHLöe
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
);

990 
u8g_DøwVLöe
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
);

991 
u8g_DøwFøme
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
);

992 
u8g_DøwBox
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
);

994 
u8g_DøwRFøme
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, u8g_uöt_à
r
);

995 
u8g_DøwRBox
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, u8g_uöt_à
r
);

999 
u8g_DøwHBôm≠
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, c⁄° 
uöt8_t
 *
bôm≠
);

1000 
u8g_DøwHBôm≠P
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
);

1001 
u8g_DøwBôm≠
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, u8g_uöt_à
h
, c⁄° 
uöt8_t
 *
bôm≠
);

1002 
u8g_DøwBôm≠P
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, u8g_uöt_à
h
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
);

1004 
u8g_DøwXBM
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, c⁄° 
uöt8_t
 *
bôm≠
);

1005 
u8g_DøwXBMP
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
);

1009 
u8g_DøwLöe
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x1
, u8g_uöt_à
y1
, u8g_uöt_à
x2
, u8g_uöt_à
y2
);

1025 
	#U8G_DRAW_UPPER_RIGHT
 0x01

	)

1026 
	#U8G_DRAW_UPPER_LEFT
 0x02

	)

1027 
	#U8G_DRAW_LOWER_LEFT
 0x04

	)

1028 
	#U8G_DRAW_LOWER_RIGHT
 0x08

	)

1029 
	#U8G_DRAW_ALL
 (
U8G_DRAW_UPPER_RIGHT
|
U8G_DRAW_UPPER_LEFT
|
U8G_DRAW_LOWER_RIGHT
|
U8G_DRAW_LOWER_LEFT
)

	)

1031 
u8g_døw_cú˛e
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
Ë
	gU8G_NOINLINE
;

1032 
u8g_døw_disc
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
Ë
	gU8G_NOINLINE
;

1034 
u8g_DøwCú˛e
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
);

1035 
u8g_DøwDisc
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
);

1038 
uöt8_t
 
u8g_is_box_bbx_öãr£˘i⁄
(
u8g_box_t
 *
box
, 
u8g_dev_¨g_bbx_t
 *
bbx
);

1042 
u8g_SëCurs‹F⁄t
(
u8g_t
 *
u8g
, c⁄° 
u8g_pgm_uöt8_t
 *
curs‹_f⁄t
);

1043 
u8g_SëCurs‹StyÀ
(
u8g_t
 *
u8g
, 
uöt8_t
 
ícodög
);

1044 
u8g_SëCurs‹Pos
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
curs‹_x
, u8g_uöt_à
curs‹_y
);

1045 
u8g_SëCurs‹Cﬁ‹
(
u8g_t
 *
u8g
, 
uöt8_t
 
fg
, uöt8_à
bg
);

1046 
u8g_E«bÀCurs‹
(
u8g_t
 *
u8g
);

1047 
u8g_DißbÀCurs‹
(
u8g_t
 *
u8g
);

1048 
u8g_DøwCurs‹
(
u8g_t
 *
u8g
);

1054 
u8g_SëVútuÆS¸ìnDimísi⁄
(
u8g_t
 *
vs_u8g
, 
u8g_uöt_t
 
width
, u8g_uöt_à
height
);

1055 
uöt8_t
 
u8g_AddToVútuÆS¸ìn
(
u8g_t
 *
vs_u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_à*
chûd_u8g
);

1058 
°_Døw
(
uöt8_t
 
Âs
);

1059 
°_Sãp
(
uöt8_t
 
∂ayî_pos
, uöt8_à
is_auto_fúe
, uöt8_à
is_fúe
);

1065 
	#U8G_I2C_OPT_NONE
 0

	)

1068 
	#U8G_I2C_ERR_NONE
 0x00

	)

1070 
	#U8G_I2C_ERR_TIMEOUT
 0x01

	)

1071 
	#U8G_I2C_ERR_BUS
 0x02

	)

1073 
u8g_i2c_˛ór_îr‹
(Ë
	gU8G_NOINLINE
;

1074 
uöt8_t
 
u8g_i2c_gë_îr‹
(Ë
	gU8G_NOINLINE
;

1075 
uöt8_t
 
u8g_i2c_gë_îr_pos
(Ë
	gU8G_NOINLINE
;

1076 
u8g_i2c_öô
(
uöt8_t
 
›ti⁄s
Ë
	gU8G_NOINLINE
;

1077 
uöt8_t
 
u8g_i2c_waô
(uöt8_à
mask
, uöt8_à
pos
Ë
	gU8G_NOINLINE
;

1078 
uöt8_t
 
u8g_i2c_°¨t
(uöt8_à
¶a
Ë
	gU8G_NOINLINE
;

1079 
uöt8_t
 
u8g_i2c_£nd_byã
(uöt8_à
d©a
Ë
	gU8G_NOINLINE
;

1080 
u8g_i2c_°›
(Ë
	gU8G_NOINLINE
;

1086 c⁄° *
u8g_u8tﬂ
(
uöt8_t
 
v
, uöt8_à
d
);

1090 c⁄° *
u8g_u16tﬂ
(
uöt16_t
 
v
, 
uöt8_t
 
d
);

1096 
u8g_Dñay
(
uöt16_t
 
vÆ
);

1099 
u8g_Mi¸oDñay
();

1102 
u8g_10Mi¸oDñay
();

1106 
	#CHESS_KEY_NONE
 0

	)

1107 
	#CHESS_KEY_NEXT
 1

	)

1108 
	#CHESS_KEY_PREV
 2

	)

1109 
	#CHESS_KEY_SELECT
 3

	)

1110 
	#CHESS_KEY_BACK
 4

	)

1112 
chess_Inô
(
u8g_t
 *
u8g
, 
uöt8_t
 
em±y_body_cﬁ‹
);

1113 
chess_Døw
();

1114 
chess_Sãp
(
uöt8_t
 
keycode
);

1119 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_m2ic⁄_5
[] 
U8G_SECTION
(".progmem.u8g_font_m2icon_5");

1120 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_m2ic⁄_7
[] 
U8G_SECTION
(".progmem.u8g_font_m2icon_7");

1121 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_m2ic⁄_9
[] 
U8G_SECTION
(".progmem.u8g_font_m2icon_9");

1123 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_u8glib_4
[] 
U8G_SECTION
(".progmem.u8g_font_u8glib_4");

1124 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_u8glib_4r
[] 
U8G_SECTION
(".progmem.u8g_font_u8glib_4r");

1127 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x12_75r
[] 
U8G_SECTION
(".progmem.u8g_font_6x12_75r");

1128 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13_75r
[] 
U8G_SECTION
(".progmem.u8g_font_6x13_75r");

1129 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13_75r
[] 
U8G_SECTION
(".progmem.u8g_font_7x13_75r");

1130 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_8x13_75r
[] 
U8G_SECTION
(".progmem.u8g_font_8x13_75r");

1131 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x15_75r
[] 
U8G_SECTION
(".progmem.u8g_font_9x15_75r");

1132 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x18_75r
[] 
U8G_SECTION
(".progmem.u8g_font_9x18_75r");

1133 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_cu12_75r
[] 
U8G_SECTION
(".progmem.u8g_font_cu12_75r");

1134 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_75r
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_75r");

1135 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_10x20_75r
[] 
U8G_SECTION
(".progmem.u8g_font_10x20_75r");

1137 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_10x20_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_10x20_67_75");

1138 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_10x20_78_79
[] 
U8G_SECTION
(".progmem.u8g_font_10x20_78_79");

1139 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_10x20
[] 
U8G_SECTION
(".progmem.u8g_font_10x20");

1140 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_10x20r
[] 
U8G_SECTION
(".progmem.u8g_font_10x20r");

1141 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_4x6
[] 
U8G_SECTION
(".progmem.u8g_font_4x6");

1142 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_4x6r
[] 
U8G_SECTION
(".progmem.u8g_font_4x6r");

1144 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_5x7
[] 
U8G_SECTION
(".progmem.u8g_font_5x7");

1145 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_5x7r
[] 
U8G_SECTION
(".progmem.u8g_font_5x7r");

1146 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_5x8
[] 
U8G_SECTION
(".progmem.u8g_font_5x8");

1147 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_5x8r
[] 
U8G_SECTION
(".progmem.u8g_font_5x8r");

1148 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x10
[] 
U8G_SECTION
(".progmem.u8g_font_6x10");

1149 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x10r
[] 
U8G_SECTION
(".progmem.u8g_font_6x10r");

1150 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x12_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_6x12_67_75");

1151 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x12_78_79
[] 
U8G_SECTION
(".progmem.u8g_font_6x12_78_79");

1152 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x12
[] 
U8G_SECTION
(".progmem.u8g_font_6x12");

1153 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x12r
[] 
U8G_SECTION
(".progmem.u8g_font_6x12r");

1154 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_6x13_67_75");

1155 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13_78_79
[] 
U8G_SECTION
(".progmem.u8g_font_6x13_78_79");

1156 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13B
[] 
U8G_SECTION
(".progmem.u8g_font_6x13B");

1157 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13Br
[] 
U8G_SECTION
(".progmem.u8g_font_6x13Br");

1158 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13
[] 
U8G_SECTION
(".progmem.u8g_font_6x13");

1159 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13r
[] 
U8G_SECTION
(".progmem.u8g_font_6x13r");

1160 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13O
[] 
U8G_SECTION
(".progmem.u8g_font_6x13O");

1161 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x13Or
[] 
U8G_SECTION
(".progmem.u8g_font_6x13Or");

1162 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_7x13_67_75");

1163 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13_78_79
[] 
U8G_SECTION
(".progmem.u8g_font_7x13_78_79");

1164 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13B
[] 
U8G_SECTION
(".progmem.u8g_font_7x13B");

1165 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13Br
[] 
U8G_SECTION
(".progmem.u8g_font_7x13Br");

1166 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13
[] 
U8G_SECTION
(".progmem.u8g_font_7x13");

1167 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13r
[] 
U8G_SECTION
(".progmem.u8g_font_7x13r");

1168 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13O
[] 
U8G_SECTION
(".progmem.u8g_font_7x13O");

1169 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x13Or
[] 
U8G_SECTION
(".progmem.u8g_font_7x13Or");

1170 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x14B
[] 
U8G_SECTION
(".progmem.u8g_font_7x14B");

1171 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x14Br
[] 
U8G_SECTION
(".progmem.u8g_font_7x14Br");

1172 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x14
[] 
U8G_SECTION
(".progmem.u8g_font_7x14");

1173 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_7x14r
[] 
U8G_SECTION
(".progmem.u8g_font_7x14r");

1174 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_8x13_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_8x13_67_75");

1175 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_8x13B
[] 
U8G_SECTION
(".progmem.u8g_font_8x13B");

1176 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_8x13Br
[] 
U8G_SECTION
(".progmem.u8g_font_8x13Br");

1177 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_8x13
[] 
U8G_SECTION
(".progmem.u8g_font_8x13");

1178 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_8x13r
[] 
U8G_SECTION
(".progmem.u8g_font_8x13r");

1179 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_8x13O
[] 
U8G_SECTION
(".progmem.u8g_font_8x13O");

1180 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_8x13Or
[] 
U8G_SECTION
(".progmem.u8g_font_8x13Or");

1182 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x15_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_9x15_67_75");

1183 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x15_78_79
[] 
U8G_SECTION
(".progmem.u8g_font_9x15_78_79");

1184 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x15B
[] 
U8G_SECTION
(".progmem.u8g_font_9x15B");

1185 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x15Br
[] 
U8G_SECTION
(".progmem.u8g_font_9x15Br");

1186 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x15
[] 
U8G_SECTION
(".progmem.u8g_font_9x15");

1187 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x15r
[] 
U8G_SECTION
(".progmem.u8g_font_9x15r");

1189 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x18_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_9x18_67_75");

1190 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x18_78_79
[] 
U8G_SECTION
(".progmem.u8g_font_9x18_78_79");

1191 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x18B
[] 
U8G_SECTION
(".progmem.u8g_font_9x18B");

1192 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x18
[] 
U8G_SECTION
(".progmem.u8g_font_9x18");

1193 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x18Br
[] 
U8G_SECTION
(".progmem.u8g_font_9x18Br");

1194 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_9x18r
[] 
U8G_SECTION
(".progmem.u8g_font_9x18r");

1196 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_curs‹
[] 
U8G_SECTION
(".progmem.u8g_font_cursor");

1197 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_curs‹r
[] 
U8G_SECTION
(".progmem.u8g_font_cursorr");

1198 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_mi¸o
[] 
U8G_SECTION
(".progmem.u8g_font_micro");

1200 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_cu12_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_cu12_67_75");

1201 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_cu12_78_79
[] 
U8G_SECTION
(".progmem.u8g_font_cu12_78_79");

1202 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_cu12
[] 
U8G_SECTION
(".progmem.u8g_font_cu12");

1211 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub11
[] 
U8G_SECTION
(".progmem.u8g_font_fub11");

1212 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub11r
[] 
U8G_SECTION
(".progmem.u8g_font_fub11r");

1213 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub11n
[] 
U8G_SECTION
(".progmem.u8g_font_fub11n");

1214 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub14
[] 
U8G_SECTION
(".progmem.u8g_font_fub14");

1215 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub14r
[] 
U8G_SECTION
(".progmem.u8g_font_fub14r");

1216 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub14n
[] 
U8G_SECTION
(".progmem.u8g_font_fub14n");

1217 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub17
[] 
U8G_SECTION
(".progmem.u8g_font_fub17");

1218 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub17r
[] 
U8G_SECTION
(".progmem.u8g_font_fub17r");

1219 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub17n
[] 
U8G_SECTION
(".progmem.u8g_font_fub17n");

1220 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub20
[] 
U8G_SECTION
(".progmem.u8g_font_fub20");

1221 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub20r
[] 
U8G_SECTION
(".progmem.u8g_font_fub20r");

1222 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub20n
[] 
U8G_SECTION
(".progmem.u8g_font_fub20n");

1223 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub25
[] 
U8G_SECTION
(".progmem.u8g_font_fub25");

1224 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub25r
[] 
U8G_SECTION
(".progmem.u8g_font_fub25r");

1225 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub25n
[] 
U8G_SECTION
(".progmem.u8g_font_fub25n");

1226 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub30
[] 
U8G_SECTION
(".progmem.u8g_font_fub30");

1227 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub30r
[] 
U8G_SECTION
(".progmem.u8g_font_fub30r");

1228 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub30n
[] 
U8G_SECTION
(".progmem.u8g_font_fub30n");

1229 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub35n
[] 
U8G_SECTION
(".progmem.u8g_font_fub35n");

1230 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub42n
[] 
U8G_SECTION
(".progmem.u8g_font_fub42n");

1231 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fub49n
[] 
U8G_SECTION
(".progmem.u8g_font_fub49n");

1240 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur11
[] 
U8G_SECTION
(".progmem.u8g_font_fur11");

1241 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur11r
[] 
U8G_SECTION
(".progmem.u8g_font_fur11r");

1242 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur11n
[] 
U8G_SECTION
(".progmem.u8g_font_fur11n");

1243 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur14
[] 
U8G_SECTION
(".progmem.u8g_font_fur14");

1244 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur14r
[] 
U8G_SECTION
(".progmem.u8g_font_fur14r");

1245 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur14n
[] 
U8G_SECTION
(".progmem.u8g_font_fur14n");

1246 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur17
[] 
U8G_SECTION
(".progmem.u8g_font_fur17");

1247 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur17r
[] 
U8G_SECTION
(".progmem.u8g_font_fur17r");

1248 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur17n
[] 
U8G_SECTION
(".progmem.u8g_font_fur17n");

1249 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur20
[] 
U8G_SECTION
(".progmem.u8g_font_fur20");

1250 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur20r
[] 
U8G_SECTION
(".progmem.u8g_font_fur20r");

1251 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur20n
[] 
U8G_SECTION
(".progmem.u8g_font_fur20n");

1252 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur25
[] 
U8G_SECTION
(".progmem.u8g_font_fur25");

1253 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur25r
[] 
U8G_SECTION
(".progmem.u8g_font_fur25r");

1254 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur25n
[] 
U8G_SECTION
(".progmem.u8g_font_fur25n");

1255 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur30
[] 
U8G_SECTION
(".progmem.u8g_font_fur30");

1256 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur30r
[] 
U8G_SECTION
(".progmem.u8g_font_fur30r");

1257 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur30n
[] 
U8G_SECTION
(".progmem.u8g_font_fur30n");

1258 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur35n
[] 
U8G_SECTION
(".progmem.u8g_font_fur35n");

1259 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur42n
[] 
U8G_SECTION
(".progmem.u8g_font_fur42n");

1260 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fur49n
[] 
U8G_SECTION
(".progmem.u8g_font_fur49n");

1269 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb11
[] 
U8G_SECTION
(".progmem.u8g_font_gdb11");

1270 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb12
[] 
U8G_SECTION
(".progmem.u8g_font_gdb12");

1271 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb14
[] 
U8G_SECTION
(".progmem.u8g_font_gdb14");

1272 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb17
[] 
U8G_SECTION
(".progmem.u8g_font_gdb17");

1273 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb20
[] 
U8G_SECTION
(".progmem.u8g_font_gdb20");

1274 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb25
[] 
U8G_SECTION
(".progmem.u8g_font_gdb25");

1275 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb30
[] 
U8G_SECTION
(".progmem.u8g_font_gdb30");

1277 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb11r
[] 
U8G_SECTION
(".progmem.u8g_font_gdb11r");

1278 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb12r
[] 
U8G_SECTION
(".progmem.u8g_font_gdb12r");

1279 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb14r
[] 
U8G_SECTION
(".progmem.u8g_font_gdb14r");

1280 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb17r
[] 
U8G_SECTION
(".progmem.u8g_font_gdb17r");

1281 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb20r
[] 
U8G_SECTION
(".progmem.u8g_font_gdb20r");

1282 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb25r
[] 
U8G_SECTION
(".progmem.u8g_font_gdb25r");

1283 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb30r
[] 
U8G_SECTION
(".progmem.u8g_font_gdb30r");

1285 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb11n
[] 
U8G_SECTION
(".progmem.u8g_font_gdb11n");

1286 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb12n
[] 
U8G_SECTION
(".progmem.u8g_font_gdb12n");

1287 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb14n
[] 
U8G_SECTION
(".progmem.u8g_font_gdb14n");

1288 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb17n
[] 
U8G_SECTION
(".progmem.u8g_font_gdb17n");

1289 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb20n
[] 
U8G_SECTION
(".progmem.u8g_font_gdb20n");

1290 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb25n
[] 
U8G_SECTION
(".progmem.u8g_font_gdb25n");

1291 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdb30n
[] 
U8G_SECTION
(".progmem.u8g_font_gdb30n");

1300 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr9
[] 
U8G_SECTION
(".progmem.u8g_font_gdr9");

1301 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr10
[] 
U8G_SECTION
(".progmem.u8g_font_gdr10");

1302 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr11
[] 
U8G_SECTION
(".progmem.u8g_font_gdr11");

1303 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr12
[] 
U8G_SECTION
(".progmem.u8g_font_gdr12");

1304 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr14
[] 
U8G_SECTION
(".progmem.u8g_font_gdr14");

1305 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr17
[] 
U8G_SECTION
(".progmem.u8g_font_gdr17");

1306 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr20
[] 
U8G_SECTION
(".progmem.u8g_font_gdr20");

1307 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr25
[] 
U8G_SECTION
(".progmem.u8g_font_gdr25");

1308 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr30
[] 
U8G_SECTION
(".progmem.u8g_font_gdr30");

1310 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr9r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr9r");

1311 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr10r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr10r");

1312 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr11r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr11r");

1313 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr12r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr12r");

1314 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr14r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr14r");

1315 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr17r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr17r");

1316 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr20r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr20r");

1317 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr25r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr25r");

1318 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr30r
[] 
U8G_SECTION
(".progmem.u8g_font_gdr30r");

1320 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr9n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr9n");

1321 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr10n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr10n");

1322 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr11n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr11n");

1323 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr12n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr12n");

1324 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr14n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr14n");

1325 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr17n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr17n");

1326 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr20n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr20n");

1327 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr25n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr25n");

1328 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_gdr30n
[] 
U8G_SECTION
(".progmem.u8g_font_gdr30n");

1337 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb18
[] 
U8G_SECTION
(".progmem.u8g_font_osb18");

1338 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb21
[] 
U8G_SECTION
(".progmem.u8g_font_osb21");

1339 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb26
[] 
U8G_SECTION
(".progmem.u8g_font_osb26");

1340 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb29
[] 
U8G_SECTION
(".progmem.u8g_font_osb29");

1341 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb35
[] 
U8G_SECTION
(".progmem.u8g_font_osb35");

1343 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb18r
[] 
U8G_SECTION
(".progmem.u8g_font_osb18r");

1344 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb21r
[] 
U8G_SECTION
(".progmem.u8g_font_osb21r");

1345 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb26r
[] 
U8G_SECTION
(".progmem.u8g_font_osb26r");

1346 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb29r
[] 
U8G_SECTION
(".progmem.u8g_font_osb29r");

1347 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb35r
[] 
U8G_SECTION
(".progmem.u8g_font_osb35r");

1349 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb18n
[] 
U8G_SECTION
(".progmem.u8g_font_osb18n");

1350 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb21n
[] 
U8G_SECTION
(".progmem.u8g_font_osb21n");

1351 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb26n
[] 
U8G_SECTION
(".progmem.u8g_font_osb26n");

1352 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb29n
[] 
U8G_SECTION
(".progmem.u8g_font_osb29n");

1353 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_osb35n
[] 
U8G_SECTION
(".progmem.u8g_font_osb35n");

1362 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§18
[] 
U8G_SECTION
(".progmem.u8g_font_osr18");

1363 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§21
[] 
U8G_SECTION
(".progmem.u8g_font_osr21");

1364 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§26
[] 
U8G_SECTION
(".progmem.u8g_font_osr26");

1365 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§29
[] 
U8G_SECTION
(".progmem.u8g_font_osr29");

1366 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§35
[] 
U8G_SECTION
(".progmem.u8g_font_osr35");

1368 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§18r
[] 
U8G_SECTION
(".progmem.u8g_font_osr18r");

1369 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§21r
[] 
U8G_SECTION
(".progmem.u8g_font_osr21r");

1370 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§26r
[] 
U8G_SECTION
(".progmem.u8g_font_osr26r");

1371 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§29r
[] 
U8G_SECTION
(".progmem.u8g_font_osr29r");

1372 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§35r
[] 
U8G_SECTION
(".progmem.u8g_font_osr35r");

1374 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§18n
[] 
U8G_SECTION
(".progmem.u8g_font_osr18n");

1375 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§21n
[] 
U8G_SECTION
(".progmem.u8g_font_osr21n");

1376 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§26n
[] 
U8G_SECTION
(".progmem.u8g_font_osr26n");

1377 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§29n
[] 
U8G_SECTION
(".progmem.u8g_font_osr29n");

1378 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_o§35n
[] 
U8G_SECTION
(".progmem.u8g_font_osr35n");

1384 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_18_19
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_18_19");

1385 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_72_73
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_72_73");

1386 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_67_75
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_67_75");

1387 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_76
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_76");

1388 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_77
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_77");

1389 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_78_79
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_78_79");

1390 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_86
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_86");

1391 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t
[] 
U8G_SECTION
(".progmem.u8g_font_unifont");

1392 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄å
[] 
U8G_SECTION
(".progmem.u8g_font_unifontr");

1393 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_0_8
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_0_8");

1394 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_2_3
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_2_3");

1395 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_4_5
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_4_5");

1396 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_8_9
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_8_9");

1397 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_unif⁄t_12_13
[] 
U8G_SECTION
(".progmem.u8g_font_unifont_12_13");

1402 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_03b
[] 
U8G_SECTION
(".progmem.u8g_font_04b_03b");

1403 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_03bn
[] 
U8G_SECTION
(".progmem.u8g_font_04b_03bn");

1404 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_03br
[] 
U8G_SECTION
(".progmem.u8g_font_04b_03br");

1405 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_03
[] 
U8G_SECTION
(".progmem.u8g_font_04b_03");

1406 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_03n
[] 
U8G_SECTION
(".progmem.u8g_font_04b_03n");

1407 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_03r
[] 
U8G_SECTION
(".progmem.u8g_font_04b_03r");

1408 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_24
[] 
U8G_SECTION
(".progmem.u8g_font_04b_24");

1409 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_24n
[] 
U8G_SECTION
(".progmem.u8g_font_04b_24n");

1410 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_04b_24r
[] 
U8G_SECTION
(".progmem.u8g_font_04b_24r");

1414 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_‹gv01
[] 
U8G_SECTION
(".progmem.u8g_font_orgv01");

1415 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_‹gv01r
[] 
U8G_SECTION
(".progmem.u8g_font_orgv01r");

1416 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_‹gv01n
[] 
U8G_SECTION
(".progmem.u8g_font_orgv01n");

1418 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fixed_v0
[] 
U8G_SECTION
(".progmem.u8g_font_fixed_v0");

1419 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fixed_v0r
[] 
U8G_SECTION
(".progmem.u8g_font_fixed_v0r");

1420 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_fixed_v0n
[] 
U8G_SECTION
(".progmem.u8g_font_fixed_v0n");

1422 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_çssb
[] 
U8G_SECTION
(".progmem.u8g_font_tpssb");

1423 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_çssbr
[] 
U8G_SECTION
(".progmem.u8g_font_tpssbr");

1424 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_çssbn
[] 
U8G_SECTION
(".progmem.u8g_font_tpssbn");

1426 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_çss
[] 
U8G_SECTION
(".progmem.u8g_font_tpss");

1427 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_çs§
[] 
U8G_SECTION
(".progmem.u8g_font_tpssr");

1428 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_çs¢
[] 
U8G_SECTION
(".progmem.u8g_font_tpssn");

1432 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_‰ìdoomr25n
[] 
U8G_SECTION
(".progmem.u8g_font_freedoomr25n");

1433 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_‰ìdoomr10r
[] 
U8G_SECTION
(".progmem.u8g_font_freedoomr10r");

1436 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB08
[] 
U8G_SECTION
(".progmem.u8g_font_courB08");

1437 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB08r
[] 
U8G_SECTION
(".progmem.u8g_font_courB08r");

1438 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB10
[] 
U8G_SECTION
(".progmem.u8g_font_courB10");

1439 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB10r
[] 
U8G_SECTION
(".progmem.u8g_font_courB10r");

1440 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB12
[] 
U8G_SECTION
(".progmem.u8g_font_courB12");

1441 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB12r
[] 
U8G_SECTION
(".progmem.u8g_font_courB12r");

1442 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB14
[] 
U8G_SECTION
(".progmem.u8g_font_courB14");

1443 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB14r
[] 
U8G_SECTION
(".progmem.u8g_font_courB14r");

1444 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB18
[] 
U8G_SECTION
(".progmem.u8g_font_courB18");

1445 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB18r
[] 
U8G_SECTION
(".progmem.u8g_font_courB18r");

1446 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB24
[] 
U8G_SECTION
(".progmem.u8g_font_courB24");

1447 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB24r
[] 
U8G_SECTION
(".progmem.u8g_font_courB24r");

1448 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courB24n
[] 
U8G_SECTION
(".progmem.u8g_font_courB24n");

1450 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR08
[] 
U8G_SECTION
(".progmem.u8g_font_courR08");

1451 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR08r
[] 
U8G_SECTION
(".progmem.u8g_font_courR08r");

1452 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR10
[] 
U8G_SECTION
(".progmem.u8g_font_courR10");

1453 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR10r
[] 
U8G_SECTION
(".progmem.u8g_font_courR10r");

1454 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR12
[] 
U8G_SECTION
(".progmem.u8g_font_courR12");

1455 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR12r
[] 
U8G_SECTION
(".progmem.u8g_font_courR12r");

1456 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR14
[] 
U8G_SECTION
(".progmem.u8g_font_courR14");

1457 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR14r
[] 
U8G_SECTION
(".progmem.u8g_font_courR14r");

1458 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR18
[] 
U8G_SECTION
(".progmem.u8g_font_courR18");

1459 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR18r
[] 
U8G_SECTION
(".progmem.u8g_font_courR18r");

1460 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR24
[] 
U8G_SECTION
(".progmem.u8g_font_courR24");

1461 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR24r
[] 
U8G_SECTION
(".progmem.u8g_font_courR24r");

1462 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_courR24n
[] 
U8G_SECTION
(".progmem.u8g_font_courR24n");

1464 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB08
[] 
U8G_SECTION
(".progmem.u8g_font_helvB08");

1465 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB08r
[] 
U8G_SECTION
(".progmem.u8g_font_helvB08r");

1466 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB10
[] 
U8G_SECTION
(".progmem.u8g_font_helvB10");

1467 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB10r
[] 
U8G_SECTION
(".progmem.u8g_font_helvB10r");

1468 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB12
[] 
U8G_SECTION
(".progmem.u8g_font_helvB12");

1469 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB12r
[] 
U8G_SECTION
(".progmem.u8g_font_helvB12r");

1470 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB14
[] 
U8G_SECTION
(".progmem.u8g_font_helvB14");

1471 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB14r
[] 
U8G_SECTION
(".progmem.u8g_font_helvB14r");

1472 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB18
[] 
U8G_SECTION
(".progmem.u8g_font_helvB18");

1473 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB18r
[] 
U8G_SECTION
(".progmem.u8g_font_helvB18r");

1474 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB24
[] 
U8G_SECTION
(".progmem.u8g_font_helvB24");

1475 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB24r
[] 
U8G_SECTION
(".progmem.u8g_font_helvB24r");

1476 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvB24n
[] 
U8G_SECTION
(".progmem.u8g_font_helvB24n");

1478 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR08
[] 
U8G_SECTION
(".progmem.u8g_font_helvR08");

1479 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR08r
[] 
U8G_SECTION
(".progmem.u8g_font_helvR08r");

1480 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR10
[] 
U8G_SECTION
(".progmem.u8g_font_helvR10");

1481 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR10r
[] 
U8G_SECTION
(".progmem.u8g_font_helvR10r");

1482 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR12
[] 
U8G_SECTION
(".progmem.u8g_font_helvR12");

1483 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR12r
[] 
U8G_SECTION
(".progmem.u8g_font_helvR12r");

1484 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR14
[] 
U8G_SECTION
(".progmem.u8g_font_helvR14");

1485 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR14r
[] 
U8G_SECTION
(".progmem.u8g_font_helvR14r");

1486 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR18
[] 
U8G_SECTION
(".progmem.u8g_font_helvR18");

1487 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR18r
[] 
U8G_SECTION
(".progmem.u8g_font_helvR18r");

1488 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR24
[] 
U8G_SECTION
(".progmem.u8g_font_helvR24");

1489 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR24r
[] 
U8G_SECTION
(".progmem.u8g_font_helvR24r");

1490 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_hñvR24n
[] 
U8G_SECTION
(".progmem.u8g_font_helvR24n");

1492 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB08
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB08");

1493 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB08r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB08r");

1494 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB10
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB10");

1495 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB10r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB10r");

1496 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB12
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB12");

1497 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB12r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB12r");

1498 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB14
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB14");

1499 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB14r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB14r");

1500 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB18
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB18");

1501 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB18r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB18r");

1502 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB24
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB24");

1503 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB24r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB24r");

1504 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nB24n
[] 
U8G_SECTION
(".progmem.u8g_font_ncenB24n");

1506 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR08
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR08");

1507 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR08r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR08r");

1508 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR10
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR10");

1509 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR10r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR10r");

1510 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR12
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR12");

1511 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR12r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR12r");

1512 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR14
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR14");

1513 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR14r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR14r");

1514 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR18
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR18");

1515 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR18r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR18r");

1516 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR24
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR24");

1517 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR24r
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR24r");

1518 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_n˚nR24n
[] 
U8G_SECTION
(".progmem.u8g_font_ncenR24n");

1520 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb08
[] 
U8G_SECTION
(".progmem.u8g_font_symb08");

1521 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb08r
[] 
U8G_SECTION
(".progmem.u8g_font_symb08r");

1522 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb10
[] 
U8G_SECTION
(".progmem.u8g_font_symb10");

1523 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb10r
[] 
U8G_SECTION
(".progmem.u8g_font_symb10r");

1524 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb12
[] 
U8G_SECTION
(".progmem.u8g_font_symb12");

1525 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb12r
[] 
U8G_SECTION
(".progmem.u8g_font_symb12r");

1526 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb14
[] 
U8G_SECTION
(".progmem.u8g_font_symb14");

1527 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb14r
[] 
U8G_SECTION
(".progmem.u8g_font_symb14r");

1528 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb18
[] 
U8G_SECTION
(".progmem.u8g_font_symb18");

1529 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb18r
[] 
U8G_SECTION
(".progmem.u8g_font_symb18r");

1530 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb24
[] 
U8G_SECTION
(".progmem.u8g_font_symb24");

1531 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_symb24r
[] 
U8G_SECTION
(".progmem.u8g_font_symb24r");

1533 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB08
[] 
U8G_SECTION
(".progmem.u8g_font_timB08");

1534 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB08r
[] 
U8G_SECTION
(".progmem.u8g_font_timB08r");

1535 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB10
[] 
U8G_SECTION
(".progmem.u8g_font_timB10");

1536 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB10r
[] 
U8G_SECTION
(".progmem.u8g_font_timB10r");

1537 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB12
[] 
U8G_SECTION
(".progmem.u8g_font_timB12");

1538 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB12r
[] 
U8G_SECTION
(".progmem.u8g_font_timB12r");

1539 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB14
[] 
U8G_SECTION
(".progmem.u8g_font_timB14");

1540 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB14r
[] 
U8G_SECTION
(".progmem.u8g_font_timB14r");

1541 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB18
[] 
U8G_SECTION
(".progmem.u8g_font_timB18");

1542 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB18r
[] 
U8G_SECTION
(".progmem.u8g_font_timB18r");

1543 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB24
[] 
U8G_SECTION
(".progmem.u8g_font_timB24");

1544 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB24r
[] 
U8G_SECTION
(".progmem.u8g_font_timB24r");

1545 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timB24n
[] 
U8G_SECTION
(".progmem.u8g_font_timB24n");

1547 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR08
[] 
U8G_SECTION
(".progmem.u8g_font_timR08");

1548 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR08r
[] 
U8G_SECTION
(".progmem.u8g_font_timR08r");

1549 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR10
[] 
U8G_SECTION
(".progmem.u8g_font_timR10");

1550 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR10r
[] 
U8G_SECTION
(".progmem.u8g_font_timR10r");

1551 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR12
[] 
U8G_SECTION
(".progmem.u8g_font_timR12");

1552 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR12r
[] 
U8G_SECTION
(".progmem.u8g_font_timR12r");

1553 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR14
[] 
U8G_SECTION
(".progmem.u8g_font_timR14");

1554 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR14r
[] 
U8G_SECTION
(".progmem.u8g_font_timR14r");

1555 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR18
[] 
U8G_SECTION
(".progmem.u8g_font_timR18");

1556 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR18r
[] 
U8G_SECTION
(".progmem.u8g_font_timR18r");

1557 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR24
[] 
U8G_SECTION
(".progmem.u8g_font_timR24");

1558 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR24r
[] 
U8G_SECTION
(".progmem.u8g_font_timR24r");

1559 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_timR24n
[] 
U8G_SECTION
(".progmem.u8g_font_timR24n");

1563 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_p01ty≥
[] 
U8G_SECTION
(".progmem.u8g_font_p01type");

1564 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_p01ty≥r
[] 
U8G_SECTION
(".progmem.u8g_font_p01typer");

1565 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_p01ty≥n
[] 
U8G_SECTION
(".progmem.u8g_font_p01typen");

1567 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_luˇsf⁄t_Æã∫©e
[] 
U8G_SECTION
(".progmem.u8g_font_lucasfont_alternate");

1568 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_luˇsf⁄t_Æã∫©î
[] 
U8G_SECTION
(".progmem.u8g_font_lucasfont_alternater");

1569 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_luˇsf⁄t_Æã∫©í
[] 
U8G_SECTION
(".progmem.u8g_font_lucasfont_alternaten");

1575 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_chikôa
[] 
U8G_SECTION
(".progmem.u8g_font_chikita");

1576 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_chikô¨
[] 
U8G_SECTION
(".progmem.u8g_font_chikitar");

1577 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_chikô™
[] 
U8G_SECTION
(".progmem.u8g_font_chikitan");

1579 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_pixñÀ_mi¸o
[] 
U8G_SECTION
(".progmem.u8g_font_pixelle_micro");

1580 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_pixñÀ_mi¸‹
[] 
U8G_SECTION
(".progmem.u8g_font_pixelle_micror");

1581 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_pixñÀ_mi¸⁄
[] 
U8G_SECTION
(".progmem.u8g_font_pixelle_micron");

1583 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_åixñ_squ¨e
[] 
U8G_SECTION
(".progmem.u8g_font_trixel_square");

1584 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_åixñ_squ¨î
[] 
U8G_SECTION
(".progmem.u8g_font_trixel_squarer");

1585 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_åixñ_squ¨í
[] 
U8G_SECTION
(".progmem.u8g_font_trixel_squaren");

1587 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_robŸ_de_núo
[] 
U8G_SECTION
(".progmem.u8g_font_robot_de_niro");

1588 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_robŸ_de_nú‹
[] 
U8G_SECTION
(".progmem.u8g_font_robot_de_niror");

1589 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_robŸ_de_nú⁄
[] 
U8G_SECTION
(".progmem.u8g_font_robot_de_niron");

1591 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_baby
[] 
U8G_SECTION
(".progmem.u8g_font_baby");

1592 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_babyr
[] 
U8G_SECTION
(".progmem.u8g_font_babyr");

1593 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_babyn
[] 
U8G_SECTION
(".progmem.u8g_font_babyn");

1595 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_blù„°_07
[] 
U8G_SECTION
(".progmem.u8g_font_blipfest_07");

1596 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_blù„°_07r
[] 
U8G_SECTION
(".progmem.u8g_font_blipfest_07r");

1597 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_blù„°_07n
[] 
U8G_SECTION
(".progmem.u8g_font_blipfest_07n");

1599 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x10_m¨lö
[] 
U8G_SECTION
(".progmem.u8g_font_6x10_marlin");

1600 c⁄° 
u8g_‚çgm_uöt8_t
 
u8g_f⁄t_6x9
[] 
U8G_SECTION
(".progmem.u8g_font_6x9");

1602 #ifde‡
__˝lu•lus


	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_bitmap.c

37 
	~"u8g.h
"

39 
	$u8g_DøwHBôm≠
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, c⁄° 
uöt8_t
 *
bôm≠
)

41  
˙t
 > 0 )

43 
	`u8g_Døw8Pixñ
(
u8g
, 
x
, 
y
, 0, *
bôm≠
);

44 
bôm≠
++;

45 
˙t
--;

46 
x
+=8;

48 
	}
}

50 
	$u8g_DøwBôm≠
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, u8g_uöt_à
h
, c⁄° 
uöt8_t
 *
bôm≠
)

52 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
˙t
*8, 
h
) == 0 )

54  
h
 > 0 )

56 
	`u8g_DøwHBôm≠
(
u8g
, 
x
, 
y
, 
˙t
, 
bôm≠
);

57 
bôm≠
 +
˙t
;

58 
y
++;

59 
h
--;

61 
	}
}

64 
	$u8g_DøwHBôm≠P
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
)

66  
˙t
 > 0 )

68 
	`u8g_Døw8Pixñ
(
u8g
, 
x
, 
y
, 0, 
	`u8g_pgm_ªad
(
bôm≠
));

69 
bôm≠
++;

70 
˙t
--;

71 
x
+=8;

73 
	}
}

75 
	$u8g_DøwBôm≠P
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
˙t
, u8g_uöt_à
h
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
)

77 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
˙t
*8, 
h
) == 0 )

79  
h
 > 0 )

81 
	`u8g_DøwHBôm≠P
(
u8g
, 
x
, 
y
, 
˙t
, 
bôm≠
);

82 
bôm≠
 +
˙t
;

83 
y
++;

84 
h
--;

86 
	}
}

90 
	$u8g_DøwHXBM
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, c⁄° 
uöt8_t
 *
bôm≠
)

92 
uöt8_t
 
d
;

93 
x
+=7;

94  
w
 >= 8 )

96 
	`u8g_Døw8Pixñ
(
u8g
, 
x
, 
y
, 2, *
bôm≠
);

97 
bôm≠
++;

98 
w
-= 8;

99 
x
+=8;

101 i‡–
w
 > 0 )

103 
d
 = *
bôm≠
;

104 
x
 -= 7;

107 i‡–
d
 & 1 )

108 
	`u8g_DøwPixñ
(
u8g
, 
x
, 
y
);

109 
x
++;

110 
w
--;

111 
d
 >>= 1;

112 }  
w
 > 0 );

114 
	}
}

116 
	$u8g_DøwXBM
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, c⁄° 
uöt8_t
 *
bôm≠
)

118 
u8g_uöt_t
 
b
;

119 
b
 = 
w
;

120 
b
 += 7;

121 
b
 >>= 3;

123 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
w
, 
h
) == 0 )

126  
h
 > 0 )

128 
	`u8g_DøwHXBM
(
u8g
, 
x
, 
y
, 
w
, 
bôm≠
);

129 
bôm≠
 +
b
;

130 
y
++;

131 
h
--;

133 
	}
}

135 
	$u8g_DøwHXBMP
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
)

137 
uöt8_t
 
d
;

138 
x
+=7;

139  
w
 >= 8 )

141 
	`u8g_Døw8Pixñ
(
u8g
, 
x
, 
y
, 2, 
	`u8g_pgm_ªad
(
bôm≠
));

142 
bôm≠
++;

143 
w
-= 8;

144 
x
+=8;

146 i‡–
w
 > 0 )

148 
d
 = 
	`u8g_pgm_ªad
(
bôm≠
);

149 
x
 -= 7;

152 i‡–
d
 & 1 )

153 
	`u8g_DøwPixñ
(
u8g
, 
x
, 
y
);

154 
x
++;

155 
w
--;

156 
d
 >>= 1;

157 }  
w
 > 0 );

159 
	}
}

161 
	$u8g_DøwXBMP
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, c⁄° 
u8g_pgm_uöt8_t
 *
bôm≠
)

163 
u8g_uöt_t
 
b
;

164 
b
 = 
w
;

165 
b
 += 7;

166 
b
 >>= 3;

168 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
w
, 
h
) == 0 )

170  
h
 > 0 )

172 
	`u8g_DøwHXBMP
(
u8g
, 
x
, 
y
, 
w
, 
bôm≠
);

173 
bôm≠
 +
b
;

174 
y
++;

175 
h
--;

177 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_circle.c

43 
	~"u8g.h
"

45 #ifde‡
OLD_CODE


47 
	$cúc_uµîRight
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
) {

48 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
x
, 
y0
 - 
y
);

49 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
y
, 
y0
 - 
x
);

50 
	}
}

52 
	$cúc_uµîLe·
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
) {

53 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
x
, 
y0
 - 
y
);

54 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
y
, 
y0
 - 
x
);

55 
	}
}

57 
	$cúc_lowîRight
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
) {

58 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
x
, 
y0
 + 
y
);

59 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
y
, 
y0
 + 
x
);

60 
	}
}

62 
	$cúc_lowîLe·
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
) {

63 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
x
, 
y0
 + 
y
);

64 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
y
, 
y0
 + 
x
);

65 
	}
}

67 
	$cúc_Æl
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
) {

68 
	`cúc_uµîRight
(
u8g
, 
x
, 
y
, 
x0
, 
y0
);

69 
	`cúc_uµîLe·
(
u8g
, 
x
, 
y
, 
x0
, 
y0
);

70 
	`cúc_lowîRight
(
u8g
, 
x
, 
y
, 
x0
, 
y0
);

71 
	`cúc_lowîLe·
(
u8g
, 
x
, 
y
, 
x0
, 
y0
);

72 
	}
}

74 
	$u8g_DøwEmpCúc
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
)

76 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x0
-
ød
-1, 
y0
-rad-1, 2*rad+1, 2*rad+1) == 0)

79 
f
 = 1 - 
ød
;

80 
ddF_x
 = 1;

81 
ddF_y
 = -2*
ød
;

82 
uöt8_t
 
x
 = 0;

83 
uöt8_t
 
y
 = 
ød
;

85 –*
cúc_utû
 )(
u8g_t
 *, 
u8g_uöt_t
, u8g_uint_t, u8g_uint_t, u8g_uint_t);

87 
›ti⁄
)

89 
U8G_CIRC_UPPER_RIGHT
:

90 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
 - 
ød
);

91 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
ød
, 
y0
);

92 
cúc_utû
 = 
cúc_uµîRight
;

94 
U8G_CIRC_UPPER_LEFT
:

95 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
 - 
ød
);

96 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
ød
, 
y0
);

97 
cúc_utû
 = 
cúc_uµîLe·
;

99 
U8G_CIRC_LOWER_RIGHT
:

100 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
 + 
ød
);

101 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
ød
, 
y0
);

102 
cúc_utû
 = 
cúc_lowîRight
;

104 
U8G_CIRC_LOWER_LEFT
:

105 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
 + 
ød
);

106 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
ød
, 
y0
);

107 
cúc_utû
 = 
cúc_lowîLe·
;

110 
U8G_CIRC_ALL
:

111 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
 + 
ød
);

112 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
 - 
ød
);

113 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
ød
, 
y0
);

114 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
ød
, 
y0
);

115 
cúc_utû
 = 
cúc_Æl
;

119  
x
 < 
y
 )

121 if(
f
 >= 0)

123 
y
--;

124 
ddF_y
 += 2;

125 
f
 +
ddF_y
;

127 
x
++;

128 
ddF_x
 += 2;

129 
f
 +
ddF_x
;

131 
	`cúc_utû
(
u8g
, 
x
, 
y
, 
x0
, 
y0
);

133 
	}
}

136 
	$u8g_DøwFûlCúc
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
)

138 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x0
-
ød
-1, 
y0
-rad-1, 2*rad+1, 2*rad+1) == 0)

141 
f
 = 1 - 
ød
;

142 
ddF_x
 = 1;

143 
ddF_y
 = -2*
ød
;

144 
uöt8_t
 
x
 = 0;

145 
uöt8_t
 
y
 = 
ød
;

150 i‡(
›ti⁄
 =
U8G_CIRC_UPPER_LEFT
 || o±i⁄ =
U8G_CIRC_UPPER_RIGHT
) {

151 
	`u8g_DøwVLöe
(
u8g
, 
x0
, 
y0
 - 
ød
,Ñad+1);

153 i‡(
›ti⁄
 =
U8G_CIRC_LOWER_LEFT
 || o±i⁄ =
U8G_CIRC_LOWER_RIGHT
) {

154 
	`u8g_DøwVLöe
(
u8g
, 
x0
, 
y0
, 
ød
+1);

157 
	`u8g_DøwVLöe
(
u8g
, 
x0
, 
y0
 - 
ød
, 2*rad+1);

160  
x
 < 
y
 )

162 if(
f
 >= 0)

164 
y
--;

165 
ddF_y
 += 2;

166 
f
 +
ddF_y
;

168 
x
++;

169 
ddF_x
 += 2;

170 
f
 +
ddF_x
;

174 
›ti⁄
)

176 
U8G_CIRC_UPPER_RIGHT
:

177 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
x
, 
y0
-
y
, y+1);

178 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
y
, 
y0
-
x
, x+1);

180 
U8G_CIRC_UPPER_LEFT
:

181 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
x
, 
y0
-
y
, y+1);

182 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
y
, 
y0
-
x
, x+1);

184 
U8G_CIRC_LOWER_RIGHT
:

185 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
x
, 
y0
, 
y
+1);

186 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
y
, 
y0
, 
x
+1);

188 
U8G_CIRC_LOWER_LEFT
:

189 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
x
, 
y0
, 
y
+1);

190 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
y
, 
y0
, 
x
+1);

192 
U8G_CIRC_ALL
:

193 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
x
, 
y0
-
y
, 2*y+1);

194 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
x
, 
y0
-
y
, 2*y+1);

195 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
y
, 
y0
-
x
, 2*x+1);

196 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
y
, 
y0
-
x
, 2*x+1);

200 
	}
}

206 
	$u8g_døw_cú˛e_£˘i⁄
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
, 
uöt8_t
 
›ti⁄
Ë
U8G_NOINLINE
;

208 
	$u8g_døw_cú˛e_£˘i⁄
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
, 
uöt8_t
 
›ti⁄
)

211 i‡–
›ti⁄
 & 
U8G_DRAW_UPPER_RIGHT
 )

213 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
x
, 
y0
 - 
y
);

214 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
y
, 
y0
 - 
x
);

218 i‡–
›ti⁄
 & 
U8G_DRAW_UPPER_LEFT
 )

220 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
x
, 
y0
 - 
y
);

221 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
y
, 
y0
 - 
x
);

225 i‡–
›ti⁄
 & 
U8G_DRAW_LOWER_RIGHT
 )

227 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
x
, 
y0
 + 
y
);

228 
	`u8g_DøwPixñ
(
u8g
, 
x0
 + 
y
, 
y0
 + 
x
);

232 i‡–
›ti⁄
 & 
U8G_DRAW_LOWER_LEFT
 )

234 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
x
, 
y0
 + 
y
);

235 
	`u8g_DøwPixñ
(
u8g
, 
x0
 - 
y
, 
y0
 + 
x
);

237 
	}
}

239 
	$u8g_døw_cú˛e
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
)

241 
u8g_öt_t
 
f
;

242 
u8g_öt_t
 
ddF_x
;

243 
u8g_öt_t
 
ddF_y
;

244 
u8g_uöt_t
 
x
;

245 
u8g_uöt_t
 
y
;

247 
f
 = 1;

248 
f
 -
ød
;

249 
ddF_x
 = 1;

250 
ddF_y
 = 0;

251 
ddF_y
 -
ød
;

252 
ddF_y
 *= 2;

253 
x
 = 0;

254 
y
 = 
ød
;

256 
	`u8g_døw_cú˛e_£˘i⁄
(
u8g
, 
x
, 
y
, 
x0
, 
y0
, 
›ti⁄
);

258  
x
 < 
y
 )

260 i‡(
f
 >= 0)

262 
y
--;

263 
ddF_y
 += 2;

264 
f
 +
ddF_y
;

266 
x
++;

267 
ddF_x
 += 2;

268 
f
 +
ddF_x
;

270 
	`u8g_døw_cú˛e_£˘i⁄
(
u8g
, 
x
, 
y
, 
x0
, 
y0
, 
›ti⁄
);

272 
	}
}

274 
	$u8g_DøwCú˛e
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
)

278 
u8g_uöt_t
 
ødp
, 
ødp2
;

280 
ødp
 = 
ød
;

281 
ødp
++;

282 
ødp2
 = 
ødp
;

283 
ødp2
 *= 2;

285 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x0
-
ødp
, 
y0
-ødp, 
ødp2
,Ñadp2) == 0)

290 
	`u8g_døw_cú˛e
(
u8g
, 
x0
, 
y0
, 
ød
, 
›ti⁄
);

291 
	}
}

293 
	$u8g_døw_disc_£˘i⁄
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
, 
uöt8_t
 
›ti⁄
Ë
U8G_NOINLINE
;

295 
	$u8g_døw_disc_£˘i⁄
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
x0
, u8g_uöt_à
y0
, 
uöt8_t
 
›ti⁄
)

298 i‡–
›ti⁄
 & 
U8G_DRAW_UPPER_RIGHT
 )

300 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
x
, 
y0
-
y
, y+1);

301 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
y
, 
y0
-
x
, x+1);

305 i‡–
›ti⁄
 & 
U8G_DRAW_UPPER_LEFT
 )

307 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
x
, 
y0
-
y
, y+1);

308 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
y
, 
y0
-
x
, x+1);

312 i‡–
›ti⁄
 & 
U8G_DRAW_LOWER_RIGHT
 )

314 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
x
, 
y0
, 
y
+1);

315 
	`u8g_DøwVLöe
(
u8g
, 
x0
+
y
, 
y0
, 
x
+1);

319 i‡–
›ti⁄
 & 
U8G_DRAW_LOWER_LEFT
 )

321 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
x
, 
y0
, 
y
+1);

322 
	`u8g_DøwVLöe
(
u8g
, 
x0
-
y
, 
y0
, 
x
+1);

324 
	}
}

326 
	$u8g_døw_disc
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
)

328 
u8g_öt_t
 
f
;

329 
u8g_öt_t
 
ddF_x
;

330 
u8g_öt_t
 
ddF_y
;

331 
u8g_uöt_t
 
x
;

332 
u8g_uöt_t
 
y
;

334 
f
 = 1;

335 
f
 -
ød
;

336 
ddF_x
 = 1;

337 
ddF_y
 = 0;

338 
ddF_y
 -
ød
;

339 
ddF_y
 *= 2;

340 
x
 = 0;

341 
y
 = 
ød
;

343 
	`u8g_døw_disc_£˘i⁄
(
u8g
, 
x
, 
y
, 
x0
, 
y0
, 
›ti⁄
);

345  
x
 < 
y
 )

347 i‡(
f
 >= 0)

349 
y
--;

350 
ddF_y
 += 2;

351 
f
 +
ddF_y
;

353 
x
++;

354 
ddF_x
 += 2;

355 
f
 +
ddF_x
;

357 
	`u8g_døw_disc_£˘i⁄
(
u8g
, 
x
, 
y
, 
x0
, 
y0
, 
›ti⁄
);

359 
	}
}

361 
	$u8g_DøwDisc
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
ød
, 
uöt8_t
 
›ti⁄
)

365 
u8g_uöt_t
 
ødp
, 
ødp2
;

367 
ødp
 = 
ød
;

368 
ødp
++;

369 
ødp2
 = 
ødp
;

370 
ødp2
 *= 2;

372 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x0
-
ødp
, 
y0
-ødp, 
ødp2
,Ñadp2) == 0)

377 
	`u8g_døw_disc
(
u8g
, 
x0
, 
y0
, 
ød
, 
›ti⁄
);

378 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_clip.c

59 
	~"u8g.h
"

61 #ifde‡
__GNUC__


62 
	#U8G_ALWAYS_INLINE
 
	`__©åibuã__
((
Æways_ölöe
))

	)

64 
	#U8G_ALWAYS_INLINE


	)

77 #ifde‡
OLD_CODE_WHICH_IS_TOO_SLOW


78 
uöt8_t
 
	$u8g_is_öãr£˘i⁄_boﬁón
(
u8g_uöt_t
 
a0
, u8g_uöt_à
a1
, u8g_uöt_à
v0
, u8g_uöt_à
v1
)

80 
uöt8_t
 
c1
, 
c2
, 
c3
, 
tmp
;

81 
c1
 = 
v0
 <
a1
;

82 
c2
 = 
v1
 >
a0
;

83 
c3
 = 
v0
 > 
v1
;

85 
tmp
 = 
c1
;

86 
c1
 &
c2
;

87 
c2
 &
c3
;

88 
c3
 &
tmp
;

89 
c1
 |
c2
;

90 
c1
 |
c3
;

91  
c1
 & 1;

92 
	}
}

95 
	#U8G_IS_INTERSECTION_MACRO
(
a0
,
a1
,
v0
,
v1
Ë((
uöt8_t
)–(v0Ë<◊1ËË? ( ( (v1Ë>◊0ËË? ( 1 ) : ( (v0Ë> (v1ËËË: ( ( (v1Ë>◊0ËË? ( (v0Ë> (v1ËË: ( 0 ) ))

	)

97 
uöt8_t
 
	$u8g_is_öãr£˘i⁄_decisi⁄_åì
(
u8g_uöt_t
 
a0
, u8g_uöt_à
a1
, u8g_uöt_à
v0
, u8g_uöt_à
v1
Ë
U8G_ALWAYS_INLINE
;

98 
uöt8_t
 
	$u8g_is_öãr£˘i⁄_decisi⁄_åì
(
u8g_uöt_t
 
a0
, u8g_uöt_à
a1
, u8g_uöt_à
v0
, u8g_uöt_à
v1
)

102 i‡–
v0
 <
a1
 )

104 i‡–
v1
 >
a0
 )

110 i‡–
v0
 > 
v1
 )

122 i‡–
v1
 >
a0
 )

124 i‡–
v0
 > 
v1
 )

138 
	}
}

141 
uöt8_t
 
	$u8g_IsBBXI¡î£˘i⁄
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
)

143 
u8g_uöt_t
 
tmp
;

144 
tmp
 = 
y
;

145 
tmp
 +
h
;

146 
tmp
--;

147 i‡–
	`u8g_is_öãr£˘i⁄_decisi⁄_åì
(
u8g
->
cuºít_∑ge
.
y0
, u8g->cuºít_∑ge.
y1
, 
y
, 
tmp
) == 0 )

150 
tmp
 = 
x
;

151 
tmp
 +
w
;

152 
tmp
--;

153  
	`u8g_is_öãr£˘i⁄_decisi⁄_åì
(
u8g
->
cuºít_∑ge
.
x0
, u8g->cuºít_∑ge.
x1
, 
x
, 
tmp
);

154 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_api.c

37 
	~"u8g.h
"

39 
uöt8_t
 
	$u8g_InôCom
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

41  
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_INIT
, 0, 
NULL
);

42 
	}
}

44 
	$u8g_St›Com
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

46 
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_STOP
, 0, 
NULL
);

47 
	}
}

50 
	$u8g_SëChùSñe˘
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
cs
)

52 
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_CHIP_SELECT
, 
cs
, 
NULL
);

53 
	}
}

55 
	$u8g_SëRe£tLow
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

57 
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_RESET
, 0, 
NULL
);

58 
	}
}

60 
	$u8g_SëRe£tHigh
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

62 
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_RESET
, 1, 
NULL
);

63 
	}
}

66 
	$u8g_SëAddªss
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
addªss
)

68 
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_ADDRESS
, 
addªss
, 
NULL
);

69 
	}
}

71 
uöt8_t
 
	$u8g_WrôeByã
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
vÆ
)

73  
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_WRITE_BYTE
, 
vÆ
, 
NULL
);

74 
	}
}

76 
uöt8_t
 
	$u8g_WrôeSequí˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
˙t
, uöt8_à*
£q
)

78  
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_WRITE_SEQ
, 
˙t
, 
£q
);

79 
	}
}

81 
uöt8_t
 
	$u8g_WrôeSequí˚P
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
˙t
, c⁄° uöt8_à*
£q
)

83  
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_WRITE_SEQ_P
, 
˙t
, (*)
£q
);

84 
	}
}

106 
uöt8_t
 
	$u8g_WrôeEscSeqP
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, c⁄° 
uöt8_t
 *
esc_£q
)

108 
uöt8_t
 
is_esˇ≥
 = 0;

109 
uöt8_t
 
vÆue
;

112 
vÆue
 = 
	`u8g_pgm_ªad
(
esc_£q
);

113 i‡–
is_esˇ≥
 == 0 )

115 i‡–
vÆue
 != 255 )

117 i‡–
	`u8g_WrôeByã
(
u8g
, 
dev
, 
vÆue
) == 0 )

122 
is_esˇ≥
 = 1;

127 i‡–
vÆue
 == 255 )

129 i‡–
	`u8g_WrôeByã
(
u8g
, 
dev
, 
vÆue
) == 0 )

132 i‡–
vÆue
 == 254 )

136 i‡–
vÆue
 >= 0x0f0 )

140 i‡–
vÆue
 >= 0xe0 )

142 
	`u8g_SëAddªss
(
u8g
, 
dev
, 
vÆue
 & 0x0f);

144 i‡–
vÆue
 >= 0xd0 )

146 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 
vÆue
 & 0x0f);

148 i‡–
vÆue
 >= 0xc0 )

150 
	`u8g_SëRe£tLow
(
u8g
, 
dev
);

151 
vÆue
 &= 0x0f;

152 
vÆue
 <<= 4;

153 
vÆue
+=2;

154 
	`u8g_Dñay
(
vÆue
);

155 
	`u8g_SëRe£tHigh
(
u8g
, 
dev
);

156 
	`u8g_Dñay
(
vÆue
);

158 i‡–
vÆue
 >= 0xbe )

163 i‡–
vÆue
 <= 127 )

165 
	`u8g_Dñay
(
vÆue
);

167 
is_esˇ≥
 = 0;

169 
esc_£q
++;

172 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_api_16gr.c

41 
	~"u8g.h
"

46 
uöt8_t
 
	$u8g_WrôeByãBWTo16GrDevi˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
b
)

48 
uöt8_t
 
buf
[4];

49 
uöt8_t
 
m≠
[4] = { 0, 0x00f, 0x0f0, 0x0ff };

50 
buf
 [3] = 
m≠
[
b
 & 3];

51 
b
>>=2;

52 
buf
 [2] = 
m≠
[
b
 & 3];

53 
b
>>=2;

54 
buf
 [1] = 
m≠
[
b
 & 3];

55 
b
>>=2;

56 
buf
 [0] = 
m≠
[
b
 & 3];

57  
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_WRITE_SEQ
, 4, 
buf
);

58 
	}
}

60 
uöt8_t
 
	$u8g_WrôeSequí˚BWTo16GrDevi˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
˙t
, uöt8_à*
±r
)

64 i‡–
	`u8g_WrôeByãBWTo16GrDevi˚
(
u8g
, 
dev
, *
±r
++) == 0 )

66 
˙t
--;

67 }  
˙t
 != 0 );

69 
	}
}

72 
uöt8_t
 
	$u8g_WrôeByã4LTo16GrDevi˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
b
)

76 
uöt8_t
 
m≠
[16] = { 0x000, 0x040, 0x0a0, 0x0f0, 0x004, 0x044, 0x0a4, 0x0f4, 0x00a, 0x04a, 0x0aa, 0x0fa, 0x00f, 0x04f, 0x0af, 0x0ff};

77 
uöt8_t
 
bb
;

78 
bb
 = 
b
;

79 
bb
 &= 15;

80 
b
>>=4;

81 
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_WRITE_BYTE
, 
m≠
[
bb
], 
NULL
);

82  
dev
->
	`com_‚
(
u8g
, 
U8G_COM_MSG_WRITE_BYTE
, 
m≠
[
b
], 
NULL
);

83 
	}
}

85 
uöt8_t
 
	$u8g_WrôeSequí˚4LTo16GrDevi˚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
˙t
, uöt8_à*
±r
)

89 i‡–
	`u8g_WrôeByã4LTo16GrDevi˚
(
u8g
, 
dev
, *
±r
++) == 0 )

91 
˙t
--;

92 }  
˙t
 != 0 );

94 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_arduino_common.c

39 
	~"u8g.h
"

41 #i‡
deföed
(
ARDUINO
)

43 #i‡
ARDUINO
 < 100

44 
	~<WProgøm.h
>

46 
	~<Arduöo.h
>

49 
	$u8g_com_¨duöo_digôÆ_wrôe
(
u8g_t
 *
u8g
, 
uöt8_t
 
pö_ödex
, uöt8_à
vÆue
)

51 
uöt8_t
 
pö
;

52 
pö
 = 
u8g
->
pö_li°
[
pö_ödex
];

53 i‡–
pö
 !
U8G_PIN_NONE
 )

54 
	`digôÆWrôe
(
pö
, 
vÆue
);

55 
	}
}

58 
	$u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g_t
 *
u8g
)

60 
uöt8_t
 
i
;

62  
i
 = 0; i < 
U8G_PIN_LIST_LEN
-1; i++ )

64 i‡–
u8g
->
pö_li°
[
i
] !
U8G_PIN_NONE
 )

66 
	`pöMode
(
u8g
->
pö_li°
[
i
], 
OUTPUT
);

67 
	`digôÆWrôe
(
u8g
->
pö_li°
[
i
], 
HIGH
);

70 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_arduino_fast_parallel.c

54 
	~"u8g.h
"

56 #i‡ 
deföed
(
ARDUINO
)

58 #i‡
ARDUINO
 < 100

60 
	~<wúög_¥iv©e.h
>

61 
	~<pös_¨duöo.h
>

63 
	~<Arduöo.h
>

67 
	#PIN_D0
 8

	)

68 
	#PIN_D1
 9

	)

69 
	#PIN_D2
 10

	)

70 
	#PIN_D3
 11

	)

71 
	#PIN_D4
 4

	)

72 
	#PIN_D5
 5

	)

73 
	#PIN_D6
 6

	)

74 
	#PIN_D7
 7

	)

76 
	#PIN_CS1
 14

	)

77 
	#PIN_CS2
 15

	)

78 
	#PIN_RW
 16

	)

79 
	#PIN_DI
 17

	)

80 
	#PIN_EN
 18

	)

85 #i‡
deföed
(
__PIC32MX
)

87 vﬁ©ûê
uöt32_t
 *
	gu8g_d©a_p‹t
[8];

88 
uöt32_t
 
	gu8g_d©a_mask
[8];

90 vﬁ©ûê
uöt8_t
 *
	gu8g_d©a_p‹t
[8];

91 
uöt8_t
 
	gu8g_d©a_mask
[8];

96 
	$u8g_com_¨duöo_Á°_∑øŒñ_öô
(
u8g_t
 *
u8g
)

98 
u8g_d©a_p‹t
[0] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D0
]));

99 
u8g_d©a_mask
[0] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D0
]);

100 
u8g_d©a_p‹t
[1] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D1
]));

101 
u8g_d©a_mask
[1] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D1
]);

102 
u8g_d©a_p‹t
[2] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D2
]));

103 
u8g_d©a_mask
[2] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D2
]);

104 
u8g_d©a_p‹t
[3] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D3
]));

105 
u8g_d©a_mask
[3] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D3
]);

107 
u8g_d©a_p‹t
[4] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D4
]));

108 
u8g_d©a_mask
[4] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D4
]);

109 
u8g_d©a_p‹t
[5] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D5
]));

110 
u8g_d©a_mask
[5] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D5
]);

111 
u8g_d©a_p‹t
[6] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D6
]));

112 
u8g_d©a_mask
[6] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D6
]);

113 
u8g_d©a_p‹t
[7] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D7
]));

114 
u8g_d©a_mask
[7] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D7
]);

115 
	}
}

117 
	$u8g_com_¨duöo_Á°_wrôe_d©a_pö
(
uöt8_t
 
pö
, uöt8_à
vÆ
)

119 i‡–
vÆ
 != 0 )

120 *
u8g_d©a_p‹t
[
pö
] |
u8g_d©a_mask
[pin];

122 *
u8g_d©a_p‹t
[
pö
] &~
u8g_d©a_mask
[pin];

123 
	}
}

126 
	$u8g_com_¨duöo_Á°_∑øŒñ_wrôe
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

128 
	`u8g_com_¨duöo_Á°_wrôe_d©a_pö
–0, 
vÆ
&1 );

129 
vÆ
 >>= 1;

130 
	`u8g_com_¨duöo_Á°_wrôe_d©a_pö
–1, 
vÆ
&1 );

131 
vÆ
 >>= 1;

132 
	`u8g_com_¨duöo_Á°_wrôe_d©a_pö
–2, 
vÆ
&1 );

133 
vÆ
 >>= 1;

134 
	`u8g_com_¨duöo_Á°_wrôe_d©a_pö
–3, 
vÆ
&1 );

135 
vÆ
 >>= 1;

137 
	`u8g_com_¨duöo_Á°_wrôe_d©a_pö
–4, 
vÆ
&1 );

138 
vÆ
 >>= 1;

139 
	`u8g_com_¨duöo_Á°_wrôe_d©a_pö
–5, 
vÆ
&1 );

140 
vÆ
 >>= 1;

141 
	`u8g_com_¨duöo_Á°_wrôe_d©a_pö
–6, 
vÆ
&1 );

142 
vÆ
 >>= 1;

143 
	`u8g_com_¨duöo_Á°_wrôe_d©a_pö
–7, 
vÆ
&1 );

144 
vÆ
 >>= 1;

147 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_EN
, 
HIGH
);

148 
	`u8g_Mi¸oDñay
();

149 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_EN
, 
LOW
);

150 
	`u8g_10Mi¸oDñay
();

151 
	`u8g_10Mi¸oDñay
();

152 
	}
}

155 
uöt8_t
 
	$u8g_com_¨duöo_Á°_∑øŒñ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

157 
msg
)

159 
U8G_COM_MSG_INIT
:

160 
	`u8g_com_¨duöo_Á°_∑øŒñ_öô
(
u8g
);

162 i‡–
u8g
->
pö_li°
[
U8G_PI_RW
] !
U8G_PIN_NONE
 )

164 
	`pöMode
(
u8g
->
pö_li°
[
U8G_PI_RW
], 
OUTPUT
);

165 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RW
, 
LOW
);

168 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

170 
U8G_COM_MSG_STOP
:

173 
U8G_COM_MSG_CHIP_SELECT
:

174 i‡–
¨g_vÆ
 == 0 )

177 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
HIGH
);

178 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
HIGH
);

180 i‡–
¨g_vÆ
 == 1 )

183 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
LOW
);

184 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
HIGH
);

186 i‡–
¨g_vÆ
 == 2 )

189 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
HIGH
);

190 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
LOW
);

195 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
LOW
);

196 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
LOW
);

199 
U8G_COM_MSG_WRITE_BYTE
:

200 
	`u8g_com_¨duöo_Á°_∑øŒñ_wrôe
(
u8g
, 
¨g_vÆ
);

202 
U8G_COM_MSG_WRITE_SEQ
:

204 
uöt8_t
 *
±r
 = 
¨g_±r
;

205  
¨g_vÆ
 > 0 )

207 
	`u8g_com_¨duöo_Á°_∑øŒñ_wrôe
(
u8g
, *
±r
++);

208 
¨g_vÆ
--;

212 
U8G_COM_MSG_WRITE_SEQ_P
:

214 
uöt8_t
 *
±r
 = 
¨g_±r
;

215  
¨g_vÆ
 > 0 )

217 
	`u8g_com_¨duöo_Á°_∑øŒñ_wrôe
(
u8g
, 
	`u8g_pgm_ªad
(
±r
));

218 
±r
++;

219 
¨g_vÆ
--;

223 
U8G_COM_MSG_ADDRESS
:

224 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_DI
, 
¨g_vÆ
);

226 
U8G_COM_MSG_RESET
:

227 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

228 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

233 
	}
}

238 
uöt8_t
 
	$u8g_com_¨duöo_Á°_∑øŒñ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

241 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_arduino_hw_spi.c

37 
	~"u8g.h
"

39 #i‡
deföed
(
ARDUINO
)

41 #i‡
deföed
(
__AVR__
)

43 
	~<avr/öãºu±.h
>

44 
	~<avr/io.h
>

46 #i‡
ARDUINO
 < 100

47 
	~<WProgøm.h
>

50 #i‡
deföed
(
__AVR_ATmega644P__
Ë|| deföed(
__AVR_ATmega1284P__
)

51 
	#PIN_SCK
 7

	)

52 
	#PIN_MISO
 6

	)

53 
	#PIN_MOSI
 5

	)

54 
	#PIN_CS
 4

	)

56 
	#PIN_SCK
 13

	)

57 
	#PIN_MISO
 12

	)

58 
	#PIN_MOSI
 11

	)

59 
	#PIN_CS
 10

	)

64 
	~<Arduöo.h
>

67 
	#PIN_SCK
 
SCK


	)

68 
	#PIN_MISO
 
MISO


	)

69 
	#PIN_MOSI
 
MOSI


	)

70 
	#PIN_CS
 
SS


	)

77 
uöt8_t
 
	$u8g_•i_out
(
uöt8_t
 
d©a
)

81 
SPDR
 = 
d©a
;

83 !(
SPSR
 & (1<<
SPIF
)))

86  
SPDR
;

87 
	}
}

90 
uöt8_t
 
	$u8g_com_¨duöo_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

92 
msg
)

94 
U8G_COM_MSG_STOP
:

97 
U8G_COM_MSG_INIT
:

98 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

99 
	`pöMode
(
PIN_SCK
, 
OUTPUT
);

100 
	`digôÆWrôe
(
PIN_SCK
, 
LOW
);

101 
	`pöMode
(
PIN_MOSI
, 
OUTPUT
);

102 
	`digôÆWrôe
(
PIN_MOSI
, 
LOW
);

105 
	`pöMode
(
PIN_CS
, 
OUTPUT
);

106 
	`digôÆWrôe
(
PIN_CS
, 
HIGH
);

117 
SPCR
 = 0;

118 
SPCR
 = (1<<
SPE
Ë| (1<<
MSTR
)|(0<<
SPR1
)|(1<<
SPR0
)|(0<<
CPOL
)|(0<<
CPHA
);

119 #ifde‡
U8G_HW_SPI_2X


120 
SPSR
 = (1 << 
SPI2X
);

125 
U8G_COM_MSG_ADDRESS
:

126 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 
¨g_vÆ
);

129 
U8G_COM_MSG_CHIP_SELECT
:

130 i‡–
¨g_vÆ
 == 0 )

133 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
HIGH
);

138 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_SCK
, 
LOW
);

139 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
LOW
);

143 
U8G_COM_MSG_RESET
:

144 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

145 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

148 
U8G_COM_MSG_WRITE_BYTE
:

149 
	`u8g_•i_out
(
¨g_vÆ
);

152 
U8G_COM_MSG_WRITE_SEQ
:

154 
uöt8_t
 *
±r
 = 
¨g_±r
;

155  
¨g_vÆ
 > 0 )

157 
	`u8g_•i_out
(*
±r
++);

158 
¨g_vÆ
--;

162 
U8G_COM_MSG_WRITE_SEQ_P
:

164 
uöt8_t
 *
±r
 = 
¨g_±r
;

165  
¨g_vÆ
 > 0 )

167 
	`u8g_•i_out
(
	`u8g_pgm_ªad
(
±r
));

168 
±r
++;

169 
¨g_vÆ
--;

175 
	}
}

185 
uöt8_t
 
	$u8g_com_¨duöo_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

188 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_arduino_no_en_parallel.c

54 
	~"u8g.h
"

56 #i‡ 
deföed
(
ARDUINO
)

58 #i‡
ARDUINO
 < 100

60 
	~<wúög_¥iv©e.h
>

61 
	~<pös_¨duöo.h
>

63 
	~<Arduöo.h
>

68 #i‡
deföed
(
__PIC32MX
)

70 vﬁ©ûê
uöt32_t
 *
	gu8g_d©a_p‹t
[8];

71 
uöt32_t
 
	gu8g_d©a_mask
[8];

73 vﬁ©ûê
uöt8_t
 *
	gu8g_d©a_p‹t
[8];

74 
uöt8_t
 
	gu8g_d©a_mask
[8];

79 
	$u8g_com_¨duöo_no_í_∑øŒñ_öô
(
u8g_t
 *
u8g
)

81 
u8g_d©a_p‹t
[0] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D0
]));

82 
u8g_d©a_mask
[0] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D0
]);

83 
u8g_d©a_p‹t
[1] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D1
]));

84 
u8g_d©a_mask
[1] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D1
]);

85 
u8g_d©a_p‹t
[2] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D2
]));

86 
u8g_d©a_mask
[2] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D2
]);

87 
u8g_d©a_p‹t
[3] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D3
]));

88 
u8g_d©a_mask
[3] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D3
]);

90 
u8g_d©a_p‹t
[4] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D4
]));

91 
u8g_d©a_mask
[4] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D4
]);

92 
u8g_d©a_p‹t
[5] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D5
]));

93 
u8g_d©a_mask
[5] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D5
]);

94 
u8g_d©a_p‹t
[6] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D6
]));

95 
u8g_d©a_mask
[6] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D6
]);

96 
u8g_d©a_p‹t
[7] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D7
]));

97 
u8g_d©a_mask
[7] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D7
]);

98 
	}
}

100 
	$u8g_com_¨duöo_no_í_wrôe_d©a_pö
(
uöt8_t
 
pö
, uöt8_à
vÆ
)

102 i‡–
vÆ
 != 0 )

103 *
u8g_d©a_p‹t
[
pö
] |
u8g_d©a_mask
[pin];

105 *
u8g_d©a_p‹t
[
pö
] &~
u8g_d©a_mask
[pin];

106 
	}
}

109 
	$u8g_com_¨duöo_no_í_∑øŒñ_wrôe
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

111 
	`u8g_com_¨duöo_no_í_wrôe_d©a_pö
–0, 
vÆ
&1 );

112 
vÆ
 >>= 1;

113 
	`u8g_com_¨duöo_no_í_wrôe_d©a_pö
–1, 
vÆ
&1 );

114 
vÆ
 >>= 1;

115 
	`u8g_com_¨duöo_no_í_wrôe_d©a_pö
–2, 
vÆ
&1 );

116 
vÆ
 >>= 1;

117 
	`u8g_com_¨duöo_no_í_wrôe_d©a_pö
–3, 
vÆ
&1 );

118 
vÆ
 >>= 1;

120 
	`u8g_com_¨duöo_no_í_wrôe_d©a_pö
–4, 
vÆ
&1 );

121 
vÆ
 >>= 1;

122 
	`u8g_com_¨duöo_no_í_wrôe_d©a_pö
–5, 
vÆ
&1 );

123 
vÆ
 >>= 1;

124 
	`u8g_com_¨duöo_no_í_wrôe_d©a_pö
–6, 
vÆ
&1 );

125 
vÆ
 >>= 1;

126 
	`u8g_com_¨duöo_no_í_wrôe_d©a_pö
–7, 
vÆ
&1 );

127 
vÆ
 >>= 1;

130 i‡–
u8g
->
pö_li°
[
U8G_PI_CS_STATE
] == 1 )

132 
	`u8g_Mi¸oDñay
();

133 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
HIGH
);

134 
	`u8g_Mi¸oDñay
();

135 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
LOW
);

136 
	`u8g_Mi¸oDñay
();

138 i‡–
u8g
->
pö_li°
[
U8G_PI_CS_STATE
] == 2 )

140 
	`u8g_Mi¸oDñay
();

141 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
HIGH
);

142 
	`u8g_Mi¸oDñay
();

143 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
LOW
);

144 
	`u8g_Mi¸oDñay
();

146 
	}
}

149 
uöt8_t
 
	$u8g_com_¨duöo_no_í_∑øŒñ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

151 
msg
)

153 
U8G_COM_MSG_INIT
:

154 
	`u8g_com_¨duöo_no_í_∑øŒñ_öô
(
u8g
);

156 i‡–
u8g
->
pö_li°
[
U8G_PI_RW
] !
U8G_PIN_NONE
 )

158 
	`pöMode
(
u8g
->
pö_li°
[
U8G_PI_RW
], 
OUTPUT
);

159 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RW
, 
LOW
);

162 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

164 
U8G_COM_MSG_STOP
:

167 
U8G_COM_MSG_CHIP_SELECT
:

174 
u8g
->
pö_li°
[
U8G_PI_CS_STATE
] = 
¨g_vÆ
;

176 
U8G_COM_MSG_WRITE_BYTE
:

177 
	`u8g_com_¨duöo_no_í_∑øŒñ_wrôe
(
u8g
, 
¨g_vÆ
);

179 
U8G_COM_MSG_WRITE_SEQ
:

181 
uöt8_t
 *
±r
 = 
¨g_±r
;

182  
¨g_vÆ
 > 0 )

184 
	`u8g_com_¨duöo_no_í_∑øŒñ_wrôe
(
u8g
, *
±r
++);

185 
¨g_vÆ
--;

189 
U8G_COM_MSG_WRITE_SEQ_P
:

191 
uöt8_t
 *
±r
 = 
¨g_±r
;

192  
¨g_vÆ
 > 0 )

194 
	`u8g_com_¨duöo_no_í_∑øŒñ_wrôe
(
u8g
, 
	`u8g_pgm_ªad
(
±r
));

195 
±r
++;

196 
¨g_vÆ
--;

200 
U8G_COM_MSG_ADDRESS
:

201 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_DI
, 
¨g_vÆ
);

203 
U8G_COM_MSG_RESET
:

204 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

205 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

209 
	}
}

214 
uöt8_t
 
	$u8g_com_¨duöo_no_í_∑øŒñ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

217 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_arduino_parallel.c

55 
	~"u8g.h
"

58 #i‡ 
deföed
(
ARDUINO
)

60 #i‡
ARDUINO
 < 100

61 
	~<WProgøm.h
>

63 
	~<Arduöo.h
>

71 
	$u8g_com_¨duöo_∑øŒñ_wrôe
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

73 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_D0
, 
vÆ
&1);

74 
vÆ
 >>= 1;

75 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_D1
, 
vÆ
&1);

76 
vÆ
 >>= 1;

77 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_D2
, 
vÆ
&1);

78 
vÆ
 >>= 1;

79 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_D3
, 
vÆ
&1);

80 
vÆ
 >>= 1;

81 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_D4
, 
vÆ
&1);

82 
vÆ
 >>= 1;

83 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_D5
, 
vÆ
&1);

84 
vÆ
 >>= 1;

85 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_D6
, 
vÆ
&1);

86 
vÆ
 >>= 1;

87 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_D7
, 
vÆ
&1);

91 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_EN
, 
HIGH
);

93 
	`u8g_Mi¸oDñay
();

94 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_EN
, 
LOW
);

95 
	`u8g_10Mi¸oDñay
();

97 
	}
}

100 
uöt8_t
 
	$u8g_com_¨duöo_∑øŒñ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

102 
msg
)

104 
U8G_COM_MSG_INIT
:

106 i‡–
u8g
->
pö_li°
[
U8G_PI_RW
] !
U8G_PIN_NONE
 )

108 
	`pöMode
(
u8g
->
pö_li°
[
U8G_PI_RW
], 
OUTPUT
);

109 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RW
, 
LOW
);

112 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

114 
U8G_COM_MSG_STOP
:

116 
U8G_COM_MSG_CHIP_SELECT
:

117 i‡–
¨g_vÆ
 == 0 )

120 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
HIGH
);

121 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
HIGH
);

123 i‡–
¨g_vÆ
 == 1 )

126 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
LOW
);

127 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
HIGH
);

129 i‡–
¨g_vÆ
 == 2 )

132 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
HIGH
);

133 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
LOW
);

138 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
LOW
);

139 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
LOW
);

142 
U8G_COM_MSG_WRITE_BYTE
:

143 
	`u8g_com_¨duöo_∑øŒñ_wrôe
(
u8g
, 
¨g_vÆ
);

145 
U8G_COM_MSG_WRITE_SEQ
:

147 
uöt8_t
 *
±r
 = 
¨g_±r
;

148  
¨g_vÆ
 > 0 )

150 
	`u8g_com_¨duöo_∑øŒñ_wrôe
(
u8g
, *
±r
++);

151 
¨g_vÆ
--;

155 
U8G_COM_MSG_WRITE_SEQ_P
:

157 
uöt8_t
 *
±r
 = 
¨g_±r
;

158  
¨g_vÆ
 > 0 )

160 
	`u8g_com_¨duöo_∑øŒñ_wrôe
(
u8g
, 
	`u8g_pgm_ªad
(
±r
));

161 
±r
++;

162 
¨g_vÆ
--;

166 
U8G_COM_MSG_ADDRESS
:

167 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_DI
, 
¨g_vÆ
);

169 
U8G_COM_MSG_RESET
:

170 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

171 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

176 
	}
}

181 
uöt8_t
 
	$u8g_com_¨duöo_∑øŒñ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

184 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_arduino_port_d_wr.c

47 
	~"u8g.h
"

50 #i‡ 
deföed
(
ARDUINO
Ë&& deföed(
PORTD
)

52 #i‡
ARDUINO
 < 100

53 
	~<WProgøm.h
>

55 
	~<Arduöo.h
>

63 
	$u8g_com_¨duöo_p‹t_d_8bô_wr
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

65 
PORTD
 = 
vÆ
;

68 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_EN
, 
LOW
);

69 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_EN
, 
HIGH
);

70 
	}
}

73 
uöt8_t
 
	$u8g_com_¨duöo_p‹t_d_wr_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

76 
msg
)

78 
U8G_COM_MSG_INIT
:

80 #ifde‡
UCSR0B


81 
UCSR0B
 = 0;

83 
DDRD
 = 0x0ff;

84 
PORTD
 = 0x0ff;

87 i‡–
u8g
->
pö_li°
[
U8G_PI_RW
] !
U8G_PIN_NONE
 )

89 
	`pöMode
(
u8g
->
pö_li°
[
U8G_PI_RW
], 
OUTPUT
);

90 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RW
, 
HIGH
);

93 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

94 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_EN
, 
HIGH
);

96 
U8G_COM_MSG_STOP
:

98 
U8G_COM_MSG_CHIP_SELECT
:

99 i‡–
¨g_vÆ
 == 0 )

102 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
HIGH
);

103 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
HIGH
);

105 i‡–
¨g_vÆ
 == 1 )

108 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
LOW
);

109 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
HIGH
);

111 i‡–
¨g_vÆ
 == 2 )

114 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
HIGH
);

115 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
LOW
);

120 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS1
, 
LOW
);

121 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS2
, 
LOW
);

124 
U8G_COM_MSG_WRITE_BYTE
:

125 
	`u8g_com_¨duöo_p‹t_d_8bô_wr
(
u8g
, 
¨g_vÆ
);

127 
U8G_COM_MSG_WRITE_SEQ
:

129 
uöt8_t
 *
±r
 = 
¨g_±r
;

130  
¨g_vÆ
 > 0 )

132 
	`u8g_com_¨duöo_p‹t_d_8bô_wr
(
u8g
, *
±r
++);

133 
¨g_vÆ
--;

137 
U8G_COM_MSG_WRITE_SEQ_P
:

139 
uöt8_t
 *
±r
 = 
¨g_±r
;

140  
¨g_vÆ
 > 0 )

142 
	`u8g_com_¨duöo_p‹t_d_8bô_wr
(
u8g
, 
	`u8g_pgm_ªad
(
±r
));

143 
±r
++;

144 
¨g_vÆ
--;

148 
U8G_COM_MSG_ADDRESS
:

149 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_DI
, 
¨g_vÆ
);

151 
U8G_COM_MSG_RESET
:

152 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

153 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

157 
	}
}

162 
uöt8_t
 
	$u8g_com_¨duöo_p‹t_d_wr_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

165 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_arduino_ssd_i2c.c

55 
	~"u8g.h
"

57 
	#I2C_SLA
 (0x3c*2)

	)

59 
	#I2C_CMD_MODE
 0x000

	)

60 
	#I2C_DATA_MODE
 0x040

	)

63 
uöt8_t
 
	$u8g_com_¨duöo_ssd_°¨t_£quí˚
(
u8g_t
 *
u8g
)

66 i‡–
u8g
->
pö_li°
[
U8G_PI_SET_A0
] == 0 )

70 i‡–
	`u8g_i2c_°¨t
(
I2C_SLA
) == 0 )

72 i‡–
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] == 0 )

74 i‡–
	`u8g_i2c_£nd_byã
(
I2C_CMD_MODE
) == 0 )

79 i‡–
	`u8g_i2c_£nd_byã
(
I2C_DATA_MODE
) == 0 )

84 
u8g
->
pö_li°
[
U8G_PI_SET_A0
] = 0;

86 
	}
}

88 
uöt8_t
 
	$u8g_com_¨duöo_ssd_i2c_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

90 
msg
)

92 
U8G_COM_MSG_INIT
:

97 
	`u8g_i2c_öô
(
u8g
->
pö_li°
[
U8G_PI_I2C_OPTION
]);

101 
U8G_COM_MSG_STOP
:

104 
U8G_COM_MSG_RESET
:

109 
U8G_COM_MSG_CHIP_SELECT
:

110 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 0;

111 
u8g
->
pö_li°
[
U8G_PI_SET_A0
] = 1;

112 i‡–
¨g_vÆ
 == 0 )

115 
	`u8g_i2c_°›
();

123 
U8G_COM_MSG_WRITE_BYTE
:

125 i‡–
	`u8g_com_¨duöo_ssd_°¨t_£quí˚
(
u8g
) == 0 )

126  
	`u8g_i2c_°›
(), 0;

127 i‡–
	`u8g_i2c_£nd_byã
(
¨g_vÆ
) == 0 )

128  
	`u8g_i2c_°›
(), 0;

132 
U8G_COM_MSG_WRITE_SEQ
:

134 i‡–
	`u8g_com_¨duöo_ssd_°¨t_£quí˚
(
u8g
) == 0 )

135  
	`u8g_i2c_°›
(), 0;

137 
uöt8_t
 *
±r
 = 
¨g_±r
;

138  
¨g_vÆ
 > 0 )

140 i‡–
	`u8g_i2c_£nd_byã
(*
±r
++) == 0 )

141  
	`u8g_i2c_°›
(), 0;

142 
¨g_vÆ
--;

148 
U8G_COM_MSG_WRITE_SEQ_P
:

150 i‡–
	`u8g_com_¨duöo_ssd_°¨t_£quí˚
(
u8g
) == 0 )

151  
	`u8g_i2c_°›
(), 0;

153 
uöt8_t
 *
±r
 = 
¨g_±r
;

154  
¨g_vÆ
 > 0 )

156 i‡–
	`u8g_i2c_£nd_byã
(
	`u8g_pgm_ªad
(
±r
)) == 0 )

158 
±r
++;

159 
¨g_vÆ
--;

165 
U8G_COM_MSG_ADDRESS
:

166 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 
¨g_vÆ
;

167 
u8g
->
pö_li°
[
U8G_PI_SET_A0
] = 1;

169 #ifde‡
OLD_CODE


170 i‡–
i2c_°©e
 != 0 )

172 
	`u8g_i2c_°›
();

173 
i2c_°©e
 = 0;

176 i‡–
	`u8g_com_¨duöo_ssd_°¨t_£quí˚
(
¨g_vÆ
) == 0 )

201 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_arduino_st7920_hw_spi.c

38 
	~"u8g.h
"

40 #i‡
deföed
(
ARDUINO
)

42 #i‡
ARDUINO
 < 100

43 
	~<WProgøm.h
>

44 
	~"wúög_¥iv©e.h
"

45 
	~"pös_¨duöo.h
"

48 
	~<Arduöo.h
>

49 
	~"wúög_¥iv©e.h
"

52 #i‡
deföed
(
__AVR__
)

53 
	#U8G_ARDUINO_ATMEGA_HW_SPI


	)

56 #i‡
__AVR_ARCH__
 == 2

57 #unde‡
U8G_ATMEGA_HW_SPI


59 #i‡
__AVR_ARCH__
 == 25

60 #unde‡
U8G_ATMEGA_HW_SPI


66 #i‡
deföed
(
U8G_ARDUINO_ATMEGA_HW_SPI
)

68 
	~<avr/öãºu±.h
>

69 
	~<avr/io.h
>

71 
uöt8_t
 
	$u8g_¨duöo_°7920_hw_•i_shi·_out
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
Ë
U8G_NOINLINE
;

72 
uöt8_t
 
	$u8g_¨duöo_°7920_hw_•i_shi·_out
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

75 
SPDR
 = 
vÆ
;

77 !(
SPSR
 & (1<<
SPIF
)))

80  
SPDR
;

81 
	}
}

84 
	$u8g_com_¨duöo_°7920_wrôe_byã_hw_•i
(
u8g_t
 *
u8g
, 
uöt8_t
 
rs
, uöt8_à
vÆ
Ë
U8G_NOINLINE
;

85 
	$u8g_com_¨duöo_°7920_wrôe_byã_hw_•i
(
u8g_t
 *
u8g
, 
uöt8_t
 
rs
, uöt8_à
vÆ
)

87 
uöt8_t
 
i
;

89 i‡–
rs
 == 0 )

92 
	`u8g_¨duöo_°7920_hw_•i_shi·_out
(
u8g
, 0x0f8);

94 i‡–
rs
 == 1 )

97 
	`u8g_¨duöo_°7920_hw_•i_shi·_out
(
u8g
, 0x0fa);

104 
	`u8g_¨duöo_°7920_hw_•i_shi·_out
(
u8g
, 
vÆ
 & 0x0f0);

105 
	`u8g_¨duöo_°7920_hw_•i_shi·_out
(
u8g
, 
vÆ
 << 4);

107  
i
 = 0; i < 4; i++ )

108 
	`u8g_10Mi¸oDñay
();

109 
	}
}

112 
uöt8_t
 
	$u8g_com_¨duöo_°7920_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

114 
msg
)

116 
U8G_COM_MSG_INIT
:

117 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

118 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
LOW
);

120 
DDRB
 |
	`_BV
(3);

121 
DDRB
 |
	`_BV
(5);

122 
DDRB
 |
	`_BV
(2);

124 
PORTB
 &~
	`_BV
(3);

125 
PORTB
 &~
	`_BV
(5);

134 
SPCR
 = 0;

137 
SPCR
 = (1<<
SPE
Ë| (1<<
MSTR
)|(0<<
SPR1
)|(0<<
SPR0
)|(1<<
CPOL
)|(1<<
CPHA
);

138 #ifde‡
U8G_HW_SPI_2X


139 
SPSR
 = (1 << 
SPI2X
);

141 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 0;

144 
U8G_COM_MSG_STOP
:

147 
U8G_COM_MSG_RESET
:

148 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

149 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

152 
U8G_COM_MSG_CHIP_SELECT
:

153 i‡–
¨g_vÆ
 == 0 )

156 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
LOW
);

162 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
HIGH
);

166 
U8G_COM_MSG_WRITE_BYTE
:

167 
	`u8g_com_¨duöo_°7920_wrôe_byã_hw_•i
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], 
¨g_vÆ
);

172 
U8G_COM_MSG_WRITE_SEQ
:

174 
uöt8_t
 *
±r
 = 
¨g_±r
;

175  
¨g_vÆ
 > 0 )

177 
	`u8g_com_¨duöo_°7920_wrôe_byã_hw_•i
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], *
±r
++);

179 
¨g_vÆ
--;

184 
U8G_COM_MSG_WRITE_SEQ_P
:

186 
uöt8_t
 *
±r
 = 
¨g_±r
;

187  
¨g_vÆ
 > 0 )

189 
	`u8g_com_¨duöo_°7920_wrôe_byã_hw_•i
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], 
	`u8g_pgm_ªad
(
±r
) );

191 
±r
++;

192 
¨g_vÆ
--;

197 
U8G_COM_MSG_ADDRESS
:

198 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 
¨g_vÆ
;

202 
	}
}

206 
uöt8_t
 
	$u8g_com_¨duöo_°7920_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

209 
	}
}

214 
uöt8_t
 
	$u8g_com_¨duöo_°7920_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

217 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_arduino_st7920_spi.c

38 
	~"u8g.h
"

40 #i‡
deföed
(
ARDUINO
)

42 #i‡
ARDUINO
 < 100

43 
	~<WProgøm.h
>

44 
	~"wúög_¥iv©e.h
"

45 
	~"pös_¨duöo.h
"

48 
	~<Arduöo.h
>

49 
	~"wúög_¥iv©e.h
"

52 #i‡
deföed
(
__AVR__
)

54 
uöt8_t
 
	gu8g_bôD©a
, 
	gu8g_bôNŸD©a
;

55 
uöt8_t
 
	gu8g_bôClock
, 
	gu8g_bôNŸClock
;

56 vﬁ©ûê
uöt8_t
 *
	gu8g_outD©a
;

57 vﬁ©ûê
uöt8_t
 *
	gu8g_outClock
;

59 
	$u8g_com_¨duöo_öô_shi·_out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
)

61 
u8g_outD©a
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
d©aPö
));

62 
u8g_outClock
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
˛ockPö
));

63 
u8g_bôD©a
 = 
	`digôÆPöToBôMask
(
d©aPö
);

64 
u8g_bôClock
 = 
	`digôÆPöToBôMask
(
˛ockPö
);

66 
u8g_bôNŸClock
 = 
u8g_bôClock
;

67 
u8g_bôNŸClock
 ^= 0x0ff;

69 
u8g_bôNŸD©a
 = 
u8g_bôD©a
;

70 
u8g_bôNŸD©a
 ^= 0x0ff;

71 
	}
}

73 
	$u8g_com_¨duöo_do_shi·_out_msb_fú°
(
uöt8_t
 
vÆ
Ë
U8G_NOINLINE
;

74 
	$u8g_com_¨duöo_do_shi·_out_msb_fú°
(
uöt8_t
 
vÆ
)

76 
uöt8_t
 
˙t
 = 8;

77 
uöt8_t
 
bôD©a
 = 
u8g_bôD©a
;

78 
uöt8_t
 
bôNŸD©a
 = 
u8g_bôNŸD©a
;

79 
uöt8_t
 
bôClock
 = 
u8g_bôClock
;

80 
uöt8_t
 
bôNŸClock
 = 
u8g_bôNŸClock
;

81 vﬁ©ûê
uöt8_t
 *
outD©a
 = 
u8g_outD©a
;

82 vﬁ©ûê
uöt8_t
 *
outClock
 = 
u8g_outClock
;

85 i‡–
vÆ
 & 128 )

86 *
outD©a
 |
bôD©a
;

88 *
outD©a
 &
bôNŸD©a
;

97 
vÆ
 <<= 1;

98 *
outClock
 &
bôNŸClock
;

99 
˙t
--;

102 *
outClock
 |
bôClock
;

104 }  
˙t
 != 0 );

105 
	}
}

107 #ñi‡
deföed
(
__18CXX
Ë|| deföed(
__PIC32MX
)

109 
uöt16_t
 
	gdog_bôD©a
, 
	gdog_bôNŸD©a
;

110 
uöt16_t
 
	gdog_bôClock
, 
	gdog_bôNŸClock
;

111 vﬁ©ûê
uöt32_t
 *
	gdog_outD©a
;

112 vﬁ©ûê
uöt32_t
 *
	gdog_outClock
;

113 vﬁ©ûê
uöt32_t
 
	gdog_pic32_•i_tmp
;

115 
	$u8g_com_¨duöo_öô_shi·_out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
)

117 
dog_outD©a
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
d©aPö
));

118 
dog_outClock
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
˛ockPö
));

119 
dog_bôD©a
 = 
	`digôÆPöToBôMask
(
d©aPö
);

120 
dog_bôClock
 = 
	`digôÆPöToBôMask
(
˛ockPö
);

122 
dog_bôNŸClock
 = 
dog_bôClock
;

123 
dog_bôNŸClock
 ^= 0x0ffff;

125 
dog_bôNŸD©a
 = 
dog_bôD©a
;

126 
dog_bôNŸD©a
 ^= 0x0ffff;

127 
	}
}

129 
	$u8g_com_¨duöo_do_shi·_out_msb_fú°
(
uöt8_t
 
vÆ
)

131 
uöt8_t
 
˙t
 = 8;

134 i‡–
vÆ
 & 128 )

135 *
dog_outD©a
 |
dog_bôD©a
;

137 *
dog_outD©a
 &
dog_bôNŸD©a
;

138 
vÆ
 <<= 1;

141 *
dog_outClock
 &
dog_bôNŸClock
;

142 
˙t
--;

143 
	`u8g_Mi¸oDñay
();

145 *
dog_outClock
 |
dog_bôClock
;

146 
	`u8g_Mi¸oDñay
();

148 }  
˙t
 != 0 );

149 
	}
}

155 
uöt8_t
 
	gu8g_d©a_pö
;

156 
uöt8_t
 
	gu8g_˛ock_pö
;

158 
	$u8g_com_¨duöo_öô_shi·_out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
)

160 
u8g_d©a_pö
 = 
d©aPö
;

161 
u8g_˛ock_pö
 = 
˛ockPö
;

162 
	}
}

164 
	$u8g_com_¨duöo_do_shi·_out_msb_fú°
(
uöt8_t
 
vÆ
)

166 
uöt8_t
 
˙t
 = 8;

169 i‡–
vÆ
 & 128 )

170 
	`digôÆWrôe
(
u8g_d©a_pö
, 
HIGH
);

172 
	`digôÆWrôe
(
u8g_d©a_pö
, 
LOW
);

173 
vÆ
 <<= 1;

175 
	`digôÆWrôe
(
u8g_˛ock_pö
, 
LOW
);

176 
˙t
--;

177 
	`u8g_Mi¸oDñay
();

178 
	`digôÆWrôe
(
u8g_˛ock_pö
, 
HIGH
);

179 
	`u8g_Mi¸oDñay
();

180 }  
˙t
 != 0 );

181 
	}
}

188 
	$u8g_com_¨duöo_°7920_wrôe_byã
(
uöt8_t
 
rs
, uöt8_à
vÆ
)

190 
uöt8_t
 
i
;

192 i‡–
rs
 == 0 )

195 
	`u8g_com_¨duöo_do_shi·_out_msb_fú°
(0x0f8);

197 i‡–
rs
 == 1 )

200 
	`u8g_com_¨duöo_do_shi·_out_msb_fú°
(0x0fa);

203 
	`u8g_com_¨duöo_do_shi·_out_msb_fú°
(
vÆ
 & 0x0f0);

204 
	`u8g_com_¨duöo_do_shi·_out_msb_fú°
(
vÆ
 << 4);

206  
i
 = 0; i < 4; i++ )

207 
	`u8g_10Mi¸oDñay
();

209 
	}
}

213 
uöt8_t
 
	$u8g_com_¨duöo_°7920_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

215 
msg
)

217 
U8G_COM_MSG_INIT
:

218 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

219 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
LOW
);

221 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_SCK
, 
HIGH
);

222 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_MOSI
, 
LOW
);

223 
	`u8g_com_¨duöo_öô_shi·_out
(
u8g
->
pö_li°
[
U8G_PI_MOSI
], u8g->pö_li°[
U8G_PI_SCK
]);

224 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 0;

227 
U8G_COM_MSG_STOP
:

230 
U8G_COM_MSG_RESET
:

231 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

232 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

235 
U8G_COM_MSG_CHIP_SELECT
:

236 i‡–
¨g_vÆ
 == 0 )

239 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
LOW
);

245 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
HIGH
);

249 
U8G_COM_MSG_WRITE_BYTE
:

250 
	`u8g_com_¨duöo_°7920_wrôe_byã
–
u8g
->
pö_li°
[
U8G_PI_A0_STATE
], 
¨g_vÆ
);

255 
U8G_COM_MSG_WRITE_SEQ
:

257 
uöt8_t
 *
±r
 = 
¨g_±r
;

258  
¨g_vÆ
 > 0 )

260 
	`u8g_com_¨duöo_°7920_wrôe_byã
(
u8g
->
pö_li°
[
U8G_PI_A0_STATE
], *
±r
++);

262 
¨g_vÆ
--;

267 
U8G_COM_MSG_WRITE_SEQ_P
:

269 
uöt8_t
 *
±r
 = 
¨g_±r
;

270  
¨g_vÆ
 > 0 )

272 
	`u8g_com_¨duöo_°7920_wrôe_byã
(
u8g
->
pö_li°
[
U8G_PI_A0_STATE
], 
	`u8g_pgm_ªad
(
±r
) );

274 
±r
++;

275 
¨g_vÆ
--;

280 
U8G_COM_MSG_ADDRESS
:

281 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 
¨g_vÆ
;

285 
	}
}

289 
uöt8_t
 
	$u8g_com_¨duöo_°7920_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

292 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_arduino_std_sw_spi.c

37 
	~"u8g.h
"

40 #i‡
deföed
(
ARDUINO
)

42 #i‡
ARDUINO
 < 100

43 
	~<WProgøm.h
>

45 
	~<Arduöo.h
>

48 
	$u8g_¨duöo_sw_•i_shi·_out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
vÆ
)

50 
uöt8_t
 
i
 = 8;

53 i‡–
vÆ
 & 128 )

54 
	`digôÆWrôe
(
d©aPö
, 
HIGH
);

56 
	`digôÆWrôe
(
d©aPö
, 
LOW
);

57 
vÆ
 <<= 1;

58 
	`u8g_Mi¸oDñay
();

60 
	`digôÆWrôe
(
˛ockPö
, 
HIGH
);

61 
	`u8g_Mi¸oDñay
();

63 
	`digôÆWrôe
(
˛ockPö
, 
LOW
);

64 
	`u8g_Mi¸oDñay
();

66 
i
--;

67 }  
i
 != 0 );

68 
	}
}

70 
uöt8_t
 
	$u8g_com_¨duöo_°d_sw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

72 
msg
)

74 
U8G_COM_MSG_INIT
:

75 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

76 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_SCK
, 
LOW
);

77 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_MOSI
, 
LOW
);

80 
U8G_COM_MSG_STOP
:

83 
U8G_COM_MSG_RESET
:

84 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

85 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

88 
U8G_COM_MSG_CHIP_SELECT
:

89 i‡–
¨g_vÆ
 == 0 )

92 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
HIGH
);

97 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_SCK
, 
LOW
);

98 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
LOW
);

102 
U8G_COM_MSG_WRITE_BYTE
:

103 
	`u8g_¨duöo_sw_•i_shi·_out
(
u8g
->
pö_li°
[
U8G_PI_MOSI
], u8g->pö_li°[
U8G_PI_SCK
], 
¨g_vÆ
);

106 
U8G_COM_MSG_WRITE_SEQ
:

108 
uöt8_t
 *
±r
 = 
¨g_±r
;

109  
¨g_vÆ
 > 0 )

111 
	`u8g_¨duöo_sw_•i_shi·_out
(
u8g
->
pö_li°
[
U8G_PI_MOSI
], u8g->pö_li°[
U8G_PI_SCK
], *
±r
++);

112 
¨g_vÆ
--;

117 
U8G_COM_MSG_WRITE_SEQ_P
:

119 
uöt8_t
 *
±r
 = 
¨g_±r
;

120  
¨g_vÆ
 > 0 )

122 
	`u8g_¨duöo_sw_•i_shi·_out
(
u8g
->
pö_li°
[
U8G_PI_MOSI
], u8g->pö_li°[
U8G_PI_SCK
], 
	`u8g_pgm_ªad
(
±r
));

123 
±r
++;

124 
¨g_vÆ
--;

129 
U8G_COM_MSG_ADDRESS
:

130 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 
¨g_vÆ
);

134 
	}
}

138 
uöt8_t
 
	$u8g_com_¨duöo_°d_sw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

141 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_arduino_sw_spi.c

37 
	~"u8g.h
"

39 #i‡
deföed
(
ARDUINO
)

41 #i‡
ARDUINO
 < 100

42 
	~<WProgøm.h
>

43 
	~"wúög_¥iv©e.h
"

44 
	~"pös_¨duöo.h
"

47 
	~<Arduöo.h
>

48 
	~"wúög_¥iv©e.h
"

51 #i‡
deföed
(
__AVR__
)

53 
uöt8_t
 
	gu8g_bôD©a
, 
	gu8g_bôNŸD©a
;

54 
uöt8_t
 
	gu8g_bôClock
, 
	gu8g_bôNŸClock
;

55 vﬁ©ûê
uöt8_t
 *
	gu8g_outD©a
;

56 vﬁ©ûê
uöt8_t
 *
	gu8g_outClock
;

58 
	$u8g_com_¨duöo_öô_shi·_out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
)

60 
u8g_outD©a
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
d©aPö
));

61 
u8g_outClock
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
˛ockPö
));

62 
u8g_bôD©a
 = 
	`digôÆPöToBôMask
(
d©aPö
);

63 
u8g_bôClock
 = 
	`digôÆPöToBôMask
(
˛ockPö
);

65 
u8g_bôNŸClock
 = 
u8g_bôClock
;

66 
u8g_bôNŸClock
 ^= 0x0ff;

68 
u8g_bôNŸD©a
 = 
u8g_bôD©a
;

69 
u8g_bôNŸD©a
 ^= 0x0ff;

70 
	}
}

72 
	$u8g_com_¨duöo_do_shi·_out_msb_fú°
(
uöt8_t
 
vÆ
Ë
U8G_NOINLINE
;

73 
	$u8g_com_¨duöo_do_shi·_out_msb_fú°
(
uöt8_t
 
vÆ
)

75 
uöt8_t
 
˙t
 = 8;

76 
uöt8_t
 
bôD©a
 = 
u8g_bôD©a
;

77 
uöt8_t
 
bôNŸD©a
 = 
u8g_bôNŸD©a
;

78 
uöt8_t
 
bôClock
 = 
u8g_bôClock
;

79 
uöt8_t
 
bôNŸClock
 = 
u8g_bôNŸClock
;

80 vﬁ©ûê
uöt8_t
 *
outD©a
 = 
u8g_outD©a
;

81 vﬁ©ûê
uöt8_t
 *
outClock
 = 
u8g_outClock
;

84 i‡–
vÆ
 & 128 )

85 *
outD©a
 |
bôD©a
;

87 *
outD©a
 &
bôNŸD©a
;

89 *
outClock
 |
bôClock
;

90 
vÆ
 <<= 1;

91 
˙t
--;

92 *
outClock
 &
bôNŸClock
;

93 }  
˙t
 != 0 );

94 
	}
}

96 #ñi‡
deföed
(
__18CXX
Ë|| deföed(
__PIC32MX
)

98 
uöt16_t
 
	gdog_bôD©a
, 
	gdog_bôNŸD©a
;

99 
uöt16_t
 
	gdog_bôClock
, 
	gdog_bôNŸClock
;

100 vﬁ©ûê
uöt32_t
 *
	gdog_outD©a
;

101 vﬁ©ûê
uöt32_t
 *
	gdog_outClock
;

102 vﬁ©ûê
uöt32_t
 
	gdog_pic32_•i_tmp
;

104 
	$u8g_com_¨duöo_öô_shi·_out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
)

106 
dog_outD©a
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
d©aPö
));

107 
dog_outClock
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
˛ockPö
));

108 
dog_bôD©a
 = 
	`digôÆPöToBôMask
(
d©aPö
);

109 
dog_bôClock
 = 
	`digôÆPöToBôMask
(
˛ockPö
);

111 
dog_bôNŸClock
 = 
dog_bôClock
;

112 
dog_bôNŸClock
 ^= 0x0ffff;

114 
dog_bôNŸD©a
 = 
dog_bôD©a
;

115 
dog_bôNŸD©a
 ^= 0x0ffff;

116 
	}
}

118 
	$u8g_com_¨duöo_do_shi·_out_msb_fú°
(
uöt8_t
 
vÆ
)

120 
uöt8_t
 
˙t
 = 8;

123 i‡–
vÆ
 & 128 )

124 *
dog_outD©a
 |
dog_bôD©a
;

126 *
dog_outD©a
 &
dog_bôNŸD©a
;

127 
vÆ
 <<= 1;

134 *
dog_outClock
 |
dog_bôClock
;

135 
˙t
--;

136 *
dog_outClock
 &
dog_bôNŸClock
;

141 
dog_pic32_•i_tmp
 = *
dog_outClock
;

142 
dog_pic32_•i_tmp
 = *
dog_outClock
;

143 
dog_pic32_•i_tmp
 = *
dog_outClock
;

144 }  
˙t
 != 0 );

145 
	}
}

150 
	$u8g_com_¨duöo_öô_shi·_out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
)

152 
	}
}

154 
	$u8g_com_¨duöo_do_shi·_out_msb_fú°
(
uöt8_t
 
vÆ
)

156 
	}
}

161 
uöt8_t
 
	$u8g_com_¨duöo_sw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

163 
msg
)

165 
U8G_COM_MSG_INIT
:

166 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

167 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_SCK
, 
LOW
);

168 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_MOSI
, 
LOW
);

169 
	`u8g_com_¨duöo_öô_shi·_out
(
u8g
->
pö_li°
[
U8G_PI_MOSI
], u8g->pö_li°[
U8G_PI_SCK
]);

172 
U8G_COM_MSG_STOP
:

175 
U8G_COM_MSG_RESET
:

176 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

177 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

180 
U8G_COM_MSG_CHIP_SELECT
:

181 i‡–
¨g_vÆ
 == 0 )

184 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
HIGH
);

189 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_SCK
, 
LOW
);

190 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
LOW
);

194 
U8G_COM_MSG_WRITE_BYTE
:

195 
	`u8g_com_¨duöo_do_shi·_out_msb_fú°
–
¨g_vÆ
 );

199 
U8G_COM_MSG_WRITE_SEQ
:

201 
uöt8_t
 *
±r
 = 
¨g_±r
;

202  
¨g_vÆ
 > 0 )

204 
	`u8g_com_¨duöo_do_shi·_out_msb_fú°
(*
±r
++);

206 
¨g_vÆ
--;

211 
U8G_COM_MSG_WRITE_SEQ_P
:

213 
uöt8_t
 *
±r
 = 
¨g_±r
;

214  
¨g_vÆ
 > 0 )

216 
	`u8g_com_¨duöo_do_shi·_out_msb_fú°
–
	`u8g_pgm_ªad
(
±r
) );

218 
±r
++;

219 
¨g_vÆ
--;

224 
U8G_COM_MSG_ADDRESS
:

225 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 
¨g_vÆ
);

229 
	}
}

233 
uöt8_t
 
	$u8g_com_¨duöo_sw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

236 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_arduino_t6963.c

55 
	~"u8g.h
"

57 #i‡ 
deföed
(
ARDUINO
)

59 #i‡
ARDUINO
 < 100

61 
	~<wúög_¥iv©e.h
>

62 
	~<pös_¨duöo.h
>

64 
	~<Arduöo.h
>

68 #i‡
deföed
(
__PIC32MX
)

70 vﬁ©ûê
uöt32_t
 *
	gu8g_ouçut_d©a_p‹t
[8];

71 vﬁ©ûê
uöt32_t
 *
	gu8g_öput_d©a_p‹t
[8];

72 vﬁ©ûê
uöt32_t
 *
	gu8g_mode_p‹t
[8];

73 
uöt32_t
 
	gu8g_d©a_mask
[8];

75 vﬁ©ûê
uöt8_t
 *
	gu8g_ouçut_d©a_p‹t
[8];

76 vﬁ©ûê
uöt8_t
 *
	gu8g_öput_d©a_p‹t
[8];

77 vﬁ©ûê
uöt8_t
 *
	gu8g_mode_p‹t
[8];

78 
uöt8_t
 
	gu8g_d©a_mask
[8];

83 
	$u8g_com_¨duöo_t6963_öô
(
u8g_t
 *
u8g
)

85 
u8g_ouçut_d©a_p‹t
[0] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D0
]));

86 
u8g_öput_d©a_p‹t
[0] = 
	`p‹tI≈utRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D0
]));

87 
u8g_mode_p‹t
[0] = 
	`p‹tModeRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D0
]));

88 
u8g_d©a_mask
[0] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D0
]);

90 
u8g_ouçut_d©a_p‹t
[1] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D1
]));

91 
u8g_öput_d©a_p‹t
[1] = 
	`p‹tI≈utRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D1
]));

92 
u8g_mode_p‹t
[1] = 
	`p‹tModeRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D1
]));

93 
u8g_d©a_mask
[1] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D1
]);

95 
u8g_ouçut_d©a_p‹t
[2] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D2
]));

96 
u8g_öput_d©a_p‹t
[2] = 
	`p‹tI≈utRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D2
]));

97 
u8g_mode_p‹t
[2] = 
	`p‹tModeRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D2
]));

98 
u8g_d©a_mask
[2] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D2
]);

100 
u8g_ouçut_d©a_p‹t
[3] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D3
]));

101 
u8g_öput_d©a_p‹t
[3] = 
	`p‹tI≈utRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D3
]));

102 
u8g_mode_p‹t
[3] = 
	`p‹tModeRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D3
]));

103 
u8g_d©a_mask
[3] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D3
]);

105 
u8g_ouçut_d©a_p‹t
[4] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D4
]));

106 
u8g_öput_d©a_p‹t
[4] = 
	`p‹tI≈utRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D4
]));

107 
u8g_mode_p‹t
[4] = 
	`p‹tModeRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D4
]));

108 
u8g_d©a_mask
[4] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D4
]);

110 
u8g_ouçut_d©a_p‹t
[5] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D5
]));

111 
u8g_öput_d©a_p‹t
[5] = 
	`p‹tI≈utRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D5
]));

112 
u8g_mode_p‹t
[5] = 
	`p‹tModeRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D5
]));

113 
u8g_d©a_mask
[5] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D5
]);

115 
u8g_ouçut_d©a_p‹t
[6] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D6
]));

116 
u8g_öput_d©a_p‹t
[6] = 
	`p‹tI≈utRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D6
]));

117 
u8g_mode_p‹t
[6] = 
	`p‹tModeRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D6
]));

118 
u8g_d©a_mask
[6] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D6
]);

120 
u8g_ouçut_d©a_p‹t
[7] = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D7
]));

121 
u8g_öput_d©a_p‹t
[7] = 
	`p‹tI≈utRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D7
]));

122 
u8g_mode_p‹t
[7] = 
	`p‹tModeRegi°î
(
	`digôÆPöToP‹t
(
u8g
->
pö_li°
[
U8G_PI_D7
]));

123 
u8g_d©a_mask
[7] = 
	`digôÆPöToBôMask
(
u8g
->
pö_li°
[
U8G_PI_D7
]);

124 
	}
}

126 
	$u8g_com_¨duöo_t6963_wrôe_d©a_pö
(
uöt8_t
 
pö
, uöt8_à
vÆ
)

128 i‡–
vÆ
 != 0 )

129 *
u8g_ouçut_d©a_p‹t
[
pö
] |
u8g_d©a_mask
[pin];

131 *
u8g_ouçut_d©a_p‹t
[
pö
] &~
u8g_d©a_mask
[pin];

132 
	}
}

134 
	$u8g_com_¨duöo_t6963_£t_p‹t_ouçut
()

136 
uöt8_t
 
i
;

137  
i
 = 0; i < 8; i++ )

139 #i‡
	`deföed
(
__PIC32MX
)

141 *
u8g_mode_p‹t
[
i
] |
u8g_d©a_mask
[i];

142 #ñi‡
	`deföed
(
__AVR__
)

143 *
u8g_mode_p‹t
[
i
] |
u8g_d©a_mask
[i];

146 *
u8g_mode_p‹t
[
i
] |
u8g_d©a_mask
[i];

150 
	}
}

152 
	$u8g_com_¨duöo_t6963_£t_p‹t_öput
()

154 
uöt8_t
 
i
;

155  
i
 = 0; i < 8; i++ )

157 #i‡
	`deföed
(
__PIC32MX
)

159 *
u8g_mode_p‹t
[
i
] &~
u8g_d©a_mask
[i];

160 #ñi‡
	`deföed
(
__AVR__
)

162 *
u8g_mode_p‹t
[
i
] &~
u8g_d©a_mask
[i];

163 *
u8g_ouçut_d©a_p‹t
[
i
] &~
u8g_d©a_mask
[i];

166 *
u8g_mode_p‹t
[
i
] &~
u8g_d©a_mask
[i];

167 *
u8g_ouçut_d©a_p‹t
[
i
] &~
u8g_d©a_mask
[i];

170 
	}
}

173 
	$u8g_com_¨duöo_t6963_wrôe
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

175 
	`u8g_com_¨duöo_t6963_wrôe_d©a_pö
–0, 
vÆ
&1 );

176 
vÆ
 >>= 1;

177 
	`u8g_com_¨duöo_t6963_wrôe_d©a_pö
–1, 
vÆ
&1 );

178 
vÆ
 >>= 1;

179 
	`u8g_com_¨duöo_t6963_wrôe_d©a_pö
–2, 
vÆ
&1 );

180 
vÆ
 >>= 1;

181 
	`u8g_com_¨duöo_t6963_wrôe_d©a_pö
–3, 
vÆ
&1 );

182 
vÆ
 >>= 1;

184 
	`u8g_com_¨duöo_t6963_wrôe_d©a_pö
–4, 
vÆ
&1 );

185 
vÆ
 >>= 1;

186 
	`u8g_com_¨duöo_t6963_wrôe_d©a_pö
–5, 
vÆ
&1 );

187 
vÆ
 >>= 1;

188 
	`u8g_com_¨duöo_t6963_wrôe_d©a_pö
–6, 
vÆ
&1 );

189 
vÆ
 >>= 1;

190 
	`u8g_com_¨duöo_t6963_wrôe_d©a_pö
–7, 
vÆ
&1 );

191 
vÆ
 >>= 1;

193 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_WR
, 0);

194 
	`u8g_Mi¸oDñay
();

195 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_WR
, 1);

196 
	`u8g_Mi¸oDñay
();

197 
	}
}

199 
uöt8_t
 
	$u8g_com_¨duöo_t6963_ªad
(
u8g_t
 *
u8g
)

201 
uöt8_t
 
vÆ
 = 0;

203 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RD
, 0);

204 
	`u8g_Mi¸oDñay
();

207 i‡–(*
u8g_öput_d©a_p‹t
[3] & 
u8g_d©a_mask
[3]) != 0 )

208 
vÆ
++;

209 
vÆ
 <<= 1;

210 
vÆ
 <<= 1;

211 i‡–(*
u8g_öput_d©a_p‹t
[1] & 
u8g_d©a_mask
[1]) != 0 )

212 
vÆ
++;

213 
vÆ
 <<= 1;

214 i‡–(*
u8g_öput_d©a_p‹t
[0] & 
u8g_d©a_mask
[0]) != 0 )

215 
vÆ
++;

217 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RD
, 1);

218 
	`u8g_Mi¸oDñay
();

220  
vÆ
;

221 
	}
}

223 
	#U8G_STATUS_TIMEOUT
 50

	)

225 
uöt8_t
 
	$u8g_com_¨duöo_t6963_u¡û_01_ok
(
u8g_t
 *
u8g
)

227 
x
;

229 
	`u8g_com_¨duöo_t6963_£t_p‹t_öput
();

230 
x
 = 
	`mûlis
();

231 
x
 +
U8G_STATUS_TIMEOUT
;

235 i‡–(
	`u8g_com_¨duöo_t6963_ªad
(
u8g
) & 3) == 3 )

237 i‡–
x
 < 
	`mûlis
() )

240 
	`u8g_com_¨duöo_t6963_£t_p‹t_ouçut
();

242 
	}
}

244 
uöt8_t
 
	$u8g_com_¨duöo_t6963_u¡û_3_ok
(
u8g_t
 *
u8g
)

246 
x
;

248 
	`u8g_com_¨duöo_t6963_£t_p‹t_öput
();

249 
x
 = 
	`mûlis
();

250 
x
 +
U8G_STATUS_TIMEOUT
;

254 i‡–(
	`u8g_com_¨duöo_t6963_ªad
(
u8g
) & 8) == 8 )

256 i‡–
x
 < 
	`mûlis
() )

259 
	`u8g_com_¨duöo_t6963_£t_p‹t_ouçut
();

261 
	}
}

263 
uöt8_t
 
	$u8g_com_¨duöo_t6963_wrôe_cmd
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

265 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 1);

266 i‡–
	`u8g_com_¨duöo_t6963_u¡û_01_ok
(
u8g
) == 0 )

268 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 1);

269 
	`u8g_com_¨duöo_t6963_wrôe
(
u8g
, 
vÆ
);

271 
	}
}

273 
uöt8_t
 
	$u8g_com_¨duöo_t6963_wrôe_d©a
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

275 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 1);

276 i‡–
	`u8g_com_¨duöo_t6963_u¡û_01_ok
(
u8g
) == 0 )

278 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 0);

279 
	`u8g_com_¨duöo_t6963_wrôe
(
u8g
, 
vÆ
);

281 
	}
}

283 
uöt8_t
 
	$u8g_com_¨duöo_t6963_wrôe_auto_d©a
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

285 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 1);

286 i‡–
	`u8g_com_¨duöo_t6963_u¡û_3_ok
(
u8g
) == 0 )

288 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_A0
, 0);

289 
	`u8g_com_¨duöo_t6963_wrôe
(
u8g
, 
vÆ
);

291 
	}
}

294 
uöt8_t
 
	$u8g_com_¨duöo_t6963_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

296 
msg
)

298 
U8G_COM_MSG_INIT
:

299 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 0;

300 
	`u8g_com_¨duöo_t6963_öô
(
u8g
);

302 i‡–
u8g
->
pö_li°
[
U8G_PI_WR
] !
U8G_PIN_NONE
 )

304 
	`pöMode
(
u8g
->
pö_li°
[
U8G_PI_WR
], 
OUTPUT
);

305 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_WR
, 
HIGH
);

308 
	`u8g_com_¨duöo_assign_pö_ouçut_high
(
u8g
);

310 
U8G_COM_MSG_STOP
:

313 
U8G_COM_MSG_CHIP_SELECT
:

314 i‡–
¨g_vÆ
 == 0 )

317 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
HIGH
);

322 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_CS
, 
LOW
);

325 
U8G_COM_MSG_WRITE_BYTE
:

326 i‡–
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] == 0 )

328 
	`u8g_com_¨duöo_t6963_wrôe_d©a
(
u8g
, 
¨g_vÆ
);

332 
	`u8g_com_¨duöo_t6963_wrôe_cmd
(
u8g
, 
¨g_vÆ
);

335 
U8G_COM_MSG_WRITE_SEQ
:

337 
uöt8_t
 *
±r
 = 
¨g_±r
;

338 
	`u8g_com_¨duöo_t6963_wrôe_cmd
(
u8g
, 0x0b0);

339  
¨g_vÆ
 > 0 )

341 i‡–
	`u8g_com_¨duöo_t6963_wrôe_auto_d©a
(
u8g
, *
±r
++) == 0 )

343 
¨g_vÆ
--;

345 
	`u8g_com_¨duöo_t6963_wrôe_cmd
(
u8g
, 0x0b2);

348 
U8G_COM_MSG_WRITE_SEQ_P
:

350 
uöt8_t
 *
±r
 = 
¨g_±r
;

351 
	`u8g_com_¨duöo_t6963_wrôe_cmd
(
u8g
, 0x0b0);

352  
¨g_vÆ
 > 0 )

354 i‡–
	`u8g_com_¨duöo_t6963_wrôe_auto_d©a
(
u8g
, 
	`u8g_pgm_ªad
(
±r
)) == 0 )

356 
±r
++;

357 
¨g_vÆ
--;

359 
	`u8g_com_¨duöo_t6963_wrôe_cmd
(
u8g
, 0x0b2);

362 
U8G_COM_MSG_ADDRESS
:

363 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 
¨g_vÆ
;

366 
U8G_COM_MSG_RESET
:

367 i‡–
u8g
->
pö_li°
[
U8G_PI_RESET
] !
U8G_PIN_NONE
 )

368 
	`u8g_com_¨duöo_digôÆ_wrôe
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

373 
	}
}

378 
uöt8_t
 
	$u8g_com_¨duöo_t6963_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

381 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_atmega_hw_spi.c

42 
	~"u8g.h
"

45 #i‡
deföed
(
__AVR__
)

46 
	#U8G_ATMEGA_HW_SPI


	)

49 #i‡
__AVR_ARCH__
 == 2

50 #unde‡
U8G_ATMEGA_HW_SPI


52 #i‡
__AVR_ARCH__
 == 25

53 #unde‡
U8G_ATMEGA_HW_SPI


58 #i‡
deföed
(
U8G_ATMEGA_HW_SPI
)

60 
	~<avr/öãºu±.h
>

61 
	~<avr/io.h
>

64 
uöt8_t
 
	$u8g_©mega_•i_out
(
uöt8_t
 
d©a
)

68 
SPDR
 = 
d©a
;

70 !(
SPSR
 & (1<<
SPIF
)))

73  
SPDR
;

74 
	}
}

77 
uöt8_t
 
	$u8g_com_©mega_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

79 
msg
)

81 
U8G_COM_MSG_STOP
:

84 
U8G_COM_MSG_INIT
:

86 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_CS
);

87 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_A0
);

89 
DDRB
 |
	`_BV
(3);

90 
DDRB
 |
	`_BV
(5);

91 
DDRB
 |
	`_BV
(2);

93 
PORTB
 &~
	`_BV
(3);

94 
PORTB
 &~
	`_BV
(5);

95 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 1);

104 
SPCR
 = 0;

105 
SPCR
 = (1<<
SPE
Ë| (1<<
MSTR
)|(0<<
SPR1
)|(0<<
SPR0
)|(0<<
CPOL
)|(0<<
CPHA
);

106 #ifde‡
U8G_HW_SPI_2X


107 
SPSR
 = (1 << 
SPI2X
);

112 
U8G_COM_MSG_ADDRESS
:

113 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_A0
, 
¨g_vÆ
);

116 
U8G_COM_MSG_CHIP_SELECT
:

118 i‡–
¨g_vÆ
 == 0 )

121 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 1);

125 
PORTB
 &~
	`_BV
(5);

127 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 0);

132 
U8G_COM_MSG_RESET
:

133 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

136 
U8G_COM_MSG_WRITE_BYTE
:

137 
	`u8g_©mega_•i_out
(
¨g_vÆ
);

140 
U8G_COM_MSG_WRITE_SEQ
:

142 
uöt8_t
 *
±r
 = 
¨g_±r
;

143  
¨g_vÆ
 > 0 )

145 
	`u8g_©mega_•i_out
(*
±r
++);

146 
¨g_vÆ
--;

150 
U8G_COM_MSG_WRITE_SEQ_P
:

152 
uöt8_t
 *
±r
 = 
¨g_±r
;

153  
¨g_vÆ
 > 0 )

155 
	`u8g_©mega_•i_out
(
	`u8g_pgm_ªad
(
±r
));

156 
±r
++;

157 
¨g_vÆ
--;

163 
	}
}

167 
uöt8_t
 
	$u8g_com_©mega_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

170 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_atmega_parallel.c

55 
	~"u8g.h
"

57 #i‡
deföed
(
__AVR__
)

59 
	$u8g_com_©mega_∑øŒñ_wrôe
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
Ë
U8G_NOINLINE
;

60 
	$u8g_com_©mega_∑øŒñ_wrôe
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

63 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_D0
, 
vÆ
&1);

64 
vÆ
 >>= 1;

65 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_D1
, 
vÆ
&1);

66 
vÆ
 >>= 1;

67 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_D2
, 
vÆ
&1);

68 
vÆ
 >>= 1;

69 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_D3
, 
vÆ
&1);

70 
vÆ
 >>= 1;

71 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_D4
, 
vÆ
&1);

72 
vÆ
 >>= 1;

73 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_D5
, 
vÆ
&1);

74 
vÆ
 >>= 1;

75 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_D6
, 
vÆ
&1);

76 
vÆ
 >>= 1;

77 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_D7
, 
vÆ
&1);

80 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_EN
, 1);

81 
	`u8g_Mi¸oDñay
();

82 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_EN
, 0);

83 
	`u8g_10Mi¸oDñay
();

84 
	`u8g_10Mi¸oDñay
();

85 
	}
}

88 
uöt8_t
 
	$u8g_com_©mega_∑øŒñ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

90 
msg
)

92 
U8G_COM_MSG_INIT
:

94 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_RW
);

95 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_RW
, 0);

97 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_D0
);

98 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_D1
);

99 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_D2
);

100 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_D3
);

101 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_D4
);

102 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_D5
);

103 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_D6
);

104 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_D7
);

105 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_EN
);

106 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_CS1
);

107 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_CS2
);

108 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_DI
);

109 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS1
, 1);

110 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS2
, 1);

113 
U8G_COM_MSG_STOP
:

115 
U8G_COM_MSG_CHIP_SELECT
:

116 i‡–
¨g_vÆ
 == 0 )

119 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS1
, 1);

120 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS2
, 1);

122 i‡–
¨g_vÆ
 == 1 )

125 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS1
, 0);

126 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS2
, 1);

128 i‡–
¨g_vÆ
 == 2 )

131 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS1
, 1);

132 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS2
, 0);

137 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS1
, 0);

138 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS2
, 0);

141 
U8G_COM_MSG_WRITE_BYTE
:

142 
	`u8g_com_©mega_∑øŒñ_wrôe
(
u8g
, 
¨g_vÆ
);

144 
U8G_COM_MSG_WRITE_SEQ
:

146 
uöt8_t
 *
±r
 = 
¨g_±r
;

147  
¨g_vÆ
 > 0 )

149 
	`u8g_com_©mega_∑øŒñ_wrôe
(
u8g
, *
±r
++);

150 
¨g_vÆ
--;

154 
U8G_COM_MSG_WRITE_SEQ_P
:

156 
uöt8_t
 *
±r
 = 
¨g_±r
;

157  
¨g_vÆ
 > 0 )

159 
	`u8g_com_©mega_∑øŒñ_wrôe
(
u8g
, 
	`u8g_pgm_ªad
(
±r
));

160 
±r
++;

161 
¨g_vÆ
--;

165 
U8G_COM_MSG_ADDRESS
:

166 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_DI
, 
¨g_vÆ
);

168 
U8G_COM_MSG_RESET
:

169 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

173 
	}
}

177 
uöt8_t
 
	$u8g_com_©mega_∑øŒñ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

180 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_atmega_st7920_hw_spi.c

44 
	~"u8g.h
"

46 #i‡
deföed
(
__AVR__
)

47 
	#U8G_ATMEGA_HW_SPI


	)

50 #i‡
__AVR_ARCH__
 == 2

51 #unde‡
U8G_ATMEGA_HW_SPI


53 #i‡
__AVR_ARCH__
 == 25

54 #unde‡
U8G_ATMEGA_HW_SPI


59 #i‡
deföed
(
U8G_ATMEGA_HW_SPI
)

61 
	~<avr/öãºu±.h
>

62 
	~<avr/io.h
>

64 
uöt8_t
 
	$u8g_©mega_°7920_hw_•i_shi·_out
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
Ë
U8G_NOINLINE
;

65 
uöt8_t
 
	$u8g_©mega_°7920_hw_•i_shi·_out
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

68 
SPDR
 = 
vÆ
;

70 !(
SPSR
 & (1<<
SPIF
)))

73  
SPDR
;

74 
	}
}

77 
	$u8g_com_©mega_°7920_wrôe_byã_hw_•i
(
u8g_t
 *
u8g
, 
uöt8_t
 
rs
, uöt8_à
vÆ
Ë
U8G_NOINLINE
;

78 
	$u8g_com_©mega_°7920_wrôe_byã_hw_•i
(
u8g_t
 *
u8g
, 
uöt8_t
 
rs
, uöt8_à
vÆ
)

80 
uöt8_t
 
i
;

82 i‡–
rs
 == 0 )

85 
	`u8g_©mega_°7920_hw_•i_shi·_out
(
u8g
, 0x0f8);

87 i‡–
rs
 == 1 )

90 
	`u8g_©mega_°7920_hw_•i_shi·_out
(
u8g
, 0x0fa);

93 
	`u8g_©mega_°7920_hw_•i_shi·_out
(
u8g
, 
vÆ
 & 0x0f0);

94 
	`u8g_©mega_°7920_hw_•i_shi·_out
(
u8g
, 
vÆ
 << 4);

96  
i
 = 0; i < 4; i++ )

97 
	`u8g_10Mi¸oDñay
();

98 
	}
}

101 
uöt8_t
 
	$u8g_com_©mega_°7920_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

103 
msg
)

105 
U8G_COM_MSG_INIT
:

106 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_CS
);

109 
DDRB
 |
	`_BV
(3);

110 
DDRB
 |
	`_BV
(5);

111 
DDRB
 |
	`_BV
(2);

113 
PORTB
 &~
	`_BV
(3);

114 
PORTB
 &~
	`_BV
(5);

115 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 1);

124 
SPCR
 = 0;

128 
SPCR
 = (1<<
SPE
Ë| (1<<
MSTR
)|(0<<
SPR1
)|(0<<
SPR0
)|(0<<
CPOL
)|(0<<
CPHA
);

129 #ifde‡
U8G_HW_SPI_2X


130 
SPSR
 = (1 << 
SPI2X
);

132 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 0;

135 
U8G_COM_MSG_STOP
:

138 
U8G_COM_MSG_RESET
:

139 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

142 
U8G_COM_MSG_ADDRESS
:

143 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 
¨g_vÆ
;

146 
U8G_COM_MSG_CHIP_SELECT
:

147 i‡–
¨g_vÆ
 == 0 )

150 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 0);

156 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 1);

161 
U8G_COM_MSG_WRITE_BYTE
:

162 
	`u8g_com_©mega_°7920_wrôe_byã_hw_•i
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], 
¨g_vÆ
);

166 
U8G_COM_MSG_WRITE_SEQ
:

168 
uöt8_t
 *
±r
 = 
¨g_±r
;

169  
¨g_vÆ
 > 0 )

171 
	`u8g_com_©mega_°7920_wrôe_byã_hw_•i
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], *
±r
++);

173 
¨g_vÆ
--;

178 
U8G_COM_MSG_WRITE_SEQ_P
:

180 
uöt8_t
 *
±r
 = 
¨g_±r
;

181  
¨g_vÆ
 > 0 )

183 
	`u8g_com_©mega_°7920_wrôe_byã_hw_•i
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], 
	`u8g_pgm_ªad
(
±r
));

185 
±r
++;

186 
¨g_vÆ
--;

192 
	}
}

197 
uöt8_t
 
	$u8g_com_©mega_°7920_hw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

200 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_atmega_st7920_spi.c

38 
	~"u8g.h
"

40 #i‡
deföed
(
__AVR__
)

42 
	$u8g_©mega_°7920_sw_•i_shi·_out
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
Ë
U8G_NOINLINE
;

43 
	$u8g_©mega_°7920_sw_•i_shi·_out
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

45 
uöt8_t
 
i
 = 8;

48 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_MOSI
, 
vÆ
 & 128 );

49 
vÆ
 <<= 1;

50 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_SCK
, 1 );

51 
	`u8g_Mi¸oDñay
();

52 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_SCK
, 0 );

53 
	`u8g_Mi¸oDñay
();

54 
i
--;

55 }  
i
 != 0 );

56 
	}
}

58 
	$u8g_com_©mega_°7920_wrôe_byã
(
u8g_t
 *
u8g
, 
uöt8_t
 
rs
, uöt8_à
vÆ
Ë
U8G_NOINLINE
;

59 
	$u8g_com_©mega_°7920_wrôe_byã
(
u8g_t
 *
u8g
, 
uöt8_t
 
rs
, uöt8_à
vÆ
)

61 
uöt8_t
 
i
;

63 i‡–
rs
 == 0 )

66 
	`u8g_©mega_°7920_sw_•i_shi·_out
(
u8g
, 0x0f8);

68 i‡–
rs
 == 1 )

71 
	`u8g_©mega_°7920_sw_•i_shi·_out
(
u8g
, 0x0fa);

74 
	`u8g_©mega_°7920_sw_•i_shi·_out
(
u8g
, 
vÆ
 & 0x0f0);

75 
	`u8g_©mega_°7920_sw_•i_shi·_out
(
u8g
, 
vÆ
 << 4);

77  
i
 = 0; i < 4; i++ )

78 
	`u8g_10Mi¸oDñay
();

79 
	}
}

82 
uöt8_t
 
	$u8g_com_©mega_°7920_sw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

84 
msg
)

86 
U8G_COM_MSG_INIT
:

87 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_SCK
);

88 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_MOSI
);

90 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_CS
);

91 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_RESET
);

93 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_SCK
, 0 );

94 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_MOSI
, 0 );

95 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 0 );

98 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 0;

101 
U8G_COM_MSG_STOP
:

104 
U8G_COM_MSG_RESET
:

105 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

108 
U8G_COM_MSG_ADDRESS
:

109 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 
¨g_vÆ
;

112 
U8G_COM_MSG_CHIP_SELECT
:

113 i‡–
¨g_vÆ
 == 0 )

116 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 0);

122 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 1);

127 
U8G_COM_MSG_WRITE_BYTE
:

128 
	`u8g_com_©mega_°7920_wrôe_byã
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], 
¨g_vÆ
);

129 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 2;

132 
U8G_COM_MSG_WRITE_SEQ
:

134 
uöt8_t
 *
±r
 = 
¨g_±r
;

135  
¨g_vÆ
 > 0 )

137 
	`u8g_com_©mega_°7920_wrôe_byã
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], *
±r
++);

138 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 2;

139 
¨g_vÆ
--;

144 
U8G_COM_MSG_WRITE_SEQ_P
:

146 
uöt8_t
 *
±r
 = 
¨g_±r
;

147  
¨g_vÆ
 > 0 )

149 
	`u8g_com_©mega_°7920_wrôe_byã
(
u8g
, u8g->
pö_li°
[
U8G_PI_A0_STATE
], 
	`u8g_pgm_ªad
(
±r
));

150 
u8g
->
pö_li°
[
U8G_PI_A0_STATE
] = 2;

151 
±r
++;

152 
¨g_vÆ
--;

158 
	}
}

163 
uöt8_t
 
	$u8g_com_©mega_°7920_sw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

166 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_atmega_sw_spi.c

37 
	~"u8g.h
"

39 #i‡
deföed
(
__AVR__
)

41 
	$u8g_©mega_sw_•i_shi·_out
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
Ë
U8G_NOINLINE
;

42 
	$u8g_©mega_sw_•i_shi·_out
(
u8g_t
 *
u8g
, 
uöt8_t
 
vÆ
)

44 
uöt8_t
 
i
 = 8;

47 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_MOSI
, 
vÆ
 & 128 );

48 
vÆ
 <<= 1;

49 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_SCK
, 1 );

50 
	`u8g_Mi¸oDñay
();

51 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_SCK
, 0 );

52 
	`u8g_Mi¸oDñay
();

53 
i
--;

54 }  
i
 != 0 );

55 
	}
}

57 
uöt8_t
 
	$u8g_com_©mega_sw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

59 
msg
)

61 
U8G_COM_MSG_INIT
:

62 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_SCK
);

63 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_MOSI
);

64 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_A0
);

65 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_CS
);

66 
	`u8g_SëPIOuçut
(
u8g
, 
U8G_PI_RESET
);

68 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_SCK
, 0 );

69 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_MOSI
, 0 );

70 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 1 );

71 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_A0
, 0);

74 
U8G_COM_MSG_STOP
:

77 
U8G_COM_MSG_ADDRESS
:

78 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_A0
, 
¨g_vÆ
);

81 
U8G_COM_MSG_CHIP_SELECT
:

83 i‡–
¨g_vÆ
 == 0 )

86 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 1);

90 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_SCK
, 0 );

92 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_CS
, 0);

96 
U8G_COM_MSG_RESET
:

97 
	`u8g_SëPILevñ
(
u8g
, 
U8G_PI_RESET
, 
¨g_vÆ
);

101 
U8G_COM_MSG_WRITE_BYTE
:

102 
	`u8g_©mega_sw_•i_shi·_out
(
u8g
, 
¨g_vÆ
);

105 
U8G_COM_MSG_WRITE_SEQ
:

107 
uöt8_t
 *
±r
 = 
¨g_±r
;

108  
¨g_vÆ
 > 0 )

110 
	`u8g_©mega_sw_•i_shi·_out
(
u8g
, *
±r
++);

111 
¨g_vÆ
--;

116 
U8G_COM_MSG_WRITE_SEQ_P
:

118 
uöt8_t
 *
±r
 = 
¨g_±r
;

119  
¨g_vÆ
 > 0 )

121 
	`u8g_©mega_sw_•i_shi·_out
(
u8g
, 
	`u8g_pgm_ªad
(
±r
));

122 
±r
++;

123 
¨g_vÆ
--;

129 
	}
}

134 
uöt8_t
 
	$u8g_com_©mega_sw_•i_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

137 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_i2c.c

38 
	~"u8g.h
"

40 
uöt8_t
 
	gu8g_i2c_îr_code
;

47 
uöt8_t
 
	gu8g_i2c_îr_pos
;

50 
	$u8g_i2c_˛ór_îr‹
()

52 
u8g_i2c_îr_code
 = 
U8G_I2C_ERR_NONE
;

53 
u8g_i2c_îr_pos
 = 0;

54 
	}
}

56 
uöt8_t
 
	$u8g_i2c_gë_îr‹
()

58  
u8g_i2c_îr_code
;

59 
	}
}

61 
uöt8_t
 
	$u8g_i2c_gë_îr_pos
()

63  
u8g_i2c_îr_pos
;

64 
	}
}

66 
	$u8g_i2c_£t_îr‹
(
uöt8_t
 
code
, uöt8_à
pos
)

68 i‡–
u8g_i2c_îr_code
 > 0 )

70 
u8g_i2c_îr_code
 |
code
;

71 
u8g_i2c_îr_pos
 = 
pos
;

72 
	}
}

76 #i‡
deföed
(
__AVR__
)

77 
	#U8G_ATMEGA_HW_TWI


	)

80 #i‡
__AVR_ARCH__
 == 2

81 #unde‡
U8G_ATMEGA_HW_TWI


83 #i‡
__AVR_ARCH__
 == 25

84 #unde‡
U8G_ATMEGA_HW_TWI


88 #i‡
deföed
(
U8G_ATMEGA_HW_TWI
)

90 
	~<avr/io.h
>

91 
	~<utû/twi.h
>

95 
	$u8g_i2c_öô
(
uöt8_t
 
›ti⁄s
)

120 
TWSR
 = 0;

121 
TWBR
 = 
F_CPU
/(2*100000)-8;

122 
	`u8g_i2c_˛ór_îr‹
();

123 
	}
}

125 
uöt8_t
 
	$u8g_i2c_waô
(
uöt8_t
 
mask
, uöt8_à
pos
)

127 vﬁ©ûê
uöt16_t
 
˙t
 = 2000;

128  !(
TWCR
 & 
mask
) )

130 i‡–
˙t
 == 0 )

132 
	`u8g_i2c_£t_îr‹
(
U8G_I2C_ERR_TIMEOUT
, 
pos
);

135 
˙t
--;

138 
	}
}

141 
uöt8_t
 
	$u8g_i2c_°¨t
(
uöt8_t
 
¶a
)

143 
uöt8_t
 
°©us
;

146 
TWCR
 = 
	`_BV
(
TWINT
Ë| _BV(
TWSTA
Ë| _BV(
TWEN
);

149 i‡–
	`u8g_i2c_waô
(
	`_BV
(
TWINT
), 1) == 0 )

152 
°©us
 = 
TW_STATUS
;

155 i‡–
°©us
 !
TW_START
 && sètu†!
TW_REP_START
 )

157 
	`u8g_i2c_£t_îr‹
(
U8G_I2C_ERR_BUS
, 1);

162 
TWDR
 = 
¶a
;

165 
TWCR
 = 
	`_BV
(
TWINT
Ë| _BV(
TWEN
);

168 i‡–
	`u8g_i2c_waô
(
	`_BV
(
TWINT
), 2) == 0 )

170 
°©us
 = 
TW_STATUS
;

173 i‡–
°©us
 !
TW_MT_SLA_ACK
 )

175 
	`u8g_i2c_£t_îr‹
(
U8G_I2C_ERR_BUS
, 2);

180 
	}
}

182 
uöt8_t
 
	$u8g_i2c_£nd_byã
(
uöt8_t
 
d©a
)

184 
uöt8_t
 
°©us
;

185 
TWDR
 = 
d©a
;

186 
TWCR
 = 
	`_BV
(
TWINT
Ë| _BV(
TWEN
);

187 i‡–
	`u8g_i2c_waô
(
	`_BV
(
TWINT
), 3) == 0 )

189 
°©us
 = 
TW_STATUS
;

191 i‡–
°©us
 !
TW_MT_DATA_ACK
 )

193 
	`u8g_i2c_£t_îr‹
(
U8G_I2C_ERR_BUS
, 3);

198 
	}
}

200 
	$u8g_i2c_°›
()

203 
TWCR
 = 
	`_BV
(
TWINT
Ë| _BV(
TWEN
Ë| _BV(
TWSTO
);

206 
	`u8g_i2c_waô
(
	`_BV
(
TWSTO
), 4);

208 
	}
}

224 
	$u8g_i2c_öô
(
uöt8_t
 
›ti⁄s
)

226 
	`u8g_i2c_˛ór_îr‹
();

227 
	}
}

229 
uöt8_t
 
	$u8g_i2c_waô
(
uöt8_t
 
mask
, uöt8_à
pos
)

232 
	}
}

234 
uöt8_t
 
	$u8g_i2c_°¨t
(
uöt8_t
 
¶a
)

237 
	}
}

238 
uöt8_t
 
	$u8g_i2c_£nd_byã
(
uöt8_t
 
d©a
)

241 
	}
}

243 
	$u8g_i2c_°›
()

245 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_io.c

39 
	~"u8g.h
"

41 #i‡
deföed
(
__AVR__
)

43 
	~<avr/öãºu±.h
>

44 
	~<avr/io.h
>

46 vﬁ©ûê
	tuöt8_t
 * 
	tIO_PTR
;

49 
uöt8_t
 
	$u8g_Pö
(
uöt8_t
 
p‹t
, uöt8_à
bôpos
)

51 
p‹t
 <<= 3;

52 
p‹t
 +
bôpos
;

53  
p‹t
;

54 
	}
}

56 c⁄° 
IO_PTR
 
	gu8g_avr_ddr_P
[] 
	gPROGMEM
 = {

57 #ifde‡
DDRA


58 &
DDRA
,

62 &
DDRB
,

63 #ifde‡
DDRC


64 &
DDRC
,

65 #ifde‡
DDRD


66 &
DDRD
,

67 #ifde‡
DDRE


68 &
DDRE
,

69 #ifde‡
DDRF


70 &
DDRF
,

71 #ifde‡
DDRG


72 &
DDRG
,

73 #ifde‡
DDRH


74 &
DDRH
,

84 c⁄° 
IO_PTR
 
	gu8g_avr_p‹t_P
[] 
	gPROGMEM
 = {

85 #ifde‡
PORTA


86 &
PORTA
,

90 &
PORTB
,

91 #ifde‡
PORTC


92 &
PORTC
,

93 #ifde‡
PORTD


94 &
PORTD
,

95 #ifde‡
PORTE


96 &
PORTE
,

97 #ifde‡
PORTF


98 &
PORTF
,

99 #ifde‡
PORTG


100 &
PORTG
,

101 #ifde‡
PORTH


102 &
PORTH
,

111 c⁄° 
IO_PTR
 
	gu8g_avr_pö_P
[] 
	gPROGMEM
 = {

112 #ifde‡
PINA


113 &
PINA
,

117 &
PINB
,

118 #ifde‡
PINC


119 &
PINC
,

120 #ifde‡
PIND


121 &
PIND
,

122 #ifde‡
PINE


123 &
PINE
,

124 #ifde‡
PINF


125 &
PINF
,

126 #ifde‡
PING


127 &
PING
,

128 #ifde‡
PINH


129 &
PINH
,

138 vﬁ©ûê
uöt8_t
 *
	$u8g_gë_avr_io_±r
(c⁄° 
IO_PTR
 *
ba£
, 
uöt8_t
 
off£t
)

140 vﬁ©ûê
uöt8_t
 * 
tmp
;

141 
ba£
 +
off£t
;

142 
	`mem˝y_P
(&
tmp
, 
ba£
, (vﬁ©ûê
uöt8_t
 * 
PROGMEM
));

143  
tmp
;

144 
	}
}

147 
	$u8g_SëPöOuçut
(
uöt8_t
 
öã∫Æ_pö_numbî
)

149 *
	`u8g_gë_avr_io_±r
(
u8g_avr_ddr_P
, 
öã∫Æ_pö_numbî
>>3Ë|
	`_BV
(internal_pin_number&7);

150 
	}
}

152 
	$u8g_SëPöI≈ut
(
uöt8_t
 
öã∫Æ_pö_numbî
)

154 *
	`u8g_gë_avr_io_±r
(
u8g_avr_ddr_P
, 
öã∫Æ_pö_numbî
>>3Ë&~
	`_BV
(internal_pin_number&7);

155 
	}
}

157 
	$u8g_SëPöLevñ
(
uöt8_t
 
öã∫Æ_pö_numbî
, uöt8_à
Àvñ
)

159 vﬁ©ûê
uöt8_t
 * 
tmp
 = 
	`u8g_gë_avr_io_±r
(
u8g_avr_p‹t_P
, 
öã∫Æ_pö_numbî
>>3);

161 i‡–
Àvñ
 == 0 )

162 *
tmp
 &~
	`_BV
(
öã∫Æ_pö_numbî
&7);

164 *
tmp
 |
	`_BV
(
öã∫Æ_pö_numbî
&7);

165 
	}
}

167 
uöt8_t
 
	$u8g_GëPöLevñ
(
uöt8_t
 
öã∫Æ_pö_numbî
)

169 vﬁ©ûê
uöt8_t
 * 
tmp
 = 
	`u8g_gë_avr_io_±r
(
u8g_avr_pö_P
, 
öã∫Æ_pö_numbî
>>3);

170 i‡–((*
tmp
Ë& 
	`_BV
(
öã∫Æ_pö_numbî
&7)) != 0 )

173 
	}
}

177 
uöt8_t
 
	$u8g_Pö
(
uöt8_t
 
p‹t
, uöt8_à
bôpos
)

179 
p‹t
 <<= 3;

180 
p‹t
 +
bôpos
;

181  
p‹t
;

182 
	}
}

184 
	$u8g_SëPöOuçut
(
uöt8_t
 
öã∫Æ_pö_numbî
)

186 
	}
}

188 
	$u8g_SëPöI≈ut
(
uöt8_t
 
öã∫Æ_pö_numbî
)

190 
	}
}

192 
	$u8g_SëPöLevñ
(
uöt8_t
 
öã∫Æ_pö_numbî
, uöt8_à
Àvñ
)

194 
	}
}

196 
uöt8_t
 
	$u8g_GëPöLevñ
(
uöt8_t
 
öã∫Æ_pö_numbî
)

199 
	}
}

204 
	$u8g_SëPIOuçut
(
u8g_t
 *
u8g
, 
uöt8_t
 
pi
)

206 
uöt8_t
 
pö
;

207 
pö
 = 
u8g
->
pö_li°
[
pi
];

208 i‡–
pö
 !
U8G_PIN_NONE
 )

209 
	`u8g_SëPöOuçut
(
pö
);

210 
	}
}

212 
	$u8g_SëPILevñ
(
u8g_t
 *
u8g
, 
uöt8_t
 
pi
, uöt8_à
Àvñ
)

214 
uöt8_t
 
pö
;

215 
pö
 = 
u8g
->
pö_li°
[
pi
];

216 i‡–
pö
 !
U8G_PIN_NONE
 )

217 
	`u8g_SëPöLevñ
(
pö
, 
Àvñ
);

218 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_null.c

39 
	~"u8g.h
"

41 
uöt8_t
 
	$u8g_com_nuŒ_‚
(
u8g_t
 *
u8g
, 
uöt8_t
 
msg
, uöt8_à
¨g_vÆ
, *
¨g_±r
)

43 
msg
)

45 
U8G_COM_MSG_INIT
:

47 
U8G_COM_MSG_STOP
:

51 
U8G_COM_MSG_CHIP_SELECT
:

56 
U8G_COM_MSG_WRITE_BYTE
:

58 
U8G_COM_MSG_WRITE_SEQ
:

62 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_cursor.c

37 
	~"u8g.h
"

39 
	$u8g_SëCurs‹F⁄t
(
u8g_t
 *
u8g
, c⁄° 
u8g_pgm_uöt8_t
 *
curs‹_f⁄t
)

41 
u8g
->
curs‹_f⁄t
 = cursor_font;

42 
	}
}

44 
	$u8g_SëCurs‹StyÀ
(
u8g_t
 *
u8g
, 
uöt8_t
 
ícodög
)

46 
u8g
->
curs‹_ícodög
 = 
ícodög
;

47 
	}
}

49 
	$u8g_SëCurs‹Cﬁ‹
(
u8g_t
 *
u8g
, 
uöt8_t
 
fg
, uöt8_à
bg
)

51 
u8g
->
curs‹_bg_cﬁ‹
 = 
bg
;

52 
u8g
->
curs‹_fg_cﬁ‹
 = 
fg
;

53 
	}
}

55 
	$u8g_SëCurs‹Pos
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
curs‹_x
, u8g_uöt_à
curs‹_y
)

57 
u8g
->
curs‹_x
 = cursor_x;

58 
u8g
->
curs‹_y
 = cursor_y;

59 
	}
}

61 
	$u8g_E«bÀCurs‹
(
u8g_t
 *
u8g
)

63 
u8g
->
curs‹_‚
 = 
u8g_DøwCurs‹
;

64 
	}
}

66 
	$u8g_DißbÀCurs‹
(
u8g_t
 *
u8g
)

68 
u8g
->
curs‹_‚
 = (
u8g_døw_curs‹_‚
)0;

69 
	}
}

71 
	$u8g_DøwCurs‹
(
u8g_t
 *
u8g
)

73 c⁄° 
u8g_pgm_uöt8_t
 *
f⁄t
;

74 
uöt8_t
 
cﬁ‹
;

75 
uöt8_t
 
ícodög
 = 
u8g
->
curs‹_ícodög
;

78 
cﬁ‹
 = 
	`u8g_GëCﬁ‹Index
(
u8g
);

79 
f⁄t
 = 
u8g
->font;

82 
u8g
->
f⁄t
 = u8g->
curs‹_f⁄t
;

83 
ícodög
++;

84 
	`u8g_SëCﬁ‹Index
(
u8g
, u8g->
curs‹_bg_cﬁ‹
);

87 
	`u8g_døw_glyph
(
u8g
, u8g->
curs‹_x
, u8g->
curs‹_y
, 
ícodög
);

88 
ícodög
--;

89 
	`u8g_SëCﬁ‹Index
(
u8g
, u8g->
curs‹_fg_cﬁ‹
);

93 
	`u8g_døw_glyph
(
u8g
, u8g->
curs‹_x
, u8g->
curs‹_y
, 
ícodög
);

96 
u8g
->
f⁄t
 = font;

97 
	`u8g_SëCﬁ‹Index
(
u8g
, 
cﬁ‹
);

98 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_delay.c

38 
	~"u8g.h
"

42 #i‡
deföed
(
ARDUINO
)

43 #i‡
deföed
(
__AVR__
)

44 
	#USE_AVR_DELAY


	)

45 #ñi‡
deföed
(
__PIC32MX
)

46 
	#USE_PIC32_DELAY


	)

47 #ñi‡
deföed
(
__¨m__
)

48 
	#USE_ARDUINO_DELAY


	)

50 
	#USE_ARDUINO_DELAY


	)

52 #ñi‡
deföed
(
__AVR__
)

53 
	#USE_AVR_DELAY


	)

54 #ñi‡
deföed
(
__18CXX
)

55 
	#USE_PIC18_DELAY


	)

57 
	#USE_DUMMY_DELAY


	)

66 #i‡
deföed
(
USE_AVR_DELAY
)

67 
	~<avr/öãºu±.h
>

68 
	~<avr/io.h
>

69 
	~<utû/dñay.h
>

89 
	$u8g_Dñay
(
uöt16_t
 
vÆ
)

92  
vÆ
 != 0 )

94 
	`_dñay_lo›_2
–(
F_CPU
 / 4000 ) -2);

95 
vÆ
--;

97 
	}
}

100 
	$u8g_Mi¸oDñay
()

102 #i‡(
F_CPU
 / 4000000 ) > 0

103 
	`_dñay_lo›_2
–(
F_CPU
 / 4000000 ) );

105 
	}
}

108 
	$u8g_10Mi¸oDñay
()

110 #i‡(
F_CPU
 / 400000 ) > 0

111 
	`_dñay_lo›_2
–(
F_CPU
 / 400000 ) );

113 
	}
}

120 #i‡
deföed
(
USE_PIC18_DELAY
)

121 
	~<dñays.h
>

122 
	#GëSy°emClock
() (64000000ul)

123 
	#GëIn°ru˘i⁄Clock
(Ë(
	`GëSy°emClock
()/4)

	)

125 
	$u8g_Dñay
(
uöt16_t
 
vÆ
)

131 
	}
}

132 
	$u8g_Mi¸oDñay
()

135 
	}
}

136 
	$u8g_10Mi¸oDñay
()

139 
	}
}

144 #i‡
deföed
(
USE_ARDUINO_DELAY
)

145 
	$u8g_Dñay
(
uöt16_t
 
vÆ
)

147 
	`dñay
(
vÆ
);

148 
	}
}

149 
	$u8g_Mi¸oDñay
()

151 
	`dñayMi¸o£c⁄ds
(1);

152 
	}
}

153 
	$u8g_10Mi¸oDñay
()

155 
	`dñayMi¸o£c⁄ds
(10);

156 
	}
}

159 #i‡
deföed
(
USE_PIC32_DELAY
)

167 
	#CPU_COUNTS_PER_SECOND
 (
F_CPU
/2UL)

	)

168 
	#TICKS_PER_MILLISECOND
 (
CPU_COUNTS_PER_SECOND
/1000UL)

	)

169 
	~"∂ib.h
"

170 
	$u8g_Dñay
(
uöt16_t
 
vÆ
)

172 
uöt32_t
 
d
;

173 
uöt32_t
 
s
;

174 
d
 = 
vÆ
;

175 
d
 *
TICKS_PER_MILLISECOND
;

176 
s
 = 
	`RódC‹eTimî
();

177  (
uöt32_t
)(
	`RódC‹eTimî
(Ë- 
s
Ë< 
d
 )

179 
	}
}

181 
	$u8g_Mi¸oDñay
()

183 
uöt32_t
 
d
;

184 
uöt32_t
 
s
;

185 
d
 = 
TICKS_PER_MILLISECOND
/1000;

186 
s
 = 
	`RódC‹eTimî
();

187  (
uöt32_t
)(
	`RódC‹eTimî
(Ë- 
s
Ë< 
d
 )

189 
	}
}

191 
	$u8g_10Mi¸oDñay
()

193 
uöt32_t
 
d
;

194 
uöt32_t
 
s
;

195 
d
 = 
TICKS_PER_MILLISECOND
/100;

196 
s
 = 
	`RódC‹eTimî
();

197  (
uöt32_t
)(
	`RódC‹eTimî
(Ë- 
s
Ë< 
d
 )

199 
	}
}

204 #i‡
deföed
(
USE_DUMMY_DELAY
)

205 
	$u8g_Dñay
(
uöt16_t
 
vÆ
)

208 
	}
}

209 
	$u8g_Mi¸oDñay
()

211 
	}
}

212 
	$u8g_10Mi¸oDñay
()

214 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_flipdisc_2x7.c

39 
	~"u8g.h
"

41 
	#WIDTH
 28

	)

42 
	#HEIGHT
 14

	)

43 
	#PAGE_HEIGHT
 14

	)

55 
wrôeFlùDiscM©rix
(
uöt8_t
 
id
, uöt8_à
∑ge
, uöt8_à
width
, uöt8_à*
row1
, uöt8_à*
row2
);

59 (*
u8g_wrôe_Êù_disc_m©rix
)(
uöt8_t
 
id
, uöt8_à
∑ge
, uöt8_à
width
, uöt8_à*
row1
, uöt8_à*
row2
);

61 
	`u8g_SëFlùDiscCÆlback
(
u8g_t
 *
u8g
, (*
cb
)(
uöt8_t
 
id
, uöt8_à
∑ge
, uöt8_à
width
, uöt8_à*
row1
, uöt8_à*
row2
))

63 
u8g_wrôe_Êù_disc_m©rix
 = 
cb
;

64 
	}
}

66 
uöt8_t
 
	$u8g_dev_Êùdisc_2x7_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

68 
msg
)

70 
U8G_DEV_MSG_INIT
:

72 
U8G_DEV_MSG_STOP
:

74 
U8G_DEV_MSG_PAGE_NEXT
:

76 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

81 (*
u8g_wrôe_Êù_disc_m©rix
)(0, 
pb
->
p
.
∑ge
, 
WIDTH
,Öb->
buf
,Öb->buf+WIDTH);

84 
U8G_DEV_MSG_CONTRAST
:

87  
	`u8g_dev_pb14v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

88 
	}
}

90 
uöt8_t
 
	gu8g_dev_Êùdisc_2x7_bw_buf
[
WIDTH
*2] 
	gU8G_NOCOMMON
 ;

91 
u8g_pb_t
 
	gu8g_dev_Êùdisc_2x7_bw_pb
 = { {16, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_Êùdisc_2x7_bw_buf
};

92 
u8g_dev_t
 
	gu8g_dev_Êùdisc_2x7
 = { 
u8g_dev_Êùdisc_2x7_bw_‚
, &
u8g_dev_Êùdisc_2x7_bw_pb
, 
u8g_com_nuŒ_‚
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_gprof.c

41 
	~"u8g.h
"

44 
	#WIDTH
 128

	)

45 
	#HEIGHT
 64

	)

46 
	#PAGE_HEIGHT
 8

	)

48 
uöt8_t
 
u8g_dev_g¥of_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

50 
uöt8_t
 
	gu8g_pb_dev_g¥of_buf
[
WIDTH
];

51 
u8g_pb_t
 
	gu8g_pb_dev_g¥of
 = { {
PAGE_HEIGHT
, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_pb_dev_g¥of_buf
 };

53 
u8g_dev_t
 
	gu8g_dev_g¥of
 = { 
u8g_dev_g¥of_‚
, &
u8g_pb_dev_g¥of
, 
NULL
 };

55 
uöt8_t
 
	$u8g_dev_g¥of_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

57 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

59 
msg
)

61 
U8G_DEV_MSG_INIT
:

63 
U8G_DEV_MSG_STOP
:

65 
U8G_DEV_MSG_PAGE_FIRST
:

66 
	`u8g_pb_CÀ¨
(
pb
);

67 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

69 
U8G_DEV_MSG_PAGE_NEXT
:

91 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

96 
	`u8g_pb_CÀ¨
(
pb
);

98 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


99 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

101 
u8g_dev_¨g_bbx_t
 *
bbx
 = (u8g_dev_¨g_bbx_à*)
¨g
;

102 
u8g_uöt_t
 
x2
, 
y2
;

104 
y2
 = 
bbx
->
y
;

105 
y2
 +
bbx
->
h
;

106 
y2
--;

108 i‡–
	`u8g_pb_IsYI¡î£˘i⁄
(
pb
, 
bbx
->
y
, 
y2
) == 0 )

112 
x2
 = 
bbx
->
x
;

113 
x2
 +
bbx
->
w
;

114 
x2
--;

116 i‡–
	`u8g_pb_IsXI¡î£˘i⁄
(
pb
, 
bbx
->
x
, 
x2
) == 0 )

121 
U8G_DEV_MSG_GET_PAGE_BOX
:

122 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

124 
U8G_DEV_MSG_SET_COLOR_INDEX
:

126 
U8G_DEV_MSG_SET_XY_CB
:

129  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

130 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_ili9325d_320x240.c

42 
	~"u8g.h
"

44 
	#WIDTH
 240

	)

46 #i‡
deföed
(
U8G_16BIT
)

47 
	#HEIGHT
 320

	)

50 
	#HEIGHT
 240

	)

52 
	#PAGE_HEIGHT
 4

	)

68 c⁄° 
uöt8_t
 
	gu8g_dev_ûi9325d_320x240_öô_£q
[] 
	gPROGMEM
 = {

69 
U8G_ESC_CS
(0),

70 
U8G_ESC_DLY
(50),

71 
U8G_ESC_RST
(15),

72 
U8G_ESC_DLY
(50),

73 
U8G_ESC_RST
(15),

74 
U8G_ESC_DLY
(50),

75 
U8G_ESC_CS
(1),

76 
U8G_ESC_DLY
(50),

81 
U8G_ESC_ADR
(0), 0x000, 0x001,

82 
U8G_ESC_ADR
(1), 0x001, 0x000,

83 
U8G_ESC_ADR
(0), 0x000, 0x002,

84 
U8G_ESC_ADR
(1), 0x002, 0x000,

85 
U8G_ESC_ADR
(0), 0x000, 0x003,

86 
U8G_ESC_ADR
(1), 0x010, 0x030,

87 
U8G_ESC_ADR
(0), 0x000, 0x004,

88 
U8G_ESC_ADR
(1), 0x000, 0x000,

89 
U8G_ESC_ADR
(0), 0x000, 0x008,

90 
U8G_ESC_ADR
(1), 0x002, 0x007,

92 
U8G_ESC_ADR
(0), 0x000, 0x009,

93 
U8G_ESC_ADR
(1), 0x000, 0x000,

95 
U8G_ESC_ADR
(0), 0x000, 0x00a,

96 
U8G_ESC_ADR
(1), 0x000, 0x000,

97 
U8G_ESC_ADR
(0), 0x000, 0x00c,

98 
U8G_ESC_ADR
(1), 0x000, 0x000,

99 
U8G_ESC_ADR
(0), 0x000, 0x00d,

100 
U8G_ESC_ADR
(1), 0x000, 0x000,

101 
U8G_ESC_ADR
(0), 0x000, 0x00f,

102 
U8G_ESC_ADR
(1), 0x000, 0x000,

103 
U8G_ESC_ADR
(0), 0x000, 0x010,

104 
U8G_ESC_ADR
(1), 0x000, 0x000,

105 
U8G_ESC_ADR
(0), 0x000, 0x011,

106 
U8G_ESC_ADR
(1), 0x000, 0x007,

107 
U8G_ESC_ADR
(0), 0x000, 0x012,

108 
U8G_ESC_ADR
(1), 0x000, 0x000,

109 
U8G_ESC_ADR
(0), 0x000, 0x013,

110 
U8G_ESC_ADR
(1), 0x000, 0x000,

111 
U8G_ESC_ADR
(0), 0x000, 0x007,

112 
U8G_ESC_ADR
(1), 0x000, 0x001,

114 
U8G_ESC_DLY
(100),

115 
U8G_ESC_DLY
(100),

117 
U8G_ESC_ADR
(0), 0x000, 0x010,

118 
U8G_ESC_ADR
(1), 0x016, 0x090,

119 
U8G_ESC_ADR
(0), 0x000, 0x011,

120 
U8G_ESC_ADR
(1), 0x002, 0x027,

122 
U8G_ESC_DLY
(50),

124 
U8G_ESC_ADR
(0), 0x000, 0x012,

125 
U8G_ESC_ADR
(1), 0x000, 0x00d,

127 
U8G_ESC_DLY
(50),

129 
U8G_ESC_ADR
(0), 0x000, 0x013,

130 
U8G_ESC_ADR
(1), 0x012, 0x000,

131 
U8G_ESC_ADR
(0), 0x000, 0x029,

132 
U8G_ESC_ADR
(1), 0x000, 0x00a,

133 
U8G_ESC_ADR
(0), 0x000, 0x02b,

134 
U8G_ESC_ADR
(1), 0x000, 0x00d,

136 
U8G_ESC_DLY
(50),

138 
U8G_ESC_ADR
(0), 0x000, 0x020,

139 
U8G_ESC_ADR
(1), 0x000, 0x000,

140 
U8G_ESC_ADR
(0), 0x000, 0x021,

141 
U8G_ESC_ADR
(1), 0x000, 0x000,

144 
U8G_ESC_ADR
(0), 0x000, 0x030,

145 
U8G_ESC_ADR
(1), 0x000, 0x000,

146 
U8G_ESC_ADR
(0), 0x000, 0x031,

147 
U8G_ESC_ADR
(1), 0x004, 0x004,

148 
U8G_ESC_ADR
(0), 0x000, 0x032,

149 
U8G_ESC_ADR
(1), 0x000, 0x003,

150 
U8G_ESC_ADR
(0), 0x000, 0x035,

151 
U8G_ESC_ADR
(1), 0x004, 0x005,

152 
U8G_ESC_ADR
(0), 0x000, 0x036,

153 
U8G_ESC_ADR
(1), 0x008, 0x008,

154 
U8G_ESC_ADR
(0), 0x000, 0x037,

155 
U8G_ESC_ADR
(1), 0x004, 0x007,

156 
U8G_ESC_ADR
(0), 0x000, 0x038,

157 
U8G_ESC_ADR
(1), 0x003, 0x003,

158 
U8G_ESC_ADR
(0), 0x000, 0x039,

159 
U8G_ESC_ADR
(1), 0x007, 0x007,

160 
U8G_ESC_ADR
(0), 0x000, 0x03c,

161 
U8G_ESC_ADR
(1), 0x005, 0x004,

162 
U8G_ESC_ADR
(0), 0x000, 0x03d,

163 
U8G_ESC_ADR
(1), 0x008, 0x008,

165 
U8G_ESC_ADR
(0), 0x000, 0x050,

166 
U8G_ESC_ADR
(1), 0x000, 0x000,

167 
U8G_ESC_ADR
(0), 0x000, 0x051,

168 
U8G_ESC_ADR
(1), 0x000, 0x0EF,

169 
U8G_ESC_ADR
(0), 0x000, 0x052,

170 
U8G_ESC_ADR
(1), 0x000, 0x000,

171 
U8G_ESC_ADR
(0), 0x000, 0x053,

172 
U8G_ESC_ADR
(1), 0x001, 0x03F,

174 
U8G_ESC_ADR
(0), 0x000, 0x060,

175 
U8G_ESC_ADR
(1), 0x0a7, 0x000,

176 
U8G_ESC_ADR
(0), 0x000, 0x061,

177 
U8G_ESC_ADR
(1), 0x000, 0x001,

178 
U8G_ESC_ADR
(0), 0x000, 0x06a,

179 
U8G_ESC_ADR
(1), 0x000, 0x000,

181 
U8G_ESC_ADR
(0), 0x000, 0x080,

182 
U8G_ESC_ADR
(1), 0x000, 0x000,

183 
U8G_ESC_ADR
(0), 0x000, 0x081,

184 
U8G_ESC_ADR
(1), 0x000, 0x000,

185 
U8G_ESC_ADR
(0), 0x000, 0x082,

186 
U8G_ESC_ADR
(1), 0x000, 0x000,

187 
U8G_ESC_ADR
(0), 0x000, 0x083,

188 
U8G_ESC_ADR
(1), 0x000, 0x000,

189 
U8G_ESC_ADR
(0), 0x000, 0x084,

190 
U8G_ESC_ADR
(1), 0x000, 0x000,

191 
U8G_ESC_ADR
(0), 0x000, 0x085,

192 
U8G_ESC_ADR
(1), 0x000, 0x000,

194 
U8G_ESC_ADR
(0), 0x000, 0x090,

195 
U8G_ESC_ADR
(1), 0x000, 0x010,

196 
U8G_ESC_ADR
(0), 0x000, 0x092,

197 
U8G_ESC_ADR
(1), 0x000, 0x000,

199 
U8G_ESC_ADR
(0), 0x000, 0x007,

200 
U8G_ESC_ADR
(1), 0x001, 0x033,

202 
U8G_ESC_DLY
(10),

205 
U8G_ESC_ADR
(0), 0x000, 0x020,

206 
U8G_ESC_ADR
(1), 0x000, 0x000,

207 
U8G_ESC_ADR
(0), 0x000, 0x021,

208 
U8G_ESC_ADR
(1), 0x000, 0x010,

209 
U8G_ESC_ADR
(0), 0x000, 0x022,

210 
U8G_ESC_ADR
(1), 0x0fe, 0x0fe,

228 
U8G_ESC_CS
(0),

229 
U8G_ESC_END


233 c⁄° 
uöt8_t
 
	gu8g_dev_ûi9325d_320x240_∑ge_£q
[] 
	gPROGMEM
 = {

234 
U8G_ESC_CS
(1),

235 
U8G_ESC_ADR
(0), 0x000, 0x020,

236 
U8G_ESC_ADR
(1), 0x000, 0x000,

237 
U8G_ESC_ADR
(0), 0x000, 0x021,

238 
U8G_ESC_ADR
(1),

239 
U8G_ESC_END


243 
uöt8_t
 
	$u8g_dev_ûi9325d_gë_65K_high_byã
(
uöt8_t
 
cﬁ‹
)

245 
uöt8_t
 
h
;

246 
h
 = 
cﬁ‹
;

247 
h
 &= 0x0e0;

248 
h
 |= h>>3;

249 
h
 &= 0x0f8;

250 
cﬁ‹
>>=2;

251 
cﬁ‹
 &= 7;

252 
h
 |
cﬁ‹
;

253  
h
;

254 
	}
}

257 
uöt8_t
 
	$u8g_dev_ûi9325d_gë_65K_low_byã
(
uöt8_t
 
cﬁ‹
)

259 
uöt8_t
 
l
;

260 
l
 = 
cﬁ‹
;

261 
l
 <<= 3;

262 
cﬁ‹
 &= 3;

263 
cﬁ‹
 <<= 1;

264 
l
 |
cﬁ‹
;

265  
l
;

266 
	}
}

269 
uöt8_t
 
	$u8g_dev_ûi9325d_320x240_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

272 
msg
)

274 
U8G_DEV_MSG_INIT
:

275 
	`u8g_InôCom
(
u8g
, 
dev
);

277 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ûi9325d_320x240_öô_£q
);

280 
U8G_DEV_MSG_STOP
:

282 
U8G_DEV_MSG_PAGE_NEXT
:

284 
uöt8_t
 
i
;

285 
uöt16_t
 
y
, 
j
;

286 
uöt8_t
 *
±r
;

287 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

289 
y
 = 
pb
->
p
.
∑ge_y0
;

290 
±r
 = 
pb
->
buf
;

291  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i ++ )

293 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ûi9325d_320x240_∑ge_£q
);

294 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
y
 >> 8 );

295 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
y
 & 255 );

297 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

298 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0 );

299 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x022 );

301 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

303  
j
 = 0; j < 
pb
->
width
; j++ )

305 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`u8g_dev_ûi9325d_gë_65K_high_byã
(*
±r
) );

306 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`u8g_dev_ûi9325d_gë_65K_low_byã
(*
±r
) );

308 
±r
++;

310 
y
++;

312 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

316  
	`u8g_dev_pb8h8_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

317 
	}
}

319 
uöt8_t
 
	gu8g_ûi9325d_320x240_8h8_buf
[
WIDTH
*
PAGE_HEIGHT
] 
	gU8G_NOCOMMON
 ;

320 
u8g_pb_t
 
u8g_ûi9325d_320x240_8h8_pb
 
	gU8G_NOCOMMON
 = { {
PAGE_HEIGHT
, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_ûi9325d_320x240_8h8_buf
};

321 
u8g_dev_t
 
u8g_dev_ûi9325d_320x240_8bô
 
	gU8G_NOCOMMON
 = { 
u8g_dev_ûi9325d_320x240_‚
, &
u8g_ûi9325d_320x240_8h8_pb
, 
u8g_com_¨duöo_p‹t_d_wr_‚
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_ks0108_128x64.c

47 
	~"u8g.h
"

49 
	#WIDTH
 128

	)

50 
	#HEIGHT
 64

	)

51 
	#PAGE_HEIGHT
 8

	)

53 c⁄° 
uöt8_t
 
	gu8g_dev_ks0108_128x64_öô_£q
[] 
	gPROGMEM
 = {

54 
U8G_ESC_CS
(0),

55 
U8G_ESC_ADR
(0),

56 
U8G_ESC_RST
(1),

57 
U8G_ESC_CS
(1),

60 
U8G_ESC_DLY
(20),

61 
U8G_ESC_CS
(2),

64 
U8G_ESC_DLY
(20),

65 
U8G_ESC_CS
(0),

66 
U8G_ESC_END


70 
uöt8_t
 
	$u8g_dev_ks0108_128x64_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

73 
msg
)

75 
U8G_DEV_MSG_INIT
:

76 
	`u8g_InôCom
(
u8g
, 
dev
);

77 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ks0108_128x64_öô_£q
);

79 
U8G_DEV_MSG_STOP
:

81 
U8G_DEV_MSG_PAGE_NEXT
:

83 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

85 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

86 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 2);

87 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b8 | 
pb
->
p
.
∑ge
);

88 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x040 );

89 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

90 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 64, 
pb
->
buf
);

91 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

93 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

94 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

95 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b8 | 
pb
->
p
.
∑ge
);

96 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x040 );

97 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

98 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 64, 64+(
uöt8_t
 *)
pb
->
buf
);

99 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

104  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

105 
	}
}

107 
U8G_PB_DEV
(
u8g_dev_ks0108_128x64
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ks0108_128x64_‚
, 
U8G_COM_PARALLEL
);

108 
U8G_PB_DEV
(
u8g_dev_ks0108_128x64_Á°
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ks0108_128x64_‚
, 
U8G_COM_FAST_PARALLEL
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_lc7981_160x80.c

37 
	~"u8g.h
"

39 
	#WIDTH
 160

	)

40 
	#HEIGHT
 80

	)

41 
	#PAGE_HEIGHT
 8

	)

52 c⁄° 
uöt8_t
 
	gu8g_dev_lc7981_160x80_öô_£q
[] 
	gPROGMEM
 = {

53 
U8G_ESC_CS
(0),

54 
U8G_ESC_ADR
(1),

55 
U8G_ESC_RST
(15),

56 
U8G_ESC_CS
(1),

57 
U8G_ESC_DLY
(50),

60 
U8G_ESC_ADR
(1),

62 
U8G_ESC_ADR
(0),

65 
U8G_ESC_ADR
(1),

67 
U8G_ESC_ADR
(0),

70 
U8G_ESC_ADR
(1),

72 
U8G_ESC_ADR
(0),

73 
WIDTH
/8-1,

75 
U8G_ESC_ADR
(1),

77 
U8G_ESC_ADR
(0),

80 
U8G_ESC_ADR
(1),

82 
U8G_ESC_ADR
(0),

85 
U8G_ESC_ADR
(1),

87 
U8G_ESC_ADR
(0),

90 
U8G_ESC_DLY
(10),

92 
U8G_ESC_CS
(0),

93 
U8G_ESC_END


96 
uöt8_t
 
	$u8g_dev_lc7981_160x80_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

98 
msg
)

100 
U8G_DEV_MSG_INIT
:

101 
	`u8g_InôCom
(
u8g
, 
dev
);

102 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_lc7981_160x80_öô_£q
);

104 
U8G_DEV_MSG_STOP
:

106 
U8G_DEV_MSG_PAGE_NEXT
:

108 
uöt8_t
 
y
, 
i
;

109 
uöt16_t
 
di•_øm_adr
;

110 
uöt8_t
 *
±r
;

111 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

113 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

114 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

115 
y
 = 
pb
->
p
.
∑ge_y0
;

116 
±r
 = 
pb
->
buf
;

117 
di•_øm_adr
 = 
WIDTH
/8;

118 
di•_øm_adr
 *
y
;

119  
i
 = 0; i < 8; i ++ )

121 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

122 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00a );

123 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

124 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
 & 0x0ff );

126 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

127 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00b );

128 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

129 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
 >> 8 );

131 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

132 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00c );

133 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

134 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

135 
±r
 +
WIDTH
/8;

136 
di•_øm_adr
 +
WIDTH
/8;

138 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

142  
	`u8g_dev_pb8h1f_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

143 
	}
}

145 
U8G_PB_DEV
(
u8g_dev_lc7981_160x80_8bô
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_lc7981_160x80_‚
, 
U8G_COM_FAST_PARALLEL
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_lc7981_240x128.c

39 
	~"u8g.h
"

41 
	#WIDTH
 240

	)

42 
	#HEIGHT
 128

	)

43 
	#PAGE_HEIGHT
 8

	)

50 c⁄° 
uöt8_t
 
	gu8g_dev_lc7981_240x128_öô_£q
[] 
	gPROGMEM
 = {

51 
U8G_ESC_CS
(0),

52 
U8G_ESC_ADR
(1),

53 
U8G_ESC_RST
(15),

54 
U8G_ESC_CS
(1),

55 
U8G_ESC_DLY
(50),

58 
U8G_ESC_ADR
(1),

60 
U8G_ESC_ADR
(0),

63 
U8G_ESC_ADR
(1),

65 
U8G_ESC_ADR
(0),

68 
U8G_ESC_ADR
(1),

70 
U8G_ESC_ADR
(0),

71 
WIDTH
/8-1,

73 
U8G_ESC_ADR
(1),

75 
U8G_ESC_ADR
(0),

78 
U8G_ESC_ADR
(1),

80 
U8G_ESC_ADR
(0),

83 
U8G_ESC_ADR
(1),

85 
U8G_ESC_ADR
(0),

88 
U8G_ESC_DLY
(10),

90 
U8G_ESC_CS
(0),

91 
U8G_ESC_END


94 
uöt8_t
 
	$u8g_dev_lc7981_240x128_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

96 
msg
)

98 
U8G_DEV_MSG_INIT
:

99 
	`u8g_InôCom
(
u8g
, 
dev
);

100 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_lc7981_240x128_öô_£q
);

102 
U8G_DEV_MSG_STOP
:

104 
U8G_DEV_MSG_PAGE_NEXT
:

106 
uöt8_t
 
y
, 
i
;

107 
uöt16_t
 
di•_øm_adr
;

108 
uöt8_t
 *
±r
;

109 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

111 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

112 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

113 
y
 = 
pb
->
p
.
∑ge_y0
;

114 
±r
 = 
pb
->
buf
;

115 
di•_øm_adr
 = 
WIDTH
/8;

116 
di•_øm_adr
 *
y
;

117  
i
 = 0; i < 8; i ++ )

119 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

120 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00a );

121 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

122 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
 & 0x0ff );

124 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

125 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00b );

126 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

127 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
 >> 8 );

129 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

130 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00c );

131 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

132 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

133 
±r
 +
WIDTH
/8;

134 
di•_øm_adr
 +
WIDTH
/8;

136 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

140  
	`u8g_dev_pb8h1f_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

141 
	}
}

143 
U8G_PB_DEV
(
u8g_dev_lc7981_240x128_8bô
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_lc7981_240x128_‚
, 
U8G_COM_FAST_PARALLEL
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_lc7981_240x64.c

39 
	~"u8g.h
"

41 
	#WIDTH
 240

	)

42 
	#HEIGHT
 64

	)

43 
	#PAGE_HEIGHT
 8

	)

50 c⁄° 
uöt8_t
 
	gu8g_dev_lc7981_240x64_öô_£q
[] 
	gPROGMEM
 = {

51 
U8G_ESC_CS
(0),

52 
U8G_ESC_ADR
(1),

53 
U8G_ESC_RST
(15),

54 
U8G_ESC_CS
(1),

55 
U8G_ESC_DLY
(50),

58 
U8G_ESC_ADR
(1),

60 
U8G_ESC_ADR
(0),

63 
U8G_ESC_ADR
(1),

65 
U8G_ESC_ADR
(0),

68 
U8G_ESC_ADR
(1),

70 
U8G_ESC_ADR
(0),

71 
WIDTH
/8-1,

73 
U8G_ESC_ADR
(1),

75 
U8G_ESC_ADR
(0),

78 
U8G_ESC_ADR
(1),

80 
U8G_ESC_ADR
(0),

83 
U8G_ESC_ADR
(1),

85 
U8G_ESC_ADR
(0),

88 
U8G_ESC_DLY
(10),

90 
U8G_ESC_CS
(0),

91 
U8G_ESC_END


94 
uöt8_t
 
	$u8g_dev_lc7981_240x64_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

96 
msg
)

98 
U8G_DEV_MSG_INIT
:

99 
	`u8g_InôCom
(
u8g
, 
dev
);

100 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_lc7981_240x64_öô_£q
);

102 
U8G_DEV_MSG_STOP
:

104 
U8G_DEV_MSG_PAGE_NEXT
:

106 
uöt8_t
 
y
, 
i
;

107 
uöt16_t
 
di•_øm_adr
;

108 
uöt8_t
 *
±r
;

109 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

111 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

112 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

113 
y
 = 
pb
->
p
.
∑ge_y0
;

114 
±r
 = 
pb
->
buf
;

115 
di•_øm_adr
 = 
WIDTH
/8;

116 
di•_øm_adr
 *
y
;

117  
i
 = 0; i < 8; i ++ )

119 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

120 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00a );

121 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

122 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
 & 0x0ff );

124 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

125 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00b );

126 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

127 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
 >> 8 );

129 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

130 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00c );

131 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

132 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

133 
±r
 +
WIDTH
/8;

134 
di•_øm_adr
 +
WIDTH
/8;

136 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

140  
	`u8g_dev_pb8h1f_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

141 
	}
}

143 
U8G_PB_DEV
(
u8g_dev_lc7981_240x64_8bô
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_lc7981_240x64_‚
, 
U8G_COM_FAST_PARALLEL
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_lc7981_320x64.c

41 
	~"u8g.h
"

43 
	#WIDTH
 320

	)

44 
	#HEIGHT
 64

	)

45 
	#PAGE_HEIGHT
 8

	)

52 c⁄° 
uöt8_t
 
	gu8g_dev_lc7981_320x64_öô_£q
[] 
	gPROGMEM
 = {

53 
U8G_ESC_CS
(0),

54 
U8G_ESC_ADR
(1),

55 
U8G_ESC_RST
(15),

56 
U8G_ESC_CS
(1),

57 
U8G_ESC_DLY
(50),

60 
U8G_ESC_ADR
(1),

62 
U8G_ESC_ADR
(0),

65 
U8G_ESC_ADR
(1),

67 
U8G_ESC_ADR
(0),

70 
U8G_ESC_ADR
(1),

72 
U8G_ESC_ADR
(0),

73 
WIDTH
/8-1,

75 
U8G_ESC_ADR
(1),

77 
U8G_ESC_ADR
(0),

80 
U8G_ESC_ADR
(1),

82 
U8G_ESC_ADR
(0),

85 
U8G_ESC_ADR
(1),

87 
U8G_ESC_ADR
(0),

90 
U8G_ESC_DLY
(10),

92 
U8G_ESC_CS
(0),

93 
U8G_ESC_END


96 
uöt8_t
 
	$u8g_dev_lc7981_320x64_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

98 
msg
)

100 
U8G_DEV_MSG_INIT
:

101 
	`u8g_InôCom
(
u8g
, 
dev
);

102 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_lc7981_320x64_öô_£q
);

104 
U8G_DEV_MSG_STOP
:

106 
U8G_DEV_MSG_PAGE_NEXT
:

108 
uöt8_t
 
y
, 
i
;

109 
uöt16_t
 
di•_øm_adr
;

110 
uöt8_t
 *
±r
;

111 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

113 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

114 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

115 
y
 = 
pb
->
p
.
∑ge_y0
;

116 
±r
 = 
pb
->
buf
;

117 
di•_øm_adr
 = 
WIDTH
/8;

118 
di•_øm_adr
 *
y
;

119  
i
 = 0; i < 8; i ++ )

121 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

122 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00a );

123 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

124 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
 & 0x0ff );

126 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

127 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00b );

128 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

129 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
 >> 8 );

131 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

132 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00c );

133 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

134 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

135 
±r
 +
WIDTH
/8;

136 
di•_øm_adr
 +
WIDTH
/8;

138 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

142  
	`u8g_dev_pb8h1f_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

143 
	}
}

145 
U8G_PB_DEV
(
u8g_dev_lc7981_320x64_8bô
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_lc7981_320x64_‚
, 
U8G_COM_FAST_PARALLEL
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_null.c

37 
	~"u8g.h
"

39 
uöt8_t
 
	$u8g_dev_nuŒ
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

41 
msg
)

43 
U8G_DEV_MSG_SET_8PIXEL
:

45 
U8G_DEV_MSG_SET_PIXEL
:

47 
U8G_DEV_MSG_INIT
:

49 
U8G_DEV_MSG_STOP
:

51 
U8G_DEV_MSG_PAGE_FIRST
:

53 
U8G_DEV_MSG_PAGE_NEXT
:

55 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


56 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

59 
U8G_DEV_MSG_GET_PAGE_BOX
:

61 
U8G_DEV_MSG_SET_COLOR_INDEX
:

63 
U8G_DEV_MSG_SET_XY_CB
:

67 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_pcd8544_84x48.c

42 
	~"u8g.h
"

44 
	#WIDTH
 84

	)

45 
	#HEIGHT
 48

	)

46 
	#PAGE_HEIGHT
 8

	)

49 c⁄° 
uöt8_t
 
	gu8g_dev_pcd8544_öô_£q
[] 
	gPROGMEM
 = {

50 
U8G_ESC_CS
(0),

51 
U8G_ESC_ADR
(0),

52 
U8G_ESC_RST
(1),

53 
U8G_ESC_CS
(1),

60 
U8G_ESC_DLY
(100),

63 
U8G_ESC_DLY
(100),

64 
U8G_ESC_DLY
(100),

67 
U8G_ESC_DLY
(100),

68 
U8G_ESC_CS
(0),

69 
U8G_ESC_END


72 
uöt8_t
 
	$u8g_dev_pcd8544_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

74 
msg
)

76 
U8G_DEV_MSG_INIT
:

77 
	`u8g_InôCom
(
u8g
, 
dev
);

78 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_pcd8544_öô_£q
);

80 
U8G_DEV_MSG_STOP
:

82 
U8G_DEV_MSG_PAGE_NEXT
:

84 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

85 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

86 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

87 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x020 );

88 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

89 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x040 | 
pb
->
p
.
∑ge
);

90 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

91 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

93 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

96 
U8G_DEV_MSG_CONTRAST
:

98 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

99 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

100 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x021);

101 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | ( (*(
uöt8_t
 *)
¨g
) >> 1 ) );

102 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

105  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

106 
	}
}

109 
U8G_PB_DEV
(
u8g_dev_pcd8544_84x48_sw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_pcd8544_‚
, 
U8G_COM_SW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_pcf8812_96x65.c

56 
	~"u8g.h
"

58 
	#WIDTH
 96

	)

59 
	#HEIGHT
 65

	)

60 
	#PAGE_HEIGHT
 8

	)

63 c⁄° 
uöt8_t
 
	gu8g_dev_pcf8812_öô_£q
[] 
	gPROGMEM
 = {

64 
U8G_ESC_CS
(0),

65 
U8G_ESC_ADR
(0),

66 
U8G_ESC_RST
(1),

67 
U8G_ESC_CS
(1),

74 
U8G_ESC_DLY
(100),

77 
U8G_ESC_DLY
(100),

78 
U8G_ESC_DLY
(100),

81 
U8G_ESC_DLY
(100),

82 
U8G_ESC_CS
(0),

83 
U8G_ESC_END


86 
uöt8_t
 
	$u8g_dev_pcf8812_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

88 
msg
)

90 
U8G_DEV_MSG_INIT
:

91 
	`u8g_InôCom
(
u8g
, 
dev
);

92 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_pcf8812_öô_£q
);

94 
U8G_DEV_MSG_STOP
:

96 
U8G_DEV_MSG_PAGE_NEXT
:

98 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

99 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

100 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

101 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x020 );

102 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

103 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x040 | 
pb
->
p
.
∑ge
);

104 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

105 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

107 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

110 
U8G_DEV_MSG_CONTRAST
:

112 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

113 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

114 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x021);

115 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | ( (*(
uöt8_t
 *)
¨g
) >> 1 ) );

116 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

119  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

120 
	}
}

123 
U8G_PB_DEV
(
u8g_dev_pcf8812_96x65_sw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_pcf8812_‚
, 
U8G_COM_SW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_sbn1661_122x32.c

40 
	~"u8g.h
"

42 
	#WIDTH
 122

	)

43 
	#HEIGHT
 32

	)

44 
	#PAGE_HEIGHT
 8

	)

47 c⁄° 
uöt8_t
 
	gu8g_dev_sbn1661_122x32_öô_£q
[] 
	gPROGMEM
 = {

48 
U8G_ESC_CS
(0),

49 
U8G_ESC_ADR
(0),

50 
U8G_ESC_RST
(15),

51 
U8G_ESC_CS
(1),

56 
U8G_ESC_CS
(2),

62 
U8G_ESC_CS
(0),

65 
U8G_ESC_END


68 
uöt8_t
 
	$u8g_dev_sbn1661_122x32_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

70 
msg
)

72 
U8G_DEV_MSG_INIT
:

73 
	`u8g_InôCom
(
u8g
, 
dev
);

74 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_sbn1661_122x32_öô_£q
);

76 
U8G_DEV_MSG_STOP
:

78 
U8G_DEV_MSG_PAGE_NEXT
:

80 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

82 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

83 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

84 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b8 | 
pb
->
p
.
∑ge
);

85 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x000 );

86 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

87 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/2, 
pb
->
buf
);

89 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

90 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 2);

91 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b8 | 
pb
->
p
.
∑ge
);

92 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x000 );

93 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

94 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/2, WIDTH/2+(
uöt8_t
 *)
pb
->
buf
);

96 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

100 
U8G_DEV_MSG_CONTRAST
:

103  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

104 
	}
}

107 
U8G_PB_DEV
(
u8g_dev_sbn1661_122x32
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_sbn1661_122x32_‚
, 
u8g_com_¨duöo_no_í_∑øŒñ_‚
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_ssd1306_128x32.c

40 
	~"u8g.h
"

42 
	#WIDTH
 128

	)

43 
	#HEIGHT
 32

	)

44 
	#PAGE_HEIGHT
 8

	)

48 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x32_ada‰uô1_öô_£q
[] 
	gPROGMEM
 = {

49 
U8G_ESC_CS
(0),

50 
U8G_ESC_ADR
(0),

51 
U8G_ESC_RST
(1),

52 
U8G_ESC_CS
(1),

77 
U8G_ESC_CS
(0),

78 
U8G_ESC_END


83 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x32_ada‰uô2_öô_£q
[] 
	gPROGMEM
 = {

84 
U8G_ESC_CS
(0),

85 
U8G_ESC_ADR
(0),

86 
U8G_ESC_RST
(1),

87 
U8G_ESC_CS
(1),

112 
U8G_ESC_CS
(0),

113 
U8G_ESC_END


118 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x32_ada‰uô3_öô_£q
[] 
	gPROGMEM
 = {

119 
U8G_ESC_CS
(0),

120 
U8G_ESC_ADR
(0),

121 
U8G_ESC_RST
(1),

122 
U8G_ESC_CS
(1),

147 
U8G_ESC_CS
(0),

148 
U8G_ESC_END


153 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x32_univisi⁄_öô_£q
[] 
	gPROGMEM
 = {

154 
U8G_ESC_CS
(0),

155 
U8G_ESC_ADR
(0),

156 
U8G_ESC_RST
(1),

157 
U8G_ESC_CS
(1),

175 
U8G_ESC_CS
(0),

176 
U8G_ESC_END


184 
	#u8g_dev_ssd1306_128x32_öô_£q
 
u8g_dev_ssd1306_128x32_ada‰uô3_öô_£q


	)

187 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x32_d©a_°¨t
[] 
	gPROGMEM
 = {

188 
U8G_ESC_ADR
(0),

189 
U8G_ESC_CS
(1),

192 
U8G_ESC_END


195 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_⁄
[] 
	gPROGMEM
 = {

196 
U8G_ESC_ADR
(0),

197 
U8G_ESC_CS
(1),

199 
U8G_ESC_CS
(1),

200 
U8G_ESC_END


203 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_off
[] 
	gPROGMEM
 = {

204 
U8G_ESC_ADR
(0),

205 
U8G_ESC_CS
(1),

207 
U8G_ESC_DLY
(50),

208 
U8G_ESC_CS
(1),

209 
U8G_ESC_END


212 
uöt8_t
 
	$u8g_dev_ssd1306_128x32_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

214 
msg
)

216 
U8G_DEV_MSG_INIT
:

217 
	`u8g_InôCom
(
u8g
, 
dev
);

218 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1306_128x32_öô_£q
);

220 
U8G_DEV_MSG_STOP
:

222 
U8G_DEV_MSG_PAGE_NEXT
:

224 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

225 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1306_128x32_d©a_°¨t
);

226 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

227 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

228 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

230 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

233 
U8G_DEV_MSG_SLEEP_ON
:

234 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

236 
U8G_DEV_MSG_SLEEP_OFF
:

237 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

241  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

242 
	}
}

244 
U8G_PB_DEV
(
u8g_dev_ssd1306_128x32_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1306_128x32_‚
, 
U8G_COM_SW_SPI
);

245 
U8G_PB_DEV
(
u8g_dev_ssd1306_128x32_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1306_128x32_‚
, 
U8G_COM_HW_SPI
);

246 
U8G_PB_DEV
(
u8g_dev_ssd1306_128x32_i2c
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1306_128x32_‚
, 
U8G_COM_SSD_I2C
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_ssd1306_128x64.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

44 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x64_ada‰uô1_öô_£q
[] 
	gPROGMEM
 = {

45 
U8G_ESC_CS
(0),

46 
U8G_ESC_ADR
(0),

47 
U8G_ESC_RST
(1),

48 
U8G_ESC_CS
(1),

73 
U8G_ESC_CS
(0),

74 
U8G_ESC_END


78 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x64_ada‰uô2_öô_£q
[] 
	gPROGMEM
 = {

79 
U8G_ESC_CS
(0),

80 
U8G_ESC_ADR
(0),

81 
U8G_ESC_RST
(1),

82 
U8G_ESC_CS
(1),

107 
U8G_ESC_CS
(0),

108 
U8G_ESC_END


112 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x64_ada‰uô3_öô_£q
[] 
	gPROGMEM
 = {

113 
U8G_ESC_CS
(0),

114 
U8G_ESC_ADR
(0),

115 
U8G_ESC_RST
(1),

116 
U8G_ESC_CS
(1),

141 
U8G_ESC_CS
(0),

142 
U8G_ESC_END


146 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x64_univisi⁄_öô_£q
[] 
	gPROGMEM
 = {

147 
U8G_ESC_CS
(0),

148 
U8G_ESC_ADR
(0),

149 
U8G_ESC_RST
(1),

150 
U8G_ESC_CS
(1),

168 
U8G_ESC_CS
(0),

169 
U8G_ESC_END


176 
	#u8g_dev_ssd1306_128x64_öô_£q
 
u8g_dev_ssd1306_128x64_ada‰uô3_öô_£q


	)

179 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1306_128x64_d©a_°¨t
[] 
	gPROGMEM
 = {

180 
U8G_ESC_ADR
(0),

181 
U8G_ESC_CS
(1),

184 
U8G_ESC_END


187 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_⁄
[] 
	gPROGMEM
 = {

188 
U8G_ESC_ADR
(0),

189 
U8G_ESC_CS
(1),

191 
U8G_ESC_CS
(1),

192 
U8G_ESC_END


195 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_off
[] 
	gPROGMEM
 = {

196 
U8G_ESC_ADR
(0),

197 
U8G_ESC_CS
(1),

199 
U8G_ESC_DLY
(50),

200 
U8G_ESC_CS
(1),

201 
U8G_ESC_END


204 
uöt8_t
 
	$u8g_dev_ssd1306_128x64_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

206 
msg
)

208 
U8G_DEV_MSG_INIT
:

209 
	`u8g_InôCom
(
u8g
, 
dev
);

210 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1306_128x64_öô_£q
);

212 
U8G_DEV_MSG_STOP
:

214 
U8G_DEV_MSG_PAGE_NEXT
:

216 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

217 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1306_128x64_d©a_°¨t
);

218 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

219 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

220 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

222 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

225 
U8G_DEV_MSG_SLEEP_ON
:

226 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

228 
U8G_DEV_MSG_SLEEP_OFF
:

229 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

232  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

233 
	}
}

235 
U8G_PB_DEV
(
u8g_dev_ssd1306_128x64_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1306_128x64_‚
, 
U8G_COM_SW_SPI
);

236 
U8G_PB_DEV
(
u8g_dev_ssd1306_128x64_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1306_128x64_‚
, 
U8G_COM_HW_SPI
);

237 
U8G_PB_DEV
(
u8g_dev_ssd1306_128x64_i2c
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1306_128x64_‚
, 
U8G_COM_SSD_I2C
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_ssd1309_128x64.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

45 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1309_128x64_öô_£q
[] 
	gPROGMEM
={

46 
U8G_ESC_CS
(0),

47 
U8G_ESC_ADR
(0),

48 
U8G_ESC_RST
(1),

49 
U8G_ESC_CS
(1),

65 
U8G_ESC_VCC
(1),

66 
U8G_ESC_DLY
(50),

68 
U8G_ESC_DLY
(50),

69 
U8G_ESC_CS
(0),

70 
U8G_ESC_END


74 
	#u8g_dev_ssd1309_128x64_öô_£q
 
u8g_dev_ssd1309_128x64_öô_£q


	)

77 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1309_128x64_d©a_°¨t
[] 
	gPROGMEM
 = {

78 
U8G_ESC_ADR
(0),

79 
U8G_ESC_CS
(1),

82 
U8G_ESC_END


85 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_⁄
[] 
	gPROGMEM
 = {

86 
U8G_ESC_ADR
(0),

87 
U8G_ESC_CS
(1),

89 
U8G_ESC_CS
(1),

90 
U8G_ESC_END


93 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_off
[] 
	gPROGMEM
 = {

94 
U8G_ESC_ADR
(0),

95 
U8G_ESC_CS
(1),

97 
U8G_ESC_DLY
(50),

98 
U8G_ESC_CS
(1),

99 
U8G_ESC_END


102 
uöt8_t
 
	$u8g_dev_ssd1309_128x64_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

104 
msg
)

106 
U8G_DEV_MSG_INIT
:

107 
	`u8g_InôCom
(
u8g
, 
dev
);

108 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1309_128x64_öô_£q
);

110 
U8G_DEV_MSG_STOP
:

112 
U8G_DEV_MSG_PAGE_NEXT
:

114 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

115 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1309_128x64_d©a_°¨t
);

116 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

117 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

118 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

120 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

123 
U8G_DEV_MSG_CONTRAST
:

124 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

125 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

126 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

127 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

128 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

130 
U8G_DEV_MSG_SLEEP_ON
:

131 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

133 
U8G_DEV_MSG_SLEEP_OFF
:

134 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

137  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

138 
	}
}

140 
U8G_PB_DEV
(
u8g_dev_ssd1309_128x64_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1309_128x64_‚
, 
U8G_COM_HW_SPI
);

141 
U8G_PB_DEV
(
u8g_dev_ssd1309_128x64_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1309_128x64_‚
, 
U8G_COM_SW_SPI
);

142 
U8G_PB_DEV
(
u8g_dev_ssd1309_128x64_i2c
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1309_128x64_‚
, 
U8G_COM_SSD_I2C
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_ssd1322_nhd31oled_bw.c

44 
	~"u8g.h
"

47 #i‡
deföed
(
U8G_16BIT
)

48 
	#WIDTH
 256

	)

50 
	#WIDTH
 248

	)

52 
	#HEIGHT
 64

	)

53 
	#PAGE_HEIGHT
 8

	)

60 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1322_1bô_nhd_312_öô_£q
[] 
	gPROGMEM
 = {

61 
U8G_ESC_DLY
(10),

62 
U8G_ESC_CS
(0),

63 
U8G_ESC_ADR
(0),

64 
U8G_ESC_RST
(1),

65 
U8G_ESC_CS
(1),

67 
U8G_ESC_DLY
(100),

68 
U8G_ESC_DLY
(100),

70 
U8G_ESC_ADR
(0),

72 
U8G_ESC_ADR
(1),

75 
U8G_ESC_ADR
(0),

78 
U8G_ESC_ADR
(0),

80 
U8G_ESC_ADR
(1),

83 
U8G_ESC_ADR
(0),

85 
U8G_ESC_ADR
(1),

88 
U8G_ESC_ADR
(0),

90 
U8G_ESC_ADR
(1),

93 
U8G_ESC_ADR
(0),

95 
U8G_ESC_ADR
(1),

98 
U8G_ESC_ADR
(0),

100 
U8G_ESC_ADR
(1),

104 
U8G_ESC_ADR
(0),

106 
U8G_ESC_ADR
(1),

109 
U8G_ESC_ADR
(0),

111 
U8G_ESC_ADR
(1),

115 
U8G_ESC_ADR
(0),

117 
U8G_ESC_ADR
(1),

120 
U8G_ESC_ADR
(0),

122 
U8G_ESC_ADR
(1),

125 
U8G_ESC_ADR
(0),

128 
U8G_ESC_ADR
(0),

130 
U8G_ESC_ADR
(1),

133 
U8G_ESC_ADR
(0),

135 
U8G_ESC_ADR
(1),

139 
U8G_ESC_ADR
(0),

141 
U8G_ESC_ADR
(1),

144 
U8G_ESC_ADR
(0),

146 
U8G_ESC_ADR
(1),

149 
U8G_ESC_ADR
(0),

151 
U8G_ESC_ADR
(1),

154 
U8G_ESC_ADR
(0),

157 
U8G_ESC_ADR
(0),

160 
U8G_ESC_ADR
(0),

164 
U8G_ESC_CS
(0),

165 
U8G_ESC_END


168 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1322_1bô_nhd_312_¥ï¨e_∑ge_£q
[] 
	gPROGMEM
 = {

169 
U8G_ESC_ADR
(0),

170 
U8G_ESC_CS
(1),

172 
U8G_ESC_ADR
(1),

175 
U8G_ESC_ADR
(0),

177 
U8G_ESC_ADR
(1),

178 
U8G_ESC_END


181 
	$u8g_dev_ssd1322_1bô_¥ï¨e_row
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
dñè_row
)

183 
uöt8_t
 
row
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.
∑ge
;

185 
row
 *((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.
∑ge_height
;

186 
row
 +
dñè_row
;

188 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1322_1bô_nhd_312_¥ï¨e_∑ge_£q
);

190 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
row
);

191 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
row
+1);

193 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

194 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x05c);

195 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

196 
	}
}

198 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_⁄
[] 
	gPROGMEM
 = {

199 
U8G_ESC_ADR
(0),

200 
U8G_ESC_CS
(1),

202 
U8G_ESC_CS
(1),

203 
U8G_ESC_END


206 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_off
[] 
	gPROGMEM
 = {

207 
U8G_ESC_ADR
(0),

208 
U8G_ESC_CS
(1),

210 
U8G_ESC_DLY
(50),

211 
U8G_ESC_CS
(1),

212 
U8G_ESC_END


216 
uöt8_t
 
	$u8g_dev_ssd1322_nhd31ﬁed_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

218 
msg
)

220 
U8G_DEV_MSG_INIT
:

221 
	`u8g_InôCom
(
u8g
, 
dev
);

222 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1322_1bô_nhd_312_öô_£q
);

224 
U8G_DEV_MSG_STOP
:

226 
U8G_DEV_MSG_PAGE_NEXT
:

228 
uöt8_t
 
i
;

229 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

230 
uöt8_t
 *
p
 = 
pb
->
buf
;

231 
u8g_uöt_t
 
˙t
;

232 
˙t
 = 
pb
->
width
;

233 
˙t
 >>= 3;

235  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i++ )

237 
	`u8g_dev_ssd1322_1bô_¥ï¨e_row
(
u8g
, 
dev
, 
i
);

238 #i‡!
	`deföed
(
U8G_16BIT
)

239 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0ff);

240 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0ff);

242 
	`u8g_WrôeSequí˚BWTo16GrDevi˚
(
u8g
, 
dev
, 
˙t
, 
p
);

243 #i‡!
	`deföed
(
U8G_16BIT
)

244 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0ff);

245 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0ff);

247 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

248 
p
+=
˙t
;

252 
U8G_DEV_MSG_CONTRAST
:

253 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

254 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

255 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

256 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

257 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

258 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

260 
U8G_DEV_MSG_SLEEP_ON
:

261 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

263 
U8G_DEV_MSG_SLEEP_OFF
:

264 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

267  
	`u8g_dev_pb8h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

268 
	}
}

271 
uöt8_t
 
	$u8g_dev_ssd1322_nhd31ﬁed_2x_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

273 
msg
)

275 
U8G_DEV_MSG_INIT
:

276 
	`u8g_InôCom
(
u8g
, 
dev
);

277 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1322_1bô_nhd_312_öô_£q
);

279 
U8G_DEV_MSG_STOP
:

281 
U8G_DEV_MSG_PAGE_NEXT
:

283 
uöt8_t
 
i
;

284 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

285 
uöt8_t
 *
p
 = 
pb
->
buf
;

286 
u8g_uöt_t
 
˙t
;

287 
˙t
 = 
pb
->
width
;

288 
˙t
 >>= 3;

290  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i++ )

292 
	`u8g_dev_ssd1322_1bô_¥ï¨e_row
(
u8g
, 
dev
, 
i
);

293 #i‡!
	`deföed
(
U8G_16BIT
)

294 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0ff);

295 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0ff);

297 
	`u8g_WrôeSequí˚BWTo16GrDevi˚
(
u8g
, 
dev
, 
˙t
, 
p
);

298 #i‡!
	`deföed
(
U8G_16BIT
)

299 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0ff);

300 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0ff);

302 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

303 
p
+=
˙t
;

307 
U8G_DEV_MSG_CONTRAST
:

308 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

309 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

310 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

311 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

312 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

313 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

315 
U8G_DEV_MSG_SLEEP_ON
:

316 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

318 
U8G_DEV_MSG_SLEEP_OFF
:

319 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

322  
	`u8g_dev_pb16h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

323 
	}
}

326 
U8G_PB_DEV
(
u8g_dev_ssd1322_nhd31ﬁed_bw_sw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1322_nhd31ﬁed_bw_‚
, 
U8G_COM_SW_SPI
);

327 
U8G_PB_DEV
(
u8g_dev_ssd1322_nhd31ﬁed_bw_hw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1322_nhd31ﬁed_bw_‚
, 
U8G_COM_HW_SPI
);

329 
	#DWIDTH
 (
WIDTH
*2)

	)

330 
uöt8_t
 
	gu8g_dev_ssd1322_nhd31ﬁed_2x_bw_buf
[
DWIDTH
] 
	gU8G_NOCOMMON
 ;

331 
u8g_pb_t
 
	gu8g_dev_ssd1322_nhd31ﬁed_2x_bw_pb
 = { {16, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_buf
};

332 
u8g_dev_t
 
	gu8g_dev_ssd1322_nhd31ﬁed_2x_bw_sw_•i
 = { 
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_‚
, &
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_pb
, 
U8G_COM_SW_SPI
 };

333 
u8g_dev_t
 
	gu8g_dev_ssd1322_nhd31ﬁed_2x_bw_hw_•i
 = { 
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_‚
, &
u8g_dev_ssd1322_nhd31ﬁed_2x_bw_pb
, 
U8G_COM_HW_SPI
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_ssd1322_nhd31oled_gr.c

44 
	~"u8g.h
"

47 #i‡
deföed
(
U8G_16BIT
)

48 
	#WIDTH
 256

	)

50 
	#WIDTH
 248

	)

52 
	#HEIGHT
 64

	)

53 
	#PAGE_HEIGHT
 8

	)

60 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1322_2bô_nhd_312_öô_£q
[] 
	gPROGMEM
 = {

61 
U8G_ESC_DLY
(10),

62 
U8G_ESC_CS
(0),

63 
U8G_ESC_ADR
(0),

64 
U8G_ESC_RST
(1),

65 
U8G_ESC_CS
(1),

67 
U8G_ESC_DLY
(100),

68 
U8G_ESC_DLY
(100),

70 
U8G_ESC_ADR
(0),

72 
U8G_ESC_ADR
(1),

75 
U8G_ESC_ADR
(0),

78 
U8G_ESC_ADR
(0),

80 
U8G_ESC_ADR
(1),

83 
U8G_ESC_ADR
(0),

85 
U8G_ESC_ADR
(1),

88 
U8G_ESC_ADR
(0),

90 
U8G_ESC_ADR
(1),

93 
U8G_ESC_ADR
(0),

95 
U8G_ESC_ADR
(1),

98 
U8G_ESC_ADR
(0),

100 
U8G_ESC_ADR
(1),

104 
U8G_ESC_ADR
(0),

106 
U8G_ESC_ADR
(1),

109 
U8G_ESC_ADR
(0),

111 
U8G_ESC_ADR
(1),

115 
U8G_ESC_ADR
(0),

117 
U8G_ESC_ADR
(1),

120 
U8G_ESC_ADR
(0),

122 
U8G_ESC_ADR
(1),

125 
U8G_ESC_ADR
(0),

128 
U8G_ESC_ADR
(0),

130 
U8G_ESC_ADR
(1),

133 
U8G_ESC_ADR
(0),

135 
U8G_ESC_ADR
(1),

139 
U8G_ESC_ADR
(0),

141 
U8G_ESC_ADR
(1),

144 
U8G_ESC_ADR
(0),

146 
U8G_ESC_ADR
(1),

149 
U8G_ESC_ADR
(0),

151 
U8G_ESC_ADR
(1),

154 
U8G_ESC_ADR
(0),

157 
U8G_ESC_ADR
(0),

160 
U8G_ESC_ADR
(0),

164 
U8G_ESC_CS
(0),

165 
U8G_ESC_END


168 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1322_2bô_nhd_312_¥ï¨e_∑ge_£q
[] 
	gPROGMEM
 = {

169 
U8G_ESC_ADR
(0),

170 
U8G_ESC_CS
(1),

172 
U8G_ESC_ADR
(1),

175 
U8G_ESC_ADR
(0),

177 
U8G_ESC_ADR
(1),

178 
U8G_ESC_END


181 
	$u8g_dev_ssd1322_2bô_¥ï¨e_row
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
dñè_row
)

183 
uöt8_t
 
row
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.
∑ge
;

185 
row
 *((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.
∑ge_height
;

186 
row
 +
dñè_row
;

188 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1322_2bô_nhd_312_¥ï¨e_∑ge_£q
);

190 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
row
);

191 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
row
+1);

193 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

194 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x05c);

195 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

196 
	}
}

198 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_⁄
[] 
	gPROGMEM
 = {

199 
U8G_ESC_ADR
(0),

200 
U8G_ESC_CS
(1),

202 
U8G_ESC_CS
(1),

203 
U8G_ESC_END


206 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_off
[] 
	gPROGMEM
 = {

207 
U8G_ESC_ADR
(0),

208 
U8G_ESC_CS
(1),

210 
U8G_ESC_DLY
(50),

211 
U8G_ESC_CS
(1),

212 
U8G_ESC_END


215 
uöt8_t
 
	$u8g_dev_ssd1322_nhd31ﬁed_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

217 
msg
)

219 
U8G_DEV_MSG_INIT
:

220 
	`u8g_InôCom
(
u8g
, 
dev
);

221 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1322_2bô_nhd_312_öô_£q
);

223 
U8G_DEV_MSG_STOP
:

225 
U8G_DEV_MSG_PAGE_NEXT
:

227 
uöt8_t
 
i
;

228 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

229 
uöt8_t
 *
p
 = 
pb
->
buf
;

230 
u8g_uöt_t
 
˙t
;

231 
˙t
 = 
pb
->
width
;

232 
˙t
 >>= 2;

234  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i++ )

236 
	`u8g_dev_ssd1322_2bô_¥ï¨e_row
(
u8g
, 
dev
, 
i
);

237 #i‡!
	`deföed
(
U8G_16BIT
)

238 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00);

239 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00);

241 
	`u8g_WrôeSequí˚4LTo16GrDevi˚
(
u8g
, 
dev
, 
˙t
, 
p
);

242 #i‡!
	`deföed
(
U8G_16BIT
)

243 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00);

244 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00);

246 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

247 
p
+=
˙t
;

251 
U8G_DEV_MSG_CONTRAST
:

252 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

253 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

254 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

255 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

256 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

257 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

259 
U8G_DEV_MSG_SLEEP_ON
:

260 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

262 
U8G_DEV_MSG_SLEEP_OFF
:

263 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

266  
	`u8g_dev_pb8h2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

267 
	}
}

270 
uöt8_t
 
	$u8g_dev_ssd1322_nhd31ﬁed_2x_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

272 
msg
)

274 
U8G_DEV_MSG_INIT
:

275 
	`u8g_InôCom
(
u8g
, 
dev
);

276 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1322_2bô_nhd_312_öô_£q
);

278 
U8G_DEV_MSG_STOP
:

280 
U8G_DEV_MSG_PAGE_NEXT
:

282 
uöt8_t
 
i
;

283 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

284 
uöt8_t
 *
p
 = 
pb
->
buf
;

285 
u8g_uöt_t
 
˙t
;

286 
˙t
 = 
pb
->
width
;

287 
˙t
 >>= 3;

289  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i++ )

291 
	`u8g_dev_ssd1322_2bô_¥ï¨e_row
(
u8g
, 
dev
, 
i
);

292 #i‡!
	`deföed
(
U8G_16BIT
)

293 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00);

294 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00);

296 
	`u8g_WrôeSequí˚4LTo16GrDevi˚
(
u8g
, 
dev
, 
˙t
, 
p
);

297 #i‡!
	`deföed
(
U8G_16BIT
)

298 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00);

299 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x00);

301 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

302 
p
+=
˙t
;

306 
U8G_DEV_MSG_CONTRAST
:

307 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

308 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

309 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

310 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

311 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

312 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

314 
U8G_DEV_MSG_SLEEP_ON
:

315 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

317 
U8G_DEV_MSG_SLEEP_OFF
:

318 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

321  
	`u8g_dev_pb16h2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

322 
	}
}

325 
U8G_PB_DEV
(
u8g_dev_ssd1322_nhd31ﬁed_gr_sw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1322_nhd31ﬁed_gr_‚
, 
U8G_COM_SW_SPI
);

326 
U8G_PB_DEV
(
u8g_dev_ssd1322_nhd31ﬁed_gr_hw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_ssd1322_nhd31ﬁed_gr_‚
, 
U8G_COM_HW_SPI
);

328 
	#DWIDTH
 (
WIDTH
*2)

	)

329 
uöt8_t
 
	gu8g_dev_ssd1322_nhd31ﬁed_2x_gr_buf
[
DWIDTH
] 
	gU8G_NOCOMMON
 ;

330 
u8g_pb_t
 
	gu8g_dev_ssd1322_nhd31ﬁed_2x_gr_pb
 = { {16, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_buf
};

331 
u8g_dev_t
 
	gu8g_dev_ssd1322_nhd31ﬁed_2x_gr_sw_•i
 = { 
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_‚
, &
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_pb
, 
U8G_COM_SW_SPI
 };

332 
u8g_dev_t
 
	gu8g_dev_ssd1322_nhd31ﬁed_2x_gr_hw_•i
 = { 
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_‚
, &
u8g_dev_ssd1322_nhd31ﬁed_2x_gr_pb
, 
U8G_COM_HW_SPI
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_ssd1325_nhd27oled_bw.c

44 #ifde‡
OBSOLETE_CODE


46 
	~"u8g.h
"

48 
	#WIDTH
 128

	)

49 
	#HEIGHT
 64

	)

50 
	#PAGE_HEIGHT
 8

	)

53 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1325_1bô_nhd_27_12864ucy3_öô_£q
[] 
	gPROGMEM
 = {

54 
U8G_ESC_DLY
(10),

55 
U8G_ESC_CS
(0),

56 
U8G_ESC_ADR
(0),

57 
U8G_ESC_RST
(1),

58 
U8G_ESC_CS
(1),

79 
U8G_ESC_DLY
(100),

80 
U8G_ESC_DLY
(100),

82 
U8G_ESC_CS
(0),

83 
U8G_ESC_END


86 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1325_1bô_nhd_27_12864ucy3_¥ï¨e_∑ge_£q
[] 
	gPROGMEM
 = {

87 
U8G_ESC_ADR
(0),

88 
U8G_ESC_CS
(1),

93 
U8G_ESC_END


97 
	$u8g_dev_ssd1325_1bô_¥ï¨e_∑ge
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

99 
uöt8_t
 
∑ge
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.page;

101 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_1bô_nhd_27_12864ucy3_¥ï¨e_∑ge_£q
);

103 
∑ge
 <<= 3;

104 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

105 
∑ge
 += 7;

106 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

108 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

109 
	}
}

111 
	$u8g_dev_ssd1325_1bô_2x_¥ï¨e_∑ge
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
is_odd
)

113 
uöt8_t
 
∑ge
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.page;

115 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_1bô_nhd_27_12864ucy3_¥ï¨e_∑ge_£q
);

117 
∑ge
 <<= 1;

118 
∑ge
 +
is_odd
;

120 
∑ge
 <<= 3;

121 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

122 
∑ge
 += 7;

123 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

125 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

126 
	}
}

129 #ifde‡
OLD


130 
	$_OLD_u8g_dev_ssd1325_1bô_wrôe_16_pixñ
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
À·
, uöt8_à
right
)

132 
uöt8_t
 
d
, 
˙t
;

133 
˙t
 = 8;

136 
d
 = 0;

137 i‡–
À·
 & 1 )

138 
d
 |= 0x0f0;

139 i‡–
right
 & 1 )

140 
d
 |= 0x00f;

141 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
d
);

142 
À·
 >>= 1;

143 
right
 >>= 1;

144 
˙t
--;

145 } 
˙t
 > 0 );

146 
	}
}

149 
	$u8g_dev_ssd1325_1bô_wrôe_16_pixñ
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
À·
, uöt8_à
right
)

151 
uöt8_t
 
d
, 
˙t
;

152 
uöt8_t
 
buf
[8];

153 
˙t
 = 8;

156 
d
 = 0;

157 i‡–
À·
 & 128 )

158 
d
 |= 0x0f0;

159 i‡–
right
 & 128 )

160 
d
 |= 0x00f;

161 
˙t
--;

162 
buf
[
˙t
] = 
d
;

163 
À·
 <<= 1;

164 
right
 <<= 1;

165 } 
˙t
 > 0 );

166 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 8, 
buf
);

167 
	}
}

169 
	$u8g_dev_ssd1325_1bô_wrôe_buf„r
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
is_odd
)

171 
uöt8_t
 
˙t
, 
À·
, 
right
;

172 
uöt8_t
 *
±r
;

173 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

175 
±r
 = 
pb
->
buf
;

176 
˙t
 = 
pb
->
width
;

177 i‡–
is_odd
 )

178 
±r
 +
˙t
;

179 
˙t
 >>= 1;

182 
À·
 = *
±r
++;

183 
right
 = *
±r
++;

184 
	`u8g_dev_ssd1325_1bô_wrôe_16_pixñ
(
u8g
, 
dev
, 
À·
, 
right
);

185 
˙t
--;

186 }  
˙t
 > 0 );

187 
	}
}

189 
uöt8_t
 
	$u8g_dev_ssd1325_nhd27ﬁed_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

191 
msg
)

193 
U8G_DEV_MSG_INIT
:

194 
	`u8g_InôCom
(
u8g
, 
dev
);

195 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_1bô_nhd_27_12864ucy3_öô_£q
);

197 
U8G_DEV_MSG_STOP
:

199 
U8G_DEV_MSG_PAGE_NEXT
:

201 
	`u8g_dev_ssd1325_1bô_¥ï¨e_∑ge
(
u8g
, 
dev
);

202 
	`u8g_dev_ssd1325_1bô_wrôe_buf„r
(
u8g
, 
dev
, 0);

203 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

206 
U8G_DEV_MSG_CONTRAST
:

207 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

208 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

209 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

210 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

211 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

214  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

215 
	}
}

217 
uöt8_t
 
	$u8g_dev_ssd1325_nhd27ﬁed_2x_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

219 
msg
)

221 
U8G_DEV_MSG_INIT
:

222 
	`u8g_InôCom
(
u8g
, 
dev
);

223 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_1bô_nhd_27_12864ucy3_öô_£q
);

225 
U8G_DEV_MSG_STOP
:

227 
U8G_DEV_MSG_PAGE_NEXT
:

229 
	`u8g_dev_ssd1325_1bô_2x_¥ï¨e_∑ge
(
u8g
, 
dev
, 0);

230 
	`u8g_dev_ssd1325_1bô_wrôe_buf„r
(
u8g
, 
dev
, 0);

231 
	`u8g_dev_ssd1325_1bô_2x_¥ï¨e_∑ge
(
u8g
, 
dev
, 1);

232 
	`u8g_dev_ssd1325_1bô_wrôe_buf„r
(
u8g
, 
dev
, 1);

233 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

236 
U8G_DEV_MSG_CONTRAST
:

237 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

238 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

239 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

240 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

241 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

244  
	`u8g_dev_pb16v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

245 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_ssd1325_nhd27oled_bw_new.c

45 
	~"u8g.h
"

48 
	#WIDTH
 128

	)

49 
	#HEIGHT
 64

	)

52 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1325_nhd_27_12864_öô_£q
[] 
	gPROGMEM
 = {

53 
U8G_ESC_DLY
(10),

54 
U8G_ESC_CS
(0),

55 
U8G_ESC_ADR
(0),

56 
U8G_ESC_RST
(1),

57 
U8G_ESC_CS
(1),

79 
U8G_ESC_DLY
(50),

80 
U8G_ESC_CS
(0),

81 
U8G_ESC_END


84 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1325_¥ï¨e_row_£q
[] 
	gPROGMEM
 = {

85 
U8G_ESC_ADR
(0),

86 
U8G_ESC_CS
(1),

91 
U8G_ESC_END


94 
	$u8g_dev_ssd1325_¥ï¨e_row
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
dñè_row
)

96 
uöt8_t
 
row
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.
∑ge
;

98 
row
 *((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.
∑ge_height
;

99 
row
 +
dñè_row
;

101 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_¥ï¨e_row_£q
);

103 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
row
);

104 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
row
+1);

108 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

109 
	}
}

111 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_⁄
[] 
	gPROGMEM
 = {

112 
U8G_ESC_ADR
(0),

113 
U8G_ESC_CS
(1),

115 
U8G_ESC_CS
(1),

116 
U8G_ESC_END


119 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_off
[] 
	gPROGMEM
 = {

120 
U8G_ESC_ADR
(0),

121 
U8G_ESC_CS
(1),

123 
U8G_ESC_DLY
(50),

124 
U8G_ESC_CS
(1),

125 
U8G_ESC_END


129 
uöt8_t
 
	$u8g_dev_ssd1325_nhd27ﬁed_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

131 
msg
)

135 
U8G_DEV_MSG_INIT
:

136 
	`u8g_InôCom
(
u8g
, 
dev
);

137 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_nhd_27_12864_öô_£q
);

139 
U8G_DEV_MSG_STOP
:

141 
U8G_DEV_MSG_PAGE_NEXT
:

143 
uöt8_t
 
i
;

144 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

145 
uöt8_t
 *
p
 = 
pb
->
buf
;

146 
u8g_uöt_t
 
˙t
;

147 
˙t
 = 
pb
->
width
;

148 
˙t
 >>= 3;

150  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i++ )

152 
	`u8g_dev_ssd1325_¥ï¨e_row
(
u8g
, 
dev
, 
i
);

153 
	`u8g_WrôeSequí˚BWTo16GrDevi˚
(
u8g
, 
dev
, 
˙t
, 
p
);

154 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

155 
p
+=
˙t
;

159 
U8G_DEV_MSG_CONTRAST
:

160 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

161 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

162 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

163 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

164 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

166 
U8G_DEV_MSG_SLEEP_ON
:

167 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

169 
U8G_DEV_MSG_SLEEP_OFF
:

170 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

173  
	`u8g_dev_pb8h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

174 
	}
}

176 
uöt8_t
 
	$u8g_dev_ssd1325_nhd27ﬁed_2x_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

178 
msg
)

180 
U8G_DEV_MSG_INIT
:

181 
	`u8g_InôCom
(
u8g
, 
dev
);

182 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_nhd_27_12864_öô_£q
);

184 
U8G_DEV_MSG_STOP
:

186 
U8G_DEV_MSG_PAGE_NEXT
:

188 
uöt8_t
 
i
;

189 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

190 
uöt8_t
 *
p
 = 
pb
->
buf
;

191 
u8g_uöt_t
 
˙t
;

192 
˙t
 = 
pb
->
width
;

193 
˙t
 >>= 3;

195  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i++ )

197 
	`u8g_dev_ssd1325_¥ï¨e_row
(
u8g
, 
dev
, 
i
);

198 
	`u8g_WrôeSequí˚BWTo16GrDevi˚
(
u8g
, 
dev
, 
˙t
, 
p
);

199 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

200 
p
+=
˙t
;

204 
U8G_DEV_MSG_CONTRAST
:

205 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

206 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

207 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

208 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

209 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

211 
U8G_DEV_MSG_SLEEP_ON
:

212 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

214 
U8G_DEV_MSG_SLEEP_OFF
:

215 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

218  
	`u8g_dev_pb16h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

219 
	}
}

223 
U8G_PB_DEV
(
u8g_dev_ssd1325_nhd27ﬁed_bw_sw_•i
 , 
WIDTH
, 
HEIGHT
, 8, 
u8g_dev_ssd1325_nhd27ﬁed_bw_‚
, 
U8G_COM_SW_SPI
);

224 
U8G_PB_DEV
(
u8g_dev_ssd1325_nhd27ﬁed_bw_hw_•i
 , 
WIDTH
, 
HEIGHT
, 8, 
u8g_dev_ssd1325_nhd27ﬁed_bw_‚
, 
U8G_COM_HW_SPI
);

225 
U8G_PB_DEV
(
u8g_dev_ssd1325_nhd27ﬁed_bw_∑øŒñ
 , 
WIDTH
, 
HEIGHT
, 8, 
u8g_dev_ssd1325_nhd27ﬁed_bw_‚
, 
U8G_COM_FAST_PARALLEL
);

227 
uöt8_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_bw_buf
[
WIDTH
*2] 
	gU8G_NOCOMMON
 ;

228 
u8g_pb_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_bw_pb
 = { {16, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_buf
};

229 
u8g_dev_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_bw_sw_•i
 = { 
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_‚
, &
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_pb
, 
U8G_COM_SW_SPI
 };

230 
u8g_dev_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_bw_hw_•i
 = { 
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_‚
, &
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_pb
, 
U8G_COM_HW_SPI
 };

231 
u8g_dev_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_bw_∑øŒñ
 = { 
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_‚
, &
u8g_dev_ssd1325_nhd27ﬁed_2x_bw_pb
, 
U8G_COM_FAST_PARALLEL
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_ssd1325_nhd27oled_gr.c

44 #ifde‡
OBSOLETE_CODE


46 
	~"u8g.h
"

48 
	#WIDTH
 128

	)

49 
	#HEIGHT
 64

	)

52 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1325_2bô_nhd_27_12864ucy3_öô_£q
[] 
	gPROGMEM
 = {

53 
U8G_ESC_DLY
(10),

54 
U8G_ESC_CS
(0),

55 
U8G_ESC_ADR
(0),

56 
U8G_ESC_RST
(1),

57 
U8G_ESC_CS
(1),

79 
U8G_ESC_DLY
(100),

80 
U8G_ESC_DLY
(100),

82 
U8G_ESC_CS
(0),

83 
U8G_ESC_END


86 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1325_2bô_nhd_27_12864ucy3_¥ï¨e_∑ge_£q
[] 
	gPROGMEM
 = {

87 
U8G_ESC_ADR
(0),

88 
U8G_ESC_CS
(1),

93 
U8G_ESC_END


97 
	$u8g_dev_ssd1325_2bô_¥ï¨e_∑ge
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

99 
uöt8_t
 
∑ge
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.page;

101 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_2bô_nhd_27_12864ucy3_¥ï¨e_∑ge_£q
);

103 
∑ge
 <<= 2;

104 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

105 
∑ge
 += 3;

106 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

108 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

109 
	}
}

111 
	$u8g_dev_ssd1325_2bô_2x_¥ï¨e_∑ge
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
is_odd
)

113 
uöt8_t
 
∑ge
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.page;

115 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_2bô_nhd_27_12864ucy3_¥ï¨e_∑ge_£q
);

117 
∑ge
 <<= 1;

118 
∑ge
 +
is_odd
;

121 
∑ge
 <<= 2;

122 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

123 
∑ge
 += 3;

124 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

126 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

127 
	}
}

130 
	$u8g_dev_ssd1325_2bô_wrôe_4_pixñ
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
À·
, uöt8_à
right
)

132 
uöt8_t
 
d
, 
tmp
, 
˙t
;

133 
˙t
 = 4;

136 
d
 = 
À·
;

137 
d
 &= 3;

138 
d
 <<= 4;

139 
tmp
 = 
right
;

140 
tmp
 &= 3;

141 
d
 |
tmp
;

142 
d
 <<= 2;

143 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
d
);

144 
À·
 >>= 2;

145 
right
 >>= 2;

146 
˙t
--;

147 } 
˙t
 > 0 );

148 
	}
}

150 
	$u8g_dev_ssd1325_2bô_wrôe_buf„r
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

152 
uöt8_t
 
˙t
, 
À·
, 
right
;

153 
uöt8_t
 *
±r
;

154 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

156 
˙t
 = 
pb
->
width
;

157 
˙t
 >>= 1;

158 
±r
 = 
pb
->
buf
;

161 
À·
 = *
±r
++;

162 
right
 = *
±r
++;

163 
	`u8g_dev_ssd1325_2bô_wrôe_4_pixñ
(
u8g
, 
dev
, 
À·
, 
right
);

164 
˙t
--;

165 }  
˙t
 > 0 );

166 
	}
}

168 
	$u8g_dev_ssd1325_2bô_2x_wrôe_buf„r
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
is_odd
)

170 
uöt8_t
 
˙t
, 
À·
, 
right
;

171 
uöt8_t
 *
±r
;

172 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

174 
±r
 = 
pb
->
buf
;

175 
˙t
 = 
pb
->
width
;

176 i‡–
is_odd
 )

177 
±r
 +
˙t
;

178 
˙t
 >>= 1;

181 
À·
 = *
±r
++;

182 
right
 = *
±r
++;

183 
	`u8g_dev_ssd1325_2bô_wrôe_4_pixñ
(
u8g
, 
dev
, 
À·
, 
right
);

184 
˙t
--;

185 }  
˙t
 > 0 );

186 
	}
}

188 
uöt8_t
 
	$u8g_dev_ssd1325_nhd27ﬁed_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

190 
msg
)

192 
U8G_DEV_MSG_INIT
:

193 
	`u8g_InôCom
(
u8g
, 
dev
);

194 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_2bô_nhd_27_12864ucy3_öô_£q
);

196 
U8G_DEV_MSG_STOP
:

198 
U8G_DEV_MSG_PAGE_NEXT
:

200 
	`u8g_dev_ssd1325_2bô_¥ï¨e_∑ge
(
u8g
, 
dev
);

201 
	`u8g_dev_ssd1325_2bô_wrôe_buf„r
(
u8g
, 
dev
);

202 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

205 
U8G_DEV_MSG_CONTRAST
:

206 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

207 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

208 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

209 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

210 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

213  
	`u8g_dev_pb8v2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

214 
	}
}

216 
uöt8_t
 
	$u8g_dev_ssd1325_nhd27ﬁed_2x_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

218 
msg
)

220 
U8G_DEV_MSG_INIT
:

221 
	`u8g_InôCom
(
u8g
, 
dev
);

222 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_2bô_nhd_27_12864ucy3_öô_£q
);

224 
U8G_DEV_MSG_STOP
:

226 
U8G_DEV_MSG_PAGE_NEXT
:

228 
	`u8g_dev_ssd1325_2bô_2x_¥ï¨e_∑ge
(
u8g
, 
dev
, 0);

229 
	`u8g_dev_ssd1325_2bô_2x_wrôe_buf„r
(
u8g
, 
dev
, 0);

230 
	`u8g_dev_ssd1325_2bô_2x_¥ï¨e_∑ge
(
u8g
, 
dev
, 1);

231 
	`u8g_dev_ssd1325_2bô_2x_wrôe_buf„r
(
u8g
, 
dev
, 1);

232 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

235 
U8G_DEV_MSG_CONTRAST
:

236 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

237 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

238 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

239 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

240 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

243  
	`u8g_dev_pb16v2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

244 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_ssd1325_nhd27oled_gr_new.c

45 
	~"u8g.h
"

47 
	#WIDTH
 128

	)

48 
	#HEIGHT
 64

	)

51 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1325_2bô_nhd_27_12864ucy3_öô_£q
[] 
	gPROGMEM
 = {

52 
U8G_ESC_DLY
(10),

53 
U8G_ESC_CS
(0),

54 
U8G_ESC_ADR
(0),

55 
U8G_ESC_RST
(1),

56 
U8G_ESC_CS
(1),

78 
U8G_ESC_DLY
(50),

79 
U8G_ESC_CS
(0),

80 
U8G_ESC_END


83 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1325_2bô_nhd_27_12864ucy3_¥ï¨e_∑ge_£q
[] 
	gPROGMEM
 = {

84 
U8G_ESC_ADR
(0),

85 
U8G_ESC_CS
(1),

90 
U8G_ESC_END


93 
	$u8g_dev_ssd1325_gr_¥ï¨e_row
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
dñè_row
)

95 
uöt8_t
 
row
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.
∑ge
;

97 
row
 *((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.
∑ge_height
;

98 
row
 +
dñè_row
;

100 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_2bô_nhd_27_12864ucy3_¥ï¨e_∑ge_£q
);

102 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
row
);

103 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
row
+1);

107 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

108 
	}
}

110 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_⁄
[] 
	gPROGMEM
 = {

111 
U8G_ESC_ADR
(0),

112 
U8G_ESC_CS
(1),

114 
U8G_ESC_CS
(1),

115 
U8G_ESC_END


118 c⁄° 
uöt8_t
 
	gu8g_dev_ssd13xx_¶ìp_off
[] 
	gPROGMEM
 = {

119 
U8G_ESC_ADR
(0),

120 
U8G_ESC_CS
(1),

122 
U8G_ESC_DLY
(50),

123 
U8G_ESC_CS
(1),

124 
U8G_ESC_END


129 
uöt8_t
 
	$u8g_dev_ssd1325_nhd27ﬁed_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

131 
msg
)

133 
U8G_DEV_MSG_INIT
:

134 
	`u8g_InôCom
(
u8g
, 
dev
);

135 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_2bô_nhd_27_12864ucy3_öô_£q
);

137 
U8G_DEV_MSG_STOP
:

139 
U8G_DEV_MSG_PAGE_NEXT
:

141 
uöt8_t
 
i
;

142 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

143 
uöt8_t
 *
p
 = 
pb
->
buf
;

144 
u8g_uöt_t
 
˙t
;

145 
˙t
 = 
pb
->
width
;

146 
˙t
 >>= 2;

148  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i++ )

150 
	`u8g_dev_ssd1325_gr_¥ï¨e_row
(
u8g
, 
dev
, 
i
);

151 
	`u8g_WrôeSequí˚4LTo16GrDevi˚
(
u8g
, 
dev
, 
˙t
, 
p
);

152 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

153 
p
+=
˙t
;

157 
U8G_DEV_MSG_CONTRAST
:

158 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

159 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

160 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

161 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

162 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

164 
U8G_DEV_MSG_SLEEP_ON
:

165 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

167 
U8G_DEV_MSG_SLEEP_OFF
:

168 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

171  
	`u8g_dev_pb8h2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

172 
	}
}

176 
uöt8_t
 
	$u8g_dev_ssd1325_nhd27ﬁed_2x_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

178 
msg
)

180 
U8G_DEV_MSG_INIT
:

181 
	`u8g_InôCom
(
u8g
, 
dev
);

182 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1325_2bô_nhd_27_12864ucy3_öô_£q
);

184 
U8G_DEV_MSG_STOP
:

186 
U8G_DEV_MSG_PAGE_NEXT
:

188 
uöt8_t
 
i
;

189 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

190 
uöt8_t
 *
p
 = 
pb
->
buf
;

191 
u8g_uöt_t
 
˙t
;

192 
˙t
 = 
pb
->
width
;

193 
˙t
 >>= 2;

195  
i
 = 0; i < 
pb
->
p
.
∑ge_height
; i++ )

197 
	`u8g_dev_ssd1325_gr_¥ï¨e_row
(
u8g
, 
dev
, 
i
);

198 
	`u8g_WrôeSequí˚4LTo16GrDevi˚
(
u8g
, 
dev
, 
˙t
, 
p
);

199 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

200 
p
+=
˙t
;

204 
U8G_DEV_MSG_CONTRAST
:

205 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

206 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

207 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

208 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

209 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

211 
U8G_DEV_MSG_SLEEP_ON
:

212 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_⁄
);

214 
U8G_DEV_MSG_SLEEP_OFF
:

215 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd13xx_¶ìp_off
);

218  
	`u8g_dev_pb16h2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

219 
	}
}

221 
U8G_PB_DEV
(
u8g_dev_ssd1325_nhd27ﬁed_gr_sw_•i
 , 
WIDTH
, 
HEIGHT
, 4, 
u8g_dev_ssd1325_nhd27ﬁed_gr_‚
, 
U8G_COM_SW_SPI
);

222 
U8G_PB_DEV
(
u8g_dev_ssd1325_nhd27ﬁed_gr_hw_•i
 , 
WIDTH
, 
HEIGHT
, 4, 
u8g_dev_ssd1325_nhd27ﬁed_gr_‚
, 
U8G_COM_HW_SPI
);

224 
uöt8_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_buf
[
WIDTH
*2] 
	gU8G_NOCOMMON
 ;

225 
u8g_pb_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_pb
 = { {8, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_ssd1325_nhd27ﬁed_2x_buf
};

226 
u8g_dev_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_gr_sw_•i
 = { 
u8g_dev_ssd1325_nhd27ﬁed_2x_gr_‚
, &
u8g_dev_ssd1325_nhd27ﬁed_2x_pb
, 
U8G_COM_SW_SPI
 };

227 
u8g_dev_t
 
	gu8g_dev_ssd1325_nhd27ﬁed_2x_gr_hw_•i
 = { 
u8g_dev_ssd1325_nhd27ﬁed_2x_gr_‚
, &
u8g_dev_ssd1325_nhd27ﬁed_2x_pb
, 
U8G_COM_HW_SPI
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_ssd1327_96x96_gr.c

45 
	~"u8g.h
"

47 
	#WIDTH
 96

	)

48 
	#HEIGHT
 96

	)

49 
	#XOFFSET
 8

	)

54 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1327_2bô_96x96_öô_£q
[] 
	gPROGMEM
 = {

55 
U8G_ESC_DLY
(10),

56 
U8G_ESC_CS
(0),

57 
U8G_ESC_ADR
(0),

58 
U8G_ESC_RST
(1),

59 
U8G_ESC_CS
(1),

96 
U8G_ESC_DLY
(100),

98 
U8G_ESC_DLY
(100),

101 
U8G_ESC_DLY
(100),

112 
U8G_ESC_ADR
(1),

118 
U8G_ESC_CS
(0),

119 
U8G_ESC_END


122 c⁄° 
uöt8_t
 
	gu8g_dev_ssd1327_2bô_96x96_¥ï¨e_∑ge_£q
[] 
	gPROGMEM
 = {

123 
U8G_ESC_ADR
(0),

124 
U8G_ESC_CS
(1),

126 
XOFFSET
,

129 
U8G_ESC_END


133 
	$u8g_dev_ssd1327_2bô_¥ï¨e_∑ge
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

135 
uöt8_t
 
∑ge
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.page;

137 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1327_2bô_96x96_¥ï¨e_∑ge_£q
);

139 
∑ge
 <<= 2;

140 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

141 
∑ge
 += 3;

142 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

144 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

145 
	}
}

147 
	$u8g_dev_ssd1327_2bô_2x_¥ï¨e_∑ge
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
is_odd
)

149 
uöt8_t
 
∑ge
 = ((
u8g_pb_t
 *)(
dev
->
dev_mem
))->
p
.page;

151 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1327_2bô_96x96_¥ï¨e_∑ge_£q
);

153 
∑ge
 <<= 1;

154 
∑ge
 +
is_odd
;

156 
∑ge
 <<= 2;

157 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

158 
∑ge
 += 3;

159 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
∑ge
);

161 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

162 
	}
}

165 
	$u8g_dev_ssd1327_2bô_wrôe_4_pixñ
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
À·
, uöt8_à
right
)

167 
uöt8_t
 
d
, 
tmp
, 
˙t
;

168 
uöt8_t
 
buf
[4];

169 
buf
[0] = 0;

170 
buf
[1] = 0;

171 
buf
[2] = 0;

172 
buf
[3] = 0;

173 
˙t
 = 0;

176 i‡–
À·
 =0 && 
right
 == 0 )

178 
d
 = 
À·
;

179 
d
 &= 3;

180 
d
 <<= 4;

181 
tmp
 = 
right
;

182 
tmp
 &= 3;

183 
d
 |
tmp
;

184 
d
 <<= 2;

185 
buf
[
˙t
] = 
d
;

186 
À·
 >>= 2;

187 
right
 >>= 2;

188 
˙t
++;

189 } 
˙t
 < 4 );

190 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 4, 
buf
);

191 
	}
}

193 
	$u8g_dev_ssd1327_2bô_wrôe_buf„r
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

195 
uöt8_t
 
˙t
, 
À·
, 
right
;

196 
uöt8_t
 *
±r
;

197 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

199 
˙t
 = 
pb
->
width
;

200 
˙t
 >>= 1;

201 
±r
 = 
pb
->
buf
;

204 
À·
 = *
±r
++;

205 
right
 = *
±r
++;

206 
	`u8g_dev_ssd1327_2bô_wrôe_4_pixñ
(
u8g
, 
dev
, 
À·
, 
right
);

207 
˙t
--;

208 }  
˙t
 > 0 );

209 
	}
}

211 
	$u8g_dev_ssd1327_2bô_2x_wrôe_buf„r
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
is_odd
)

213 
uöt8_t
 
˙t
, 
À·
, 
right
;

214 
uöt8_t
 *
±r
;

215 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

217 
±r
 = 
pb
->
buf
;

218 
˙t
 = 
pb
->
width
;

219 i‡–
is_odd
 )

220 
±r
 +
˙t
;

221 
˙t
 >>= 1;

224 
À·
 = *
±r
++;

225 
right
 = *
±r
++;

226 
	`u8g_dev_ssd1327_2bô_wrôe_4_pixñ
(
u8g
, 
dev
, 
À·
, 
right
);

227 
˙t
--;

228 }  
˙t
 > 0 );

229 
	}
}

231 
uöt8_t
 
	$u8g_dev_ssd1327_96x96_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

233 
msg
)

235 
U8G_DEV_MSG_INIT
:

236 
	`u8g_InôCom
(
u8g
, 
dev
);

237 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1327_2bô_96x96_öô_£q
);

239 
U8G_DEV_MSG_STOP
:

241 
U8G_DEV_MSG_PAGE_NEXT
:

243 
	`u8g_dev_ssd1327_2bô_¥ï¨e_∑ge
(
u8g
, 
dev
);

244 
	`u8g_dev_ssd1327_2bô_wrôe_buf„r
(
u8g
, 
dev
);

245 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

248 
U8G_DEV_MSG_CONTRAST
:

249 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

250 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

251 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

252 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

253 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

256  
	`u8g_dev_pb8v2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

257 
	}
}

259 
uöt8_t
 
	$u8g_dev_ssd1327_96x96_2x_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

261 
msg
)

263 
U8G_DEV_MSG_INIT
:

264 
	`u8g_InôCom
(
u8g
, 
dev
);

265 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_ssd1327_2bô_96x96_öô_£q
);

267 
U8G_DEV_MSG_STOP
:

269 
U8G_DEV_MSG_PAGE_NEXT
:

271 
	`u8g_dev_ssd1327_2bô_2x_¥ï¨e_∑ge
(
u8g
, 
dev
, 0);

272 
	`u8g_dev_ssd1327_2bô_2x_wrôe_buf„r
(
u8g
, 
dev
, 0);

273 
	`u8g_dev_ssd1327_2bô_2x_¥ï¨e_∑ge
(
u8g
, 
dev
, 1);

274 
	`u8g_dev_ssd1327_2bô_2x_wrôe_buf„r
(
u8g
, 
dev
, 1);

275 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

278 
U8G_DEV_MSG_CONTRAST
:

279 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

280 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

281 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

282 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

283 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

286  
	`u8g_dev_pb16v2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

287 
	}
}

289 
U8G_PB_DEV
(
u8g_dev_ssd1327_96x96_gr_sw_•i
 , 
WIDTH
, 
HEIGHT
, 4, 
u8g_dev_ssd1327_96x96_gr_‚
, 
U8G_COM_SW_SPI
);

290 
U8G_PB_DEV
(
u8g_dev_ssd1327_96x96_gr_hw_•i
 , 
WIDTH
, 
HEIGHT
, 4, 
u8g_dev_ssd1327_96x96_gr_‚
, 
U8G_COM_HW_SPI
);

291 
U8G_PB_DEV
(
u8g_dev_ssd1327_96x96_gr_i2c
 , 
WIDTH
, 
HEIGHT
, 4, 
u8g_dev_ssd1327_96x96_gr_‚
, 
U8G_COM_SSD_I2C
);

293 
	#DWIDTH
 (2*
WIDTH
)

	)

294 
uöt8_t
 
	gu8g_dev_ssd1327_96x96_2x_buf
[
DWIDTH
] 
	gU8G_NOCOMMON
 ;

295 
u8g_pb_t
 
	gu8g_dev_ssd1327_96x96_2x_pb
 = { {8, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_ssd1327_96x96_2x_buf
};

296 
u8g_dev_t
 
	gu8g_dev_ssd1327_96x96_2x_gr_sw_•i
 = { 
u8g_dev_ssd1327_96x96_2x_gr_‚
, &
u8g_dev_ssd1327_96x96_2x_pb
, 
U8G_COM_SW_SPI
 };

297 
u8g_dev_t
 
	gu8g_dev_ssd1327_96x96_2x_gr_hw_•i
 = { 
u8g_dev_ssd1327_96x96_2x_gr_‚
, &
u8g_dev_ssd1327_96x96_2x_pb
, 
U8G_COM_HW_SPI
 };

298 
u8g_dev_t
 
	gu8g_dev_ssd1327_96x96_2x_gr_i2c
 = { 
u8g_dev_ssd1327_96x96_2x_gr_‚
, &
u8g_dev_ssd1327_96x96_2x_pb
, 
U8G_COM_SSD_I2C
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_st7565_64128n.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

44 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_64128n_öô_£q
[] 
	gPROGMEM
 = {

45 
U8G_ESC_CS
(0),

46 
U8G_ESC_ADR
(0),

47 
U8G_ESC_CS
(1),

48 
U8G_ESC_RST
(15),

57 
U8G_ESC_DLY
(50),

60 
U8G_ESC_DLY
(50),

63 
U8G_ESC_DLY
(50),

75 
U8G_ESC_DLY
(100),

77 
U8G_ESC_DLY
(100),

78 
U8G_ESC_DLY
(100),

80 
U8G_ESC_CS
(0),

81 
U8G_ESC_END


84 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_64128n_d©a_°¨t
[] 
	gPROGMEM
 = {

85 
U8G_ESC_ADR
(0),

86 
U8G_ESC_CS
(1),

89 
U8G_ESC_END


92 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_64128n_¶ìp_⁄
[] 
	gPROGMEM
 = {

93 
U8G_ESC_ADR
(0),

94 
U8G_ESC_CS
(1),

99 
U8G_ESC_CS
(1),

100 
U8G_ESC_END


103 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_64128n_¶ìp_off
[] 
	gPROGMEM
 = {

104 
U8G_ESC_ADR
(0),

105 
U8G_ESC_CS
(1),

108 
U8G_ESC_DLY
(50),

109 
U8G_ESC_CS
(1),

110 
U8G_ESC_END


113 
uöt8_t
 
	$u8g_dev_°7565_64128n_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

115 
msg
)

117 
U8G_DEV_MSG_INIT
:

118 
	`u8g_InôCom
(
u8g
, 
dev
);

119 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_64128n_öô_£q
);

121 
U8G_DEV_MSG_STOP
:

123 
U8G_DEV_MSG_PAGE_NEXT
:

125 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

126 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_64128n_d©a_°¨t
);

127 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

128 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

129 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

131 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

134 
U8G_DEV_MSG_CONTRAST
:

135 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

136 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

137 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

138 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

139 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

141 
U8G_DEV_MSG_SLEEP_ON
:

142 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_64128n_¶ìp_⁄
);

144 
U8G_DEV_MSG_SLEEP_OFF
:

145 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_64128n_¶ìp_off
);

148  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

149 
	}
}

151 
U8G_PB_DEV
(
u8g_dev_°7565_64128n_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_64128n_‚
, 
U8G_COM_SW_SPI
);

152 
U8G_PB_DEV
(
u8g_dev_°7565_64128n_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_64128n_‚
, 
U8G_COM_HW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_st7565_dogm128.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

43 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_dogm128_öô_£q
[] 
	gPROGMEM
 = {

44 
U8G_ESC_CS
(0),

45 
U8G_ESC_ADR
(0),

46 
U8G_ESC_RST
(1),

47 
U8G_ESC_CS
(1),

64 
U8G_ESC_DLY
(50),

66 
U8G_ESC_CS
(0),

67 
U8G_ESC_END


70 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_dogm128_d©a_°¨t
[] 
	gPROGMEM
 = {

71 
U8G_ESC_ADR
(0),

72 
U8G_ESC_CS
(1),

75 
U8G_ESC_END


78 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_dogm128_¶ìp_⁄
[] 
	gPROGMEM
 = {

79 
U8G_ESC_ADR
(0),

80 
U8G_ESC_CS
(1),

85 
U8G_ESC_CS
(1),

86 
U8G_ESC_END


89 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_dogm128_¶ìp_off
[] 
	gPROGMEM
 = {

90 
U8G_ESC_ADR
(0),

91 
U8G_ESC_CS
(1),

94 
U8G_ESC_DLY
(50),

95 
U8G_ESC_CS
(1),

96 
U8G_ESC_END


99 
uöt8_t
 
	$u8g_dev_°7565_dogm128_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

101 
msg
)

103 
U8G_DEV_MSG_INIT
:

104 
	`u8g_InôCom
(
u8g
, 
dev
);

105 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_dogm128_öô_£q
);

107 
U8G_DEV_MSG_STOP
:

109 
U8G_DEV_MSG_PAGE_NEXT
:

111 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

112 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_dogm128_d©a_°¨t
);

113 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

114 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

115 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

117 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

120 
U8G_DEV_MSG_CONTRAST
:

121 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

122 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

123 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

124 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

125 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

127 
U8G_DEV_MSG_SLEEP_ON
:

128 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_dogm128_¶ìp_⁄
);

130 
U8G_DEV_MSG_SLEEP_OFF
:

131 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_dogm128_¶ìp_off
);

134  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

135 
	}
}

137 
U8G_PB_DEV
(
u8g_dev_°7565_dogm128_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_dogm128_‚
, 
U8G_COM_SW_SPI
);

138 
U8G_PB_DEV
(
u8g_dev_°7565_dogm128_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_dogm128_‚
, 
U8G_COM_HW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_st7565_dogm132.c

37 
	~"u8g.h
"

39 
	#WIDTH
 132

	)

40 
	#HEIGHT
 32

	)

41 
	#PAGE_HEIGHT
 8

	)

43 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_dogm132_öô_£q
[] 
	gPROGMEM
 = {

44 
U8G_ESC_CS
(0),

45 
U8G_ESC_ADR
(0),

46 
U8G_ESC_RST
(1),

47 
U8G_ESC_CS
(1),

64 #ifde‡
OBSOLETE_DOGM128


80 
U8G_ESC_DLY
(100),

82 
U8G_ESC_DLY
(100),

83 
U8G_ESC_DLY
(100),

85 
U8G_ESC_CS
(0),

86 
U8G_ESC_END


89 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_dogm132_d©a_°¨t
[] 
	gPROGMEM
 = {

90 
U8G_ESC_ADR
(0),

91 
U8G_ESC_CS
(1),

94 
U8G_ESC_END


97 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_dogm132_¶ìp_⁄
[] 
	gPROGMEM
 = {

98 
U8G_ESC_ADR
(0),

99 
U8G_ESC_CS
(1),

104 
U8G_ESC_CS
(1),

105 
U8G_ESC_END


108 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_dogm132_¶ìp_off
[] 
	gPROGMEM
 = {

109 
U8G_ESC_ADR
(0),

110 
U8G_ESC_CS
(1),

113 
U8G_ESC_DLY
(50),

114 
U8G_ESC_CS
(1),

115 
U8G_ESC_END


118 
uöt8_t
 
	$u8g_dev_°7565_dogm132_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

120 
msg
)

122 
U8G_DEV_MSG_INIT
:

123 
	`u8g_InôCom
(
u8g
, 
dev
);

124 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_dogm132_öô_£q
);

126 
U8G_DEV_MSG_STOP
:

128 
U8G_DEV_MSG_PAGE_NEXT
:

130 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

131 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_dogm132_d©a_°¨t
);

132 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

133 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

134 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

136 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

139 
U8G_DEV_MSG_CONTRAST
:

140 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

141 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

142 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

143 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

144 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

146 
U8G_DEV_MSG_SLEEP_ON
:

147 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_dogm132_¶ìp_⁄
);

149 
U8G_DEV_MSG_SLEEP_OFF
:

150 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_dogm132_¶ìp_off
);

153  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

154 
	}
}

156 
U8G_PB_DEV
(
u8g_dev_°7565_dogm132_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_dogm132_‚
, 
U8G_COM_SW_SPI
);

157 
U8G_PB_DEV
(
u8g_dev_°7565_dogm132_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_dogm132_‚
, 
U8G_COM_HW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_st7565_lm6059.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

44 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_lm6059_öô_£q
[] 
	gPROGMEM
 = {

45 
U8G_ESC_CS
(0),

46 
U8G_ESC_ADR
(0),

47 
U8G_ESC_CS
(1),

48 
U8G_ESC_RST
(15),

57 
U8G_ESC_DLY
(50),

60 
U8G_ESC_DLY
(50),

63 
U8G_ESC_DLY
(50),

77 
U8G_ESC_DLY
(100),

79 
U8G_ESC_DLY
(100),

80 
U8G_ESC_DLY
(100),

82 
U8G_ESC_CS
(0),

83 
U8G_ESC_END


86 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_lm6059_d©a_°¨t
[] 
	gPROGMEM
 = {

87 
U8G_ESC_ADR
(0),

88 
U8G_ESC_CS
(1),

91 
U8G_ESC_END


94 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_lm6059_¶ìp_⁄
[] 
	gPROGMEM
 = {

95 
U8G_ESC_ADR
(0),

96 
U8G_ESC_CS
(1),

101 
U8G_ESC_CS
(1),

102 
U8G_ESC_END


105 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_lm6059_¶ìp_off
[] 
	gPROGMEM
 = {

106 
U8G_ESC_ADR
(0),

107 
U8G_ESC_CS
(1),

110 
U8G_ESC_DLY
(50),

111 
U8G_ESC_CS
(1),

112 
U8G_ESC_END


116 
uöt8_t
 
	$u8g_dev_°7565_lm6059_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

118 
msg
)

120 
U8G_DEV_MSG_INIT
:

121 
	`u8g_InôCom
(
u8g
, 
dev
);

122 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_lm6059_öô_£q
);

124 
U8G_DEV_MSG_STOP
:

126 
U8G_DEV_MSG_PAGE_NEXT
:

128 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

129 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_lm6059_d©a_°¨t
);

130 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

131 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

132 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

134 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

137 
U8G_DEV_MSG_CONTRAST
:

138 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

139 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

140 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

141 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

142 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

144 
U8G_DEV_MSG_SLEEP_ON
:

145 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_lm6059_¶ìp_⁄
);

147 
U8G_DEV_MSG_SLEEP_OFF
:

148 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_lm6059_¶ìp_off
);

151  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

152 
	}
}

154 
U8G_PB_DEV
(
u8g_dev_°7565_lm6059_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_lm6059_‚
, 
U8G_COM_SW_SPI
);

155 
U8G_PB_DEV
(
u8g_dev_°7565_lm6059_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_lm6059_‚
, 
U8G_COM_HW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_st7565_lm6063.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

43 #ifde‡
OLD_ADAFRUIT_CODE


44 c⁄° 
uöt8_t
 
	gOLD_u8g_dev_°7565_lm6063_öô_£q
[] 
	gPROGMEM
 = {

45 
U8G_ESC_CS
(0),

46 
U8G_ESC_ADR
(0),

47 
U8G_ESC_RST
(1),

48 
U8G_ESC_CS
(1),

65 
U8G_ESC_DLY
(100),

67 
U8G_ESC_DLY
(100),

68 
U8G_ESC_DLY
(100),

70 
U8G_ESC_CS
(0),

71 
U8G_ESC_END


76 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_lm6063_öô_£q
[] 
	gPROGMEM
 = {

77 
U8G_ESC_CS
(0),

78 
U8G_ESC_ADR
(0),

79 
U8G_ESC_CS
(1),

80 
U8G_ESC_RST
(15),

88 
U8G_ESC_DLY
(50),

91 
U8G_ESC_DLY
(50),

94 
U8G_ESC_DLY
(50),

108 
U8G_ESC_DLY
(100),

110 
U8G_ESC_DLY
(100),

111 
U8G_ESC_DLY
(100),

113 
U8G_ESC_CS
(0),

114 
U8G_ESC_END


117 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_lm6063_d©a_°¨t
[] 
	gPROGMEM
 = {

118 
U8G_ESC_ADR
(0),

119 
U8G_ESC_CS
(1),

122 
U8G_ESC_END


125 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_°7565_¶ìp_⁄
[] 
	gPROGMEM
 = {

126 
U8G_ESC_ADR
(0),

127 
U8G_ESC_CS
(1),

132 
U8G_ESC_CS
(1),

133 
U8G_ESC_END


136 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_°7565_¶ìp_off
[] 
	gPROGMEM
 = {

137 
U8G_ESC_ADR
(0),

138 
U8G_ESC_CS
(1),

141 
U8G_ESC_DLY
(50),

142 
U8G_ESC_CS
(1),

143 
U8G_ESC_END


147 
uöt8_t
 
	$u8g_dev_°7565_lm6063_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

149 
msg
)

151 
U8G_DEV_MSG_INIT
:

152 
	`u8g_InôCom
(
u8g
, 
dev
);

153 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_lm6063_öô_£q
);

155 
U8G_DEV_MSG_STOP
:

157 
U8G_DEV_MSG_PAGE_NEXT
:

159 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

160 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_lm6063_d©a_°¨t
);

161 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

162 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

163 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

165 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

168 
U8G_DEV_MSG_CONTRAST
:

169 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

170 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

171 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

172 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

173 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

175 
U8G_DEV_MSG_SLEEP_ON
:

176 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_°7565_¶ìp_⁄
);

178 
U8G_DEV_MSG_SLEEP_OFF
:

179 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_°7565_¶ìp_off
);

182  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

183 
	}
}

185 
U8G_PB_DEV
(
u8g_dev_°7565_lm6063_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_lm6063_‚
, 
U8G_COM_SW_SPI
);

186 
U8G_PB_DEV
(
u8g_dev_°7565_lm6063_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_lm6063_‚
, 
U8G_COM_HW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_st7565_nhd_c12832.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 32

	)

41 
	#PAGE_HEIGHT
 8

	)

43 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_c12832_öô_£q
[] 
	gPROGMEM
 = {

44 
U8G_ESC_CS
(0),

45 
U8G_ESC_ADR
(0),

46 
U8G_ESC_RST
(1),

47 
U8G_ESC_CS
(1),

65 
U8G_ESC_DLY
(100),

67 
U8G_ESC_DLY
(100),

68 
U8G_ESC_DLY
(100),

70 
U8G_ESC_CS
(0),

71 
U8G_ESC_END


74 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_c12832_d©a_°¨t
[] 
	gPROGMEM
 = {

75 
U8G_ESC_ADR
(0),

76 
U8G_ESC_CS
(1),

79 
U8G_ESC_END


82 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_c12832_¶ìp_⁄
[] 
	gPROGMEM
 = {

83 
U8G_ESC_ADR
(0),

84 
U8G_ESC_CS
(1),

89 
U8G_ESC_CS
(1),

90 
U8G_ESC_END


93 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_c12832_¶ìp_off
[] 
	gPROGMEM
 = {

94 
U8G_ESC_ADR
(0),

95 
U8G_ESC_CS
(1),

98 
U8G_ESC_DLY
(50),

99 
U8G_ESC_CS
(1),

100 
U8G_ESC_END


103 
uöt8_t
 
	$u8g_dev_°7565_c12832_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

105 
msg
)

107 
U8G_DEV_MSG_INIT
:

108 
	`u8g_InôCom
(
u8g
, 
dev
);

109 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_c12832_öô_£q
);

111 
U8G_DEV_MSG_STOP
:

113 
U8G_DEV_MSG_PAGE_NEXT
:

115 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

116 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_c12832_d©a_°¨t
);

117 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

118 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

119 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

121 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

124 
U8G_DEV_MSG_CONTRAST
:

125 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

126 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

127 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

128 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

129 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

131 
U8G_DEV_MSG_SLEEP_ON
:

132 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_c12832_¶ìp_⁄
);

134 
U8G_DEV_MSG_SLEEP_OFF
:

135 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_c12832_¶ìp_off
);

138  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

139 
	}
}

141 
U8G_PB_DEV
(
u8g_dev_°7565_nhd_c12832_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_c12832_‚
, 
U8G_COM_SW_SPI
);

142 
U8G_PB_DEV
(
u8g_dev_°7565_nhd_c12832_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_c12832_‚
, 
U8G_COM_HW_SPI
);

143 
U8G_PB_DEV
(
u8g_dev_°7565_nhd_c12832_∑øŒñ
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_c12832_‚
, 
U8G_COM_PARALLEL
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_st7565_nhd_c12864.c

39 
	~"u8g.h
"

41 
	#WIDTH
 128

	)

42 
	#HEIGHT
 64

	)

43 
	#PAGE_HEIGHT
 8

	)

45 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_nhd_c12864_öô_£q
[] 
	gPROGMEM
 = {

46 
U8G_ESC_CS
(0),

47 
U8G_ESC_ADR
(0),

48 
U8G_ESC_RST
(10),

49 
U8G_ESC_CS
(1),

66 
U8G_ESC_DLY
(100),

68 
U8G_ESC_DLY
(100),

69 
U8G_ESC_DLY
(100),

71 
U8G_ESC_CS
(0),

72 
U8G_ESC_END


75 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_nhd_c12864_d©a_°¨t
[] 
	gPROGMEM
 = {

76 
U8G_ESC_ADR
(0),

77 
U8G_ESC_CS
(1),

80 
U8G_ESC_END


83 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_c12864_¶ìp_⁄
[] 
	gPROGMEM
 = {

84 
U8G_ESC_ADR
(0),

85 
U8G_ESC_CS
(1),

90 
U8G_ESC_CS
(1),

91 
U8G_ESC_END


94 c⁄° 
uöt8_t
 
	gu8g_dev_°7565_c12864_¶ìp_off
[] 
	gPROGMEM
 = {

95 
U8G_ESC_ADR
(0),

96 
U8G_ESC_CS
(1),

99 
U8G_ESC_DLY
(50),

100 
U8G_ESC_CS
(1),

101 
U8G_ESC_END


104 
uöt8_t
 
	$u8g_dev_°7565_nhd_c12864_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

106 
msg
)

108 
U8G_DEV_MSG_INIT
:

109 
	`u8g_InôCom
(
u8g
, 
dev
);

110 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_nhd_c12864_öô_£q
);

112 
U8G_DEV_MSG_STOP
:

114 
U8G_DEV_MSG_PAGE_NEXT
:

116 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

117 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_nhd_c12864_d©a_°¨t
);

118 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

119 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

120 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

122 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

125 
U8G_DEV_MSG_CONTRAST
:

126 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

127 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

128 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

129 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

130 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

132 
U8G_DEV_MSG_SLEEP_ON
:

133 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_c12864_¶ìp_⁄
);

135 
U8G_DEV_MSG_SLEEP_OFF
:

136 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7565_c12864_¶ìp_off
);

139  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

140 
	}
}

142 
U8G_PB_DEV
(
u8g_dev_°7565_nhd_c12864_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_nhd_c12864_‚
, 
U8G_COM_SW_SPI
);

143 
U8G_PB_DEV
(
u8g_dev_°7565_nhd_c12864_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7565_nhd_c12864_‚
, 
U8G_COM_HW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_st7687_c144mvgd.c

39 
	~"u8g.h
"

41 
	#WIDTH
 128

	)

42 
	#HEIGHT
 128

	)

43 
	#PAGE_HEIGHT
 8

	)

46 #ifde‡
FIRST_VERSION


52 c⁄° 
uöt8_t
 
	gu8g_dev_°7687_c144mvgd_öô_£q
[] 
	gPROGMEM
 = {

53 
U8G_ESC_CS
(0),

54 
U8G_ESC_ADR
(0),

55 
U8G_ESC_CS
(1),

56 
U8G_ESC_RST
(15),

59 
U8G_ESC_DLY
(200),

62 
U8G_ESC_ADR
(1),

64 
U8G_ESC_ADR
(0),

65 
U8G_ESC_DLY
(100),

68 
U8G_ESC_ADR
(1),

70 
U8G_ESC_ADR
(0),

71 
U8G_ESC_DLY
(100),

73 #ifde‡
NOT_REQUIRED


75 
U8G_ESC_ADR
(1),

77 
U8G_ESC_ADR
(0),

78 
U8G_ESC_DLY
(100),

82 
U8G_ESC_DLY
(100),

85 
U8G_ESC_DLY
(100),

89 
U8G_ESC_DLY
(100),

92 
U8G_ESC_ADR
(1),

95 
U8G_ESC_ADR
(0),

96 
U8G_ESC_DLY
(100),

99 
U8G_ESC_ADR
(1),

101 
U8G_ESC_ADR
(0),

104 
U8G_ESC_ADR
(1),

106 
U8G_ESC_ADR
(0),

109 
U8G_ESC_ADR
(1),

111 
U8G_ESC_ADR
(0),

114 
U8G_ESC_ADR
(1),

116 
U8G_ESC_ADR
(0),

119 
U8G_ESC_ADR
(1),

121 
U8G_ESC_ADR
(0),

124 
U8G_ESC_ADR
(1),

126 
U8G_ESC_ADR
(0),

130 
U8G_ESC_ADR
(1),

132 
U8G_ESC_ADR
(0),

135 
U8G_ESC_ADR
(1),

137 
U8G_ESC_ADR
(0),

140 
U8G_ESC_ADR
(1),

142 
U8G_ESC_ADR
(0),

145 
U8G_ESC_ADR
(1),

147 
U8G_ESC_ADR
(0),

150 
U8G_ESC_ADR
(1),

152 
U8G_ESC_ADR
(0),

155 
U8G_ESC_ADR
(1),

160 
U8G_ESC_ADR
(0),

163 
U8G_ESC_ADR
(1),

180 
U8G_ESC_ADR
(0),

183 
U8G_ESC_ADR
(1),

192 
U8G_ESC_ADR
(0),

196 
U8G_ESC_CS
(0),

197 
U8G_ESC_END


207 c⁄° 
uöt8_t
 
	gu8g_dev_°7687_c144mvgd_öô_£q
[] 
	gPROGMEM
 = {

208 
U8G_ESC_CS
(0),

209 
U8G_ESC_ADR
(0),

210 
U8G_ESC_CS
(1),

211 
U8G_ESC_RST
(15),

214 
U8G_ESC_DLY
(5),

217 
U8G_ESC_ADR
(1),

219 
U8G_ESC_ADR
(0),

223 
U8G_ESC_ADR
(1),

225 
U8G_ESC_ADR
(0),

228 
U8G_ESC_ADR
(1),

230 
U8G_ESC_ADR
(0),

234 
U8G_ESC_ADR
(1),

250 
U8G_ESC_ADR
(0),

253 
U8G_ESC_ADR
(1),

269 
U8G_ESC_ADR
(0),

272 
U8G_ESC_ADR
(1),

275 
U8G_ESC_ADR
(0),

279 
U8G_ESC_ADR
(1),

281 
U8G_ESC_ADR
(0),

284 
U8G_ESC_ADR
(1),

287 
U8G_ESC_ADR
(0),

290 
U8G_ESC_ADR
(1),

292 
U8G_ESC_ADR
(0),

295 
U8G_ESC_ADR
(1),

298 
U8G_ESC_ADR
(0),

301 
U8G_ESC_ADR
(1),

303 
U8G_ESC_ADR
(0),

306 
U8G_ESC_ADR
(1),

311 
U8G_ESC_ADR
(0),

314 
U8G_ESC_ADR
(1),

319 
U8G_ESC_ADR
(0),

322 
U8G_ESC_ADR
(1),

324 
U8G_ESC_ADR
(0),

331 
U8G_ESC_CS
(0),

332 
U8G_ESC_END


342 
uöt8_t
 
	$gë_byã_1
(
uöt8_t
 
v
)

344 
v
 >>= 4;

345 
v
 &= 0x0e;

346  
v
;

347 
	}
}

349 
uöt8_t
 
	$gë_byã_2
(
uöt8_t
 
v
)

351 
uöt8_t
 
w
;

352 
w
 = 
v
;

353 
w
 &= 3;

354 
w
 = (w<<2) | w;

355 
v
 <<= 3;

356 
v
 &= 0x0e0;

357 
w
 |
v
;

358  
w
;

359 
	}
}

361 
uöt8_t
 
	$u8g_dev_°7687_c144mvgd_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

363 
msg
)

365 
U8G_DEV_MSG_INIT
:

366 
	`u8g_InôCom
(
u8g
, 
dev
);

367 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7687_c144mvgd_öô_£q
);

369 
U8G_DEV_MSG_STOP
:

371 
U8G_DEV_MSG_PAGE_NEXT
:

373 
uöt8_t
 
y
, 
i
, 
j
;

374 
uöt8_t
 *
±r
;

375 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

377 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

378 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

379 
y
 = 
pb
->
p
.
∑ge_y0
;

380 
±r
 = 
pb
->
buf
;

382 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

383 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x02a );

384 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

385 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x000 );

386 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
WIDTH
-1 );

387 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

388 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x02b );

389 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

390 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
y
 );

391 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
y
+
PAGE_HEIGHT
-1 );

392 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

393 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x02c );

394 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

396  
i
 = 0; i < 
PAGE_HEIGHT
; i ++ )

399  
j
 = 0; j < 
WIDTH
; j ++ )

401 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`gë_byã_1
(*
±r
) );

402 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`gë_byã_2
(*
±r
) );

403 
±r
++;

406 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

407 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

411  
	`u8g_dev_pb8h8_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

412 
	}
}

415 
uöt8_t
 
	gu8g_°7687_c144mvgd_8h8_buf
[
WIDTH
*8] 
	gU8G_NOCOMMON
 ;

416 
u8g_pb_t
 
	gu8g_°7687_c144mvgd_8h8_pb
 = { {8, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_°7687_c144mvgd_8h8_buf
};

418 
u8g_dev_t
 
	gu8g_dev_°7687_c144mvgd_sw_•i
 = { 
u8g_dev_°7687_c144mvgd_‚
, &
u8g_°7687_c144mvgd_8h8_pb
, 
u8g_com_¨duöo_sw_•i_‚
 };

420 
u8g_dev_t
 
	gu8g_dev_°7687_c144mvgd_8bô
 = { 
u8g_dev_°7687_c144mvgd_‚
, &
u8g_°7687_c144mvgd_8h8_pb
, 
U8G_COM_PARALLEL
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_st7920_128x64.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

45 c⁄° 
uöt8_t
 
	gu8g_dev_°7920_128x64_öô_£q
[] 
	gPROGMEM
 = {

46 
U8G_ESC_CS
(0),

47 
U8G_ESC_ADR
(0),

48 
U8G_ESC_RST
(15),

49 
U8G_ESC_DLY
(100),

50 
U8G_ESC_CS
(1),

51 
U8G_ESC_DLY
(50),

58 
U8G_ESC_DLY
(100),

60 
U8G_ESC_CS
(0),

61 
U8G_ESC_END


64 
uöt8_t
 
	$u8g_dev_°7920_128x64_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

66 
msg
)

68 
U8G_DEV_MSG_INIT
:

69 
	`u8g_InôCom
(
u8g
, 
dev
);

70 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7920_128x64_öô_£q
);

72 
U8G_DEV_MSG_STOP
:

74 
U8G_DEV_MSG_PAGE_NEXT
:

76 
uöt8_t
 
y
, 
i
;

77 
uöt8_t
 *
±r
;

78 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

80 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

81 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

82 
y
 = 
pb
->
p
.
∑ge_y0
;

83 
±r
 = 
pb
->
buf
;

84  
i
 = 0; i < 8; i ++ )

86 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

87 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x03e );

89 i‡–
y
 < 32 )

91 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | 
y
 );

92 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

96 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | (
y
-32) );

97 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | 8);

100 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

101 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

102 
±r
 +
WIDTH
/8;

103 
y
++;

105 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

109  
	`u8g_dev_pb8h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

110 
	}
}

112 
uöt8_t
 
	$u8g_dev_°7920_128x64_4x_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

114 
msg
)

116 
U8G_DEV_MSG_INIT
:

117 
	`u8g_InôCom
(
u8g
, 
dev
);

118 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7920_128x64_öô_£q
);

120 
U8G_DEV_MSG_STOP
:

122 
U8G_DEV_MSG_PAGE_NEXT
:

124 
uöt8_t
 
y
, 
i
;

125 
uöt8_t
 *
±r
;

126 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

128 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

129 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

130 
y
 = 
pb
->
p
.
∑ge_y0
;

131 
±r
 = 
pb
->
buf
;

132  
i
 = 0; i < 32; i ++ )

134 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

135 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x03e );

137 i‡–
y
 < 32 )

139 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | 
y
 );

140 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

144 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | (
y
-32) );

145 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | 8);

148 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

149 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

150 
±r
 +
WIDTH
/8;

151 
y
++;

153 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

157  
	`u8g_dev_pb32h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

158 
	}
}

160 
U8G_PB_DEV
(
u8g_dev_°7920_128x64_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7920_128x64_‚
, 
U8G_COM_ST7920_SW_SPI
);

161 
U8G_PB_DEV
(
u8g_dev_°7920_128x64_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7920_128x64_‚
, 
U8G_COM_ST7920_HW_SPI
);

162 
U8G_PB_DEV
(
u8g_dev_°7920_128x64_8bô
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7920_128x64_‚
, 
U8G_COM_FAST_PARALLEL
);

164 
	#QWIDTH
 (
WIDTH
*4)

	)

165 
uöt8_t
 
	gu8g_dev_°7920_128x64_4x_buf
[
QWIDTH
] 
	gU8G_NOCOMMON
 ;

166 
u8g_pb_t
 
	gu8g_dev_°7920_128x64_4x_pb
 = { {32, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_°7920_128x64_4x_buf
};

167 
u8g_dev_t
 
	gu8g_dev_°7920_128x64_4x_sw_•i
 = { 
u8g_dev_°7920_128x64_4x_‚
, &
u8g_dev_°7920_128x64_4x_pb
, 
U8G_COM_ST7920_SW_SPI
 };

168 
u8g_dev_t
 
	gu8g_dev_°7920_128x64_4x_hw_•i
 = { 
u8g_dev_°7920_128x64_4x_‚
, &
u8g_dev_°7920_128x64_4x_pb
, 
U8G_COM_ST7920_HW_SPI
 };

169 
u8g_dev_t
 
	gu8g_dev_°7920_128x64_4x_8bô
 = { 
u8g_dev_°7920_128x64_4x_‚
, &
u8g_dev_°7920_128x64_4x_pb
, 
U8G_COM_FAST_PARALLEL
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_st7920_192x32.c

37 
	~"u8g.h
"

39 
	#WIDTH
 192

	)

40 
	#HEIGHT
 32

	)

44 c⁄° 
uöt8_t
 
	gu8g_dev_°7920_192x32_öô_£q
[] 
	gPROGMEM
 = {

45 
U8G_ESC_CS
(0),

46 
U8G_ESC_ADR
(0),

47 
U8G_ESC_RST
(15),

48 
U8G_ESC_DLY
(100),

49 
U8G_ESC_CS
(1),

50 
U8G_ESC_DLY
(50),

57 
U8G_ESC_DLY
(100),

59 
U8G_ESC_CS
(0),

60 
U8G_ESC_END


63 
uöt8_t
 
	$u8g_dev_°7920_192x32_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

65 
msg
)

67 
U8G_DEV_MSG_INIT
:

68 
	`u8g_InôCom
(
u8g
, 
dev
);

69 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7920_192x32_öô_£q
);

71 
U8G_DEV_MSG_STOP
:

73 
U8G_DEV_MSG_PAGE_NEXT
:

75 
uöt8_t
 
y
, 
i
;

76 
uöt8_t
 *
±r
;

77 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

79 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

80 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

81 
y
 = 
pb
->
p
.
∑ge_y0
;

82 
±r
 = 
pb
->
buf
;

83  
i
 = 0; i < 8; i ++ )

85 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

86 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x03e );

87 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | 
y
 );

88 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

89 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

90 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

91 
±r
 +
WIDTH
/8;

92 
y
++;

94 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

98  
	`u8g_dev_pb8h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

99 
	}
}

101 
uöt8_t
 
	$u8g_dev_°7920_192x32_4x_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

103 
msg
)

105 
U8G_DEV_MSG_INIT
:

106 
	`u8g_InôCom
(
u8g
, 
dev
);

107 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7920_192x32_öô_£q
);

109 
U8G_DEV_MSG_STOP
:

111 
U8G_DEV_MSG_PAGE_NEXT
:

113 
uöt8_t
 
y
, 
i
;

114 
uöt8_t
 *
±r
;

115 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

117 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

118 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

119 
y
 = 
pb
->
p
.
∑ge_y0
;

120 
±r
 = 
pb
->
buf
;

121  
i
 = 0; i < 32; i ++ )

123 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

124 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x03e );

125 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | 
y
 );

126 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

127 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

128 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

129 
±r
 +
WIDTH
/8;

130 
y
++;

132 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

136  
	`u8g_dev_pb32h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

137 
	}
}

140 
U8G_PB_DEV
(
u8g_dev_°7920_192x32_sw_•i
, 
WIDTH
, 
HEIGHT
, 8, 
u8g_dev_°7920_192x32_‚
, 
U8G_COM_ST7920_SW_SPI
);

141 
U8G_PB_DEV
(
u8g_dev_°7920_192x32_hw_•i
, 
WIDTH
, 
HEIGHT
, 8, 
u8g_dev_°7920_192x32_‚
, 
U8G_COM_ST7920_HW_SPI
);

142 
U8G_PB_DEV
(
u8g_dev_°7920_192x32_8bô
, 
WIDTH
, 
HEIGHT
, 8, 
u8g_dev_°7920_192x32_‚
, 
U8G_COM_FAST_PARALLEL
);

145 
	#QWIDTH
 (
WIDTH
*4)

	)

146 
uöt8_t
 
	gu8g_dev_°7920_192x32_4x_buf
[
QWIDTH
] 
	gU8G_NOCOMMON
 ;

147 
u8g_pb_t
 
	gu8g_dev_°7920_192x32_4x_pb
 = { {32, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_°7920_192x32_4x_buf
};

148 
u8g_dev_t
 
	gu8g_dev_°7920_192x32_4x_sw_•i
 = { 
u8g_dev_°7920_192x32_4x_‚
, &
u8g_dev_°7920_192x32_4x_pb
, 
U8G_COM_ST7920_SW_SPI
 };

149 
u8g_dev_t
 
	gu8g_dev_°7920_192x32_4x_hw_•i
 = { 
u8g_dev_°7920_192x32_4x_‚
, &
u8g_dev_°7920_192x32_4x_pb
, 
U8G_COM_ST7920_HW_SPI
 };

150 
u8g_dev_t
 
	gu8g_dev_°7920_192x32_4x_8bô
 = { 
u8g_dev_°7920_192x32_4x_‚
, &
u8g_dev_°7920_192x32_4x_pb
, 
U8G_COM_FAST_PARALLEL
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_st7920_202x32.c

39 
	~"u8g.h
"

41 
	#WIDTH
 202

	)

42 
	#HEIGHT
 32

	)

43 
	#PAGE_HEIGHT
 8

	)

47 c⁄° 
uöt8_t
 
	gu8g_dev_°7920_202x32_öô_£q
[] 
	gPROGMEM
 = {

48 
U8G_ESC_CS
(0),

49 
U8G_ESC_ADR
(0),

50 
U8G_ESC_RST
(15),

51 
U8G_ESC_DLY
(100),

52 
U8G_ESC_CS
(1),

53 
U8G_ESC_DLY
(50),

60 
U8G_ESC_DLY
(100),

62 
U8G_ESC_CS
(0),

63 
U8G_ESC_END


66 
uöt8_t
 
	$u8g_dev_°7920_202x32_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

68 
msg
)

70 
U8G_DEV_MSG_INIT
:

71 
	`u8g_InôCom
(
u8g
, 
dev
);

72 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7920_202x32_öô_£q
);

74 
U8G_DEV_MSG_STOP
:

76 
U8G_DEV_MSG_PAGE_NEXT
:

78 
uöt8_t
 
y
, 
i
;

79 
uöt8_t
 *
±r
;

80 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

82 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

83 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

84 
y
 = 
pb
->
p
.
∑ge_y0
;

85 
±r
 = 
pb
->
buf
;

86  
i
 = 0; i < 8; i ++ )

88 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

89 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x03e );

90 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | 
y
 );

91 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

92 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

93 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

94 
±r
 +
WIDTH
/8;

95 
y
++;

97 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

101  
	`u8g_dev_pb8h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

102 
	}
}

104 
uöt8_t
 
	$u8g_dev_°7920_202x32_4x_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

106 
msg
)

108 
U8G_DEV_MSG_INIT
:

109 
	`u8g_InôCom
(
u8g
, 
dev
);

110 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_°7920_202x32_öô_£q
);

112 
U8G_DEV_MSG_STOP
:

114 
U8G_DEV_MSG_PAGE_NEXT
:

116 
uöt8_t
 
y
, 
i
;

117 
uöt8_t
 *
±r
;

118 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

120 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

121 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

122 
y
 = 
pb
->
p
.
∑ge_y0
;

123 
±r
 = 
pb
->
buf
;

124  
i
 = 0; i < 32; i ++ )

126 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

127 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x03e );

128 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | 
y
 );

129 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

130 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

131 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

132 
±r
 +
WIDTH
/8;

133 
y
++;

135 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

139  
	`u8g_dev_pb32h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

140 
	}
}

143 
U8G_PB_DEV
(
u8g_dev_°7920_202x32_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7920_202x32_‚
, 
U8G_COM_ST7920_SW_SPI
);

144 
U8G_PB_DEV
(
u8g_dev_°7920_202x32_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7920_202x32_‚
, 
U8G_COM_ST7920_HW_SPI
);

145 
U8G_PB_DEV
(
u8g_dev_°7920_202x32_8bô
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_°7920_202x32_‚
, 
U8G_COM_FAST_PARALLEL
);

147 
	#QWIDTH
 (
WIDTH
*4)

	)

148 
uöt8_t
 
	gu8g_dev_°7920_202x32_4x_buf
[
QWIDTH
] 
	gU8G_NOCOMMON
 ;

149 
u8g_pb_t
 
	gu8g_dev_°7920_202x32_4x_pb
 = { {32, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_°7920_202x32_4x_buf
};

150 
u8g_dev_t
 
	gu8g_dev_°7920_202x32_4x_sw_•i
 = { 
u8g_dev_°7920_202x32_4x_‚
, &
u8g_dev_°7920_202x32_4x_pb
, 
U8G_COM_ST7920_SW_SPI
 };

151 
u8g_dev_t
 
	gu8g_dev_°7920_202x32_4x_hw_•i
 = { 
u8g_dev_°7920_202x32_4x_‚
, &
u8g_dev_°7920_202x32_4x_pb
, 
U8G_COM_ST7920_HW_SPI
 };

152 
u8g_dev_t
 
	gu8g_dev_°7920_202x32_4x_8bô
 = { 
u8g_dev_°7920_202x32_4x_‚
, &
u8g_dev_°7920_202x32_4x_pb
, 
U8G_COM_FAST_PARALLEL
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_t6963_128x64.c

51 
	~"u8g.h
"

53 
	#WIDTH
 128

	)

54 
	#HEIGHT
 64

	)

55 
	#PAGE_HEIGHT
 16

	)

59 c⁄° 
uöt8_t
 
	gu8g_dev_t6963_128x64_öô_£q
[] 
	gPROGMEM
 = {

60 
U8G_ESC_CS
(0),

61 
U8G_ESC_ADR
(0),

62 
U8G_ESC_RST
(15),

64 
U8G_ESC_CS
(1),

65 
U8G_ESC_DLY
(50),

67 
U8G_ESC_ADR
(0),

70 
U8G_ESC_ADR
(1),

73 
U8G_ESC_ADR
(0),

76 
U8G_ESC_ADR
(1),

79 
U8G_ESC_ADR
(0),

82 
U8G_ESC_ADR
(1),

85 
U8G_ESC_ADR
(0),

86 
WIDTH
/8,

88 
U8G_ESC_ADR
(1),

91 
U8G_ESC_ADR
(0),

94 
U8G_ESC_ADR
(1),

97 
U8G_ESC_ADR
(0),

98 
WIDTH
/8,

100 
U8G_ESC_ADR
(1),

110 
U8G_ESC_ADR
(1),

113 
U8G_ESC_ADR
(1),

126 
U8G_ESC_ADR
(0),

129 
U8G_ESC_ADR
(1),

133 
U8G_ESC_DLY
(100),

135 
U8G_ESC_ADR
(0),

136 
U8G_ESC_CS
(0),

137 
U8G_ESC_END


140 
uöt8_t
 
	$u8g_dev_t6963_128x64_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

142 
msg
)

144 
U8G_DEV_MSG_INIT
:

145 
	`u8g_InôCom
(
u8g
, 
dev
);

146 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_t6963_128x64_öô_£q
);

148 
U8G_DEV_MSG_STOP
:

150 
U8G_DEV_MSG_PAGE_NEXT
:

152 
uöt8_t
 
y
, 
i
;

153 
uöt16_t
 
di•_øm_adr
;

154 
uöt8_t
 *
±r
;

155 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

158 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

159 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

160 
y
 = 
pb
->
p
.
∑ge_y0
;

161 
±r
 = 
pb
->
buf
;

162 
di•_øm_adr
 = 
WIDTH
/8;

163 
di•_øm_adr
 *
y
;

164  
i
 = 0; i < 
PAGE_HEIGHT
; i ++ )

166 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

167 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
&255 );

168 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
>>8 );

169 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

170 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x024 );

172 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

174 
±r
 +
WIDTH
/8;

175 
di•_øm_adr
 +
WIDTH
/8;

177 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

178 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

182  
	`u8g_dev_pb16h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

183 
	}
}

187 
uöt8_t
 
	gu8g_dev_t6963_128x64_2x_bw_buf
[
WIDTH
/8*
PAGE_HEIGHT
] 
	gU8G_NOCOMMON
 ;

188 
u8g_pb_t
 
	gu8g_dev_t6963_128x64_2x_bw_pb
 = { {
PAGE_HEIGHT
, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_t6963_128x64_2x_bw_buf
};

189 
u8g_dev_t
 
	gu8g_dev_t6963_128x64_8bô
 = { 
u8g_dev_t6963_128x64_‚
, &
u8g_dev_t6963_128x64_2x_bw_pb
, 
U8G_COM_T6963
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_t6963_240x128.c

51 
	~"u8g.h
"

53 
	#WIDTH
 240

	)

54 
	#HEIGHT
 128

	)

55 
	#PAGE_HEIGHT
 16

	)

63 c⁄° 
uöt8_t
 
	gu8g_dev_t6963_240x128_öô_£q
[] 
	gPROGMEM
 = {

64 
U8G_ESC_CS
(0),

65 
U8G_ESC_ADR
(0),

66 
U8G_ESC_RST
(15),

68 
U8G_ESC_CS
(1),

69 
U8G_ESC_DLY
(50),

71 
U8G_ESC_ADR
(0),

74 
U8G_ESC_ADR
(1),

77 
U8G_ESC_ADR
(0),

80 
U8G_ESC_ADR
(1),

83 
U8G_ESC_ADR
(0),

86 
U8G_ESC_ADR
(1),

89 
U8G_ESC_ADR
(0),

90 
WIDTH
/8,

92 
U8G_ESC_ADR
(1),

95 
U8G_ESC_ADR
(0),

98 
U8G_ESC_ADR
(1),

101 
U8G_ESC_ADR
(0),

102 
WIDTH
/8,

104 
U8G_ESC_ADR
(1),

114 
U8G_ESC_ADR
(1),

117 
U8G_ESC_ADR
(1),

130 
U8G_ESC_ADR
(0),

133 
U8G_ESC_ADR
(1),

137 
U8G_ESC_DLY
(100),

139 
U8G_ESC_ADR
(0),

140 
U8G_ESC_CS
(0),

141 
U8G_ESC_END


144 
uöt8_t
 
	$u8g_dev_t6963_240x128_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

146 
msg
)

148 
U8G_DEV_MSG_INIT
:

149 
	`u8g_InôCom
(
u8g
, 
dev
);

150 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_t6963_240x128_öô_£q
);

152 
U8G_DEV_MSG_STOP
:

154 
U8G_DEV_MSG_PAGE_NEXT
:

156 
uöt8_t
 
y
, 
i
;

157 
uöt16_t
 
di•_øm_adr
;

158 
uöt8_t
 *
±r
;

159 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

162 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

163 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

164 
y
 = 
pb
->
p
.
∑ge_y0
;

165 
±r
 = 
pb
->
buf
;

166 
di•_øm_adr
 = 
WIDTH
/8;

167 
di•_øm_adr
 *
y
;

168  
i
 = 0; i < 
PAGE_HEIGHT
; i ++ )

170 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

171 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
&255 );

172 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
>>8 );

173 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

174 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x024 );

176 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

178 
±r
 +
WIDTH
/8;

179 
di•_øm_adr
 +
WIDTH
/8;

181 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

182 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

186  
	`u8g_dev_pb16h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

187 
	}
}

191 
uöt8_t
 
	gu8g_dev_t6963_240x128_2x_bw_buf
[
WIDTH
/8*
PAGE_HEIGHT
] 
	gU8G_NOCOMMON
 ;

192 
u8g_pb_t
 
	gu8g_dev_t6963_240x128_2x_bw_pb
 = { {
PAGE_HEIGHT
, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_t6963_240x128_2x_bw_buf
};

193 
u8g_dev_t
 
	gu8g_dev_t6963_240x128_8bô
 = { 
u8g_dev_t6963_240x128_‚
, &
u8g_dev_t6963_240x128_2x_bw_pb
, 
U8G_COM_T6963
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_t6963_240x64.c

51 
	~"u8g.h
"

53 
	#WIDTH
 240

	)

54 
	#HEIGHT
 64

	)

55 
	#PAGE_HEIGHT
 16

	)

63 c⁄° 
uöt8_t
 
	gu8g_dev_t6963_240x64_öô_£q
[] 
	gPROGMEM
 = {

64 
U8G_ESC_CS
(0),

65 
U8G_ESC_ADR
(0),

66 
U8G_ESC_RST
(15),

68 
U8G_ESC_CS
(1),

69 
U8G_ESC_DLY
(50),

71 
U8G_ESC_ADR
(0),

74 
U8G_ESC_ADR
(1),

77 
U8G_ESC_ADR
(0),

80 
U8G_ESC_ADR
(1),

83 
U8G_ESC_ADR
(0),

86 
U8G_ESC_ADR
(1),

89 
U8G_ESC_ADR
(0),

90 
WIDTH
/8,

92 
U8G_ESC_ADR
(1),

95 
U8G_ESC_ADR
(0),

98 
U8G_ESC_ADR
(1),

101 
U8G_ESC_ADR
(0),

102 
WIDTH
/8,

104 
U8G_ESC_ADR
(1),

114 
U8G_ESC_ADR
(1),

117 
U8G_ESC_ADR
(1),

130 
U8G_ESC_ADR
(0),

133 
U8G_ESC_ADR
(1),

137 
U8G_ESC_DLY
(100),

139 
U8G_ESC_ADR
(0),

140 
U8G_ESC_CS
(0),

141 
U8G_ESC_END


144 
uöt8_t
 
	$u8g_dev_t6963_240x64_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

146 
msg
)

148 
U8G_DEV_MSG_INIT
:

149 
	`u8g_InôCom
(
u8g
, 
dev
);

150 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_t6963_240x64_öô_£q
);

152 
U8G_DEV_MSG_STOP
:

154 
U8G_DEV_MSG_PAGE_NEXT
:

156 
uöt8_t
 
y
, 
i
;

157 
uöt16_t
 
di•_øm_adr
;

158 
uöt8_t
 *
±r
;

159 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

162 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

163 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

164 
y
 = 
pb
->
p
.
∑ge_y0
;

165 
±r
 = 
pb
->
buf
;

166 
di•_øm_adr
 = 
WIDTH
/8;

167 
di•_øm_adr
 *
y
;

168  
i
 = 0; i < 
PAGE_HEIGHT
; i ++ )

170 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

171 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
&255 );

172 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
di•_øm_adr
>>8 );

173 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

174 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x024 );

176 
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
/8, 
±r
);

178 
±r
 +
WIDTH
/8;

179 
di•_øm_adr
 +
WIDTH
/8;

181 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

182 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

186  
	`u8g_dev_pb16h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

187 
	}
}

191 
uöt8_t
 
	gu8g_dev_t6963_240x64_2x_bw_buf
[
WIDTH
/8*
PAGE_HEIGHT
] 
	gU8G_NOCOMMON
 ;

192 
u8g_pb_t
 
	gu8g_dev_t6963_240x64_2x_bw_pb
 = { {
PAGE_HEIGHT
, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_t6963_240x64_2x_bw_buf
};

193 
u8g_dev_t
 
	gu8g_dev_t6963_240x64_8bô
 = { 
u8g_dev_t6963_240x64_‚
, &
u8g_dev_t6963_240x64_2x_bw_pb
, 
U8G_COM_T6963
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_tls8204_84x48.c

43 
	~"u8g.h
"

45 
	#WIDTH
 84

	)

46 
	#HEIGHT
 48

	)

47 
	#PAGE_HEIGHT
 8

	)

50 c⁄° 
uöt8_t
 
	gu8g_dev_és8204_öô_£q
[] 
	gPROGMEM
 = {

51 
U8G_ESC_CS
(0),

52 
U8G_ESC_ADR
(0),

53 
U8G_ESC_RST
(1),

54 
U8G_ESC_CS
(1),

63 
U8G_ESC_DLY
(100),

66 
U8G_ESC_DLY
(100),

67 
U8G_ESC_DLY
(100),

70 
U8G_ESC_DLY
(100),

71 
U8G_ESC_CS
(0),

72 
U8G_ESC_END


76 
uöt8_t
 
	$u8g_dev_és8204_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

78 
msg
)

80 
U8G_DEV_MSG_INIT
:

81 
	`u8g_InôCom
(
u8g
, 
dev
);

82 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_és8204_öô_£q
);

84 
U8G_DEV_MSG_STOP
:

86 
U8G_DEV_MSG_PAGE_NEXT
:

88 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

89 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

90 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

91 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x020 );

92 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 );

93 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x040 | 
pb
->
p
.
∑ge
);

94 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

95 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

97 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

100 
U8G_DEV_MSG_CONTRAST
:

102 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

103 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

104 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x021);

105 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x080 | ( (*(
uöt8_t
 *)
¨g
) >> 1 ) );

106 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x020);

107 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

110  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

111 
	}
}

114 
U8G_PB_DEV
(
u8g_dev_és8204_84x48_sw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_és8204_‚
, 
U8G_COM_SW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_uc1610_dogxl160.c

37 
	~"u8g.h
"

39 
	#WIDTH
 160

	)

40 
	#HEIGHT
 104

	)

42 c⁄° 
uöt8_t
 
	gu8g_dev_uc1610_dogxl160_öô_£q
[] 
	gPROGMEM
 = {

43 
U8G_ESC_CS
(0),

44 
U8G_ESC_ADR
(0),

45 
U8G_ESC_RST
(1),

46 
U8G_ESC_CS
(1),

60 
U8G_ESC_DLY
(100),

62 
U8G_ESC_DLY
(100),

63 
U8G_ESC_DLY
(100),

67 
U8G_ESC_CS
(0),

68 
U8G_ESC_END


71 c⁄° 
uöt8_t
 
	gu8g_dev_uc1610_dogxl160_d©a_°¨t
[] 
	gPROGMEM
 = {

72 
U8G_ESC_ADR
(0),

73 
U8G_ESC_CS
(1),

76 
U8G_ESC_END


79 
uöt8_t
 
	$u8g_dev_1to2
(
uöt8_t
 
n
)

81 
uöt8_t
 
a
,
b
,
c
;

82 
a
 = 
n
;

83 
a
 &= 1;

84 
n
 <<= 1;

85 
b
 = 
n
;

86 
b
 &= 4;

87 
n
 <<= 1;

88 
c
 = 
n
;

89 
c
 &= 16;

90 
n
 <<= 1;

91 
n
 &= 64;

92 
n
 |
a
;

93 
n
 |
b
;

94 
n
 |
c
;

95 
n
 |=Ç << 1;

96  
n
;

97 
	}
}

99 
uöt8_t
 
	$u8g_dev_uc1610_dogxl160_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

101 
msg
)

103 
U8G_DEV_MSG_INIT
:

104 
	`u8g_InôCom
(
u8g
, 
dev
);

105 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_öô_£q
);

107 
U8G_DEV_MSG_STOP
:

109 
U8G_DEV_MSG_PAGE_NEXT
:

111 
i
;

112 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

113 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

114 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
*2) );

115 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

116  
i
 = 0; i < 
WIDTH
; i++ )

118 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`u8g_dev_1to2
–((
uöt8_t
 *)(
pb
->
buf
))[
i
] ) );

121 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

122 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
*2+1) );

123 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

124  
i
 = 0; i < 
WIDTH
; i++ )

126 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`u8g_dev_1to2
–((
uöt8_t
 *)(
pb
->
buf
))[
i
] >> 4 ) );

129 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

132 
U8G_DEV_MSG_CONTRAST
:

133 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

134 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

135 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

136 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

137 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

140  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

141 
	}
}

143 
uöt8_t
 
	$u8g_dev_uc1610_dogxl160_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

145 
msg
)

147 
U8G_DEV_MSG_INIT
:

148 
	`u8g_InôCom
(
u8g
, 
dev
);

149 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_öô_£q
);

151 
U8G_DEV_MSG_STOP
:

153 
U8G_DEV_MSG_PAGE_NEXT
:

155 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

156 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

157 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
) );

158 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

159 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

161 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

164 
U8G_DEV_MSG_CONTRAST
:

165 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

166 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

167 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

168 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

169 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

172  
	`u8g_dev_pb8v2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

173 
	}
}

175 
uöt8_t
 
	$u8g_dev_uc1610_dogxl160_2x_bw_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

177 
msg
)

179 
U8G_DEV_MSG_INIT
:

180 
	`u8g_InôCom
(
u8g
, 
dev
);

181 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_öô_£q
);

183 
U8G_DEV_MSG_STOP
:

185 
U8G_DEV_MSG_PAGE_NEXT
:

187 
i
;

188 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

190 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

191 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
*4) );

192 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

193  
i
 = 0; i < 
WIDTH
; i++ )

195 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`u8g_dev_1to2
–((
uöt8_t
 *)(
pb
->
buf
))[
i
] ) );

198 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

199 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
*4+1) );

200 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

201  
i
 = 0; i < 
WIDTH
; i++ )

203 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`u8g_dev_1to2
–((
uöt8_t
 *)(
pb
->
buf
))[
i
] >> 4 ) );

206 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

207 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
*4+2) );

208 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

209  
i
 = 0; i < 
WIDTH
; i++ )

211 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`u8g_dev_1to2
–((
uöt8_t
 *)(
pb
->
buf
+
WIDTH
))[
i
] ) );

214 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

215 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
*4+3) );

216 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

217  
i
 = 0; i < 
WIDTH
; i++ )

219 
	`u8g_WrôeByã
(
u8g
, 
dev
, 
	`u8g_dev_1to2
–((
uöt8_t
 *)(
pb
->
buf
+
WIDTH
))[
i
] >> 4 ) );

222 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

225 
U8G_DEV_MSG_CONTRAST
:

226 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

227 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

228 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

229 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

230 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

233  
	`u8g_dev_pb16v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

234 
	}
}

236 
uöt8_t
 
	$u8g_dev_uc1610_dogxl160_2x_gr_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

238 
msg
)

240 
U8G_DEV_MSG_INIT
:

241 
	`u8g_InôCom
(
u8g
, 
dev
);

242 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_öô_£q
);

244 
U8G_DEV_MSG_STOP
:

246 
U8G_DEV_MSG_PAGE_NEXT
:

248 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

250 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

251 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
*2) );

252 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

253 i‡–
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
, 
pb
->
buf
) == 0 )

256 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1610_dogxl160_d©a_°¨t
);

257 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x060 | (
pb
->
p
.
∑ge
*2+1) );

258 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

259 i‡–
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
WIDTH
, 
pb
->
buf
+WIDTH) == 0 )

262 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

265 
U8G_DEV_MSG_CONTRAST
:

266 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

267 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

268 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

269 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 1);

270 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

273  
	`u8g_dev_pb16v2_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

274 
	}
}

276 
U8G_PB_DEV
(
u8g_dev_uc1610_dogxl160_bw_sw_•i
, 
WIDTH
, 
HEIGHT
, 8, 
u8g_dev_uc1610_dogxl160_bw_‚
, 
U8G_COM_SW_SPI
);

277 
U8G_PB_DEV
(
u8g_dev_uc1610_dogxl160_bw_hw_•i
, 
WIDTH
, 
HEIGHT
, 8, 
u8g_dev_uc1610_dogxl160_bw_‚
, 
U8G_COM_HW_SPI
);

279 
U8G_PB_DEV
(
u8g_dev_uc1610_dogxl160_gr_sw_•i
, 
WIDTH
, 
HEIGHT
, 4, 
u8g_dev_uc1610_dogxl160_gr_‚
, 
U8G_COM_SW_SPI
);

280 
U8G_PB_DEV
(
u8g_dev_uc1610_dogxl160_gr_hw_•i
, 
WIDTH
, 
HEIGHT
, 4, 
u8g_dev_uc1610_dogxl160_gr_‚
, 
U8G_COM_HW_SPI
);

282 
uöt8_t
 
	gu8g_dev_uc1610_dogxl160_2x_bw_buf
[
WIDTH
*2] 
	gU8G_NOCOMMON
 ;

283 
u8g_pb_t
 
	gu8g_dev_uc1610_dogxl160_2x_bw_pb
 = { {16, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_uc1610_dogxl160_2x_bw_buf
};

284 
u8g_dev_t
 
	gu8g_dev_uc1610_dogxl160_2x_bw_sw_•i
 = { 
u8g_dev_uc1610_dogxl160_2x_bw_‚
, &
u8g_dev_uc1610_dogxl160_2x_bw_pb
, 
U8G_COM_SW_SPI
 };

285 
u8g_dev_t
 
	gu8g_dev_uc1610_dogxl160_2x_bw_hw_•i
 = { 
u8g_dev_uc1610_dogxl160_2x_bw_‚
, &
u8g_dev_uc1610_dogxl160_2x_bw_pb
, 
U8G_COM_HW_SPI
 };

287 
uöt8_t
 
	gu8g_dev_uc1610_dogxl160_2x_gr_buf
[
WIDTH
*2] 
	gU8G_NOCOMMON
 ;

288 
u8g_pb_t
 
	gu8g_dev_uc1610_dogxl160_2x_gr_pb
 = { {8, 
HEIGHT
, 0, 0, 0}, 
WIDTH
, 
u8g_dev_uc1610_dogxl160_2x_gr_buf
};

289 
u8g_dev_t
 
	gu8g_dev_uc1610_dogxl160_2x_gr_sw_•i
 = { 
u8g_dev_uc1610_dogxl160_2x_gr_‚
, &
u8g_dev_uc1610_dogxl160_2x_gr_pb
, 
U8G_COM_SW_SPI
 };

290 
u8g_dev_t
 
	gu8g_dev_uc1610_dogxl160_2x_gr_hw_•i
 = { 
u8g_dev_uc1610_dogxl160_2x_gr_‚
, &
u8g_dev_uc1610_dogxl160_2x_gr_pb
, 
U8G_COM_HW_SPI
 };

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_uc1701_dogs102.c

37 
	~"u8g.h
"

39 
	#WIDTH
 102

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

43 c⁄° 
uöt8_t
 
	gu8g_dev_dogs102_öô_£q
[] 
	gPROGMEM
 = {

44 
U8G_ESC_CS
(0),

45 
U8G_ESC_ADR
(0),

46 
U8G_ESC_RST
(1),

47 
U8G_ESC_CS
(1),

61 
U8G_ESC_DLY
(100),

63 
U8G_ESC_DLY
(100),

64 
U8G_ESC_DLY
(100),

66 
U8G_ESC_CS
(0),

67 
U8G_ESC_END


70 c⁄° 
uöt8_t
 
	gu8g_dev_dogs102_d©a_°¨t
[] 
	gPROGMEM
 = {

71 
U8G_ESC_ADR
(0),

72 
U8G_ESC_CS
(1),

75 
U8G_ESC_END


78 
uöt8_t
 
	$u8g_dev_dogs102_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

80 
msg
)

82 
U8G_DEV_MSG_INIT
:

83 
	`u8g_InôCom
(
u8g
, 
dev
);

84 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_dogs102_öô_£q
);

86 
U8G_DEV_MSG_STOP
:

88 
U8G_DEV_MSG_PAGE_NEXT
:

90 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

91 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_dogs102_d©a_°¨t
);

92 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

93 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

94 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

96 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

99 
U8G_DEV_MSG_CONTRAST
:

100 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

101 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

102 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

103 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

104 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

107  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

108 
	}
}

110 
U8G_PB_DEV
(
u8g_dev_uc1701_dogs102_sw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_dogs102_‚
, 
U8G_COM_SW_SPI
);

111 
U8G_PB_DEV
(
u8g_dev_uc1701_dogs102_hw_•i
 , 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_dogs102_‚
, 
U8G_COM_HW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_uc1701_mini12864.c

37 
	~"u8g.h
"

39 
	#WIDTH
 128

	)

40 
	#HEIGHT
 64

	)

41 
	#PAGE_HEIGHT
 8

	)

43 c⁄° 
uöt8_t
 
	gu8g_dev_uc1701_möi12864_öô_£q
[] 
	gPROGMEM
 = {

44 
U8G_ESC_CS
(0),

45 
U8G_ESC_ADR
(0),

46 
U8G_ESC_RST
(1),

47 
U8G_ESC_CS
(1),

64 
U8G_ESC_DLY
(100),

66 
U8G_ESC_DLY
(100),

67 
U8G_ESC_DLY
(100),

69 
U8G_ESC_CS
(0),

70 
U8G_ESC_END


73 c⁄° 
uöt8_t
 
	gu8g_dev_uc1701_möi12864_d©a_°¨t
[] 
	gPROGMEM
 = {

74 
U8G_ESC_ADR
(0),

75 
U8G_ESC_CS
(1),

78 
U8G_ESC_END


81 
uöt8_t
 
	$u8g_dev_uc1701_möi12864_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

83 
msg
)

85 
U8G_DEV_MSG_INIT
:

86 
	`u8g_InôCom
(
u8g
, 
dev
);

87 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1701_möi12864_öô_£q
);

89 
U8G_DEV_MSG_STOP
:

91 
U8G_DEV_MSG_PAGE_NEXT
:

93 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

94 
	`u8g_WrôeEscSeqP
(
u8g
, 
dev
, 
u8g_dev_uc1701_möi12864_d©a_°¨t
);

95 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x0b0 | 
pb
->
p
.
∑ge
);

96 
	`u8g_SëAddªss
(
u8g
, 
dev
, 1);

97 i‡–
	`u8g_pb_WrôeBuf„r
(
pb
, 
u8g
, 
dev
) == 0 )

99 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

102 
U8G_DEV_MSG_CONTRAST
:

103 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 1);

104 
	`u8g_SëAddªss
(
u8g
, 
dev
, 0);

105 
	`u8g_WrôeByã
(
u8g
, 
dev
, 0x081);

106 
	`u8g_WrôeByã
(
u8g
, 
dev
, (*(
uöt8_t
 *)
¨g
) >> 2);

107 
	`u8g_SëChùSñe˘
(
u8g
, 
dev
, 0);

110  
	`u8g_dev_pb8v1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

111 
	}
}

113 
U8G_PB_DEV
(
u8g_dev_uc1701_möi12864_sw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_uc1701_möi12864_‚
, 
U8G_COM_SW_SPI
);

114 
U8G_PB_DEV
(
u8g_dev_uc1701_möi12864_hw_•i
, 
WIDTH
, 
HEIGHT
, 
PAGE_HEIGHT
, 
u8g_dev_uc1701_möi12864_‚
, 
U8G_COM_HW_SPI
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_ellipse.c

43 
	~"u8g.h
"

46 #ifde‡
WORK_IN_PROGRESS


48 
	$u8g_DøwEŒù£Re˘
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
x1
, u8g_uöt_à
y1
)

50 
a
 = 
	`abs
(
x1
 - 
x0
);

51 
b
 = 
	`abs
(
y1
 - 
y0
);

52 
b1
 = 
b
&1;

53 
dx
 = 4*(1-
a
)*
b
*b;

54 
dy
 = 4*(
b1
+1)*
a
*a;

55 
îr
 = 
dx
+
dy
+
b1
*
a
*a;

56 
e2
;

58 i‡(
x0
 > 
x1
Ë{ x0 = x1; x1 +
a
; }

59 i‡(
y0
 > 
y1
) { y0 = y1; }

60 
y0
 +(
b
+1)/2;

61 
y1
 = 
y0
-
b1
;

62 
a
 *= 8*a;

63 
b1
 = 8*
b
*b;

66 
	`u8g_DøwPixñ
(
u8g
, 
x1
, 
y0
);

67 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
);

68 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y1
);

69 
	`u8g_DøwPixñ
(
u8g
, 
x1
, 
y1
);

70 
e2
 = 2*
îr
;

71 i‡(
e2
 >
dx
) {

72 
x0
++;

73 
x1
--;

74 
îr
 +
dx
 +
b1
;

76 i‡(
e2
 <
dy
) {

77 
y0
++;

78 
y1
--;

79 
îr
 +
dy
 +
a
;

81 } 
x0
 <
x1
);

83 
y0
-
y1
 < 
b
) {

84 
	`u8g_DøwPixñ
(
u8g
, 
x0
-1, 
y0
);

85 
	`u8g_DøwPixñ
(
u8g
, 
x1
+1, 
y0
++);

86 
	`u8g_DøwPixñ
(
u8g
, 
x0
-1, 
y1
);

87 
	`u8g_DøwPixñ
(
u8g
, 
x1
+1, 
y1
--);

89 
	}
}

91 
	$u8g_DøwEŒù£
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x0
, u8g_uöt_à
y0
, u8g_uöt_à
xr
, u8g_uöt_à
yr
)

93 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
+
yr
);

94 
	`u8g_DøwPixñ
(
u8g
, 
x0
, 
y0
-
yr
);

95 
	`u8g_DøwPixñ
(
u8g
, 
x0
+
xr
, 
y0
);

96 
	`u8g_DøwPixñ
(
u8g
, 
x0
-
xr
, 
y0
);

97 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_font.c

39 
	~"u8g.h
"

44 * 
	tu8g_glyph_t
;

47 
	#U8G_FONT_DATA_STRUCT_SIZE
 17

	)

72 
u8g_f⁄t_GëSåSize
(c⁄° *
f⁄t
, c⁄° *
s
, 
u8g_uöt_t
 *
width
, u8g_uöt_à*
height
);

73 
u8g_f⁄t_GëSåSizeP
(c⁄° *
f⁄t
, c⁄° *
s
, 
u8g_uöt_t
 *
width
, u8g_uöt_à*
height
);

76 
u8g_f⁄t_Adju°XYToDøw
(c⁄° *
f⁄t
, c⁄° *
s
, 
u8g_uöt_t
 *
x
, u8g_uöt_à*
y
);

77 
u8g_f⁄t_Adju°XYToDøwP
(c⁄° *
f⁄t
, c⁄° *
s
, 
u8g_uöt_t
 *
x
, u8g_uöt_à*
y
);

80 
u8g_f⁄t_GëSåMöBox
(
u8g_t
 *
u8g
, c⁄° *
f⁄t
, c⁄° *
s
, 
u8g_uöt_t
 *
x
, u8g_uöt_à*
y
, u8g_uöt_à*
width
, u8g_uöt_à*
height
);

89 
uöt8_t
 
	$u8g_f⁄t_gë_byã
(c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
, 
uöt8_t
 
off£t
)

91 
f⁄t
 +
off£t
;

92  
	`u8g_pgm_ªad
–(
u8g_pgm_uöt8_t
 *)
f⁄t
 );

93 
	}
}

95 
uöt16_t
 
	$u8g_f⁄t_gë_w‹d
(c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
, 
uöt8_t
 
off£t
Ë
U8G_NOINLINE
;

96 
uöt16_t
 
	$u8g_f⁄t_gë_w‹d
(c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
, 
uöt8_t
 
off£t
)

98 
uöt16_t
 
pos
;

99 
f⁄t
 +
off£t
;

100 
pos
 = 
	`u8g_pgm_ªad
–(
u8g_pgm_uöt8_t
 *)
f⁄t
 );

101 
f⁄t
++;

102 
pos
 <<= 8;

103 
pos
 +
	`u8g_pgm_ªad
–(
u8g_pgm_uöt8_t
 *)
f⁄t
);

104  
pos
;

105 
	}
}

110 
uöt8_t
 
	$u8g_f⁄t_GëF‹m©
(c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
Ë
U8G_NOINLINE
;

111 
uöt8_t
 
	$u8g_f⁄t_GëF‹m©
(c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
)

113  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 0);

114 
	}
}

116 
uöt8_t
 
	$u8g_f⁄t_GëF⁄tGlyphSåu˘uªSize
(c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
Ë
U8G_NOINLINE
;

117 
uöt8_t
 
	$u8g_f⁄t_GëF⁄tGlyphSåu˘uªSize
(c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
)

119 
	`u8g_f⁄t_GëF‹m©
(
f⁄t
))

125 
	}
}

127 
uöt8_t
 
	$u8g_f⁄t_GëBBXWidth
(c⁄° *
f⁄t
)

129  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 1);

130 
	}
}

132 
uöt8_t
 
	$u8g_f⁄t_GëBBXHeight
(c⁄° *
f⁄t
)

134  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 2);

135 
	}
}

137 
öt8_t
 
	$u8g_f⁄t_GëBBXOffX
(c⁄° *
f⁄t
)

139  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 3);

140 
	}
}

142 
öt8_t
 
	$u8g_f⁄t_GëBBXOffY
(c⁄° *
f⁄t
)

144  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 4);

145 
	}
}

147 
uöt8_t
 
	$u8g_f⁄t_GëC≠ôÆAHeight
(c⁄° *
f⁄t
)

149  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 5);

150 
	}
}

152 
uöt16_t
 
	$u8g_f⁄t_GëEncodög65Pos
(c⁄° *
f⁄t
Ë
U8G_NOINLINE
;

153 
uöt16_t
 
	$u8g_f⁄t_GëEncodög65Pos
(c⁄° *
f⁄t
)

155  
	`u8g_f⁄t_gë_w‹d
(
f⁄t
, 6);

156 
	}
}

158 
uöt16_t
 
	$u8g_f⁄t_GëEncodög97Pos
(c⁄° *
f⁄t
Ë
U8G_NOINLINE
;

159 
uöt16_t
 
	$u8g_f⁄t_GëEncodög97Pos
(c⁄° *
f⁄t
)

161  
	`u8g_f⁄t_gë_w‹d
(
f⁄t
, 8);

162 
	}
}

164 
uöt8_t
 
	$u8g_f⁄t_GëF⁄tSèπEncodög
(c⁄° *
f⁄t
)

166  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 10);

167 
	}
}

169 
uöt8_t
 
	$u8g_f⁄t_GëF⁄tEndEncodög
(c⁄° *
f⁄t
)

171  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 11);

172 
	}
}

174 
öt8_t
 
	$u8g_f⁄t_GëLowîGDes˚¡
(c⁄° *
f⁄t
)

176  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 12);

177 
	}
}

179 
öt8_t
 
	$u8g_f⁄t_GëF⁄tAs˚¡
(c⁄° *
f⁄t
)

181  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 13);

182 
	}
}

184 
öt8_t
 
	$u8g_f⁄t_GëF⁄tDes˚¡
(c⁄° *
f⁄t
)

186  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 14);

187 
	}
}

189 
öt8_t
 
	$u8g_f⁄t_GëF⁄tXAs˚¡
(c⁄° *
f⁄t
)

191  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 15);

192 
	}
}

194 
öt8_t
 
	$u8g_f⁄t_GëF⁄tXDes˚¡
(c⁄° *
f⁄t
)

196  
	`u8g_f⁄t_gë_byã
(
f⁄t
, 16);

197 
	}
}

201 
uöt8_t
 *
	$u8g_f⁄t_GëGlyphD©aSèπ
(c⁄° *
f⁄t
, 
u8g_glyph_t
 
g
)

203  ((
u8g_‚çgm_uöt8_t
 *)
g
Ë+ 
	`u8g_f⁄t_GëF⁄tGlyphSåu˘uªSize
(
f⁄t
);

204 
	}
}

207 
size_t
 
	$u8g_f⁄t_GëSize
(c⁄° *
f⁄t
)

209 
uöt8_t
 *
p
 = (uöt8_à*)(
f⁄t
);

210 
uöt8_t
 
f⁄t_f‹m©
 = 
	`u8g_f⁄t_GëF‹m©
(
f⁄t
);

211 
uöt8_t
 
d©a_°ru˘uª_size
 = 
	`u8g_f⁄t_GëF⁄tGlyphSåu˘uªSize
(
f⁄t
);

212 
uöt8_t
 
°¨t
, 
íd
;

213 
uöt8_t
 
i
;

214 
uöt8_t
 
mask
 = 255;

216 
°¨t
 = 
	`u8g_f⁄t_GëF⁄tSèπEncodög
(
f⁄t
);

217 
íd
 = 
	`u8g_f⁄t_GëF⁄tEndEncodög
(
f⁄t
);

219 i‡–
f⁄t_f‹m©
 == 1 )

220 
mask
 = 15;

222 
p
 +
U8G_FONT_DATA_STRUCT_SIZE
;

224 
i
 = 
°¨t
;

227 i‡–
	`u8g_pgm_ªad
((
u8g_pgm_uöt8_t
 *)(
p
)) == 255 )

229 
p
 += 1;

233 
p
 +
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)’)Ë+ 2 ) & 
mask
;

234 
p
 +
d©a_°ru˘uª_size
;

236 i‡–
i
 =
íd
 )

238 
i
++;

241  
p
 - (
uöt8_t
 *)
f⁄t
;

242 
	}
}

247 
uöt8_t
 
	$u8g_GëF⁄tBBXWidth
(
u8g_t
 *
u8g
)

249  
	`u8g_f⁄t_GëBBXWidth
(
u8g
->
f⁄t
);

250 
	}
}

252 
uöt8_t
 
	$u8g_GëF⁄tBBXHeight
(
u8g_t
 *
u8g
)

254  
	`u8g_f⁄t_GëBBXHeight
(
u8g
->
f⁄t
);

255 
	}
}

257 
öt8_t
 
	$u8g_GëF⁄tBBXOffX
(
u8g_t
 *
u8g
Ë
U8G_NOINLINE
;

258 
öt8_t
 
	$u8g_GëF⁄tBBXOffX
(
u8g_t
 *
u8g
)

260  
	`u8g_f⁄t_GëBBXOffX
(
u8g
->
f⁄t
);

261 
	}
}

263 
öt8_t
 
	$u8g_GëF⁄tBBXOffY
(
u8g_t
 *
u8g
Ë
U8G_NOINLINE
;

264 
öt8_t
 
	$u8g_GëF⁄tBBXOffY
(
u8g_t
 *
u8g
)

266  
	`u8g_f⁄t_GëBBXOffY
(
u8g
->
f⁄t
);

267 
	}
}

269 
uöt8_t
 
	$u8g_GëF⁄tC≠ôÆAHeight
(
u8g_t
 *
u8g
Ë
U8G_NOINLINE
;

270 
uöt8_t
 
	$u8g_GëF⁄tC≠ôÆAHeight
(
u8g_t
 *
u8g
)

272  
	`u8g_f⁄t_GëC≠ôÆAHeight
(
u8g
->
f⁄t
);

273 
	}
}

278 
	$u8g_C›yGlyphD©aToCache
(
u8g_t
 *
u8g
, 
u8g_glyph_t
 
g
)

280 
uöt8_t
 
tmp
;

281  
	`u8g_f⁄t_GëF‹m©
(
u8g
->
f⁄t
) )

296 
u8g
->
glyph_width
 = 
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)
g
) + 0 );

297 
u8g
->
glyph_height
 = 
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)
g
) + 1 );

298 
u8g
->
glyph_dx
 = 
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)
g
) + 3 );

299 
u8g
->
glyph_x
 = 
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)
g
) + 4 );

300 
u8g
->
glyph_y
 = 
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)
g
) + 5 );

315 
tmp
 = 
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)
g
) + 0 );

316 
u8g
->
glyph_y
 = 
tmp
 & 15;

317 
u8g
->
glyph_y
-=2;

318 
tmp
 >>= 4;

319 
u8g
->
glyph_x
 = 
tmp
;

321 
tmp
 = 
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)
g
) + 1 );

322 
u8g
->
glyph_height
 = 
tmp
 & 15;

323 
tmp
 >>= 4;

324 
u8g
->
glyph_width
 = 
tmp
;

326 
tmp
 = 
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)
g
) + 2 );

327 
tmp
 >>= 4;

328 
u8g
->
glyph_dx
 = 
tmp
;

333 
	}
}

336 
	$u8g_FûlEm±yGlyphCache
(
u8g_t
 *
u8g
)

338 
u8g
->
glyph_dx
 = 0;

339 
u8g
->
glyph_width
 = 0;

340 
u8g
->
glyph_height
 = 0;

341 
u8g
->
glyph_x
 = 0;

342 
u8g
->
glyph_y
 = 0;

343 
	}
}

349 
u8g_glyph_t
 
	$u8g_GëGlyph
(
u8g_t
 *
u8g
, 
uöt8_t
 
ªque°ed_ícodög
)

351 
uöt8_t
 *
p
 = (uöt8_à*)(
u8g
->
f⁄t
);

352 
uöt8_t
 
f⁄t_f‹m©
 = 
	`u8g_f⁄t_GëF‹m©
(
u8g
->
f⁄t
);

353 
uöt8_t
 
d©a_°ru˘uª_size
 = 
	`u8g_f⁄t_GëF⁄tGlyphSåu˘uªSize
(
u8g
->
f⁄t
);

354 
uöt8_t
 
°¨t
, 
íd
;

355 
uöt16_t
 
pos
;

356 
uöt8_t
 
i
;

357 
uöt8_t
 
mask
 = 255;

359 i‡–
f⁄t_f‹m©
 == 1 )

360 
mask
 = 15;

362 
°¨t
 = 
	`u8g_f⁄t_GëF⁄tSèπEncodög
(
u8g
->
f⁄t
);

363 
íd
 = 
	`u8g_f⁄t_GëF⁄tEndEncodög
(
u8g
->
f⁄t
);

365 
pos
 = 
	`u8g_f⁄t_GëEncodög97Pos
(
u8g
->
f⁄t
);

366 i‡–
ªque°ed_ícodög
 >97 && 
pos
 > 0 )

368 
p
+
pos
;

369 
°¨t
 = 97;

373 
pos
 = 
	`u8g_f⁄t_GëEncodög65Pos
(
u8g
->
f⁄t
);

374 i‡–
ªque°ed_ícodög
 >65 && 
pos
 > 0 )

376 
p
+
pos
;

377 
°¨t
 = 65;

380 
p
 +
U8G_FONT_DATA_STRUCT_SIZE
;

383 i‡–
ªque°ed_ícodög
 > 
íd
 )

385 
	`u8g_FûlEm±yGlyphCache
(
u8g
);

386  
NULL
;

389 
i
 = 
°¨t
;

390 i‡–
i
 <
íd
 )

394 i‡–
	`u8g_pgm_ªad
((
u8g_pgm_uöt8_t
 *)(
p
)) == 255 )

396 
p
 += 1;

400 i‡–
i
 =
ªque°ed_ícodög
 )

402 
	`u8g_C›yGlyphD©aToCache
(
u8g
, 
p
);

403  
p
;

405 
p
 +
	`u8g_pgm_ªad
–((
u8g_pgm_uöt8_t
 *)’)Ë+ 2 ) & 
mask
;

406 
p
 +
d©a_°ru˘uª_size
;

408 i‡–
i
 =
íd
 )

410 
i
++;

414 
	`u8g_FûlEm±yGlyphCache
(
u8g
);

416  
NULL
;

417 
	}
}

419 
uöt8_t
 
	$u8g_IsGlyph
(
u8g_t
 *
u8g
, 
uöt8_t
 
ªque°ed_ícodög
)

421 i‡–
	`u8g_GëGlyph
(
u8g
, 
ªque°ed_ícodög
Ë!
NULL
 )

424 
	}
}

426 
öt8_t
 
	$u8g_GëGlyphDñèX
(
u8g_t
 *
u8g
, 
uöt8_t
 
ªque°ed_ícodög
)

428 i‡–
	`u8g_GëGlyph
(
u8g
, 
ªque°ed_ícodög
Ë=
NULL
 )

430  
u8g
->
glyph_dx
;

431 
	}
}

437 #ifde‡
OBSOLETE


442 
öt8_t
 
	$u8g_DøwGlyphDú
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
ícodög
)

444 
u8g_glyph_t
 
g
;

445 
uöt8_t
 
w
, 
h
, 
i
, 
j
;

446 c⁄° 
u8g_pgm_uöt8_t
 *
d©a
;

447 
uöt8_t
 
byãs_≥r_löe
;

448 
u8g_uöt_t
 
ix
, 
iy
;

450 
g
 = 
	`u8g_GëGlyph
(
u8g
, 
ícodög
);

451 i‡–
g
 =
NULL
 )

453 
w
 = 
u8g
->
glyph_width
;

454 
h
 = 
u8g
->
glyph_height
;

456 
byãs_≥r_löe
 = 
w
;

457 
byãs_≥r_löe
 += 7;

458 
byãs_≥r_löe
 /= 8;

460 
d©a
 = 
	`u8g_f⁄t_GëGlyphD©aSèπ
(
u8g
->
f⁄t
, 
g
);

462 
dú
)

465 
x
 +
u8g
->
glyph_x
;

466 
y
 -
u8g
->
glyph_y
;

467 
y
--;

469 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
-
h
+1, 
w
, h) == 0 )

470  
u8g
->
glyph_dx
;

472 
iy
 = 
y
;

473 
iy
 -
h
;

474 
iy
++;

476  
j
 = 0; j < 
h
; j++ )

478 
ix
 = 
x
;

479  
i
 = 0; i < 
byãs_≥r_löe
; i++ )

481 
	`u8g_Døw8Pixñ
(
u8g
, 
ix
, 
iy
, 
dú
, 
	`u8g_pgm_ªad
(
d©a
));

482 
d©a
++;

483 
ix
+=8;

485 
iy
++;

489 
x
 +
u8g
->
glyph_y
;

490 
x
++;

491 
y
 +
u8g
->
glyph_x
;

494 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
h
, 
w
) == 0 )

495  
u8g
->
glyph_dx
;

497 
ix
 = 
x
;

498 
ix
 +
h
;

499 
ix
--;

500  
j
 = 0; j < 
h
; j++ )

502 
iy
 = 
y
;

503  
i
 = 0; i < 
byãs_≥r_löe
; i++ )

505 
	`u8g_Døw8Pixñ
(
u8g
, 
ix
, 
iy
, 
dú
, 
	`u8g_pgm_ªad
(
d©a
));

506 
d©a
++;

507 
iy
+=8;

509 
ix
--;

513 
x
 -
u8g
->
glyph_x
;

514 
y
 +
u8g
->
glyph_y
;

515 
y
++;

516 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
-
w
-1, 
y
, w, 
h
) == 0 )

517  
u8g
->
glyph_dx
;

519 
iy
 = 
y
;

520 
iy
 +
h
;

521 
iy
--;

522  
j
 = 0; j < 
h
; j++ )

524 
ix
 = 
x
;

525  
i
 = 0; i < 
byãs_≥r_löe
; i++ )

527 
	`u8g_Døw8Pixñ
(
u8g
, 
ix
, 
iy
, 
dú
, 
	`u8g_pgm_ªad
(
d©a
));

528 
d©a
++;

529 
ix
-=8;

531 
iy
--;

535 
x
 -
u8g
->
glyph_y
;

536 
x
--;

537 
y
 -
u8g
->
glyph_x
;

539 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
-
h
-1, 
y
-
w
-1, h, w) == 0 )

540  
u8g
->
glyph_dx
;

542 
ix
 = 
x
;

543 
ix
 -
h
;

544 
ix
++;

546  
j
 = 0; j < 
h
; j++ )

548 
iy
 = 
y
;

549  
i
 = 0; i < 
byãs_≥r_löe
; i++ )

551 
	`u8g_Døw8Pixñ
(
u8g
, 
ix
, 
iy
, 
dú
, 
	`u8g_pgm_ªad
(
d©a
));

552 
d©a
++;

553 
iy
-=8;

555 
ix
++;

559  
u8g
->
glyph_dx
;

560 
	}
}

563 
öt8_t
 
	$u8g_døw_glyph
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
)

565 c⁄° 
u8g_pgm_uöt8_t
 *
d©a
;

566 
uöt8_t
 
w
, 
h
;

567 
uöt8_t
 
i
, 
j
;

568 
u8g_uöt_t
 
ix
, 
iy
;

571 
u8g_glyph_t
 
g
 = 
	`u8g_GëGlyph
(
u8g
, 
ícodög
);

572 i‡–
g
 =
NULL
 )

574 
d©a
 = 
	`u8g_f⁄t_GëGlyphD©aSèπ
(
u8g
->
f⁄t
, 
g
);

577 
w
 = 
u8g
->
glyph_width
;

578 
h
 = 
u8g
->
glyph_height
;

580 
x
 +
u8g
->
glyph_x
;

581 
y
 -
u8g
->
glyph_y
;

582 
y
--;

584 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
-
h
+1, 
w
, h) == 0 )

585  
u8g
->
glyph_dx
;

588 
w
 += 7;

589 
w
 /= 8;

591 
iy
 = 
y
;

592 
iy
 -
h
;

593 
iy
++;

595  
j
 = 0; j < 
h
; j++ )

597 
ix
 = 
x
;

598  
i
 = 0; i < 
w
; i++ )

600 
	`u8g_Døw8Pixñ
(
u8g
, 
ix
, 
iy
, 0, 
	`u8g_pgm_ªad
(
d©a
));

601 
d©a
++;

602 
ix
+=8;

604 
iy
++;

606  
u8g
->
glyph_dx
;

607 
	}
}

609 
öt8_t
 
	$u8g_DøwGlyph
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
)

611 
y
 +
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

612  
	`u8g_døw_glyph
(
u8g
, 
x
, 
y
, 
ícodög
);

613 
	}
}

615 
öt8_t
 
	$u8g_døw_glyph90
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
)

617 c⁄° 
u8g_pgm_uöt8_t
 *
d©a
;

618 
uöt8_t
 
w
, 
h
;

619 
uöt8_t
 
i
, 
j
;

620 
u8g_uöt_t
 
ix
, 
iy
;

623 
u8g_glyph_t
 
g
 = 
	`u8g_GëGlyph
(
u8g
, 
ícodög
);

624 i‡–
g
 =
NULL
 )

626 
d©a
 = 
	`u8g_f⁄t_GëGlyphD©aSèπ
(
u8g
->
f⁄t
, 
g
);

629 
w
 = 
u8g
->
glyph_width
;

630 
h
 = 
u8g
->
glyph_height
;

632 
x
 +
u8g
->
glyph_y
;

633 
x
++;

634 
y
 +
u8g
->
glyph_x
;

636 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
h
, 
w
) == 0 )

637  
u8g
->
glyph_dx
;

640 
w
 += 7;

641 
w
 /= 8;

643 
ix
 = 
x
;

644 
ix
 +
h
;

645 
ix
--;

646  
j
 = 0; j < 
h
; j++ )

648 
iy
 = 
y
;

649  
i
 = 0; i < 
w
; i++ )

651 
	`u8g_Døw8Pixñ
(
u8g
, 
ix
, 
iy
, 1, 
	`u8g_pgm_ªad
(
d©a
));

652 
d©a
++;

653 
iy
+=8;

655 
ix
--;

657  
u8g
->
glyph_dx
;

658 
	}
}

660 
öt8_t
 
	$u8g_DøwGlyph90
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
)

662 
x
 -
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

663  
	`u8g_døw_glyph90
(
u8g
, 
x
, 
y
, 
ícodög
);

664 
	}
}

667 
öt8_t
 
	$u8g_døw_glyph180
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
)

669 c⁄° 
u8g_pgm_uöt8_t
 *
d©a
;

670 
uöt8_t
 
w
, 
h
;

671 
uöt8_t
 
i
, 
j
;

672 
u8g_uöt_t
 
ix
, 
iy
;

675 
u8g_glyph_t
 
g
 = 
	`u8g_GëGlyph
(
u8g
, 
ícodög
);

676 i‡–
g
 =
NULL
 )

678 
d©a
 = 
	`u8g_f⁄t_GëGlyphD©aSèπ
(
u8g
->
f⁄t
, 
g
);

681 
w
 = 
u8g
->
glyph_width
;

682 
h
 = 
u8g
->
glyph_height
;

684 
x
 -
u8g
->
glyph_x
;

685 
y
 +
u8g
->
glyph_y
;

686 
y
++;

688 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
-(
w
-1), 
y
, w, 
h
) == 0 )

689  
u8g
->
glyph_dx
;

692 
w
 += 7;

693 
w
 /= 8;

695 
iy
 = 
y
;

696 
iy
 +
h
;

697 
iy
--;

698  
j
 = 0; j < 
h
; j++ )

700 
ix
 = 
x
;

701  
i
 = 0; i < 
w
; i++ )

703 
	`u8g_Døw8Pixñ
(
u8g
, 
ix
, 
iy
, 2, 
	`u8g_pgm_ªad
(
d©a
));

704 
d©a
++;

705 
ix
-=8;

707 
iy
--;

709  
u8g
->
glyph_dx
;

710 
	}
}

712 
öt8_t
 
	$u8g_DøwGlyph180
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
)

714 
y
 -
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

715  
	`u8g_døw_glyph180
(
u8g
, 
x
, 
y
, 
ícodög
);

716 
	}
}

719 
öt8_t
 
	$u8g_døw_glyph270
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
)

721 c⁄° 
u8g_pgm_uöt8_t
 *
d©a
;

722 
uöt8_t
 
w
, 
h
;

723 
uöt8_t
 
i
, 
j
;

724 
u8g_uöt_t
 
ix
, 
iy
;

727 
u8g_glyph_t
 
g
 = 
	`u8g_GëGlyph
(
u8g
, 
ícodög
);

728 i‡–
g
 =
NULL
 )

730 
d©a
 = 
	`u8g_f⁄t_GëGlyphD©aSèπ
(
u8g
->
f⁄t
, 
g
);

733 
w
 = 
u8g
->
glyph_width
;

734 
h
 = 
u8g
->
glyph_height
;

736 
x
 -
u8g
->
glyph_y
;

737 
x
--;

738 
y
 -
u8g
->
glyph_x
;

740 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
-(
h
-1), 
y
-(
w
-1), h, w) == 0 )

741  
u8g
->
glyph_dx
;

745 
w
 += 7;

746 
w
 /= 8;

748 
ix
 = 
x
;

749 
ix
 -
h
;

750 
ix
++;

752  
j
 = 0; j < 
h
; j++ )

754 
iy
 = 
y
;

755  
i
 = 0; i < 
w
; i++ )

757 
	`u8g_Døw8Pixñ
(
u8g
, 
ix
, 
iy
, 3, 
	`u8g_pgm_ªad
(
d©a
));

758 
d©a
++;

759 
iy
-=8;

761 
ix
++;

763  
u8g
->
glyph_dx
;

764 
	}
}

766 
öt8_t
 
	$u8g_DøwGlyph270
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
ícodög
)

768 
x
 +
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

769  
	`u8g_døw_glyph270
(
u8g
, 
x
, 
y
, 
ícodög
);

770 
	}
}

774 #ifde‡
OBSOLETE


779 
öt8_t
 
	$u8g_DøwGlyphF⁄tBBX
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
ícodög
)

782 
x
 -
	`u8g_GëF⁄tBBXOffX
(
u8g
);

783 
y
 +
	`u8g_GëF⁄tBBXOffY
(
u8g
);

784  
	`u8g_DøwGlyphDú
(
u8g
, 
x
, 
y
, 
dú
, 
ícodög
);

785 
	}
}

792 
u8g_uöt_t
 
	$u8g_DøwSå
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° *
s
)

794 
u8g_uöt_t
 
t
 = 0;

795 
öt8_t
 
d
;

800 
y
 +
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

802  *
s
 != '\0' )

804 
d
 = 
	`u8g_døw_glyph
(
u8g
, 
x
, 
y
, *
s
);

805 
x
 +
d
;

806 
t
 +
d
;

807 
s
++;

809  
t
;

810 
	}
}

812 
u8g_uöt_t
 
	$u8g_DøwSå90
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° *
s
)

814 
u8g_uöt_t
 
t
 = 0;

815 
öt8_t
 
d
;

817 
x
 -
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

819  *
s
 != '\0' )

821 
d
 = 
	`u8g_døw_glyph90
(
u8g
, 
x
, 
y
, *
s
);

822 
y
 +
d
;

823 
t
 +
d
;

824 
s
++;

826  
t
;

827 
	}
}

829 
u8g_uöt_t
 
	$u8g_DøwSå180
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° *
s
)

831 
u8g_uöt_t
 
t
 = 0;

832 
öt8_t
 
d
;

834 
y
 -
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

836  *
s
 != '\0' )

838 
d
 = 
	`u8g_døw_glyph180
(
u8g
, 
x
, 
y
, *
s
);

839 
x
 -
d
;

840 
t
 +
d
;

841 
s
++;

843  
t
;

844 
	}
}

846 
u8g_uöt_t
 
	$u8g_DøwSå270
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° *
s
)

848 
u8g_uöt_t
 
t
 = 0;

849 
öt8_t
 
d
;

851 
x
 +
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

853  *
s
 != '\0' )

855 
d
 = 
	`u8g_døw_glyph270
(
u8g
, 
x
, 
y
, *
s
);

856 
y
 -
d
;

857 
t
 +
d
;

858 
s
++;

860  
t
;

861 
	}
}

863 
u8g_uöt_t
 
	$u8g_DøwSåDú
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, c⁄° *
s
)

865 
dú
)

868  
	`u8g_DøwSå
(
u8g
, 
x
, 
y
, 
s
);

870  
	`u8g_DøwSå90
(
u8g
, 
x
, 
y
, 
s
);

872  
	`u8g_DøwSå180
(
u8g
, 
x
, 
y
, 
s
);

874  
	`u8g_DøwSå270
(
u8g
, 
x
, 
y
, 
s
);

877 
	}
}

879 
u8g_uöt_t
 
	$u8g_DøwSåP
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
)

881 
u8g_uöt_t
 
t
 = 0;

882 
öt8_t
 
d
;

883 
uöt8_t
 
c
;

885 
y
 +
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

889 
c
 = 
	`u8g_pgm_ªad
(
s
);

890 i‡–
c
 == '\0' )

892 
d
 = 
	`u8g_døw_glyph
(
u8g
, 
x
, 
y
, 
c
);

893 
x
 +
d
;

894 
t
 +
d
;

895 
s
++;

897  
t
;

898 
	}
}

900 
u8g_uöt_t
 
	$u8g_DøwSå90P
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
)

902 
u8g_uöt_t
 
t
 = 0;

903 
öt8_t
 
d
;

905 
x
 -
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

907  *
s
 != '\0' )

909 
d
 = 
	`u8g_DøwGlyph90
(
u8g
, 
x
, 
y
, 
	`u8g_pgm_ªad
(
s
));

910 
y
 +
d
;

911 
t
 +
d
;

912 
s
++;

914  
t
;

915 
	}
}

917 
u8g_uöt_t
 
	$u8g_DøwSå180P
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
)

919 
u8g_uöt_t
 
t
 = 0;

920 
öt8_t
 
d
;

922 
y
 -
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

924  *
s
 != '\0' )

926 
d
 = 
	`u8g_DøwGlyph180
(
u8g
, 
x
, 
y
, 
	`u8g_pgm_ªad
(
s
));

927 
x
 -
d
;

928 
t
 +
d
;

929 
s
++;

931  
t
;

932 
	}
}

934 
u8g_uöt_t
 
	$u8g_DøwSå270P
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, c⁄° 
u8g_pgm_uöt8_t
 *
s
)

936 
u8g_uöt_t
 
t
 = 0;

937 
öt8_t
 
d
;

939 
x
 +
u8g
->
	`f⁄t_ˇlc_vªf
(u8g);

941  *
s
 != '\0' )

943 
d
 = 
	`u8g_DøwGlyph270
(
u8g
, 
x
, 
y
, 
	`u8g_pgm_ªad
(
s
));

944 
y
 -
d
;

945 
t
 +
d
;

946 
s
++;

948  
t
;

949 
	}
}

951 
u8g_uöt_t
 
	$u8g_DøwSåF⁄tBBX
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, c⁄° *
s
)

953 
x
 -
	`u8g_GëF⁄tBBXOffX
(
u8g
);

954 
y
 +
	`u8g_GëF⁄tBBXOffY
(
u8g
);

955  
	`u8g_DøwSåDú
(
u8g
, 
x
, 
y
, 
dú
, 
s
);

956 
	}
}

959 
öt8_t
 
	$u8g_DøwGlyphF⁄tBBX
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
ícodög
)

961 
x
 -
	`u8g_GëF⁄tBBXOffX
(
u8g
);

962 
y
 +
	`u8g_GëF⁄tBBXOffY
(
u8g
);

963 
	`u8g_døw_glyph
(
u8g
, 
x
, 
y
, 
ícodög
);

964 
	}
}

970 
	$u8g_Upd©eRefHeight
(
u8g_t
 *
u8g
)

972 
uöt16_t
 
ls
;

973 i‡–
u8g
->
f⁄t
 =
NULL
 )

975 i‡–
u8g
->
f⁄t_height_mode
 =
U8G_FONT_HEIGHT_MODE_TEXT
 )

977 
u8g
->
f⁄t_ªf_as˚¡
 = 
	`u8g_f⁄t_GëC≠ôÆAHeight
(u8g->
f⁄t
);

978 
u8g
->
f⁄t_ªf_des˚¡
 = 
	`u8g_f⁄t_GëLowîGDes˚¡
(u8g->
f⁄t
);

980 i‡–
u8g
->
f⁄t_height_mode
 =
U8G_FONT_HEIGHT_MODE_XTEXT
 )

982 
u8g
->
f⁄t_ªf_as˚¡
 = 
	`u8g_f⁄t_GëF⁄tXAs˚¡
(u8g->
f⁄t
);

983 
u8g
->
f⁄t_ªf_des˚¡
 = 
	`u8g_f⁄t_GëF⁄tXDes˚¡
(u8g->
f⁄t
);

987 
u8g
->
f⁄t_ªf_as˚¡
 = 
	`u8g_f⁄t_GëF⁄tAs˚¡
(u8g->
f⁄t
);

988 
u8g
->
f⁄t_ªf_des˚¡
 = 
	`u8g_f⁄t_GëF⁄tDes˚¡
(u8g->
f⁄t
);

991 
ls
 = 
u8g
->
f⁄t_ªf_as˚¡
 - u8g->
f⁄t_ªf_des˚¡
;

992 i‡–
u8g
->
f⁄t_löe_•acög_Á˘‹
 != 64 )

994 
ls
 &= 255;

995 
ls
 *
u8g
->
f⁄t_löe_•acög_Á˘‹
;

996 
ls
 >>= 6;

998 
u8g
->
löe_•acög
 = 
ls
;

999 
	}
}

1001 
	$u8g_SëF⁄tRefHeightText
(
u8g_t
 *
u8g
)

1003 
u8g
->
f⁄t_height_mode
 = 
U8G_FONT_HEIGHT_MODE_TEXT
;

1004 
	`u8g_Upd©eRefHeight
(
u8g
);

1005 
	}
}

1007 
	$u8g_SëF⁄tRefHeightExãndedText
(
u8g_t
 *
u8g
)

1009 
u8g
->
f⁄t_height_mode
 = 
U8G_FONT_HEIGHT_MODE_XTEXT
;

1010 
	`u8g_Upd©eRefHeight
(
u8g
);

1011 
	}
}

1014 
	$u8g_SëF⁄tRefHeightAŒ
(
u8g_t
 *
u8g
)

1016 
u8g
->
f⁄t_height_mode
 = 
U8G_FONT_HEIGHT_MODE_ALL
;

1017 
	`u8g_Upd©eRefHeight
(
u8g
);

1018 
	}
}

1021 
	$u8g_SëF⁄tLöeS∑cögFa˘‹
(
u8g_t
 *
u8g
, 
uöt8_t
 
Á˘‹
)

1023 
u8g
->
f⁄t_löe_•acög_Á˘‹
 = 
Á˘‹
;

1024 
	`u8g_Upd©eRefHeight
(
u8g
);

1025 
	}
}

1032 
u8g_uöt_t
 
	$u8g_f⁄t_ˇlc_vªf_f⁄t
(
u8g_t
 *
u8g
)

1035 
	}
}

1037 
	$u8g_SëF⁄tPosBa£löe
(
u8g_t
 *
u8g
)

1039 
u8g
->
f⁄t_ˇlc_vªf
 = 
u8g_f⁄t_ˇlc_vªf_f⁄t
;

1040 
	}
}

1043 
u8g_uöt_t
 
	$u8g_f⁄t_ˇlc_vªf_bŸtom
(
u8g_t
 *
u8g
)

1046  (
u8g_uöt_t
)(
u8g_öt_t
)(
u8g
->
f⁄t_ªf_des˚¡
);

1047 
	}
}

1049 
	$u8g_SëF⁄tPosBŸtom
(
u8g_t
 *
u8g
)

1051 
u8g
->
f⁄t_ˇlc_vªf
 = 
u8g_f⁄t_ˇlc_vªf_bŸtom
;

1052 
	}
}

1054 
u8g_uöt_t
 
	$u8g_f⁄t_ˇlc_vªf_t›
(
u8g_t
 *
u8g
)

1056 
u8g_uöt_t
 
tmp
;

1063 
tmp
 = (
u8g_uöt_t
)(
u8g_öt_t
)(
u8g
->
f⁄t_ªf_as˚¡
);

1064 
tmp
++;

1065  
tmp
;

1066 
	}
}

1068 
	$u8g_SëF⁄tPosT›
(
u8g_t
 *
u8g
)

1070 
u8g
->
f⁄t_ˇlc_vªf
 = 
u8g_f⁄t_ˇlc_vªf_t›
;

1071 
	}
}

1073 
u8g_uöt_t
 
	$u8g_f⁄t_ˇlc_vªf_˚¡î
(
u8g_t
 *
u8g
)

1075 
öt8_t
 
tmp
;

1076 
tmp
 = 
u8g
->
f⁄t_ªf_as˚¡
;

1077 
tmp
 -
u8g
->
f⁄t_ªf_des˚¡
;

1078 
tmp
 /= 2;

1079 
tmp
 +
u8g
->
f⁄t_ªf_des˚¡
;

1081  
tmp
;

1082 
	}
}

1084 
	$u8g_SëF⁄tPosCíãr
(
u8g_t
 *
u8g
)

1086 
u8g
->
f⁄t_ˇlc_vªf
 = 
u8g_f⁄t_ˇlc_vªf_˚¡î
;

1087 
	}
}

1092 
	$u8g_f⁄t_gë_ch¨
(c⁄° *
s
)

1094  *(c⁄° *)(
s
);

1095 
	}
}

1097 
	$u8g_f⁄t_gë_ch¨P
(c⁄° *
s
)

1099  
	`u8g_pgm_ªad
(
s
);

1100 
	}
}

1102 (*
	tu8g_f⁄t_gë_ch¨_‚
)(c⁄° *
	ts
);

1105 
u8g_uöt_t
 
	$u8g_f⁄t_ˇlc_°r_pixñ_width
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_f⁄t_gë_ch¨_‚
 
gë_ch¨
 )

1107 
u8g_uöt_t
 
w
;

1108 
uöt8_t
 
íc
;

1111 
w
 = 0;

1113 
íc
 = 
	`gë_ch¨
(
s
);

1116 i‡–
íc
 == '\0' )

1118  
w
;

1123 
	`u8g_GëGlyph
(
u8g
, 
íc
);

1131 
w
 = -
u8g
->
glyph_x
;

1136 
s
++;

1137 i‡–
	`gë_ch¨
(
s
) == '\0' )

1141 
w
 +
u8g
->
glyph_dx
;

1144 
íc
 = 
	`gë_ch¨
(
s
);

1147 
	`u8g_GëGlyph
(
u8g
, 
íc
);

1152 i‡–
íc
 != ' ' )

1155 
w
 +
u8g
->
glyph_width
;

1156 
w
 +
u8g
->
glyph_x
;

1160 
w
 +
u8g
->
glyph_dx
;

1164  
w
;

1165 
	}
}

1167 
u8g_uöt_t
 
	$u8g_GëSåPixñWidth
(
u8g_t
 *
u8g
, c⁄° *
s
)

1169  
	`u8g_f⁄t_ˇlc_°r_pixñ_width
(
u8g
, 
s
, 
u8g_f⁄t_gë_ch¨
);

1170 
	}
}

1172 
u8g_uöt_t
 
	$u8g_GëSåPixñWidthP
(
u8g_t
 *
u8g
, c⁄° 
u8g_pgm_uöt8_t
 *
s
)

1174  
	`u8g_f⁄t_ˇlc_°r_pixñ_width
(
u8g
, (c⁄° *)
s
, 
u8g_f⁄t_gë_ch¨P
);

1175 
	}
}

1177 
öt8_t
 
	$u8g_GëSåX
(
u8g_t
 *
u8g
, c⁄° *
s
)

1179 
	`u8g_GëGlyph
(
u8g
, *
s
);

1180  
u8g
->
glyph_x
;

1181 
	}
}

1183 
öt8_t
 
	$u8g_GëSåXP
(
u8g_t
 *
u8g
, c⁄° 
u8g_pgm_uöt8_t
 *
s
)

1185 
	`u8g_GëGlyph
(
u8g
, 
	`u8g_pgm_ªad
(
s
));

1186  
u8g
->
glyph_x
;

1187 
	}
}

1192 
u8g_uöt_t
 
	$u8g_GëSåWidth
(
u8g_t
 *
u8g
, c⁄° *
s
)

1194 
u8g_uöt_t
 
w
;

1195 
uöt8_t
 
ícodög
;

1198 
w
 = 0;

1202 
ícodög
 = *
s
;

1203 i‡–
ícodög
 == 0 )

1207 
	`u8g_GëGlyph
(
u8g
, 
ícodög
);

1208 
w
 +
u8g
->
glyph_dx
;

1211 
s
++;

1214  
w
;

1215 
	}
}

1218 
u8g_uöt_t
 
	$u8g_GëSåWidthP
(
u8g_t
 *
u8g
, c⁄° 
u8g_pgm_uöt8_t
 *
s
)

1220 
u8g_uöt_t
 
w
;

1221 
uöt8_t
 
ícodög
;

1224 
w
 = 0;

1228 
ícodög
 = 
	`u8g_pgm_ªad
(
s
);

1229 i‡–
ícodög
 == 0 )

1233 
	`u8g_GëGlyph
(
u8g
, 
ícodög
);

1234 
w
 +
u8g
->
glyph_dx
;

1237 
s
++;

1240  
w
;

1241 
	}
}

1256 
	su8g_°r_size_°ru˘


1258 
öt8_t
 
	my_mö
;

1259 
öt8_t
 
	my_max
;

1260 
öt8_t
 
	mx
, 
	my
;

1261 
u8g_uöt_t
 
	mw
;

1263 
u8g_°r_size_°ru˘
 
	tu8g_°r_size_t
;

1265 
	$u8g_f⁄t_ˇlc_°r_mö_box
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_°r_size_t
 *
buf
)

1268 
öt8_t
 
tmp
;

1271 
buf
->
w
 = 0;

1274 i‡–*
s
 == '\0' )

1276 
buf
->
y_mö
 = 0;

1277 
buf
->
y_max
 = 0;

1278 
buf
->
x
 = 0;

1279 
buf
->
y
 = 0;

1285 
buf
->
y_mö
 = 127;

1288 
buf
->
y_max
 = -128;

1291 
	`u8g_GëGlyph
(
u8g
, *
s
);

1300 
buf
->
w
 = - 
u8g
->
glyph_x
;

1303 
buf
->
x
 = 
u8g
->
glyph_x
;

1304 
buf
->
y
 = 
u8g
->
glyph_y
;

1312 
tmp
 = 
u8g
->
glyph_y
;

1313 i‡–
buf
->
y_mö
 > 
tmp
 )

1314 
buf
->
y_mö
 = 
tmp
;

1316 
tmp
 +=
u8g
->
glyph_height
;

1317 i‡–
buf
->
y_max
 < 
tmp
 )

1318 
buf
->
y_max
 = 
tmp
;

1321 
s
++;

1322 i‡–*
s
 == '\0' )

1326 
buf
->
w
 +
u8g
->
glyph_dx
;

1329 
	`u8g_GëGlyph
(
u8g
, *
s
);

1334 
buf
->
w
 +
u8g
->
glyph_width
;

1337 
buf
->
w
 +
u8g
->
glyph_x
;

1338 
	}
}

1341 
	$u8g_f⁄t_box_mö
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_°r_size_t
 *
buf
)

1343 
	`u8g_f⁄t_ˇlc_°r_mö_box
(
u8g
, 
s
, 
buf
);

1344 
	}
}

1347 
	$u8g_f⁄t_box_À·_gA
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_°r_size_t
 *
buf
)

1350 
	}
}

1353 
	$u8g_f⁄t_box_Æl_gA
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_°r_size_t
 *
buf
)

1356 
	}
}

1359 
	$u8g_f⁄t_gë_°r_box_fûl_¨gs
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_°r_size_t
 *
buf
, 
u8g_uöt_t
 *
x
, u8g_uöt_à*
y
, u8g_uöt_à*
width
, u8g_uöt_à*
height
)

1365 
	`u8g_GëGlyph
(
u8g
, *
s
);

1366 *
x
 +
u8g
->
glyph_x
;

1367 *
width
 = 
buf
->
w
;

1368 *
y
 -
buf
->
y_max
;

1373 *
height
 = 
buf
->
y_max
;

1374 *
height
 -
buf
->
y_mö
;

1375 
	}
}

1378 
	$u8g_GëSåMöBox
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_uöt_t
 *
x
, u8g_uöt_à*
y
, u8g_uöt_à*
width
, u8g_uöt_à*
height
)

1380 
u8g_°r_size_t
 
buf
;

1382 i‡–*
s
 == '\0' )

1384 *
width
= 0;

1385 *
height
 = 0;

1389 
	`u8g_f⁄t_ˇlc_°r_mö_box
(
u8g
, 
s
, &
buf
);

1390 
	`u8g_f⁄t_gë_°r_box_fûl_¨gs
(
u8g
, 
s
, &
buf
, 
x
, 
y
, 
width
, 
height
);

1391 
	}
}

1394 
	$u8g_GëSåAMöBox
(
u8g_t
 *
u8g
, c⁄° *
s
, 
u8g_uöt_t
 *
x
, u8g_uöt_à*
y
, u8g_uöt_à*
width
, u8g_uöt_à*
height
)

1396 
u8g_°r_size_t
 
buf
;

1397 
uöt8_t
 
ˇp_a
;

1399 i‡–*
s
 == '\0' )

1401 *
width
= 0;

1402 *
height
 = 0;

1406 
ˇp_a
 = 
	`u8g_f⁄t_GëC≠ôÆAHeight
(
u8g
->
f⁄t
);

1407 
	`u8g_f⁄t_ˇlc_°r_mö_box
(
u8g
, 
s
, &
buf
);

1408 i‡–
buf
.
y_max
 < 
ˇp_a
 )

1409 
buf
.
y_max
 = 
ˇp_a
;

1410 
	`u8g_f⁄t_gë_°r_box_fûl_¨gs
(
u8g
, 
s
, &
buf
, 
x
, 
y
, 
width
, 
height
);

1411 
	}
}

1413 
	$u8g_SëF⁄t
(
u8g_t
 *
u8g
, c⁄° 
u8g_‚çgm_uöt8_t
 *
f⁄t
)

1415 i‡–
u8g
->
f⁄t
 != font )

1417 
u8g
->
f⁄t
 = font;

1418 
	`u8g_Upd©eRefHeight
(
u8g
);

1419 
	`u8g_SëF⁄tPosBa£löe
(
u8g
);

1421 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_font_data.c

12 
	~"u8g.h
"

13 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_03b
[826] 
U8G_SECTION
(".progmem.u8g_font_04b_03b") = {

77 
	~"u8g.h
"

78 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_03bn
[130] 
U8G_SECTION
(".progmem.u8g_font_04b_03bn") = {

99 
	~"u8g.h
"

100 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_03br
[696] 
U8G_SECTION
(".progmem.u8g_font_04b_03br") = {

156 
	~"u8g.h
"

157 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_03
[859] 
U8G_SECTION
(".progmem.u8g_font_04b_03") = {

223 
	~"u8g.h
"

224 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_03n
[130] 
U8G_SECTION
(".progmem.u8g_font_04b_03n") = {

245 
	~"u8g.h
"

246 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_03r
[729] 
U8G_SECTION
(".progmem.u8g_font_04b_03r") = {

304 
	~"u8g.h
"

305 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_24
[912] 
U8G_SECTION
(".progmem.u8g_font_04b_24") = {

375 
	~"u8g.h
"

376 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_24n
[130] 
U8G_SECTION
(".progmem.u8g_font_04b_24n") = {

397 
	~"u8g.h
"

398 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_04b_24r
[735] 
U8G_SECTION
(".progmem.u8g_font_04b_24r") = {

456 
	~"u8g.h
"

457 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_10x20_67_75
[4734] 
U8G_SECTION
(".progmem.u8g_font_10x20_67_75") = {

765 
	~"u8g.h
"

766 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_10x20_75r
[693] 
U8G_SECTION
(".progmem.u8g_font_10x20_75r") = {

822 
	~"u8g.h
"

823 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_10x20_78_79
[2638] 
U8G_SECTION
(".progmem.u8g_font_10x20_78_79") = {

1000 
	~"u8g.h
"

1001 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_10x20
[3453] 
U8G_SECTION
(".progmem.u8g_font_10x20") = {

1229 
	~"u8g.h
"

1230 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_10x20r
[1667] 
U8G_SECTION
(".progmem.u8g_font_10x20r") = {

1347 
	~"u8g.h
"

1348 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_4x6
[1500] 
U8G_SECTION
(".progmem.u8g_font_4x6") = {

1454 
	~"u8g.h
"

1455 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_4x6r
[734] 
U8G_SECTION
(".progmem.u8g_font_4x6r") = {

1513 
	~"u8g.h
"

1514 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_5x7
[1624] 
U8G_SECTION
(".progmem.u8g_font_5x7") = {

1628 
	~"u8g.h
"

1629 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_5x7r
[789] 
U8G_SECTION
(".progmem.u8g_font_5x7r") = {

1691 
	~"u8g.h
"

1692 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_5x8
[1693] 
U8G_SECTION
(".progmem.u8g_font_5x8") = {

1810 
	~"u8g.h
"

1811 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_5x8r
[805] 
U8G_SECTION
(".progmem.u8g_font_5x8r") = {

1874 
	~"u8g.h
"

1875 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x10
[1866] 
U8G_SECTION
(".progmem.u8g_font_6x10") = {

2004 
	~"u8g.h
"

2005 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x10r
[889] 
U8G_SECTION
(".progmem.u8g_font_6x10r") = {

2073 
	~"u8g.h
"

2074 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x12_67_75
[2382] 
U8G_SECTION
(".progmem.u8g_font_6x12_67_75") = {

2235 
	~"u8g.h
"

2236 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x12_75r
[427] 
U8G_SECTION
(".progmem.u8g_font_6x12_75r") = {

2275 
	~"u8g.h
"

2276 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x12_78_79
[2316] 
U8G_SECTION
(".progmem.u8g_font_6x12_78_79") = {

2433 
	~"u8g.h
"

2434 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x12
[1933] 
U8G_SECTION
(".progmem.u8g_font_6x12") = {

2567 
	~"u8g.h
"

2568 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x12r
[898] 
U8G_SECTION
(".progmem.u8g_font_6x12r") = {

2637 
	~"u8g.h
"

2638 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13_67_75
[2236] 
U8G_SECTION
(".progmem.u8g_font_6x13_67_75") = {

2790 
	~"u8g.h
"

2791 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13_75r
[447] 
U8G_SECTION
(".progmem.u8g_font_6x13_75r") = {

2831 
	~"u8g.h
"

2832 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13_78_79
[1470] 
U8G_SECTION
(".progmem.u8g_font_6x13_78_79") = {

2936 
	~"u8g.h
"

2937 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13B
[2171] 
U8G_SECTION
(".progmem.u8g_font_6x13B") = {

3085 
	~"u8g.h
"

3086 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13Br
[1040] 
U8G_SECTION
(".progmem.u8g_font_6x13Br") = {

3164 
	~"u8g.h
"

3165 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13
[2160] 
U8G_SECTION
(".progmem.u8g_font_6x13") = {

3313 
	~"u8g.h
"

3314 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13O
[2162] 
U8G_SECTION
(".progmem.u8g_font_6x13O") = {

3462 
	~"u8g.h
"

3463 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13Or
[1043] 
U8G_SECTION
(".progmem.u8g_font_6x13Or") = {

3541 
	~"u8g.h
"

3542 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x13r
[1041] 
U8G_SECTION
(".progmem.u8g_font_6x13r") = {

3620 
	~"u8g.h
"

3621 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x13_67_75
[2197] 
U8G_SECTION
(".progmem.u8g_font_7x13_67_75") = {

3771 
	~"u8g.h
"

3772 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x13_75r
[471] 
U8G_SECTION
(".progmem.u8g_font_7x13_75r") = {

3814 
	~"u8g.h
"

3815 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x13B
[2172] 
U8G_SECTION
(".progmem.u8g_font_7x13B") = {

3963 
	~"u8g.h
"

3964 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x13Br
[1041] 
U8G_SECTION
(".progmem.u8g_font_7x13Br") = {

4042 
	~"u8g.h
"

4043 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x13
[2157] 
U8G_SECTION
(".progmem.u8g_font_7x13") = {

4190 
	~"u8g.h
"

4191 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x13O
[2158] 
U8G_SECTION
(".progmem.u8g_font_7x13O") = {

4338 
	~"u8g.h
"

4339 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x13Or
[1035] 
U8G_SECTION
(".progmem.u8g_font_7x13Or") = {

4416 
	~"u8g.h
"

4417 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x13r
[1034] 
U8G_SECTION
(".progmem.u8g_font_7x13r") = {

4494 
	~"u8g.h
"

4495 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x14B
[2390] 
U8G_SECTION
(".progmem.u8g_font_7x14B") = {

4657 
	~"u8g.h
"

4658 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x14Br
[1151] 
U8G_SECTION
(".progmem.u8g_font_7x14Br") = {

4742 
	~"u8g.h
"

4743 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x14
[2374] 
U8G_SECTION
(".progmem.u8g_font_7x14") = {

4904 
	~"u8g.h
"

4905 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_7x14r
[1151] 
U8G_SECTION
(".progmem.u8g_font_7x14r") = {

4989 
	~"u8g.h
"

4990 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_8x13_67_75
[2420] 
U8G_SECTION
(".progmem.u8g_font_8x13_67_75") = {

5154 
	~"u8g.h
"

5155 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_8x13_75r
[496] 
U8G_SECTION
(".progmem.u8g_font_8x13_75r") = {

5199 
	~"u8g.h
"

5200 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_8x13B
[2302] 
U8G_SECTION
(".progmem.u8g_font_8x13B") = {

5356 
	~"u8g.h
"

5357 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_8x13Br
[1123] 
U8G_SECTION
(".progmem.u8g_font_8x13Br") = {

5440 
	~"u8g.h
"

5441 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_8x13
[2152] 
U8G_SECTION
(".progmem.u8g_font_8x13") = {

5588 
	~"u8g.h
"

5589 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_8x13O
[2153] 
U8G_SECTION
(".progmem.u8g_font_8x13O") = {

5736 
	~"u8g.h
"

5737 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_8x13Or
[1029] 
U8G_SECTION
(".progmem.u8g_font_8x13Or") = {

5814 
	~"u8g.h
"

5815 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_8x13r
[1028] 
U8G_SECTION
(".progmem.u8g_font_8x13r") = {

5892 
	~"u8g.h
"

5893 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x15_67_75
[3804] 
U8G_SECTION
(".progmem.u8g_font_9x15_67_75") = {

6143 
	~"u8g.h
"

6144 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x15_75r
[792] 
U8G_SECTION
(".progmem.u8g_font_9x15_75r") = {

6206 
	~"u8g.h
"

6207 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x15_78_79
[3795] 
U8G_SECTION
(".progmem.u8g_font_9x15_78_79") = {

6457 
	~"u8g.h
"

6458 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x15B
[2990] 
U8G_SECTION
(".progmem.u8g_font_9x15B") = {

6657 
	~"u8g.h
"

6658 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x15Br
[1423] 
U8G_SECTION
(".progmem.u8g_font_9x15Br") = {

6759 
	~"u8g.h
"

6760 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x15
[2959] 
U8G_SECTION
(".progmem.u8g_font_9x15") = {

6957 
	~"u8g.h
"

6958 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x15r
[1427] 
U8G_SECTION
(".progmem.u8g_font_9x15r") = {

7060 
	~"u8g.h
"

7061 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x18_67_75
[3936] 
U8G_SECTION
(".progmem.u8g_font_9x18_67_75") = {

7320 
	~"u8g.h
"

7321 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x18_75r
[792] 
U8G_SECTION
(".progmem.u8g_font_9x18_75r") = {

7383 
	~"u8g.h
"

7384 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x18_78_79
[3336] 
U8G_SECTION
(".progmem.u8g_font_9x18_78_79") = {

7605 
	~"u8g.h
"

7606 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x18B
[3026] 
U8G_SECTION
(".progmem.u8g_font_9x18B") = {

7808 
	~"u8g.h
"

7809 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x18Br
[1434] 
U8G_SECTION
(".progmem.u8g_font_9x18Br") = {

7911 
	~"u8g.h
"

7912 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x18
[3011] 
U8G_SECTION
(".progmem.u8g_font_9x18") = {

8113 
	~"u8g.h
"

8114 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_9x18r
[1424] 
U8G_SECTION
(".progmem.u8g_font_9x18r") = {

8216 
	~"u8g.h
"

8217 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_baby
[2227] 
U8G_SECTION
(".progmem.u8g_font_baby") = {

8369 
	~"u8g.h
"

8370 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_babyn
[180] 
U8G_SECTION
(".progmem.u8g_font_babyn") = {

8394 
	~"u8g.h
"

8395 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_babyr
[1040] 
U8G_SECTION
(".progmem.u8g_font_babyr") = {

8473 
	~"u8g.h
"

8474 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_blù„°_07
[948] 
U8G_SECTION
(".progmem.u8g_font_blipfest_07") = {

8546 
	~"u8g.h
"

8547 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_blù„°_07n
[160] 
U8G_SECTION
(".progmem.u8g_font_blipfest_07n") = {

8570 
	~"u8g.h
"

8571 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_blù„°_07r
[820] 
U8G_SECTION
(".progmem.u8g_font_blipfest_07r") = {

8635 
	~"u8g.h
"

8636 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_chikôa
[2236] 
U8G_SECTION
(".progmem.u8g_font_chikita") = {

8788 
	~"u8g.h
"

8789 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_chikô™
[180] 
U8G_SECTION
(".progmem.u8g_font_chikitan") = {

8813 
	~"u8g.h
"

8814 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_chikô¨
[1032] 
U8G_SECTION
(".progmem.u8g_font_chikitar") = {

8891 
	~"u8g.h
"

8892 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB08
[2425] 
U8G_SECTION
(".progmem.u8g_font_courB08") = {

9056 
	~"u8g.h
"

9057 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB08r
[1145] 
U8G_SECTION
(".progmem.u8g_font_courB08r") = {

9141 
	~"u8g.h
"

9142 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB10
[3355] 
U8G_SECTION
(".progmem.u8g_font_courB10") = {

9364 
	~"u8g.h
"

9365 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB10r
[1551] 
U8G_SECTION
(".progmem.u8g_font_courB10r") = {

9474 
	~"u8g.h
"

9475 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB12
[3959] 
U8G_SECTION
(".progmem.u8g_font_courB12") = {

9735 
	~"u8g.h
"

9736 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB12r
[1857] 
U8G_SECTION
(".progmem.u8g_font_courB12r") = {

9865 
	~"u8g.h
"

9866 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB14
[4784] 
U8G_SECTION
(".progmem.u8g_font_courB14") = {

10178 
	~"u8g.h
"

10179 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB14r
[2167] 
U8G_SECTION
(".progmem.u8g_font_courB14r") = {

10327 
	~"u8g.h
"

10328 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB18
[6429] 
U8G_SECTION
(".progmem.u8g_font_courB18") = {

10742 
	~"u8g.h
"

10743 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB18r
[3001] 
U8G_SECTION
(".progmem.u8g_font_courB18r") = {

10943 
	~"u8g.h
"

10944 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB24
[10502] 
U8G_SECTION
(".progmem.u8g_font_courB24") = {

11613 
	~"u8g.h
"

11614 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB24r
[4775] 
U8G_SECTION
(".progmem.u8g_font_courB24r") = {

11925 
	~"u8g.h
"

11926 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courB24n
[686] 
U8G_SECTION
(".progmem.u8g_font_courB24n") = {

11981 
	~"u8g.h
"

11982 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR08
[2433] 
U8G_SECTION
(".progmem.u8g_font_courR08") = {

12147 
	~"u8g.h
"

12148 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR08r
[1157] 
U8G_SECTION
(".progmem.u8g_font_courR08r") = {

12233 
	~"u8g.h
"

12234 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR10
[3052] 
U8G_SECTION
(".progmem.u8g_font_courR10") = {

12437 
	~"u8g.h
"

12438 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR10r
[1443] 
U8G_SECTION
(".progmem.u8g_font_courR10r") = {

12541 
	~"u8g.h
"

12542 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR12
[3471] 
U8G_SECTION
(".progmem.u8g_font_courR12") = {

12771 
	~"u8g.h
"

12772 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR12r
[1592] 
U8G_SECTION
(".progmem.u8g_font_courR12r") = {

12884 
	~"u8g.h
"

12885 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR14
[4276] 
U8G_SECTION
(".progmem.u8g_font_courR14") = {

13165 
	~"u8g.h
"

13166 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR14r
[1988] 
U8G_SECTION
(".progmem.u8g_font_courR14r") = {

13303 
	~"u8g.h
"

13304 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR18
[6152] 
U8G_SECTION
(".progmem.u8g_font_courR18") = {

13701 
	~"u8g.h
"

13702 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR18r
[2862] 
U8G_SECTION
(".progmem.u8g_font_courR18r") = {

13893 
	~"u8g.h
"

13894 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR24
[8729] 
U8G_SECTION
(".progmem.u8g_font_courR24") = {

14452 
	~"u8g.h
"

14453 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR24n
[638] 
U8G_SECTION
(".progmem.u8g_font_courR24n") = {

14505 
	~"u8g.h
"

14506 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_courR24r
[3991] 
U8G_SECTION
(".progmem.u8g_font_courR24r") = {

14768 
	~"u8g.h
"

14769 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_cu12_67_75
[3981] 
U8G_SECTION
(".progmem.u8g_font_cu12_67_75") = {

15030 
	~"u8g.h
"

15031 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_cu12_75r
[1123] 
U8G_SECTION
(".progmem.u8g_font_cu12_75r") = {

15114 
	~"u8g.h
"

15115 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_cu12
[3993] 
U8G_SECTION
(".progmem.u8g_font_cu12") = {

15377 
	~"u8g.h
"

15378 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_curs‹
[5286] 
U8G_SECTION
(".progmem.u8g_font_cursor") = {

15721 
	~"u8g.h
"

15722 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_curs‹r
[492] 
U8G_SECTION
(".progmem.u8g_font_cursorr") = {

15765 
	~"u8g.h
"

15766 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fixed_v0
[1702] 
U8G_SECTION
(".progmem.u8g_font_fixed_v0") = {

15885 
	~"u8g.h
"

15886 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fixed_v0n
[159] 
U8G_SECTION
(".progmem.u8g_font_fixed_v0n") = {

15908 
	~"u8g.h
"

15909 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fixed_v0r
[878] 
U8G_SECTION
(".progmem.u8g_font_fixed_v0r") = {

15976 
	~"u8g.h
"

15977 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_‰ìdoomr10r
[1042] 
U8G_SECTION
(".progmem.u8g_font_freedoomr10r") = {

16055 
	~"u8g.h
"

16056 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_‰ìdoomr25n
[943] 
U8G_SECTION
(".progmem.u8g_font_freedoomr25n") = {

16127 
	~"u8g.h
"

16128 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub11
[3948] 
U8G_SECTION
(".progmem.u8g_font_fub11") = {

16387 
	~"u8g.h
"

16388 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub11n
[266] 
U8G_SECTION
(".progmem.u8g_font_fub11n") = {

16417 
	~"u8g.h
"

16418 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub11r
[1829] 
U8G_SECTION
(".progmem.u8g_font_fub11r") = {

16545 
	~"u8g.h
"

16546 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub14
[5788] 
U8G_SECTION
(".progmem.u8g_font_fub14") = {

16920 
	~"u8g.h
"

16921 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub14n
[436] 
U8G_SECTION
(".progmem.u8g_font_fub14n") = {

16961 
	~"u8g.h
"

16962 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub14r
[2680] 
U8G_SECTION
(".progmem.u8g_font_fub14r") = {

17142 
	~"u8g.h
"

17143 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub17
[6938] 
U8G_SECTION
(".progmem.u8g_font_fub17") = {

17589 
	~"u8g.h
"

17590 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub17n
[512] 
U8G_SECTION
(".progmem.u8g_font_fub17n") = {

17635 
	~"u8g.h
"

17636 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub17r
[3222] 
U8G_SECTION
(".progmem.u8g_font_fub17r") = {

17850 
	~"u8g.h
"

17851 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub20
[8916] 
U8G_SECTION
(".progmem.u8g_font_fub20") = {

18421 
	~"u8g.h
"

18422 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub20n
[583] 
U8G_SECTION
(".progmem.u8g_font_fub20n") = {

18471 
	~"u8g.h
"

18472 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub20r
[4022] 
U8G_SECTION
(".progmem.u8g_font_fub20r") = {

18736 
	~"u8g.h
"

18737 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub25
[12908] 
U8G_SECTION
(".progmem.u8g_font_fub25") = {

19556 
	~"u8g.h
"

19557 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub25n
[957] 
U8G_SECTION
(".progmem.u8g_font_fub25n") = {

19629 
	~"u8g.h
"

19630 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub25r
[5936] 
U8G_SECTION
(".progmem.u8g_font_fub25r") = {

20014 
	~"u8g.h
"

20015 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub30
[16953] 
U8G_SECTION
(".progmem.u8g_font_fub30") = {

21087 
	~"u8g.h
"

21088 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub30n
[1179] 
U8G_SECTION
(".progmem.u8g_font_fub30n") = {

21174 
	~"u8g.h
"

21175 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub30r
[7686] 
U8G_SECTION
(".progmem.u8g_font_fub30r") = {

21668 
	~"u8g.h
"

21669 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub35n
[1667] 
U8G_SECTION
(".progmem.u8g_font_fub35n") = {

21786 
	~"u8g.h
"

21787 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub42n
[2235] 
U8G_SECTION
(".progmem.u8g_font_fub42n") = {

21939 
	~"u8g.h
"

21940 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fub49n
[3074] 
U8G_SECTION
(".progmem.u8g_font_fub49n") = {

22145 
	~"u8g.h
"

22146 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur11
[3712] 
U8G_SECTION
(".progmem.u8g_font_fur11") = {

22391 
	~"u8g.h
"

22392 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur11n
[265] 
U8G_SECTION
(".progmem.u8g_font_fur11n") = {

22421 
	~"u8g.h
"

22422 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur11r
[1729] 
U8G_SECTION
(".progmem.u8g_font_fur11r") = {

22543 
	~"u8g.h
"

22544 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur14
[5349] 
U8G_SECTION
(".progmem.u8g_font_fur14") = {

22891 
	~"u8g.h
"

22892 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur14n
[405] 
U8G_SECTION
(".progmem.u8g_font_fur14n") = {

22930 
	~"u8g.h
"

22931 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur14r
[2489] 
U8G_SECTION
(".progmem.u8g_font_fur14r") = {

23099 
	~"u8g.h
"

23100 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur17
[6799] 
U8G_SECTION
(".progmem.u8g_font_fur17") = {

23537 
	~"u8g.h
"

23538 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur17n
[510] 
U8G_SECTION
(".progmem.u8g_font_fur17n") = {

23582 
	~"u8g.h
"

23583 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur17r
[3146] 
U8G_SECTION
(".progmem.u8g_font_fur17r") = {

23792 
	~"u8g.h
"

23793 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur20
[8654] 
U8G_SECTION
(".progmem.u8g_font_fur20") = {

24346 
	~"u8g.h
"

24347 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur20n
[596] 
U8G_SECTION
(".progmem.u8g_font_fur20n") = {

24397 
	~"u8g.h
"

24398 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur20r
[3976] 
U8G_SECTION
(".progmem.u8g_font_fur20r") = {

24659 
	~"u8g.h
"

24660 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur25
[11949] 
U8G_SECTION
(".progmem.u8g_font_fur25") = {

25419 
	~"u8g.h
"

25420 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur25n
[774] 
U8G_SECTION
(".progmem.u8g_font_fur25n") = {

25481 
	~"u8g.h
"

25482 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur25r
[5389] 
U8G_SECTION
(".progmem.u8g_font_fur25r") = {

25831 
	~"u8g.h
"

25832 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur30
[16505] 
U8G_SECTION
(".progmem.u8g_font_fur30") = {

26876 
	~"u8g.h
"

26877 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur30n
[1175] 
U8G_SECTION
(".progmem.u8g_font_fur30n") = {

26963 
	~"u8g.h
"

26964 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur30r
[7380] 
U8G_SECTION
(".progmem.u8g_font_fur30r") = {

27438 
	~"u8g.h
"

27439 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur35n
[1417] 
U8G_SECTION
(".progmem.u8g_font_fur35n") = {

27540 
	~"u8g.h
"

27541 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur42n
[2135] 
U8G_SECTION
(".progmem.u8g_font_fur42n") = {

27687 
	~"u8g.h
"

27688 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_fur49n
[2643] 
U8G_SECTION
(".progmem.u8g_font_fur49n") = {

27866 
	~"u8g.h
"

27867 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb11
[4313] 
U8G_SECTION
(".progmem.u8g_font_gdb11") = {

28149 
	~"u8g.h
"

28150 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb11n
[263] 
U8G_SECTION
(".progmem.u8g_font_gdb11n") = {

28179 
	~"u8g.h
"

28180 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb11r
[2001] 
U8G_SECTION
(".progmem.u8g_font_gdb11r") = {

28318 
	~"u8g.h
"

28319 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb12
[4626] 
U8G_SECTION
(".progmem.u8g_font_gdb12") = {

28621 
	~"u8g.h
"

28622 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb12n
[286] 
U8G_SECTION
(".progmem.u8g_font_gdb12n") = {

28652 
	~"u8g.h
"

28653 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb12r
[2190] 
U8G_SECTION
(".progmem.u8g_font_gdb12r") = {

28802 
	~"u8g.h
"

28803 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb14
[6044] 
U8G_SECTION
(".progmem.u8g_font_gdb14") = {

29193 
	~"u8g.h
"

29194 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb14n
[448] 
U8G_SECTION
(".progmem.u8g_font_gdb14n") = {

29235 
	~"u8g.h
"

29236 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb14r
[2842] 
U8G_SECTION
(".progmem.u8g_font_gdb14r") = {

29426 
	~"u8g.h
"

29427 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb17
[7600] 
U8G_SECTION
(".progmem.u8g_font_gdb17") = {

29915 
	~"u8g.h
"

29916 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb17n
[542] 
U8G_SECTION
(".progmem.u8g_font_gdb17n") = {

29962 
	~"u8g.h
"

29963 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb17r
[3540] 
U8G_SECTION
(".progmem.u8g_font_gdb17r") = {

30197 
	~"u8g.h
"

30198 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb20
[10077] 
U8G_SECTION
(".progmem.u8g_font_gdb20") = {

30840 
	~"u8g.h
"

30841 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb20n
[624] 
U8G_SECTION
(".progmem.u8g_font_gdb20n") = {

30893 
	~"u8g.h
"

30894 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb20r
[4680] 
U8G_SECTION
(".progmem.u8g_font_gdb20r") = {

31199 
	~"u8g.h
"

31200 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb25
[14643] 
U8G_SECTION
(".progmem.u8g_font_gdb25") = {

32128 
	~"u8g.h
"

32129 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb25n
[960] 
U8G_SECTION
(".progmem.u8g_font_gdb25n") = {

32202 
	~"u8g.h
"

32203 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb25r
[6779] 
U8G_SECTION
(".progmem.u8g_font_gdb25r") = {

32639 
	~"u8g.h
"

32640 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb30
[19508] 
U8G_SECTION
(".progmem.u8g_font_gdb30") = {

33872 
	~"u8g.h
"

33873 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb30n
[1275] 
U8G_SECTION
(".progmem.u8g_font_gdb30n") = {

33965 
	~"u8g.h
"

33966 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdb30r
[9112] 
U8G_SECTION
(".progmem.u8g_font_gdb30r") = {

34548 
	~"u8g.h
"

34549 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr10
[3670] 
U8G_SECTION
(".progmem.u8g_font_gdr10") = {

34791 
	~"u8g.h
"

34792 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr10n
[249] 
U8G_SECTION
(".progmem.u8g_font_gdr10n") = {

34820 
	~"u8g.h
"

34821 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr10r
[1723] 
U8G_SECTION
(".progmem.u8g_font_gdr10r") = {

34941 
	~"u8g.h
"

34942 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr11
[3977] 
U8G_SECTION
(".progmem.u8g_font_gdr11") = {

35203 
	~"u8g.h
"

35204 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr11n
[262] 
U8G_SECTION
(".progmem.u8g_font_gdr11n") = {

35233 
	~"u8g.h
"

35234 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr11r
[1868] 
U8G_SECTION
(".progmem.u8g_font_gdr11r") = {

35363 
	~"u8g.h
"

35364 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr12
[4200] 
U8G_SECTION
(".progmem.u8g_font_gdr12") = {

35639 
	~"u8g.h
"

35640 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr12n
[270] 
U8G_SECTION
(".progmem.u8g_font_gdr12n") = {

35669 
	~"u8g.h
"

35670 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr12r
[1992] 
U8G_SECTION
(".progmem.u8g_font_gdr12r") = {

35807 
	~"u8g.h
"

35808 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr14
[5942] 
U8G_SECTION
(".progmem.u8g_font_gdr14") = {

36192 
	~"u8g.h
"

36193 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr14n
[445] 
U8G_SECTION
(".progmem.u8g_font_gdr14n") = {

36233 
	~"u8g.h
"

36234 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr14r
[2791] 
U8G_SECTION
(".progmem.u8g_font_gdr14r") = {

36421 
	~"u8g.h
"

36422 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr17
[7056] 
U8G_SECTION
(".progmem.u8g_font_gdr17") = {

36876 
	~"u8g.h
"

36877 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr17n
[539] 
U8G_SECTION
(".progmem.u8g_font_gdr17n") = {

36923 
	~"u8g.h
"

36924 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr17r
[3380] 
U8G_SECTION
(".progmem.u8g_font_gdr17r") = {

37148 
	~"u8g.h
"

37149 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr20
[9119] 
U8G_SECTION
(".progmem.u8g_font_gdr20") = {

37731 
	~"u8g.h
"

37732 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr20n
[619] 
U8G_SECTION
(".progmem.u8g_font_gdr20n") = {

37783 
	~"u8g.h
"

37784 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr20r
[4232] 
U8G_SECTION
(".progmem.u8g_font_gdr20r") = {

38061 
	~"u8g.h
"

38062 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr25
[13042] 
U8G_SECTION
(".progmem.u8g_font_gdr25") = {

38890 
	~"u8g.h
"

38891 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr25n
[810] 
U8G_SECTION
(".progmem.u8g_font_gdr25n") = {

38954 
	~"u8g.h
"

38955 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr25r
[6239] 
U8G_SECTION
(".progmem.u8g_font_gdr25r") = {

39357 
	~"u8g.h
"

39358 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr30
[18369] 
U8G_SECTION
(".progmem.u8g_font_gdr30") = {

40519 
	~"u8g.h
"

40520 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr30n
[1252] 
U8G_SECTION
(".progmem.u8g_font_gdr30n") = {

40611 
	~"u8g.h
"

40612 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr30r
[8588] 
U8G_SECTION
(".progmem.u8g_font_gdr30r") = {

41161 
	~"u8g.h
"

41162 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr9
[3248] 
U8G_SECTION
(".progmem.u8g_font_gdr9") = {

41378 
	~"u8g.h
"

41379 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr9n
[235] 
U8G_SECTION
(".progmem.u8g_font_gdr9n") = {

41406 
	~"u8g.h
"

41407 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_gdr9r
[1553] 
U8G_SECTION
(".progmem.u8g_font_gdr9r") = {

41517 
	~"u8g.h
"

41518 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB08
[2677] 
U8G_SECTION
(".progmem.u8g_font_helvB08") = {

41698 
	~"u8g.h
"

41699 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB08r
[1287] 
U8G_SECTION
(".progmem.u8g_font_helvB08r") = {

41792 
	~"u8g.h
"

41793 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB10
[3692] 
U8G_SECTION
(".progmem.u8g_font_helvB10") = {

42036 
	~"u8g.h
"

42037 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB10r
[1720] 
U8G_SECTION
(".progmem.u8g_font_helvB10r") = {

42157 
	~"u8g.h
"

42158 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB12
[4077] 
U8G_SECTION
(".progmem.u8g_font_helvB12") = {

42425 
	~"u8g.h
"

42426 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB12r
[1914] 
U8G_SECTION
(".progmem.u8g_font_helvB12r") = {

42558 
	~"u8g.h
"

42559 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB14
[5489] 
U8G_SECTION
(".progmem.u8g_font_helvB14") = {

42915 
	~"u8g.h
"

42916 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB14r
[2548] 
U8G_SECTION
(".progmem.u8g_font_helvB14r") = {

43088 
	~"u8g.h
"

43089 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB18
[7527] 
U8G_SECTION
(".progmem.u8g_font_helvB18") = {

43572 
	~"u8g.h
"

43573 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB18r
[3453] 
U8G_SECTION
(".progmem.u8g_font_helvB18r") = {

43801 
	~"u8g.h
"

43802 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB24
[11554] 
U8G_SECTION
(".progmem.u8g_font_helvB24") = {

44537 
	~"u8g.h
"

44538 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB24n
[720] 
U8G_SECTION
(".progmem.u8g_font_helvB24n") = {

44596 
	~"u8g.h
"

44597 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvB24r
[5214] 
U8G_SECTION
(".progmem.u8g_font_helvB24r") = {

44935 
	~"u8g.h
"

44936 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR08
[2687] 
U8G_SECTION
(".progmem.u8g_font_helvR08") = {

45116 
	~"u8g.h
"

45117 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR08r
[1276] 
U8G_SECTION
(".progmem.u8g_font_helvR08r") = {

45209 
	~"u8g.h
"

45210 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR10
[3527] 
U8G_SECTION
(".progmem.u8g_font_helvR10") = {

45443 
	~"u8g.h
"

45444 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR10r
[1648] 
U8G_SECTION
(".progmem.u8g_font_helvR10r") = {

45560 
	~"u8g.h
"

45561 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR12
[4077] 
U8G_SECTION
(".progmem.u8g_font_helvR12") = {

45828 
	~"u8g.h
"

45829 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR12r
[1907] 
U8G_SECTION
(".progmem.u8g_font_helvR12r") = {

45961 
	~"u8g.h
"

45962 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR14
[4920] 
U8G_SECTION
(".progmem.u8g_font_helvR14") = {

46282 
	~"u8g.h
"

46283 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR14r
[2281] 
U8G_SECTION
(".progmem.u8g_font_helvR14r") = {

46438 
	~"u8g.h
"

46439 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR18
[7307] 
U8G_SECTION
(".progmem.u8g_font_helvR18") = {

46908 
	~"u8g.h
"

46909 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR18r
[3381] 
U8G_SECTION
(".progmem.u8g_font_helvR18r") = {

47133 
	~"u8g.h
"

47134 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR24
[10931] 
U8G_SECTION
(".progmem.u8g_font_helvR24") = {

47830 
	~"u8g.h
"

47831 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR24n
[702] 
U8G_SECTION
(".progmem.u8g_font_helvR24n") = {

47887 
	~"u8g.h
"

47888 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_hñvR24r
[4992] 
U8G_SECTION
(".progmem.u8g_font_helvR24r") = {

48213 
	~"u8g.h
"

48214 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_luˇsf⁄t_Æã∫©e
[2193] 
U8G_SECTION
(".progmem.u8g_font_lucasfont_alternate") = {

48364 
	~"u8g.h
"

48365 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_luˇsf⁄t_Æã∫©í
[206] 
U8G_SECTION
(".progmem.u8g_font_lucasfont_alternaten") = {

48390 
	~"u8g.h
"

48391 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_luˇsf⁄t_Æã∫©î
[1138] 
U8G_SECTION
(".progmem.u8g_font_lucasfont_alternater") = {

48475 
	~"u8g.h
"

48476 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_m2ic⁄_5
[221] 
U8G_SECTION
(".progmem.u8g_font_m2icon_5") = {

48502 
	~"u8g.h
"

48503 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_m2ic⁄_7
[275] 
U8G_SECTION
(".progmem.u8g_font_m2icon_7") = {

48533 
	~"u8g.h
"

48534 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_m2ic⁄_9
[471] 
U8G_SECTION
(".progmem.u8g_font_m2icon_9") = {

48576 
	~"u8g.h
"

48577 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_mi¸o
[855] 
U8G_SECTION
(".progmem.u8g_font_micro") = {

48643 
	~"u8g.h
"

48644 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB08
[2760] 
U8G_SECTION
(".progmem.u8g_font_ncenB08") = {

48829 
	~"u8g.h
"

48830 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB08r
[1315] 
U8G_SECTION
(".progmem.u8g_font_ncenB08r") = {

48925 
	~"u8g.h
"

48926 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB10
[4003] 
U8G_SECTION
(".progmem.u8g_font_ncenB10") = {

49189 
	~"u8g.h
"

49190 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB10r
[1853] 
U8G_SECTION
(".progmem.u8g_font_ncenB10r") = {

49318 
	~"u8g.h
"

49319 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB12
[4735] 
U8G_SECTION
(".progmem.u8g_font_ncenB12") = {

49627 
	~"u8g.h
"

49628 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB12r
[2194] 
U8G_SECTION
(".progmem.u8g_font_ncenB12r") = {

49778 
	~"u8g.h
"

49779 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB14
[5558] 
U8G_SECTION
(".progmem.u8g_font_ncenB14") = {

50139 
	~"u8g.h
"

50140 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB14r
[2603] 
U8G_SECTION
(".progmem.u8g_font_ncenB14r") = {

50315 
	~"u8g.h
"

50316 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB18
[8114] 
U8G_SECTION
(".progmem.u8g_font_ncenB18") = {

50836 
	~"u8g.h
"

50837 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB18r
[3736] 
U8G_SECTION
(".progmem.u8g_font_ncenB18r") = {

51083 
	~"u8g.h
"

51084 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB24
[12964] 
U8G_SECTION
(".progmem.u8g_font_ncenB24") = {

51907 
	~"u8g.h
"

51908 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB24n
[846] 
U8G_SECTION
(".progmem.u8g_font_ncenB24n") = {

51973 
	~"u8g.h
"

51974 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nB24r
[5937] 
U8G_SECTION
(".progmem.u8g_font_ncenB24r") = {

52358 
	~"u8g.h
"

52359 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR08
[2642] 
U8G_SECTION
(".progmem.u8g_font_ncenR08") = {

52537 
	~"u8g.h
"

52538 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR08r
[1266] 
U8G_SECTION
(".progmem.u8g_font_ncenR08r") = {

52630 
	~"u8g.h
"

52631 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR10
[3813] 
U8G_SECTION
(".progmem.u8g_font_ncenR10") = {

52882 
	~"u8g.h
"

52883 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR10r
[1781] 
U8G_SECTION
(".progmem.u8g_font_ncenR10r") = {

53007 
	~"u8g.h
"

53008 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR12
[4247] 
U8G_SECTION
(".progmem.u8g_font_ncenR12") = {

53286 
	~"u8g.h
"

53287 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR12r
[1976] 
U8G_SECTION
(".progmem.u8g_font_ncenR12r") = {

53423 
	~"u8g.h
"

53424 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR14
[5319] 
U8G_SECTION
(".progmem.u8g_font_ncenR14") = {

53769 
	~"u8g.h
"

53770 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR14r
[2534] 
U8G_SECTION
(".progmem.u8g_font_ncenR14r") = {

53941 
	~"u8g.h
"

53942 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR18
[7488] 
U8G_SECTION
(".progmem.u8g_font_ncenR18") = {

54423 
	~"u8g.h
"

54424 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR18r
[3477] 
U8G_SECTION
(".progmem.u8g_font_ncenR18r") = {

54654 
	~"u8g.h
"

54655 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR24
[11729] 
U8G_SECTION
(".progmem.u8g_font_ncenR24") = {

55401 
	~"u8g.h
"

55402 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR24n
[722] 
U8G_SECTION
(".progmem.u8g_font_ncenR24n") = {

55460 
	~"u8g.h
"

55461 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_n˚nR24r
[5367] 
U8G_SECTION
(".progmem.u8g_font_ncenR24r") = {

55809 
	~"u8g.h
"

55810 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_‹gv01
[1535] 
U8G_SECTION
(".progmem.u8g_font_orgv01") = {

55918 
	~"u8g.h
"

55919 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_‹gv01n
[130] 
U8G_SECTION
(".progmem.u8g_font_orgv01n") = {

55940 
	~"u8g.h
"

55941 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_‹gv01r
[719] 
U8G_SECTION
(".progmem.u8g_font_orgv01r") = {

55998 
	~"u8g.h
"

55999 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb18
[7637] 
U8G_SECTION
(".progmem.u8g_font_osb18") = {

56489 
	~"u8g.h
"

56490 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb18n
[600] 
U8G_SECTION
(".progmem.u8g_font_osb18n") = {

56540 
	~"u8g.h
"

56541 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb18r
[3611] 
U8G_SECTION
(".progmem.u8g_font_osb18r") = {

56779 
	~"u8g.h
"

56780 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb21
[9612] 
U8G_SECTION
(".progmem.u8g_font_osb21") = {

57393 
	~"u8g.h
"

57394 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb21n
[703] 
U8G_SECTION
(".progmem.u8g_font_osb21n") = {

57450 
	~"u8g.h
"

57451 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb21r
[4521] 
U8G_SECTION
(".progmem.u8g_font_osb21r") = {

57746 
	~"u8g.h
"

57747 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb26
[12640] 
U8G_SECTION
(".progmem.u8g_font_osb26") = {

58550 
	~"u8g.h
"

58551 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb26n
[880] 
U8G_SECTION
(".progmem.u8g_font_osb26n") = {

58619 
	~"u8g.h
"

58620 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb26r
[5950] 
U8G_SECTION
(".progmem.u8g_font_osb26r") = {

59004 
	~"u8g.h
"

59005 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb29
[15818] 
U8G_SECTION
(".progmem.u8g_font_osb29") = {

60006 
	~"u8g.h
"

60007 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb29n
[1232] 
U8G_SECTION
(".progmem.u8g_font_osb29n") = {

60097 
	~"u8g.h
"

60098 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb29r
[7481] 
U8G_SECTION
(".progmem.u8g_font_osb29r") = {

60578 
	~"u8g.h
"

60579 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb35
[22095] 
U8G_SECTION
(".progmem.u8g_font_osb35") = {

61972 
	~"u8g.h
"

61973 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb35n
[1539] 
U8G_SECTION
(".progmem.u8g_font_osb35n") = {

62082 
	~"u8g.h
"

62083 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_osb35r
[10245] 
U8G_SECTION
(".progmem.u8g_font_osb35r") = {

62736 
	~"u8g.h
"

62737 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§18
[7816] 
U8G_SECTION
(".progmem.u8g_font_osr18") = {

63238 
	~"u8g.h
"

63239 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§18n
[595] 
U8G_SECTION
(".progmem.u8g_font_osr18n") = {

63289 
	~"u8g.h
"

63290 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§18r
[3683] 
U8G_SECTION
(".progmem.u8g_font_osr18r") = {

63533 
	~"u8g.h
"

63534 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§21
[9530] 
U8G_SECTION
(".progmem.u8g_font_osr21") = {

64142 
	~"u8g.h
"

64143 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§21n
[702] 
U8G_SECTION
(".progmem.u8g_font_osr21n") = {

64199 
	~"u8g.h
"

64200 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§21r
[4396] 
U8G_SECTION
(".progmem.u8g_font_osr21r") = {

64487 
	~"u8g.h
"

64488 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§26
[13186] 
U8G_SECTION
(".progmem.u8g_font_osr26") = {

65325 
	~"u8g.h
"

65326 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§26n
[932] 
U8G_SECTION
(".progmem.u8g_font_osr26n") = {

65397 
	~"u8g.h
"

65398 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§26r
[6049] 
U8G_SECTION
(".progmem.u8g_font_osr26r") = {

65789 
	~"u8g.h
"

65790 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§29
[16232] 
U8G_SECTION
(".progmem.u8g_font_osr29") = {

66817 
	~"u8g.h
"

66818 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§29n
[1201] 
U8G_SECTION
(".progmem.u8g_font_osr29n") = {

66906 
	~"u8g.h
"

66907 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§29r
[7573] 
U8G_SECTION
(".progmem.u8g_font_osr29r") = {

67393 
	~"u8g.h
"

67394 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§35
[22370] 
U8G_SECTION
(".progmem.u8g_font_osr35") = {

68805 
	~"u8g.h
"

68806 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§35n
[1560] 
U8G_SECTION
(".progmem.u8g_font_osr35n") = {

68916 
	~"u8g.h
"

68917 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_o§35r
[10371] 
U8G_SECTION
(".progmem.u8g_font_osr35r") = {

69578 
	~"u8g.h
"

69579 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_p01ty≥
[1163] 
U8G_SECTION
(".progmem.u8g_font_p01type") = {

69664 
	~"u8g.h
"

69665 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_p01ty≥n
[177] 
U8G_SECTION
(".progmem.u8g_font_p01typen") = {

69689 
	~"u8g.h
"

69690 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_p01ty≥r
[938] 
U8G_SECTION
(".progmem.u8g_font_p01typer") = {

69761 
	~"u8g.h
"

69762 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_pixñÀ_mi¸o
[1140] 
U8G_SECTION
(".progmem.u8g_font_pixelle_micro") = {

69846 
	~"u8g.h
"

69847 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_pixñÀ_mi¸⁄
[180] 
U8G_SECTION
(".progmem.u8g_font_pixelle_micron") = {

69871 
	~"u8g.h
"

69872 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_pixñÀ_mi¸‹
[1012] 
U8G_SECTION
(".progmem.u8g_font_pixelle_micror") = {

69948 
	~"u8g.h
"

69949 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_robŸ_de_núo
[1376] 
U8G_SECTION
(".progmem.u8g_font_robot_de_niro") = {

70048 
	~"u8g.h
"

70049 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_robŸ_de_nú⁄
[178] 
U8G_SECTION
(".progmem.u8g_font_robot_de_niron") = {

70073 
	~"u8g.h
"

70074 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_robŸ_de_nú‹
[1041] 
U8G_SECTION
(".progmem.u8g_font_robot_de_niror") = {

70152 
	~"u8g.h
"

70153 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb08
[2612] 
U8G_SECTION
(".progmem.u8g_font_symb08") = {

70329 
	~"u8g.h
"

70330 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb08r
[1211] 
U8G_SECTION
(".progmem.u8g_font_symb08r") = {

70418 
	~"u8g.h
"

70419 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb10
[3433] 
U8G_SECTION
(".progmem.u8g_font_symb10") = {

70646 
	~"u8g.h
"

70647 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb10r
[1633] 
U8G_SECTION
(".progmem.u8g_font_symb10r") = {

70762 
	~"u8g.h
"

70763 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb12
[4136] 
U8G_SECTION
(".progmem.u8g_font_symb12") = {

71034 
	~"u8g.h
"

71035 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb12r
[1985] 
U8G_SECTION
(".progmem.u8g_font_symb12r") = {

71172 
	~"u8g.h
"

71173 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb14
[4665] 
U8G_SECTION
(".progmem.u8g_font_symb14") = {

71477 
	~"u8g.h
"

71478 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb14r
[2261] 
U8G_SECTION
(".progmem.u8g_font_symb14r") = {

71632 
	~"u8g.h
"

71633 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb18
[6604] 
U8G_SECTION
(".progmem.u8g_font_symb18") = {

72058 
	~"u8g.h
"

72059 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb18r
[3303] 
U8G_SECTION
(".progmem.u8g_font_symb18r") = {

72278 
	~"u8g.h
"

72279 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb24
[10727] 
U8G_SECTION
(".progmem.u8g_font_symb24") = {

72962 
	~"u8g.h
"

72963 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_symb24r
[5335] 
U8G_SECTION
(".progmem.u8g_font_symb24r") = {

73309 
	~"u8g.h
"

73310 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB08
[2551] 
U8G_SECTION
(".progmem.u8g_font_timB08") = {

73482 
	~"u8g.h
"

73483 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB08r
[1221] 
U8G_SECTION
(".progmem.u8g_font_timB08r") = {

73572 
	~"u8g.h
"

73573 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB10
[3539] 
U8G_SECTION
(".progmem.u8g_font_timB10") = {

73807 
	~"u8g.h
"

73808 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB10r
[1632] 
U8G_SECTION
(".progmem.u8g_font_timB10r") = {

73923 
	~"u8g.h
"

73924 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB12
[3887] 
U8G_SECTION
(".progmem.u8g_font_timB12") = {

74179 
	~"u8g.h
"

74180 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB12r
[1834] 
U8G_SECTION
(".progmem.u8g_font_timB12r") = {

74307 
	~"u8g.h
"

74308 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB14
[4851] 
U8G_SECTION
(".progmem.u8g_font_timB14") = {

74624 
	~"u8g.h
"

74625 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB14r
[2295] 
U8G_SECTION
(".progmem.u8g_font_timB14r") = {

74781 
	~"u8g.h
"

74782 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB18
[7223] 
U8G_SECTION
(".progmem.u8g_font_timB18") = {

75246 
	~"u8g.h
"

75247 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB18r
[3355] 
U8G_SECTION
(".progmem.u8g_font_timB18r") = {

75469 
	~"u8g.h
"

75470 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB24
[10820] 
U8G_SECTION
(".progmem.u8g_font_timB24") = {

76159 
	~"u8g.h
"

76160 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB24n
[701] 
U8G_SECTION
(".progmem.u8g_font_timB24n") = {

76216 
	~"u8g.h
"

76217 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timB24r
[5003] 
U8G_SECTION
(".progmem.u8g_font_timB24r") = {

76542 
	~"u8g.h
"

76543 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR08
[2512] 
U8G_SECTION
(".progmem.u8g_font_timR08") = {

76713 
	~"u8g.h
"

76714 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR08r
[1198] 
U8G_SECTION
(".progmem.u8g_font_timR08r") = {

76801 
	~"u8g.h
"

76802 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR10
[3359] 
U8G_SECTION
(".progmem.u8g_font_timR10") = {

77024 
	~"u8g.h
"

77025 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR10r
[1571] 
U8G_SECTION
(".progmem.u8g_font_timR10r") = {

77136 
	~"u8g.h
"

77137 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR12
[3905] 
U8G_SECTION
(".progmem.u8g_font_timR12") = {

77394 
	~"u8g.h
"

77395 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR12r
[1784] 
U8G_SECTION
(".progmem.u8g_font_timR12r") = {

77519 
	~"u8g.h
"

77520 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR14
[4577] 
U8G_SECTION
(".progmem.u8g_font_timR14") = {

77819 
	~"u8g.h
"

77820 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR14r
[2156] 
U8G_SECTION
(".progmem.u8g_font_timR14r") = {

77967 
	~"u8g.h
"

77968 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR18
[6850] 
U8G_SECTION
(".progmem.u8g_font_timR18") = {

78409 
	~"u8g.h
"

78410 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR18r
[3208] 
U8G_SECTION
(".progmem.u8g_font_timR18r") = {

78623 
	~"u8g.h
"

78624 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR24
[10419] 
U8G_SECTION
(".progmem.u8g_font_timR24") = {

79288 
	~"u8g.h
"

79289 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR24n
[696] 
U8G_SECTION
(".progmem.u8g_font_timR24n") = {

79345 
	~"u8g.h
"

79346 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_timR24r
[4764] 
U8G_SECTION
(".progmem.u8g_font_timR24r") = {

79656 
	~"u8g.h
"

79657 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_çssb
[2656] 
U8G_SECTION
(".progmem.u8g_font_tpssb") = {

79836 
	~"u8g.h
"

79837 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_çssbn
[230] 
U8G_SECTION
(".progmem.u8g_font_tpssbn") = {

79864 
	~"u8g.h
"

79865 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_çssbr
[1346] 
U8G_SECTION
(".progmem.u8g_font_tpssbr") = {

79962 
	~"u8g.h
"

79963 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_çss
[2605] 
U8G_SECTION
(".progmem.u8g_font_tpss") = {

80138 
	~"u8g.h
"

80139 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_çs¢
[228] 
U8G_SECTION
(".progmem.u8g_font_tpssn") = {

80166 
	~"u8g.h
"

80167 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_çs§
[1317] 
U8G_SECTION
(".progmem.u8g_font_tpssr") = {

80262 
	~"u8g.h
"

80263 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_åixñ_squ¨e
[1236] 
U8G_SECTION
(".progmem.u8g_font_trixel_square") = {

80353 
	~"u8g.h
"

80354 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_åixñ_squ¨í
[178] 
U8G_SECTION
(".progmem.u8g_font_trixel_squaren") = {

80378 
	~"u8g.h
"

80379 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_åixñ_squ¨î
[994] 
U8G_SECTION
(".progmem.u8g_font_trixel_squarer") = {

80454 
	~"u8g.h
"

80455 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_u8glib_4
[1660] 
U8G_SECTION
(".progmem.u8g_font_u8glib_4") = {

80571 
	~"u8g.h
"

80572 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_u8glib_4r
[664] 
U8G_SECTION
(".progmem.u8g_font_u8glib_4r") = {

80626 
	~"u8g.h
"

80627 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_0_8
[4239] 
U8G_SECTION
(".progmem.u8g_font_unifont_0_8") = {

80904 
	~"u8g.h
"

80905 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_12_13
[3934] 
U8G_SECTION
(".progmem.u8g_font_unifont_12_13") = {

81163 
	~"u8g.h
"

81164 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_18_19
[6498] 
U8G_SECTION
(".progmem.u8g_font_unifont_18_19") = {

81583 
	~"u8g.h
"

81584 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_2_3
[4628] 
U8G_SECTION
(".progmem.u8g_font_unifont_2_3") = {

81886 
	~"u8g.h
"

81887 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_4_5
[3783] 
U8G_SECTION
(".progmem.u8g_font_unifont_4_5") = {

82136 
	~"u8g.h
"

82137 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_67_75
[3556] 
U8G_SECTION
(".progmem.u8g_font_unifont_67_75") = {

82372 
	~"u8g.h
"

82373 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_72_73
[7240] 
U8G_SECTION
(".progmem.u8g_font_unifont_72_73") = {

82838 
	~"u8g.h
"

82839 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_75r
[580] 
U8G_SECTION
(".progmem.u8g_font_unifont_75r") = {

82888 
	~"u8g.h
"

82889 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_76
[2532] 
U8G_SECTION
(".progmem.u8g_font_unifont_76") = {

83060 
	~"u8g.h
"

83061 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_77
[1587] 
U8G_SECTION
(".progmem.u8g_font_unifont_77") = {

83173 
	~"u8g.h
"

83174 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_78_79
[6975] 
U8G_SECTION
(".progmem.u8g_font_unifont_78_79") = {

83622 
	~"u8g.h
"

83623 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_86
[1876] 
U8G_SECTION
(".progmem.u8g_font_unifont_86") = {

83753 
	~"u8g.h
"

83754 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t_8_9
[4272] 
U8G_SECTION
(".progmem.u8g_font_unifont_8_9") = {

84034 
	~"u8g.h
"

84035 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄t
[5516] 
U8G_SECTION
(".progmem.u8g_font_unifont") = {

84392 
	~"u8g.h
"

84393 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_unif⁄å
[1483] 
U8G_SECTION
(".progmem.u8g_font_unifontr") = {

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_line.c

36 
	~"u8g.h
"

38 
	$u8g_DøwLöe
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x1
, u8g_uöt_à
y1
, u8g_uöt_à
x2
, u8g_uöt_à
y2
)

40 
u8g_uöt_t
 
tmp
;

41 
u8g_uöt_t
 
x
,
y
;

42 
u8g_uöt_t
 
dx
, 
dy
;

43 
u8g_öt_t
 
îr
;

44 
u8g_öt_t
 
y°ï
;

46 
uöt8_t
 
sw≠xy
 = 0;

50 i‡–
x1
 > 
x2
 ) 
dx
 = x1-x2; dx = x2-x1;

51 i‡–
y1
 > 
y2
 ) 
dy
 = y1-y2; dy = y2-y1;

53 i‡–
dy
 > 
dx
 )

55 
sw≠xy
 = 1;

56 
tmp
 = 
dx
; dx =
dy
; dy =Åmp;

57 
tmp
 = 
x1
; x1 =
y1
; y1 =Åmp;

58 
tmp
 = 
x2
; x2 =
y2
; y2 =Åmp;

60 i‡–
x1
 > 
x2
 )

62 
tmp
 = 
x1
; x1 =
x2
; x2 =Åmp;

63 
tmp
 = 
y1
; y1 =
y2
; y2 =Åmp;

65 
îr
 = 
dx
 >> 1;

66 i‡–
y2
 > 
y1
 ) 
y°ï
 = 1; ystep = -1;

67 
y
 = 
y1
;

68  
x
 = 
x1
; x <
x2
; x++ )

70 i‡–
sw≠xy
 == 0 )

71 
	`u8g_DøwPixñ
(
u8g
, 
x
, 
y
);

73 
	`u8g_DøwPixñ
(
u8g
, 
y
, 
x
);

74 
îr
 -(
uöt8_t
)
dy
;

75 i‡–
îr
 < 0 )

77 
y
 +(
u8g_uöt_t
)
y°ï
;

78 
îr
 +(
u8g_uöt_t
)
dx
;

81 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_ll_api.c

39 
	~<°ddef.h
>

40 
	~"u8g.h
"

42 
uöt8_t
 
	$u8g_ˇŒ_dev_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

44  
dev
->
	`dev_‚
(
u8g
, dev, 
msg
, 
¨g
);

45 
	}
}

49 
uöt8_t
 
	$u8g_InôLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

51 
uöt8_t
 
r
;

52 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_BACKUP_ENV
);

53 
r
 = 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_INIT
, 
NULL
);

54 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_BACKUP_U8G
);

55 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_RESTORE_ENV
);

56  
r
;

57 
	}
}

59 
	$u8g_Fú°PageLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

61 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_BACKUP_ENV
);

62 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_RESTORE_U8G
);

63 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_PAGE_FIRST
, 
NULL
);

64 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_GET_PAGE_BOX
, &(u8g->
cuºít_∑ge
));

65 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_RESTORE_ENV
);

66 
	}
}

68 
uöt8_t
 
	$u8g_NextPageLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

70 
uöt8_t
 
r
;

71 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_BACKUP_ENV
);

72 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_RESTORE_U8G
);

73 
r
 = 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_PAGE_NEXT
, 
NULL
);

74 i‡–
r
 != 0 )

76 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_GET_PAGE_BOX
, &(u8g->
cuºít_∑ge
));

78 
u8g
->
	`°©e_cb
(
U8G_STATE_MSG_RESTORE_ENV
);

79  
r
;

80 
	}
}

82 
uöt8_t
 
	$u8g_SëC⁄åa°LL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
c⁄åa°
)

84  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_CONTRAST
, &
c⁄åa°
);

85 
	}
}

87 
	$u8g_DøwPixñLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
)

89 
u8g_dev_¨g_pixñ_t
 *
¨g
 = &(
u8g
->
¨g_pixñ
);

90 
¨g
->
x
 = x;

91 
¨g
->
y
 = y;

92 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_SET_PIXEL
, 
¨g
);

93 
	}
}

95 
	$u8g_Døw8PixñLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
pixñ
)

97 
u8g_dev_¨g_pixñ_t
 *
¨g
 = &(
u8g
->
¨g_pixñ
);

98 
¨g
->
x
 = x;

99 
¨g
->
y
 = y;

100 
¨g
->
dú
 = dir;

101 
¨g
->
pixñ
 =Öixel;

102 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_SET_8PIXEL
, 
¨g
);

103 
	}
}

105 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


106 
uöt8_t
 
	$u8g_IsBBXI¡î£˘i⁄LL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
)

108  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_IS_BBX_INTERSECTION
, &
¨g
);

109 
	}
}

114 
u8g_uöt_t
 
	$u8g_GëWidthLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

116 
u8g_uöt_t
 
r
;

117 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_GET_WIDTH
, &
r
);

118  
r
;

119 
	}
}

121 
u8g_uöt_t
 
	$u8g_GëHeightLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

123 
u8g_uöt_t
 
r
;

124 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_GET_HEIGHT
, &
r
);

125  
r
;

126 
	}
}

128 
u8g_uöt_t
 
	$u8g_GëModeLL
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

130  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
dev
, 
U8G_DEV_MSG_GET_MODE
, 
NULL
);

131 
	}
}

137 
	$u8g_Upd©eDimísi⁄
(
u8g_t
 *
u8g
)

139 
u8g
->
width
 = 
	`u8g_GëWidthLL
(u8g, u8g->
dev
);

140 
u8g
->
height
 = 
	`u8g_GëHeightLL
(u8g, u8g->
dev
);

141 
u8g
->
mode
 = 
	`u8g_GëModeLL
(u8g, u8g->
dev
);

143 
	`u8g_ˇŒ_dev_‚
(
u8g
, u8g->
dev
, 
U8G_DEV_MSG_GET_PAGE_BOX
, &(u8g->
cuºít_∑ge
));

144 
	}
}

146 
	$u8g_öô_d©a
(
u8g_t
 *
u8g
)

148 
uöt8_t
 
i
;

149 
u8g
->
f⁄t
 = 
NULL
;

150 
u8g
->
curs‹_f⁄t
 = 
NULL
;

151 
u8g
->
curs‹_bg_cﬁ‹
 = 0;

152 
u8g
->
curs‹_fg_cﬁ‹
 = 1;

153 
u8g
->
curs‹_ícodög
 = 34;

154 
u8g
->
curs‹_‚
 = (
u8g_døw_curs‹_‚
)0;

156  
i
 = 0; i < 
U8G_PIN_LIST_LEN
; i++ )

157 
u8g
->
pö_li°
[
i
] = 
U8G_PIN_NONE
;

159 
	`u8g_SëCﬁ‹Index
(
u8g
, 1);

161 
	`u8g_SëF⁄tPosBa£löe
(
u8g
);

163 
u8g
->
f⁄t_height_mode
 = 
U8G_FONT_HEIGHT_MODE_XTEXT
;

164 
u8g
->
f⁄t_ªf_as˚¡
 = 0;

165 
u8g
->
f⁄t_ªf_des˚¡
 = 0;

166 
u8g
->
f⁄t_löe_•acög_Á˘‹
 = 64;

167 
u8g
->
löe_•acög
 = 0;

169 
u8g
->
°©e_cb
 = 
u8g_°©e_dummy_cb
;

171 
	}
}

173 
uöt8_t
 
	$u8g_Begö
(
u8g_t
 *
u8g
)

176 i‡–
	`u8g_InôLL
(
u8g
, u8g->
dev
) == 0 )

179 
	`u8g_Upd©eDimísi⁄
(
u8g
);

181 
	}
}

183 
uöt8_t
 
	$u8g_Inô
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

185 
	`u8g_öô_d©a
(
u8g
);

186 
u8g
->
dev
 = dev;

192  
	`u8g_Begö
(
u8g
);

193 
	}
}

195 
uöt8_t
 
	$u8g_InôSPI
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
sck
, uöt8_à
mosi
, uöt8_à
cs
, uöt8_à
a0
, uöt8_à
ª£t
)

199 
	`u8g_öô_d©a
(
u8g
);

200 
u8g
->
dev
 = dev;

203 
u8g
->
pö_li°
[
U8G_PI_SCK
] = 
sck
;

204 
u8g
->
pö_li°
[
U8G_PI_MOSI
] = 
mosi
;

205 
u8g
->
pö_li°
[
U8G_PI_CS
] = 
cs
;

206 
u8g
->
pö_li°
[
U8G_PI_A0
] = 
a0
;

207 
u8g
->
pö_li°
[
U8G_PI_RESET
] = 
ª£t
;

213  
	`u8g_Begö
(
u8g
);

214 
	}
}

216 
uöt8_t
 
	$u8g_InôHWSPI
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
ª£t
)

219 
	`u8g_öô_d©a
(
u8g
);

220 
u8g
->
dev
 = dev;

224 
u8g
->
pö_li°
[
U8G_PI_CS
] = 
cs
;

225 
u8g
->
pö_li°
[
U8G_PI_A0
] = 
a0
;

226 
u8g
->
pö_li°
[
U8G_PI_RESET
] = 
ª£t
;

228  
	`u8g_Begö
(
u8g
);

229 
	}
}

231 
uöt8_t
 
	$u8g_InôI2C
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
›ti⁄s
)

234 
	`u8g_öô_d©a
(
u8g
);

235 
u8g
->
dev
 = dev;

237 
u8g
->
pö_li°
[
U8G_PI_I2C_OPTION
] = 
›ti⁄s
;

239  
	`u8g_Begö
(
u8g
);

240 
	}
}

243 
uöt8_t
 
	$u8g_Inô8BôFixedP‹t
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
í
, uöt8_à
cs
, uöt8_à
di
, uöt8_à
rw
, uöt8_à
ª£t
)

247 
	`u8g_öô_d©a
(
u8g
);

248 
u8g
->
dev
 = dev;

252 
u8g
->
pö_li°
[
U8G_PI_EN
] = 
í
;

253 
u8g
->
pö_li°
[
U8G_PI_CS
] = 
cs
;

254 
u8g
->
pö_li°
[
U8G_PI_DI
] = 
di
;

255 
u8g
->
pö_li°
[
U8G_PI_RW
] = 
rw
;

256 
u8g
->
pö_li°
[
U8G_PI_RESET
] = 
ª£t
;

258  
	`u8g_Begö
(
u8g
);

259 
	}
}

261 
uöt8_t
 
	$u8g_Inô8Bô
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

262 
uöt8_t
 
í
, uöt8_à
cs1
, uöt8_à
cs2
, uöt8_à
di
, uöt8_à
rw
, uöt8_à
ª£t
)

266 
	`u8g_öô_d©a
(
u8g
);

267 
u8g
->
dev
 = dev;

271 
u8g
->
pö_li°
[
U8G_PI_D0
] = 
d0
;

272 
u8g
->
pö_li°
[
U8G_PI_D1
] = 
d1
;

273 
u8g
->
pö_li°
[
U8G_PI_D2
] = 
d2
;

274 
u8g
->
pö_li°
[
U8G_PI_D3
] = 
d3
;

275 
u8g
->
pö_li°
[
U8G_PI_D4
] = 
d4
;

276 
u8g
->
pö_li°
[
U8G_PI_D5
] = 
d5
;

277 
u8g
->
pö_li°
[
U8G_PI_D6
] = 
d6
;

278 
u8g
->
pö_li°
[
U8G_PI_D7
] = 
d7
;

280 
u8g
->
pö_li°
[
U8G_PI_EN
] = 
í
;

281 
u8g
->
pö_li°
[
U8G_PI_CS1
] = 
cs1
;

282 
u8g
->
pö_li°
[
U8G_PI_CS2
] = 
cs2
;

283 
u8g
->
pö_li°
[
U8G_PI_DI
] = 
di
;

284 
u8g
->
pö_li°
[
U8G_PI_RW
] = 
rw
;

285 
u8g
->
pö_li°
[
U8G_PI_RESET
] = 
ª£t
;

287  
	`u8g_Begö
(
u8g
);

288 
	}
}

312 
uöt8_t
 
	$u8g_InôRW8Bô
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
, uöt8_à
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
,

313 
uöt8_t
 
cs
, uöt8_à
a0
, uöt8_à
wr
, uöt8_à
rd
, uöt8_à
ª£t
)

317 
	`u8g_öô_d©a
(
u8g
);

318 
u8g
->
dev
 = dev;

322 
u8g
->
pö_li°
[
U8G_PI_D0
] = 
d0
;

323 
u8g
->
pö_li°
[
U8G_PI_D1
] = 
d1
;

324 
u8g
->
pö_li°
[
U8G_PI_D2
] = 
d2
;

325 
u8g
->
pö_li°
[
U8G_PI_D3
] = 
d3
;

326 
u8g
->
pö_li°
[
U8G_PI_D4
] = 
d4
;

327 
u8g
->
pö_li°
[
U8G_PI_D5
] = 
d5
;

328 
u8g
->
pö_li°
[
U8G_PI_D6
] = 
d6
;

329 
u8g
->
pö_li°
[
U8G_PI_D7
] = 
d7
;

331 
u8g
->
pö_li°
[
U8G_PI_CS
] = 
cs
;

332 
u8g
->
pö_li°
[
U8G_PI_A0
] = 
a0
;

333 
u8g
->
pö_li°
[
U8G_PI_WR
] = 
wr
;

334 
u8g
->
pö_li°
[
U8G_PI_RD
] = 
rd
;

335 
u8g
->
pö_li°
[
U8G_PI_RESET
] = 
ª£t
;

337  
	`u8g_Begö
(
u8g
);

338 
	}
}

340 
	$u8g_Fú°Page
(
u8g_t
 *
u8g
)

342 
	`u8g_Fú°PageLL
(
u8g
, u8g->
dev
);

343 
	}
}

345 
uöt8_t
 
	$u8g_NextPage
(
u8g_t
 *
u8g
)

347 i‡–
u8g
->
curs‹_‚
 !(
u8g_døw_curs‹_‚
)0 )

349 
u8g
->
	`curs‹_‚
(u8g);

351  
	`u8g_NextPageLL
(
u8g
, u8g->
dev
);

352 
	}
}

354 
uöt8_t
 
	$u8g_SëC⁄åa°
(
u8g_t
 *
u8g
, 
uöt8_t
 
c⁄åa°
)

356  
	`u8g_SëC⁄åa°LL
(
u8g
, u8g->
dev
, 
c⁄åa°
);

357 
	}
}

359 
	$u8g_SÀïOn
(
u8g_t
 *
u8g
)

361 
	`u8g_ˇŒ_dev_‚
(
u8g
, u8g->
dev
, 
U8G_DEV_MSG_SLEEP_ON
, 
NULL
);

362 
	}
}

364 
	$u8g_SÀïOff
(
u8g_t
 *
u8g
)

366 
	`u8g_ˇŒ_dev_‚
(
u8g
, u8g->
dev
, 
U8G_DEV_MSG_SLEEP_OFF
, 
NULL
);

367 
	}
}

370 
	$u8g_DøwPixñ
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
)

372 
	`u8g_DøwPixñLL
(
u8g
, u8g->
dev
, 
x
, 
y
);

373 
	}
}

375 
	$u8g_Døw8Pixñ
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
dú
, uöt8_à
pixñ
)

377 
	`u8g_Døw8PixñLL
(
u8g
, u8g->
dev
, 
x
, 
y
, 
dú
, 
pixñ
);

378 
	}
}

381 #ifde‡
OBSOLETE_CODE


382 
uöt8_t
 
	$u8g_IsBBXI¡î£˘i⁄
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
)

385 
u8g_dev_¨g_bbx_t
 
¨g
;

386 
¨g
.
x
 = x;

387 
¨g
.
y
 = y;

388 
¨g
.
w
 = w;

389 
¨g
.
h
 = h;

390  
	`u8g_is_box_bbx_öãr£˘i⁄
(&(
u8g
->
cuºít_∑ge
), &
¨g
);

394 
	}
}

397 
	$u8g_SëCﬁ‹Index
(
u8g_t
 *
u8g
, 
uöt8_t
 
idx
)

399 
u8g
->
¨g_pixñ
.
cﬁ‹
 = 
idx
;

401 
	}
}

403 
uöt8_t
 
	$u8g_GëCﬁ‹Index
(
u8g_t
 *
u8g
)

405  
u8g
->
¨g_pixñ
.
cﬁ‹
;

406 
	}
}

408 
uöt8_t
 
	$u8g_GëDeÁu…F‹egroundCﬁ‹
(
u8g_t
 *
u8g
)

410 
uöt8_t
 
mode
;

411 
mode
 = 
	`u8g_GëMode
(
u8g
);

412 i‡–
mode
 =
U8G_MODE_R3G3B2
 )

414 i‡–
	`u8g_GëMode
(
u8g
Ë=
U8G_MODE_GRAY2BIT
 )

419 
	}
}

421 
	$u8g_SëDeÁu…F‹egroundCﬁ‹
(
u8g_t
 *
u8g
)

423 
	`u8g_SëCﬁ‹Index
(
u8g
, 
	`u8g_GëDeÁu…F‹egroundCﬁ‹
(u8g));

424 
	}
}

426 
uöt8_t
 
	$u8g_GëDeÁu…BackgroundCﬁ‹
(
u8g_t
 *
u8g
)

429 
	}
}

431 
	$u8g_SëDeÁu…BackgroundCﬁ‹
(
u8g_t
 *
u8g
)

433 
	`u8g_SëCﬁ‹Index
(
u8g
, 
	`u8g_GëDeÁu…BackgroundCﬁ‹
(u8g));

434 
	}
}

436 
uöt8_t
 
	$u8g_GëDeÁu…MidCﬁ‹
(
u8g_t
 *
u8g
)

438 
uöt8_t
 
mode
;

439 
mode
 = 
	`u8g_GëMode
(
u8g
);

440 i‡–
mode
 =
U8G_MODE_R3G3B2
 )

442 i‡–
	`u8g_GëMode
(
u8g
Ë=
U8G_MODE_GRAY2BIT
 )

447 
	}
}

449 
	$u8g_SëDeÁu…MidCﬁ‹
(
u8g_t
 *
u8g
)

451 
	`u8g_SëCﬁ‹Index
(
u8g
, 
	`u8g_GëDeÁu…MidCﬁ‹
(u8g));

452 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_page.c

39 
	~"u8g.h
"

45 
	$u8g_∑ge_Inô
(
u8g_∑ge_t
 *
p
, 
u8g_uöt_t
 
∑ge_height
, u8g_uöt_à
tŸÆ_height
 )

47 
p
->
∑ge_height
 =Öage_height;

48 
p
->
tŸÆ_height
 =Åotal_height;

49 
p
->
∑ge
 = 0;

50 
	`u8g_∑ge_Fú°
(
p
);

51 
	}
}

53 
	$u8g_∑ge_Fú°
(
u8g_∑ge_t
 *
p
)

55 
p
->
∑ge_y0
 = 0;

56 
p
->
∑ge_y1
 =Ö->
∑ge_height
;

57 
p
->
∑ge_y1
--;

58 
p
->
∑ge
 = 0;

59 
	}
}

61 
uöt8_t
 
	$u8g_∑ge_Next
(
u8g_∑ge_t
 * 
p
)

63 
u8g_uöt_t
 
y1
;

64 
p
->
∑ge_y0
 +p->
∑ge_height
;

65 i‡–
p
->
∑ge_y0
 >p->
tŸÆ_height
 )

67 
p
->
∑ge
++;

68 
y1
 = 
p
->
∑ge_y1
;

69 
y1
 +
p
->
∑ge_height
;

70 i‡–
y1
 >
p
->
tŸÆ_height
 )

72 
y1
 = 
p
->
tŸÆ_height
;

73 
y1
--;

75 
p
->
∑ge_y1
 = 
y1
;

78 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_pb.c

39 
	~"u8g.h
"

41 
	$u8g_pb_CÀ¨
(
u8g_pb_t
 *
b
)

43 
uöt8_t
 *
±r
 = (uöt8_à*)
b
->
buf
;

44 
uöt8_t
 *
íd_±r
 = 
±r
;

45 
íd_±r
 +
b
->
width
;

48 *
±r
++ = 0;

49 }  
±r
 !
íd_±r
 );

50 
	}
}

90 
uöt8_t
 
	$u8g_pb_IsYI¡î£˘i⁄
(
u8g_pb_t
 *
pb
, 
u8g_uöt_t
 
v0
, u8g_uöt_à
v1
)

92 
uöt8_t
 
c1
, 
c2
, 
c3
, 
tmp
;

93 
c1
 = 
v0
 <
pb
->
p
.
∑ge_y1
;

94 
c2
 = 
v1
 >
pb
->
p
.
∑ge_y0
;

95 
c3
 = 
v0
 > 
v1
;

106 
tmp
 = 
c1
;

107 
c1
 &
c2
;

108 
c2
 &
c3
;

109 
c3
 &
tmp
;

110 
c1
 |
c2
;

111 
c1
 |
c3
;

112  
c1
 & 1;

113 
	}
}

116 
uöt8_t
 
	$u8g_pb_IsXI¡î£˘i⁄
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
v0
, u8g_uöt_à
v1
)

118 
uöt8_t
 
c2
, 
c3
;

127 
c2
 = 
v0
 > 
b
->
width
;

128 
c3
 = 
v1
 > 
b
->
width
;

130 i‡–
c2
 && 
c3
 )  0;

133 
	}
}

135 
uöt8_t
 
	$u8g_pb_IsI¡î£˘i⁄
(
u8g_pb_t
 *
pb
, 
u8g_dev_¨g_bbx_t
 *
bbx
)

137 
u8g_uöt_t
 
tmp
;

139 
tmp
 = 
bbx
->
y
;

140 
tmp
 +
bbx
->
h
;

141 
tmp
--;

143 i‡–
	`u8g_pb_IsYI¡î£˘i⁄
(
pb
, 
bbx
->
y
, 
tmp
) == 0 )

147 
tmp
 = 
bbx
->
x
;

148 
tmp
 +
bbx
->
w
;

149 
tmp
--;

151  
	`u8g_pb_IsXI¡î£˘i⁄
(
pb
, 
bbx
->
x
, 
tmp
);

152 
	}
}

154 
	$u8g_pb_GëPageBox
(
u8g_pb_t
 *
pb
, 
u8g_box_t
 *
box
)

156 
box
->
x0
 = 0;

157 
box
->
y0
 = 
pb
->
p
.
∑ge_y0
;

158 
box
->
x1
 = 
pb
->
width
;

159 
box
->
x1
--;

160 
box
->
y1
 = 
pb
->
p
.
∑ge_y1
;

161 
	}
}

164 
uöt8_t
 
	$u8g_pb_Is8PixñVisibÀ
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

166 
u8g_uöt_t
 
v0
, 
v1
;

167 
v0
 = 
¨g_pixñ
->
y
;

168 
v1
 = 
v0
;

169  
¨g_pixñ
->
dú
 )

174 
v1
 += 8;

179 
v0
 -= 8;

182  
	`u8g_pb_IsYI¡î£˘i⁄
(
b
, 
v0
, 
v1
);

183 
	}
}

187 
uöt8_t
 
	$u8g_pb_WrôeBuf„r
(
u8g_pb_t
 *
b
, 
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
)

189  
	`u8g_WrôeSequí˚
(
u8g
, 
dev
, 
b
->
width
, b->
buf
);

190 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_pb14v1.c

40 
	~"u8g.h
"

41 
	~<°rög.h
>

44 
	$u8g_pb14v1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
Ë
U8G_NOINLINE
;

45 
	$u8g_pb14v1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

46 
	$u8g_pb14v1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
Ë
U8G_NOINLINE
 ;

47 
	$u8g_pb14v1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
Ë
U8G_NOINLINE
;

50 
	$u8g_pb14v1_CÀ¨
(
u8g_pb_t
 *
b
)

52 
uöt8_t
 *
±r
 = (uöt8_à*)
b
->
buf
;

53 
uöt8_t
 *
íd_±r
 = 
±r
;

54 
íd_±r
 +
b
->
width
*2;

57 *
±r
++ = 0;

58 }  
±r
 !
íd_±r
 );

59 
	}
}

62 
	$u8g_pb14v1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

64 
b
->
buf
 = buf;

65 
b
->
width
 = width;

66 
	`u8g_pb14v1_CÀ¨
(
b
);

67 
	}
}

69 
	$u8g_pb14v1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

71 
uöt8_t
 
mask
;

72 
uöt8_t
 *
±r
 = 
b
->
buf
;

74 
y
 -
b
->
p
.
∑ge_y0
;

75 i‡–
y
 >= 7 )

77 
±r
 +
b
->
width
;

78 
y
 -= 7;

80 
mask
 = 1;

81 
mask
 <<
y
;

82 
±r
 +
x
;

83 i‡–
cﬁ‹_ödex
 )

85 *
±r
 |
mask
;

89 
mask
 ^=0xff;

90 *
±r
 &
mask
;

92 
	}
}

95 
	$u8g_pb14v1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

97 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

99 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

101 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

103 
	`u8g_pb14v1_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

104 
	}
}

106 
	$u8g_pb14v1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

108 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

111 i‡–
pixñ
 & 128 )

113 
	`u8g_pb14v1_SëPixñ
(
b
, 
¨g_pixñ
);

115  
¨g_pixñ
->
dú
 )

117 0: 
¨g_pixñ
->
x
++; ;

118 1: 
¨g_pixñ
->
y
++; ;

119 2: 
¨g_pixñ
->
x
--; ;

120 3: 
¨g_pixñ
->
y
--; ;

122 
pixñ
 <<= 1;

123 }  
pixñ
 != 0 );

124 
	}
}

127 
	$u8g_pb14v1_Së8PixñO±2
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

129 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

130 
u8g_uöt_t
 
dx
 = 0;

131 
u8g_uöt_t
 
dy
 = 0;

133  
¨g_pixñ
->
dú
 )

135 0: 
dx
++; ;

136 1: 
dy
++; ;

137 2: 
dx
--; ;

138 3: 
dy
--; ;

143 i‡–
pixñ
 & 128 )

144 
	`u8g_pb14v1_SëPixñ
(
b
, 
¨g_pixñ
);

145 
¨g_pixñ
->
x
 +
dx
;

146 
¨g_pixñ
->
y
 +
dy
;

147 
pixñ
 <<= 1;

148 }  
pixñ
 != 0 );

150 
	}
}

152 
uöt8_t
 
	$u8g_dev_pb14v1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

154 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

155 
msg
)

157 
U8G_DEV_MSG_SET_8PIXEL
:

158 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

159 
	`u8g_pb14v1_Së8PixñO±2
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

161 
U8G_DEV_MSG_SET_PIXEL
:

162 
	`u8g_pb14v1_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

164 
U8G_DEV_MSG_INIT
:

166 
U8G_DEV_MSG_STOP
:

168 
U8G_DEV_MSG_PAGE_FIRST
:

169 
	`u8g_pb14v1_CÀ¨
(
pb
);

170 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

172 
U8G_DEV_MSG_PAGE_NEXT
:

173 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

175 
	`u8g_pb14v1_CÀ¨
(
pb
);

177 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


178 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

179  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

181 
U8G_DEV_MSG_GET_PAGE_BOX
:

182 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

184 
U8G_DEV_MSG_GET_WIDTH
:

185 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

187 
U8G_DEV_MSG_GET_HEIGHT
:

188 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

190 
U8G_DEV_MSG_SET_COLOR_INDEX
:

192 
U8G_DEV_MSG_SET_XY_CB
:

194 
U8G_DEV_MSG_GET_MODE
:

195  
U8G_MODE_BW
;

198 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_pb16h1.c

43 
	~"u8g.h
"

44 
	~<°rög.h
>

47 
	$u8g_pb16h1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
Ë
U8G_NOINLINE
;

48 
	$u8g_pb16h1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

49 
	$u8g_pb16h1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
Ë
U8G_NOINLINE
 ;

50 
	$u8g_pb16h1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
Ë
U8G_NOINLINE
;

51 
uöt8_t
 
	`u8g_dev_pb8h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

53 
	$u8g_pb16h1_CÀ¨
(
u8g_pb_t
 *
b
)

55 
uöt8_t
 *
±r
 = (uöt8_à*)
b
->
buf
;

56 
uöt8_t
 *
íd_±r
 = 
±r
;

57 
íd_±r
 +
b
->
width
*2;

60 *
±r
++ = 0;

61 }  
±r
 !
íd_±r
 );

62 
	}
}

66 
	$u8g_pb16h1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

68 
b
->
buf
 = buf;

69 
b
->
width
 = width;

70 
	`u8g_pb16h1_CÀ¨
(
b
);

71 
	}
}

75 
	$u8g_pb16h1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

77 
uöt8_t
 
mask
;

78 
u8g_uöt_t
 
tmp
;

79 
uöt8_t
 *
±r
 = 
b
->
buf
;

81 
y
 -
b
->
p
.
∑ge_y0
;

82 i‡–
y
 >= 8 )

84 
±r
 +
b
->
width
;

85 
y
 &= 0x07;

87 
tmp
 = 
b
->
width
;

88 
tmp
 >>= 3;

89 
tmp
 *(
uöt8_t
)
y
;

90 
±r
 +
tmp
;

92 
mask
 = 0x080;

93 
mask
 >>
x
 & 7;

94 
x
 >>= 3;

95 
±r
 +
x
;

96 i‡–
cﬁ‹_ödex
 )

98 *
±r
 |
mask
;

102 
mask
 ^=0xff;

103 *
±r
 &
mask
;

106 
	}
}

109 
	$u8g_pb16h1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

111 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

113 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

115 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

117 
	`u8g_pb16h1_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

118 
	}
}

120 
	$u8g_pb16h1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

122 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

125 i‡–
pixñ
 & 128 )

127 
	`u8g_pb16h1_SëPixñ
(
b
, 
¨g_pixñ
);

129  
¨g_pixñ
->
dú
 )

131 0: 
¨g_pixñ
->
x
++; ;

132 1: 
¨g_pixñ
->
y
++; ;

133 2: 
¨g_pixñ
->
x
--; ;

134 3: 
¨g_pixñ
->
y
--; ;

136 
pixñ
 <<= 1;

137 }  
pixñ
 != 0 );

138 
	}
}

140 
	$u8g_pb16h1_Së8PixñO±2
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

142 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

143 
u8g_uöt_t
 
dx
 = 0;

144 
u8g_uöt_t
 
dy
 = 0;

146  
¨g_pixñ
->
dú
 )

148 0: 
dx
++; ;

149 1: 
dy
++; ;

150 2: 
dx
--; ;

151 3: 
dy
--; ;

156 i‡–
pixñ
 & 128 )

157 
	`u8g_pb16h1_SëPixñ
(
b
, 
¨g_pixñ
);

158 
¨g_pixñ
->
x
 +
dx
;

159 
¨g_pixñ
->
y
 +
dy
;

160 
pixñ
 <<= 1;

161 }  
pixñ
 != 0 );

162 
	}
}

165 
uöt8_t
 
	$u8g_dev_pb16h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

167 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

168 
msg
)

170 
U8G_DEV_MSG_SET_8PIXEL
:

171 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

172 
	`u8g_pb16h1_Së8PixñO±2
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

174 
U8G_DEV_MSG_SET_PIXEL
:

175 
	`u8g_pb16h1_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

177 
U8G_DEV_MSG_INIT
:

179 
U8G_DEV_MSG_STOP
:

181 
U8G_DEV_MSG_PAGE_FIRST
:

182 
	`u8g_pb16h1_CÀ¨
(
pb
);

183 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

185 
U8G_DEV_MSG_PAGE_NEXT
:

186 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

188 
	`u8g_pb16h1_CÀ¨
(
pb
);

190 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


191 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

192  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

194 
U8G_DEV_MSG_GET_PAGE_BOX
:

195 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

197 
U8G_DEV_MSG_GET_WIDTH
:

198 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

200 
U8G_DEV_MSG_GET_HEIGHT
:

201 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

203 
U8G_DEV_MSG_SET_COLOR_INDEX
:

205 
U8G_DEV_MSG_SET_XY_CB
:

207 
U8G_DEV_MSG_GET_MODE
:

208  
U8G_MODE_BW
;

211 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_pb16h2.c

40 
	~"u8g.h
"

41 
	~<°rög.h
>

43 
	$u8g_pb16h2_CÀ¨
(
u8g_pb_t
 *
b
)

45 
uöt8_t
 *
±r
 = (uöt8_à*)
b
->
buf
;

46 
uöt8_t
 *
íd_±r
 = 
±r
;

49 
íd_±r
 +
b
->
width
;

50 
íd_±r
 +
b
->
width
;

54 *
±r
++ = 0;

55 }  
±r
 !
íd_±r
 );

56 
	}
}

58 
	$u8g_pb16h2_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

60 
b
->
buf
 = buf;

61 
b
->
width
 = width;

62 
	`u8g_pb16h2_CÀ¨
(
b
);

63 
	}
}

65 
	$u8g_pb16h2_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

66 
	$u8g_pb16h2_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

68 
uöt8_t
 
mask
;

69 
uöt16_t
 
tmp
;

71 
uöt8_t
 *
±r
 = 
b
->
buf
;

73 
y
 -
b
->
p
.
∑ge_y0
;

75 
tmp
 = 
b
->
width
;

76 
tmp
 >>= 2;

77 
tmp
 *(
uöt8_t
)
y
;

78 
±r
 +
tmp
;

80 
tmp
 = 
x
;

81 
tmp
 >>= 2;

82 
±r
 +
tmp
;

84 
tmp
 = 
x
;

85 
tmp
 &= 3;

86 
tmp
 <<= 1;

87 
mask
 = 3;

88 
mask
 <<
tmp
;

89 
mask
 = ~mask;

90 
cﬁ‹_ödex
 &= 3;

91 
cﬁ‹_ödex
 <<
tmp
;

93 *
±r
 &
mask
;

94 *
±r
 |
cﬁ‹_ödex
;

95 
	}
}

98 
	$u8g_pb16h2_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

100 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

102 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

104 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

106 
	`u8g_pb16h2_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

107 
	}
}

110 
	$u8g_pb16h2_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

112 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

115 i‡–
pixñ
 & 128 )

117 
	`u8g_pb16h2_SëPixñ
(
b
, 
¨g_pixñ
);

119  
¨g_pixñ
->
dú
 )

121 0: 
¨g_pixñ
->
x
++; ;

122 1: 
¨g_pixñ
->
y
++; ;

123 2: 
¨g_pixñ
->
x
--; ;

124 3: 
¨g_pixñ
->
y
--; ;

126 
pixñ
 <<= 1;

127 }  
pixñ
 != 0 );

128 
	}
}

132 
uöt8_t
 
	$u8g_dev_pb16h2_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

134 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

135 
msg
)

137 
U8G_DEV_MSG_SET_8PIXEL
:

138 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

140 
	`u8g_pb16h2_Së8PixñStd
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

143 
U8G_DEV_MSG_SET_PIXEL
:

144 
	`u8g_pb16h2_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

146 
U8G_DEV_MSG_INIT
:

148 
U8G_DEV_MSG_STOP
:

150 
U8G_DEV_MSG_PAGE_FIRST
:

151 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

152 
	`u8g_pb16h2_CÀ¨
(
pb
);

154 
U8G_DEV_MSG_PAGE_NEXT
:

155 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

157 
	`u8g_pb16h2_CÀ¨
(
pb
);

159 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


160 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

161  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

163 
U8G_DEV_MSG_GET_PAGE_BOX
:

164 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

166 
U8G_DEV_MSG_GET_WIDTH
:

167 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

169 
U8G_DEV_MSG_GET_HEIGHT
:

170 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

172 
U8G_DEV_MSG_SET_COLOR_INDEX
:

174 
U8G_DEV_MSG_SET_XY_CB
:

176 
U8G_DEV_MSG_GET_MODE
:

177  
U8G_MODE_GRAY2BIT
;

180 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_pb16v1.c

40 
	~"u8g.h
"

41 
	~<°rög.h
>

44 
	$u8g_pb16v1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
Ë
U8G_NOINLINE
;

45 
	$u8g_pb16v1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

46 
	$u8g_pb16v1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
Ë
U8G_NOINLINE
 ;

47 
	$u8g_pb16v1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
Ë
U8G_NOINLINE
;

50 
	$u8g_pb16v1_CÀ¨
(
u8g_pb_t
 *
b
)

52 
uöt8_t
 *
±r
 = (uöt8_à*)
b
->
buf
;

53 
uöt8_t
 *
íd_±r
 = 
±r
;

54 
íd_±r
 +
b
->
width
*2;

57 *
±r
++ = 0;

58 }  
±r
 !
íd_±r
 );

59 
	}
}

62 
	$u8g_pb16v1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

64 
b
->
buf
 = buf;

65 
b
->
width
 = width;

66 
	`u8g_pb16v1_CÀ¨
(
b
);

67 
	}
}

69 
	$u8g_pb16v1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

71 
uöt8_t
 
mask
;

72 
uöt8_t
 *
±r
 = 
b
->
buf
;

74 
y
 -
b
->
p
.
∑ge_y0
;

75 i‡–
y
 >= 8 )

77 
±r
 +
b
->
width
;

78 
y
 &= 0x07;

80 
mask
 = 1;

81 
mask
 <<
y
;

82 
±r
 +
x
;

83 i‡–
cﬁ‹_ödex
 )

85 *
±r
 |
mask
;

89 
mask
 ^=0xff;

90 *
±r
 &
mask
;

92 
	}
}

95 
	$u8g_pb16v1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

97 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

99 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

101 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

103 
	`u8g_pb16v1_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

104 
	}
}

106 
	$u8g_pb16v1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

108 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

111 i‡–
pixñ
 & 128 )

113 
	`u8g_pb16v1_SëPixñ
(
b
, 
¨g_pixñ
);

115  
¨g_pixñ
->
dú
 )

117 0: 
¨g_pixñ
->
x
++; ;

118 1: 
¨g_pixñ
->
y
++; ;

119 2: 
¨g_pixñ
->
x
--; ;

120 3: 
¨g_pixñ
->
y
--; ;

122 
pixñ
 <<= 1;

123 }  
pixñ
 != 0 );

124 
	}
}

127 
	$u8g_pb16v1_Së8PixñO±2
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

129 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

130 
u8g_uöt_t
 
dx
 = 0;

131 
u8g_uöt_t
 
dy
 = 0;

133  
¨g_pixñ
->
dú
 )

135 0: 
dx
++; ;

136 1: 
dy
++; ;

137 2: 
dx
--; ;

138 3: 
dy
--; ;

143 i‡–
pixñ
 & 128 )

144 
	`u8g_pb16v1_SëPixñ
(
b
, 
¨g_pixñ
);

145 
¨g_pixñ
->
x
 +
dx
;

146 
¨g_pixñ
->
y
 +
dy
;

147 
pixñ
 <<= 1;

148 }  
pixñ
 != 0 );

150 
	}
}

152 
uöt8_t
 
	$u8g_dev_pb16v1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

154 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

155 
msg
)

157 
U8G_DEV_MSG_SET_8PIXEL
:

158 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

159 
	`u8g_pb16v1_Së8PixñO±2
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

161 
U8G_DEV_MSG_SET_PIXEL
:

162 
	`u8g_pb16v1_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

164 
U8G_DEV_MSG_INIT
:

166 
U8G_DEV_MSG_STOP
:

168 
U8G_DEV_MSG_PAGE_FIRST
:

169 
	`u8g_pb16v1_CÀ¨
(
pb
);

170 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

172 
U8G_DEV_MSG_PAGE_NEXT
:

173 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

175 
	`u8g_pb16v1_CÀ¨
(
pb
);

177 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


178 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

179  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

181 
U8G_DEV_MSG_GET_PAGE_BOX
:

182 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

184 
U8G_DEV_MSG_GET_WIDTH
:

185 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

187 
U8G_DEV_MSG_GET_HEIGHT
:

188 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

190 
U8G_DEV_MSG_SET_COLOR_INDEX
:

192 
U8G_DEV_MSG_SET_XY_CB
:

194 
U8G_DEV_MSG_GET_MODE
:

195  
U8G_MODE_BW
;

198 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_pb16v2.c

40 
	~"u8g.h
"

41 
	~<°rög.h
>

44 
	$u8g_pb16v2_CÀ¨
(
u8g_pb_t
 *
b
)

46 
uöt8_t
 *
±r
 = (uöt8_à*)
b
->
buf
;

47 
uöt8_t
 *
íd_±r
 = 
±r
;

50 
íd_±r
 +
b
->
width
;

51 
íd_±r
 +
b
->
width
;

55 *
±r
++ = 0;

56 }  
±r
 !
íd_±r
 );

57 
	}
}

59 
	$u8g_pb16v2Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

61 
b
->
buf
 = buf;

62 
b
->
width
 = width;

63 
	`u8g_pb16v2_CÀ¨
(
b
);

64 
	}
}

66 
	$u8g_pb16v2_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

68 
uöt8_t
 
mask
;

69 
uöt8_t
 *
±r
 = 
b
->
buf
;

70 
y
 -
b
->
p
.
∑ge_y0
;

71 i‡–
y
 >= 4 )

73 
±r
 +
b
->
width
;

75 
mask
 = 0x03;

76 
y
 &= 0x03;

77 
y
 <<= 1;

78 
mask
 <<
y
;

79 
mask
 ^=0xff;

80 
cﬁ‹_ödex
 &= 3;

81 
cﬁ‹_ödex
 <<
y
;

82 
±r
 +
x
;

83 *
±r
 &
mask
;

84 *
±r
 |
cﬁ‹_ödex
;

85 
	}
}

88 
	$u8g_pb16v2_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

90 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

92 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

94 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

96 
	`u8g_pb16v2_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

97 
	}
}

100 
	$u8g_pb16v2_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

102 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

105 i‡–
pixñ
 & 128 )

107 
	`u8g_pb16v2_SëPixñ
(
b
, 
¨g_pixñ
);

109  
¨g_pixñ
->
dú
 )

111 0: 
¨g_pixñ
->
x
++; ;

112 1: 
¨g_pixñ
->
y
++; ;

113 2: 
¨g_pixñ
->
x
--; ;

114 3: 
¨g_pixñ
->
y
--; ;

116 
pixñ
 <<= 1;

117 }  
pixñ
 != 0 );

118 
	}
}

122 
uöt8_t
 
	$u8g_dev_pb16v2_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

124 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

125 
msg
)

127 
U8G_DEV_MSG_SET_8PIXEL
:

128 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

130 
	`u8g_pb16v2_Së8PixñStd
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

133 
U8G_DEV_MSG_SET_PIXEL
:

134 
	`u8g_pb16v2_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

136 
U8G_DEV_MSG_INIT
:

138 
U8G_DEV_MSG_STOP
:

140 
U8G_DEV_MSG_PAGE_FIRST
:

141 
	`u8g_pb16v2_CÀ¨
(
pb
);

142 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

144 
U8G_DEV_MSG_PAGE_NEXT
:

145 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

147 
	`u8g_pb16v2_CÀ¨
(
pb
);

149 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


150 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

151  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

153 
U8G_DEV_MSG_GET_PAGE_BOX
:

154 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

156 
U8G_DEV_MSG_GET_WIDTH
:

157 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

159 
U8G_DEV_MSG_GET_HEIGHT
:

160 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

162 
U8G_DEV_MSG_SET_COLOR_INDEX
:

164 
U8G_DEV_MSG_SET_XY_CB
:

166 
U8G_DEV_MSG_GET_MODE
:

167  
U8G_MODE_GRAY2BIT
;

170 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_pb32h1.c

43 
	~"u8g.h
"

44 
	~<°rög.h
>

47 
	$u8g_pb32h1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
Ë
U8G_NOINLINE
;

48 
	$u8g_pb32h1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

49 
	$u8g_pb32h1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
Ë
U8G_NOINLINE
 ;

50 
	$u8g_pb32h1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
Ë
U8G_NOINLINE
;

51 
uöt8_t
 
	`u8g_dev_pb8h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

53 
	$u8g_pb32h1_CÀ¨
(
u8g_pb_t
 *
b
)

55 
uöt8_t
 *
±r
 = (uöt8_à*)
b
->
buf
;

56 
uöt8_t
 *
íd_±r
 = 
±r
;

57 
íd_±r
 +
b
->
width
*4;

60 *
±r
++ = 0;

61 }  
±r
 !
íd_±r
 );

62 
	}
}

66 
	$u8g_pb32h1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

68 
b
->
buf
 = buf;

69 
b
->
width
 = width;

70 
	`u8g_pb32h1_CÀ¨
(
b
);

71 
	}
}

75 
	$u8g_pb32h1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

77 
uöt8_t
 
mask
;

78 
uöt16_t
 
tmp
;

79 
uöt8_t
 *
±r
 = 
b
->
buf
;

81 
y
 -
b
->
p
.
∑ge_y0
;

82 
tmp
 = 
b
->
width
;

83 
tmp
 >>= 3;

84 
tmp
 *
y
;

85 
±r
 +
tmp
;

87 
mask
 = 0x080;

88 
mask
 >>
x
 & 7;

89 
x
 >>= 3;

90 
±r
 +
x
;

91 i‡–
cﬁ‹_ödex
 )

93 *
±r
 |
mask
;

97 
mask
 ^=0xff;

98 *
±r
 &
mask
;

101 
	}
}

104 
	$u8g_pb32h1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

106 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

108 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

110 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

112 
	`u8g_pb32h1_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

113 
	}
}

115 
	$u8g_pb32h1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

117 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

120 i‡–
pixñ
 & 128 )

122 
	`u8g_pb32h1_SëPixñ
(
b
, 
¨g_pixñ
);

124  
¨g_pixñ
->
dú
 )

126 0: 
¨g_pixñ
->
x
++; ;

127 1: 
¨g_pixñ
->
y
++; ;

128 2: 
¨g_pixñ
->
x
--; ;

129 3: 
¨g_pixñ
->
y
--; ;

131 
pixñ
 <<= 1;

132 }  
pixñ
 != 0 );

133 
	}
}

135 
	$u8g_pb32h1_Së8PixñO±2
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

137 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

138 
u8g_uöt_t
 
dx
 = 0;

139 
u8g_uöt_t
 
dy
 = 0;

141  
¨g_pixñ
->
dú
 )

143 0: 
dx
++; ;

144 1: 
dy
++; ;

145 2: 
dx
--; ;

146 3: 
dy
--; ;

151 i‡–
pixñ
 & 128 )

152 
	`u8g_pb32h1_SëPixñ
(
b
, 
¨g_pixñ
);

153 
¨g_pixñ
->
x
 +
dx
;

154 
¨g_pixñ
->
y
 +
dy
;

155 
pixñ
 <<= 1;

156 }  
pixñ
 != 0 );

157 
	}
}

160 
uöt8_t
 
	$u8g_dev_pb32h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

162 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

163 
msg
)

165 
U8G_DEV_MSG_SET_8PIXEL
:

166 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

167 
	`u8g_pb32h1_Së8PixñO±2
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

169 
U8G_DEV_MSG_SET_PIXEL
:

170 
	`u8g_pb32h1_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

172 
U8G_DEV_MSG_INIT
:

174 
U8G_DEV_MSG_STOP
:

176 
U8G_DEV_MSG_PAGE_FIRST
:

177 
	`u8g_pb32h1_CÀ¨
(
pb
);

178 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

180 
U8G_DEV_MSG_PAGE_NEXT
:

181 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

183 
	`u8g_pb32h1_CÀ¨
(
pb
);

185 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


186 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

187  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

189 
U8G_DEV_MSG_GET_PAGE_BOX
:

190 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

192 
U8G_DEV_MSG_GET_WIDTH
:

193 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

195 
U8G_DEV_MSG_GET_HEIGHT
:

196 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

198 
U8G_DEV_MSG_SET_COLOR_INDEX
:

200 
U8G_DEV_MSG_SET_XY_CB
:

202 
U8G_DEV_MSG_GET_MODE
:

203  
U8G_MODE_BW
;

206 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_pb8h1.c

44 
	~"u8g.h
"

45 
	~<°rög.h
>

47 #ifde‡
__unix__


48 
	~<as£π.h
>

55 #ifde‡
__unix__


56 *
	gu8g_buf_lowî_limô
;

57 *
	gu8g_buf_uµî_limô
;

60 
	$u8g_pb8h1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
Ë
U8G_NOINLINE
;

61 
	$u8g_pb8h1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

62 
	$u8g_pb8h1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
Ë
U8G_NOINLINE
 ;

63 
	$u8g_pb8h1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
Ë
U8G_NOINLINE
;

64 
uöt8_t
 
	`u8g_dev_pb8h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

67 #ifde‡
NEW_CODE


68 
	su8g_pb_h1_°ru˘


70 
u8g_uöt_t
 
x
;

71 
u8g_uöt_t
 
y
;

72 
uöt8_t
 *
±r
;

73 
uöt8_t
 
mask
;

74 
uöt8_t
 
löe_byã_Àn
;

75 
uöt8_t
 
˙t
;

78 
uöt8_t
 
u8g_pb8h1_bômask
[8] = { 0x080, 0x040, 0x020, 0x010, 0x008, 0x004, 0x002, 0x001 
	}
};

80 
	$u8g_pb8h1_°©e_right
(
u8g_pb_h1_°ru˘
 *
s
Ë
U8G_NOINLINE
;

81 
	$u8g_pb8h1_°©e_right
(
u8g_pb_h1_°ru˘
 *
s
)

83 
u8g_uöt_t
 
x
;

84 
x
 = 
s
->x;

85 
x
++;

86 
s
->
x
 = x;

87 
x
 &= 7;

88 
s
->
mask
 = 
u8g_pb8h1_bômask
[
x
];

89 i‡–
x
 == 0 )

90 
s
->
±r
++;

91 
	}
}

93 
	$u8g_pb8h1_°©e_À·
(
u8g_pb_h1_°ru˘
 *
s
)

95 
u8g_uöt_t
 
x
;

96 
x
 = 
s
->x;

97 
x
--;

98 
s
->
x
 = x;

99 
x
 &= 7;

100 
s
->
mask
 = 
u8g_pb8h1_bômask
[
x
];

101 i‡–
x
 == 7 )

102 
s
->
±r
--;

103 
	}
}

105 
	$u8g_pb8h1_°©e_down
(
u8g_pb_h1_°ru˘
 *
s
)

107 
s
->
y
++;

108 
s
->
±r
 +s->
löe_byã_Àn
;

109 
	}
}

111 
	$u8g_pb8h1_°©e_up
(
u8g_pb_h1_°ru˘
 *
s
)

113 
s
->
y
--;

114 
s
->
±r
 -s->
löe_byã_Àn
;

115 
	}
}

117 
	$u8g_pb8h1_°©e_öô
(
u8g_pb_h1_°ru˘
 *
s
, 
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
Ë
U8G_NOINLINE
;

118 
	$u8g_pb8h1_°©e_öô
(
u8g_pb_h1_°ru˘
 *
s
, 
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
)

120 
u8g_uöt_t
 
tmp
;

122 
uöt8_t
 *
±r
 = 
b
->
buf
;

124 
s
->
x
 = x;

125 
s
->
y
 = y;

127 
y
 -
b
->
p
.
∑ge_y0
;

129 
tmp
 = 
b
->
width
;

130 
tmp
 >>= 3;

131 
s
->
löe_byã_Àn
 = 
tmp
;

134 
±r
 -
tmp
*8;

135 
y
+=8;

137 
±r
 +
tmp
*
y
;

139 
s
->
mask
 = 
u8g_pb8h1_bômask
[
x
 & 7];

142 
±r
--;

143 
x
 += 8;

144 
x
 >>= 3;

145 
±r
 +
x
;

146 
s
->
±r
 =Ötr;

147 
	}
}

149 
	$u8g_pb8h1_°©e_£t_pixñ
(
u8g_pb_h1_°ru˘
 *
s
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

150 
	$u8g_pb8h1_°©e_£t_pixñ
(
u8g_pb_h1_°ru˘
 *
s
, 
uöt8_t
 
cﬁ‹_ödex
)

153 #ifde‡
__unix__


154 
	`as£π
–
s
->
±r
 >
u8g_buf_lowî_limô
 );

155 
	`as£π
–
s
->
±r
 < 
u8g_buf_uµî_limô
 );

158 i‡–
cﬁ‹_ödex
 )

160 *
s
->
±r
 |s->
mask
;

164 
uöt8_t
 
mask
 = 
s
->mask;

165 
mask
 ^=0xff;

166 *
s
->
±r
 &
mask
;

168 
	}
}

172 
	$u8g_pb8h1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

174 
b
->
buf
 = buf;

175 
b
->
width
 = width;

176 
	`u8g_pb_CÀ¨
(
b
);

177 
	}
}

180 
	$u8g_pb8h1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

182 #ifde‡
NEW_CODE


183 
u8g_pb_h1_°ru˘
 
s
;

184 
	`u8g_pb8h1_°©e_öô
(&
s
, 
b
, 
x
, 
y
);

185 
	`u8g_pb8h1_°©e_£t_pixñ
(&
s
, 
cﬁ‹_ödex
);

194 
uöt8_t
 
mask
;

195 
u8g_uöt_t
 
tmp
;

196 
uöt8_t
 *
±r
 = 
b
->
buf
;

198 
y
 -
b
->
p
.
∑ge_y0
;

199 
tmp
 = 
b
->
width
;

200 
tmp
 >>= 3;

201 
tmp
 *(
uöt8_t
)
y
;

202 
±r
 +
tmp
;

204 
mask
 = 0x080;

205 
mask
 >>
x
 & 7;

206 
x
 >>= 3;

207 
±r
 +
x
;

208 i‡–
cﬁ‹_ödex
 )

210 *
±r
 |
mask
;

214 
mask
 ^=0xff;

215 *
±r
 &
mask
;

218 
	}
}

221 
	$u8g_pb8h1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

223 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

225 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

227 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

229 
	`u8g_pb8h1_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

230 
	}
}

232 
	$u8g_pb8h1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

234 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

237 i‡–
pixñ
 & 128 )

239 
	`u8g_pb8h1_SëPixñ
(
b
, 
¨g_pixñ
);

241  
¨g_pixñ
->
dú
 )

243 0: 
¨g_pixñ
->
x
++; ;

244 1: 
¨g_pixñ
->
y
++; ;

245 2: 
¨g_pixñ
->
x
--; ;

246 3: 
¨g_pixñ
->
y
--; ;

248 
pixñ
 <<= 1;

249 }  
pixñ
 != 0 );

250 
	}
}

252 
	$u8g_pb8h1_Së8PixñO±2
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

254 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

255 
u8g_uöt_t
 
dx
 = 0;

256 
u8g_uöt_t
 
dy
 = 0;

258  
¨g_pixñ
->
dú
 )

260 0: 
dx
++; ;

261 1: 
dy
++; ;

262 2: 
dx
--; ;

263 3: 
dy
--; ;

268 i‡–
pixñ
 & 128 )

269 
	`u8g_pb8h1_SëPixñ
(
b
, 
¨g_pixñ
);

270 
¨g_pixñ
->
x
 +
dx
;

271 
¨g_pixñ
->
y
 +
dy
;

272 
pixñ
 <<= 1;

273 }  
pixñ
 != 0 );

274 
	}
}

276 #ifde‡
NEW_CODE


277 
	$u8g_pb8h1_Së8PixñSèã
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

279 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

280 
u8g_pb_h1_°ru˘
 
s
;

281 
uöt8_t
 
˙t
;

282 
	`u8g_pb8h1_°©e_öô
(&
s
, 
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
);

283 
˙t
 = 8;

284  
¨g_pixñ
->
dú
 )

289 i‡–
s
.
x
 < 
b
->
width
 )

290 i‡–
pixñ
 & 128 )

291 
	`u8g_pb8h1_°©e_£t_pixñ
(&
s
, 
¨g_pixñ
->
cﬁ‹
);

292 
	`u8g_pb8h1_°©e_right
(&
s
);

293 
pixñ
 <<= 1;

294 
˙t
--;

295 }  
˙t
 > 0 && 
pixñ
 != 0 );

300 i‡–
s
.
y
 >
b
->
p
.
∑ge_y0
 )

301 i‡–
s
.
y
 <
b
->
p
.
∑ge_y1
 )

302 i‡–
pixñ
 & 128 )

303 
	`u8g_pb8h1_°©e_£t_pixñ
(&
s
, 
¨g_pixñ
->
cﬁ‹
);

304 
	`u8g_pb8h1_°©e_down
(&
s
);

305 
pixñ
 <<= 1;

306 
˙t
--;

307 }  
˙t
 > 0 && 
pixñ
 != 0 );

312 i‡–
s
.
x
 < 
b
->
width
 )

313 i‡–
pixñ
 & 128 )

314 
	`u8g_pb8h1_°©e_£t_pixñ
(&
s
, 
¨g_pixñ
->
cﬁ‹
);

315 
	`u8g_pb8h1_°©e_À·
(&
s
);

316 
pixñ
 <<= 1;

317 
˙t
--;

318 }  
˙t
 > 0 && 
pixñ
 != 0 );

323 i‡–
s
.
y
 >
b
->
p
.
∑ge_y0
 )

324 i‡–
s
.
y
 <
b
->
p
.
∑ge_y1
 )

325 i‡–
pixñ
 & 128 )

326 
	`u8g_pb8h1_°©e_£t_pixñ
(&
s
, 
¨g_pixñ
->
cﬁ‹
);

327 
	`u8g_pb8h1_°©e_up
(&
s
);

328 
pixñ
 <<= 1;

329 
˙t
--;

330 }  
˙t
 > 0 && 
pixñ
 != 0 );

333 
	}
}

336 
uöt8_t
 
	$u8g_dev_pb8h1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

338 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

339 
msg
)

341 
U8G_DEV_MSG_SET_8PIXEL
:

342 #ifde‡
NEW_CODE


343 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

344 
	`u8g_pb8h1_Së8PixñSèã
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

346 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

347 
	`u8g_pb8h1_Së8PixñO±2
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

350 
U8G_DEV_MSG_SET_PIXEL
:

351 
	`u8g_pb8h1_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

353 
U8G_DEV_MSG_INIT
:

355 
U8G_DEV_MSG_STOP
:

357 
U8G_DEV_MSG_PAGE_FIRST
:

358 
	`u8g_pb_CÀ¨
(
pb
);

359 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

361 
U8G_DEV_MSG_PAGE_NEXT
:

362 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

364 
	`u8g_pb_CÀ¨
(
pb
);

366 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


367 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

368  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

370 
U8G_DEV_MSG_GET_PAGE_BOX
:

371 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

373 
U8G_DEV_MSG_GET_WIDTH
:

374 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

376 
U8G_DEV_MSG_GET_HEIGHT
:

377 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

379 
U8G_DEV_MSG_SET_COLOR_INDEX
:

381 
U8G_DEV_MSG_SET_XY_CB
:

383 
U8G_DEV_MSG_GET_MODE
:

384  
U8G_MODE_BW
;

387 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_pb8h1f.c

43 
	~"u8g.h
"

44 
	~<°rög.h
>

47 
	$u8g_pb8h1f_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
Ë
U8G_NOINLINE
;

48 
	$u8g_pb8h1f_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

49 
	$u8g_pb8h1f_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
Ë
U8G_NOINLINE
 ;

50 
	$u8g_pb8h1f_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
Ë
U8G_NOINLINE
;

51 
uöt8_t
 
	`u8g_dev_pb8h1f_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

54 
	$u8g_pb8h1f_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

56 
b
->
buf
 = buf;

57 
b
->
width
 = width;

58 
	`u8g_pb_CÀ¨
(
b
);

59 
	}
}

62 
	$u8g_pb8h1f_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

65 
uöt8_t
 
mask
;

66 
u8g_uöt_t
 
tmp
;

67 
uöt8_t
 *
±r
 = 
b
->
buf
;

69 
y
 -
b
->
p
.
∑ge_y0
;

70 
tmp
 = 
b
->
width
 >> 3;

71 
tmp
 *(
uöt8_t
)
y
;

72 
±r
 +
tmp
;

74 
mask
 = 1;

75 
mask
 <<
x
 & 7;

76 
x
 >>= 3;

77 
±r
 +
x
;

78 i‡–
cﬁ‹_ödex
 )

80 *
±r
 |
mask
;

84 
mask
 ^=0xff;

85 *
±r
 &
mask
;

87 
	}
}

90 
	$u8g_pb8h1f_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

92 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

94 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

96 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

98 
	`u8g_pb8h1f_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

99 
	}
}

101 
	$u8g_pb8h1f_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

103 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

106 i‡–
pixñ
 & 128 )

108 
	`u8g_pb8h1f_SëPixñ
(
b
, 
¨g_pixñ
);

110  
¨g_pixñ
->
dú
 )

112 0: 
¨g_pixñ
->
x
++; ;

113 1: 
¨g_pixñ
->
y
++; ;

114 2: 
¨g_pixñ
->
x
--; ;

115 3: 
¨g_pixñ
->
y
--; ;

117 
pixñ
 <<= 1;

118 }  
pixñ
 != 0 );

119 
	}
}

121 
	$u8g_pb8h1f_Së8PixñO±2
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

123 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

124 
u8g_uöt_t
 
dx
 = 0;

125 
u8g_uöt_t
 
dy
 = 0;

127  
¨g_pixñ
->
dú
 )

129 0: 
dx
++; ;

130 1: 
dy
++; ;

131 2: 
dx
--; ;

132 3: 
dy
--; ;

137 i‡–
pixñ
 & 128 )

138 
	`u8g_pb8h1f_SëPixñ
(
b
, 
¨g_pixñ
);

139 
¨g_pixñ
->
x
 +
dx
;

140 
¨g_pixñ
->
y
 +
dy
;

141 
pixñ
 <<= 1;

142 }  
pixñ
 != 0 );

143 
	}
}

146 
uöt8_t
 
	$u8g_dev_pb8h1f_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

148 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

149 
msg
)

151 
U8G_DEV_MSG_SET_8PIXEL
:

152 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

153 
	`u8g_pb8h1f_Së8PixñO±2
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

155 
U8G_DEV_MSG_SET_PIXEL
:

156 
	`u8g_pb8h1f_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

158 
U8G_DEV_MSG_INIT
:

160 
U8G_DEV_MSG_STOP
:

162 
U8G_DEV_MSG_PAGE_FIRST
:

163 
	`u8g_pb_CÀ¨
(
pb
);

164 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

166 
U8G_DEV_MSG_PAGE_NEXT
:

167 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

169 
	`u8g_pb_CÀ¨
(
pb
);

171 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


172 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

173  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

175 
U8G_DEV_MSG_GET_PAGE_BOX
:

176 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

178 
U8G_DEV_MSG_GET_WIDTH
:

179 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

181 
U8G_DEV_MSG_GET_HEIGHT
:

182 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

184 
U8G_DEV_MSG_SET_COLOR_INDEX
:

186 
U8G_DEV_MSG_SET_XY_CB
:

188 
U8G_DEV_MSG_GET_MODE
:

189  
U8G_MODE_BW
;

192 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_pb8h2.c

40 
	~"u8g.h
"

41 
	~<°rög.h
>

43 
	$u8g_pb8h2_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

45 
b
->
buf
 = buf;

46 
b
->
width
 = width;

47 
	`u8g_pb_CÀ¨
(
b
);

48 
	}
}

50 
	$u8g_pb8h2_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

51 
	$u8g_pb8h2_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

53 
uöt8_t
 
mask
;

54 
uöt16_t
 
tmp
;

56 
uöt8_t
 *
±r
 = 
b
->
buf
;

58 
y
 -
b
->
p
.
∑ge_y0
;

60 
tmp
 = 
b
->
width
;

61 
tmp
 >>= 2;

62 
tmp
 *(
uöt8_t
)
y
;

63 
±r
 +
tmp
;

65 
tmp
 = 
x
;

66 
tmp
 >>= 2;

67 
±r
 +
tmp
;

69 
tmp
 = 
x
;

70 
tmp
 &= 3;

71 
tmp
 <<= 1;

72 
mask
 = 3;

73 
mask
 <<
tmp
;

74 
mask
 = ~mask;

75 
cﬁ‹_ödex
 &= 3;

76 
cﬁ‹_ödex
 <<
tmp
;

78 *
±r
 &
mask
;

79 *
±r
 |
cﬁ‹_ödex
;

80 
	}
}

83 
	$u8g_pb8h2_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

85 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

87 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

89 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

91 
	`u8g_pb8h2_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

92 
	}
}

95 
	$u8g_pb8h2_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

97 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

100 i‡–
pixñ
 & 128 )

102 
	`u8g_pb8h2_SëPixñ
(
b
, 
¨g_pixñ
);

104  
¨g_pixñ
->
dú
 )

106 0: 
¨g_pixñ
->
x
++; ;

107 1: 
¨g_pixñ
->
y
++; ;

108 2: 
¨g_pixñ
->
x
--; ;

109 3: 
¨g_pixñ
->
y
--; ;

111 
pixñ
 <<= 1;

112 }  
pixñ
 != 0 );

113 
	}
}

117 
uöt8_t
 
	$u8g_dev_pb8h2_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

119 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

120 
msg
)

122 
U8G_DEV_MSG_SET_8PIXEL
:

123 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

125 
	`u8g_pb8h2_Së8PixñStd
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

128 
U8G_DEV_MSG_SET_PIXEL
:

129 
	`u8g_pb8h2_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

131 
U8G_DEV_MSG_INIT
:

133 
U8G_DEV_MSG_STOP
:

135 
U8G_DEV_MSG_PAGE_FIRST
:

136 
	`u8g_pb_CÀ¨
(
pb
);

137 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

139 
U8G_DEV_MSG_PAGE_NEXT
:

140 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

142 
	`u8g_pb_CÀ¨
(
pb
);

144 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


145 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

146  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

148 
U8G_DEV_MSG_GET_PAGE_BOX
:

149 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

151 
U8G_DEV_MSG_GET_WIDTH
:

152 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

154 
U8G_DEV_MSG_GET_HEIGHT
:

155 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

157 
U8G_DEV_MSG_SET_COLOR_INDEX
:

159 
U8G_DEV_MSG_SET_XY_CB
:

161 
U8G_DEV_MSG_GET_MODE
:

162  
U8G_MODE_GRAY2BIT
;

165 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_pb8h8.c

52 
	~"u8g.h
"

54 
	#WIDTH_BITS
 7

	)

55 
	#WIDTH
 (1<<
WIDTH_BITS
)

	)

56 
	#PAGE_HEIGHT_BITS
 3

	)

57 
	#PAGE_HEIGHT
 (1<<
PAGE_HEIGHT_BITS
)

	)

59 
	$u8g_pb8h8_CÀ¨
(
u8g_pb_t
 *
b
)

61 
uöt8_t
 *
±r
 = (uöt8_à*)
b
->
buf
;

62 
uöt8_t
 *
íd_±r
 = 
±r
;

63 
uöt8_t
 
˙t
 = 
b
->
p
.
∑ge_height
;

66 
íd_±r
 +
b
->
width
;

67 
˙t
--;

68 }  
˙t
 > 0 );

71 *
±r
++ = 0;

72 }  
±r
 !
íd_±r
 );

73 
	}
}

76 
	$u8g_pb8h8_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

78 
b
->
buf
 = buf;

79 
b
->
width
 = width;

80 
	`u8g_pb8h8_CÀ¨
(
b
);

81 
	}
}

83 
	$u8g_pb8h8_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

85 
uöt16_t
 
tmp
;

86 
uöt8_t
 *
±r
 = 
b
->
buf
;

87 
y
 -
b
->
p
.
∑ge_y0
;

88 
tmp
 = 
y
;

89 
tmp
 *
b
->
width
;

90 
tmp
 +
x
;

91 
±r
 +
tmp
;

92 *
±r
 = 
cﬁ‹_ödex
;

93 
	}
}

95 
	$u8g_pb8h8_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

97 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

99 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

101 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

103 
	`u8g_pb8h8_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

104 
	}
}

107 
	$u8g_pb8h8_Së8Pixñ
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

109 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

110 
u8g_uöt_t
 
dx
 = 0;

111 
u8g_uöt_t
 
dy
 = 0;

113  
¨g_pixñ
->
dú
 )

115 0: 
dx
++; ;

116 1: 
dy
++; ;

117 2: 
dx
--; ;

118 3: 
dy
--; ;

123 i‡–
pixñ
 & 128 )

124 
	`u8g_pb8h8_SëPixñ
(
b
, 
¨g_pixñ
);

125 
¨g_pixñ
->
x
 +
dx
;

126 
¨g_pixñ
->
y
 +
dy
;

127 
pixñ
 <<= 1;

128 }  
pixñ
 != 0 );

129 
	}
}

132 
uöt8_t
 
	$u8g_dev_pb8h8_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

134 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

135 
msg
)

137 
U8G_DEV_MSG_SET_8PIXEL
:

138 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

139 
	`u8g_pb8h8_Së8Pixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

141 
U8G_DEV_MSG_SET_PIXEL
:

142 
	`u8g_pb8h8_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

144 
U8G_DEV_MSG_INIT
:

146 
U8G_DEV_MSG_STOP
:

148 
U8G_DEV_MSG_PAGE_FIRST
:

149 
	`u8g_pb8h8_CÀ¨
(
pb
);

150 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

152 
U8G_DEV_MSG_PAGE_NEXT
:

153 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

155 
	`u8g_pb8h8_CÀ¨
(
pb
);

157 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


158 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

159  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

161 
U8G_DEV_MSG_GET_PAGE_BOX
:

162 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

164 
U8G_DEV_MSG_GET_WIDTH
:

165 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

167 
U8G_DEV_MSG_GET_HEIGHT
:

168 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

170 
U8G_DEV_MSG_SET_COLOR_INDEX
:

172 
U8G_DEV_MSG_SET_XY_CB
:

174 
U8G_DEV_MSG_GET_MODE
:

175  
U8G_MODE_R3G3B2
;

178 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_pb8v1.c

40 
	~"u8g.h
"

41 
	~<°rög.h
>

44 
	$u8g_pb8v1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
Ë
U8G_NOINLINE
;

45 
	$u8g_pb8v1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
Ë
U8G_NOINLINE
;

46 
	$u8g_pb8v1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
Ë
U8G_NOINLINE
 ;

47 
	$u8g_pb8v1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
Ë
U8G_NOINLINE
;

50 
	$u8g_pb8v1_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

52 
b
->
buf
 = buf;

53 
b
->
width
 = width;

54 
	`u8g_pb_CÀ¨
(
b
);

55 
	}
}

57 
	$u8g_pb8v1_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

59 
uöt8_t
 
mask
;

60 
uöt8_t
 *
±r
 = 
b
->
buf
;

62 
y
 -
b
->
p
.
∑ge_y0
;

63 
mask
 = 1;

64 
y
 &= 0x07;

65 
mask
 <<
y
;

66 
±r
 +
x
;

67 i‡–
cﬁ‹_ödex
 )

69 *
±r
 |
mask
;

73 
mask
 ^=0xff;

74 *
±r
 &
mask
;

76 
	}
}

79 
	$u8g_pb8v1_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

81 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

83 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

85 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

87 
	`u8g_pb8v1_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

88 
	}
}

90 
	$u8g_pb8v1_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

92 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

95 i‡–
pixñ
 & 128 )

97 
	`u8g_pb8v1_SëPixñ
(
b
, 
¨g_pixñ
);

99  
¨g_pixñ
->
dú
 )

101 0: 
¨g_pixñ
->
x
++; ;

102 1: 
¨g_pixñ
->
y
++; ;

103 2: 
¨g_pixñ
->
x
--; ;

104 3: 
¨g_pixñ
->
y
--; ;

106 
pixñ
 <<= 1;

107 }  
pixñ
 != 0 );

108 
	}
}

111 
	$u8g_pb8v1_Së8PixñO±2
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

113 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

114 
u8g_uöt_t
 
dx
 = 0;

115 
u8g_uöt_t
 
dy
 = 0;

117  
¨g_pixñ
->
dú
 )

119 0: 
dx
++; ;

120 1: 
dy
++; ;

121 2: 
dx
--; ;

122 3: 
dy
--; ;

127 i‡–
pixñ
 & 128 )

128 
	`u8g_pb8v1_SëPixñ
(
b
, 
¨g_pixñ
);

129 
¨g_pixñ
->
x
 +
dx
;

130 
¨g_pixñ
->
y
 +
dy
;

131 
pixñ
 <<= 1;

132 }  
pixñ
 != 0 );

134 
	}
}

136 
uöt8_t
 
	$u8g_dev_pb8v1_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

138 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

139 
msg
)

141 
U8G_DEV_MSG_SET_8PIXEL
:

142 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

143 
	`u8g_pb8v1_Së8PixñO±2
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

145 
U8G_DEV_MSG_SET_PIXEL
:

146 
	`u8g_pb8v1_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

148 
U8G_DEV_MSG_INIT
:

150 
U8G_DEV_MSG_STOP
:

152 
U8G_DEV_MSG_PAGE_FIRST
:

153 
	`u8g_pb_CÀ¨
(
pb
);

154 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

156 
U8G_DEV_MSG_PAGE_NEXT
:

157 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

159 
	`u8g_pb_CÀ¨
(
pb
);

161 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


162 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

163  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

165 
U8G_DEV_MSG_GET_PAGE_BOX
:

166 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

168 
U8G_DEV_MSG_GET_WIDTH
:

169 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

171 
U8G_DEV_MSG_GET_HEIGHT
:

172 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

174 
U8G_DEV_MSG_SET_COLOR_INDEX
:

176 
U8G_DEV_MSG_SET_XY_CB
:

178 
U8G_DEV_MSG_GET_MODE
:

179  
U8G_MODE_BW
;

182 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_pb8v2.c

40 
	~"u8g.h
"

41 
	~<°rög.h
>

43 
	$u8g_pb8v2_Inô
(
u8g_pb_t
 *
b
, *
buf
, 
u8g_uöt_t
 
width
)

45 
b
->
buf
 = buf;

46 
b
->
width
 = width;

47 
	`u8g_pb_CÀ¨
(
b
);

48 
	}
}

50 
	$u8g_pb8v2_£t_pixñ
(
u8g_pb_t
 *
b
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, 
uöt8_t
 
cﬁ‹_ödex
)

52 
uöt8_t
 
mask
;

53 
uöt8_t
 *
±r
 = 
b
->
buf
;

54 
y
 -
b
->
p
.
∑ge_y0
;

55 
mask
 = 0x03;

56 
y
 &= 0x03;

57 
y
 <<= 1;

58 
mask
 <<
y
;

59 
mask
 ^=0xff;

60 
cﬁ‹_ödex
 &= 3;

61 
cﬁ‹_ödex
 <<
y
;

62 
±r
 +
x
;

63 *
±r
 &
mask
;

64 *
±r
 |
cﬁ‹_ödex
;

65 
	}
}

68 
	$u8g_pb8v2_SëPixñ
(
u8g_pb_t
 *
b
, c⁄° 
u8g_dev_¨g_pixñ_t
 * c⁄° 
¨g_pixñ
)

70 i‡–
¨g_pixñ
->
y
 < 
b
->
p
.
∑ge_y0
 )

72 i‡–
¨g_pixñ
->
y
 > 
b
->
p
.
∑ge_y1
 )

74 i‡–
¨g_pixñ
->
x
 >
b
->
width
 )

76 
	`u8g_pb8v2_£t_pixñ
(
b
, 
¨g_pixñ
->
x
,árg_pixñ->
y
,árg_pixñ->
cﬁ‹
);

77 
	}
}

80 
	$u8g_pb8v2_Së8PixñStd
(
u8g_pb_t
 *
b
, 
u8g_dev_¨g_pixñ_t
 *
¨g_pixñ
)

82 
uöt8_t
 
pixñ
 = 
¨g_pixñ
->pixel;

85 i‡–
pixñ
 & 128 )

87 
	`u8g_pb8v2_SëPixñ
(
b
, 
¨g_pixñ
);

89  
¨g_pixñ
->
dú
 )

91 0: 
¨g_pixñ
->
x
++; ;

92 1: 
¨g_pixñ
->
y
++; ;

93 2: 
¨g_pixñ
->
x
--; ;

94 3: 
¨g_pixñ
->
y
--; ;

96 
pixñ
 <<= 1;

97 }  
pixñ
 != 0 );

99 
	}
}

103 
uöt8_t
 
	$u8g_dev_pb8v2_ba£_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

105 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

106 
msg
)

108 
U8G_DEV_MSG_SET_8PIXEL
:

109 i‡–
	`u8g_pb_Is8PixñVisibÀ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
) )

111 
	`u8g_pb8v2_Së8PixñStd
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

114 
U8G_DEV_MSG_SET_PIXEL
:

115 
	`u8g_pb8v2_SëPixñ
(
pb
, (
u8g_dev_¨g_pixñ_t
 *)
¨g
);

117 
U8G_DEV_MSG_INIT
:

119 
U8G_DEV_MSG_STOP
:

121 
U8G_DEV_MSG_PAGE_FIRST
:

122 
	`u8g_pb_CÀ¨
(
pb
);

123 
	`u8g_∑ge_Fú°
(&(
pb
->
p
));

125 
U8G_DEV_MSG_PAGE_NEXT
:

126 i‡–
	`u8g_∑ge_Next
(&(
pb
->
p
)) == 0 )

128 
	`u8g_pb_CÀ¨
(
pb
);

130 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


131 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

132  
	`u8g_pb_IsI¡î£˘i⁄
(
pb
, (
u8g_dev_¨g_bbx_t
 *)
¨g
);

134 
U8G_DEV_MSG_GET_PAGE_BOX
:

135 
	`u8g_pb_GëPageBox
(
pb
, (
u8g_box_t
 *)
¨g
);

137 
U8G_DEV_MSG_GET_WIDTH
:

138 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
width
;

140 
U8G_DEV_MSG_GET_HEIGHT
:

141 *((
u8g_uöt_t
 *)
¨g
Ë
pb
->
p
.
tŸÆ_height
;

143 
U8G_DEV_MSG_SET_COLOR_INDEX
:

145 
U8G_DEV_MSG_SET_XY_CB
:

147 
U8G_DEV_MSG_GET_MODE
:

148  
U8G_MODE_GRAY2BIT
;

151 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_rect.c

39 
	~"u8g.h
"

41 
	$u8g_døw_hlöe
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
)

43 
uöt8_t
 
pixñ
 = 0x0ff;

44  
w
 >= 8 )

46 
	`u8g_Døw8Pixñ
(
u8g
, 
x
, 
y
, 0, 
pixñ
);

47 
w
-=8;

48 
x
+=8;

50 i‡–
w
 != 0 )

52 
w
 ^=7;

53 
w
++;

54 
pixñ
 <<
w
&7;

55 
	`u8g_Døw8Pixñ
(
u8g
, 
x
, 
y
, 0, 
pixñ
);

57 
	}
}

59 
	$u8g_døw_vlöe
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
h
)

61 
uöt8_t
 
pixñ
 = 0x0ff;

62  
h
 >= 8 )

64 
	`u8g_Døw8Pixñ
(
u8g
, 
x
, 
y
, 1, 
pixñ
);

65 
h
-=8;

66 
y
+=8;

68 i‡–
h
 != 0 )

70 
h
 ^=7;

71 
h
++;

72 
pixñ
 <<
h
&7;

73 
	`u8g_Døw8Pixñ
(
u8g
, 
x
, 
y
, 1, 
pixñ
);

75 
	}
}

77 
	$u8g_DøwHLöe
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
)

79 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
w
, 1) == 0 )

81 
	`u8g_døw_hlöe
(
u8g
, 
x
, 
y
, 
w
);

82 
	}
}

84 
	$u8g_DøwVLöe
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
)

86 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 1, 
w
) == 0 )

88 
	`u8g_døw_vlöe
(
u8g
, 
x
, 
y
, 
w
);

89 
	}
}

92 
	$u8g_DøwFøme
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
)

94 
u8g_uöt_t
 
xtmp
 = 
x
;

96 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
w
, 
h
) == 0 )

100 
	`u8g_døw_hlöe
(
u8g
, 
x
, 
y
, 
w
);

101 
	`u8g_døw_vlöe
(
u8g
, 
x
, 
y
, 
h
);

102 
x
+=
w
;

103 
x
--;

104 
	`u8g_døw_vlöe
(
u8g
, 
x
, 
y
, 
h
);

105 
y
+=
h
;

106 
y
--;

107 
	`u8g_døw_hlöe
(
u8g
, 
xtmp
, 
y
, 
w
);

108 
	}
}

110 
	$u8g_døw_box
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
)

114 
	`u8g_døw_hlöe
(
u8g
, 
x
, 
y
, 
w
);

115 
y
++;

116 
h
--;

117 }  
h
 != 0 );

118 
	}
}

121 
	$u8g_DøwBox
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
)

123 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
w
, 
h
) == 0 )

125 
	`u8g_døw_box
(
u8g
, 
x
, 
y
, 
w
, 
h
);

126 
	}
}

129 
	$u8g_DøwRFøme
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, u8g_uöt_à
r
)

131 
u8g_uöt_t
 
xl
, 
yu
;

133 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
w
, 
h
) == 0 )

136 
xl
 = 
x
;

137 
xl
 +
r
;

138 
yu
 = 
y
;

139 
yu
 +
r
;

142 
u8g_uöt_t
 
yl
, 
xr
;

144 
xr
 = 
x
;

145 
xr
 +
w
;

146 
xr
 -
r
;

147 
xr
 -= 1;

149 
yl
 = 
y
;

150 
yl
 +
h
;

151 
yl
 -
r
;

152 
yl
 -= 1;

154 
	`u8g_døw_cú˛e
(
u8g
, 
xl
, 
yu
, 
r
, 
U8G_DRAW_UPPER_LEFT
);

155 
	`u8g_døw_cú˛e
(
u8g
, 
xr
, 
yu
, 
r
, 
U8G_DRAW_UPPER_RIGHT
);

156 
	`u8g_døw_cú˛e
(
u8g
, 
xl
, 
yl
, 
r
, 
U8G_DRAW_LOWER_LEFT
);

157 
	`u8g_døw_cú˛e
(
u8g
, 
xr
, 
yl
, 
r
, 
U8G_DRAW_LOWER_RIGHT
);

161 
u8g_uöt_t
 
ww
, 
hh
;

163 
ww
 = 
w
;

164 
ww
 -
r
;

165 
ww
 -
r
;

166 
ww
 -= 2;

167 
hh
 = 
h
;

168 
hh
 -
r
;

169 
hh
 -
r
;

170 
hh
 -= 2;

172 
xl
++;

173 
yu
++;

174 
h
--;

175 
w
--;

176 
	`u8g_døw_hlöe
(
u8g
, 
xl
, 
y
, 
ww
);

177 
	`u8g_døw_hlöe
(
u8g
, 
xl
, 
y
+
h
, 
ww
);

178 
	`u8g_døw_vlöe
(
u8g
, 
x
, 
yu
, 
hh
);

179 
	`u8g_døw_vlöe
(
u8g
, 
x
+
w
, 
yu
, 
hh
);

181 
	}
}

183 
	$u8g_DøwRBox
(
u8g_t
 *
u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_uöt_à
w
, u8g_uöt_à
h
, u8g_uöt_à
r
)

185 
u8g_uöt_t
 
xl
, 
yu
;

186 
u8g_uöt_t
 
yl
, 
xr
;

188 i‡–
	`u8g_IsBBXI¡î£˘i⁄
(
u8g
, 
x
, 
y
, 
w
, 
h
) == 0 )

191 
xl
 = 
x
;

192 
xl
 +
r
;

193 
yu
 = 
y
;

194 
yu
 +
r
;

196 
xr
 = 
x
;

197 
xr
 +
w
;

198 
xr
 -
r
;

199 
xr
 -= 1;

201 
yl
 = 
y
;

202 
yl
 +
h
;

203 
yl
 -
r
;

204 
yl
 -= 1;

206 
	`u8g_døw_disc
(
u8g
, 
xl
, 
yu
, 
r
, 
U8G_DRAW_UPPER_LEFT
);

207 
	`u8g_døw_disc
(
u8g
, 
xr
, 
yu
, 
r
, 
U8G_DRAW_UPPER_RIGHT
);

208 
	`u8g_døw_disc
(
u8g
, 
xl
, 
yl
, 
r
, 
U8G_DRAW_LOWER_LEFT
);

209 
	`u8g_døw_disc
(
u8g
, 
xr
, 
yl
, 
r
, 
U8G_DRAW_LOWER_RIGHT
);

212 
u8g_uöt_t
 
ww
, 
hh
;

214 
ww
 = 
w
;

215 
ww
 -
r
;

216 
ww
 -
r
;

217 
ww
 -= 2;

218 
hh
 = 
h
;

219 
hh
 -
r
;

220 
hh
 -
r
;

221 
hh
 -= 2;

223 
xl
++;

224 
yu
++;

225 
h
--;

226 
	`u8g_døw_box
(
u8g
, 
xl
, 
y
, 
ww
, 
r
+1);

227 
	`u8g_døw_box
(
u8g
, 
xl
, 
yl
, 
ww
, 
r
+1);

229 
	`u8g_døw_box
(
u8g
, 
x
, 
yu
, 
w
, 
hh
);

232 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_rot.c

37 
	~"u8g.h
"

39 
uöt8_t
 
u8g_dev_rŸ90_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

40 
uöt8_t
 
u8g_dev_rŸ180_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

41 
uöt8_t
 
u8g_dev_rŸ270_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

43 
u8g_dev_t
 
	gu8g_dev_rŸ
 = { 
u8g_dev_rŸ90_‚
, 
NULL
, NULL };

46 
	$u8g_UndoRŸ©i⁄
(
u8g_t
 *
u8g
)

48 i‡–
u8g
->
dev
 !&
u8g_dev_rŸ
 )

50 
u8g
->
dev
 = 
u8g_dev_rŸ
.
dev_mem
;

51 
	`u8g_Upd©eDimísi⁄
(
u8g
);

52 
	}
}

54 
	$u8g_SëRŸ90
(
u8g_t
 *
u8g
)

56 i‡–
u8g
->
dev
 !&
u8g_dev_rŸ
 )

58 
u8g_dev_rŸ
.
dev_mem
 = 
u8g
->
dev
;

59 
u8g
->
dev
 = &
u8g_dev_rŸ
;

61 
u8g_dev_rŸ
.
dev_‚
 = 
u8g_dev_rŸ90_‚
;

62 
	`u8g_Upd©eDimísi⁄
(
u8g
);

63 
	}
}

65 
	$u8g_SëRŸ180
(
u8g_t
 *
u8g
)

67 i‡–
u8g
->
dev
 !&
u8g_dev_rŸ
 )

69 
u8g_dev_rŸ
.
dev_mem
 = 
u8g
->
dev
;

70 
u8g
->
dev
 = &
u8g_dev_rŸ
;

72 
u8g_dev_rŸ
.
dev_‚
 = 
u8g_dev_rŸ180_‚
;

73 
	`u8g_Upd©eDimísi⁄
(
u8g
);

74 
	}
}

76 
	$u8g_SëRŸ270
(
u8g_t
 *
u8g
)

78 i‡–
u8g
->
dev
 !&
u8g_dev_rŸ
 )

80 
u8g_dev_rŸ
.
dev_mem
 = 
u8g
->
dev
;

81 
u8g
->
dev
 = &
u8g_dev_rŸ
;

83 
u8g_dev_rŸ
.
dev_‚
 = 
u8g_dev_rŸ270_‚
;

84 
	`u8g_Upd©eDimísi⁄
(
u8g
);

85 
	}
}

87 
uöt8_t
 
	$u8g_dev_rŸ90_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

89 
u8g_dev_t
 *
rŸ©i⁄_chaö
 = (u8g_dev_à*)(
dev
->
dev_mem
);

90 
msg
)

101  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

102 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


103 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

105 
u8g_dev_¨g_bbx_t
 *
bbx
 = (u8g_dev_¨g_bbx_à*)
¨g
;

106 
u8g_uöt_t
 
x
, 
y
, 
tmp
;

109 
y
 = 
bbx
->
x
;

110 
x
 = 
u8g
->
height
;

112 
x
 -
bbx
->
y
;

113 
x
--;

116 
x
 -
bbx
->
h
;

117 
x
++;

120 
tmp
 = 
bbx
->
w
;

121 
bbx
->
w
 = bbx->
h
;

122 
bbx
->
h
 = 
tmp
;

125 
bbx
->
x
 = x;

126 
bbx
->
y
 = y;

128  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

130 
U8G_DEV_MSG_GET_PAGE_BOX
:

132 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

135 
u8g_box_t
 
√w_box
;

139 
√w_box
.
x0
 = ((
u8g_box_t
 *)
¨g
)->
y0
;

140 
√w_box
.
x1
 = ((
u8g_box_t
 *)
¨g
)->
y1
;

141 
√w_box
.
y0
 = ((
u8g_box_t
 *)
¨g
)->
x0
;

142 
√w_box
.
y1
 = ((
u8g_box_t
 *)
¨g
)->
x1
;

143 *((
u8g_box_t
 *)
¨g
Ë
√w_box
;

147 
U8G_DEV_MSG_GET_WIDTH
:

148 *((
u8g_uöt_t
 *)
¨g
Ë
	`u8g_GëHeightLL
(
u8g
,
rŸ©i⁄_chaö
);

150 
U8G_DEV_MSG_GET_HEIGHT
:

151 *((
u8g_uöt_t
 *)
¨g
Ë
	`u8g_GëWidthLL
(
u8g
, 
rŸ©i⁄_chaö
);

153 
U8G_DEV_MSG_SET_PIXEL
:

155 
u8g_uöt_t
 
x
, 
y
;

156 
y
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
;

157 
x
 = 
	`u8g_GëWidthLL
(
u8g
, 
rŸ©i⁄_chaö
);

158 
x
 -((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
;

159 
x
--;

160 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

161 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

163 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

165 
U8G_DEV_MSG_SET_8PIXEL
:

167 
u8g_uöt_t
 
x
, 
y
;

169 
y
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
;

170 
x
 = 
	`u8g_GëWidthLL
(
u8g
, 
rŸ©i⁄_chaö
);

171 
x
 -((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
;

172 
x
--;

173 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

174 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

175 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
+=1;

176 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
 &= 3;

178 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

182 
	}
}

184 
uöt8_t
 
	$u8g_dev_rŸ180_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

186 
u8g_dev_t
 *
rŸ©i⁄_chaö
 = (u8g_dev_à*)(
dev
->
dev_mem
);

187 
msg
)

198  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

199 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


200 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

202 
u8g_dev_¨g_bbx_t
 *
bbx
 = (u8g_dev_¨g_bbx_à*)
¨g
;

203 
u8g_uöt_t
 
x
, 
y
;

207 
y
 = 
u8g
->
height
;

208 
y
 -
bbx
->y;

209 
y
--;

212 
x
 = 
u8g
->
width
;

213 
x
 -
bbx
->x;

214 
x
--;

217 
y
 -
bbx
->
h
;

218 
y
++;

220 
x
 -
bbx
->
w
;

221 
x
++;

224 
bbx
->
x
 = x;

225 
bbx
->
y
 = y;

227  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

229 
U8G_DEV_MSG_GET_PAGE_BOX
:

231 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

234 
u8g_box_t
 
√w_box
;

236 
√w_box
.
x0
 = 
	`u8g_GëWidthLL
(
u8g
,
rŸ©i⁄_chaö
Ë- ((
u8g_box_t
 *)
¨g
)->
x1
 - 1;

237 
√w_box
.
x1
 = 
	`u8g_GëWidthLL
(
u8g
,
rŸ©i⁄_chaö
Ë- ((
u8g_box_t
 *)
¨g
)->
x0
 - 1;

238 
√w_box
.
y0
 = 
	`u8g_GëHeightLL
(
u8g
,
rŸ©i⁄_chaö
Ë- ((
u8g_box_t
 *)
¨g
)->
y1
 - 1;

239 
√w_box
.
y1
 = 
	`u8g_GëHeightLL
(
u8g
,
rŸ©i⁄_chaö
Ë- ((
u8g_box_t
 *)
¨g
)->
y0
 - 1;

240 *((
u8g_box_t
 *)
¨g
Ë
√w_box
;

244 
U8G_DEV_MSG_GET_WIDTH
:

245 *((
u8g_uöt_t
 *)
¨g
Ë
	`u8g_GëWidthLL
(
u8g
,
rŸ©i⁄_chaö
);

247 
U8G_DEV_MSG_GET_HEIGHT
:

248 *((
u8g_uöt_t
 *)
¨g
Ë
	`u8g_GëHeightLL
(
u8g
, 
rŸ©i⁄_chaö
);

250 
U8G_DEV_MSG_SET_PIXEL
:

252 
u8g_uöt_t
 
x
, 
y
;

254 
y
 = 
	`u8g_GëHeightLL
(
u8g
, 
rŸ©i⁄_chaö
);

255 
y
 -((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->y;

256 
y
--;

258 
x
 = 
	`u8g_GëWidthLL
(
u8g
, 
rŸ©i⁄_chaö
);

259 
x
 -((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->x;

260 
x
--;

262 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

263 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

265 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

267 
U8G_DEV_MSG_SET_8PIXEL
:

269 
u8g_uöt_t
 
x
, 
y
;

271 
y
 = 
	`u8g_GëHeightLL
(
u8g
, 
rŸ©i⁄_chaö
);

272 
y
 -((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->y;

273 
y
--;

275 
x
 = 
	`u8g_GëWidthLL
(
u8g
, 
rŸ©i⁄_chaö
);

276 
x
 -((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->x;

277 
x
--;

279 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

280 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

281 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
+=2;

282 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
 &= 3;

284 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

288 
	}
}

290 
uöt8_t
 
	$u8g_dev_rŸ270_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

292 
u8g_dev_t
 *
rŸ©i⁄_chaö
 = (u8g_dev_à*)(
dev
->
dev_mem
);

293 
msg
)

304  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

305 #ifde‡
U8G_DEV_MSG_IS_BBX_INTERSECTION


306 
U8G_DEV_MSG_IS_BBX_INTERSECTION
:

308 
u8g_dev_¨g_bbx_t
 *
bbx
 = (u8g_dev_¨g_bbx_à*)
¨g
;

309 
u8g_uöt_t
 
x
, 
y
, 
tmp
;

312 
x
 = 
bbx
->
y
;

314 
y
 = 
u8g
->
width
;

316 
y
 -
bbx
->
x
;

317 
y
--;

320 
y
 -
bbx
->
w
;

321 
y
++;

324 
tmp
 = 
bbx
->
w
;

325 
bbx
->
w
 = bbx->
h
;

326 
bbx
->
h
 = 
tmp
;

329 
bbx
->
x
 = x;

330 
bbx
->
y
 = y;

332  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

334 
U8G_DEV_MSG_GET_PAGE_BOX
:

336 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

339 
u8g_box_t
 
√w_box
;

341 
√w_box
.
x0
 = 
	`u8g_GëHeightLL
(
u8g
,
rŸ©i⁄_chaö
Ë- ((
u8g_box_t
 *)
¨g
)->
y1
 - 1;

342 
√w_box
.
x1
 = 
	`u8g_GëHeightLL
(
u8g
,
rŸ©i⁄_chaö
Ë- ((
u8g_box_t
 *)
¨g
)->
y0
 - 1;

343 
√w_box
.
y0
 = 
	`u8g_GëWidthLL
(
u8g
,
rŸ©i⁄_chaö
Ë- ((
u8g_box_t
 *)
¨g
)->
x1
 - 1;

344 
√w_box
.
y1
 = 
	`u8g_GëWidthLL
(
u8g
,
rŸ©i⁄_chaö
Ë- ((
u8g_box_t
 *)
¨g
)->
x0
 - 1;

345 *((
u8g_box_t
 *)
¨g
Ë
√w_box
;

349 
U8G_DEV_MSG_GET_WIDTH
:

350 *((
u8g_uöt_t
 *)
¨g
Ë
	`u8g_GëHeightLL
(
u8g
,
rŸ©i⁄_chaö
);

352 
U8G_DEV_MSG_GET_HEIGHT
:

353 *((
u8g_uöt_t
 *)
¨g
Ë
	`u8g_GëWidthLL
(
u8g
, 
rŸ©i⁄_chaö
);

355 
U8G_DEV_MSG_SET_PIXEL
:

357 
u8g_uöt_t
 
x
, 
y
;

358 
x
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
;

360 
y
 = 
	`u8g_GëHeightLL
(
u8g
, 
rŸ©i⁄_chaö
);

361 
y
 -((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
;

362 
y
--;

369 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

370 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

372 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

374 
U8G_DEV_MSG_SET_8PIXEL
:

376 
u8g_uöt_t
 
x
, 
y
;

377 
x
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
;

379 
y
 = 
	`u8g_GëHeightLL
(
u8g
, 
rŸ©i⁄_chaö
);

380 
y
 -((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
;

381 
y
--;

388 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

389 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

390 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
+=3;

391 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
 &= 3;

393 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
rŸ©i⁄_chaö
, 
msg
, 
¨g
);

397 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_scale.c

39 
	~"u8g.h
"

41 
uöt8_t
 
u8g_dev_sˇÀ_2x2_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, uöt8_à
msg
, *
¨g
);

44 
u8g_dev_t
 
	gu8g_dev_sˇÀ
 = { 
u8g_dev_sˇÀ_2x2_‚
, 
NULL
, NULL };

46 
	$u8g_UndoSˇÀ
(
u8g_t
 *
u8g
)

48 i‡–
u8g
->
dev
 !&
u8g_dev_sˇÀ
 )

50 
u8g
->
dev
 = 
u8g_dev_sˇÀ
.
dev_mem
;

51 
	`u8g_Upd©eDimísi⁄
(
u8g
);

52 
	}
}

54 
	$u8g_SëSˇÀ2x2
(
u8g_t
 *
u8g
)

56 i‡–
u8g
->
dev
 !&
u8g_dev_sˇÀ
 )

58 
u8g_dev_sˇÀ
.
dev_mem
 = 
u8g
->
dev
;

59 
u8g
->
dev
 = &
u8g_dev_sˇÀ
;

61 
u8g_dev_sˇÀ
.
dev_‚
 = 
u8g_dev_sˇÀ_2x2_‚
;

62 
	`u8g_Upd©eDimísi⁄
(
u8g
);

63 
	}
}

66 
uöt8_t
 
	$u8g_dev_sˇÀ_2x2_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

68 
u8g_dev_t
 *
chaö
 = (u8g_dev_à*)(
dev
->
dev_mem
);

69 
uöt8_t
 
pixñ
;

70 
uöt16_t
 
sˇÀd_pixñ
;

71 
uöt8_t
 
i
;

72 
uöt8_t
 
dú
;

73 
u8g_uöt_t
 
x
, 
y
, 
xx
,
yy
;

75 
msg
)

78  
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

79 
U8G_DEV_MSG_GET_WIDTH
:

80 *((
u8g_uöt_t
 *)
¨g
Ë
	`u8g_GëWidthLL
(
u8g
, 
chaö
) / 2;

82 
U8G_DEV_MSG_GET_HEIGHT
:

83 *((
u8g_uöt_t
 *)
¨g
Ë
	`u8g_GëHeightLL
(
u8g
, 
chaö
) / 2;

85 
U8G_DEV_MSG_GET_PAGE_BOX
:

87 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

88 ((
u8g_box_t
 *)
¨g
)->
x0
 /= 2;

89 ((
u8g_box_t
 *)
¨g
)->
x1
 /= 2;

90 ((
u8g_box_t
 *)
¨g
)->
y0
 /= 2;

91 ((
u8g_box_t
 *)
¨g
)->
y1
 /= 2;

93 
U8G_DEV_MSG_SET_PIXEL
:

94 
x
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->x;

95 
x
 *= 2;

96 
y
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->y;

97 
y
 *= 2;

98 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

99 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

100 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

101 
x
++;

102 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

103 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

104 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

105 
y
++;

106 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

107 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

108 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

109 
x
--;

110 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

111 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

112 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

114 
U8G_DEV_MSG_SET_8PIXEL
:

115 
pixñ
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->pixel;

116 
dú
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->dir;

117 
sˇÀd_pixñ
 = 0;

118  
i
 = 0; i < 8; i++ )

120 
sˇÀd_pixñ
<<=2;

121 i‡–
pixñ
 & 128 )

123 
sˇÀd_pixñ
 |= 3;

125 
pixñ
<<=1;

127 
x
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->x;

128 
x
 *= 2;

129 
xx
 = 
x
;

130 
y
 = ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->y;

131 
y
 *= 2;

132 
yy
 = 
y
;

133 i‡–((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
 & 1 )

135 
xx
++;

139 
yy
++;

142 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
pixñ
 = 
sˇÀd_pixñ
>>8;

143 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

144 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

145 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
 = dir;

146 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

149 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = 
xx
;

150 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = 
yy
;

151 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
 = dir;

152 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

154 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
pixñ
 = 
sˇÀd_pixñ
&255;

156 
dú
)

159 
x
+=8;

160 
xx
+=8;

163 
y
+=8;

164 
yy
+=8;

167 
x
-=8;

168 
xx
-=8;

171 
y
-=8;

172 
yy
-=8;

175 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = x;

176 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = y;

177 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
 = dir;

178 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

180 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 = 
xx
;

181 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 = 
yy
;

182 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
dú
 = dir;

183 
	`u8g_ˇŒ_dev_‚
(
u8g
, 
chaö
, 
msg
, 
¨g
);

187 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_state.c

49 
	~<°ddef.h
>

50 
	~"u8g.h
"

52 
	$u8g_°©e_dummy_cb
(
uöt8_t
 
msg
)

55 
	}
}

57 
	$u8g_SëH¨dw¨eBackup
(
u8g_t
 *
u8g
, 
u8g_°©e_cb
 
backup_cb
)

59 
u8g
->
°©e_cb
 = 
backup_cb
;

62 
	`backup_cb
(
U8G_STATE_MSG_BACKUP_U8G
);

63 
	}
}

69 #i‡
deföed
(
__AVR__
)

70 
	#U8G_ATMEGA_HW_SPI


	)

73 #i‡
__AVR_ARCH__
 == 2

74 #unde‡
U8G_ATMEGA_HW_SPI


76 #i‡
__AVR_ARCH__
 == 25

77 #unde‡
U8G_ATMEGA_HW_SPI


81 #i‡
deföed
(
U8G_ATMEGA_HW_SPI
)

82 
	~<avr/öãºu±.h
>

83 
uöt8_t
 
	gu8g_°©e_avr_•i_mem‹y
[2];

85 
	$u8g_backup_avr_•i
(
uöt8_t
 
msg
)

87 i‡–
	`U8G_STATE_MSG_IS_BACKUP
(
msg
) )

89 
u8g_°©e_avr_•i_mem‹y
[
	`U8G_STATE_MSG_GET_IDX
(
msg
)] = 
SPCR
;

93 
uöt8_t
 
tmp
 = 
SREG
;

94 
	`˛i
();

95 
SPCR
 = 0;

96 
SPCR
 = 
u8g_°©e_avr_•i_mem‹y
[
	`U8G_STATE_MSG_GET_IDX
(
msg
)];

97 
SREG
 = 
tmp
;

99 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_u16toa.c

38 
	~"u8g.h
"

40 c⁄° *
	$u8g_u16tﬂp
(* 
de°
, 
uöt16_t
 
v
)

42 
uöt8_t
 
pos
;

43 
uöt8_t
 
d
;

44 
uöt16_t
 
c
;

45 
c
 = 10000;

46  
pos
 = 0;Öos < 5;Öos++ )

48 
d
 = '0';

49  
v
 >
c
 )

51 
v
 -
c
;

52 
d
++;

54 
de°
[
pos
] = 
d
;

55 
c
 /= 10;

57 
de°
[5] = '\0';

58  
de°
;

59 
	}
}

62 c⁄° *
	$u8g_u16tﬂ
(
uöt16_t
 
v
, 
uöt8_t
 
d
)

64 
buf
[6];

65 
d
 = 5-d;

66  
	`u8g_u16tﬂp
(
buf
, 
v
Ë+ 
d
;

67 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_u8toa.c

38 
	~"u8g.h
"

40 c⁄° 
	gu8g_u8tﬂ_èb
[3] = { 100, 10, 1 } ;

41 c⁄° *
	$u8g_u8tﬂp
(* 
de°
, 
uöt8_t
 
v
)

43 
uöt8_t
 
pos
;

44 
uöt8_t
 
d
;

45 
uöt8_t
 
c
;

46  
pos
 = 0;Öos < 3;Öos++ )

48 
d
 = '0';

49 
c
 = *(
u8g_u8tﬂ_èb
+
pos
);

50  
v
 >
c
 )

52 
v
 -
c
;

53 
d
++;

55 
de°
[
pos
] = 
d
;

57 
de°
[3] = '\0';

58  
de°
;

59 
	}
}

62 c⁄° *
	$u8g_u8tﬂ
(
uöt8_t
 
v
, uöt8_à
d
)

64 
buf
[4];

65 
d
 = 3-d;

66  
	`u8g_u8tﬂp
(
buf
, 
v
Ë+ 
d
;

67 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_virtual_screen.c

37 
	~"u8g.h
"

39 
	s_u8g_vs_t


41 
u8g_uöt_t
 
	mx
;

42 
u8g_uöt_t
 
	my
;

43 
u8g_t
 *
	mu8g
;

45 
_u8g_vs_t
 
	tu8g_vs_t
;

47 
	#U8g_VS_MAX
 4

	)

48 
uöt8_t
 
	gu8g_vs_˙t
 = 0;

49 
u8g_vs_t
 
	gu8g_vs_li°
[
U8g_VS_MAX
];

50 
uöt8_t
 
	gu8g_vs_cuºít
;

51 
u8g_uöt_t
 
	gu8g_vs_width
;

52 
u8g_uöt_t
 
	gu8g_vs_height
;

54 
uöt8_t
 
	$u8g_dev_vs_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

56 
msg
)

60 
uöt8_t
 
i
;

61  
i
 = 0; i < 
u8g_vs_˙t
; i++ )

63 
	`u8g_ˇŒ_dev_‚
(
u8g_vs_li°
[
i
].
u8g
, u8g_vs_li°[i].u8g->
dev
, 
msg
, 
¨g
);

67 
U8G_DEV_MSG_PAGE_FIRST
:

68 
u8g_vs_cuºít
 = 0;

69 i‡–
u8g_vs_˙t
 != 0 )

70  
	`u8g_ˇŒ_dev_‚
(
u8g_vs_li°
[
u8g_vs_cuºít
].
u8g
, u8g_vs_li°[u8g_vs_cuºít].u8g->
dev
, 
msg
, 
¨g
);

72 
U8G_DEV_MSG_PAGE_NEXT
:

74 
uöt8_t
 
ªt
 = 0;

75 i‡–
u8g_vs_˙t
 != 0 )

76 
ªt
 = 
	`u8g_ˇŒ_dev_‚
(
u8g_vs_li°
[
u8g_vs_cuºít
].
u8g
, u8g_vs_li°[u8g_vs_cuºít].u8g->
dev
, 
msg
, 
¨g
);

77 i‡–
ªt
 != 0 )

78  
ªt
;

79 
u8g_vs_cuºít
++;

80 i‡–
u8g_vs_cuºít
 >
u8g_vs_˙t
 )

82  
	`u8g_ˇŒ_dev_‚
(
u8g_vs_li°
[
u8g_vs_cuºít
].
u8g
, u8g_vs_li°[u8g_vs_cuºít].u8g->
dev
, 
U8G_DEV_MSG_PAGE_FIRST
, 
¨g
);

85 
U8G_DEV_MSG_GET_WIDTH
:

86 *((
u8g_uöt_t
 *)
¨g
Ë
u8g_vs_width
;

88 
U8G_DEV_MSG_GET_HEIGHT
:

89 *((
u8g_uöt_t
 *)
¨g
Ë
u8g_vs_height
;

91 
U8G_DEV_MSG_GET_PAGE_BOX
:

92 i‡–
u8g_vs_cuºít
 < 
u8g_vs_˙t
 )

94 
	`u8g_ˇŒ_dev_‚
(
u8g_vs_li°
[
u8g_vs_cuºít
].
u8g
, u8g_vs_li°[u8g_vs_cuºít].u8g->
dev
, 
msg
, 
¨g
);

95 ((
u8g_box_t
 *)
¨g
)->
x0
 +
u8g_vs_li°
[
u8g_vs_cuºít
].
x
;

96 ((
u8g_box_t
 *)
¨g
)->
x1
 +
u8g_vs_li°
[
u8g_vs_cuºít
].
x
;

97 ((
u8g_box_t
 *)
¨g
)->
y0
 +
u8g_vs_li°
[
u8g_vs_cuºít
].
y
;

98 ((
u8g_box_t
 *)
¨g
)->
y1
 +
u8g_vs_li°
[
u8g_vs_cuºít
].
y
;

102 ((
u8g_box_t
 *)
¨g
)->
x0
 = 0;

103 ((
u8g_box_t
 *)
¨g
)->
x1
 = 0;

104 ((
u8g_box_t
 *)
¨g
)->
y0
 = 0;

105 ((
u8g_box_t
 *)
¨g
)->
y1
 = 0;

108 
U8G_DEV_MSG_SET_PIXEL
:

109 
U8G_DEV_MSG_SET_8PIXEL
:

110 i‡–
u8g_vs_cuºít
 < 
u8g_vs_˙t
 )

112 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
x
 -
u8g_vs_li°
[
u8g_vs_cuºít
].x;

113 ((
u8g_dev_¨g_pixñ_t
 *)
¨g
)->
y
 -
u8g_vs_li°
[
u8g_vs_cuºít
].y;

114  
	`u8g_ˇŒ_dev_‚
(
u8g_vs_li°
[
u8g_vs_cuºít
].
u8g
, u8g_vs_li°[u8g_vs_cuºít].u8g->
dev
, 
msg
, 
¨g
);

119 
	}
}

123 
u8g_dev_t
 
	gu8g_dev_vs
 = { 
u8g_dev_vs_‚
, 
NULL
, NULL };

125 
	$u8g_SëVútuÆS¸ìnDimísi⁄
(
u8g_t
 *
vs_u8g
, 
u8g_uöt_t
 
width
, u8g_uöt_à
height
)

127 i‡–
vs_u8g
->
dev
 !&
u8g_dev_vs
 )

129 
u8g_vs_width
 = 
width
;

130 
u8g_vs_height
 = 
height
;

131 
	}
}

133 
uöt8_t
 
	$u8g_AddToVútuÆS¸ìn
(
u8g_t
 *
vs_u8g
, 
u8g_uöt_t
 
x
, u8g_uöt_à
y
, u8g_à*
chûd_u8g
)

135 i‡–
vs_u8g
->
dev
 !&
u8g_dev_vs
 )

137 i‡–
u8g_vs_˙t
 >
U8g_VS_MAX
 )

139 
u8g_vs_li°
[
u8g_vs_˙t
].
u8g
 = 
chûd_u8g
;

140 
u8g_vs_li°
[
u8g_vs_˙t
].
x
 = x;

141 
u8g_vs_li°
[
u8g_vs_˙t
].
y
 = y;

142 
u8g_vs_˙t
++;

144 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/variants/rambo/pins_arduino.h

25 #i‚de‡
Pös_Arduöo_h


26 
	#Pös_Arduöo_h


	)

28 
	~<avr/pgm•a˚.h
>

30 
	#NUM_DIGITAL_PINS
 82

	)

31 
	#NUM_ANALOG_INPUTS
 16

	)

32 
	#™ÆogI≈utToDigôÆPö
(
p
Ë(’ < 16Ë? (pË+ 54 : -1)

	)

33 
	#digôÆPöHasPWM
(
p
Ë((’Ë>2 && (pË<13Ë|| (’Ë>44 && (p)<46))

	)

35 c⁄° 
uöt8_t
 
	gSS
 = 53;

36 c⁄° 
uöt8_t
 
	gMOSI
 = 51;

37 c⁄° 
uöt8_t
 
	gMISO
 = 50;

38 c⁄° 
uöt8_t
 
	gSCK
 = 52;

40 c⁄° 
uöt8_t
 
	gSDA
 = 20;

41 c⁄° 
uöt8_t
 
	gSCL
 = 21;

42 c⁄° 
uöt8_t
 
	gLED_BUILTIN
 = 13;

44 c⁄° 
uöt8_t
 
	gA0
 = 54;

45 c⁄° 
uöt8_t
 
	gA1
 = 55;

46 c⁄° 
uöt8_t
 
	gA2
 = 56;

47 c⁄° 
uöt8_t
 
	gA3
 = 57;

48 c⁄° 
uöt8_t
 
	gA4
 = 58;

49 c⁄° 
uöt8_t
 
	gA5
 = 59;

50 c⁄° 
uöt8_t
 
	gA6
 = 60;

51 c⁄° 
uöt8_t
 
	gA7
 = 61;

52 c⁄° 
uöt8_t
 
	gA8
 = 62;

53 c⁄° 
uöt8_t
 
	gA9
 = 63;

54 c⁄° 
uöt8_t
 
	gA10
 = 64;

55 c⁄° 
uöt8_t
 
	gA11
 = 65;

56 c⁄° 
uöt8_t
 
	gA12
 = 66;

57 c⁄° 
uöt8_t
 
	gA13
 = 67;

58 c⁄° 
uöt8_t
 
	gA14
 = 68;

59 c⁄° 
uöt8_t
 
	gA15
 = 69;

66 
	#digôÆPöToPCICR
(
p
) ( (((p) >= 10) && ((p) <= 13)) || \

67 (((
p
) >= 50) && ((p) <= 53)) || \

68 (((
p
Ë>62Ë&& (’Ë<69)Ë? (&
PCICR
Ë: ((
uöt8_t
 *)0Ë)

	)

70 
	#digôÆPöToPCICRbô
(
p
) ( (((p) >= 10) && ((p) <= 13)) || (((p) >= 50) && ((p) <= 53)) ? 0 : \

71 –(((
p
) >= 62) && ((p) <= 69)) ? 2 : \

72 0 ) )

	)

74 
	#digôÆPöToPCMSK
(
p
Ë–((’Ë>10Ë&& (’Ë<13)Ë|| ((’Ë>50Ë&& (’Ë<53)Ë? (&
PCMSK0
) : \

75 –(((
p
Ë>62Ë&& (’Ë<69)Ë? (&
PCMSK2
) : \

76 ((
uöt8_t
 *)0ËË)

	)

78 
	#digôÆPöToPCMSKbô
(
p
) ( (((p) >= 10) && ((p) <= 13)) ? ((p) - 6) : \

79 –((
p
) == 50) ? 3 : \

80 –((
p
) == 51) ? 2 : \

81 –((
p
) == 52) ? 1 : \

82 –((
p
) == 53) ? 0 : \

83 –(((
p
) >= 62) && ((p) <= 69)) ? ((p) - 62) : \

84 0 ) ) ) ) ) )

	)

86 #ifde‡
ARDUINO_MAIN


88 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_mode_PGM
[] = {

89 
NOT_A_PORT
,

90 (
uöt16_t
Ë&
DDRA
,

91 (
uöt16_t
Ë&
DDRB
,

92 (
uöt16_t
Ë&
DDRC
,

93 (
uöt16_t
Ë&
DDRD
,

94 (
uöt16_t
Ë&
DDRE
,

95 (
uöt16_t
Ë&
DDRF
,

96 (
uöt16_t
Ë&
DDRG
,

97 (
uöt16_t
Ë&
DDRH
,

98 
NOT_A_PORT
,

99 (
uöt16_t
Ë&
DDRJ
,

100 (
uöt16_t
Ë&
DDRK
,

101 (
uöt16_t
Ë&
DDRL
,

104 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_ouçut_PGM
[] = {

105 
NOT_A_PORT
,

106 (
uöt16_t
Ë&
PORTA
,

107 (
uöt16_t
Ë&
PORTB
,

108 (
uöt16_t
Ë&
PORTC
,

109 (
uöt16_t
Ë&
PORTD
,

110 (
uöt16_t
Ë&
PORTE
,

111 (
uöt16_t
Ë&
PORTF
,

112 (
uöt16_t
Ë&
PORTG
,

113 (
uöt16_t
Ë&
PORTH
,

114 
NOT_A_PORT
,

115 (
uöt16_t
Ë&
PORTJ
,

116 (
uöt16_t
Ë&
PORTK
,

117 (
uöt16_t
Ë&
PORTL
,

120 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_öput_PGM
[] = {

121 
NOT_A_PIN
,

122 (
uöt16_t
Ë&
PINA
,

123 (
uöt16_t
Ë&
PINB
,

124 (
uöt16_t
Ë&
PINC
,

125 (
uöt16_t
Ë&
PIND
,

126 (
uöt16_t
Ë&
PINE
,

127 (
uöt16_t
Ë&
PINF
,

128 (
uöt16_t
Ë&
PING
,

129 (
uöt16_t
Ë&
PINH
,

130 
NOT_A_PIN
,

131 (
uöt16_t
Ë&
PINJ
,

132 (
uöt16_t
Ë&
PINK
,

133 (
uöt16_t
Ë&
PINL
,

136 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_p‹t_PGM
[] = {

139 
PE
 ,

140 
PE
 ,

141 
PE
 ,

142 
PE
 ,

143 
PG
 ,

144 
PE
 ,

145 
PH
 ,

146 
PH
 ,

147 
PH
 ,

148 
PH
 ,

149 
PB
 ,

150 
PB
 ,

151 
PB
 ,

152 
PB
 ,

153 
PJ
 ,

154 
PJ
 ,

155 
PH
 ,

156 
PH
 ,

157 
PD
 ,

158 
PD
 ,

159 
PD
 ,

160 
PD
 ,

161 
PA
 ,

162 
PA
 ,

163 
PA
 ,

164 
PA
 ,

165 
PA
 ,

166 
PA
 ,

167 
PA
 ,

168 
PA
 ,

169 
PC
 ,

170 
PC
 ,

171 
PC
 ,

172 
PC
 ,

173 
PC
 ,

174 
PC
 ,

175 
PC
 ,

176 
PC
 ,

177 
PD
 ,

178 
PG
 ,

179 
PG
 ,

180 
PG
 ,

181 
PL
 ,

182 
PL
 ,

183 
PL
 ,

184 
PL
 ,

185 
PL
 ,

186 
PL
 ,

187 
PL
 ,

188 
PL
 ,

189 
PB
 ,

190 
PB
 ,

191 
PB
 ,

192 
PB
 ,

193 
PF
 ,

194 
PF
 ,

195 
PF
 ,

196 
PF
 ,

197 
PF
 ,

198 
PF
 ,

199 
PF
 ,

200 
PF
 ,

201 
PK
 ,

202 
PK
 ,

203 
PK
 ,

204 
PK
 ,

205 
PK
 ,

206 
PK
 ,

207 
PK
 ,

208 
PK
 ,

209 
PG
 ,

210 
PG
 ,

211 
PJ
 ,

212 
PJ
 ,

213 
PJ
 ,

214 
PJ
 ,

215 
PJ
 ,

216 
PJ
 ,

217 
PE
 ,

218 
PE
 ,

219 
PE
 ,

220 
PD
 ,

221 
PD
 ,

222 
PD
 ,

223 
PH
 ,

224 
PH
 ,

227 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_bô_mask_PGM
[] = {

230 
_BV
( 0 ) ,

231 
_BV
( 1 ) ,

232 
_BV
( 4 ) ,

233 
_BV
( 5 ) ,

234 
_BV
( 5 ) ,

235 
_BV
( 3 ) ,

236 
_BV
( 3 ) ,

237 
_BV
( 4 ) ,

238 
_BV
( 5 ) ,

239 
_BV
( 6 ) ,

240 
_BV
( 4 ) ,

241 
_BV
( 5 ) ,

242 
_BV
( 6 ) ,

243 
_BV
( 7 ) ,

244 
_BV
( 1 ) ,

245 
_BV
( 0 ) ,

246 
_BV
( 1 ) ,

247 
_BV
( 0 ) ,

248 
_BV
( 3 ) ,

249 
_BV
( 2 ) ,

250 
_BV
( 1 ) ,

251 
_BV
( 0 ) ,

252 
_BV
( 0 ) ,

253 
_BV
( 1 ) ,

254 
_BV
( 2 ) ,

255 
_BV
( 3 ) ,

256 
_BV
( 4 ) ,

257 
_BV
( 5 ) ,

258 
_BV
( 6 ) ,

259 
_BV
( 7 ) ,

260 
_BV
( 7 ) ,

261 
_BV
( 6 ) ,

262 
_BV
( 5 ) ,

263 
_BV
( 4 ) ,

264 
_BV
( 3 ) ,

265 
_BV
( 2 ) ,

266 
_BV
( 1 ) ,

267 
_BV
( 0 ) ,

268 
_BV
( 7 ) ,

269 
_BV
( 2 ) ,

270 
_BV
( 1 ) ,

271 
_BV
( 0 ) ,

272 
_BV
( 7 ) ,

273 
_BV
( 6 ) ,

274 
_BV
( 5 ) ,

275 
_BV
( 4 ) ,

276 
_BV
( 3 ) ,

277 
_BV
( 2 ) ,

278 
_BV
( 1 ) ,

279 
_BV
( 0 ) ,

280 
_BV
( 3 ) ,

281 
_BV
( 2 ) ,

282 
_BV
( 1 ) ,

283 
_BV
( 0 ) ,

284 
_BV
( 0 ) ,

285 
_BV
( 1 ) ,

286 
_BV
( 2 ) ,

287 
_BV
( 3 ) ,

288 
_BV
( 4 ) ,

289 
_BV
( 5 ) ,

290 
_BV
( 6 ) ,

291 
_BV
( 7 ) ,

292 
_BV
( 0 ) ,

293 
_BV
( 1 ) ,

294 
_BV
( 2 ) ,

295 
_BV
( 3 ) ,

296 
_BV
( 4 ) ,

297 
_BV
( 5 ) ,

298 
_BV
( 6 ) ,

299 
_BV
( 7 ) ,

300 
_BV
( 4 ) ,

301 
_BV
( 3 ) ,

302 
_BV
( 2 ) ,

303 
_BV
( 3 ) ,

304 
_BV
( 7 ) ,

305 
_BV
( 4 ) ,

306 
_BV
( 5 ) ,

307 
_BV
( 6 ) ,

308 
_BV
( 2 ) ,

309 
_BV
( 6 ) ,

310 
_BV
( 7 ) ,

311 
_BV
( 4 ) ,

312 
_BV
( 5 ) ,

313 
_BV
( 6 ) ,

314 
_BV
( 2 ) ,

315 
_BV
( 7 ) ,

318 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_timî_PGM
[] = {

321 
NOT_ON_TIMER
 ,

322 
NOT_ON_TIMER
 ,

323 
TIMER3B
 ,

324 
TIMER3C
 ,

325 
TIMER0B
 ,

326 
TIMER3A
 ,

327 
TIMER4A
 ,

328 
TIMER4B
 ,

329 
TIMER4C
 ,

330 
TIMER2B
 ,

331 
TIMER2A
 ,

332 
TIMER1A
 ,

333 
TIMER1B
 ,

334 
TIMER0A
 ,

335 
NOT_ON_TIMER
 ,

336 
NOT_ON_TIMER
 ,

337 
NOT_ON_TIMER
 ,

338 
NOT_ON_TIMER
 ,

339 
NOT_ON_TIMER
 ,

340 
NOT_ON_TIMER
 ,

341 
NOT_ON_TIMER
 ,

342 
NOT_ON_TIMER
 ,

343 
NOT_ON_TIMER
 ,

344 
NOT_ON_TIMER
 ,

345 
NOT_ON_TIMER
 ,

346 
NOT_ON_TIMER
 ,

347 
NOT_ON_TIMER
 ,

348 
NOT_ON_TIMER
 ,

349 
NOT_ON_TIMER
 ,

350 
NOT_ON_TIMER
 ,

351 
NOT_ON_TIMER
 ,

352 
NOT_ON_TIMER
 ,

353 
NOT_ON_TIMER
 ,

354 
NOT_ON_TIMER
 ,

355 
NOT_ON_TIMER
 ,

356 
NOT_ON_TIMER
 ,

357 
NOT_ON_TIMER
 ,

358 
NOT_ON_TIMER
 ,

359 
NOT_ON_TIMER
 ,

360 
NOT_ON_TIMER
 ,

361 
NOT_ON_TIMER
 ,

362 
NOT_ON_TIMER
 ,

363 
NOT_ON_TIMER
 ,

364 
NOT_ON_TIMER
 ,

365 
TIMER5C
 ,

366 
TIMER5B
 ,

367 
TIMER5A
 ,

368 
NOT_ON_TIMER
 ,

369 
NOT_ON_TIMER
 ,

370 
NOT_ON_TIMER
 ,

371 
NOT_ON_TIMER
 ,

372 
NOT_ON_TIMER
 ,

373 
NOT_ON_TIMER
 ,

374 
NOT_ON_TIMER
 ,

375 
NOT_ON_TIMER
 ,

376 
NOT_ON_TIMER
 ,

377 
NOT_ON_TIMER
 ,

378 
NOT_ON_TIMER
 ,

379 
NOT_ON_TIMER
 ,

380 
NOT_ON_TIMER
 ,

381 
NOT_ON_TIMER
 ,

382 
NOT_ON_TIMER
 ,

383 
NOT_ON_TIMER
 ,

384 
NOT_ON_TIMER
 ,

385 
NOT_ON_TIMER
 ,

386 
NOT_ON_TIMER
 ,

387 
NOT_ON_TIMER
 ,

388 
NOT_ON_TIMER
 ,

389 
NOT_ON_TIMER
 ,

390 
NOT_ON_TIMER
 ,

391 
NOT_ON_TIMER
 ,

392 
NOT_ON_TIMER
 ,

393 
NOT_ON_TIMER
 ,

394 
NOT_ON_TIMER
 ,

395 
NOT_ON_TIMER
 ,

396 
NOT_ON_TIMER
 ,

397 
NOT_ON_TIMER
 ,

398 
NOT_ON_TIMER
 ,

399 
NOT_ON_TIMER
 ,

400 
NOT_ON_TIMER
 ,

401 
NOT_ON_TIMER
 ,

402 
NOT_ON_TIMER
 ,

403 
NOT_ON_TIMER
 ,

404 
NOT_ON_TIMER
 ,

405 
NOT_ON_TIMER
 ,

406 
NOT_ON_TIMER
 ,

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/variants/sanguino/pins_arduino.h

30 #i‚de‡
Pös_Arduöo_h


31 
	#Pös_Arduöo_h


	)

33 
	~<avr/pgm•a˚.h
>

35 
	#NOT_A_PIN
 0

	)

36 
	#NOT_A_PORT
 0

	)

38 
	#NOT_ON_TIMER
 0

	)

39 
	#TIMER0A
 1

	)

40 
	#TIMER0B
 2

	)

41 
	#TIMER1A
 3

	)

42 
	#TIMER1B
 4

	)

43 
	#TIMER2
 5

	)

44 
	#TIMER2A
 6

	)

45 
	#TIMER2B
 7

	)

47 
	#TIMER3A
 8

	)

48 
	#TIMER3B
 9

	)

49 
	#TIMER3C
 10

	)

50 
	#TIMER4A
 11

	)

51 
	#TIMER4B
 12

	)

52 
	#TIMER4C
 13

	)

53 
	#TIMER5A
 14

	)

54 
	#TIMER5B
 15

	)

55 
	#TIMER5C
 16

	)

57 c⁄° 
uöt8_t
 
	gSS
 = 4;

58 c⁄° 
uöt8_t
 
	gMOSI
 = 5;

59 c⁄° 
uöt8_t
 
	gMISO
 = 6;

60 c⁄° 
uöt8_t
 
	gSCK
 = 7;

62 c⁄° 
uöt8_t
 
	gSDA
 = 17;

63 c⁄° 
uöt8_t
 
	gSCL
 = 16;

64 c⁄° 
uöt8_t
 
	gLED_BUILTIN
 = 13;

66 c⁄° 
uöt8_t
 
	gA0
 = 31;

67 c⁄° 
uöt8_t
 
	gA1
 = 30;

68 c⁄° 
uöt8_t
 
	gA2
 = 29;

69 c⁄° 
uöt8_t
 
	gA3
 = 28;

70 c⁄° 
uöt8_t
 
	gA4
 = 27;

71 c⁄° 
uöt8_t
 
	gA5
 = 26;

72 c⁄° 
uöt8_t
 
	gA6
 = 25;

73 c⁄° 
uöt8_t
 
	gA7
 = 24;

111 
	#NUM_DIGITAL_PINS
 24

	)

112 
	#NUM_ANALOG_INPUTS
 8

	)

113 
	#™ÆogI≈utToDigôÆPö
(
p
Ë(’ < 7Ë? (pË+ 24 : -1)

	)

115 
	#digôÆPöHasPWM
(
p
Ë(’Ë=3 || (pË=4 || (pË=12 || (pË=13 || (pË=14 || (pË=15 )

	)

117 
	#digôÆPöToPCICR
(
p
Ë–((’Ë>0Ë&& (’Ë<31)Ë? (&
PCICR
Ë: ((
uöt8_t
 *)0Ë)

	)

119 
	#digôÆPöToPCICRbô
(
p
) ( (((p) >= 24) && ((p) <= 31)) ? 0 : \

120 –(((
p
) >= 0) && ((p) <= 7)) ? 1 : \

121 –(((
p
) >= 16) && ((p) <= 23)) ? 2 : \

122 –(((
p
) >= 8) && ((p) <= 15)) ? 3 : \

123 0 ) ) ) )

	)

125 
	#digôÆPöToPCMSK
(
p
Ë–((’Ë>24Ë&& (’Ë<31)Ë? (&
PCMSK0
) : \

126 –(((
p
Ë>0Ë&& (’Ë<7)Ë? (&
PCMSK1
) : \

127 –(((
p
Ë>16Ë&& (’Ë<23)Ë? (&
PCMSK2
) : \

128 –(((
p
Ë>8Ë&& (’Ë<15)Ë? (&
PCMSK3
) : \

129 ((
uöt8_t
 *)0ËËËË)

	)

132 
	#digôÆPöToPCMSKbô
(
p
) ( (((p) >= 24) && ((p) <= 31)) ? (31 - (p)) : \

133 –(((
p
) >= 0) && ((p) <= 7)) ? (p) : \

134 –(((
p
) >= 16) && ((p) <= 23)) ? ((p) - 16) : \

135 –(((
p
) >= 8) && ((p) <= 15)) ? ((p) - 8) : \

136 0 ) ) ) )

	)

138 
	#PA
 1

	)

139 
	#PB
 2

	)

140 
	#PC
 3

	)

141 
	#PD
 4

	)

142 
	#PE
 5

	)

143 
	#PF
 6

	)

144 
	#PG
 7

	)

145 
	#PH
 8

	)

146 
	#PJ
 10

	)

147 
	#PK
 11

	)

148 
	#PL
 12

	)

150 #ifde‡
ARDUINO_MAIN


154 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_mode_PGM
[] =

156 
NOT_A_PORT
,

157 (
uöt16_t
Ë&
DDRA
,

158 (
uöt16_t
Ë&
DDRB
,

159 (
uöt16_t
Ë&
DDRC
,

160 (
uöt16_t
Ë&
DDRD
,

163 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_ouçut_PGM
[] =

165 
NOT_A_PORT
,

166 (
uöt16_t
Ë&
PORTA
,

167 (
uöt16_t
Ë&
PORTB
,

168 (
uöt16_t
Ë&
PORTC
,

169 (
uöt16_t
Ë&
PORTD
,

171 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_öput_PGM
[] =

173 
NOT_A_PORT
,

174 (
uöt16_t
Ë&
PINA
,

175 (
uöt16_t
Ë&
PINB
,

176 (
uöt16_t
Ë&
PINC
,

177 (
uöt16_t
Ë&
PIND
,

179 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_p‹t_PGM
[] =

181 
PB
,

182 
PB
,

183 
PB
,

184 
PB
,

185 
PB
,

186 
PB
,

187 
PB
,

188 
PB
,

189 
PD
,

190 
PD
,

191 
PD
,

192 
PD
,

193 
PD
,

194 
PD
,

195 
PD
,

196 
PD
,

197 
PC
,

198 
PC
,

199 
PC
,

200 
PC
,

201 
PC
,

202 
PC
,

203 
PC
,

204 
PC
,

205 
PA
,

206 
PA
,

207 
PA
,

208 
PA
,

209 
PA
,

210 
PA
,

211 
PA
,

212 
PA


214 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_bô_mask_PGM
[] =

216 
_BV
(0),

217 
_BV
(1),

218 
_BV
(2),

219 
_BV
(3),

220 
_BV
(4),

221 
_BV
(5),

222 
_BV
(6),

223 
_BV
(7),

224 
_BV
(0),

225 
_BV
(1),

226 
_BV
(2),

227 
_BV
(3),

228 
_BV
(4),

229 
_BV
(5),

230 
_BV
(6),

231 
_BV
(7),

232 
_BV
(0),

233 
_BV
(1),

234 
_BV
(2),

235 
_BV
(3),

236 
_BV
(4),

237 
_BV
(5),

238 
_BV
(6),

239 
_BV
(7),

240 
_BV
(7),

241 
_BV
(6),

242 
_BV
(5),

243 
_BV
(4),

244 
_BV
(3),

245 
_BV
(2),

246 
_BV
(1),

247 
_BV
(0)

249 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_timî_PGM
[] =

251 
NOT_ON_TIMER
,

252 
NOT_ON_TIMER
,

253 
NOT_ON_TIMER
,

254 
TIMER0A
,

255 
TIMER0B
,

256 
NOT_ON_TIMER
,

257 
NOT_ON_TIMER
,

258 
NOT_ON_TIMER
,

259 
NOT_ON_TIMER
,

260 
NOT_ON_TIMER
,

261 
NOT_ON_TIMER
,

262 
NOT_ON_TIMER
,

263 
TIMER1B
,

264 
TIMER1A
,

265 
TIMER2B
,

266 
TIMER2A
,

267 
NOT_ON_TIMER
,

268 
NOT_ON_TIMER
,

269 
NOT_ON_TIMER
,

270 
NOT_ON_TIMER
,

271 
NOT_ON_TIMER
,

272 
NOT_ON_TIMER
,

273 
NOT_ON_TIMER
,

274 
NOT_ON_TIMER
,

275 
NOT_ON_TIMER
,

276 
NOT_ON_TIMER
,

277 
NOT_ON_TIMER
,

278 
NOT_ON_TIMER
,

279 
NOT_ON_TIMER
,

280 
NOT_ON_TIMER
,

281 
NOT_ON_TIMER
,

282 
NOT_ON_TIMER


	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/Arduino.h

1 #i‚de‡
Arduöo_h


2 
	#Arduöo_h


	)

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<m©h.h
>

8 
	~<avr/pgm•a˚.h
>

9 
	~<avr/io.h
>

10 
	~<avr/öãºu±.h
>

12 
	~"bö¨y.h
"

14 #ifde‡
__˝lu•lus


18 
	#HIGH
 0x1

	)

19 
	#LOW
 0x0

	)

21 
	#INPUT
 0x0

	)

22 
	#OUTPUT
 0x1

	)

23 
	#INPUT_PULLUP
 0x2

	)

25 
	#åue
 0x1

	)

26 
	#Ál£
 0x0

	)

28 
	#PI
 3.1415926535897932384626433832795

	)

29 
	#HALF_PI
 1.5707963267948966192313216916398

	)

30 
	#TWO_PI
 6.283185307179586476925286766559

	)

31 
	#DEG_TO_RAD
 0.017453292519943295769236907684886

	)

32 
	#RAD_TO_DEG
 57.295779513082320876798154814105

	)

34 
	#SERIAL
 0x0

	)

35 
	#DISPLAY
 0x1

	)

37 
	#LSBFIRST
 0

	)

38 
	#MSBFIRST
 1

	)

40 
	#CHANGE
 1

	)

41 
	#FALLING
 2

	)

42 
	#RISING
 3

	)

45 #i‡
deföed
(
REFS2
)

46 
	#DEFAULT
 0

	)

47 
	#EXTERNAL
 1

	)

48 
	#INTERNAL
 2

	)

53 #i‡!
deföed
(
SFIOR
)

54 
	#INTERNAL1V1
 2

	)

55 
	#INTERNAL2V56
 3

	)

57 
	#INTERNAL
 3

	)

59 
	#DEFAULT
 1

	)

60 
	#EXTERNAL
 0

	)

64 #ifde‡
abs


65 #unde‡
abs


68 
	#mö
(
a
,
b
Ë(◊)<(b)?◊):(b))

	)

69 
	#max
(
a
,
b
Ë(◊)>(b)?◊):(b))

	)

70 
	#abs
(
x
Ë((x)>0?(x):-(x))

	)

71 
	#c⁄°øö
(
amt
,
low
,
high
Ë(◊mt)<÷ow)?÷ow):(◊mt)>(high)?(high):◊mt)))

	)

72 #i‡
__GNUC__
 <4 && 
__GNUC_MINOR__
 < 5

74 
	#round
(
x
Ë((x)>=0?()((x)+0.5):()((x)-0.5))

	)

76 
	#ødüns
(
deg
Ë((deg)*
DEG_TO_RAD
)

	)

77 
	#degªes
(
ød
Ë(‘ad)*
RAD_TO_DEG
)

	)

78 
	#sq
(
x
Ë((x)*(x))

	)

80 
	#öãºu±s
(Ë
	`£i
()

	)

81 
	#noI¡îru±s
(Ë
	`˛i
()

	)

83 
	#˛ockCy˛esPîMi¸o£c⁄d
(Ë–
F_CPU
 / 1000000L )

	)

84 
	#˛ockCy˛esToMi¸o£c⁄ds
(
a
Ë–◊Ë/ 
	`˛ockCy˛esPîMi¸o£c⁄d
(Ë)

	)

85 
	#mi¸o£c⁄dsToClockCy˛es
(
a
Ë–◊Ë* 
	`˛ockCy˛esPîMi¸o£c⁄d
(Ë)

	)

87 
	#lowByã
(
w
Ë((
uöt8_t
Ë((wË& 0xff))

	)

88 
	#highByã
(
w
Ë((
uöt8_t
Ë((wË>> 8))

	)

90 
	#bôRód
(
vÆue
, 
bô
Ë(((vÆueË>> (bô)Ë& 0x01)

	)

91 
	#bôSë
(
vÆue
, 
bô
Ë((vÆueË|(1UL << (bô)))

	)

92 
	#bôCÀ¨
(
vÆue
, 
bô
Ë((vÆueË&~(1UL << (bô)))

	)

93 
	#bôWrôe
(
vÆue
, 
bô
, 
bôvÆue
Ë(bôvÆuê? 
	`bôSë
(vÆue, bôË: 
	`bôCÀ¨
(vÆue, bô))

	)

96 
	tw‹d
;

98 
	#bô
(
b
Ë(1UL << (b))

	)

100 
uöt8_t
 
	tboﬁón
;

101 
uöt8_t
 
	tbyã
;

103 
öô
();

105 
pöMode
(
uöt8_t
, uint8_t);

106 
digôÆWrôe
(
uöt8_t
, uint8_t);

107 
digôÆRód
(
uöt8_t
);

108 
™ÆogRód
(
uöt8_t
);

109 
™ÆogRe„ªn˚
(
uöt8_t
 
mode
);

110 
™ÆogWrôe
(
uöt8_t
, );

112 
mûlis
();

113 
mi¸os
();

114 
dñay
();

115 
dñayMi¸o£c⁄ds
(
us
);

116 
pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
);

118 
shi·Out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
, uöt8_à
vÆ
);

119 
uöt8_t
 
shi·In
(uöt8_à
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
);

121 
©èchI¡îru±
(
uöt8_t
, (*)(), 
mode
);

122 
dëachI¡îru±
(
uöt8_t
);

124 
£tup
();

125 
lo›
();

130 
	#™ÆogInPöToBô
(
P
Ë(P)

	)

134 c⁄° 
uöt16_t
 
PROGMEM
 
p‹t_to_mode_PGM
[];

135 c⁄° 
uöt16_t
 
PROGMEM
 
p‹t_to_öput_PGM
[];

136 c⁄° 
uöt16_t
 
PROGMEM
 
p‹t_to_ouçut_PGM
[];

138 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_p‹t_PGM
[];

140 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_bô_mask_PGM
[];

141 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_timî_PGM
[];

148 
	#digôÆPöToP‹t
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_p‹t_PGM
 + (PËË)

	)

149 
	#digôÆPöToBôMask
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_bô_mask_PGM
 + (PËË)

	)

150 
	#digôÆPöToTimî
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_timî_PGM
 + (PËË)

	)

151 
	#™ÆogInPöToBô
(
P
Ë(P)

	)

152 
	#p‹tOuçutRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–
	`pgm_ªad_w‹d
–
p‹t_to_ouçut_PGM
 + (P))Ë)

	)

153 
	#p‹tI≈utRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–
	`pgm_ªad_w‹d
–
p‹t_to_öput_PGM
 + (P))Ë)

	)

154 
	#p‹tModeRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–
	`pgm_ªad_w‹d
–
p‹t_to_mode_PGM
 + (P))Ë)

	)

156 
	#NOT_A_PIN
 0

	)

157 
	#NOT_A_PORT
 0

	)

159 #ifde‡
ARDUINO_MAIN


160 
	#PA
 1

	)

161 
	#PB
 2

	)

162 
	#PC
 3

	)

163 
	#PD
 4

	)

164 
	#PE
 5

	)

165 
	#PF
 6

	)

166 
	#PG
 7

	)

167 
	#PH
 8

	)

168 
	#PJ
 10

	)

169 
	#PK
 11

	)

170 
	#PL
 12

	)

173 
	#NOT_ON_TIMER
 0

	)

174 
	#TIMER0A
 1

	)

175 
	#TIMER0B
 2

	)

176 
	#TIMER1A
 3

	)

177 
	#TIMER1B
 4

	)

178 
	#TIMER2
 5

	)

179 
	#TIMER2A
 6

	)

180 
	#TIMER2B
 7

	)

182 
	#TIMER3A
 8

	)

183 
	#TIMER3B
 9

	)

184 
	#TIMER3C
 10

	)

185 
	#TIMER4A
 11

	)

186 
	#TIMER4B
 12

	)

187 
	#TIMER4C
 13

	)

188 
	#TIMER4D
 14

	)

189 
	#TIMER5A
 15

	)

190 
	#TIMER5B
 16

	)

191 
	#TIMER5C
 17

	)

193 #ifde‡
__˝lu•lus


197 #ifde‡
__˝lu•lus


198 
	~"WCh¨a˘î.h
"

199 
	~"WSåög.h
"

200 
	~"H¨dw¨eSîül.h
"

202 
uöt16_t
 
makeW‹d
(uöt16_à
w
);

203 
uöt16_t
 
makeW‹d
(
byã
 
h
, byã 
l
);

205 
	#w‹d
(...Ë
	`makeW‹d
(
__VA_ARGS__
)

	)

207 
pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
 = 1000000L);

209 
t⁄e
(
uöt8_t
 
_pö
, 
‰equícy
, 
duøti⁄
 = 0);

210 
noT⁄e
(
uöt8_t
 
_pö
);

213 
øndom
();

214 
øndom
(, );

215 
øndomSìd
();

216 
m≠
(, , , , );

220 
	~"pös_¨duöo.h
"

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/CDC.cpp

19 
	~"Pœtf‹m.h
"

20 
	~"USBAPI.h
"

21 
	~<avr/wdt.h
>

23 #i‡
deföed
(
USBCON
)

24 #ifde‡
CDC_ENABLED


26 #i‡(
RAMEND
 < 1000)

27 
	#SERIAL_BUFFER_SIZE
 16

	)

29 
	#SERIAL_BUFFER_SIZE
 64

	)

32 
	srög_buf„r


34 
	mbuf„r
[
SERIAL_BUFFER_SIZE
];

35 vﬁ©ûê
	mhód
;

36 vﬁ©ûê
	mèû
;

39 
rög_buf„r
 
	gcdc_rx_buf„r
 = { { 0 }, 0, 0};

43 
u32
 
	mdwDTER©e
;

44 
u8
 
	mbCh¨F‹m©
;

45 
u8
 
	mbP¨ôyTy≥
;

46 
u8
 
	mbD©aBôs
;

47 
u8
 
	mlöeSèã
;

48 } 
	tLöeInfo
;

50 vﬁ©ûê
LöeInfo
 
	g_usbLöeInfo
 = { 57600, 0x00, 0x00, 0x00, 0x00 };

52 
	#WEAK
 
	`__©åibuã__
 ((
wók
))

	)

54 c⁄° 
CDCDes¸ùt‹
 
_cdcI¡îÁ˚
 
PROGMEM
;

55 c⁄° 
CDCDes¸ùt‹
 
	g_cdcI¡îÁ˚
 =

57 
D_IAD
(0,2,
CDC_COMMUNICATION_INTERFACE_CLASS
,
CDC_ABSTRACT_CONTROL_MODEL
,1),

60 
D_INTERFACE
(
CDC_ACM_INTERFACE
,1,
CDC_COMMUNICATION_INTERFACE_CLASS
,
CDC_ABSTRACT_CONTROL_MODEL
,0),

61 
D_CDCCS
(
CDC_HEADER
,0x10,0x01),

62 
D_CDCCS
(
CDC_CALL_MANAGEMENT
,1,1),

63 
D_CDCCS4
(
CDC_ABSTRACT_CONTROL_MANAGEMENT
,6),

64 
D_CDCCS
(
CDC_UNION
,
CDC_ACM_INTERFACE
,
CDC_DATA_INTERFACE
),

65 
D_ENDPOINT
(
USB_ENDPOINT_IN
 (
CDC_ENDPOINT_ACM
),
USB_ENDPOINT_TYPE_INTERRUPT
,0x10,0x40),

68 
D_INTERFACE
(
CDC_DATA_INTERFACE
,2,
CDC_DATA_INTERFACE_CLASS
,0,0),

69 
D_ENDPOINT
(
USB_ENDPOINT_OUT
(
CDC_ENDPOINT_OUT
),
USB_ENDPOINT_TYPE_BULK
,0x40,0),

70 
D_ENDPOINT
(
USB_ENDPOINT_IN
 (
CDC_ENDPOINT_IN
 ),
USB_ENDPOINT_TYPE_BULK
,0x40,0)

73 
WEAK
 
	$CDC_GëI¡îÁ˚
(
u8
* 
öãrÁ˚Num
)

75 
öãrÁ˚Num
[0] += 2;

76  
	`USB_SídC⁄åﬁ
(
TRANSFER_PGM
,&
_cdcI¡îÁ˚
,(_cdcInterface));

77 
	}
}

79 
boﬁ
 
WEAK
 
	$CDC_Sëup
(
Sëup
& 
£tup
)

81 
u8
 
r
 = 
£tup
.
bReque°
;

82 
u8
 
ªque°Ty≥
 = 
£tup
.
bmReque°Ty≥
;

84 i‡(
REQUEST_DEVICETOHOST_CLASS_INTERFACE
 =
ªque°Ty≥
)

86 i‡(
CDC_GET_LINE_CODING
 =
r
)

88 
	`USB_SídC⁄åﬁ
(0,(*)&
_usbLöeInfo
,7);

89  
åue
;

93 i‡(
REQUEST_HOSTTODEVICE_CLASS_INTERFACE
 =
ªque°Ty≥
)

95 i‡(
CDC_SET_LINE_CODING
 =
r
)

97 
	`USB_RecvC⁄åﬁ
((*)&
_usbLöeInfo
,7);

98  
åue
;

101 i‡(
CDC_SET_CONTROL_LINE_STATE
 =
r
)

103 
_usbLöeInfo
.
löeSèã
 = 
£tup
.
wVÆueL
;

109 i‡(1200 =
_usbLöeInfo
.
dwDTER©e
) {

111 i‡((
_usbLöeInfo
.
löeSèã
 & 0x01) == 0) {

112 *(
uöt16_t
 *)0x0800 = 0x7777;

113 
	`wdt_íabÀ
(
WDTO_120MS
);

120 
	`wdt_dißbÀ
();

121 
	`wdt_ª£t
();

122 *(
uöt16_t
 *)0x0800 = 0x0;

125  
åue
;

128  
Ál£
;

129 
	}
}

132 
	g_£rülPìk
 = -1;

133 
	gSîül_
::
	$begö
(
uöt16_t
 
baud_cou¡
)

135 
	}
}

137 
Sîül_
::
	$íd
()

139 
	}
}

141 
Sîül_
::
	$ac˚±
()

143 
rög_buf„r
 *
buf„r
 = &
cdc_rx_buf„r
;

144 
i
 = ()(
buf„r
->
hód
+1Ë% 
SERIAL_BUFFER_SIZE
;

152 
i
 !
buf„r
->
èû
) {

153 
c
 = 
	`USB_Recv
(
CDC_RX
);

154 i‡(
c
 == -1)

156 
buf„r
->buf„r[buf„r->
hód
] = 
c
;

157 
buf„r
->
hód
 = 
i
;

159 
i
 = ()(
buf„r
->
hód
+1Ë% 
SERIAL_BUFFER_SIZE
;

161 
	}
}

163 
	gSîül_
::
	$avaûabÀ
()

165 
rög_buf„r
 *
buf„r
 = &
cdc_rx_buf„r
;

166  ()(
SERIAL_BUFFER_SIZE
 + 
buf„r
->
hód
 - buf„r->
èû
) % SERIAL_BUFFER_SIZE;

167 
	}
}

169 
	gSîül_
::
	$≥ek
()

171 
rög_buf„r
 *
buf„r
 = &
cdc_rx_buf„r
;

172 i‡(
buf„r
->
hód
 =buf„r->
èû
) {

175  
buf„r
->buf„r[buf„r->
èû
];

177 
	}
}

179 
	gSîül_
::
	$ªad
()

181 
rög_buf„r
 *
buf„r
 = &
cdc_rx_buf„r
;

183 i‡(
buf„r
->
hód
 =buf„r->
èû
) {

186 
c
 = 
buf„r
->buf„r[buf„r->
èû
];

187 
buf„r
->
èû
 = ()(buf„r->èû + 1Ë% 
SERIAL_BUFFER_SIZE
;

188  
c
;

190 
	}
}

192 
	gSîül_
::
	$Êush
()

194 
	`USB_Flush
(
CDC_TX
);

195 
	}
}

197 
size_t
 
	gSîül_
::
	$wrôe
(
uöt8_t
 
c
)

208 i‡(
_usbLöeInfo
.
löeSèã
 > 0) {

209 
r
 = 
	`USB_Síd
(
CDC_TX
,&
c
,1);

210 i‡(
r
 > 0) {

211  
r
;

213 
	`£tWrôeEº‹
();

217 
	`£tWrôeEº‹
();

219 
	}
}

228 
	gSîül_
::
›î©‹
 
	$boﬁ
() {

229 
boﬁ
 
ªsu…
 = 
Ál£
;

230 i‡(
_usbLöeInfo
.
löeSèã
 > 0)

231 
ªsu…
 = 
åue
;

232 
	`dñay
(10);

233  
ªsu…
;

234 
	}
}

236 
Sîül_
 
	gSîül
;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/Client.h

1 #i‚de‡
˛õ¡_h


2 
	#˛õ¡_h


	)

3 
	~"Pröt.h
"

4 
	~"Såóm.h
"

5 
	~"IPAddªss.h
"

7 ˛as†
	cClõ¡
 : 
public
 
Såóm
 {

9 
public
:

10 
vútuÆ
 
c⁄√˘
(
IPAddªss
 
ù
, 
uöt16_t
 
p‹t
) =0;

11 
vútuÆ
 
c⁄√˘
(c⁄° *
ho°
, 
uöt16_t
 
p‹t
) =0;

12 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
) =0;

13 
vútuÆ
 
size_t
 
wrôe
(c⁄° 
uöt8_t
 *
buf
, size_à
size
) =0;

14 
vútuÆ
 
avaûabÀ
() = 0;

15 
vútuÆ
 
ªad
() = 0;

16 
vútuÆ
 
ªad
(
uöt8_t
 *
buf
, 
size_t
 
size
) = 0;

17 
vútuÆ
 
≥ek
() = 0;

18 
vútuÆ
 
Êush
() = 0;

19 
vútuÆ
 
°›
() = 0;

20 
vútuÆ
 
uöt8_t
 
c⁄√˘ed
() = 0;

21 
vútuÆ
 
›î©‹
 
boﬁ
() = 0;

22 
	m¥Ÿe˘ed
:

23 
uöt8_t
* 
	$øwIPAddªss
(
IPAddªss
& 
addr
Ë{ áddr.
	`øw_addªss
(); };

24 
	}
};

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/HID.cpp

19 
	~"Pœtf‹m.h
"

20 
	~"USBAPI.h
"

21 
	~"USBDesc.h
"

23 #i‡
deföed
(
USBCON
)

24 #ifde‡
HID_ENABLED


30 
Mou£_
 
	gMou£
;

31 
Keybﬂrd_
 
	gKeybﬂrd
;

38 
	#LSB
(
_x
Ë((_xË& 0xFF)

	)

39 
	#MSB
(
_x
Ë((_xË>> 8)

	)

41 
	#RAWHID_USAGE_PAGE
 0xFFC0

	)

42 
	#RAWHID_USAGE
 0x0C00

	)

43 
	#RAWHID_TX_SIZE
 64

	)

44 
	#RAWHID_RX_SIZE
 64

	)

46 c⁄° 
u8
 
_hidRï‹tDes¸ùt‹
[] 
PROGMEM
;

47 c⁄° 
u8
 
	g_hidRï‹tDes¸ùt‹
[] = {

109 #i‡
RAWHID_ENABLED


111 0x06, 
LSB
(
RAWHID_USAGE_PAGE
), 
MSB
(RAWHID_USAGE_PAGE),

112 0x0A, 
LSB
(
RAWHID_USAGE
), 
MSB
(RAWHID_USAGE),

131 c⁄° 
HIDDes¸ùt‹
 
_hidI¡îÁ˚
 
PROGMEM
;

132 c⁄° 
HIDDes¸ùt‹
 
	g_hidI¡îÁ˚
 =

134 
D_INTERFACE
(
HID_INTERFACE
,1,3,0,0),

135 
D_HIDREPORT
((
_hidRï‹tDes¸ùt‹
)),

136 
D_ENDPOINT
(
USB_ENDPOINT_IN
 (
HID_ENDPOINT_INT
),
USB_ENDPOINT_TYPE_INTERRUPT
,0x40,0x01)

143 
u8
 
	g_hid_¥Ÿocﬁ
 = 1;

144 
u8
 
	g_hid_idÀ
 = 1;

146 
	#WEAK
 
	`__©åibuã__
 ((
wók
))

	)

148 
WEAK
 
	$HID_GëI¡îÁ˚
(
u8
* 
öãrÁ˚Num
)

150 
öãrÁ˚Num
[0] += 1;

151  
	`USB_SídC⁄åﬁ
(
TRANSFER_PGM
,&
_hidI¡îÁ˚
,(_hidInterface));

152 
	}
}

154 
WEAK
 
	$HID_GëDes¸ùt‹
(
i
)

156  
	`USB_SídC⁄åﬁ
(
TRANSFER_PGM
,
_hidRï‹tDes¸ùt‹
,(_hidReportDescriptor));

157 
	}
}

159 
WEAK
 
	$HID_SídRï‹t
(
u8
 
id
, c⁄° * 
d©a
, 
Àn
)

161 
	`USB_Síd
(
HID_TX
, &
id
, 1);

162 
	`USB_Síd
(
HID_TX
 | 
TRANSFER_RELEASE
,
d©a
,
Àn
);

163 
	}
}

165 
boﬁ
 
WEAK
 
	$HID_Sëup
(
Sëup
& 
£tup
)

167 
u8
 
r
 = 
£tup
.
bReque°
;

168 
u8
 
ªque°Ty≥
 = 
£tup
.
bmReque°Ty≥
;

169 i‡(
REQUEST_DEVICETOHOST_CLASS_INTERFACE
 =
ªque°Ty≥
)

171 i‡(
HID_GET_REPORT
 =
r
)

174  
åue
;

176 i‡(
HID_GET_PROTOCOL
 =
r
)

179  
åue
;

183 i‡(
REQUEST_HOSTTODEVICE_CLASS_INTERFACE
 =
ªque°Ty≥
)

185 i‡(
HID_SET_PROTOCOL
 =
r
)

187 
_hid_¥Ÿocﬁ
 = 
£tup
.
wVÆueL
;

188  
åue
;

191 i‡(
HID_SET_IDLE
 =
r
)

193 
_hid_idÀ
 = 
£tup
.
wVÆueL
;

194  
åue
;

197  
Ál£
;

198 
	}
}

204 
	gMou£_
::
	$Mou£_
(Ë: 
	$_buâ⁄s
(0)

206 
	}
}

208 
Mou£_
::
	$begö
()

210 
	}
}

212 
Mou£_
::
	$íd
()

214 
	}
}

216 
Mou£_
::
	$˛ick
(
uöt8_t
 
b
)

218 
_buâ⁄s
 = 
b
;

219 
	`move
(0,0,0);

220 
_buâ⁄s
 = 0;

221 
	`move
(0,0,0);

222 
	}
}

224 
	gMou£_
::
	$move
(sig√d 
x
, sig√d 
y
, sig√d 
whìl
)

226 
u8
 
m
[4];

227 
m
[0] = 
_buâ⁄s
;

228 
m
[1] = 
x
;

229 
m
[2] = 
y
;

230 
m
[3] = 
whìl
;

231 
	`HID_SídRï‹t
(1,
m
,4);

232 
	}
}

234 
	gMou£_
::
	$buâ⁄s
(
uöt8_t
 
b
)

236 i‡(
b
 !
_buâ⁄s
)

238 
_buâ⁄s
 = 
b
;

239 
	`move
(0,0,0);

241 
	}
}

243 
	gMou£_
::
	$¥ess
(
uöt8_t
 
b
)

245 
	`buâ⁄s
(
_buâ⁄s
 | 
b
);

246 
	}
}

248 
	gMou£_
::
	$ªÀa£
(
uöt8_t
 
b
)

250 
	`buâ⁄s
(
_buâ⁄s
 & ~
b
);

251 
	}
}

253 
boﬁ
 
	gMou£_
::
	$isPªs£d
(
uöt8_t
 
b
)

255 i‡((
b
 & 
_buâ⁄s
) > 0)

256  
åue
;

257  
Ál£
;

258 
	}
}

264 
	gKeybﬂrd_
::
	$Keybﬂrd_
()

266 
	}
}

268 
Keybﬂrd_
::
	$begö
()

270 
	}
}

272 
Keybﬂrd_
::
	$íd
()

274 
	}
}

276 
Keybﬂrd_
::
	$£ndRï‹t
(
KeyRï‹t
* 
keys
)

278 
	`HID_SídRï‹t
(2,
keys
,(
KeyRï‹t
));

279 
	}
}

282 c⁄° 
uöt8_t
 
_asciim≠
[128] 
PROGMEM
;

284 
	#SHIFT
 0x80

	)

285 c⁄° 
uöt8_t
 
	g_asciim≠
[128] =

321 0x1e|
SHIFT
,

322 0x34|
SHIFT
,

323 0x20|
SHIFT
,

324 0x21|
SHIFT
,

325 0x22|
SHIFT
,

326 0x24|
SHIFT
,

328 0x26|
SHIFT
,

329 0x27|
SHIFT
,

330 0x25|
SHIFT
,

331 0x2e|
SHIFT
,

346 0x33|
SHIFT
,

348 0x36|
SHIFT
,

350 0x37|
SHIFT
,

351 0x38|
SHIFT
,

352 0x1f|
SHIFT
,

353 0x04|
SHIFT
,

354 0x05|
SHIFT
,

355 0x06|
SHIFT
,

356 0x07|
SHIFT
,

357 0x08|
SHIFT
,

358 0x09|
SHIFT
,

359 0x0a|
SHIFT
,

360 0x0b|
SHIFT
,

361 0x0c|
SHIFT
,

362 0x0d|
SHIFT
,

363 0x0e|
SHIFT
,

364 0x0f|
SHIFT
,

365 0x10|
SHIFT
,

366 0x11|
SHIFT
,

367 0x12|
SHIFT
,

368 0x13|
SHIFT
,

369 0x14|
SHIFT
,

370 0x15|
SHIFT
,

371 0x16|
SHIFT
,

372 0x17|
SHIFT
,

373 0x18|
SHIFT
,

374 0x19|
SHIFT
,

375 0x1a|
SHIFT
,

376 0x1b|
SHIFT
,

377 0x1c|
SHIFT
,

378 0x1d|
SHIFT
,

382 0x23|
SHIFT
,

383 0x2d|
SHIFT
,

411 0x2f|
SHIFT
,

412 0x31|
SHIFT
,

413 0x30|
SHIFT
,

414 0x35|
SHIFT
,

418 
uöt8_t
 
USBPutCh¨
(uöt8_à
c
);

424 
size_t
 
	gKeybﬂrd_
::
	$¥ess
(
uöt8_t
 
k
)

426 
uöt8_t
 
i
;

427 i‡(
k
 >= 136) {

428 
k
 = k - 136;

429 } i‡(
k
 >= 128) {

430 
_keyRï‹t
.
modifõrs
 |(1<<(
k
-128));

431 
k
 = 0;

433 
k
 = 
	`pgm_ªad_byã
(
_asciim≠
 + k);

434 i‡(!
k
) {

435 
	`£tWrôeEº‹
();

438 i‡(
k
 & 0x80) {

439 
_keyRï‹t
.
modifõrs
 |= 0x02;

440 
k
 &= 0x7F;

446 i‡(
_keyRï‹t
.
keys
[0] !
k
 && _keyReport.keys[1] != k &&

447 
_keyRï‹t
.
keys
[2] !
k
 && _keyReport.keys[3] != k &&

448 
_keyRï‹t
.
keys
[4] !
k
 && _keyReport.keys[5] != k) {

450 
i
=0; i<6; i++) {

451 i‡(
_keyRï‹t
.
keys
[
i
] == 0x00) {

452 
_keyRï‹t
.
keys
[
i
] = 
k
;

456 i‡(
i
 == 6) {

457 
	`£tWrôeEº‹
();

461 
	`£ndRï‹t
(&
_keyRï‹t
);

463 
	}
}

468 
size_t
 
	gKeybﬂrd_
::
	$ªÀa£
(
uöt8_t
 
k
)

470 
uöt8_t
 
i
;

471 i‡(
k
 >= 136) {

472 
k
 = k - 136;

473 } i‡(
k
 >= 128) {

474 
_keyRï‹t
.
modifõrs
 &~(1<<(
k
-128));

475 
k
 = 0;

477 
k
 = 
	`pgm_ªad_byã
(
_asciim≠
 + k);

478 i‡(!
k
) {

481 i‡(
k
 & 0x80) {

482 
_keyRï‹t
.
modifõrs
 &= ~(0x02);

483 
k
 &= 0x7F;

489 
i
=0; i<6; i++) {

490 i‡(0 !
k
 && 
_keyRï‹t
.
keys
[
i
] == k) {

491 
_keyRï‹t
.
keys
[
i
] = 0x00;

495 
	`£ndRï‹t
(&
_keyRï‹t
);

497 
	}
}

499 
	gKeybﬂrd_
::
	$ªÀa£AŒ
()

501 
_keyRï‹t
.
keys
[0] = 0;

502 
_keyRï‹t
.
keys
[1] = 0;

503 
_keyRï‹t
.
keys
[2] = 0;

504 
_keyRï‹t
.
keys
[3] = 0;

505 
_keyRï‹t
.
keys
[4] = 0;

506 
_keyRï‹t
.
keys
[5] = 0;

507 
_keyRï‹t
.
modifõrs
 = 0;

508 
	`£ndRï‹t
(&
_keyRï‹t
);

509 
	}
}

511 
size_t
 
	gKeybﬂrd_
::
	$wrôe
(
uöt8_t
 
c
)

513 
uöt8_t
 
p
 = 
	`¥ess
(
c
);

514 
uöt8_t
 
r
 = 
	`ªÀa£
(
c
);

515  (
p
);

516 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/HardwareSerial.cpp

24 
	~<°dlib.h
>

25 
	~<°dio.h
>

26 
	~<°rög.h
>

27 
	~<öây≥s.h
>

28 
	~"Arduöo.h
"

29 
	~"wúög_¥iv©e.h
"

33 #i‡
deföed
(
UBRRH
Ë|| deföed(
UBRR0H
Ë|| deföed(
UBRR1H
Ë|| deföed(
UBRR2H
Ë|| deföed(
UBRR3H
)

35 
	~"H¨dw¨eSîül.h
"

41 #i‡!
deföed
(
TXC0
)

42 #i‡
deföed
(
TXC
)

43 
	#TXC0
 
TXC


	)

44 #ñi‡
deföed
(
TXC1
)

46 
	#TXC0
 
TXC1


	)

48 #îr‹ 
TXC0
 
nŸ
 
deföabÀ
 
ö
 
H¨dw¨eSîül
.
h


56 #i‡(
RAMEND
 < 1000)

57 
	#SERIAL_BUFFER_SIZE
 16

	)

59 
	#SERIAL_BUFFER_SIZE
 64

	)

62 
	srög_buf„r


64 
	mbuf„r
[
SERIAL_BUFFER_SIZE
];

65 vﬁ©ûê
	mhód
;

66 vﬁ©ûê
	mèû
;

69 #i‡
deföed
(
USBCON
)

70 
rög_buf„r
 
	grx_buf„r
 = { { 0 }, 0, 0};

71 
rög_buf„r
 
	gtx_buf„r
 = { { 0 }, 0, 0};

73 #i‡
deföed
(
UBRRH
Ë|| deföed(
UBRR0H
)

74 
rög_buf„r
 
	grx_buf„r
 = { { 0 }, 0, 0 };

75 
rög_buf„r
 
	gtx_buf„r
 = { { 0 }, 0, 0 };

77 #i‡
deföed
(
UBRR1H
)

78 
rög_buf„r
 
	grx_buf„r1
 = { { 0 }, 0, 0 };

79 
rög_buf„r
 
	gtx_buf„r1
 = { { 0 }, 0, 0 };

81 #i‡
deföed
(
UBRR2H
)

82 
rög_buf„r
 
	grx_buf„r2
 = { { 0 }, 0, 0 };

83 
rög_buf„r
 
	gtx_buf„r2
 = { { 0 }, 0, 0 };

85 #i‡
deföed
(
UBRR3H
)

86 
rög_buf„r
 
	grx_buf„r3
 = { { 0 }, 0, 0 };

87 
rög_buf„r
 
	gtx_buf„r3
 = { { 0 }, 0, 0 };

90 
ölöe
 
	$°‹e_ch¨
(
c
, 
rög_buf„r
 *
buf„r
)

92 
i
 = ()(
buf„r
->
hód
 + 1Ë% 
SERIAL_BUFFER_SIZE
;

98 i‡(
i
 !
buf„r
->
èû
) {

99 
buf„r
->buf„r[buf„r->
hód
] = 
c
;

100 
buf„r
->
hód
 = 
i
;

102 
	}
}

104 #i‡!
deföed
(
USART0_RX_ve˘
Ë&& deföed(
USART1_RX_ve˘
)

107 #i‡!
deföed
(
USART_RX_ve˘
Ë&& !deföed(
SIG_USART0_RECV
) && \

108 !
deföed
(
SIG_UART0_RECV
Ë&& !deföed(
USART0_RX_ve˘
) && \

109 !
	$deföed
(
SIG_UART_RECV
)

112 
	$£rülEvít
(Ë
	`__©åibuã__
((
wók
));

113 
	$£rülEvít
(Ë{
	}
}

114 
	#£rülEvít_im∂emíãd


	)

115 #i‡
deföed
(
USART_RX_ve˘
)

116 
	$SIGNAL
(
USART_RX_ve˘
)

117 #ñi‡
	`deföed
(
SIG_USART0_RECV
)

118 
	$SIGNAL
(
SIG_USART0_RECV
)

119 #ñi‡
	`deföed
(
SIG_UART0_RECV
)

120 
	$SIGNAL
(
SIG_UART0_RECV
)

121 #ñi‡
	`deföed
(
USART0_RX_ve˘
)

122 
	$SIGNAL
(
USART0_RX_ve˘
)

123 #ñi‡
	`deföed
(
SIG_UART_RECV
)

124 
	$SIGNAL
(
SIG_UART_RECV
)

127 #i‡
	`deföed
(
UDR0
)

128 i‡(
	`bô_is_˛ór
(
UCSR0A
, 
UPE0
)) {

129 
c
 = 
UDR0
;

130 
	`°‹e_ch¨
(
c
, &
rx_buf„r
);

132 
c
 = 
UDR0
;

134 #ñi‡
	`deföed
(
UDR
)

135 i‡(
	`bô_is_˛ór
(
UCSRA
, 
PE
)) {

136 
c
 = 
UDR
;

137 
	`°‹e_ch¨
(
c
, &
rx_buf„r
);

139 
c
 = 
UDR
;

142 #îr‹ 
UDR
 
nŸ
 
deföed


144 
	}
}

148 #i‡
deföed
(
USART1_RX_ve˘
)

149 
	$£rülEvít1
(Ë
	`__©åibuã__
((
wók
));

150 
	$£rülEvít1
(Ë{
	}
}

151 
	#£rülEvít1_im∂emíãd


	)

152 
	$SIGNAL
(
USART1_RX_ve˘
)

154 i‡(
	`bô_is_˛ór
(
UCSR1A
, 
UPE1
)) {

155 
c
 = 
UDR1
;

156 
	`°‹e_ch¨
(
c
, &
rx_buf„r1
);

158 
c
 = 
UDR1
;

160 
	}
}

161 #ñi‡
deföed
(
SIG_USART1_RECV
)

162 #îr‹ 
SIG_USART1_RECV


165 #i‡
deföed
(
USART2_RX_ve˘
Ë&& deföed(
UDR2
)

166 
	$£rülEvít2
(Ë
	`__©åibuã__
((
wók
));

167 
	$£rülEvít2
(Ë{
	}
}

168 
	#£rülEvít2_im∂emíãd


	)

169 
	$SIGNAL
(
USART2_RX_ve˘
)

171 i‡(
	`bô_is_˛ór
(
UCSR2A
, 
UPE2
)) {

172 
c
 = 
UDR2
;

173 
	`°‹e_ch¨
(
c
, &
rx_buf„r2
);

175 
c
 = 
UDR2
;

177 
	}
}

178 #ñi‡
deföed
(
SIG_USART2_RECV
)

179 #îr‹ 
SIG_USART2_RECV


182 #i‡
deföed
(
USART3_RX_ve˘
Ë&& deföed(
UDR3
)

183 
	$£rülEvít3
(Ë
	`__©åibuã__
((
wók
));

184 
	$£rülEvít3
(Ë{
	}
}

185 
	#£rülEvít3_im∂emíãd


	)

186 
	$SIGNAL
(
USART3_RX_ve˘
)

188 i‡(
	`bô_is_˛ór
(
UCSR3A
, 
UPE3
)) {

189 
c
 = 
UDR3
;

190 
	`°‹e_ch¨
(
c
, &
rx_buf„r3
);

192 
c
 = 
UDR3
;

194 
	}
}

195 #ñi‡
deföed
(
SIG_USART3_RECV
)

196 #îr‹ 
SIG_USART3_RECV


199 
	$£rülEvítRun
()

201 #ifde‡
£rülEvít_im∂emíãd


202 i‡(
Sîül
.
	`avaûabÀ
()Ë
	`£rülEvít
();

204 #ifde‡
£rülEvít1_im∂emíãd


205 i‡(
Sîül1
.
	`avaûabÀ
()Ë
	`£rülEvít1
();

207 #ifde‡
£rülEvít2_im∂emíãd


208 i‡(
Sîül2
.
	`avaûabÀ
()Ë
	`£rülEvít2
();

210 #ifde‡
£rülEvít3_im∂emíãd


211 i‡(
Sîül3
.
	`avaûabÀ
()Ë
	`£rülEvít3
();

213 
	}
}

216 #i‡!
deföed
(
USART0_UDRE_ve˘
Ë&& deföed(
USART1_UDRE_ve˘
)

219 #i‡!
deföed
(
UART0_UDRE_ve˘
Ë&& !deföed(
UART_UDRE_ve˘
Ë&& !deföed(
USART0_UDRE_ve˘
Ë&& !deföed(
USART_UDRE_ve˘
)

222 #i‡
deföed
(
UART0_UDRE_ve˘
)

223 
	$ISR
(
UART0_UDRE_ve˘
)

224 #ñi‡
	`deföed
(
UART_UDRE_ve˘
)

225 
	$ISR
(
UART_UDRE_ve˘
)

226 #ñi‡
	`deföed
(
USART0_UDRE_ve˘
)

227 
	$ISR
(
USART0_UDRE_ve˘
)

228 #ñi‡
	`deföed
(
USART_UDRE_ve˘
)

229 
	$ISR
(
USART_UDRE_ve˘
)

232 i‡(
tx_buf„r
.
hód
 =tx_buf„r.
èû
) {

234 #i‡
	`deföed
(
UCSR0B
)

235 
	`cbi
(
UCSR0B
, 
UDRIE0
);

237 
	`cbi
(
UCSRB
, 
UDRIE
);

242 
c
 = 
tx_buf„r
.
buf„r
[tx_buf„r.
èû
];

243 
tx_buf„r
.
èû
 = (tx_buf„r.èû + 1Ë% 
SERIAL_BUFFER_SIZE
;

245 #i‡
	`deföed
(
UDR0
)

246 
UDR0
 = 
c
;

247 #ñi‡
	`deföed
(
UDR
)

248 
UDR
 = 
c
;

250 #îr‹ 
UDR
 
nŸ
 
deföed


253 
	}
}

257 #ifde‡
USART1_UDRE_ve˘


258 
	$ISR
(
USART1_UDRE_ve˘
)

260 i‡(
tx_buf„r1
.
hód
 =tx_buf„r1.
èû
) {

262 
	`cbi
(
UCSR1B
, 
UDRIE1
);

266 
c
 = 
tx_buf„r1
.
buf„r
[tx_buf„r1.
èû
];

267 
tx_buf„r1
.
èû
 = (tx_buf„r1.èû + 1Ë% 
SERIAL_BUFFER_SIZE
;

269 
UDR1
 = 
c
;

271 
	}
}

274 #ifde‡
USART2_UDRE_ve˘


275 
	$ISR
(
USART2_UDRE_ve˘
)

277 i‡(
tx_buf„r2
.
hód
 =tx_buf„r2.
èû
) {

279 
	`cbi
(
UCSR2B
, 
UDRIE2
);

283 
c
 = 
tx_buf„r2
.
buf„r
[tx_buf„r2.
èû
];

284 
tx_buf„r2
.
èû
 = (tx_buf„r2.èû + 1Ë% 
SERIAL_BUFFER_SIZE
;

286 
UDR2
 = 
c
;

288 
	}
}

291 #ifde‡
USART3_UDRE_ve˘


292 
	$ISR
(
USART3_UDRE_ve˘
)

294 i‡(
tx_buf„r3
.
hód
 =tx_buf„r3.
èû
) {

296 
	`cbi
(
UCSR3B
, 
UDRIE3
);

300 
c
 = 
tx_buf„r3
.
buf„r
[tx_buf„r3.
èû
];

301 
tx_buf„r3
.
èû
 = (tx_buf„r3.èû + 1Ë% 
SERIAL_BUFFER_SIZE
;

303 
UDR3
 = 
c
;

305 
	}
}

311 
	gH¨dw¨eSîül
::
	$H¨dw¨eSîül
(
rög_buf„r
 *
rx_buf„r
,Ñög_buf„∏*
tx_buf„r
,

312 vﬁ©ûê
uöt8_t
 *
ubºh
, vﬁ©ûêuöt8_à*
ubºl
,

313 vﬁ©ûê
uöt8_t
 *
uc§a
, vﬁ©ûêuöt8_à*
uc§b
,

314 vﬁ©ûê
uöt8_t
 *
uc§c
, vﬁ©ûêuöt8_à*
udr
,

315 
uöt8_t
 
rxí
, uöt8_à
txí
, uöt8_à
rxcõ
, uöt8_à
udrõ
, uöt8_à
u2x
)

317 
_rx_buf„r
 = 
rx_buf„r
;

318 
_tx_buf„r
 = 
tx_buf„r
;

319 
_ubºh
 = 
ubºh
;

320 
_ubºl
 = 
ubºl
;

321 
_uc§a
 = 
uc§a
;

322 
_uc§b
 = 
uc§b
;

323 
_uc§c
 = 
uc§c
;

324 
_udr
 = 
udr
;

325 
_rxí
 = 
rxí
;

326 
_txí
 = 
txí
;

327 
_rxcõ
 = 
rxcõ
;

328 
_udrõ
 = 
udrõ
;

329 
_u2x
 = 
u2x
;

330 
	}
}

334 
	gH¨dw¨eSîül
::
	$begö
(
baud
)

336 
uöt16_t
 
baud_£âög
;

337 
boﬁ
 
u£_u2x
 = 
åue
;

339 #i‡
F_CPU
 == 16000000UL

343 i‡(
baud
 == 57600) {

344 
u£_u2x
 = 
Ál£
;

348 
åy_agaö
:

350 i‡(
u£_u2x
) {

351 *
_uc§a
 = 1 << 
_u2x
;

352 
baud_£âög
 = (
F_CPU
 / 4 / 
baud
 - 1) / 2;

354 *
_uc§a
 = 0;

355 
baud_£âög
 = (
F_CPU
 / 8 / 
baud
 - 1) / 2;

358 i‡((
baud_£âög
 > 4095Ë&& 
u£_u2x
)

360 
u£_u2x
 = 
Ál£
;

361 
åy_agaö
;

365 *
_ubºh
 = 
baud_£âög
 >> 8;

366 *
_ubºl
 = 
baud_£âög
;

368 
å™smôtög
 = 
Ál£
;

370 
	`sbi
(*
_uc§b
, 
_rxí
);

371 
	`sbi
(*
_uc§b
, 
_txí
);

372 
	`sbi
(*
_uc§b
, 
_rxcõ
);

373 
	`cbi
(*
_uc§b
, 
_udrõ
);

374 
	}
}

376 
	gH¨dw¨eSîül
::
	$begö
(
baud
, 
byã
 
c⁄fig
)

378 
uöt16_t
 
baud_£âög
;

379 
uöt8_t
 
cuºít_c⁄fig
;

380 
boﬁ
 
u£_u2x
 = 
åue
;

382 #i‡
F_CPU
 == 16000000UL

386 i‡(
baud
 == 57600) {

387 
u£_u2x
 = 
Ál£
;

391 
åy_agaö
:

393 i‡(
u£_u2x
) {

394 *
_uc§a
 = 1 << 
_u2x
;

395 
baud_£âög
 = (
F_CPU
 / 4 / 
baud
 - 1) / 2;

397 *
_uc§a
 = 0;

398 
baud_£âög
 = (
F_CPU
 / 8 / 
baud
 - 1) / 2;

401 i‡((
baud_£âög
 > 4095Ë&& 
u£_u2x
)

403 
u£_u2x
 = 
Ál£
;

404 
åy_agaö
;

408 *
_ubºh
 = 
baud_£âög
 >> 8;

409 *
_ubºl
 = 
baud_£âög
;

412 #i‡
	`deföed
(
__AVR_ATmega8__
)

413 
c⁄fig
 |= 0x80;

415 *
_uc§c
 = 
c⁄fig
;

417 
	`sbi
(*
_uc§b
, 
_rxí
);

418 
	`sbi
(*
_uc§b
, 
_txí
);

419 
	`sbi
(*
_uc§b
, 
_rxcõ
);

420 
	`cbi
(*
_uc§b
, 
_udrõ
);

421 
	}
}

423 
	gH¨dw¨eSîül
::
	$íd
()

426 
_tx_buf„r
->
hód
 !_tx_buf„r->
èû
)

429 
	`cbi
(*
_uc§b
, 
_rxí
);

430 
	`cbi
(*
_uc§b
, 
_txí
);

431 
	`cbi
(*
_uc§b
, 
_rxcõ
);

432 
	`cbi
(*
_uc§b
, 
_udrõ
);

435 
_rx_buf„r
->
hód
 = _rx_buf„r->
èû
;

436 
	}
}

438 
	gH¨dw¨eSîül
::
	$avaûabÀ
()

440  ()(
SERIAL_BUFFER_SIZE
 + 
_rx_buf„r
->
hód
 - _rx_buf„r->
èû
) % SERIAL_BUFFER_SIZE;

441 
	}
}

443 
	gH¨dw¨eSîül
::
	$≥ek
()

445 i‡(
_rx_buf„r
->
hód
 =_rx_buf„r->
èû
) {

448  
_rx_buf„r
->
buf„r
[_rx_buf„r->
èû
];

450 
	}
}

452 
	gH¨dw¨eSîül
::
	$ªad
()

455 i‡(
_rx_buf„r
->
hód
 =_rx_buf„r->
èû
) {

458 
c
 = 
_rx_buf„r
->
buf„r
[_rx_buf„r->
èû
];

459 
_rx_buf„r
->
èû
 = ()(_rx_buf„r->èû + 1Ë% 
SERIAL_BUFFER_SIZE
;

460  
c
;

462 
	}
}

464 
	gH¨dw¨eSîül
::
	$Êush
()

467 
å™smôtög
 && ! (*
_uc§a
 & 
	`_BV
(
TXC0
)));

468 
å™smôtög
 = 
Ál£
;

469 
	}
}

471 
size_t
 
	gH¨dw¨eSîül
::
	$wrôe
(
uöt8_t
 
c
)

473 
i
 = (
_tx_buf„r
->
hód
 + 1Ë% 
SERIAL_BUFFER_SIZE
;

478 
i
 =
_tx_buf„r
->
èû
)

481 
_tx_buf„r
->
buf„r
[_tx_buf„r->
hód
] = 
c
;

482 
_tx_buf„r
->
hód
 = 
i
;

484 
	`sbi
(*
_uc§b
, 
_udrõ
);

486 
å™smôtög
 = 
åue
;

487 
	`sbi
(*
_uc§a
, 
TXC0
);

490 
	}
}

492 
	gH¨dw¨eSîül
::
›î©‹
 
	$boﬁ
() {

493  
åue
;

494 
	}
}

498 #i‡
deföed
(
UBRRH
Ë&& deföed(
UBRRL
)

499 
H¨dw¨eSîül
 
Sîül
(&
rx_buf„r
, &
tx_buf„r
, &
UBRRH
, &
UBRRL
, &
UCSRA
, &
UCSRB
, &
UCSRC
, &
UDR
, 
RXEN
, 
TXEN
, 
RXCIE
, 
UDRIE
, 
U2X
);

500 #ñi‡
deföed
(
UBRR0H
Ë&& deföed(
UBRR0L
)

501 
H¨dw¨eSîül
 
Sîül
(&
rx_buf„r
, &
tx_buf„r
, &
UBRR0H
, &
UBRR0L
, &
UCSR0A
, &
UCSR0B
, &
UCSR0C
, &
UDR0
, 
RXEN0
, 
TXEN0
, 
RXCIE0
, 
UDRIE0
, 
U2X0
);

502 #ñi‡
deföed
(
USBCON
)

505 #îr‹ 
no
 
£rül
 
p‹t
 
deföed
 (port 0)

508 #i‡
deföed
(
UBRR1H
)

509 
H¨dw¨eSîül
 
Sîül1
(&
rx_buf„r1
, &
tx_buf„r1
, &
UBRR1H
, &
UBRR1L
, &
UCSR1A
, &
UCSR1B
, &
UCSR1C
, &
UDR1
, 
RXEN1
, 
TXEN1
, 
RXCIE1
, 
UDRIE1
, 
U2X1
);

511 #i‡
deföed
(
UBRR2H
)

512 
H¨dw¨eSîül
 
Sîül2
(&
rx_buf„r2
, &
tx_buf„r2
, &
UBRR2H
, &
UBRR2L
, &
UCSR2A
, &
UCSR2B
, &
UCSR2C
, &
UDR2
, 
RXEN2
, 
TXEN2
, 
RXCIE2
, 
UDRIE2
, 
U2X2
);

514 #i‡
deföed
(
UBRR3H
)

515 
H¨dw¨eSîül
 
Sîül3
(&
rx_buf„r3
, &
tx_buf„r3
, &
UBRR3H
, &
UBRR3L
, &
UCSR3A
, &
UCSR3B
, &
UCSR3C
, &
UDR3
, 
RXEN3
, 
TXEN3
, 
RXCIE3
, 
UDRIE3
, 
U2X3
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/HardwareSerial.h

23 #i‚de‡
H¨dw¨eSîül_h


24 
	#H¨dw¨eSîül_h


	)

26 
	~<öây≥s.h
>

28 
	~"Såóm.h
"

30 
	grög_buf„r
;

32 ˛as†
	cH¨dw¨eSîül
 : 
public
 
Såóm


34 
¥iv©e
:

35 
rög_buf„r
 *
_rx_buf„r
;

36 
rög_buf„r
 *
	m_tx_buf„r
;

37 vﬁ©ûê
uöt8_t
 *
	m_ubºh
;

38 vﬁ©ûê
uöt8_t
 *
	m_ubºl
;

39 vﬁ©ûê
uöt8_t
 *
	m_uc§a
;

40 vﬁ©ûê
uöt8_t
 *
	m_uc§b
;

41 vﬁ©ûê
uöt8_t
 *
	m_uc§c
;

42 vﬁ©ûê
uöt8_t
 *
	m_udr
;

43 
uöt8_t
 
	m_rxí
;

44 
uöt8_t
 
	m_txí
;

45 
uöt8_t
 
	m_rxcõ
;

46 
uöt8_t
 
	m_udrõ
;

47 
uöt8_t
 
	m_u2x
;

48 
boﬁ
 
	må™smôtög
;

49 
	mpublic
:

50 
H¨dw¨eSîül
(
rög_buf„r
 *
rx_buf„r
,Ñög_buf„∏*
tx_buf„r
,

51 vﬁ©ûê
uöt8_t
 *
ubºh
, vﬁ©ûêuöt8_à*
ubºl
,

52 vﬁ©ûê
uöt8_t
 *
uc§a
, vﬁ©ûêuöt8_à*
uc§b
,

53 vﬁ©ûê
uöt8_t
 *
uc§c
, vﬁ©ûêuöt8_à*
udr
,

54 
uöt8_t
 
rxí
, uöt8_à
txí
, uöt8_à
rxcõ
, uöt8_à
udrõ
, uöt8_à
u2x
);

55 
begö
();

56 
begö
(, 
uöt8_t
);

57 
íd
();

58 
vútuÆ
 
avaûabÀ
();

59 
vútuÆ
 
≥ek
();

60 
vútuÆ
 
ªad
();

61 
vútuÆ
 
Êush
();

62 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
);

63 
ölöe
 
size_t
 
	$wrôe
(
n
Ë{  
	`wrôe
((
uöt8_t
)n); }

64 
ölöe
 
size_t
 
	$wrôe
(
n
Ë{  
	`wrôe
((
uöt8_t
Í); 
	}
}

65 
ölöe
 
size_t
 
	$wrôe
(
n
Ë{  
	`wrôe
((
uöt8_t
Í); 
	}
}

66 
ölöe
 
size_t
 
	$wrôe
(
n
Ë{  
	`wrôe
((
uöt8_t
Í); 
	}
}

67 
usög
 
	gPröt
::
wrôe
;

68 
›î©‹
 
boﬁ
();

72 
	#SERIAL_5N1
 0x00

	)

73 
	#SERIAL_6N1
 0x02

	)

74 
	#SERIAL_7N1
 0x04

	)

75 
	#SERIAL_8N1
 0x06

	)

76 
	#SERIAL_5N2
 0x08

	)

77 
	#SERIAL_6N2
 0x0A

	)

78 
	#SERIAL_7N2
 0x0C

	)

79 
	#SERIAL_8N2
 0x0E

	)

80 
	#SERIAL_5E1
 0x20

	)

81 
	#SERIAL_6E1
 0x22

	)

82 
	#SERIAL_7E1
 0x24

	)

83 
	#SERIAL_8E1
 0x26

	)

84 
	#SERIAL_5E2
 0x28

	)

85 
	#SERIAL_6E2
 0x2A

	)

86 
	#SERIAL_7E2
 0x2C

	)

87 
	#SERIAL_8E2
 0x2E

	)

88 
	#SERIAL_5O1
 0x30

	)

89 
	#SERIAL_6O1
 0x32

	)

90 
	#SERIAL_7O1
 0x34

	)

91 
	#SERIAL_8O1
 0x36

	)

92 
	#SERIAL_5O2
 0x38

	)

93 
	#SERIAL_6O2
 0x3A

	)

94 
	#SERIAL_7O2
 0x3C

	)

95 
	#SERIAL_8O2
 0x3E

	)

97 #i‡
deföed
(
UBRRH
Ë|| deföed(
UBRR0H
)

98 
H¨dw¨eSîül
 
Sîül
;

99 #ñi‡
deföed
(
USBCON
)

100 
	~"USBAPI.h
"

103 #i‡
deföed
(
UBRR1H
)

104 
H¨dw¨eSîül
 
Sîül1
;

106 #i‡
deföed
(
UBRR2H
)

107 
H¨dw¨eSîül
 
Sîül2
;

109 #i‡
deföed
(
UBRR3H
)

110 
H¨dw¨eSîül
 
Sîül3
;

113 
	$£rülEvítRun
(Ë
	`__©åibuã__
((
wók
));

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/IPAddress.cpp

2 
	~<Arduöo.h
>

3 
	~<IPAddªss.h
>

5 
	gIPAddªss
::
	$IPAddªss
()

7 
	`mem£t
(
_addªss
, 0, (_address));

8 
	}
}

10 
	gIPAddªss
::
	$IPAddªss
(
uöt8_t
 
fú°_o˘ë
, uöt8_à
£c⁄d_o˘ë
, uöt8_à
thúd_o˘ë
, uöt8_à
fouπh_o˘ë
)

12 
_addªss
[0] = 
fú°_o˘ë
;

13 
_addªss
[1] = 
£c⁄d_o˘ë
;

14 
_addªss
[2] = 
thúd_o˘ë
;

15 
_addªss
[3] = 
fouπh_o˘ë
;

16 
	}
}

18 
	gIPAddªss
::
	$IPAddªss
(
uöt32_t
 
addªss
)

20 
	`mem˝y
(
_addªss
, &
addªss
, (_address));

21 
	}
}

23 
	gIPAddªss
::
	$IPAddªss
(c⁄° 
uöt8_t
 *
addªss
)

25 
	`mem˝y
(
_addªss
, 
addªss
, (_address));

26 
	}
}

28 
	gIPAddªss
& IPAddªss::
›î©‹
=(c⁄° 
uöt8_t
 *
addªss
)

30 
mem˝y
(
_addªss
, 
addªss
, (_address));

31  *
	gthis
;

34 
	gIPAddªss
& IPAddªss::
›î©‹
=(
uöt32_t
 
addªss
)

36 
mem˝y
(
_addªss
, (c⁄° 
uöt8_t
 *)&
addªss
, (_address));

37  *
	gthis
;

40 
boﬁ
 
	gIPAddªss
::
›î©‹
==(c⁄° 
uöt8_t
* 
addr
)

42  
memcmp
(
addr
, 
_addªss
, (_address)) == 0;

45 
size_t
 
	gIPAddªss
::
	$¥ötTo
(
Pröt
& 
p
) const

47 
size_t
 
n
 = 0;

48 
i
 =0; i < 3; i++)

50 
n
 +
p
.
	`¥öt
(
_addªss
[
i
], 
DEC
);

51 
n
 +
p
.
	`¥öt
('.');

53 
n
 +
p
.
	`¥öt
(
_addªss
[3], 
DEC
);

54  
n
;

55 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/IPAddress.h

26 #i‚de‡
IPAddªss_h


27 
	#IPAddªss_h


	)

29 
	~<PröèbÀ.h
>

33 ˛as†
	cIPAddªss
 : 
public
 
PröèbÀ
 {

34 
¥iv©e
:

35 
uöt8_t
 
_addªss
[4];

40 
uöt8_t
* 
	$øw_addªss
(Ë{  
_addªss
; };

42 
public
:

44 
	`IPAddªss
();

45 
	`IPAddªss
(
uöt8_t
 
fú°_o˘ë
, uöt8_à
£c⁄d_o˘ë
, uöt8_à
thúd_o˘ë
, uöt8_à
fouπh_o˘ë
);

46 
	`IPAddªss
(
uöt32_t
 
addªss
);

47 
	`IPAddªss
(c⁄° 
uöt8_t
 *
addªss
);

51 
›î©‹
 
	$uöt32_t
(Ë{  *((
uöt32_t
*)
_addªss
); 
	}
};

52 
boﬁ
 
	g›î©‹
==(c⁄° 
IPAddªss
& 
addr
Ë{  (*((
uöt32_t
*)
_addªss
)) == (*((uint32_t*)addr._address)); };

53 
boﬁ
 
	g›î©‹
==(c⁄° 
uöt8_t
* 
addr
);

56 
uöt8_t
 
	g›î©‹
[](
	gödex
Ëc⁄° {  
	g_addªss
[
ödex
]; };

57 
	guöt8_t
& 
	g›î©‹
[](
	gödex
Ë{  
	g_addªss
[
ödex
]; };

60 
	gIPAddªss
& 
	g›î©‹
=(c⁄° 
uöt8_t
 *
addªss
);

61 
	gIPAddªss
& 
	g›î©‹
=(
uöt32_t
 
addªss
);

63 
vútuÆ
 
size_t
 
	$¥ötTo
(
Pröt
& 
p
) const;

65 
‰õnd
 
˛ass
 
Ethî√tCœss
;

66 
‰õnd
 
˛ass
 
UDP
;

67 
‰õnd
 
˛ass
 
Clõ¡
;

68 
‰õnd
 
˛ass
 
Sîvî
;

69 
‰õnd
 
˛ass
 
Dh˝Cœss
;

70 
‰õnd
 
˛ass
 
DNSClõ¡
;

71 
	}
};

73 c⁄° 
IPAddªss
 
INADDR_NONE
(0,0,0,0);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/Platform.h

2 #i‚de‡
__PLATFORM_H__


3 
	#__PLATFORM_H__


	)

5 
	~<öây≥s.h
>

6 
	~<avr/pgm•a˚.h
>

7 
	~<avr/ì¥om.h
>

8 
	~<avr/öãºu±.h
>

9 
	~<utû/dñay.h
>

11 
	tu8
;

12 
	tu16
;

13 
	tu32
;

15 
	~"Arduöo.h
"

17 #i‡
deföed
(
USBCON
)

18 
	~"USBDesc.h
"

19 
	~"USBC‹e.h
"

20 
	~"USBAPI.h
"

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/Print.cpp

22 
	~<°dlib.h
>

23 
	~<°dio.h
>

24 
	~<°rög.h
>

25 
	~<m©h.h
>

26 
	~"Arduöo.h
"

28 
	~"Pröt.h
"

33 
size_t
 
	gPröt
::
	$wrôe
(c⁄° 
uöt8_t
 *
buf„r
, 
size_t
 
size
)

35 
size_t
 
n
 = 0;

36 
size
--) {

37 
n
 +
	`wrôe
(*
buf„r
++);

39  
n
;

40 
	}
}

42 
size_t
 
	gPröt
::
	$¥öt
(c⁄° 
__FœshSåögHñ≥r
 *
ifsh
)

44 c⁄° 
PROGMEM
 *
p
 = (c⁄° PROGMEM *)
ifsh
;

45 
size_t
 
n
 = 0;

47 
c
 = 
	`pgm_ªad_byã
(
p
++);

48 i‡(
c
 == 0) ;

49 
n
 +
	`wrôe
(
c
);

51  
n
;

52 
	}
}

54 
size_t
 
	gPröt
::
	$¥öt
(c⁄° 
Såög
 &
s
)

56 
size_t
 
n
 = 0;

57 
uöt16_t
 
i
 = 0; i < 
s
.
	`Àngth
(); i++) {

58 
n
 +
	`wrôe
(
s
[
i
]);

60  
n
;

61 
	}
}

63 
size_t
 
	gPröt
::
	$¥öt
(c⁄° 
°r
[])

65  
	`wrôe
(
°r
);

66 
	}
}

68 
size_t
 
	gPröt
::
	$¥öt
(
c
)

70  
	`wrôe
(
c
);

71 
	}
}

73 
size_t
 
	gPröt
::
	$¥öt
(
b
, 
ba£
)

75  
	`¥öt
((Ë
b
, 
ba£
);

76 
	}
}

78 
size_t
 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

80  
	`¥öt
((Ë
n
, 
ba£
);

81 
	}
}

83 
size_t
 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

85  
	`¥öt
((Ë
n
, 
ba£
);

86 
	}
}

88 
size_t
 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

90 i‡(
ba£
 == 0) {

91  
	`wrôe
(
n
);

92 } i‡(
ba£
 == 10) {

93 i‡(
n
 < 0) {

94 
t
 = 
	`¥öt
('-');

95 
n
 = -n;

96  
	`¥ötNumbî
(
n
, 10Ë+ 
t
;

98  
	`¥ötNumbî
(
n
, 10);

100  
	`¥ötNumbî
(
n
, 
ba£
);

102 
	}
}

104 
size_t
 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

106 i‡(
ba£
 =0Ë 
	`wrôe
(
n
);

107  
	`¥ötNumbî
(
n
, 
ba£
);

108 
	}
}

110 
size_t
 
	gPröt
::
	$¥öt
(
n
, 
digôs
)

112  
	`¥ötFlﬂt
(
n
, 
digôs
);

113 
	}
}

115 
size_t
 
	gPröt
::
	$¥öén
(c⁄° 
__FœshSåögHñ≥r
 *
ifsh
)

117 
size_t
 
n
 = 
	`¥öt
(
ifsh
);

118 
n
 +
	`¥öén
();

119  
n
;

120 
	}
}

122 
size_t
 
	gPröt
::
	$¥öt
(c⁄° 
PröèbÀ
& 
x
)

124  
x
.
	`¥ötTo
(*
this
);

125 
	}
}

127 
size_t
 
	gPröt
::
	$¥öén
()

129 
size_t
 
n
 = 
	`¥öt
('\r');

130 
n
 +
	`¥öt
('\n');

131  
n
;

132 
	}
}

134 
size_t
 
	gPröt
::
	$¥öén
(c⁄° 
Såög
 &
s
)

136 
size_t
 
n
 = 
	`¥öt
(
s
);

137 
n
 +
	`¥öén
();

138  
n
;

139 
	}
}

141 
size_t
 
	gPröt
::
	$¥öén
(c⁄° 
c
[])

143 
size_t
 
n
 = 
	`¥öt
(
c
);

144 
n
 +
	`¥öén
();

145  
n
;

146 
	}
}

148 
size_t
 
	gPröt
::
	$¥öén
(
c
)

150 
size_t
 
n
 = 
	`¥öt
(
c
);

151 
n
 +
	`¥öén
();

152  
n
;

153 
	}
}

155 
size_t
 
	gPröt
::
	$¥öén
(
b
, 
ba£
)

157 
size_t
 
n
 = 
	`¥öt
(
b
, 
ba£
);

158 
n
 +
	`¥öén
();

159  
n
;

160 
	}
}

162 
size_t
 
	gPröt
::
	$¥öén
(
num
, 
ba£
)

164 
size_t
 
n
 = 
	`¥öt
(
num
, 
ba£
);

165 
n
 +
	`¥öén
();

166  
n
;

167 
	}
}

169 
size_t
 
	gPröt
::
	$¥öén
(
num
, 
ba£
)

171 
size_t
 
n
 = 
	`¥öt
(
num
, 
ba£
);

172 
n
 +
	`¥öén
();

173  
n
;

174 
	}
}

176 
size_t
 
	gPröt
::
	$¥öén
(
num
, 
ba£
)

178 
size_t
 
n
 = 
	`¥öt
(
num
, 
ba£
);

179 
n
 +
	`¥öén
();

180  
n
;

181 
	}
}

183 
size_t
 
	gPröt
::
	$¥öén
(
num
, 
ba£
)

185 
size_t
 
n
 = 
	`¥öt
(
num
, 
ba£
);

186 
n
 +
	`¥öén
();

187  
n
;

188 
	}
}

190 
size_t
 
	gPröt
::
	$¥öén
(
num
, 
digôs
)

192 
size_t
 
n
 = 
	`¥öt
(
num
, 
digôs
);

193 
n
 +
	`¥öén
();

194  
n
;

195 
	}
}

197 
size_t
 
	gPröt
::
	$¥öén
(c⁄° 
PröèbÀ
& 
x
)

199 
size_t
 
n
 = 
	`¥öt
(
x
);

200 
n
 +
	`¥öén
();

201  
n
;

202 
	}
}

206 
size_t
 
	gPröt
::
	$¥ötNumbî
(
n
, 
uöt8_t
 
ba£
) {

207 
buf
[8 * () + 1];

208 *
°r
 = &
buf
[(buf) - 1];

210 *
°r
 = '\0';

213 i‡(
ba£
 < 2) base = 10;

216 
m
 = 
n
;

217 
n
 /
ba£
;

218 
c
 = 
m
 - 
ba£
 * 
n
;

219 *--
°r
 = 
c
 < 10 ? c + '0' : c + 'A' - 10;

220 } 
n
);

222  
	`wrôe
(
°r
);

223 
	}
}

225 
size_t
 
	gPröt
::
	$¥ötFlﬂt
(
numbî
, 
uöt8_t
 
digôs
)

227 
size_t
 
n
 = 0;

229 i‡(
	`i¢™
(
numbî
)Ë 
	`¥öt
("nan");

230 i‡(
	`isöf
(
numbî
)Ë 
	`¥öt
("inf");

231 i‡(
numbî
 > 4294967040.0Ë 
	`¥öt
 ("ovf");

232 i‡(
numbî
 <-4294967040.0Ë 
	`¥öt
 ("ovf");

235 i‡(
numbî
 < 0.0)

237 
n
 +
	`¥öt
('-');

238 
numbî
 = -number;

242 
roundög
 = 0.5;

243 
uöt8_t
 
i
=0; i<
digôs
; ++i)

244 
roundög
 /= 10.0;

246 
numbî
 +
roundög
;

249 
öt_∑π
 = ()
numbî
;

250 
ªmaödî
 = 
numbî
 - ()
öt_∑π
;

251 
n
 +
	`¥öt
(
öt_∑π
);

254 i‡(
digôs
 > 0) {

255 
n
 +
	`¥öt
(".");

259 
digôs
-- > 0)

261 
ªmaödî
 *= 10.0;

262 
toPröt
 = (
ªmaödî
);

263 
n
 +
	`¥öt
(
toPröt
);

264 
ªmaödî
 -
toPröt
;

267  
n
;

268 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/Print.h

20 #i‚de‡
Pröt_h


21 
	#Pröt_h


	)

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

26 
	~"WSåög.h
"

27 
	~"PröèbÀ.h
"

29 
	#DEC
 10

	)

30 
	#HEX
 16

	)

31 
	#OCT
 8

	)

32 
	#BIN
 2

	)

34 ˛as†
	cPröt


36 
	m¥iv©e
:

37 
wrôe_îr‹
;

38 
size_t
 
¥ötNumbî
(, 
uöt8_t
);

39 
size_t
 
¥ötFlﬂt
(, 
uöt8_t
);

40 
	m¥Ÿe˘ed
:

41 
	$£tWrôeEº‹
(
îr
 = 1Ë{ 
wrôe_îr‹
 =Érr; }

42 
public
:

43 
	$Pröt
(Ë: 
	$wrôe_îr‹
(0Ë{
	}
}

45 
	$gëWrôeEº‹
(Ë{  
wrôe_îr‹
; 
	}
}

46 
	$˛órWrôeEº‹
(Ë{ 
	`£tWrôeEº‹
(0); 
	}
}

48 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
) = 0;

49 
size_t
 
	$wrôe
(c⁄° *
°r
) {

50 i‡(
°r
 =
NULL
)  0;

51  
	`wrôe
((c⁄° 
uöt8_t
 *)
°r
, 
	`°æí
(str));

52 
	}
}

53 
vútuÆ
 
size_t
 
wrôe
(c⁄° 
uöt8_t
 *
buf„r
, size_à
size
);

55 
size_t
 
¥öt
(c⁄° 
__FœshSåögHñ≥r
 *);

56 
size_t
 
¥öt
(c⁄° 
Såög
 &);

57 
size_t
 
¥öt
(const []);

58 
size_t
 
¥öt
();

59 
size_t
 
¥öt
(, 
DEC
);

60 
size_t
 
¥öt
(, 
DEC
);

61 
size_t
 
¥öt
(, 
DEC
);

62 
size_t
 
¥öt
(, 
DEC
);

63 
size_t
 
¥öt
(, 
DEC
);

64 
size_t
 
¥öt
(, = 2);

65 
size_t
 
¥öt
(c⁄° 
PröèbÀ
&);

67 
size_t
 
¥öén
(c⁄° 
__FœshSåögHñ≥r
 *);

68 
size_t
 
¥öén
(c⁄° 
Såög
 &
s
);

69 
size_t
 
¥öén
(const []);

70 
size_t
 
¥öén
();

71 
size_t
 
¥öén
(, 
DEC
);

72 
size_t
 
¥öén
(, 
DEC
);

73 
size_t
 
¥öén
(, 
DEC
);

74 
size_t
 
¥öén
(, 
DEC
);

75 
size_t
 
¥öén
(, 
DEC
);

76 
size_t
 
¥öén
(, = 2);

77 
size_t
 
¥öén
(c⁄° 
PröèbÀ
&);

78 
size_t
 
¥öén
();

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/Printable.h

20 #i‚de‡
PröèbÀ_h


21 
	#PröèbÀ_h


	)

23 
	~<√w.h
>

25 
˛ass
 
	gPröt
;

33 ˛as†
	cPröèbÀ


35 
	mpublic
:

36 
vútuÆ
 
size_t
 
	$¥ötTo
(
Pröt
& 
p
) const = 0;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/Server.h

1 #i‚de‡
£rvî_h


2 
	#£rvî_h


	)

4 ˛as†
	cSîvî
 : 
public
 
Pröt
 {

5 
public
:

6 
vútuÆ
 
begö
() =0;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/Stream.cpp

23 
	~"Arduöo.h
"

24 
	~"Såóm.h
"

26 
	#PARSE_TIMEOUT
 1000

27 
	#NO_SKIP_CHAR
 1

28 

	)

30 
	gSåóm
::
	$timedRód
()

32 
c
;

33 
_°¨tMûlis
 = 
	`mûlis
();

35 
c
 = 
	`ªad
();

36 i‡(
c
 >= 0)  c;

37 } 
	`mûlis
(Ë- 
_°¨tMûlis
 < 
_timeout
);

39 
	}
}

42 
	gSåóm
::
	$timedPìk
()

44 
c
;

45 
_°¨tMûlis
 = 
	`mûlis
();

47 
c
 = 
	`≥ek
();

48 i‡(
c
 >= 0)  c;

49 } 
	`mûlis
(Ë- 
_°¨tMûlis
 < 
_timeout
);

51 
	}
}

55 
	gSåóm
::
	$≥ekNextDigô
()

57 
c
;

59 
c
 = 
	`timedPìk
();

60 i‡(
c
 < 0)  c;

61 i‡(
c
 == '-')  c;

62 i‡(
c
 >= '0' && c <= '9')  c;

63 
	`ªad
();

65 
	}
}

70 
	gSåóm
::
	$£tTimeout
(
timeout
)

72 
_timeout
 = 
timeout
;

73 
	}
}

76 
boﬁ
 
	gSåóm
::
	$föd
(*
èrgë
)

78  
	`födU¡û
(
èrgë
, 
NULL
);

79 
	}
}

83 
boﬁ
 
	gSåóm
::
	$föd
(*
èrgë
, 
size_t
 
Àngth
)

85  
	`födU¡û
(
èrgë
, 
Àngth
, 
NULL
, 0);

86 
	}
}

89 
boﬁ
 
	gSåóm
::
	$födU¡û
(*
èrgë
, *
ãrmö©‹
)

91  
	`födU¡û
(
èrgë
, 
	`°æí
—¨gë), 
ãrmö©‹
, strlen(terminator));

92 
	}
}

97 
boﬁ
 
	gSåóm
::
	$födU¡û
(*
èrgë
, 
size_t
 
èrgëLí
, *
ãrmö©‹
, size_à
ãrmLí
)

99 
size_t
 
ödex
 = 0;

100 
size_t
 
ãrmIndex
 = 0;

101 
c
;

103 if–*
èrgë
 == 0)

104  
åue
;

105  (
c
 = 
	`timedRód
()) > 0){

107 if(
c
 !
èrgë
[
ödex
])

108 
ödex
 = 0;

110 if–
c
 =
èrgë
[
ödex
]){

112 if(++
ödex
 >
èrgëLí
){

113  
åue
;

117 if(
ãrmLí
 > 0 && 
c
 =
ãrmö©‹
[
ãrmIndex
]){

118 if(++
ãrmIndex
 >
ãrmLí
)

119  
Ál£
;

122 
ãrmIndex
 = 0;

124  
Ál£
;

125 
	}
}

131 
	gSåóm
::
	$∑r£I¡
()

133  
	`∑r£I¡
(
NO_SKIP_CHAR
);

134 
	}
}

138 
	gSåóm
::
	$∑r£I¡
(
skùCh¨
)

140 
boﬁón
 
isNeg©ive
 = 
Ál£
;

141 
vÆue
 = 0;

142 
c
;

144 
c
 = 
	`≥ekNextDigô
();

146 if(
c
 < 0)

150 if(
c
 =
skùCh¨
)

152 if(
c
 == '-')

153 
isNeg©ive
 = 
åue
;

154 if(
c
 >= '0' && c <= '9')

155 
vÆue
 = vÆuê* 10 + 
c
 - '0';

156 
	`ªad
();

157 
c
 = 
	`timedPìk
();

159  (
c
 >'0' && c <'9'Ë|| c =
skùCh¨
 );

161 if(
isNeg©ive
)

162 
vÆue
 = -value;

163  
vÆue
;

164 
	}
}

168 
	gSåóm
::
	$∑r£Flﬂt
()

170  
	`∑r£Flﬂt
(
NO_SKIP_CHAR
);

171 
	}
}

175 
	gSåóm
::
	$∑r£Flﬂt
(
skùCh¨
){

176 
boﬁón
 
isNeg©ive
 = 
Ál£
;

177 
boﬁón
 
isFø˘i⁄
 = 
Ál£
;

178 
vÆue
 = 0;

179 
c
;

180 
‰a˘i⁄
 = 1.0;

182 
c
 = 
	`≥ekNextDigô
();

184 if(
c
 < 0)

188 if(
c
 =
skùCh¨
)

190 if(
c
 == '-')

191 
isNeg©ive
 = 
åue
;

192 i‡(
c
 == '.')

193 
isFø˘i⁄
 = 
åue
;

194 if(
c
 >= '0' && c <= '9') {

195 
vÆue
 = vÆuê* 10 + 
c
 - '0';

196 if(
isFø˘i⁄
)

197 
‰a˘i⁄
 *= 0.1;

199 
	`ªad
();

200 
c
 = 
	`timedPìk
();

202  (
c
 >'0' && c <'9'Ë|| c ='.' || c =
skùCh¨
 );

204 if(
isNeg©ive
)

205 
vÆue
 = -value;

206 if(
isFø˘i⁄
)

207  
vÆue
 * 
‰a˘i⁄
;

209  
vÆue
;

210 
	}
}

217 
size_t
 
	gSåóm
::
	$ªadByãs
(*
buf„r
, 
size_t
 
Àngth
)

219 
size_t
 
cou¡
 = 0;

220 
cou¡
 < 
Àngth
) {

221 
c
 = 
	`timedRód
();

222 i‡(
c
 < 0) ;

223 *
buf„r
++ = ()
c
;

224 
cou¡
++;

226  
cou¡
;

227 
	}
}

234 
size_t
 
	gSåóm
::
	$ªadByãsU¡û
(
ãrmö©‹
, *
buf„r
, 
size_t
 
Àngth
)

236 i‡(
Àngth
 < 1)  0;

237 
size_t
 
ödex
 = 0;

238 
ödex
 < 
Àngth
) {

239 
c
 = 
	`timedRód
();

240 i‡(
c
 < 0 || c =
ãrmö©‹
) ;

241 *
buf„r
++ = ()
c
;

242 
ödex
++;

244  
ödex
;

245 
	}
}

247 
Såög
 
	gSåóm
::
	$ªadSåög
()

249 
Såög
 
ªt
;

250 
c
 = 
	`timedRód
();

251 
c
 >= 0)

253 
ªt
 +()
c
;

254 
c
 = 
	`timedRód
();

256  
ªt
;

257 
	}
}

259 
Såög
 
	gSåóm
::
	$ªadSåögU¡û
(
ãrmö©‹
)

261 
Såög
 
ªt
;

262 
c
 = 
	`timedRód
();

263 
c
 >0 && c !
ãrmö©‹
)

265 
ªt
 +()
c
;

266 
c
 = 
	`timedRód
();

268  
ªt
;

269 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/Stream.h

22 #i‚de‡
Såóm_h


23 
	#Såóm_h


	)

25 
	~<öây≥s.h
>

26 
	~"Pröt.h
"

38 ˛as†
	cSåóm
 : 
public
 
Pröt


40 
¥iv©e
:

41 
_timeout
;

42 
	m_°¨tMûlis
;

43 
timedRód
();

44 
timedPìk
();

45 
≥ekNextDigô
();

47 
	mpublic
:

48 
vútuÆ
 
avaûabÀ
() = 0;

49 
vútuÆ
 
ªad
() = 0;

50 
vútuÆ
 
≥ek
() = 0;

51 
vútuÆ
 
Êush
() = 0;

53 
	$Såóm
(Ë{
_timeout
=1000;}

57 
	`£tTimeout
(
timeout
);

59 
boﬁ
 
	`föd
(*
èrgë
);

62 
boﬁ
 
	`föd
(*
èrgë
, 
size_t
 
Àngth
);

65 
boﬁ
 
	`födU¡û
(*
èrgë
, *
ãrmö©‹
);

67 
boﬁ
 
	`födU¡û
(*
èrgë
, 
size_t
 
èrgëLí
, *
ãrmö©e
, size_à
ãrmLí
);

70 
	`∑r£I¡
();

74 
	`∑r£Flﬂt
();

76 
size_t
 
	`ªadByãs
–*
buf„r
, size_à
Àngth
);

80 
size_t
 
	`ªadByãsU¡û
–
ãrmö©‹
, *
buf„r
, size_à
Àngth
);

85 
Såög
 
	`ªadSåög
();

86 
Såög
 
	`ªadSåögU¡û
(
ãrmö©‹
);

88 
¥Ÿe˘ed
:

89 
	`∑r£I¡
(
skùCh¨
);

93 
	`∑r£Flﬂt
(
skùCh¨
);

94 
	}
};

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/Tone.cpp

35 
	~<avr/öãºu±.h
>

36 
	~<avr/pgm•a˚.h
>

37 
	~"Arduöo.h
"

38 
	~"pös_¨duöo.h
"

40 #i‡
deföed
(
TCCR2
)

41 
	#TCCR2A
 
TCCR2


	)

42 
	#TCCR2B
 
TCCR2


	)

43 
	#COM2A1
 
COM21


	)

44 
	#COM2A0
 
COM20


	)

45 
	#OCR2A
 
OCR2


	)

46 
	#TIMSK2
 
TIMSK


	)

47 
	#OCIE2A
 
OCIE2


	)

48 
	#TIMER2_COMPA_ve˘
 
TIMER2_COMP_ve˘


	)

49 
	#TIMSK1
 
TIMSK


	)

57 #i‡
deföed
(
TIMSK0
)

58 vﬁ©ûê
	gtimî0_toggÀ_cou¡
;

59 vﬁ©ûê
uöt8_t
 *
	gtimî0_pö_p‹t
;

60 vﬁ©ûê
uöt8_t
 
	gtimî0_pö_mask
;

63 vﬁ©ûê
	gtimî1_toggÀ_cou¡
;

64 vﬁ©ûê
uöt8_t
 *
	gtimî1_pö_p‹t
;

65 vﬁ©ûê
uöt8_t
 
	gtimî1_pö_mask
;

66 vﬁ©ûê
	gtimî2_toggÀ_cou¡
;

67 vﬁ©ûê
uöt8_t
 *
	gtimî2_pö_p‹t
;

68 vﬁ©ûê
uöt8_t
 
	gtimî2_pö_mask
;

70 #i‡
deföed
(
TIMSK3
)

71 vﬁ©ûê
	gtimî3_toggÀ_cou¡
;

72 vﬁ©ûê
uöt8_t
 *
	gtimî3_pö_p‹t
;

73 vﬁ©ûê
uöt8_t
 
	gtimî3_pö_mask
;

76 #i‡
deföed
(
TIMSK4
)

77 vﬁ©ûê
	gtimî4_toggÀ_cou¡
;

78 vﬁ©ûê
uöt8_t
 *
	gtimî4_pö_p‹t
;

79 vﬁ©ûê
uöt8_t
 
	gtimî4_pö_mask
;

82 #i‡
deföed
(
TIMSK5
)

83 vﬁ©ûê
	gtimî5_toggÀ_cou¡
;

84 vﬁ©ûê
uöt8_t
 *
	gtimî5_pö_p‹t
;

85 vﬁ©ûê
uöt8_t
 
	gtimî5_pö_mask
;

90 #i‡
deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega2560__
)

92 
	#AVAILABLE_TONE_PINS
 1

	)

93 
	#USE_TIMER2


	)

95 c⁄° 
uöt8_t
 
PROGMEM
 
	gt⁄e_pö_to_timî_PGM
[] = { 2 };

96 
uöt8_t
 
	gt⁄e_pös
[
AVAILABLE_TONE_PINS
] = { 255 };

98 #ñi‡
deföed
(
__AVR_ATmega8__
)

100 
	#AVAILABLE_TONE_PINS
 1

	)

101 
	#USE_TIMER2


	)

103 c⁄° 
uöt8_t
 
PROGMEM
 
	gt⁄e_pö_to_timî_PGM
[] = { 2 };

104 
uöt8_t
 
	gt⁄e_pös
[
AVAILABLE_TONE_PINS
] = { 255 };

106 #ñi‡
deföed
(
__AVR_ATmega32U4__
)

108 
	#AVAILABLE_TONE_PINS
 1

	)

109 
	#USE_TIMER3


	)

111 c⁄° 
uöt8_t
 
PROGMEM
 
	gt⁄e_pö_to_timî_PGM
[] = { 3 };

112 
uöt8_t
 
	gt⁄e_pös
[
AVAILABLE_TONE_PINS
] = { 255 };

116 
	#AVAILABLE_TONE_PINS
 1

	)

117 
	#USE_TIMER2


	)

120 c⁄° 
uöt8_t
 
PROGMEM
 
	gt⁄e_pö_to_timî_PGM
[] = { 2 };

121 
uöt8_t
 
	gt⁄e_pös
[
AVAILABLE_TONE_PINS
] = { 255 };

127 
öt8_t
 
	$t⁄eBegö
(
uöt8_t
 
_pö
)

129 
öt8_t
 
_timî
 = -1;

132 
i
 = 0; i < 
AVAILABLE_TONE_PINS
; i++) {

133 i‡(
t⁄e_pös
[
i
] =
_pö
) {

134  
	`pgm_ªad_byã
(
t⁄e_pö_to_timî_PGM
 + 
i
);

139 
i
 = 0; i < 
AVAILABLE_TONE_PINS
; i++) {

140 i‡(
t⁄e_pös
[
i
] == 255) {

141 
t⁄e_pös
[
i
] = 
_pö
;

142 
_timî
 = 
	`pgm_ªad_byã
(
t⁄e_pö_to_timî_PGM
 + 
i
);

147 i‡(
_timî
 != -1)

153 
_timî
)

155 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
TCCR0B
)

158 
TCCR0A
 = 0;

159 
TCCR0B
 = 0;

160 
	`bôWrôe
(
TCCR0A
, 
WGM01
, 1);

161 
	`bôWrôe
(
TCCR0B
, 
CS00
, 1);

162 
timî0_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

163 
timî0_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

167 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
TCCR1B
Ë&& deföed(
WGM12
)

170 
TCCR1A
 = 0;

171 
TCCR1B
 = 0;

172 
	`bôWrôe
(
TCCR1B
, 
WGM12
, 1);

173 
	`bôWrôe
(
TCCR1B
, 
CS10
, 1);

174 
timî1_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

175 
timî1_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

179 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
TCCR2B
)

182 
TCCR2A
 = 0;

183 
TCCR2B
 = 0;

184 
	`bôWrôe
(
TCCR2A
, 
WGM21
, 1);

185 
	`bôWrôe
(
TCCR2B
, 
CS20
, 1);

186 
timî2_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

187 
timî2_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

191 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
TCCR3B
Ë&& deföed(
TIMSK3
)

194 
TCCR3A
 = 0;

195 
TCCR3B
 = 0;

196 
	`bôWrôe
(
TCCR3B
, 
WGM32
, 1);

197 
	`bôWrôe
(
TCCR3B
, 
CS30
, 1);

198 
timî3_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

199 
timî3_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

203 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
TCCR4B
Ë&& deföed(
TIMSK4
)

206 
TCCR4A
 = 0;

207 
TCCR4B
 = 0;

208 #i‡
	`deföed
(
WGM42
)

209 
	`bôWrôe
(
TCCR4B
, 
WGM42
, 1);

210 #ñi‡
	`deföed
(
CS43
)

211 #w¨nög 
this
 
may
 
nŸ
 
be
 
c‹ª˘


213 
	`bôWrôe
(
TCCR4B
, 
CS43
, 1);

215 
	`bôWrôe
(
TCCR4B
, 
CS40
, 1);

216 
timî4_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

217 
timî4_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

221 #i‡
	`deföed
(
TCCR5A
Ë&& deföed(
TCCR5B
Ë&& deföed(
TIMSK5
)

224 
TCCR5A
 = 0;

225 
TCCR5B
 = 0;

226 
	`bôWrôe
(
TCCR5B
, 
WGM52
, 1);

227 
	`bôWrôe
(
TCCR5B
, 
CS50
, 1);

228 
timî5_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

229 
timî5_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

235  
_timî
;

236 
	}
}

242 
	$t⁄e
(
uöt8_t
 
_pö
, 
‰equícy
, 
duøti⁄
)

244 
uöt8_t
 
¥esˇœrbôs
 = 0b001;

245 
toggÀ_cou¡
 = 0;

246 
uöt32_t
 
o¸
 = 0;

247 
öt8_t
 
_timî
;

249 
_timî
 = 
	`t⁄eBegö
(
_pö
);

251 i‡(
_timî
 >= 0)

254 
	`pöMode
(
_pö
, 
OUTPUT
);

257 i‡(
_timî
 == 0 || _timer == 2)

259 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 - 1;

260 
¥esˇœrbôs
 = 0b001;

261 i‡(
o¸
 > 255)

263 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 8 - 1;

264 
¥esˇœrbôs
 = 0b010;

266 i‡(
_timî
 =2 && 
o¸
 > 255)

268 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 32 - 1;

269 
¥esˇœrbôs
 = 0b011;

272 i‡(
o¸
 > 255)

274 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 64 - 1;

275 
¥esˇœrbôs
 = 
_timî
 == 0 ? 0b011 : 0b100;

277 i‡(
_timî
 =2 && 
o¸
 > 255)

279 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 128 - 1;

280 
¥esˇœrbôs
 = 0b101;

283 i‡(
o¸
 > 255)

285 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 256 - 1;

286 
¥esˇœrbôs
 = 
_timî
 == 0 ? 0b100 : 0b110;

287 i‡(
o¸
 > 255)

290 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 1024 - 1;

291 
¥esˇœrbôs
 = 
_timî
 == 0 ? 0b101 : 0b111;

297 #i‡
	`deföed
(
TCCR0B
)

298 i‡(
_timî
 == 0)

300 
TCCR0B
 = 
¥esˇœrbôs
;

304 #i‡
	`deföed
(
TCCR2B
)

306 
TCCR2B
 = 
¥esˇœrbôs
;

317 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 - 1;

319 
¥esˇœrbôs
 = 0b001;

320 i‡(
o¸
 > 0xffff)

322 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 64 - 1;

323 
¥esˇœrbôs
 = 0b011;

326 i‡(
_timî
 == 1)

328 #i‡
	`deföed
(
TCCR1B
)

329 
TCCR1B
 = (TCCR1B & 0b11111000Ë| 
¥esˇœrbôs
;

332 #i‡
	`deföed
(
TCCR3B
)

333 i‡(
_timî
 == 3)

334 
TCCR3B
 = (TCCR3B & 0b11111000Ë| 
¥esˇœrbôs
;

336 #i‡
	`deföed
(
TCCR4B
)

337 i‡(
_timî
 == 4)

338 
TCCR4B
 = (TCCR4B & 0b11111000Ë| 
¥esˇœrbôs
;

340 #i‡
	`deföed
(
TCCR5B
)

341 i‡(
_timî
 == 5)

342 
TCCR5B
 = (TCCR5B & 0b11111000Ë| 
¥esˇœrbôs
;

349 i‡(
duøti⁄
 > 0)

351 
toggÀ_cou¡
 = 2 * 
‰equícy
 * 
duøti⁄
 / 1000;

355 
toggÀ_cou¡
 = -1;

361 
_timî
)

364 #i‡
	`deföed
(
OCR0A
Ë&& deföed(
TIMSK0
Ë&& deföed(
OCIE0A
)

366 
OCR0A
 = 
o¸
;

367 
timî0_toggÀ_cou¡
 = 
toggÀ_cou¡
;

368 
	`bôWrôe
(
TIMSK0
, 
OCIE0A
, 1);

373 #i‡
	`deföed
(
OCR1A
Ë&& deföed(
TIMSK1
Ë&& deföed(
OCIE1A
)

374 
OCR1A
 = 
o¸
;

375 
timî1_toggÀ_cou¡
 = 
toggÀ_cou¡
;

376 
	`bôWrôe
(
TIMSK1
, 
OCIE1A
, 1);

377 #ñi‡
	`deföed
(
OCR1A
Ë&& deföed(
TIMSK
Ë&& deföed(
OCIE1A
)

379 
OCR1A
 = 
o¸
;

380 
timî1_toggÀ_cou¡
 = 
toggÀ_cou¡
;

381 
	`bôWrôe
(
TIMSK
, 
OCIE1A
, 1);

385 #i‡
	`deföed
(
OCR2A
Ë&& deföed(
TIMSK2
Ë&& deföed(
OCIE2A
)

387 
OCR2A
 = 
o¸
;

388 
timî2_toggÀ_cou¡
 = 
toggÀ_cou¡
;

389 
	`bôWrôe
(
TIMSK2
, 
OCIE2A
, 1);

393 #i‡
	`deföed
(
TIMSK3
)

395 
OCR3A
 = 
o¸
;

396 
timî3_toggÀ_cou¡
 = 
toggÀ_cou¡
;

397 
	`bôWrôe
(
TIMSK3
, 
OCIE3A
, 1);

401 #i‡
	`deföed
(
TIMSK4
)

403 
OCR4A
 = 
o¸
;

404 
timî4_toggÀ_cou¡
 = 
toggÀ_cou¡
;

405 
	`bôWrôe
(
TIMSK4
, 
OCIE4A
, 1);

409 #i‡
	`deföed
(
OCR5A
Ë&& deföed(
TIMSK5
Ë&& deföed(
OCIE5A
)

411 
OCR5A
 = 
o¸
;

412 
timî5_toggÀ_cou¡
 = 
toggÀ_cou¡
;

413 
	`bôWrôe
(
TIMSK5
, 
OCIE5A
, 1);

419 
	}
}

425 
	$dißbÀTimî
(
uöt8_t
 
_timî
)

427 
_timî
)

430 #i‡
	`deföed
(
TIMSK0
)

431 
TIMSK0
 = 0;

432 #ñi‡
	`deföed
(
TIMSK
)

433 
TIMSK
 = 0;

437 #i‡
	`deföed
(
TIMSK1
Ë&& deföed(
OCIE1A
)

439 
	`bôWrôe
(
TIMSK1
, 
OCIE1A
, 0);

444 #i‡
	`deföed
(
TIMSK2
Ë&& deföed(
OCIE2A
)

445 
	`bôWrôe
(
TIMSK2
, 
OCIE2A
, 0);

447 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
WGM20
)

448 
TCCR2A
 = (1 << 
WGM20
);

450 #i‡
	`deföed
(
TCCR2B
Ë&& deföed(
CS22
)

451 
TCCR2B
 = (TCCR2B & 0b11111000Ë| (1 << 
CS22
);

453 #i‡
	`deföed
(
OCR2A
)

454 
OCR2A
 = 0;

458 #i‡
	`deföed
(
TIMSK3
)

460 
TIMSK3
 = 0;

464 #i‡
	`deföed
(
TIMSK4
)

466 
TIMSK4
 = 0;

470 #i‡
	`deföed
(
TIMSK5
)

472 
TIMSK5
 = 0;

476 
	}
}

479 
	$noT⁄e
(
uöt8_t
 
_pö
)

481 
öt8_t
 
_timî
 = -1;

483 
i
 = 0; i < 
AVAILABLE_TONE_PINS
; i++) {

484 i‡(
t⁄e_pös
[
i
] =
_pö
) {

485 
_timî
 = 
	`pgm_ªad_byã
(
t⁄e_pö_to_timî_PGM
 + 
i
);

486 
t⁄e_pös
[
i
] = 255;

490 
	`dißbÀTimî
(
_timî
);

492 
	`digôÆWrôe
(
_pö
, 0);

493 
	}
}

495 #ifde‡
USE_TIMER0


496 
	$ISR
(
TIMER0_COMPA_ve˘
)

498 i‡(
timî0_toggÀ_cou¡
 != 0)

501 *
timî0_pö_p‹t
 ^
timî0_pö_mask
;

503 i‡(
timî0_toggÀ_cou¡
 > 0)

504 
timî0_toggÀ_cou¡
--;

508 
	`dißbÀTimî
(0);

509 *
timî0_pö_p‹t
 &~(
timî0_pö_mask
);

511 
	}
}

515 #ifde‡
USE_TIMER1


516 
	$ISR
(
TIMER1_COMPA_ve˘
)

518 i‡(
timî1_toggÀ_cou¡
 != 0)

521 *
timî1_pö_p‹t
 ^
timî1_pö_mask
;

523 i‡(
timî1_toggÀ_cou¡
 > 0)

524 
timî1_toggÀ_cou¡
--;

528 
	`dißbÀTimî
(1);

529 *
timî1_pö_p‹t
 &~(
timî1_pö_mask
);

531 
	}
}

535 #ifde‡
USE_TIMER2


536 
	$ISR
(
TIMER2_COMPA_ve˘
)

539 i‡(
timî2_toggÀ_cou¡
 != 0)

542 *
timî2_pö_p‹t
 ^
timî2_pö_mask
;

544 i‡(
timî2_toggÀ_cou¡
 > 0)

545 
timî2_toggÀ_cou¡
--;

552 
	`noT⁄e
(
t⁄e_pös
[0]);

556 
	}
}

560 #ifde‡
USE_TIMER3


561 
	$ISR
(
TIMER3_COMPA_ve˘
)

563 i‡(
timî3_toggÀ_cou¡
 != 0)

566 *
timî3_pö_p‹t
 ^
timî3_pö_mask
;

568 i‡(
timî3_toggÀ_cou¡
 > 0)

569 
timî3_toggÀ_cou¡
--;

573 
	`dißbÀTimî
(3);

574 *
timî3_pö_p‹t
 &~(
timî3_pö_mask
);

576 
	}
}

580 #ifde‡
USE_TIMER4


581 
	$ISR
(
TIMER4_COMPA_ve˘
)

583 i‡(
timî4_toggÀ_cou¡
 != 0)

586 *
timî4_pö_p‹t
 ^
timî4_pö_mask
;

588 i‡(
timî4_toggÀ_cou¡
 > 0)

589 
timî4_toggÀ_cou¡
--;

593 
	`dißbÀTimî
(4);

594 *
timî4_pö_p‹t
 &~(
timî4_pö_mask
);

596 
	}
}

600 #ifde‡
USE_TIMER5


601 
	$ISR
(
TIMER5_COMPA_ve˘
)

603 i‡(
timî5_toggÀ_cou¡
 != 0)

606 *
timî5_pö_p‹t
 ^
timî5_pö_mask
;

608 i‡(
timî5_toggÀ_cou¡
 > 0)

609 
timî5_toggÀ_cou¡
--;

613 
	`dißbÀTimî
(5);

614 *
timî5_pö_p‹t
 &~(
timî5_pö_mask
);

616 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/USBAPI.h

3 #i‚de‡
__USBAPI__


4 
	#__USBAPI__


	)

6 #i‡
deföed
(
USBCON
)

12 ˛as†
	cUSBDevi˚_


14 
	mpublic
:

15 
USBDevi˚_
();

16 
boﬁ
 
c⁄figuªd
();

18 
©èch
();

19 
dëach
();

20 
pﬁl
();

22 
USBDevi˚_
 
USBDevi˚
;

28 ˛as†
	cSîül_
 : 
public
 
Såóm


30 
¥iv©e
:

31 
rög_buf„r
 *
_cdc_rx_buf„r
;

32 
	mpublic
:

33 
begö
(
uöt16_t
 
baud_cou¡
);

34 
íd
();

36 
vútuÆ
 
avaûabÀ
();

37 
vútuÆ
 
ac˚±
();

38 
vútuÆ
 
≥ek
();

39 
vútuÆ
 
ªad
();

40 
vútuÆ
 
Êush
();

41 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
);

42 
usög
 
	mPröt
::
wrôe
;

43 
›î©‹
 
boﬁ
();

45 
Sîül_
 
Sîül
;

51 
	#MOUSE_LEFT
 1

	)

52 
	#MOUSE_RIGHT
 2

	)

53 
	#MOUSE_MIDDLE
 4

	)

54 
	#MOUSE_ALL
 (
MOUSE_LEFT
 | 
MOUSE_RIGHT
 | 
MOUSE_MIDDLE
)

	)

56 ˛as†
	cMou£_


58 
	m¥iv©e
:

59 
uöt8_t
 
_buâ⁄s
;

60 
buâ⁄s
(
uöt8_t
 
b
);

61 
	mpublic
:

62 
Mou£_
();

63 
begö
();

64 
íd
();

65 
˛ick
(
uöt8_t
 
b
 = 
MOUSE_LEFT
);

66 
move
(sig√d 
x
, sig√d 
y
, sig√d 
whìl
 = 0);

67 
¥ess
(
uöt8_t
 
b
 = 
MOUSE_LEFT
);

68 
ªÀa£
(
uöt8_t
 
b
 = 
MOUSE_LEFT
);

69 
boﬁ
 
isPªs£d
(
uöt8_t
 
b
 = 
MOUSE_LEFT
);

71 
Mou£_
 
Mou£
;

77 
	#KEY_LEFT_CTRL
 0x80

	)

78 
	#KEY_LEFT_SHIFT
 0x81

	)

79 
	#KEY_LEFT_ALT
 0x82

	)

80 
	#KEY_LEFT_GUI
 0x83

	)

81 
	#KEY_RIGHT_CTRL
 0x84

	)

82 
	#KEY_RIGHT_SHIFT
 0x85

	)

83 
	#KEY_RIGHT_ALT
 0x86

	)

84 
	#KEY_RIGHT_GUI
 0x87

	)

86 
	#KEY_UP_ARROW
 0xDA

	)

87 
	#KEY_DOWN_ARROW
 0xD9

	)

88 
	#KEY_LEFT_ARROW
 0xD8

	)

89 
	#KEY_RIGHT_ARROW
 0xD7

	)

90 
	#KEY_BACKSPACE
 0xB2

	)

91 
	#KEY_TAB
 0xB3

	)

92 
	#KEY_RETURN
 0xB0

	)

93 
	#KEY_ESC
 0xB1

	)

94 
	#KEY_INSERT
 0xD1

	)

95 
	#KEY_DELETE
 0xD4

	)

96 
	#KEY_PAGE_UP
 0xD3

	)

97 
	#KEY_PAGE_DOWN
 0xD6

	)

98 
	#KEY_HOME
 0xD2

	)

99 
	#KEY_END
 0xD5

	)

100 
	#KEY_CAPS_LOCK
 0xC1

	)

101 
	#KEY_F1
 0xC2

	)

102 
	#KEY_F2
 0xC3

	)

103 
	#KEY_F3
 0xC4

	)

104 
	#KEY_F4
 0xC5

	)

105 
	#KEY_F5
 0xC6

	)

106 
	#KEY_F6
 0xC7

	)

107 
	#KEY_F7
 0xC8

	)

108 
	#KEY_F8
 0xC9

	)

109 
	#KEY_F9
 0xCA

	)

110 
	#KEY_F10
 0xCB

	)

111 
	#KEY_F11
 0xCC

	)

112 
	#KEY_F12
 0xCD

	)

117 
uöt8_t
 
	mmodifõrs
;

118 
uöt8_t
 
	mª£rved
;

119 
uöt8_t
 
	mkeys
[6];

120 } 
	tKeyRï‹t
;

122 ˛as†
	cKeybﬂrd_
 : 
public
 
Pröt


124 
¥iv©e
:

125 
KeyRï‹t
 
_keyRï‹t
;

126 
£ndRï‹t
(
KeyRï‹t
* 
keys
);

127 
	mpublic
:

128 
Keybﬂrd_
();

129 
begö
();

130 
íd
();

131 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
 
k
);

132 
vútuÆ
 
size_t
 
¥ess
(
uöt8_t
 
k
);

133 
vútuÆ
 
size_t
 
ªÀa£
(
uöt8_t
 
k
);

134 
vútuÆ
 
ªÀa£AŒ
();

136 
Keybﬂrd_
 
Keybﬂrd
;

144 
uöt8_t
 
	mbmReque°Ty≥
;

145 
uöt8_t
 
	mbReque°
;

146 
uöt8_t
 
	mwVÆueL
;

147 
uöt8_t
 
	mwVÆueH
;

148 
uöt16_t
 
	mwIndex
;

149 
uöt16_t
 
	mwLígth
;

150 } 
	tSëup
;

156 
HID_GëI¡îÁ˚
(
uöt8_t
* 
öãrÁ˚Num
);

157 
HID_GëDes¸ùt‹
(
i
);

158 
boﬁ
 
HID_Sëup
(
Sëup
& 
£tup
);

159 
HID_SídRï‹t
(
uöt8_t
 
id
, c⁄° * 
d©a
, 
Àn
);

165 
MSC_GëI¡îÁ˚
(
uöt8_t
* 
öãrÁ˚Num
);

166 
MSC_GëDes¸ùt‹
(
i
);

167 
boﬁ
 
MSC_Sëup
(
Sëup
& 
£tup
);

168 
boﬁ
 
MSC_D©a
(
uöt8_t
 
rx
,uöt8_à
tx
);

174 
CDC_GëI¡îÁ˚
(
uöt8_t
* 
öãrÁ˚Num
);

175 
CDC_GëDes¸ùt‹
(
i
);

176 
boﬁ
 
CDC_Sëup
(
Sëup
& 
£tup
);

181 
	#TRANSFER_PGM
 0x80

	)

182 
	#TRANSFER_RELEASE
 0x40

	)

183 
	#TRANSFER_ZERO
 0x20

	)

185 
USB_SídC⁄åﬁ
(
uöt8_t
 
Êags
, c⁄° * 
d
, 
Àn
);

186 
USB_RecvC⁄åﬁ
(* 
d
, 
Àn
);

188 
uöt8_t
 
USB_AvaûabÀ
(uöt8_à
ï
);

189 
USB_Síd
(
uöt8_t
 
ï
, c⁄° * 
d©a
, 
Àn
);

190 
USB_Recv
(
uöt8_t
 
ï
, * 
d©a
, 
Àn
);

191 
USB_Recv
(
uöt8_t
 
ï
);

192 
USB_Flush
(
uöt8_t
 
ï
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/USBCore.cpp

19 
	~"Pœtf‹m.h
"

20 
	~"USBAPI.h
"

21 
	~"USBDesc.h
"

23 #i‡
deföed
(
USBCON
)

25 
	#EP_TYPE_CONTROL
 0x00

	)

26 
	#EP_TYPE_BULK_IN
 0x81

	)

27 
	#EP_TYPE_BULK_OUT
 0x80

	)

28 
	#EP_TYPE_INTERRUPT_IN
 0xC1

	)

29 
	#EP_TYPE_INTERRUPT_OUT
 0xC0

	)

30 
	#EP_TYPE_ISOCHRONOUS_IN
 0x41

	)

31 
	#EP_TYPE_ISOCHRONOUS_OUT
 0x40

	)

34 
	#TX_RX_LED_PULSE_MS
 100

	)

35 vﬁ©ûê
u8
 
	gTxLEDPul£
;

36 vﬁ©ûê
u8
 
	gRxLEDPul£
;

41 c⁄° 
u16
 
STRING_LANGUAGE
[] 
PROGMEM
;

42 c⁄° 
u16
 
STRING_IPRODUCT
[] 
PROGMEM
;

43 c⁄° 
u16
 
STRING_IMANUFACTURER
[] 
PROGMEM
;

44 c⁄° 
Devi˚Des¸ùt‹
 
USB_Devi˚Des¸ùt‹
 
PROGMEM
;

45 c⁄° 
Devi˚Des¸ùt‹
 
USB_Devi˚Des¸ùt‹A
 
PROGMEM
;

47 c⁄° 
u16
 
	gSTRING_LANGUAGE
[2] = {

52 c⁄° 
u16
 
	gSTRING_IPRODUCT
[17] = {

54 #i‡
USB_PID
 == 0x8036

56 #ñi‡
USB_PID
 == 0x8037

58 #ñi‡
USB_PID
 == 0x803C

60 #ñi‡
USB_PID
 == 0x9208

67 c⁄° 
u16
 
	gSTRING_IMANUFACTURER
[12] = {

69 #i‡
USB_VID
 == 0x2341

71 #ñi‡
USB_VID
 == 0x1b4f

78 #ifde‡
CDC_ENABLED


79 
	#DEVICE_CLASS
 0x02

	)

81 
	#DEVICE_CLASS
 0x00

	)

85 c⁄° 
Devi˚Des¸ùt‹
 
	gUSB_Devi˚Des¸ùt‹
 =

86 
D_DEVICE
(0x00,0x00,0x00,64,
USB_VID
,
USB_PID
,0x100,
IMANUFACTURER
,
IPRODUCT
,0,1);

88 c⁄° 
Devi˚Des¸ùt‹
 
	gUSB_Devi˚Des¸ùt‹A
 =

89 
D_DEVICE
(
DEVICE_CLASS
,0x00,0x00,64,
USB_VID
,
USB_PID
,0x100,
IMANUFACTURER
,
IPRODUCT
,0,1);

94 vﬁ©ûê
u8
 
	g_usbC⁄figuøti⁄
 = 0;

96 
ölöe
 
	$WaôIN
()

98 !(
UEINTX
 & (1<<
TXINI
)));

99 
	}
}

101 
ölöe
 
	$CÀ¨IN
()

103 
UEINTX
 = ~(1<<
TXINI
);

104 
	}
}

106 
ölöe
 
	$WaôOUT
()

108 !(
UEINTX
 & (1<<
RXOUTI
)))

110 
	}
}

112 
ölöe
 
u8
 
	$WaôF‹INOrOUT
()

114 !(
UEINTX
 & ((1<<
TXINI
)|(1<<
RXOUTI
))))

116  (
UEINTX
 & (1<<
RXOUTI
)) == 0;

117 
	}
}

119 
ölöe
 
	$CÀ¨OUT
()

121 
UEINTX
 = ~(1<<
RXOUTI
);

122 
	}
}

124 
	$Recv
(vﬁ©ûê
u8
* 
d©a
, u8 
cou¡
)

126 
cou¡
--)

127 *
d©a
++ = 
UEDATX
;

129 
RXLED1
;

130 
RxLEDPul£
 = 
TX_RX_LED_PULSE_MS
;

131 
	}
}

133 
ölöe
 
u8
 
	$Recv8
()

135 
RXLED1
;

136 
RxLEDPul£
 = 
TX_RX_LED_PULSE_MS
;

138  
UEDATX
;

139 
	}
}

141 
ölöe
 
	$Síd8
(
u8
 
d
)

143 
UEDATX
 = 
d
;

144 
	}
}

146 
ölöe
 
	$SëEP
(
u8
 
ï
)

148 
UENUM
 = 
ï
;

149 
	}
}

151 
ölöe
 
u8
 
	$FifoByãCou¡
()

153  
UEBCLX
;

154 
	}
}

156 
ölöe
 
u8
 
	$Re˚ivedSëupI¡
()

158  
UEINTX
 & (1<<
RXSTPI
);

159 
	}
}

161 
ölöe
 
	$CÀ¨SëupI¡
()

163 
UEINTX
 = ~((1<<
RXSTPI
Ë| (1<<
RXOUTI
Ë| (1<<
TXINI
));

164 
	}
}

166 
ölöe
 
	$SèŒ
()

168 
UECONX
 = (1<<
STALLRQ
Ë| (1<<
EPEN
);

169 
	}
}

171 
ölöe
 
u8
 
	$RódWrôeAŒowed
()

173  
UEINTX
 & (1<<
RWAL
);

174 
	}
}

176 
ölöe
 
u8
 
	$SèŒed
()

178  
UEINTX
 & (1<<
STALLEDI
);

179 
	}
}

181 
ölöe
 
u8
 
	$FifoFªe
()

183  
UEINTX
 & (1<<
FIFOCON
);

184 
	}
}

186 
ölöe
 
	$Rñó£RX
()

188 
UEINTX
 = 0x6B;

189 
	}
}

191 
ölöe
 
	$Rñó£TX
()

193 
UEINTX
 = 0x3A;

194 
	}
}

196 
ölöe
 
u8
 
	$FømeNumbî
()

198  
UDFNUML
;

199 
	}
}

204 
u8
 
	$USBGëC⁄figuøti⁄
()

206  
_usbC⁄figuøti⁄
;

207 
	}
}

209 
	#USB_RECV_TIMEOUT


	)

210 ˛as†
	cLockEP


212 
u8
 
	m_§eg
;

213 
	mpublic
:

214 
	$LockEP
(
u8
 
ï
Ë: 
	$_§eg
(
SREG
)

216 
	`˛i
();

217 
	`SëEP
(
ï
 & 7);

219 ~
	$LockEP
()

221 
SREG
 = 
_§eg
;

222 
	}
}

226 
u8
 
	$USB_AvaûabÀ
(
u8
 
ï
)

228 
LockEP
 
	`lock
(
ï
);

229  
	`FifoByãCou¡
();

230 
	}
}

234 
	$USB_Recv
(
u8
 
ï
, * 
d
, 
Àn
)

236 i‡(!
_usbC⁄figuøti⁄
 || 
Àn
 < 0)

239 
LockEP
 
	`lock
(
ï
);

240 
u8
 
n
 = 
	`FifoByãCou¡
();

241 
Àn
 = 
	`mö
(
n
,len);

242 
n
 = 
Àn
;

243 
u8
* 
d°
 = (u8*)
d
;

244 
n
--)

245 *
d°
++ = 
	`Recv8
();

246 i‡(
Àn
 && !
	`FifoByãCou¡
())

247 
	`Rñó£RX
();

249  
Àn
;

250 
	}
}

253 
	$USB_Recv
(
u8
 
ï
)

255 
u8
 
c
;

256 i‡(
	`USB_Recv
(
ï
,&
c
,1) != 1)

258  
c
;

259 
	}
}

262 
u8
 
	$USB_SídS∑˚
(
u8
 
ï
)

264 
LockEP
 
	`lock
(
ï
);

265 i‡(!
	`RódWrôeAŒowed
())

267  64 - 
	`FifoByãCou¡
();

268 
	}
}

271 
	$USB_Síd
(
u8
 
ï
, c⁄° * 
d
, 
Àn
)

273 i‡(!
_usbC⁄figuøti⁄
)

276 
r
 = 
Àn
;

277 c⁄° 
u8
* 
d©a
 = (c⁄° u8*)
d
;

278 
u8
 
zîo
 = 
ï
 & 
TRANSFER_ZERO
;

279 
u8
 
timeout
 = 250;

280 
Àn
)

282 
u8
 
n
 = 
	`USB_SídS∑˚
(
ï
);

283 i‡(
n
 == 0)

285 i‡(!(--
timeout
))

287 
	`dñay
(1);

291 i‡(
n
 > 
Àn
)

292 
n
 = 
Àn
;

293 
Àn
 -
n
;

295 
LockEP
 
	`lock
(
ï
);

296 i‡(
ï
 & 
TRANSFER_ZERO
)

298 
n
--)

299 
	`Síd8
(0);

301 i‡(
ï
 & 
TRANSFER_PGM
)

303 
n
--)

304 
	`Síd8
(
	`pgm_ªad_byã
(
d©a
++));

308 
n
--)

309 
	`Síd8
(*
d©a
++);

311 i‡(!
	`RódWrôeAŒowed
(Ë|| ((
Àn
 =0Ë&& (
ï
 & 
TRANSFER_RELEASE
)))

312 
	`Rñó£TX
();

315 
TXLED1
;

316 
TxLEDPul£
 = 
TX_RX_LED_PULSE_MS
;

317  
r
;

318 
	}
}

320 c⁄° 
u8
 
_öôEndpoöts
[] 
PROGMEM
;

321 c⁄° 
u8
 
	g_öôEndpoöts
[] =

325 #ifde‡
CDC_ENABLED


326 
EP_TYPE_INTERRUPT_IN
,

327 
EP_TYPE_BULK_OUT
,

328 
EP_TYPE_BULK_IN
,

331 #ifde‡
HID_ENABLED


332 
EP_TYPE_INTERRUPT_IN


336 
	#EP_SINGLE_64
 0x32

337 
	#EP_DOUBLE_64
 0x36

338 

	)

340 
	$InôEP
(
u8
 
ödex
, u8 
ty≥
, u8 
size
)

342 
UENUM
 = 
ödex
;

343 
UECONX
 = 1;

344 
UECFG0X
 = 
ty≥
;

345 
UECFG1X
 = 
size
;

346 
	}
}

349 
	$InôEndpoöts
()

351 
u8
 
i
 = 1; i < (
_öôEndpoöts
); i++)

353 
UENUM
 = 
i
;

354 
UECONX
 = 1;

355 
UECFG0X
 = 
	`pgm_ªad_byã
(
_öôEndpoöts
+
i
);

356 
UECFG1X
 = 
EP_DOUBLE_64
;

358 
UERST
 = 0x7E;

359 
UERST
 = 0;

360 
	}
}

364 
boﬁ
 
	$CœssI¡îÁ˚Reque°
(
Sëup
& 
£tup
)

366 
u8
 
i
 = 
£tup
.
wIndex
;

368 #ifde‡
CDC_ENABLED


369 i‡(
CDC_ACM_INTERFACE
 =
i
)

370  
	`CDC_Sëup
(
£tup
);

373 #ifde‡
HID_ENABLED


374 i‡(
HID_INTERFACE
 =
i
)

375  
	`HID_Sëup
(
£tup
);

377  
Ál£
;

378 
	}
}

380 
	g_cm¨k
;

381 
	g_˚nd
;

382 
	$InôC⁄åﬁ
(
íd
)

384 
	`SëEP
(0);

385 
_cm¨k
 = 0;

386 
_˚nd
 = 
íd
;

387 
	}
}

390 
boﬁ
 
	$SídC⁄åﬁ
(
u8
 
d
)

392 i‡(
_cm¨k
 < 
_˚nd
)

394 i‡(!
	`WaôF‹INOrOUT
())

395  
Ál£
;

396 
	`Síd8
(
d
);

397 i‡(!((
_cm¨k
 + 1) & 0x3F))

398 
	`CÀ¨IN
();

400 
_cm¨k
++;

401  
åue
;

402 
	}
};

405 
	$USB_SídC⁄åﬁ
(
u8
 
Êags
, c⁄° * 
d
, 
Àn
)

407 
£¡
 = 
Àn
;

408 c⁄° 
u8
* 
d©a
 = (c⁄° u8*)
d
;

409 
boﬁ
 
pgm
 = 
Êags
 & 
TRANSFER_PGM
;

410 
Àn
--)

412 
u8
 
c
 = 
pgm
 ? 
	`pgm_ªad_byã
(
d©a
++) : *data++;

413 i‡(!
	`SídC⁄åﬁ
(
c
))

416  
£¡
;

417 
	}
}

422 
	$USB_RecvC⁄åﬁ
(* 
d
, 
Àn
)

424 
	`WaôOUT
();

425 
	`Recv
((
u8
*)
d
,
Àn
);

426 
	`CÀ¨OUT
();

427  
Àn
;

428 
	}
}

430 
	$SídI¡îÁ˚s
()

432 
tŸÆ
 = 0;

433 
u8
 
öãrÁ˚s
 = 0;

435 #ifde‡
CDC_ENABLED


436 
tŸÆ
 = 
	`CDC_GëI¡îÁ˚
(&
öãrÁ˚s
);

439 #ifde‡
HID_ENABLED


440 
tŸÆ
 +
	`HID_GëI¡îÁ˚
(&
öãrÁ˚s
);

443  
öãrÁ˚s
;

444 
	}
}

450 
boﬁ
 
	$SídC⁄figuøti⁄
(
maxÀn
)

453 
	`InôC⁄åﬁ
(0);

454 
öãrÁ˚s
 = 
	`SídI¡îÁ˚s
();

455 
C⁄figDes¸ùt‹
 
c⁄fig
 = 
	`D_CONFIG
(
_cm¨k
 + (C⁄figDes¸ùt‹),
öãrÁ˚s
);

458 
	`InôC⁄åﬁ
(
maxÀn
);

459 
	`USB_SídC⁄åﬁ
(0,&
c⁄fig
,(
C⁄figDes¸ùt‹
));

460 
	`SídI¡îÁ˚s
();

461  
åue
;

462 
	}
}

464 
u8
 
	g_cdcComposôe
 = 0;

467 
boﬁ
 
	$SídDes¸ùt‹
(
Sëup
& 
£tup
)

469 
u8
 
t
 = 
£tup
.
wVÆueH
;

470 i‡(
USB_CONFIGURATION_DESCRIPTOR_TYPE
 =
t
)

471  
	`SídC⁄figuøti⁄
(
£tup
.
wLígth
);

473 
	`InôC⁄åﬁ
(
£tup
.
wLígth
);

474 #ifde‡
HID_ENABLED


475 i‡(
HID_REPORT_DESCRIPTOR_TYPE
 =
t
)

476  
	`HID_GëDes¸ùt‹
(
t
);

479 
u8
 
desc_Àngth
 = 0;

480 c⁄° 
u8
* 
desc_addr
 = 0;

481 i‡(
USB_DEVICE_DESCRIPTOR_TYPE
 =
t
)

483 i‡(
£tup
.
wLígth
 == 8)

484 
_cdcComposôe
 = 1;

485 
desc_addr
 = 
_cdcComposôe
 ? (c⁄° 
u8
*)&
USB_Devi˚Des¸ùt‹A
 : (c⁄° u8*)&
USB_Devi˚Des¸ùt‹
;

487 i‡(
USB_STRING_DESCRIPTOR_TYPE
 =
t
)

489 i‡(
£tup
.
wVÆueL
 == 0)

490 
desc_addr
 = (c⁄° 
u8
*)&
STRING_LANGUAGE
;

491 i‡(
£tup
.
wVÆueL
 =
IPRODUCT
)

492 
desc_addr
 = (c⁄° 
u8
*)&
STRING_IPRODUCT
;

493 i‡(
£tup
.
wVÆueL
 =
IMANUFACTURER
)

494 
desc_addr
 = (c⁄° 
u8
*)&
STRING_IMANUFACTURER
;

496  
Ál£
;

499 i‡(
desc_addr
 == 0)

500  
Ál£
;

501 i‡(
desc_Àngth
 == 0)

502 
desc_Àngth
 = 
	`pgm_ªad_byã
(
desc_addr
);

504 
	`USB_SídC⁄åﬁ
(
TRANSFER_PGM
,
desc_addr
,
desc_Àngth
);

505  
åue
;

506 
	}
}

509 
	$ISR
(
USB_COM_ve˘
)

511 
	`SëEP
(0);

512 i‡(!
	`Re˚ivedSëupI¡
())

515 
Sëup
 
£tup
;

516 
	`Recv
((
u8
*)&
£tup
,8);

517 
	`CÀ¨SëupI¡
();

519 
u8
 
ªque°Ty≥
 = 
£tup
.
bmReque°Ty≥
;

520 i‡(
ªque°Ty≥
 & 
REQUEST_DEVICETOHOST
)

521 
	`WaôIN
();

523 
	`CÀ¨IN
();

525 
boﬁ
 
ok
 = 
åue
;

526 i‡(
REQUEST_STANDARD
 =(
ªque°Ty≥
 & 
REQUEST_TYPE
))

529 
u8
 
r
 = 
£tup
.
bReque°
;

530 i‡(
GET_STATUS
 =
r
)

532 
	`Síd8
(0);

533 
	`Síd8
(0);

535 i‡(
CLEAR_FEATURE
 =
r
)

538 i‡(
SET_FEATURE
 =
r
)

541 i‡(
SET_ADDRESS
 =
r
)

543 
	`WaôIN
();

544 
UDADDR
 = 
£tup
.
wVÆueL
 | (1<<
ADDEN
);

546 i‡(
GET_DESCRIPTOR
 =
r
)

548 
ok
 = 
	`SídDes¸ùt‹
(
£tup
);

550 i‡(
SET_DESCRIPTOR
 =
r
)

552 
ok
 = 
Ál£
;

554 i‡(
GET_CONFIGURATION
 =
r
)

556 
	`Síd8
(1);

558 i‡(
SET_CONFIGURATION
 =
r
)

560 i‡(
REQUEST_DEVICE
 =(
ªque°Ty≥
 & 
REQUEST_RECIPIENT
))

562 
	`InôEndpoöts
();

563 
_usbC⁄figuøti⁄
 = 
£tup
.
wVÆueL
;

565 
ok
 = 
Ál£
;

567 i‡(
GET_INTERFACE
 =
r
)

570 i‡(
SET_INTERFACE
 =
r
)

576 
	`InôC⁄åﬁ
(
£tup
.
wLígth
);

577 
ok
 = 
	`CœssI¡îÁ˚Reque°
(
£tup
);

580 i‡(
ok
)

581 
	`CÀ¨IN
();

584 
	`SèŒ
();

586 
	}
}

588 
	$USB_Flush
(
u8
 
ï
)

590 
	`SëEP
(
ï
);

591 i‡(
	`FifoByãCou¡
())

592 
	`Rñó£TX
();

593 
	}
}

596 
	$ISR
(
USB_GEN_ve˘
)

598 
u8
 
udöt
 = 
UDINT
;

599 
UDINT
 = 0;

602 i‡(
udöt
 & (1<<
EORSTI
))

604 
	`InôEP
(0,
EP_TYPE_CONTROL
,
EP_SINGLE_64
);

605 
_usbC⁄figuøti⁄
 = 0;

606 
UEIENX
 = 1 << 
RXSTPE
;

610 i‡(
udöt
 & (1<<
SOFI
))

612 #ifde‡
CDC_ENABLED


613 
	`USB_Flush
(
CDC_TX
);

614 i‡(
	`USB_AvaûabÀ
(
CDC_RX
))

615 
Sîül
.
	`ac˚±
();

619 i‡(
TxLEDPul£
 && !(--TxLEDPulse))

620 
TXLED0
;

621 i‡(
RxLEDPul£
 && !(--RxLEDPulse))

622 
RXLED0
;

624 
	}
}

628 
u8
 
	$USBC⁄√˘ed
()

630 
u8
 
f
 = 
UDFNUML
;

631 
	`dñay
(3);

632  
f
 !
UDFNUML
;

633 
	}
}

638 
USBDevi˚_
 
	gUSBDevi˚
;

640 
	gUSBDevi˚_
::
	$USBDevi˚_
()

642 
	}
}

644 
USBDevi˚_
::
	$©èch
()

646 
_usbC⁄figuøti⁄
 = 0;

647 
UHWCON
 = 0x01;

648 
USBCON
 = (1<<
USBE
)|(1<<
FRZCLK
);

649 #i‡
F_CPU
 == 16000000UL

650 
PLLCSR
 = 0x12;

651 #ñi‡
F_CPU
 == 8000000UL

652 
PLLCSR
 = 0x02;

654 !(
PLLCSR
 & (1<<
PLOCK
)))

660 
	`dñay
(1);

662 
USBCON
 = ((1<<
USBE
)|(1<<
OTGPADE
));

663 
UDIEN
 = (1<<
EORSTE
)|(1<<
SOFE
);

664 
UDCON
 = 0;

666 
TX_RX_LED_INIT
;

667 
	}
}

669 
	gUSBDevi˚_
::
	$dëach
()

671 
	}
}

675 
boﬁ
 
USBDevi˚_
::
	$c⁄figuªd
()

677  
_usbC⁄figuøti⁄
;

678 
	}
}

680 
	gUSBDevi˚_
::
	$pﬁl
()

682 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/USBCore.h

18 #i‚de‡
__USBCORE_H__


19 
	#__USBCORE_H__


	)

22 
	#GET_STATUS
 0

	)

23 
	#CLEAR_FEATURE
 1

	)

24 
	#SET_FEATURE
 3

	)

25 
	#SET_ADDRESS
 5

	)

26 
	#GET_DESCRIPTOR
 6

	)

27 
	#SET_DESCRIPTOR
 7

	)

28 
	#GET_CONFIGURATION
 8

	)

29 
	#SET_CONFIGURATION
 9

	)

30 
	#GET_INTERFACE
 10

	)

31 
	#SET_INTERFACE
 11

	)

35 
	#REQUEST_HOSTTODEVICE
 0x00

	)

36 
	#REQUEST_DEVICETOHOST
 0x80

	)

37 
	#REQUEST_DIRECTION
 0x80

	)

39 
	#REQUEST_STANDARD
 0x00

	)

40 
	#REQUEST_CLASS
 0x20

	)

41 
	#REQUEST_VENDOR
 0x40

	)

42 
	#REQUEST_TYPE
 0x60

	)

44 
	#REQUEST_DEVICE
 0x00

	)

45 
	#REQUEST_INTERFACE
 0x01

	)

46 
	#REQUEST_ENDPOINT
 0x02

	)

47 
	#REQUEST_OTHER
 0x03

	)

48 
	#REQUEST_RECIPIENT
 0x03

	)

50 
	#REQUEST_DEVICETOHOST_CLASS_INTERFACE
 (
REQUEST_DEVICETOHOST
 + 
REQUEST_CLASS
 + 
REQUEST_INTERFACE
)

	)

51 
	#REQUEST_HOSTTODEVICE_CLASS_INTERFACE
 (
REQUEST_HOSTTODEVICE
 + 
REQUEST_CLASS
 + 
REQUEST_INTERFACE
)

	)

55 
	#CDC_SET_LINE_CODING
 0x20

	)

56 
	#CDC_GET_LINE_CODING
 0x21

	)

57 
	#CDC_SET_CONTROL_LINE_STATE
 0x22

	)

59 
	#MSC_RESET
 0xFF

	)

60 
	#MSC_GET_MAX_LUN
 0xFE

	)

62 
	#HID_GET_REPORT
 0x01

	)

63 
	#HID_GET_IDLE
 0x02

	)

64 
	#HID_GET_PROTOCOL
 0x03

	)

65 
	#HID_SET_REPORT
 0x09

	)

66 
	#HID_SET_IDLE
 0x0A

	)

67 
	#HID_SET_PROTOCOL
 0x0B

	)

71 
	#USB_DEVICE_DESC_SIZE
 18

	)

72 
	#USB_CONFIGUARTION_DESC_SIZE
 9

	)

73 
	#USB_INTERFACE_DESC_SIZE
 9

	)

74 
	#USB_ENDPOINT_DESC_SIZE
 7

	)

76 
	#USB_DEVICE_DESCRIPTOR_TYPE
 1

	)

77 
	#USB_CONFIGURATION_DESCRIPTOR_TYPE
 2

	)

78 
	#USB_STRING_DESCRIPTOR_TYPE
 3

	)

79 
	#USB_INTERFACE_DESCRIPTOR_TYPE
 4

	)

80 
	#USB_ENDPOINT_DESCRIPTOR_TYPE
 5

	)

82 
	#USB_DEVICE_CLASS_COMMUNICATIONS
 0x02

	)

83 
	#USB_DEVICE_CLASS_HUMAN_INTERFACE
 0x03

	)

84 
	#USB_DEVICE_CLASS_STORAGE
 0x08

	)

85 
	#USB_DEVICE_CLASS_VENDOR_SPECIFIC
 0xFF

	)

87 
	#USB_CONFIG_POWERED_MASK
 0x40

	)

88 
	#USB_CONFIG_BUS_POWERED
 0x80

	)

89 
	#USB_CONFIG_SELF_POWERED
 0xC0

	)

90 
	#USB_CONFIG_REMOTE_WAKEUP
 0x20

	)

93 
	#USB_CONFIG_POWER_MA
(
mA
Ë((mA)/2)

	)

96 
	#USB_ENDPOINT_DIRECTION_MASK
 0x80

	)

97 
	#USB_ENDPOINT_OUT
(
addr
Ë(◊ddrË| 0x00)

	)

98 
	#USB_ENDPOINT_IN
(
addr
Ë(◊ddrË| 0x80)

	)

100 
	#USB_ENDPOINT_TYPE_MASK
 0x03

	)

101 
	#USB_ENDPOINT_TYPE_CONTROL
 0x00

	)

102 
	#USB_ENDPOINT_TYPE_ISOCHRONOUS
 0x01

	)

103 
	#USB_ENDPOINT_TYPE_BULK
 0x02

	)

104 
	#USB_ENDPOINT_TYPE_INTERRUPT
 0x03

	)

106 
	#TOBYTES
(
x
Ë((xË& 0xFF),(((xË>> 8Ë& 0xFF)

	)

108 
	#CDC_V1_10
 0x0110

	)

109 
	#CDC_COMMUNICATION_INTERFACE_CLASS
 0x02

	)

111 
	#CDC_CALL_MANAGEMENT
 0x01

	)

112 
	#CDC_ABSTRACT_CONTROL_MODEL
 0x02

	)

113 
	#CDC_HEADER
 0x00

	)

114 
	#CDC_ABSTRACT_CONTROL_MANAGEMENT
 0x02

	)

115 
	#CDC_UNION
 0x06

	)

116 
	#CDC_CS_INTERFACE
 0x24

	)

117 
	#CDC_CS_ENDPOINT
 0x25

	)

118 
	#CDC_DATA_INTERFACE_CLASS
 0x0A

	)

120 
	#MSC_SUBCLASS_SCSI
 0x06

	)

121 
	#MSC_PROTOCOL_BULK_ONLY
 0x50

	)

123 
	#HID_HID_DESCRIPTOR_TYPE
 0x21

	)

124 
	#HID_REPORT_DESCRIPTOR_TYPE
 0x22

	)

125 
	#HID_PHYSICAL_DESCRIPTOR_TYPE
 0x23

	)

130 
u8
 
	mÀn
;

131 
u8
 
	mdty≥
;

132 
u16
 
	musbVîsi⁄
;

133 
u8
 
	mdevi˚Cœss
;

134 
u8
 
	mdevi˚SubCœss
;

135 
u8
 
	mdevi˚PrŸocﬁ
;

136 
u8
 
	m∑ckëSize0
;

137 
u16
 
	midVíd‹
;

138 
u16
 
	midProdu˘
;

139 
u16
 
	mdevi˚Vîsi⁄
;

140 
u8
 
	miM™uÁ˘uªr
;

141 
u8
 
	miProdu˘
;

142 
u8
 
	miSîülNumbî
;

143 
u8
 
	mbNumC⁄figuøti⁄s
;

144 } 
	tDevi˚Des¸ùt‹
;

148 
u8
 
	mÀn
;

149 
u8
 
	mdty≥
;

150 
u16
 
	m˛í
;

151 
u8
 
	mnumI¡îÁ˚s
;

152 
u8
 
	mc⁄fig
;

153 
u8
 
	mic⁄fig
;

154 
u8
 
	m©åibuãs
;

155 
u8
 
	mmaxPowî
;

156 } 
	tC⁄figDes¸ùt‹
;

163 
u8
 
	mÀn
;

164 
u8
 
	mdty≥
;

165 
u8
 
	mnumbî
;

166 
u8
 
	mÆã∫©e
;

167 
u8
 
	mnumEndpoöts
;

168 
u8
 
	möãrÁ˚Cœss
;

169 
u8
 
	möãrÁ˚SubCœss
;

170 
u8
 
	m¥Ÿocﬁ
;

171 
u8
 
	miI¡îÁ˚
;

172 } 
	tI¡îÁ˚Des¸ùt‹
;

177 
u8
 
	mÀn
;

178 
u8
 
	mdty≥
;

179 
u8
 
	maddr
;

180 
u8
 
	m©å
;

181 
u16
 
	m∑ckëSize
;

182 
u8
 
	möãrvÆ
;

183 } 
	tEndpoötDes¸ùt‹
;

189 
u8
 
	mÀn
;

190 
u8
 
	mdty≥
;

191 
u8
 
	mfú°I¡îÁ˚
;

192 
u8
 
	möãrÁ˚Cou¡
;

193 
u8
 
	mfun˘i⁄Cœss
;

194 
u8
 
	mfu¡i⁄SubCœss
;

195 
u8
 
	mfun˘i⁄PrŸocﬁ
;

196 
u8
 
	miI¡îÁ˚
;

197 } 
	tIADDes¸ùt‹
;

202 
u8
 
	mÀn
;

203 
u8
 
	mdty≥
;

204 
u8
 
	msubty≥
;

205 
u8
 
	md0
;

206 
u8
 
	md1
;

207 } 
	tCDCCSI¡îÁ˚Des¸ùt‹
;

211 
u8
 
	mÀn
;

212 
u8
 
	mdty≥
;

213 
u8
 
	msubty≥
;

214 
u8
 
	md0
;

215 } 
	tCDCCSI¡îÁ˚Des¸ùt‹4
;

219 
u8
 
	mÀn
;

220 
u8
 
	mdty≥
;

221 
u8
 
	msubty≥
;

222 
u8
 
	mbmC≠abûôõs
;

223 
u8
 
	mbD©aI¡îÁ˚
;

224 } 
	tCMFun˘i⁄ÆDes¸ùt‹
;

228 
u8
 
	mÀn
;

229 
u8
 
	mdty≥
;

230 
u8
 
	msubty≥
;

231 
u8
 
	mbmC≠abûôõs
;

232 } 
	tACMFun˘i⁄ÆDes¸ùt‹
;

237 
IADDes¸ùt‹
 
	müd
;

240 
I¡îÁ˚Des¸ùt‹
 
	mcif
;

241 
CDCCSI¡îÁ˚Des¸ùt‹
 
	mhódî
;

242 
CMFun˘i⁄ÆDes¸ùt‹
 
	mˇŒM™agemít
;

243 
ACMFun˘i⁄ÆDes¸ùt‹
 
	mc⁄åﬁM™agemít
;

244 
CDCCSI¡îÁ˚Des¸ùt‹
 
	mfun˘i⁄ÆDes¸ùt‹
;

245 
EndpoötDes¸ùt‹
 
	mcifö
;

248 
I¡îÁ˚Des¸ùt‹
 
	mdif
;

249 
EndpoötDes¸ùt‹
 
	mö
;

250 
EndpoötDes¸ùt‹
 
	mout
;

251 } 
	tCDCDes¸ùt‹
;

255 
I¡îÁ˚Des¸ùt‹
 
	mmsc
;

256 
EndpoötDes¸ùt‹
 
	mö
;

257 
EndpoötDes¸ùt‹
 
	mout
;

258 } 
	tMSCDes¸ùt‹
;

262 
u8
 
	mÀn
;

263 
u8
 
	mdty≥
;

264 
u8
 
	maddr
;

265 
u8
 
	mvîsi⁄L
;

266 
u8
 
	mvîsi⁄H
;

267 
u8
 
	mcou¡ry
;

268 
u8
 
	mdes˘y≥
;

269 
u8
 
	mdescLíL
;

270 
u8
 
	mdescLíH
;

271 } 
	tHIDDescDes¸ùt‹
;

275 
I¡îÁ˚Des¸ùt‹
 
	mhid
;

276 
HIDDescDes¸ùt‹
 
	mdesc
;

277 
EndpoötDes¸ùt‹
 
	mö
;

278 } 
	tHIDDes¸ùt‹
;

281 
	#D_DEVICE
(
_˛ass
,
_subCœss
,
_¥Ÿo
,
_∑ckëSize0
,
_vid
,
_pid
,
_vîsi⁄
,
_im
,
_ù
,
_is
,
_c⁄figs
) \

282 { 18, 1, 0x200, 
_˛ass
,
_subCœss
,
_¥Ÿo
,
_∑ckëSize0
,
_vid
,
_pid
,
_vîsi⁄
,
_im
,
_ù
,
_is
,
_c⁄figs
 }

	)

284 
	#D_CONFIG
(
_tŸÆLígth
,
_öãrÁ˚s
) \

285 { 9, 2, 
_tŸÆLígth
,
_öãrÁ˚s
, 1, 0, 
USB_CONFIG_BUS_POWERED
, 
	`USB_CONFIG_POWER_MA
(500Ë}

	)

287 
	#D_INTERFACE
(
_n
,
_numEndpoöts
,
_˛ass
,
_subCœss
,
_¥Ÿocﬁ
) \

288 { 9, 4, 
_n
, 0, 
_numEndpoöts
, 
_˛ass
,
_subCœss
, 
_¥Ÿocﬁ
, 0 }

	)

290 
	#D_ENDPOINT
(
_addr
,
_©å
,
_∑ckëSize
, 
_öãrvÆ
) \

291 { 7, 5, 
_addr
,
_©å
,
_∑ckëSize
, 
_öãrvÆ
 }

	)

293 
	#D_IAD
(
_fú°I¡îÁ˚
, 
_cou¡
, 
_˛ass
, 
_subCœss
, 
_¥Ÿocﬁ
) \

294 { 8, 11, 
_fú°I¡îÁ˚
, 
_cou¡
, 
_˛ass
, 
_subCœss
, 
_¥Ÿocﬁ
, 0 }

	)

296 
	#D_HIDREPORT
(
_des¸ùt‹Lígth
) \

297 { 9, 0x21, 0x1, 0x1, 0, 1, 0x22, 
_des¸ùt‹Lígth
, 0 }

	)

299 
	#D_CDCCS
(
_subty≥
,
_d0
,
_d1
Ë{ 5, 0x24, _subty≥, _d0, _d1 }

	)

300 
	#D_CDCCS4
(
_subty≥
,
_d0
Ë{ 4, 0x24, _subty≥, _d0 }

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/USBDesc.h

19 
	#CDC_ENABLED


	)

20 
	#HID_ENABLED


	)

23 #ifde‡
CDC_ENABLED


24 
	#CDC_INTERFACE_COUNT
 2

	)

25 
	#CDC_ENPOINT_COUNT
 3

	)

27 
	#CDC_INTERFACE_COUNT
 0

	)

28 
	#CDC_ENPOINT_COUNT
 0

	)

31 #ifde‡
HID_ENABLED


32 
	#HID_INTERFACE_COUNT
 1

	)

33 
	#HID_ENPOINT_COUNT
 1

	)

35 
	#HID_INTERFACE_COUNT
 0

	)

36 
	#HID_ENPOINT_COUNT
 0

	)

39 
	#CDC_ACM_INTERFACE
 0

40 
	#CDC_DATA_INTERFACE
 1

41 
	#CDC_FIRST_ENDPOINT
 1

	)

42 
	#CDC_ENDPOINT_ACM
 (
CDC_FIRST_ENDPOINT
)

43 
	#CDC_ENDPOINT_OUT
 (
CDC_FIRST_ENDPOINT
+1)

	)

44 
	#CDC_ENDPOINT_IN
 (
CDC_FIRST_ENDPOINT
+2)

	)

46 
	#HID_INTERFACE
 (
CDC_ACM_INTERFACE
 + 
CDC_INTERFACE_COUNT
)

47 
	#HID_FIRST_ENDPOINT
 (
CDC_FIRST_ENDPOINT
 + 
CDC_ENPOINT_COUNT
)

	)

48 
	#HID_ENDPOINT_INT
 (
HID_FIRST_ENDPOINT
)

	)

50 
	#INTERFACE_COUNT
 (
MSC_INTERFACE
 + 
MSC_INTERFACE_COUNT
)

	)

52 #ifde‡
CDC_ENABLED


53 
	#CDC_RX
 
CDC_ENDPOINT_OUT


	)

54 
	#CDC_TX
 
CDC_ENDPOINT_IN


	)

57 #ifde‡
HID_ENABLED


58 
	#HID_TX
 
HID_ENDPOINT_INT


	)

61 
	#IMANUFACTURER
 1

	)

62 
	#IPRODUCT
 2

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/Udp.h

35 #i‚de‡
udp_h


36 
	#udp_h


	)

38 
	~<Såóm.h
>

39 
	~<IPAddªss.h
>

41 ˛as†
	cUDP
 : 
public
 
Såóm
 {

43 
public
:

44 
vútuÆ
 
uöt8_t
 
begö
(
uöt16_t
) =0;

45 
vútuÆ
 
°›
() =0;

51 
vútuÆ
 
begöPackë
(
IPAddªss
 
ù
, 
uöt16_t
 
p‹t
) =0;

54 
vútuÆ
 
begöPackë
(c⁄° *
ho°
, 
uöt16_t
 
p‹t
) =0;

57 
vútuÆ
 
ídPackë
() =0;

59 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
) =0;

61 
vútuÆ
 
size_t
 
wrôe
(c⁄° 
uöt8_t
 *
buf„r
, size_à
size
) =0;

65 
vútuÆ
 
∑r£Packë
() =0;

67 
vútuÆ
 
avaûabÀ
() =0;

69 
vútuÆ
 
ªad
() =0;

72 
vútuÆ
 
ªad
(* 
buf„r
, 
size_t
 
Àn
) =0;

75 
vútuÆ
 
ªad
(* 
buf„r
, 
size_t
 
Àn
) =0;

77 
vútuÆ
 
≥ek
() =0;

78 
vútuÆ
 
Êush
() =0;

81 
vútuÆ
 
IPAddªss
 
ªmŸeIP
() =0;

83 
vútuÆ
 
uöt16_t
 
ªmŸeP‹t
() =0;

84 
	m¥Ÿe˘ed
:

85 
uöt8_t
* 
	$øwIPAddªss
(
IPAddªss
& 
addr
Ë{ áddr.
	`øw_addªss
(); };

86 
	}
};

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/WCharacter.h

20 #i‚de‡
Ch¨a˘î_h


21 
	#Ch¨a˘î_h


	)

23 
	~<˘y≥.h
>

26 
ölöe
 
boﬁón
 
	$isAÕhaNumîic
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

27 
ölöe
 
boﬁón
 
	$isAÕha
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
ölöe
 
boﬁón
 
	$isAscii
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

29 
ölöe
 
boﬁón
 
	$isWhôe•a˚
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

30 
ölöe
 
boﬁón
 
	$isC⁄åﬁ
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

31 
ölöe
 
boﬁón
 
	$isDigô
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

32 
ölöe
 
boﬁón
 
	$isGøph
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

33 
ölöe
 
boﬁón
 
	$isLowîCa£
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

34 
ölöe
 
boﬁón
 
	$isPröèbÀ
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

35 
ölöe
 
boﬁón
 
	$isPun˘
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

36 
ölöe
 
boﬁón
 
	$isS∑˚
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

37 
ölöe
 
boﬁón
 
	$isUµîCa£
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

38 
ölöe
 
boﬁón
 
	$isHexadecimÆDigô
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

39 
ölöe
 
	$toAscii
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

40 
ölöe
 
	$toLowîCa£
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

41 
ölöe
 
	$toUµîCa£
(
c
)
	`__©åibuã__
((
Æways_ölöe
));

46 
ölöe
 
boﬁón
 
	$isAÕhaNumîic
(
c
)

48  ( 
	`iß um
(
c
Ë=0 ? 
Ál£
 : 
åue
);

49 
	}
}

54 
ölöe
 
boﬁón
 
	$isAÕha
(
c
)

56  ( 
	`ißÕha
(
c
Ë=0 ? 
Ál£
 : 
åue
);

57 
	}
}

62 
ölöe
 
boﬁón
 
	$isAscii
(
c
)

64  ( 
	`ißscii
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

65 
	}
}

69 
ölöe
 
boﬁón
 
	$isWhôe•a˚
(
c
)

71  ( 
	`isbœnk
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

72 
	}
}

76 
ölöe
 
boﬁón
 
	$isC⁄åﬁ
(
c
)

78  ( 
	`is˙ål
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

79 
	}
}

83 
ölöe
 
boﬁón
 
	$isDigô
(
c
)

85  ( 
	`isdigô
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

86 
	}
}

90 
ölöe
 
boﬁón
 
	$isGøph
(
c
)

92  ( 
	`isgøph
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

93 
	}
}

97 
ölöe
 
boﬁón
 
	$isLowîCa£
(
c
)

99  (
	`i¶owî
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

100 
	}
}

104 
ölöe
 
boﬁón
 
	$isPröèbÀ
(
c
)

106  ( 
	`i•röt
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

107 
	}
}

112 
ölöe
 
boﬁón
 
	$isPun˘
(
c
)

114  ( 
	`i•un˘
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

115 
	}
}

121 
ölöe
 
boﬁón
 
	$isS∑˚
(
c
)

123  ( 
	`is•a˚
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

124 
	}
}

128 
ölöe
 
boﬁón
 
	$isUµîCa£
(
c
)

130  ( 
	`isuµî
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

131 
	}
}

136 
ölöe
 
boﬁón
 
	$isHexadecimÆDigô
(
c
)

138  ( 
	`isxdigô
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

139 
	}
}

144 
ölöe
 
	$toAscii
(
c
)

146  
	`tﬂscii
 (
c
);

147 
	}
}

156 
ölöe
 
	$toLowîCa£
(
c
)

158  
	`tﬁowî
 (
c
);

159 
	}
}

163 
ölöe
 
	$toUµîCa£
(
c
)

165  
	`touµî
 (
c
);

166 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/WInterrupts.c

27 
	~<öây≥s.h
>

28 
	~<avr/io.h
>

29 
	~<avr/öãºu±.h
>

30 
	~<avr/pgm•a˚.h
>

31 
	~<°dio.h
>

33 
	~"wúög_¥iv©e.h
"

35 vﬁ©ûê
voidFuncPå
 
	götFunc
[
EXTERNAL_NUM_INTERRUPTS
];

38 
©èchI¡îru±
(
uöt8_t
 
öãºu±Num
, (*
u£rFunc
)(), 
mode
) {

39 if(
öãºu±Num
 < 
EXTERNAL_NUM_INTERRUPTS
) {

40 
ötFunc
[
öãºu±Num
] = 
u£rFunc
;

49 
öãºu±Num
) {

50 #i‡
	`deföed
(
__AVR_ATmega32U4__
)

55 
EICRA
 = (EICRA & ~((1<<
ISC00
Ë| (1<<
ISC01
))Ë| (
mode
 << ISC00);

56 
EIMSK
 |(1<<
INT0
);

59 
EICRA
 = (EICRA & ~((1<<
ISC10
Ë| (1<<
ISC11
))Ë| (
mode
 << ISC10);

60 
EIMSK
 |(1<<
INT1
);

63 
EICRA
 = (EICRA & ~((1<<
ISC20
Ë| (1<<
ISC21
))Ë| (
mode
 << ISC20);

64 
EIMSK
 |(1<<
INT2
);

67 
EICRA
 = (EICRA & ~((1<<
ISC30
Ë| (1<<
ISC31
))Ë| (
mode
 << ISC30);

68 
EIMSK
 |(1<<
INT3
);

70 #ñi‡
	`deföed
(
EICRA
Ë&& deföed(
EICRB
Ë&& deföed(
EIMSK
)

72 
EICRA
 = (EICRA & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

73 
EIMSK
 |(1 << 
INT0
);

76 
EICRA
 = (EICRA & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

77 
EIMSK
 |(1 << 
INT1
);

80 
EICRA
 = (EICRA & ~((1 << 
ISC20
Ë| (1 << 
ISC21
))Ë| (
mode
 << ISC20);

81 
EIMSK
 |(1 << 
INT2
);

84 
EICRA
 = (EICRA & ~((1 << 
ISC30
Ë| (1 << 
ISC31
))Ë| (
mode
 << ISC30);

85 
EIMSK
 |(1 << 
INT3
);

88 
EICRB
 = (EICRB & ~((1 << 
ISC40
Ë| (1 << 
ISC41
))Ë| (
mode
 << ISC40);

89 
EIMSK
 |(1 << 
INT4
);

92 
EICRB
 = (EICRB & ~((1 << 
ISC50
Ë| (1 << 
ISC51
))Ë| (
mode
 << ISC50);

93 
EIMSK
 |(1 << 
INT5
);

96 
EICRB
 = (EICRB & ~((1 << 
ISC60
Ë| (1 << 
ISC61
))Ë| (
mode
 << ISC60);

97 
EIMSK
 |(1 << 
INT6
);

100 
EICRB
 = (EICRB & ~((1 << 
ISC70
Ë| (1 << 
ISC71
))Ë| (
mode
 << ISC70);

101 
EIMSK
 |(1 << 
INT7
);

105 #i‡
	`deföed
(
EICRA
Ë&& deföed(
ISC00
Ë&& deföed(
EIMSK
)

106 
EICRA
 = (EICRA & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

107 
EIMSK
 |(1 << 
INT0
);

108 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC00
Ë&& deföed(
GICR
)

109 
MCUCR
 = (MCUCR & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

110 
GICR
 |(1 << 
INT0
);

111 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC00
Ë&& deföed(
GIMSK
)

112 
MCUCR
 = (MCUCR & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

113 
GIMSK
 |(1 << 
INT0
);

115 #îr‹ 
©èchI¡îru±
 
nŸ
 
föished
 
this
 
	`CPU
 (0)

120 #i‡
	`deföed
(
EICRA
Ë&& deföed(
ISC10
Ë&& deföed(
ISC11
Ë&& deföed(
EIMSK
)

121 
EICRA
 = (EICRA & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

122 
EIMSK
 |(1 << 
INT1
);

123 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC10
Ë&& deföed(
ISC11
Ë&& deföed(
GICR
)

124 
MCUCR
 = (MCUCR & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

125 
GICR
 |(1 << 
INT1
);

126 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC10
Ë&& deföed(
GIMSK
) && defined(GIMSK)

127 
MCUCR
 = (MCUCR & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

128 
GIMSK
 |(1 << 
INT1
);

130 #w¨nög 
©èchI¡îru±
 
may
 
√ed
 
some
 
m‹e
 
w‹k
 
this
 
	`˝u
 (1)

135 #i‡
	`deföed
(
EICRA
Ë&& deföed(
ISC20
Ë&& deföed(
ISC21
Ë&& deföed(
EIMSK
)

136 
EICRA
 = (EICRA & ~((1 << 
ISC20
Ë| (1 << 
ISC21
))Ë| (
mode
 << ISC20);

137 
EIMSK
 |(1 << 
INT2
);

138 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC20
Ë&& deföed(
ISC21
Ë&& deföed(
GICR
)

139 
MCUCR
 = (MCUCR & ~((1 << 
ISC20
Ë| (1 << 
ISC21
))Ë| (
mode
 << ISC20);

140 
GICR
 |(1 << 
INT2
);

141 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC20
Ë&& deföed(
GIMSK
) && defined(GIMSK)

142 
MCUCR
 = (MCUCR & ~((1 << 
ISC20
Ë| (1 << 
ISC21
))Ë| (
mode
 << ISC20);

143 
GIMSK
 |(1 << 
INT2
);

149 
	}
}

151 
	$dëachI¡îru±
(
uöt8_t
 
öãºu±Num
) {

152 if(
öãºu±Num
 < 
EXTERNAL_NUM_INTERRUPTS
) {

156 
öãºu±Num
) {

157 #i‡
	`deföed
(
__AVR_ATmega32U4__
)

159 
EIMSK
 &~(1<<
INT0
);

162 
EIMSK
 &~(1<<
INT1
);

165 
EIMSK
 &~(1<<
INT2
);

168 
EIMSK
 &~(1<<
INT3
);

170 #ñi‡
	`deföed
(
EICRA
Ë&& deföed(
EICRB
Ë&& deföed(
EIMSK
)

172 
EIMSK
 &~(1 << 
INT0
);

175 
EIMSK
 &~(1 << 
INT1
);

178 
EIMSK
 &~(1 << 
INT2
);

181 
EIMSK
 &~(1 << 
INT3
);

184 
EIMSK
 &~(1 << 
INT4
);

187 
EIMSK
 &~(1 << 
INT5
);

190 
EIMSK
 &~(1 << 
INT6
);

193 
EIMSK
 &~(1 << 
INT7
);

197 #i‡
	`deföed
(
EIMSK
Ë&& deföed(
INT0
)

198 
EIMSK
 &~(1 << 
INT0
);

199 #ñi‡
	`deföed
(
GICR
Ë&& deföed(
ISC00
)

200 
GICR
 &~(1 << 
INT0
);

201 #ñi‡
	`deföed
(
GIMSK
Ë&& deföed(
INT0
)

202 
GIMSK
 &~(1 << 
INT0
);

204 #îr‹ 
dëachI¡îru±
 
nŸ
 
föished
 
this
 
˝u


209 #i‡
	`deföed
(
EIMSK
Ë&& deföed(
INT1
)

210 
EIMSK
 &~(1 << 
INT1
);

211 #ñi‡
	`deföed
(
GICR
Ë&& deföed(
INT1
)

212 
GICR
 &~(1 << 
INT1
);

213 #ñi‡
	`deföed
(
GIMSK
Ë&& deföed(
INT1
)

214 
GIMSK
 &~(1 << 
INT1
);

216 #w¨nög 
dëachI¡îru±
 
may
 
√ed
 
some
 
m‹e
 
w‹k
 
this
 
	`˝u
 (1)

222 
ötFunc
[
öãºu±Num
] = 0;

224 
	}
}

232 #i‡
deföed
(
__AVR_ATmega32U4__
)

233 
	$SIGNAL
(
INT0_ve˘
) {

234 if(
ötFunc
[
EXTERNAL_INT_0
])

235 
ötFunc
[
EXTERNAL_INT_0
]();

236 
	}
}

238 
	$SIGNAL
(
INT1_ve˘
) {

239 if(
ötFunc
[
EXTERNAL_INT_1
])

240 
ötFunc
[
EXTERNAL_INT_1
]();

241 
	}
}

243 
	$SIGNAL
(
INT2_ve˘
) {

244 if(
ötFunc
[
EXTERNAL_INT_2
])

245 
ötFunc
[
EXTERNAL_INT_2
]();

246 
	}
}

248 
	$SIGNAL
(
INT3_ve˘
) {

249 if(
ötFunc
[
EXTERNAL_INT_3
])

250 
ötFunc
[
EXTERNAL_INT_3
]();

251 
	}
}

253 #ñi‡
deföed
(
EICRA
Ë&& deföed(
EICRB
)

255 
	$SIGNAL
(
INT0_ve˘
) {

256 if(
ötFunc
[
EXTERNAL_INT_2
])

257 
ötFunc
[
EXTERNAL_INT_2
]();

258 
	}
}

260 
	$SIGNAL
(
INT1_ve˘
) {

261 if(
ötFunc
[
EXTERNAL_INT_3
])

262 
ötFunc
[
EXTERNAL_INT_3
]();

263 
	}
}

265 
	$SIGNAL
(
INT2_ve˘
) {

266 if(
ötFunc
[
EXTERNAL_INT_4
])

267 
ötFunc
[
EXTERNAL_INT_4
]();

268 
	}
}

270 
	$SIGNAL
(
INT3_ve˘
) {

271 if(
ötFunc
[
EXTERNAL_INT_5
])

272 
ötFunc
[
EXTERNAL_INT_5
]();

273 
	}
}

275 
	$SIGNAL
(
INT4_ve˘
) {

276 if(
ötFunc
[
EXTERNAL_INT_0
])

277 
ötFunc
[
EXTERNAL_INT_0
]();

278 
	}
}

280 
	$SIGNAL
(
INT5_ve˘
) {

281 if(
ötFunc
[
EXTERNAL_INT_1
])

282 
ötFunc
[
EXTERNAL_INT_1
]();

283 
	}
}

285 
	$SIGNAL
(
INT6_ve˘
) {

286 if(
ötFunc
[
EXTERNAL_INT_6
])

287 
ötFunc
[
EXTERNAL_INT_6
]();

288 
	}
}

290 
	$SIGNAL
(
INT7_ve˘
) {

291 if(
ötFunc
[
EXTERNAL_INT_7
])

292 
ötFunc
[
EXTERNAL_INT_7
]();

293 
	}
}

297 
	$SIGNAL
(
INT0_ve˘
) {

298 if(
ötFunc
[
EXTERNAL_INT_0
])

299 
ötFunc
[
EXTERNAL_INT_0
]();

300 
	}
}

302 
	$SIGNAL
(
INT1_ve˘
) {

303 if(
ötFunc
[
EXTERNAL_INT_1
])

304 
ötFunc
[
EXTERNAL_INT_1
]();

305 
	}
}

307 #i‡
deföed
(
EICRA
Ë&& deföed(
ISC20
)

308 
	$SIGNAL
(
INT2_ve˘
) {

309 if(
ötFunc
[
EXTERNAL_INT_2
])

310 
ötFunc
[
EXTERNAL_INT_2
]();

311 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/WMath.cpp

27 
	~"°dlib.h
"

30 
	$øndomSìd
(
£ed
)

32 i‡(
£ed
 != 0) {

33 
	`§™dom
(
£ed
);

35 
	}
}

37 
	$øndom
(
howbig
)

39 i‡(
howbig
 == 0) {

42  
	`øndom
(Ë% 
howbig
;

43 
	}
}

45 
	$øndom
(
howsmÆl
, 
howbig
)

47 i‡(
howsmÆl
 >
howbig
) {

48  
howsmÆl
;

50 
diff
 = 
howbig
 - 
howsmÆl
;

51  
	`øndom
(
diff
Ë+ 
howsmÆl
;

52 
	}
}

54 
	$m≠
(
x
, 
ö_mö
, 
ö_max
, 
out_mö
, 
out_max
)

56  (
x
 - 
ö_mö
Ë* (
out_max
 - 
out_mö
Ë/ (
ö_max
 - in_min) + out_min;

57 
	}
}

59 
	$makeW‹d
(
w
Ë{  w; 
	}
}

60 
	$makeW‹d
(
h
, 
l
Ë{  (h << 8Ë|Ü; 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/WString.cpp

22 
	~"WSåög.h
"

29 
	gSåög
::
	$Såög
(c⁄° *
c°r
)

31 
	`öô
();

32 i‡(
c°r
Ë
	`c›y
(c°r, 
	`°æí
(cstr));

33 
	}
}

35 
	gSåög
::
	$Såög
(c⁄° 
Såög
 &
vÆue
)

37 
	`öô
();

38 *
this
 = 
vÆue
;

39 
	}
}

41 #ifde‡
__GXX_EXPERIMENTAL_CXX0X__


42 
	gSåög
::
	$Såög
(
Såög
 &&
rvÆ
)

44 
	`öô
();

45 
	`move
(
rvÆ
);

46 
	}
}

47 
	gSåög
::
	$Såög
(
SåögSumHñ≥r
 &&
rvÆ
)

49 
	`öô
();

50 
	`move
(
rvÆ
);

51 
	}
}

54 
	gSåög
::
	$Såög
(
c
)

56 
	`öô
();

57 
buf
[2];

58 
buf
[0] = 
c
;

59 
buf
[1] = 0;

60 *
this
 = 
buf
;

61 
	}
}

63 
	gSåög
::
	$Såög
(
vÆue
, 
ba£
)

65 
	`öô
();

66 
buf
[9];

67 
	`utﬂ
(
vÆue
, 
buf
, 
ba£
);

68 *
this
 = 
buf
;

69 
	}
}

71 
	gSåög
::
	$Såög
(
vÆue
, 
ba£
)

73 
	`öô
();

74 
buf
[18];

75 
	`ôﬂ
(
vÆue
, 
buf
, 
ba£
);

76 *
this
 = 
buf
;

77 
	}
}

79 
	gSåög
::
	$Såög
(
vÆue
, 
ba£
)

81 
	`öô
();

82 
buf
[17];

83 
	`utﬂ
(
vÆue
, 
buf
, 
ba£
);

84 *
this
 = 
buf
;

85 
	}
}

87 
	gSåög
::
	$Såög
(
vÆue
, 
ba£
)

89 
	`öô
();

90 
buf
[34];

91 
	`…ﬂ
(
vÆue
, 
buf
, 
ba£
);

92 *
this
 = 
buf
;

93 
	}
}

95 
	gSåög
::
	$Såög
(
vÆue
, 
ba£
)

97 
	`öô
();

98 
buf
[33];

99 
	`u…ﬂ
(
vÆue
, 
buf
, 
ba£
);

100 *
this
 = 
buf
;

101 
	}
}

103 
	gSåög
::~
	$Såög
()

105 
	`‰ì
(
buf„r
);

106 
	}
}

112 
ölöe
 
	gSåög
::
	$öô
()

114 
buf„r
 = 
NULL
;

115 
ˇ∑côy
 = 0;

116 
Àn
 = 0;

117 
Êags
 = 0;

118 
	}
}

120 
	gSåög
::
	$övÆid©e
()

122 i‡(
buf„r
Ë
	`‰ì
(buffer);

123 
buf„r
 = 
NULL
;

124 
ˇ∑côy
 = 
Àn
 = 0;

125 
	}
}

127 
	gSåög
::
	$ª£rve
(
size
)

129 i‡(
buf„r
 && 
ˇ∑côy
 >
size
)  1;

130 i‡(
	`ch™geBuf„r
(
size
)) {

131 i‡(
Àn
 =0Ë
buf„r
[0] = 0;

135 
	}
}

137 
	gSåög
::
	$ch™geBuf„r
(
maxSåLí
)

139 *
√wbuf„r
 = (*)
	`ªÆloc
(
buf„r
, 
maxSåLí
 + 1);

140 i‡(
√wbuf„r
) {

141 
buf„r
 = 
√wbuf„r
;

142 
ˇ∑côy
 = 
maxSåLí
;

146 
	}
}

152 
	gSåög
 & Såög::
	$c›y
(c⁄° *
c°r
, 
Àngth
)

154 i‡(!
	`ª£rve
(
Àngth
)) {

155 
	`övÆid©e
();

156  *
this
;

158 
Àn
 = 
Àngth
;

159 
	`°r˝y
(
buf„r
, 
c°r
);

160  *
this
;

161 
	}
}

163 #ifde‡
__GXX_EXPERIMENTAL_CXX0X__


164 
	gSåög
::
	$move
(
Såög
 &
rhs
)

166 i‡(
buf„r
) {

167 i‡(
ˇ∑côy
 >
rhs
.
Àn
) {

168 
	`°r˝y
(
buf„r
, 
rhs
.buffer);

169 
Àn
 = 
rhs
.len;

170 
rhs
.
Àn
 = 0;

173 
	`‰ì
(
buf„r
);

176 
buf„r
 = 
rhs
.buffer;

177 
ˇ∑côy
 = 
rhs
.capacity;

178 
Àn
 = 
rhs
.len;

179 
rhs
.
buf„r
 = 
NULL
;

180 
rhs
.
ˇ∑côy
 = 0;

181 
rhs
.
Àn
 = 0;

182 
	}
}

185 
	gSåög
 & Såög::
›î©‹
 = (c⁄° 
Såög
 &
rhs
)

187 i‡(
this
 =&
rhs
)  *this;

189 i‡(
	grhs
.
	gbuf„r
Ë
c›y
(
rhs
.
buf„r
,Ñhs.
Àn
);

190 
övÆid©e
();

192  *
	gthis
;

195 #ifde‡
__GXX_EXPERIMENTAL_CXX0X__


196 
	gSåög
 & Såög::
›î©‹
 = (
Såög
 &&
rvÆ
)

198 i‡(
this
 !&
rvÆ
Ë
move
(rval);

199  *
	gthis
;

202 
	gSåög
 & Såög::
›î©‹
 = (
SåögSumHñ≥r
 &&
rvÆ
)

204 i‡(
this
 !&
rvÆ
Ë
move
(rval);

205  *
	gthis
;

209 
	gSåög
 & Såög::
›î©‹
 = (c⁄° *
c°r
)

211 i‡(
c°r
Ë
c›y
(c°r, 
°æí
(cstr));

212 
övÆid©e
();

214  *
	gthis
;

221 
	gSåög
::
	$c⁄ˇt
(c⁄° 
Såög
 &
s
)

223  
	`c⁄ˇt
(
s
.
buf„r
, s.
Àn
);

224 
	}
}

226 
	gSåög
::
	$c⁄ˇt
(c⁄° *
c°r
, 
Àngth
)

228 
√wÀn
 = 
Àn
 + 
Àngth
;

229 i‡(!
c°r
)  0;

230 i‡(
Àngth
 == 0)  1;

231 i‡(!
	`ª£rve
(
√wÀn
))  0;

232 
	`°r˝y
(
buf„r
 + 
Àn
, 
c°r
);

233 
Àn
 = 
√wÀn
;

235 
	}
}

237 
	gSåög
::
	$c⁄ˇt
(c⁄° *
c°r
)

239 i‡(!
c°r
)  0;

240  
	`c⁄ˇt
(
c°r
, 
	`°æí
(cstr));

241 
	}
}

243 
	gSåög
::
	$c⁄ˇt
(
c
)

245 
buf
[2];

246 
buf
[0] = 
c
;

247 
buf
[1] = 0;

248  
	`c⁄ˇt
(
buf
, 1);

249 
	}
}

251 
	gSåög
::
	$c⁄ˇt
(
num
)

253 
buf
[4];

254 
	`ôﬂ
(
num
, 
buf
, 10);

255  
	`c⁄ˇt
(
buf
, 
	`°æí
(buf));

256 
	}
}

258 
	gSåög
::
	$c⁄ˇt
(
num
)

260 
buf
[7];

261 
	`ôﬂ
(
num
, 
buf
, 10);

262  
	`c⁄ˇt
(
buf
, 
	`°æí
(buf));

263 
	}
}

265 
	gSåög
::
	$c⁄ˇt
(
num
)

267 
buf
[6];

268 
	`utﬂ
(
num
, 
buf
, 10);

269  
	`c⁄ˇt
(
buf
, 
	`°æí
(buf));

270 
	}
}

272 
	gSåög
::
	$c⁄ˇt
(
num
)

274 
buf
[12];

275 
	`…ﬂ
(
num
, 
buf
, 10);

276  
	`c⁄ˇt
(
buf
, 
	`°æí
(buf));

277 
	}
}

279 
	gSåög
::
	$c⁄ˇt
(
num
)

281 
buf
[11];

282 
	`u…ﬂ
(
num
, 
buf
, 10);

283  
	`c⁄ˇt
(
buf
, 
	`°æí
(buf));

284 
	}
}

290 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, c⁄° 
	gSåög
 &
	grhs
)

292 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

293 i‡(!
	ga
.
c⁄ˇt
(
rhs
.
buf„r
,Ñhs.
Àn
)Ëa.
övÆid©e
();

294  
	ga
;

297 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, c⁄° *
	gc°r
)

299 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

300 i‡(!
	gc°r
 || !
	ga
.
c⁄ˇt
(
c°r
, 
°æí
(c°r))Ëa.
övÆid©e
();

301  
	ga
;

304 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gc
)

306 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

307 i‡(!
	ga
.
c⁄ˇt
(
c
)Ëa.
övÆid©e
();

308  
	ga
;

311 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
)

313 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

314 i‡(!
	ga
.
c⁄ˇt
(
num
)Ëa.
övÆid©e
();

315  
	ga
;

318 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
)

320 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

321 i‡(!
	ga
.
c⁄ˇt
(
num
)Ëa.
övÆid©e
();

322  
	ga
;

325 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
)

327 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

328 i‡(!
	ga
.
c⁄ˇt
(
num
)Ëa.
övÆid©e
();

329  
	ga
;

332 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
)

334 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

335 i‡(!
	ga
.
c⁄ˇt
(
num
)Ëa.
övÆid©e
();

336  
	ga
;

339 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
)

341 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

342 i‡(!
	ga
.
c⁄ˇt
(
num
)Ëa.
övÆid©e
();

343  
	ga
;

350 
	gSåög
::
	$com∑ªTo
(c⁄° 
Såög
 &
s
) const

352 i‡(!
buf„r
 || !
s
.buffer) {

353 i‡(
s
.
buf„r
 && s.
Àn
 > 0)  0 - *(*)s.buffer;

354 i‡(
buf„r
 && 
Àn
 > 0)  *(*)buffer;

357  
	`°rcmp
(
buf„r
, 
s
.buffer);

358 
	}
}

360 
	gSåög
::
	$equÆs
(c⁄° 
Såög
 &
s2
) const

362  (
Àn
 =
s2
.À¿&& 
	`com∑ªTo
(s2) == 0);

363 
	}
}

365 
	gSåög
::
	$equÆs
(c⁄° *
c°r
) const

367 i‡(
Àn
 =0Ë (
c°r
 =
NULL
 || *cstr == 0);

368 i‡(
c°r
 =
NULL
Ë 
buf„r
[0] == 0;

369  
	`°rcmp
(
buf„r
, 
c°r
) == 0;

370 
	}
}

372 
	gSåög
::
›î©‹
<(c⁄° 
Såög
 &
rhs
) const

374  
com∑ªTo
(
rhs
) < 0;

377 
	gSåög
::
›î©‹
>(c⁄° 
Såög
 &
rhs
) const

379  
com∑ªTo
(
rhs
) > 0;

382 
	gSåög
::
›î©‹
<=(c⁄° 
Såög
 &
rhs
) const

384  
com∑ªTo
(
rhs
) <= 0;

387 
	gSåög
::
›î©‹
>=(c⁄° 
Såög
 &
rhs
) const

389  
com∑ªTo
(
rhs
) >= 0;

392 
	gSåög
::
	$equÆsIgn‹eCa£
–c⁄° 
Såög
 &
s2
 ) const

394 i‡(
this
 =&
s2
)  1;

395 i‡(
Àn
 !
s2
.len)  0;

396 i‡(
Àn
 == 0)  1;

397 c⁄° *
p1
 = 
buf„r
;

398 c⁄° *
p2
 = 
s2
.
buf„r
;

399 *
p1
) {

400 i‡(
	`tﬁowî
(*
p1
++Ë!tﬁowî(*
p2
++))  0;

403 
	}
}

405 
	gSåög
::
	$°¨tsWôh
–c⁄° 
Såög
 &
s2
 ) const

407 i‡(
Àn
 < 
s2
.len)  0;

408  
	`°¨tsWôh
(
s2
, 0);

409 
	}
}

411 
	gSåög
::
	$°¨tsWôh
–c⁄° 
Såög
 &
s2
, 
off£t
 ) const

413 i‡(
off£t
 > 
Àn
 - 
s2
.À¿|| !
buf„r
 || !s2.buffer)  0;

414  
	`°∫cmp
–&
buf„r
[
off£t
], 
s2
.buf„r, s2.
Àn
 ) == 0;

415 
	}
}

417 
	gSåög
::
	$ídsWôh
–c⁄° 
Såög
 &
s2
 ) const

419 i‡–
Àn
 < 
s2
.À¿|| !
buf„r
 || !s2.buffer)  0;

420  
	`°rcmp
(&
buf„r
[
Àn
 - 
s2
.len], s2.buffer) == 0;

421 
	}
}

427 
	gSåög
::
	$ch¨At
(
loc
) const

429  
›î©‹
[](
loc
);

430 
	}
}

432 
	gSåög
::
	$£tCh¨At
(
loc
, 
c
)

434 i‡(
loc
 < 
Àn
Ë
buf„r
[loc] = 
c
;

435 
	}
}

437 & 
	gSåög
::
›î©‹
[](
ödex
)

439 
dummy_wrôabÀ_ch¨
;

440 i‡(
	gödex
 >
Àn
 || !
buf„r
) {

441 
dummy_wrôabÀ_ch¨
 = 0;

442  
	gdummy_wrôabÀ_ch¨
;

444  
	gbuf„r
[
ödex
];

447 
	gSåög
::
›î©‹
[]–
ödex
 ) const

449 i‡(
ödex
 >
Àn
 || !
buf„r
)  0;

450  
	gbuf„r
[
ödex
];

453 
	gSåög
::
	$gëByãs
(*
buf
, 
bufsize
, 
ödex
) const

455 i‡(!
bufsize
 || !
buf
) ;

456 i‡(
ödex
 >
Àn
) {

457 
buf
[0] = 0;

460 
n
 = 
bufsize
 - 1;

461 i‡(
n
 > 
Àn
 - 
ödex
)Ç =Üen - index;

462 
	`°∫˝y
((*)
buf
, 
buf„r
 + 
ödex
, 
n
);

463 
buf
[
n
] = 0;

464 
	}
}

470 
	gSåög
::
	$ödexOf
(
c
) const

472  
	`ödexOf
(
c
, 0);

473 
	}
}

475 
	gSåög
::
	$ödexOf
–
ch
, 
‰omIndex
 ) const

477 i‡(
‰omIndex
 >
Àn
)  -1;

478 c⁄° * 
ãmp
 = 
	`°rchr
(
buf„r
 + 
‰omIndex
, 
ch
);

479 i‡(
ãmp
 =
NULL
)  -1;

480  
ãmp
 - 
buf„r
;

481 
	}
}

483 
	gSåög
::
	$ödexOf
(c⁄° 
Såög
 &
s2
) const

485  
	`ödexOf
(
s2
, 0);

486 
	}
}

488 
	gSåög
::
	$ödexOf
(c⁄° 
Såög
 &
s2
, 
‰omIndex
) const

490 i‡(
‰omIndex
 >
Àn
)  -1;

491 c⁄° *
found
 = 
	`°r°r
(
buf„r
 + 
‰omIndex
, 
s2
.buffer);

492 i‡(
found
 =
NULL
)  -1;

493  
found
 - 
buf„r
;

494 
	}
}

496 
	gSåög
::
	$œ°IndexOf
–
theCh¨
 ) const

498  
	`œ°IndexOf
(
theCh¨
, 
Àn
 - 1);

499 
	}
}

501 
	gSåög
::
	$œ°IndexOf
(
ch
, 
‰omIndex
) const

503 i‡(
‰omIndex
 >
Àn
)  -1;

504 
ãmpch¨
 = 
buf„r
[
‰omIndex
 + 1];

505 
buf„r
[
‰omIndex
 + 1] = '\0';

506 * 
ãmp
 = 
	`°ºchr
–
buf„r
, 
ch
 );

507 
buf„r
[
‰omIndex
 + 1] = 
ãmpch¨
;

508 i‡(
ãmp
 =
NULL
)  -1;

509  
ãmp
 - 
buf„r
;

510 
	}
}

512 
	gSåög
::
	$œ°IndexOf
(c⁄° 
Såög
 &
s2
) const

514  
	`œ°IndexOf
(
s2
, 
Àn
 - s2.len);

515 
	}
}

517 
	gSåög
::
	$œ°IndexOf
(c⁄° 
Såög
 &
s2
, 
‰omIndex
) const

519 i‡(
s2
.
Àn
 == 0 ||Üen == 0 || s2.len >Üen)  -1;

520 i‡(
‰omIndex
 >
Àn
) fromIndex =Üen - 1;

521 
found
 = -1;

522 *
p
 = 
buf„r
;Ö <buf„∏+ 
‰omIndex
;Ö++) {

523 
p
 = 
	`°r°r
’, 
s2
.
buf„r
);

524 i‡(!
p
) ;

525 i‡(()(
p
 - 
buf„r
Ë<
‰omIndex
Ë
found
 =Ö - buffer;

527  
found
;

528 
	}
}

530 
Såög
 
	gSåög
::
	$sub°rög
–
À·
 ) const

532  
	`sub°rög
(
À·
, 
Àn
);

533 
	}
}

535 
Såög
 
	gSåög
::
	$sub°rög
(
À·
, 
right
) const

537 i‡(
À·
 > 
right
) {

538 
ãmp
 = 
right
;

539 
right
 = 
À·
;

540 
À·
 = 
ãmp
;

542 
Såög
 
out
;

543 i‡(
À·
 > 
Àn
Ë 
out
;

544 i‡(
right
 > 
Àn
)Ñight =Üen;

545 
ãmp
 = 
buf„r
[
right
];

546 
buf„r
[
right
] = '\0';

547 
out
 = 
buf„r
 + 
À·
;

548 
buf„r
[
right
] = 
ãmp
;

549  
out
;

550 
	}
}

556 
	gSåög
::
	$ª∂a˚
(
föd
, 
ª∂a˚
)

558 i‡(!
buf„r
) ;

559 *
p
 = 
buf„r
; *p;Ö++) {

560 i‡(*
p
 =
föd
Ë*∞
ª∂a˚
;

562 
	}
}

564 
	gSåög
::
	$ª∂a˚
(c⁄° 
Såög
& 
föd
, c⁄° Såög& 
ª∂a˚
)

566 i‡(
Àn
 =0 || 
föd
.len == 0) ;

567 
diff
 = 
ª∂a˚
.
Àn
 - 
föd
.len;

568 *
ªadFrom
 = 
buf„r
;

569 *
foundAt
;

570 i‡(
diff
 == 0) {

571 (
foundAt
 = 
	`°r°r
(
ªadFrom
, 
föd
.
buf„r
)Ë!
NULL
) {

572 
	`mem˝y
(
foundAt
, 
ª∂a˚
.
buf„r
,Ñïœ˚.
Àn
);

573 
ªadFrom
 = 
foundAt
 + 
ª∂a˚
.
Àn
;

575 } i‡(
diff
 < 0) {

576 *
wrôeTo
 = 
buf„r
;

577 (
foundAt
 = 
	`°r°r
(
ªadFrom
, 
föd
.
buf„r
)Ë!
NULL
) {

578 
n
 = 
foundAt
 - 
ªadFrom
;

579 
	`mem˝y
(
wrôeTo
, 
ªadFrom
, 
n
);

580 
wrôeTo
 +
n
;

581 
	`mem˝y
(
wrôeTo
, 
ª∂a˚
.
buf„r
,Ñïœ˚.
Àn
);

582 
wrôeTo
 +
ª∂a˚
.
Àn
;

583 
ªadFrom
 = 
foundAt
 + 
föd
.
Àn
;

584 
Àn
 +
diff
;

586 
	`°r˝y
(
wrôeTo
, 
ªadFrom
);

588 
size
 = 
Àn
;

589 (
foundAt
 = 
	`°r°r
(
ªadFrom
, 
föd
.
buf„r
)Ë!
NULL
) {

590 
ªadFrom
 = 
foundAt
 + 
föd
.
Àn
;

591 
size
 +
diff
;

593 i‡(
size
 =
Àn
) ;

594 i‡(
size
 > 
ˇ∑côy
 && !
	`ch™geBuf„r
(size)) ;

595 
ödex
 = 
Àn
 - 1;

596 
ödex
 >0 && (ödex = 
	`œ°IndexOf
(
föd
, index)) >= 0) {

597 
ªadFrom
 = 
buf„r
 + 
ödex
 + 
föd
.
Àn
;

598 
	`memmove
(
ªadFrom
 + 
diff
,ÑódFrom, 
Àn
 - (ªadFrom - 
buf„r
));

599 
Àn
 +
diff
;

600 
buf„r
[
Àn
] = 0;

601 
	`mem˝y
(
buf„r
 + 
ödex
, 
ª∂a˚
.buf„r,Ñïœ˚.
Àn
);

602 
ödex
--;

605 
	}
}

607 
	gSåög
::
	$toLowîCa£
()

609 i‡(!
buf„r
) ;

610 *
p
 = 
buf„r
; *p;Ö++) {

611 *
p
 = 
	`tﬁowî
(*p);

613 
	}
}

615 
	gSåög
::
	$toUµîCa£
()

617 i‡(!
buf„r
) ;

618 *
p
 = 
buf„r
; *p;Ö++) {

619 *
p
 = 
	`touµî
(*p);

621 
	}
}

623 
	gSåög
::
	$åim
()

625 i‡(!
buf„r
 || 
Àn
 == 0) ;

626 *
begö
 = 
buf„r
;

627 
	`is•a˚
(*
begö
)) begin++;

628 *
íd
 = 
buf„r
 + 
Àn
 - 1;

629 
	`is•a˚
(*
íd
Ë&&Énd >
begö
)Énd--;

630 
Àn
 = 
íd
 + 1 - 
begö
;

631 i‡(
begö
 > 
buf„r
Ë
	`mem˝y
(buf„r, begö, 
Àn
);

632 
buf„r
[
Àn
] = 0;

633 
	}
}

639 
	gSåög
::
	$toI¡
() const

641 i‡(
buf„r
Ë 
	`©ﬁ
(buffer);

643 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/WString.h

22 #i‚de‡
Såög_˛ass_h


23 
	#Såög_˛ass_h


	)

24 #ifde‡
__˝lu•lus


26 
	~<°dlib.h
>

27 
	~<°rög.h
>

28 
	~<˘y≥.h
>

29 
	~<avr/pgm•a˚.h
>

37 
˛ass
 
	g__FœshSåögHñ≥r
;

38 
	#F
(
°rög_lôîÆ
Ë(
ªöãΩªt_ˇ°
<c⁄° 
__FœshSåögHñ≥r
 *>(
	`PSTR
(°rög_lôîÆ)))

	)

42 
˛ass
 
	gSåögSumHñ≥r
;

45 ˛as†
	cSåög


50 (
	tSåög
::*
	tSåögIfHñ≥rTy≥
)() const;

51 
	$SåögIfHñ≥r
() const {}

53 
public
:

59 
	`Såög
(c⁄° *
c°r
 = "");

60 
	`Såög
(c⁄° 
Såög
 &
°r
);

61 #ifde‡
__GXX_EXPERIMENTAL_CXX0X__


62 
	`Såög
(
Såög
 &&
rvÆ
);

63 
	`Såög
(
SåögSumHñ≥r
 &&
rvÆ
);

65 
ex∂icô
 
	`Såög
(
c
);

66 
ex∂icô
 
	`Såög
(, 
ba£
=10);

67 
ex∂icô
 
	`Såög
(, 
ba£
=10);

68 
ex∂icô
 
	`Såög
(, 
ba£
=10);

69 
ex∂icô
 
	`Såög
(, 
ba£
=10);

70 
ex∂icô
 
	`Såög
(, 
ba£
=10);

71 ~
	`Såög
();

77 
	`ª£rve
(
size
);

78 
ölöe
 
	$Àngth
(Ëc⁄° { 
Àn
;
	}
}

83 
	gSåög
 & 
	g›î©‹
 = (c⁄° 
Såög
 &
rhs
);

84 
	gSåög
 & 
	g›î©‹
 = (c⁄° *
c°r
);

85 #ifde‡
__GXX_EXPERIMENTAL_CXX0X__


86 
	gSåög
 & 
	g›î©‹
 = (
Såög
 &&
rvÆ
);

87 
	gSåög
 & 
	g›î©‹
 = (
SåögSumHñ≥r
 &&
rvÆ
);

95 
c⁄ˇt
(c⁄° 
Såög
 &
°r
);

96 
c⁄ˇt
(c⁄° *
c°r
);

97 
c⁄ˇt
(
c
);

98 
c⁄ˇt
(
c
);

99 
c⁄ˇt
(
num
);

100 
c⁄ˇt
(
num
);

101 
c⁄ˇt
(
num
);

102 
c⁄ˇt
(
num
);

106 
	gSåög
 & 
	g›î©‹
 +(c⁄° 
Såög
 &
rhs
Ë{
c⁄ˇt
‘hs);  (*
	gthis
);}

107 
	gSåög
 & 
	g›î©‹
 +(c⁄° *
c°r
Ë{
c⁄ˇt
(c°r);  (*
	gthis
);}

108 
	gSåög
 & 
	g›î©‹
 +(
c
Ë{
c⁄ˇt
(c);  (*
	gthis
);}

109 
	gSåög
 & 
	g›î©‹
 +(
num
Ë{
c⁄ˇt
“um);  (*
	gthis
);}

110 
	gSåög
 & 
	g›î©‹
 +(
num
Ë{
c⁄ˇt
“um);  (*
	gthis
);}

111 
	gSåög
 & 
	g›î©‹
 +(
num
Ë{
c⁄ˇt
“um);  (*
	gthis
);}

112 
	gSåög
 & 
	g›î©‹
 +(
num
Ë{
c⁄ˇt
“um);  (*
	gthis
);}

113 
	gSåög
 & 
	g›î©‹
 +(
num
Ë{
c⁄ˇt
“um);  (*
	gthis
);}

115 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, c⁄° 
	gSåög
 &
	grhs
);

116 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, c⁄° *
	gc°r
);

117 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gc
);

118 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
);

119 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
);

120 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
);

121 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
);

122 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
);

125 
›î©‹
 
	$SåögIfHñ≥rTy≥
(Ëc⁄° {  
buf„r
 ? &
Såög
::
SåögIfHñ≥r
 : 0; 
	}
}

126 
	$com∑ªTo
(c⁄° 
Såög
 &
s
) const;

127 
	$equÆs
(c⁄° 
Såög
 &
s
) const;

128 
	$equÆs
(c⁄° *
c°r
) const;

129 
›î©‹
 =(c⁄° 
Såög
 &
rhs
Ëc⁄° { 
	`equÆs
‘hs);
	}
}

130 
	g›î©‹
 =(c⁄° *
c°r
Ëc⁄° { 
equÆs
(cstr);}

131 
	g›î©‹
 !(c⁄° 
Såög
 &
rhs
Ëc⁄° { !
equÆs
(rhs);}

132 
	g›î©‹
 !(c⁄° *
c°r
Ëc⁄° { !
equÆs
(cstr);}

133 
	g›î©‹
 < (c⁄° 
	gSåög
 &
	grhs
) const;

134 
	g›î©‹
 > (c⁄° 
	gSåög
 &
	grhs
) const;

135 
	g›î©‹
 <(c⁄° 
Såög
 &
rhs
) const;

136 
	g›î©‹
 >(c⁄° 
Såög
 &
rhs
) const;

137 
	$equÆsIgn‹eCa£
(c⁄° 
Såög
 &
s
) const;

138 
	$°¨tsWôh
–c⁄° 
Såög
 &
¥efix
) const;

139 
	$°¨tsWôh
(c⁄° 
Såög
 &
¥efix
, 
off£t
) const;

140 
	$ídsWôh
(c⁄° 
Såög
 &
suffix
) const;

143 
	$ch¨At
(
ödex
) const;

144 
	`£tCh¨At
(
ödex
, 
c
);

145 
›î©‹
 [] (
ödex
) const;

146 & 
›î©‹
 [] (
ödex
);

147 
	$gëByãs
(*
buf
, 
bufsize
, 
ödex
=0) const;

148 
	$toCh¨Aºay
(*
buf
, 
bufsize
, 
ödex
=0) const

149 {
	`gëByãs
((*)
buf
, 
bufsize
, 
ödex
);
	}
}

152 
	$ödexOf
–
ch
 ) const;

153 
	$ödexOf
–
ch
, 
‰omIndex
 ) const;

154 
	$ödexOf
–c⁄° 
Såög
 &
°r
 ) const;

155 
	$ödexOf
–c⁄° 
Såög
 &
°r
, 
‰omIndex
 ) const;

156 
	$œ°IndexOf
–
ch
 ) const;

157 
	$œ°IndexOf
–
ch
, 
‰omIndex
 ) const;

158 
	$œ°IndexOf
–c⁄° 
Såög
 &
°r
 ) const;

159 
	$œ°IndexOf
–c⁄° 
Såög
 &
°r
, 
‰omIndex
 ) const;

160 
Såög
 
	$sub°rög
–
begöIndex
 ) const;

161 
Såög
 
	$sub°rög
–
begöIndex
, 
ídIndex
 ) const;

164 
	`ª∂a˚
(
föd
, 
ª∂a˚
);

165 
	`ª∂a˚
(c⁄° 
Såög
& 
föd
, c⁄° Såög& 
ª∂a˚
);

166 
	`toLowîCa£
();

167 
	`toUµîCa£
();

168 
	`åim
();

171 
	$toI¡
() const;

173 
¥Ÿe˘ed
:

174 *
buf„r
;

175 
ˇ∑côy
;

176 
Àn
;

177 
Êags
;

178 
¥Ÿe˘ed
:

179 
	`öô
();

180 
	`övÆid©e
();

181 
	`ch™geBuf„r
(
maxSåLí
);

182 
	`c⁄ˇt
(c⁄° *
c°r
, 
Àngth
);

185 
Såög
 & 
	`c›y
(c⁄° *
c°r
, 
Àngth
);

186 #ifde‡
__GXX_EXPERIMENTAL_CXX0X__


187 
	`move
(
Såög
 &
rhs
);

189 
	}
};

191 ˛as†
	cSåögSumHñ≥r
 : 
public
 
Såög


193 
public
:

194 
	$SåögSumHñ≥r
(c⁄° 
Såög
 &
s
Ë: 
	$Såög
(
s
) {}

195 
	$SåögSumHñ≥r
(c⁄° *
p
Ë: 
	$Såög
(
p
Ë{
	}
}

196 
	$SåögSumHñ≥r
(
c
Ë: 
	$Såög
(
c
Ë{
	}
}

197 
	$SåögSumHñ≥r
(
num
Ë: 
	$Såög
(
num
Ë{
	}
}

198 
	$SåögSumHñ≥r
(
num
Ë: 
	$Såög
(
num
Ë{
	}
}

199 
	$SåögSumHñ≥r
(
num
Ë: 
	$Såög
(
num
Ë{
	}
}

200 
	$SåögSumHñ≥r
(
num
Ë: 
	$Såög
(
num
Ë{
	}
}

201 
	$SåögSumHñ≥r
(
num
Ë: 
	$Såög
(
num
Ë{
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/binary.h

1 #i‚de‡
Bö¨y_h


2 
	#Bö¨y_h


	)

4 
	#B0
 0

	)

5 
	#B00
 0

	)

6 
	#B000
 0

	)

7 
	#B0000
 0

	)

8 
	#B00000
 0

	)

9 
	#B000000
 0

	)

10 
	#B0000000
 0

	)

11 
	#B00000000
 0

	)

12 
	#B1
 1

	)

13 
	#B01
 1

	)

14 
	#B001
 1

	)

15 
	#B0001
 1

	)

16 
	#B00001
 1

	)

17 
	#B000001
 1

	)

18 
	#B0000001
 1

	)

19 
	#B00000001
 1

	)

20 
	#B10
 2

	)

21 
	#B010
 2

	)

22 
	#B0010
 2

	)

23 
	#B00010
 2

	)

24 
	#B000010
 2

	)

25 
	#B0000010
 2

	)

26 
	#B00000010
 2

	)

27 
	#B11
 3

	)

28 
	#B011
 3

	)

29 
	#B0011
 3

	)

30 
	#B00011
 3

	)

31 
	#B000011
 3

	)

32 
	#B0000011
 3

	)

33 
	#B00000011
 3

	)

34 
	#B100
 4

	)

35 
	#B0100
 4

	)

36 
	#B00100
 4

	)

37 
	#B000100
 4

	)

38 
	#B0000100
 4

	)

39 
	#B00000100
 4

	)

40 
	#B101
 5

	)

41 
	#B0101
 5

	)

42 
	#B00101
 5

	)

43 
	#B000101
 5

	)

44 
	#B0000101
 5

	)

45 
	#B00000101
 5

	)

46 
	#B110
 6

	)

47 
	#B0110
 6

	)

48 
	#B00110
 6

	)

49 
	#B000110
 6

	)

50 
	#B0000110
 6

	)

51 
	#B00000110
 6

	)

52 
	#B111
 7

	)

53 
	#B0111
 7

	)

54 
	#B00111
 7

	)

55 
	#B000111
 7

	)

56 
	#B0000111
 7

	)

57 
	#B00000111
 7

	)

58 
	#B1000
 8

	)

59 
	#B01000
 8

	)

60 
	#B001000
 8

	)

61 
	#B0001000
 8

	)

62 
	#B00001000
 8

	)

63 
	#B1001
 9

	)

64 
	#B01001
 9

	)

65 
	#B001001
 9

	)

66 
	#B0001001
 9

	)

67 
	#B00001001
 9

	)

68 
	#B1010
 10

	)

69 
	#B01010
 10

	)

70 
	#B001010
 10

	)

71 
	#B0001010
 10

	)

72 
	#B00001010
 10

	)

73 
	#B1011
 11

	)

74 
	#B01011
 11

	)

75 
	#B001011
 11

	)

76 
	#B0001011
 11

	)

77 
	#B00001011
 11

	)

78 
	#B1100
 12

	)

79 
	#B01100
 12

	)

80 
	#B001100
 12

	)

81 
	#B0001100
 12

	)

82 
	#B00001100
 12

	)

83 
	#B1101
 13

	)

84 
	#B01101
 13

	)

85 
	#B001101
 13

	)

86 
	#B0001101
 13

	)

87 
	#B00001101
 13

	)

88 
	#B1110
 14

	)

89 
	#B01110
 14

	)

90 
	#B001110
 14

	)

91 
	#B0001110
 14

	)

92 
	#B00001110
 14

	)

93 
	#B1111
 15

	)

94 
	#B01111
 15

	)

95 
	#B001111
 15

	)

96 
	#B0001111
 15

	)

97 
	#B00001111
 15

	)

98 
	#B10000
 16

	)

99 
	#B010000
 16

	)

100 
	#B0010000
 16

	)

101 
	#B00010000
 16

	)

102 
	#B10001
 17

	)

103 
	#B010001
 17

	)

104 
	#B0010001
 17

	)

105 
	#B00010001
 17

	)

106 
	#B10010
 18

	)

107 
	#B010010
 18

	)

108 
	#B0010010
 18

	)

109 
	#B00010010
 18

	)

110 
	#B10011
 19

	)

111 
	#B010011
 19

	)

112 
	#B0010011
 19

	)

113 
	#B00010011
 19

	)

114 
	#B10100
 20

	)

115 
	#B010100
 20

	)

116 
	#B0010100
 20

	)

117 
	#B00010100
 20

	)

118 
	#B10101
 21

	)

119 
	#B010101
 21

	)

120 
	#B0010101
 21

	)

121 
	#B00010101
 21

	)

122 
	#B10110
 22

	)

123 
	#B010110
 22

	)

124 
	#B0010110
 22

	)

125 
	#B00010110
 22

	)

126 
	#B10111
 23

	)

127 
	#B010111
 23

	)

128 
	#B0010111
 23

	)

129 
	#B00010111
 23

	)

130 
	#B11000
 24

	)

131 
	#B011000
 24

	)

132 
	#B0011000
 24

	)

133 
	#B00011000
 24

	)

134 
	#B11001
 25

	)

135 
	#B011001
 25

	)

136 
	#B0011001
 25

	)

137 
	#B00011001
 25

	)

138 
	#B11010
 26

	)

139 
	#B011010
 26

	)

140 
	#B0011010
 26

	)

141 
	#B00011010
 26

	)

142 
	#B11011
 27

	)

143 
	#B011011
 27

	)

144 
	#B0011011
 27

	)

145 
	#B00011011
 27

	)

146 
	#B11100
 28

	)

147 
	#B011100
 28

	)

148 
	#B0011100
 28

	)

149 
	#B00011100
 28

	)

150 
	#B11101
 29

	)

151 
	#B011101
 29

	)

152 
	#B0011101
 29

	)

153 
	#B00011101
 29

	)

154 
	#B11110
 30

	)

155 
	#B011110
 30

	)

156 
	#B0011110
 30

	)

157 
	#B00011110
 30

	)

158 
	#B11111
 31

	)

159 
	#B011111
 31

	)

160 
	#B0011111
 31

	)

161 
	#B00011111
 31

	)

162 
	#B100000
 32

	)

163 
	#B0100000
 32

	)

164 
	#B00100000
 32

	)

165 
	#B100001
 33

	)

166 
	#B0100001
 33

	)

167 
	#B00100001
 33

	)

168 
	#B100010
 34

	)

169 
	#B0100010
 34

	)

170 
	#B00100010
 34

	)

171 
	#B100011
 35

	)

172 
	#B0100011
 35

	)

173 
	#B00100011
 35

	)

174 
	#B100100
 36

	)

175 
	#B0100100
 36

	)

176 
	#B00100100
 36

	)

177 
	#B100101
 37

	)

178 
	#B0100101
 37

	)

179 
	#B00100101
 37

	)

180 
	#B100110
 38

	)

181 
	#B0100110
 38

	)

182 
	#B00100110
 38

	)

183 
	#B100111
 39

	)

184 
	#B0100111
 39

	)

185 
	#B00100111
 39

	)

186 
	#B101000
 40

	)

187 
	#B0101000
 40

	)

188 
	#B00101000
 40

	)

189 
	#B101001
 41

	)

190 
	#B0101001
 41

	)

191 
	#B00101001
 41

	)

192 
	#B101010
 42

	)

193 
	#B0101010
 42

	)

194 
	#B00101010
 42

	)

195 
	#B101011
 43

	)

196 
	#B0101011
 43

	)

197 
	#B00101011
 43

	)

198 
	#B101100
 44

	)

199 
	#B0101100
 44

	)

200 
	#B00101100
 44

	)

201 
	#B101101
 45

	)

202 
	#B0101101
 45

	)

203 
	#B00101101
 45

	)

204 
	#B101110
 46

	)

205 
	#B0101110
 46

	)

206 
	#B00101110
 46

	)

207 
	#B101111
 47

	)

208 
	#B0101111
 47

	)

209 
	#B00101111
 47

	)

210 
	#B110000
 48

	)

211 
	#B0110000
 48

	)

212 
	#B00110000
 48

	)

213 
	#B110001
 49

	)

214 
	#B0110001
 49

	)

215 
	#B00110001
 49

	)

216 
	#B110010
 50

	)

217 
	#B0110010
 50

	)

218 
	#B00110010
 50

	)

219 
	#B110011
 51

	)

220 
	#B0110011
 51

	)

221 
	#B00110011
 51

	)

222 
	#B110100
 52

	)

223 
	#B0110100
 52

	)

224 
	#B00110100
 52

	)

225 
	#B110101
 53

	)

226 
	#B0110101
 53

	)

227 
	#B00110101
 53

	)

228 
	#B110110
 54

	)

229 
	#B0110110
 54

	)

230 
	#B00110110
 54

	)

231 
	#B110111
 55

	)

232 
	#B0110111
 55

	)

233 
	#B00110111
 55

	)

234 
	#B111000
 56

	)

235 
	#B0111000
 56

	)

236 
	#B00111000
 56

	)

237 
	#B111001
 57

	)

238 
	#B0111001
 57

	)

239 
	#B00111001
 57

	)

240 
	#B111010
 58

	)

241 
	#B0111010
 58

	)

242 
	#B00111010
 58

	)

243 
	#B111011
 59

	)

244 
	#B0111011
 59

	)

245 
	#B00111011
 59

	)

246 
	#B111100
 60

	)

247 
	#B0111100
 60

	)

248 
	#B00111100
 60

	)

249 
	#B111101
 61

	)

250 
	#B0111101
 61

	)

251 
	#B00111101
 61

	)

252 
	#B111110
 62

	)

253 
	#B0111110
 62

	)

254 
	#B00111110
 62

	)

255 
	#B111111
 63

	)

256 
	#B0111111
 63

	)

257 
	#B00111111
 63

	)

258 
	#B1000000
 64

	)

259 
	#B01000000
 64

	)

260 
	#B1000001
 65

	)

261 
	#B01000001
 65

	)

262 
	#B1000010
 66

	)

263 
	#B01000010
 66

	)

264 
	#B1000011
 67

	)

265 
	#B01000011
 67

	)

266 
	#B1000100
 68

	)

267 
	#B01000100
 68

	)

268 
	#B1000101
 69

	)

269 
	#B01000101
 69

	)

270 
	#B1000110
 70

	)

271 
	#B01000110
 70

	)

272 
	#B1000111
 71

	)

273 
	#B01000111
 71

	)

274 
	#B1001000
 72

	)

275 
	#B01001000
 72

	)

276 
	#B1001001
 73

	)

277 
	#B01001001
 73

	)

278 
	#B1001010
 74

	)

279 
	#B01001010
 74

	)

280 
	#B1001011
 75

	)

281 
	#B01001011
 75

	)

282 
	#B1001100
 76

	)

283 
	#B01001100
 76

	)

284 
	#B1001101
 77

	)

285 
	#B01001101
 77

	)

286 
	#B1001110
 78

	)

287 
	#B01001110
 78

	)

288 
	#B1001111
 79

	)

289 
	#B01001111
 79

	)

290 
	#B1010000
 80

	)

291 
	#B01010000
 80

	)

292 
	#B1010001
 81

	)

293 
	#B01010001
 81

	)

294 
	#B1010010
 82

	)

295 
	#B01010010
 82

	)

296 
	#B1010011
 83

	)

297 
	#B01010011
 83

	)

298 
	#B1010100
 84

	)

299 
	#B01010100
 84

	)

300 
	#B1010101
 85

	)

301 
	#B01010101
 85

	)

302 
	#B1010110
 86

	)

303 
	#B01010110
 86

	)

304 
	#B1010111
 87

	)

305 
	#B01010111
 87

	)

306 
	#B1011000
 88

	)

307 
	#B01011000
 88

	)

308 
	#B1011001
 89

	)

309 
	#B01011001
 89

	)

310 
	#B1011010
 90

	)

311 
	#B01011010
 90

	)

312 
	#B1011011
 91

	)

313 
	#B01011011
 91

	)

314 
	#B1011100
 92

	)

315 
	#B01011100
 92

	)

316 
	#B1011101
 93

	)

317 
	#B01011101
 93

	)

318 
	#B1011110
 94

	)

319 
	#B01011110
 94

	)

320 
	#B1011111
 95

	)

321 
	#B01011111
 95

	)

322 
	#B1100000
 96

	)

323 
	#B01100000
 96

	)

324 
	#B1100001
 97

	)

325 
	#B01100001
 97

	)

326 
	#B1100010
 98

	)

327 
	#B01100010
 98

	)

328 
	#B1100011
 99

	)

329 
	#B01100011
 99

	)

330 
	#B1100100
 100

	)

331 
	#B01100100
 100

	)

332 
	#B1100101
 101

	)

333 
	#B01100101
 101

	)

334 
	#B1100110
 102

	)

335 
	#B01100110
 102

	)

336 
	#B1100111
 103

	)

337 
	#B01100111
 103

	)

338 
	#B1101000
 104

	)

339 
	#B01101000
 104

	)

340 
	#B1101001
 105

	)

341 
	#B01101001
 105

	)

342 
	#B1101010
 106

	)

343 
	#B01101010
 106

	)

344 
	#B1101011
 107

	)

345 
	#B01101011
 107

	)

346 
	#B1101100
 108

	)

347 
	#B01101100
 108

	)

348 
	#B1101101
 109

	)

349 
	#B01101101
 109

	)

350 
	#B1101110
 110

	)

351 
	#B01101110
 110

	)

352 
	#B1101111
 111

	)

353 
	#B01101111
 111

	)

354 
	#B1110000
 112

	)

355 
	#B01110000
 112

	)

356 
	#B1110001
 113

	)

357 
	#B01110001
 113

	)

358 
	#B1110010
 114

	)

359 
	#B01110010
 114

	)

360 
	#B1110011
 115

	)

361 
	#B01110011
 115

	)

362 
	#B1110100
 116

	)

363 
	#B01110100
 116

	)

364 
	#B1110101
 117

	)

365 
	#B01110101
 117

	)

366 
	#B1110110
 118

	)

367 
	#B01110110
 118

	)

368 
	#B1110111
 119

	)

369 
	#B01110111
 119

	)

370 
	#B1111000
 120

	)

371 
	#B01111000
 120

	)

372 
	#B1111001
 121

	)

373 
	#B01111001
 121

	)

374 
	#B1111010
 122

	)

375 
	#B01111010
 122

	)

376 
	#B1111011
 123

	)

377 
	#B01111011
 123

	)

378 
	#B1111100
 124

	)

379 
	#B01111100
 124

	)

380 
	#B1111101
 125

	)

381 
	#B01111101
 125

	)

382 
	#B1111110
 126

	)

383 
	#B01111110
 126

	)

384 
	#B1111111
 127

	)

385 
	#B01111111
 127

	)

386 
	#B10000000
 128

	)

387 
	#B10000001
 129

	)

388 
	#B10000010
 130

	)

389 
	#B10000011
 131

	)

390 
	#B10000100
 132

	)

391 
	#B10000101
 133

	)

392 
	#B10000110
 134

	)

393 
	#B10000111
 135

	)

394 
	#B10001000
 136

	)

395 
	#B10001001
 137

	)

396 
	#B10001010
 138

	)

397 
	#B10001011
 139

	)

398 
	#B10001100
 140

	)

399 
	#B10001101
 141

	)

400 
	#B10001110
 142

	)

401 
	#B10001111
 143

	)

402 
	#B10010000
 144

	)

403 
	#B10010001
 145

	)

404 
	#B10010010
 146

	)

405 
	#B10010011
 147

	)

406 
	#B10010100
 148

	)

407 
	#B10010101
 149

	)

408 
	#B10010110
 150

	)

409 
	#B10010111
 151

	)

410 
	#B10011000
 152

	)

411 
	#B10011001
 153

	)

412 
	#B10011010
 154

	)

413 
	#B10011011
 155

	)

414 
	#B10011100
 156

	)

415 
	#B10011101
 157

	)

416 
	#B10011110
 158

	)

417 
	#B10011111
 159

	)

418 
	#B10100000
 160

	)

419 
	#B10100001
 161

	)

420 
	#B10100010
 162

	)

421 
	#B10100011
 163

	)

422 
	#B10100100
 164

	)

423 
	#B10100101
 165

	)

424 
	#B10100110
 166

	)

425 
	#B10100111
 167

	)

426 
	#B10101000
 168

	)

427 
	#B10101001
 169

	)

428 
	#B10101010
 170

	)

429 
	#B10101011
 171

	)

430 
	#B10101100
 172

	)

431 
	#B10101101
 173

	)

432 
	#B10101110
 174

	)

433 
	#B10101111
 175

	)

434 
	#B10110000
 176

	)

435 
	#B10110001
 177

	)

436 
	#B10110010
 178

	)

437 
	#B10110011
 179

	)

438 
	#B10110100
 180

	)

439 
	#B10110101
 181

	)

440 
	#B10110110
 182

	)

441 
	#B10110111
 183

	)

442 
	#B10111000
 184

	)

443 
	#B10111001
 185

	)

444 
	#B10111010
 186

	)

445 
	#B10111011
 187

	)

446 
	#B10111100
 188

	)

447 
	#B10111101
 189

	)

448 
	#B10111110
 190

	)

449 
	#B10111111
 191

	)

450 
	#B11000000
 192

	)

451 
	#B11000001
 193

	)

452 
	#B11000010
 194

	)

453 
	#B11000011
 195

	)

454 
	#B11000100
 196

	)

455 
	#B11000101
 197

	)

456 
	#B11000110
 198

	)

457 
	#B11000111
 199

	)

458 
	#B11001000
 200

	)

459 
	#B11001001
 201

	)

460 
	#B11001010
 202

	)

461 
	#B11001011
 203

	)

462 
	#B11001100
 204

	)

463 
	#B11001101
 205

	)

464 
	#B11001110
 206

	)

465 
	#B11001111
 207

	)

466 
	#B11010000
 208

	)

467 
	#B11010001
 209

	)

468 
	#B11010010
 210

	)

469 
	#B11010011
 211

	)

470 
	#B11010100
 212

	)

471 
	#B11010101
 213

	)

472 
	#B11010110
 214

	)

473 
	#B11010111
 215

	)

474 
	#B11011000
 216

	)

475 
	#B11011001
 217

	)

476 
	#B11011010
 218

	)

477 
	#B11011011
 219

	)

478 
	#B11011100
 220

	)

479 
	#B11011101
 221

	)

480 
	#B11011110
 222

	)

481 
	#B11011111
 223

	)

482 
	#B11100000
 224

	)

483 
	#B11100001
 225

	)

484 
	#B11100010
 226

	)

485 
	#B11100011
 227

	)

486 
	#B11100100
 228

	)

487 
	#B11100101
 229

	)

488 
	#B11100110
 230

	)

489 
	#B11100111
 231

	)

490 
	#B11101000
 232

	)

491 
	#B11101001
 233

	)

492 
	#B11101010
 234

	)

493 
	#B11101011
 235

	)

494 
	#B11101100
 236

	)

495 
	#B11101101
 237

	)

496 
	#B11101110
 238

	)

497 
	#B11101111
 239

	)

498 
	#B11110000
 240

	)

499 
	#B11110001
 241

	)

500 
	#B11110010
 242

	)

501 
	#B11110011
 243

	)

502 
	#B11110100
 244

	)

503 
	#B11110101
 245

	)

504 
	#B11110110
 246

	)

505 
	#B11110111
 247

	)

506 
	#B11111000
 248

	)

507 
	#B11111001
 249

	)

508 
	#B11111010
 250

	)

509 
	#B11111011
 251

	)

510 
	#B11111100
 252

	)

511 
	#B11111101
 253

	)

512 
	#B11111110
 254

	)

513 
	#B11111111
 255

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/main.cpp

1 
	~<Arduöo.h
>

3 
	$maö
()

5 
	`öô
();

7 #i‡
	`deföed
(
USBCON
)

8 
USBDevi˚
.
	`©èch
();

11 
	`£tup
();

14 
	`lo›
();

15 i‡(
£rülEvítRun
Ë
	`£rülEvítRun
();

19 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/new.cpp

1 
	~<√w.h
>

3 * 
›î©‹
 
	$√w
(
size_t
 
size
)

5  
	`mÆloc
(
size
);

6 
	}
}

8 
›î©‹
 
	$dñëe
(* 
±r
)

10 
	`‰ì
(
±r
);

11 
	}
}

13 
	$__cxa_gu¨d_acquúe
(
__gu¨d
 *
g
Ë{ !*(*)(g);
	}
};

14 
	$__cxa_gu¨d_ªÀa£
 (
__gu¨d
 *
g
Ë{*(*)g = 1;
	}
};

15 
	$__cxa_gu¨d_ab‹t
 (
__gu¨d
 *Ë{
	}
};

17 
	$__cxa_puª_vútuÆ
(Ë{
	}
};

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/new.h

5 #i‚de‡
NEW_H


6 
	#NEW_H


	)

8 
	~<°dlib.h
>

10 * 
›î©‹
 
√w
(
size_t
 
size
);

11 
›î©‹
 
dñëe
(* 
±r
);

13 
__exãnsi⁄__
 
	t__gu¨d
 
	t__©åibuã__
((
	tmode
 (
	t__DI__
)));

15 "C" 
__cxa_gu¨d_acquúe
(
__gu¨d
 *);

16 "C" 
__cxa_gu¨d_ªÀa£
 (
__gu¨d
 *);

17 "C" 
__cxa_gu¨d_ab‹t
 (
__gu¨d
 *);

19 "C" 
__cxa_puª_vútuÆ
();

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/wiring.c

25 
	~"wúög_¥iv©e.h
"

29 
	#MICROSECONDS_PER_TIMER0_OVERFLOW
 (
	`˛ockCy˛esToMi¸o£c⁄ds
(64 * 256))

	)

32 
	#MILLIS_INC
 (
MICROSECONDS_PER_TIMER0_OVERFLOW
 / 1000)

	)

37 
	#FRACT_INC
 ((
MICROSECONDS_PER_TIMER0_OVERFLOW
 % 1000Ë>> 3)

	)

38 
	#FRACT_MAX
 (1000 >> 3)

	)

40 vﬁ©ûê
	gtimî0_ovîÊow_cou¡
 = 0;

41 vﬁ©ûê
	gtimî0_mûlis
 = 0;

42 
	gtimî0_‰a˘
 = 0;

44 #i‡
deföed
 (
TIM0_OVF_ve˘
)

45 
	$SIGNAL
(
TIM0_OVF_ve˘
)

47 
	$SIGNAL
(
TIMER0_OVF_ve˘
)

52 
m
 = 
timî0_mûlis
;

53 
f
 = 
timî0_‰a˘
;

55 
m
 +
MILLIS_INC
;

56 
f
 +
FRACT_INC
;

57 i‡(
f
 >
FRACT_MAX
) {

58 
f
 -
FRACT_MAX
;

59 
m
 += 1;

62 
timî0_‰a˘
 = 
f
;

63 
timî0_mûlis
 = 
m
;

64 
timî0_ovîÊow_cou¡
++;

65 
	}
}

67 
	$mûlis
()

69 
m
;

70 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

74 
	`˛i
();

75 
m
 = 
timî0_mûlis
;

76 
SREG
 = 
ﬁdSREG
;

78  
m
;

79 
	}
}

81 
	$mi¸os
() {

82 
m
;

83 
uöt8_t
 
ﬁdSREG
 = 
SREG
, 
t
;

85 
	`˛i
();

86 
m
 = 
timî0_ovîÊow_cou¡
;

87 #i‡
	`deföed
(
TCNT0
)

88 
t
 = 
TCNT0
;

89 #ñi‡
	`deföed
(
TCNT0L
)

90 
t
 = 
TCNT0L
;

92 #îr‹ 
TIMER
 0 
nŸ
 
deföed


96 #ifde‡
TIFR0


97 i‡((
TIFR0
 & 
	`_BV
(
TOV0
)Ë&& (
t
 < 255))

98 
m
++;

100 i‡((
TIFR
 & 
	`_BV
(
TOV0
)Ë&& (
t
 < 255))

101 
m
++;

104 
SREG
 = 
ﬁdSREG
;

106  ((
m
 << 8Ë+ 
t
Ë* (64 / 
	`˛ockCy˛esPîMi¸o£c⁄d
());

107 
	}
}

109 
	$dñay
(
ms
)

111 
uöt16_t
 
°¨t
 = (uöt16_t)
	`mi¸os
();

113 
ms
 > 0) {

114 i‡(((
uöt16_t
)
	`mi¸os
(Ë- 
°¨t
) >= 1000) {

115 
ms
--;

116 
°¨t
 += 1000;

119 
	}
}

122 
	$dñayMi¸o£c⁄ds
(
us
)

127 #i‡
F_CPU
 >= 20000000L

132 
__asm__
 
	`__vﬁ©ûe__
 (

135 i‡(--
us
 == 0)

141 
us
 = (us<<2) + us;

144 
us
 -= 2;

146 #ñi‡
F_CPU
 >= 16000000L

151 i‡(--
us
 == 0)

157 
us
 <<= 2;

160 
us
 -= 2;

167 i‡(--
us
 == 0)

169 i‡(--
us
 == 0)

175 
us
 <<= 1;

179 
us
--;

183 
__asm__
 
	`__vﬁ©ûe__
 (

185 "b∫ê1b" : "=w" (
us
) : "0" (us)

187 
	}
}

189 
	$öô
()

193 
	`£i
();

198 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
WGM01
)

199 
	`sbi
(
TCCR0A
, 
WGM01
);

200 
	`sbi
(
TCCR0A
, 
WGM00
);

204 #i‡
	`deföed
(
__AVR_ATmega128__
)

206 
	`sbi
(
TCCR0
, 
CS02
);

207 #ñi‡
	`deföed
(
TCCR0
Ë&& deföed(
CS01
Ë&& deföed(
CS00
)

209 
	`sbi
(
TCCR0
, 
CS01
);

210 
	`sbi
(
TCCR0
, 
CS00
);

211 #ñi‡
	`deföed
(
TCCR0B
Ë&& deföed(
CS01
Ë&& deföed(
CS00
)

213 
	`sbi
(
TCCR0B
, 
CS01
);

214 
	`sbi
(
TCCR0B
, 
CS00
);

215 #ñi‡
	`deföed
(
TCCR0A
Ë&& deföed(
CS01
Ë&& deföed(
CS00
)

217 
	`sbi
(
TCCR0A
, 
CS01
);

218 
	`sbi
(
TCCR0A
, 
CS00
);

220 #îr‹ 
Timî
 0 
¥esˇÀ
 
Á˘‹
 64 
nŸ
 
£t
 
c‹ª˘ly


224 #i‡
	`deföed
(
TIMSK
Ë&& deföed(
TOIE0
)

225 
	`sbi
(
TIMSK
, 
TOIE0
);

226 #ñi‡
	`deföed
(
TIMSK0
Ë&& deföed(
TOIE0
)

227 
	`sbi
(
TIMSK0
, 
TOIE0
);

229 #îr‹ 
Timî
 0 
ovîÊow
 
öãºu±
 
nŸ
 
£t
 
c‹ª˘ly


237 #i‡
	`deföed
(
TCCR1B
Ë&& deföed(
CS11
Ë&& deföed(
CS10
)

238 
TCCR1B
 = 0;

241 
	`sbi
(
TCCR1B
, 
CS11
);

242 #i‡
F_CPU
 >= 8000000L

243 
	`sbi
(
TCCR1B
, 
CS10
);

245 #ñi‡
	`deföed
(
TCCR1
Ë&& deföed(
CS11
Ë&& deföed(
CS10
)

246 
	`sbi
(
TCCR1
, 
CS11
);

247 #i‡
F_CPU
 >= 8000000L

248 
	`sbi
(
TCCR1
, 
CS10
);

252 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
WGM10
)

253 
	`sbi
(
TCCR1A
, 
WGM10
);

254 #ñi‡
	`deföed
(
TCCR1
)

255 #w¨nög 
this
 
√eds
 
to
 
be
 
föished


259 #i‡
	`deföed
(
TCCR2
Ë&& deföed(
CS22
)

260 
	`sbi
(
TCCR2
, 
CS22
);

261 #ñi‡
	`deföed
(
TCCR2B
Ë&& deföed(
CS22
)

262 
	`sbi
(
TCCR2B
, 
CS22
);

264 #w¨nög 
Timî
 2 
nŸ
 
	`föished
 (
may
ÇŸ 
be
 
¥e£¡
 
⁄
 
this
 
CPU
)

268 #i‡
	`deföed
(
TCCR2
Ë&& deföed(
WGM20
)

269 
	`sbi
(
TCCR2
, 
WGM20
);

270 #ñi‡
	`deföed
(
TCCR2A
Ë&& deföed(
WGM20
)

271 
	`sbi
(
TCCR2A
, 
WGM20
);

273 #w¨nög 
Timî
 2 
nŸ
 
	`föished
 (
may
ÇŸ 
be
 
¥e£¡
 
⁄
 
this
 
CPU
)

276 #i‡
	`deföed
(
TCCR3B
Ë&& deföed(
CS31
Ë&& deföed(
WGM30
)

277 
	`sbi
(
TCCR3B
, 
CS31
);

278 
	`sbi
(
TCCR3B
, 
CS30
);

279 
	`sbi
(
TCCR3A
, 
WGM30
);

282 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
TCCR4B
Ë&& deföed(
TCCR4D
)

283 
	`sbi
(
TCCR4B
, 
CS42
);

284 
	`sbi
(
TCCR4B
, 
CS41
);

285 
	`sbi
(
TCCR4B
, 
CS40
);

286 
	`sbi
(
TCCR4D
, 
WGM40
);

287 
	`sbi
(
TCCR4A
, 
PWM4A
);

288 
	`sbi
(
TCCR4C
, 
PWM4D
);

290 #i‡
	`deföed
(
TCCR4B
Ë&& deföed(
CS41
Ë&& deföed(
WGM40
)

291 
	`sbi
(
TCCR4B
, 
CS41
);

292 
	`sbi
(
TCCR4B
, 
CS40
);

293 
	`sbi
(
TCCR4A
, 
WGM40
);

297 #i‡
	`deföed
(
TCCR5B
Ë&& deföed(
CS51
Ë&& deföed(
WGM50
)

298 
	`sbi
(
TCCR5B
, 
CS51
);

299 
	`sbi
(
TCCR5B
, 
CS50
);

300 
	`sbi
(
TCCR5A
, 
WGM50
);

303 #i‡
	`deföed
(
ADCSRA
)

308 
	`sbi
(
ADCSRA
, 
ADPS2
);

309 
	`sbi
(
ADCSRA
, 
ADPS1
);

310 
	`sbi
(
ADCSRA
, 
ADPS0
);

313 
	`sbi
(
ADCSRA
, 
ADEN
);

319 #i‡
	`deföed
(
UCSRB
)

320 
UCSRB
 = 0;

321 #ñi‡
	`deföed
(
UCSR0B
)

322 
UCSR0B
 = 0;

324 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/wiring_analog.c

27 
	~"wúög_¥iv©e.h
"

28 
	~"pös_¨duöo.h
"

30 
uöt8_t
 
	g™Æog_ª„ªn˚
 = 
DEFAULT
;

32 
	$™ÆogRe„ªn˚
(
uöt8_t
 
mode
)

37 
™Æog_ª„ªn˚
 = 
mode
;

38 
	}
}

40 
	$™ÆogRód
(
uöt8_t
 
pö
)

42 
uöt8_t
 
low
, 
high
;

44 #i‡
	`deföed
(
PORTL
)

45 i‡(
pö
 >= 54)Öin -= 54;

46 #ñi‡
	`deföed
(
__AVR_ATmega32U4__
)

47 i‡(
pö
 >= 18)Öin -= 18;

48 #ñi‡
	`deföed
(
PORTA
)

49 i‡(
pö
 >= 24)Öin -= 24;

51 i‡(
pö
 >= 14)Öin -= 14;

54 #i‡
	`deföed
(
__AVR_ATmega32U4__
)

55 
pö
 = 
	`™ÆogPöToCh™√l
(pin);

56 
ADCSRB
 = (ADCSRB & ~(1 << 
MUX5
)Ë| (((
pö
 >> 3) & 0x01) << MUX5);

57 #ñi‡
	`deföed
(
ADCSRB
Ë&& deföed(
MUX5
)

60 
ADCSRB
 = (ADCSRB & ~(1 << 
MUX5
)Ë| (((
pö
 >> 3) & 0x01) << MUX5);

66 #i‡
	`deföed
(
ADMUX
)

67 
ADMUX
 = (
™Æog_ª„ªn˚
 << 6Ë| (
pö
 & 0x07);

73 #i‡
	`deföed
(
ADCSRA
Ë&& deföed(
ADCL
)

75 
	`sbi
(
ADCSRA
, 
ADSC
);

78 
	`bô_is_£t
(
ADCSRA
, 
ADSC
));

84 
low
 = 
ADCL
;

85 
high
 = 
ADCH
;

88 
low
 = 0;

89 
high
 = 0;

93  (
high
 << 8Ë| 
low
;

94 
	}
}

100 
	$™ÆogWrôe
(
uöt8_t
 
pö
, 
vÆ
)

107 
	`pöMode
(
pö
, 
OUTPUT
);

108 i‡(
vÆ
 == 0)

110 
	`digôÆWrôe
(
pö
, 
LOW
);

112 i‡(
vÆ
 == 255)

114 
	`digôÆWrôe
(
pö
, 
HIGH
);

118 
	`digôÆPöToTimî
(
pö
))

121 #i‡
	`deföed
(
TCCR0
Ë&& deföed(
COM00
Ë&& !deföed(
__AVR_ATmega8__
)

122 
TIMER0A
:

124 
	`sbi
(
TCCR0
, 
COM00
);

125 
OCR0
 = 
vÆ
;

129 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
COM0A1
)

130 
TIMER0A
:

132 
	`sbi
(
TCCR0A
, 
COM0A1
);

133 
OCR0A
 = 
vÆ
;

137 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
COM0B1
)

138 
TIMER0B
:

140 
	`sbi
(
TCCR0A
, 
COM0B1
);

141 
OCR0B
 = 
vÆ
;

145 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
COM1A1
)

146 
TIMER1A
:

148 
	`sbi
(
TCCR1A
, 
COM1A1
);

149 
OCR1A
 = 
vÆ
;

153 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
COM1B1
)

154 
TIMER1B
:

156 
	`sbi
(
TCCR1A
, 
COM1B1
);

157 
OCR1B
 = 
vÆ
;

161 #i‡
	`deföed
(
TCCR2
Ë&& deföed(
COM21
)

162 
TIMER2
:

164 
	`sbi
(
TCCR2
, 
COM21
);

165 
OCR2
 = 
vÆ
;

169 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
COM2A1
)

170 
TIMER2A
:

172 
	`sbi
(
TCCR2A
, 
COM2A1
);

173 
OCR2A
 = 
vÆ
;

177 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
COM2B1
)

178 
TIMER2B
:

180 
	`sbi
(
TCCR2A
, 
COM2B1
);

181 
OCR2B
 = 
vÆ
;

185 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3A1
)

186 
TIMER3A
:

188 
	`sbi
(
TCCR3A
, 
COM3A1
);

189 
OCR3A
 = 
vÆ
;

193 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3B1
)

194 
TIMER3B
:

196 
	`sbi
(
TCCR3A
, 
COM3B1
);

197 
OCR3B
 = 
vÆ
;

201 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3C1
)

202 
TIMER3C
:

204 
	`sbi
(
TCCR3A
, 
COM3C1
);

205 
OCR3C
 = 
vÆ
;

209 #i‡
	`deföed
(
TCCR4A
)

210 
TIMER4A
:

212 
	`sbi
(
TCCR4A
, 
COM4A1
);

213 #i‡
	`deföed
(
COM4A0
)

214 
	`cbi
(
TCCR4A
, 
COM4A0
);

216 
OCR4A
 = 
vÆ
;

220 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4B1
)

221 
TIMER4B
:

223 
	`sbi
(
TCCR4A
, 
COM4B1
);

224 
OCR4B
 = 
vÆ
;

228 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4C1
)

229 
TIMER4C
:

231 
	`sbi
(
TCCR4A
, 
COM4C1
);

232 
OCR4C
 = 
vÆ
;

236 #i‡
	`deföed
(
TCCR4C
Ë&& deföed(
COM4D1
)

237 
TIMER4D
:

239 
	`sbi
(
TCCR4C
, 
COM4D1
);

240 #i‡
	`deföed
(
COM4D0
)

241 
	`cbi
(
TCCR4C
, 
COM4D0
);

243 
OCR4D
 = 
vÆ
;

248 #i‡
	`deföed
(
TCCR5A
Ë&& deföed(
COM5A1
)

249 
TIMER5A
:

251 
	`sbi
(
TCCR5A
, 
COM5A1
);

252 
OCR5A
 = 
vÆ
;

256 #i‡
	`deföed
(
TCCR5A
Ë&& deföed(
COM5B1
)

257 
TIMER5B
:

259 
	`sbi
(
TCCR5A
, 
COM5B1
);

260 
OCR5B
 = 
vÆ
;

264 #i‡
	`deföed
(
TCCR5A
Ë&& deföed(
COM5C1
)

265 
TIMER5C
:

267 
	`sbi
(
TCCR5A
, 
COM5C1
);

268 
OCR5C
 = 
vÆ
;

272 
NOT_ON_TIMER
:

274 i‡(
vÆ
 < 128) {

275 
	`digôÆWrôe
(
pö
, 
LOW
);

277 
	`digôÆWrôe
(
pö
, 
HIGH
);

281 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/wiring_digital.c

27 
	#ARDUINO_MAIN


	)

28 
	~"wúög_¥iv©e.h
"

29 
	~"pös_¨duöo.h
"

31 
	$pöMode
(
uöt8_t
 
pö
, uöt8_à
mode
)

33 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

34 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

35 vﬁ©ûê
uöt8_t
 *
ªg
, *
out
;

37 i‡(
p‹t
 =
NOT_A_PIN
) ;

40 
ªg
 = 
	`p‹tModeRegi°î
(
p‹t
);

41 
out
 = 
	`p‹tOuçutRegi°î
(
p‹t
);

43 i‡(
mode
 =
INPUT
) {

44 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

45 
	`˛i
();

46 *
ªg
 &~
bô
;

47 *
out
 &~
bô
;

48 
SREG
 = 
ﬁdSREG
;

49 } i‡(
mode
 =
INPUT_PULLUP
) {

50 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

51 
	`˛i
();

52 *
ªg
 &~
bô
;

53 *
out
 |
bô
;

54 
SREG
 = 
ﬁdSREG
;

56 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

57 
	`˛i
();

58 *
ªg
 |
bô
;

59 
SREG
 = 
ﬁdSREG
;

61 
	}
}

77 
	$tu∫OffPWM
(
uöt8_t
 
timî
)

79 
timî
)

81 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
COM1A1
)

82 
TIMER1A
: 
	`cbi
(
TCCR1A
, 
COM1A1
); ;

84 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
COM1B1
)

85 
TIMER1B
: 
	`cbi
(
TCCR1A
, 
COM1B1
); ;

88 #i‡
	`deföed
(
TCCR2
Ë&& deföed(
COM21
)

89 
TIMER2
: 
	`cbi
(
TCCR2
, 
COM21
); ;

92 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
COM0A1
)

93 
TIMER0A
: 
	`cbi
(
TCCR0A
, 
COM0A1
); ;

96 #i‡
	`deföed
(
TIMER0B
Ë&& deföed(
COM0B1
)

97 
TIMER0B
: 
	`cbi
(
TCCR0A
, 
COM0B1
); ;

99 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
COM2A1
)

100 
TIMER2A
: 
	`cbi
(
TCCR2A
, 
COM2A1
); ;

102 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
COM2B1
)

103 
TIMER2B
: 
	`cbi
(
TCCR2A
, 
COM2B1
); ;

106 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3A1
)

107 
TIMER3A
: 
	`cbi
(
TCCR3A
, 
COM3A1
); ;

109 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3B1
)

110 
TIMER3B
: 
	`cbi
(
TCCR3A
, 
COM3B1
); ;

112 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3C1
)

113 
TIMER3C
: 
	`cbi
(
TCCR3A
, 
COM3C1
); ;

116 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4A1
)

117 
TIMER4A
: 
	`cbi
(
TCCR4A
, 
COM4A1
); ;

119 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4B1
)

120 
TIMER4B
: 
	`cbi
(
TCCR4A
, 
COM4B1
); ;

122 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4C1
)

123 
TIMER4C
: 
	`cbi
(
TCCR4A
, 
COM4C1
); ;

125 #i‡
	`deföed
(
TCCR4C
Ë&& deföed(
COM4D1
)

126 
TIMER4D
: 
	`cbi
(
TCCR4C
, 
COM4D1
); ;

129 #i‡
	`deföed
(
TCCR5A
)

130 
TIMER5A
: 
	`cbi
(
TCCR5A
, 
COM5A1
); ;

131 
TIMER5B
: 
	`cbi
(
TCCR5A
, 
COM5B1
); ;

132 
TIMER5C
: 
	`cbi
(
TCCR5A
, 
COM5C1
); ;

135 
	}
}

137 
	$digôÆWrôe
(
uöt8_t
 
pö
, uöt8_à
vÆ
)

139 
uöt8_t
 
timî
 = 
	`digôÆPöToTimî
(
pö
);

140 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

141 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

142 vﬁ©ûê
uöt8_t
 *
out
;

144 i‡(
p‹t
 =
NOT_A_PIN
) ;

148 i‡(
timî
 !
NOT_ON_TIMER
Ë
	`tu∫OffPWM
(timer);

150 
out
 = 
	`p‹tOuçutRegi°î
(
p‹t
);

152 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

153 
	`˛i
();

155 i‡(
vÆ
 =
LOW
) {

156 *
out
 &~
bô
;

158 *
out
 |
bô
;

161 
SREG
 = 
ﬁdSREG
;

162 
	}
}

164 
	$digôÆRód
(
uöt8_t
 
pö
)

166 
uöt8_t
 
timî
 = 
	`digôÆPöToTimî
(
pö
);

167 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

168 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

170 i‡(
p‹t
 =
NOT_A_PIN
Ë 
LOW
;

174 i‡(
timî
 !
NOT_ON_TIMER
Ë
	`tu∫OffPWM
(timer);

176 i‡(*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë 
HIGH
;

177  
LOW
;

178 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/wiring_private.h

25 #i‚de‡
WúögPriv©e_h


26 
	#WúögPriv©e_h


	)

28 
	~<avr/io.h
>

29 
	~<avr/öãºu±.h
>

30 
	~<°dio.h
>

31 
	~<°d¨g.h
>

33 
	~"Arduöo.h
"

35 #ifde‡
__˝lu•lus


39 #i‚de‡
cbi


40 
	#cbi
(
s‰
, 
bô
Ë(
	`_SFR_BYTE
(s‰Ë&~
	`_BV
(bô))

	)

42 #i‚de‡
sbi


43 
	#sbi
(
s‰
, 
bô
Ë(
	`_SFR_BYTE
(s‰Ë|
	`_BV
(bô))

	)

46 
	#EXTERNAL_INT_0
 0

	)

47 
	#EXTERNAL_INT_1
 1

	)

48 
	#EXTERNAL_INT_2
 2

	)

49 
	#EXTERNAL_INT_3
 3

	)

50 
	#EXTERNAL_INT_4
 4

	)

51 
	#EXTERNAL_INT_5
 5

	)

52 
	#EXTERNAL_INT_6
 6

	)

53 
	#EXTERNAL_INT_7
 7

	)

55 #i‡
deföed
 (
SIG_INTERRUPT7
)

56 
	#EXTERNAL_NUM_INTERRUPTS
 8

	)

57 #ñi‡
deföed
 (
SIG_INTERRUPT2
)

58 
	#EXTERNAL_NUM_INTERRUPTS
 3

	)

59 #ñi‡
deföed
(
__AVR_ATmega32U4__
)

60 
	#EXTERNAL_NUM_INTERRUPTS
 4

	)

62 
	#EXTERNAL_NUM_INTERRUPTS
 2

	)

65 (*
voidFuncPå
)();

67 #ifde‡
__˝lu•lus


	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/wiring_pulse.c

25 
	~"wúög_¥iv©e.h
"

26 
	~"pös_¨duöo.h
"

32 
	$pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
)

37 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

38 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

39 
uöt8_t
 
°©eMask
 = (
°©e
 ? 
bô
 : 0);

40 
width
 = 0;

44 
numlo›s
 = 0;

45 
maxlo›s
 = 
	`mi¸o£c⁄dsToClockCy˛es
(
timeout
) / 16;

48 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë=
°©eMask
)

49 i‡(
numlo›s
++ =
maxlo›s
)

53 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë!
°©eMask
)

54 i‡(
numlo›s
++ =
maxlo›s
)

58 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë=
°©eMask
) {

59 i‡(
numlo›s
++ =
maxlo›s
)

61 
width
++;

68  
	`˛ockCy˛esToMi¸o£c⁄ds
(
width
 * 21 + 16);

69 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/wiring_shift.c

25 
	~"wúög_¥iv©e.h
"

27 
uöt8_t
 
	$shi·In
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
) {

28 
uöt8_t
 
vÆue
 = 0;

29 
uöt8_t
 
i
;

31 
i
 = 0; i < 8; ++i) {

32 
	`digôÆWrôe
(
˛ockPö
, 
HIGH
);

33 i‡(
bôOrdî
 =
LSBFIRST
)

34 
vÆue
 |
	`digôÆRód
(
d©aPö
Ë<< 
i
;

36 
vÆue
 |
	`digôÆRód
(
d©aPö
Ë<< (7 - 
i
);

37 
	`digôÆWrôe
(
˛ockPö
, 
LOW
);

39  
vÆue
;

40 
	}
}

42 
	$shi·Out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
, uöt8_à
vÆ
)

44 
uöt8_t
 
i
;

46 
i
 = 0; i < 8; i++) {

47 i‡(
bôOrdî
 =
LSBFIRST
)

48 
	`digôÆWrôe
(
d©aPö
, !!(
vÆ
 & (1 << 
i
)));

50 
	`digôÆWrôe
(
d©aPö
, !!(
vÆ
 & (1 << (7 - 
i
))));

52 
	`digôÆWrôe
(
˛ockPö
, 
HIGH
);

53 
	`digôÆWrôe
(
˛ockPö
, 
LOW
);

55 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/variants/gen7/pins_arduino.h

30 #i‚de‡
Pös_Arduöo_h


31 
	#Pös_Arduöo_h


	)

33 
	~<avr/pgm•a˚.h
>

35 
	#NUM_DIGITAL_PINS
 32

	)

36 
	#NUM_ANALOG_INPUTS
 8

	)

37 
	#™ÆogI≈utToDigôÆPö
(
p
Ë(’ < 8Ë? (pË+ 24 : -1)

	)

39 
	#digôÆPöHasPWM
(
p
Ë(’Ë=3 || (pË=4 || (pË=12 || (pË=13 || (pË=14 || (pË=15)

	)

41 c⁄° 
uöt8_t
 
	gSS
 = 4;

42 c⁄° 
uöt8_t
 
	gMOSI
 = 5;

43 c⁄° 
uöt8_t
 
	gMISO
 = 6;

44 c⁄° 
uöt8_t
 
	gSCK
 = 7;

46 c⁄° 
uöt8_t
 
	gSDA
 = 17;

47 c⁄° 
uöt8_t
 
	gSCL
 = 16;

48 c⁄° 
uöt8_t
 
	gLED_BUILTIN
 = -1;

50 c⁄° 
uöt8_t
 
	gA0
 = 24;

51 c⁄° 
uöt8_t
 
	gA1
 = 25;

52 c⁄° 
uöt8_t
 
	gA2
 = 26;

53 c⁄° 
uöt8_t
 
	gA3
 = 27;

54 c⁄° 
uöt8_t
 
	gA4
 = 28;

55 c⁄° 
uöt8_t
 
	gA5
 = 29;

56 c⁄° 
uöt8_t
 
	gA6
 = 20;

57 c⁄° 
uöt8_t
 
	gA7
 = 21;

59 
	#digôÆPöToPCICR
(
p
Ë((’Ë>0 && (pË<33Ë? (&
PCICR
Ë: ((
uöt8_t
 *)0))

	)

60 
	#digôÆPöToPCICRbô
(
p
Ë((’Ë<9Ë? 2 : ((’Ë<23Ë? 0 : 1))

	)

61 
	#digôÆPöToPCMSK
(
p
Ë((’Ë<9Ë? (&
PCMSK2
Ë: ((’Ë<23Ë? (&
PCMSK0
Ë: ((’Ë<33Ë? (&
PCMSK1
Ë: ((
uöt8_t
 *)0))))

	)

62 
	#digôÆPöToPCMSKbô
(
p
Ë((’Ë<9Ë? (pË: ((’Ë<23Ë? (’Ë- 10Ë: (’Ë- 24)))

	)

64 #ifde‡
ARDUINO_MAIN


101 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_mode_PGM
[] = {

102 
NOT_A_PORT
,

103 &
DDRA
,

104 &
DDRB
,

105 &
DDRC
,

106 &
DDRD
,

109 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_ouçut_PGM
[] = {

110 
NOT_A_PORT
,

111 &
PORTA
,

112 &
PORTB
,

113 &
PORTC
,

114 &
PORTD
,

117 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_öput_PGM
[] = {

118 
NOT_A_PORT
,

119 &
PINA
,

120 &
PINB
,

121 &
PINC
,

122 &
PIND
,

125 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_p‹t_PGM
[] = {

126 
PB
,

127 
PB
,

128 
PB
,

129 
PB
,

130 
PB
,

131 
PB
,

132 
PB
,

133 
PB
,

134 
PD
,

135 
PD
,

136 
PD
,

137 
PD
,

138 
PD
,

139 
PD
,

140 
PD
,

141 
PD
,

142 
PC
,

143 
PC
,

144 
PC
,

145 
PC
,

146 
PC
,

147 
PC
,

148 
PC
,

149 
PC
,

150 
PA
,

151 
PA
,

152 
PA
,

153 
PA
,

154 
PA
,

155 
PA
,

156 
PA
,

157 
PA


160 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_bô_mask_PGM
[] = {

161 
_BV
(0),

162 
_BV
(1),

163 
_BV
(2),

164 
_BV
(3),

165 
_BV
(4),

166 
_BV
(5),

167 
_BV
(6),

168 
_BV
(7),

169 
_BV
(0),

170 
_BV
(1),

171 
_BV
(2),

172 
_BV
(3),

173 
_BV
(4),

174 
_BV
(5),

175 
_BV
(6),

176 
_BV
(7),

177 
_BV
(0),

178 
_BV
(1),

179 
_BV
(2),

180 
_BV
(3),

181 
_BV
(4),

182 
_BV
(5),

183 
_BV
(6),

184 
_BV
(7),

185 
_BV
(7),

186 
_BV
(6),

187 
_BV
(5),

188 
_BV
(4),

189 
_BV
(3),

190 
_BV
(2),

191 
_BV
(1),

192 
_BV
(0)

195 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_timî_PGM
[] = {

196 
NOT_ON_TIMER
,

197 
NOT_ON_TIMER
,

198 
NOT_ON_TIMER
,

199 
TIMER0A
,

200 
TIMER0B
,

201 
NOT_ON_TIMER
,

202 
NOT_ON_TIMER
,

203 
NOT_ON_TIMER
,

204 
NOT_ON_TIMER
,

205 
NOT_ON_TIMER
,

206 
NOT_ON_TIMER
,

207 
NOT_ON_TIMER
,

208 
TIMER1B
,

209 
TIMER1A
,

210 
TIMER2B
,

211 
TIMER2A
,

212 
NOT_ON_TIMER
,

213 
NOT_ON_TIMER
,

214 
NOT_ON_TIMER
,

215 
NOT_ON_TIMER
,

216 
NOT_ON_TIMER
,

217 
NOT_ON_TIMER
,

218 
NOT_ON_TIMER
,

219 
NOT_ON_TIMER
,

220 
NOT_ON_TIMER
,

221 
NOT_ON_TIMER
,

222 
NOT_ON_TIMER
,

223 
NOT_ON_TIMER
,

224 
NOT_ON_TIMER
,

225 
NOT_ON_TIMER
,

226 
NOT_ON_TIMER
,

227 
NOT_ON_TIMER


	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/bootloaders/atmega644p/ATmegaBOOT.c

69 
	~<öây≥s.h
>

70 
	~<avr/io.h
>

71 
	~<avr/pgm•a˚.h
>

72 
	~<avr/öãºu±.h
>

73 
	~<avr/wdt.h
>

74 
	~<utû/dñay.h
>

78 #i‡!
deföed
(
__AVR_ATmega168__
Ë|| !deföed(
__AVR_ATmega328P__
)

79 
	~<avr/ì¥om.h
>

91 
	#MAX_ERROR_COUNT
 5

	)

92 
	#NUM_LED_FLASHES
 3

	)

96 #i‚de‡
BAUD_RATE


97 
	#BAUD_RATE
 19200

	)

103 
	#HW_VER
 0x02

	)

104 
	#SW_MAJOR
 0x01

	)

105 
	#SW_MINOR
 0x10

	)

112 #ifde‡
__AVR_ATmega128__


113 
	#BL_DDR
 
DDRF


	)

114 
	#BL_PORT
 
PORTF


	)

115 
	#BL_PIN
 
PINF


	)

116 
	#BL0
 
PINF7


	)

117 
	#BL1
 
PINF6


	)

118 #ñi‡
deföed
 
__AVR_ATmega1280__


120 #ñi‡
deföed
 
__AVR_ATmega1284P__


124 
	#BL_DDR
 
DDRD


	)

125 
	#BL_PORT
 
PORTD


	)

126 
	#BL_PIN
 
PIND


	)

127 
	#BL
 
PIND6


	)

133 #i‡
deföed
 
__AVR_ATmega128__
 || deföed 
__AVR_ATmega1280__


135 
	#LED_DDR
 
DDRB


	)

136 
	#LED_PORT
 
PORTB


	)

137 
	#LED_PIN
 
PINB


	)

138 
	#LED
 
PINB7


	)

139 #ñi‡
deföed
 
__AVR_ATmega1284P__


140 
	#LED_DDR
 
DDRB


	)

141 
	#LED_PORT
 
PORTB


	)

142 
	#LED_PIN
 
PINB


	)

143 
	#LED
 
PINB0


	)

147 
	#LED_DDR
 
DDRB


	)

148 
	#LED_PORT
 
PORTB


	)

149 
	#LED_PIN
 
PINB


	)

150 
	#LED
 
PINB5


	)

155 #i‡
deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
)

158 #unde‡
MONITOR


162 
	#SIG1
 0x1E

163 

	)

164 #i‡
deföed
 
__AVR_ATmega1280__


165 
	#SIG2
 0x97

	)

166 
	#SIG3
 0x03

	)

167 
	#PAGE_SIZE
 0x80U

168 

	)

169 #ñi‡
deföed
 
__AVR_ATmega1284P__


170 
	#SIG2
 0x97

	)

171 
	#SIG3
 0x05

	)

172 
	#PAGE_SIZE
 0x080U

173 

	)

174 #ñi‡
deföed
 
__AVR_ATmega1281__


175 
	#SIG2
 0x97

	)

176 
	#SIG3
 0x04

	)

177 
	#PAGE_SIZE
 0x80U

178 

	)

179 #ñi‡
deföed
 
__AVR_ATmega128__


180 
	#SIG2
 0x97

	)

181 
	#SIG3
 0x02

	)

182 
	#PAGE_SIZE
 0x80U

183 

	)

184 #ñi‡
deföed
 
__AVR_ATmega64__


185 
	#SIG2
 0x96

	)

186 
	#SIG3
 0x02

	)

187 
	#PAGE_SIZE
 0x80U

188 

	)

189 #ñi‡
deföed
 
__AVR_ATmega32__


190 
	#SIG2
 0x95

	)

191 
	#SIG3
 0x02

	)

192 
	#PAGE_SIZE
 0x40U

193 

	)

194 #ñi‡
deföed
 
__AVR_ATmega16__


195 
	#SIG2
 0x94

	)

196 
	#SIG3
 0x03

	)

197 
	#PAGE_SIZE
 0x40U

198 

	)

199 #ñi‡
deföed
 
__AVR_ATmega8__


200 
	#SIG2
 0x93

	)

201 
	#SIG3
 0x07

	)

202 
	#PAGE_SIZE
 0x20U

203 

	)

204 #ñi‡
deföed
 
__AVR_ATmega88__


205 
	#SIG2
 0x93

	)

206 
	#SIG3
 0x0a

	)

207 
	#PAGE_SIZE
 0x20U

208 

	)

209 #ñi‡
deföed
 
__AVR_ATmega168__


210 
	#SIG2
 0x94

	)

211 
	#SIG3
 0x06

	)

212 
	#PAGE_SIZE
 0x40U

213 

	)

214 #ñi‡
deföed
 
__AVR_ATmega328P__


215 
	#SIG2
 0x95

	)

216 
	#SIG3
 0x0F

	)

217 
	#PAGE_SIZE
 0x40U

218 

	)

219 #ñi‡
deföed
 
__AVR_ATmega162__


220 
	#SIG2
 0x94

	)

221 
	#SIG3
 0x04

	)

222 
	#PAGE_SIZE
 0x40U

223 

	)

224 #ñi‡
deföed
 
__AVR_ATmega163__


225 
	#SIG2
 0x94

	)

226 
	#SIG3
 0x02

	)

227 
	#PAGE_SIZE
 0x40U

228 

	)

229 #ñi‡
deföed
 
__AVR_ATmega169__


230 
	#SIG2
 0x94

	)

231 
	#SIG3
 0x05

	)

232 
	#PAGE_SIZE
 0x40U

233 

	)

234 #ñi‡
deföed
 
__AVR_ATmega8515__


235 
	#SIG2
 0x93

	)

236 
	#SIG3
 0x06

	)

237 
	#PAGE_SIZE
 0x20U

238 

	)

239 #ñi‡
deföed
 
__AVR_ATmega8535__


240 
	#SIG2
 0x93

	)

241 
	#SIG3
 0x08

	)

242 
	#PAGE_SIZE
 0x20U

244 

	)

247 
putch
();

248 
gëch
();

249 
gëNch
(
uöt8_t
);

250 
byã_ª•⁄£
(
uöt8_t
);

251 
nŸhög_ª•⁄£
();

252 
gëhex
();

253 
puthex
();

254 
Êash_Àd
(
uöt8_t
);

257 
	uaddªss_uni⁄


259 
uöt16_t
 
	mw‹d
;

260 
uöt8_t
 
	mbyã
[2];

261 } 
	gaddªss
;

263 
	uÀngth_uni⁄


265 
uöt16_t
 
	mw‹d
;

266 
uöt8_t
 
	mbyã
[2];

267 } 
	gÀngth
;

269 
	sÊags_°ru˘


271 
	mì¥om
 : 1;

272 
	mømpz
 : 1;

273 } 
	gÊags
;

275 
uöt8_t
 
	gbuff
[256];

276 
uöt8_t
 
	gaddªss_high
;

279 
uöt8_t
 
	gi
;

280 
uöt8_t
 
	gboŸu¨t
 = 0;

282 
uöt8_t
 
	gîr‹_cou¡
 = 0;

284 (*
≠p_°¨t
)() = 0x0000;

288 
	$maö
()

290 
uöt8_t
 
ch
,
ch2
;

291 
uöt16_t
 
w
;

292 #ifde‡
WATCHDOG_MODS


293 
ch
 = 
MCUSR
;

294 
MCUSR
 = 0;

295 
WDTCSR
 |
	`_BV
(
WDCE
Ë| _BV(
WDE
);

296 
WDTCSR
 = 0;

298 i‡(! (
ch
 & 
	`_BV
(
EXTRF
)))

299 
	`≠p_°¨t
();

301 
asm
 volatile("nop\n\t");

305 #ifde‡
__AVR_ATmega128__


306 
BL_DDR
 &~
	`_BV
(
BL0
);

307 
BL_DDR
 &~
	`_BV
(
BL1
);

308 
BL_PORT
 |
	`_BV
(
BL0
);

309 
BL_PORT
 |
	`_BV
(
BL1
);

318 #ifde‡
__AVR_ATmega128__


320 if(
	`bô_is_˛ór
(
BL_PIN
, 
BL0
))

322 
boŸu¨t
 = 1;

324 if(
	`bô_is_˛ór
(
BL_PIN
, 
BL1
))

326 
boŸu¨t
 = 2;

329 #i‡
deföed
 
__AVR_ATmega1280__
 || deföed 
__AVR_ATmega1284P__


332 
boŸu¨t
 = 1;

335 if(
	`pgm_ªad_byã_√¨
(0x0000) != 0xFF)

337 #ifde‡
__AVR_ATmega128__


339 if(!
boŸu¨t
)

341 
	`≠p_°¨t
();

351 #ifde‡
__AVR_ATmega128__


353 if(!
boŸu¨t
)

355 
boŸu¨t
 = 1;

359 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1284P__
)

360 if(
boŸu¨t
 == 1)

362 
UBRR0L
 = (
uöt8_t
)(
F_CPU
/(
BAUD_RATE
*16L)-1);

363 
UBRR0H
 = (
F_CPU
/(
BAUD_RATE
*16L)-1) >> 8;

364 
UCSR0A
 = 0x00;

365 
UCSR0C
 = 0x06;

366 
UCSR0B
 = 
	`_BV
(
TXEN0
)|_BV(
RXEN0
);

368 if(
boŸu¨t
 == 2)

370 
UBRR1L
 = (
uöt8_t
)(
F_CPU
/(
BAUD_RATE
*16L)-1);

371 
UBRR1H
 = (
F_CPU
/(
BAUD_RATE
*16L)-1) >> 8;

372 
UCSR1A
 = 0x00;

373 
UCSR1C
 = 0x06;

374 
UCSR1B
 = 
	`_BV
(
TXEN1
)|_BV(
RXEN1
);

376 #ñi‡
deföed
 
__AVR_ATmega163__


377 
UBRR
 = (
uöt8_t
)(
F_CPU
/(
BAUD_RATE
*16L)-1);

378 
UBRRHI
 = (
F_CPU
/(
BAUD_RATE
*16L)-1) >> 8;

379 
UCSRA
 = 0x00;

380 
UCSRB
 = 
	`_BV
(
TXEN
)|_BV(
RXEN
);

381 #ñi‡
	`deföed
(
__AVR_ATmega168__
Ë|| deföed(
__AVR_ATmega328P__
)

382 #ifde‡
DOUBLE_SPEED


383 
UCSR0A
 = (1<<
U2X0
);

384 
UBRR0L
 = (
uöt8_t
)(
F_CPU
/(
BAUD_RATE
*8L)-1);

385 
UBRR0H
 = (
F_CPU
/(
BAUD_RATE
*8L)-1) >> 8;

387 
UBRR0L
 = (
uöt8_t
)(
F_CPU
/(
BAUD_RATE
*16L)-1);

388 
UBRR0H
 = (
F_CPU
/(
BAUD_RATE
*16L)-1) >> 8;

390 
UCSR0B
 = (1<<
RXEN0
Ë| (1<<
TXEN0
);

391 
UCSR0C
 = (1<<
UCSZ00
Ë| (1<<
UCSZ01
);

395 
DDRD
 &~
	`_BV
(
PIND0
);

396 
PORTD
 |
	`_BV
(
PIND0
);

397 #ñi‡
deföed
 
__AVR_ATmega8__


399 
UBRRH
 = (((
F_CPU
/
BAUD_RATE
)/16)-1)>>8;

400 
UBRRL
 = (((
F_CPU
/
BAUD_RATE
)/16)-1);

401 
UCSRB
 = (1<<
RXEN
)|(1<<
TXEN
);

402 
UCSRC
 = (1<<
URSEL
)|(1<<
UCSZ1
)|(1<<
UCSZ0
);

405 
UBRRL
 = (
uöt8_t
)(
F_CPU
/(
BAUD_RATE
*16L)-1);

406 
UBRRH
 = (
F_CPU
/(
BAUD_RATE
*16L)-1) >> 8;

407 
UCSRA
 = 0x00;

408 
UCSRC
 = 0x06;

409 
UCSRB
 = 
	`_BV
(
TXEN
)|_BV(
RXEN
);

411 #i‡
deföed
 
__AVR_ATmega1280__


416 
DDRE
 &~
	`_BV
(
PINE0
);

417 
PORTE
 |
	`_BV
(
PINE0
);

420 
LED_DDR
 |
	`_BV
(
LED
);

422 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1284P__
)

424 
	`Êash_Àd
(
NUM_LED_FLASHES
 + 
boŸu¨t
);

426 
	`Êash_Àd
(
NUM_LED_FLASHES
);

435 
ch
 = 
	`gëch
();

438 if(
ch
=='0')

440 
	`nŸhög_ª•⁄£
();

445 if(
ch
=='1')

447 i‡(
	`gëch
() == ' ')

449 
	`putch
(0x14);

450 
	`putch
('A');

451 
	`putch
('V');

452 
	`putch
('R');

453 
	`putch
(' ');

454 
	`putch
('I');

455 
	`putch
('S');

456 
	`putch
('P');

457 
	`putch
(0x10);

461 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

462 
	`≠p_°¨t
();

466 if(
ch
=='@')

468 
ch2
 = 
	`gëch
();

469 i‡(
ch2
>0x85Ë
	`gëch
();

470 
	`nŸhög_ª•⁄£
();

473 if(
ch
=='A')

475 
ch2
 = 
	`gëch
();

476 if(
ch2
==0x80Ë
	`byã_ª•⁄£
(
HW_VER
);

477 if(
ch2
==0x81Ë
	`byã_ª•⁄£
(
SW_MAJOR
);

478 if(
ch2
==0x82Ë
	`byã_ª•⁄£
(
SW_MINOR
);

479 if(
ch2
==0x98Ë
	`byã_ª•⁄£
(0x03);

480 
	`byã_ª•⁄£
(0x00);

483 if(
ch
=='B')

485 
	`gëNch
(20);

486 
	`nŸhög_ª•⁄£
();

489 if(
ch
=='E')

491 
	`gëNch
(5);

492 
	`nŸhög_ª•⁄£
();

496 if(
ch
=='P' || ch=='R')

498 
	`nŸhög_ª•⁄£
();

501 if(
ch
=='Q')

503 
	`nŸhög_ª•⁄£
();

504 #ifde‡
WATCHDOG_MODS


506 
WDTCSR
 = 
	`_BV
(
WDE
);

513 if(
ch
=='U')

515 
addªss
.
byã
[0] = 
	`gëch
();

516 
addªss
.
byã
[1] = 
	`gëch
();

517 
	`nŸhög_ª•⁄£
();

520 if(
ch
=='V')

522 i‡(
	`gëch
() == 0x30)

524 
	`gëch
();

525 
ch
 = 
	`gëch
();

526 
	`gëch
();

527 i‡(
ch
 == 0)

529 
	`byã_ª•⁄£
(
SIG1
);

531 i‡(
ch
 == 1)

533 
	`byã_ª•⁄£
(
SIG2
);

537 
	`byã_ª•⁄£
(
SIG3
);

542 
	`gëNch
(3);

543 
	`byã_ª•⁄£
(0x00);

547 if(
ch
=='d')

549 
Àngth
.
byã
[1] = 
	`gëch
();

550 
Àngth
.
byã
[0] = 
	`gëch
();

551 
Êags
.
ì¥om
 = 0;

552 i‡(
	`gëch
(Ë='E'Ë
Êags
.
ì¥om
 = 1;

553 
w
=0; w<
Àngth
.
w‹d
; w++)

555 
buff
[
w
] = 
	`gëch
();

557 i‡(
	`gëch
() == ' ')

559 i‡(
Êags
.
ì¥om
)

561 
addªss
.
w‹d
 <<= 1;

562 
w
=0; w<
Àngth
.
w‹d
; w++)

564 #i‡
	`deföed
(
__AVR_ATmega168__
Ë|| deföed(
__AVR_ATmega328P__
)

565 
EECR
 & (1<<
EEPE
));

566 
EEAR
 = (
uöt16_t
)(*)
addªss
.
w‹d
;

567 
EEDR
 = 
buff
[
w
];

568 
EECR
 |(1<<
EEMPE
);

569 
EECR
 |(1<<
EEPE
);

571 
	`ì¥om_wrôe_byã
((*)
addªss
.
w‹d
,
buff
[
w
]);

573 
addªss
.
w‹d
++;

578 i‡(
addªss
.
byã
[1]>127Ë
addªss_high
 = 0x01;

579 
addªss_high
 = 0x00;

580 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1281__
Ë|| deföed(
__AVR_ATmega1284P__
)

581 
RAMPZ
 = 
addªss_high
;

583 
addªss
.
w‹d
 =áddress.word << 1;

585 i‡((
Àngth
.
byã
[0] & 0x01)ËÀngth.
w‹d
++;

586 
	`˛i
();

587 #i‡
	`deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1281__
Ë|| deföed(
__AVR_ATmega1284P__
)

588 
	`bô_is_£t
(
EECR
,
EEPE
));

590 
	`bô_is_£t
(
EECR
,
EEWE
));

592 
asm
 volatile(

611 #ifde‡
__AVR_ATmega163__


623 #ifde‡
__AVR_ATmega163__


648 #ifde‡
__AVR_ATmega163__


654 #ifde‡
__AVR_ATmega163__


667 #ifde‡
__AVR_ATmega163__


683 #i‡
deföed
 
__AVR_ATmega168__
 || 
__AVR_ATmega328P__
 || 
__AVR_ATmega128__
 || 
__AVR_ATmega1280__
 || 
__AVR_ATmega1281__
 || 
__AVR_ATmega1284P__


684 : "=m" (
SPMCSR
Ë: "M" (
PAGE_SIZE
) : "r0","r16","r17","r24","r25","r28","r29","r30","r31"

686 : "=m" (
SPMCR
Ë: "M" (
PAGE_SIZE
) : "r0","r16","r17","r24","r25","r28","r29","r30","r31"

692 
	`putch
(0x14);

693 
	`putch
(0x10);

697 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

698 
	`≠p_°¨t
();

702 if(
ch
=='t')

704 
Àngth
.
byã
[1] = 
	`gëch
();

705 
Àngth
.
byã
[0] = 
	`gëch
();

706 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1284P__
)

707 i‡(
addªss
.
w‹d
>0x7FFFË
Êags
.
ømpz
 = 1;

708 
Êags
.
ømpz
 = 0;

710 
addªss
.
w‹d
 =áddress.word << 1;

711 i‡(
	`gëch
(Ë='E'Ë
Êags
.
ì¥om
 = 1;

712 
Êags
.
ì¥om
 = 0;

713 i‡(
	`gëch
() == ' ')

715 
	`putch
(0x14);

716 
w
=0; w < 
Àngth
.
w‹d
; w++)

718 i‡(
Êags
.
ì¥om
)

720 #i‡
	`deföed
(
__AVR_ATmega168__
Ë|| deföed(
__AVR_ATmega328P__
)

721 
EECR
 & (1<<
EEPE
));

722 
EEAR
 = (
uöt16_t
)(*)
addªss
.
w‹d
;

723 
EECR
 |(1<<
EERE
);

724 
	`putch
(
EEDR
);

726 
	`putch
(
	`ì¥om_ªad_byã
((*)
addªss
.
w‹d
));

728 
addªss
.
w‹d
++;

732 i‡(!
Êags
.
ømpz
Ë
	`putch
(
	`pgm_ªad_byã_√¨
(
addªss
.
w‹d
));

733 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1284P__
)

734 
	`putch
(
	`pgm_ªad_byã_Ár
(
addªss
.
w‹d
 + 0x10000));

737 
addªss
.
w‹d
++;

740 
	`putch
(0x10);

744 if(
ch
=='u')

746 i‡(
	`gëch
() == ' ')

748 
	`putch
(0x14);

749 
	`putch
(
SIG1
);

750 
	`putch
(
SIG2
);

751 
	`putch
(
SIG3
);

752 
	`putch
(0x10);

756 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

757 
	`≠p_°¨t
();

761 if(
ch
=='v')

763 
	`byã_ª•⁄£
(0x00);

765 #i‡
deföed
 
MONITOR


768 if(
ch
=='!')

770 
ch
 = 
	`gëch
();

771 if(
ch
=='!')

773 
ch
 = 
	`gëch
();

774 if(
ch
=='!')

776 
PGM_P
 
wñcome
 = "";

777 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
)

778 
uöt16_t
 
exèddr
;

780 
uöt8_t
 
addæ
, 
addrh
;

781 #ifde‡
CRUMB128


782 
wñcome
 = "ATmegaBOOT / Crumb128 - (C) J.P.Kyle, E.Lins - 050815\n\r";

783 #ñi‡
deföed
 
PROBOMEGA128


784 
wñcome
 = "ATmegaBOOT / PROBOmega128 - (C) J.P.Kyle, E.Lins - 050815\n\r";

785 #ñi‡
deföed
 
SAVVY128


786 
wñcome
 = "ATmegaBOOT / Savvy128 - (C) J.P.Kyle, E.Lins - 050815\n\r";

787 #ñi‡
deföed
 
__AVR_ATmega1280__


788 
wñcome
 = "ATmegaBOOT / Arduino Mega - (C) Arduino LLC - 090930\n\r";

791 
LED_DDR
 |
	`_BV
(
LED
);

792 
LED_PORT
 &~
	`_BV
(
LED
);

794 
i
=0; 
wñcome
[i] != '\0'; ++i)

796 
	`putch
(
wñcome
[
i
]);

801 
	`putch
('\n');

802 
	`putch
('\r');

803 
	`putch
(':');

804 
	`putch
(' ');

805 
ch
 = 
	`gëch
();

806 
	`putch
(
ch
);

808 if(
ch
 == 't')

810 if(
	`bô_is_£t
(
LED_PIN
,
LED
))

812 
LED_PORT
 &~
	`_BV
(
LED
);

813 
	`putch
('1');

817 
LED_PORT
 |
	`_BV
(
LED
);

818 
	`putch
('0');

822 if(
ch
 == 'r')

824 
ch
 = 
	`gëch
();

825 
	`putch
(
ch
);

826 
addrh
 = 
	`gëhex
();

827 
addæ
 = 
	`gëhex
();

828 
	`putch
('=');

829 
ch
 = *(
uöt8_t
 *)((
addrh
 << 8Ë+ 
addæ
);

830 
	`puthex
(
ch
);

833 if(
ch
 == 'w')

835 
ch
 = 
	`gëch
();

836 
	`putch
(
ch
);

837 
addrh
 = 
	`gëhex
();

838 
addæ
 = 
	`gëhex
();

839 
ch
 = 
	`gëch
();

840 
	`putch
(
ch
);

841 
ch
 = 
	`gëhex
();

842 *(
uöt8_t
 *)((
addrh
 << 8Ë+ 
addæ
Ë
ch
;

845 if(
ch
 == 'u')

849 
	`putch
(
	`gëch
());

852 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
)

854 if(
ch
 == 'b')

856 
	`putch
('b');

857 
	`putch
('u');

858 
	`putch
('s');

859 
MCUCR
 = 0x80;

860 
XMCRA
 = 0;

861 
XMCRB
 = 0;

862 
exèddr
 = 0x1100;

865 
ch
 = *(vﬁ©ûê
uöt8_t
 *)
exèddr
;

866 if(++
exèddr
 == 0)

868 
exèddr
 = 0x1100;

873 if(
ch
 == 'j')

875 
	`≠p_°¨t
();

883 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

885 
	`≠p_°¨t
();

888 
	}
}

891 
	$gëhexnib
()

893 
a
;

894 
a
 = 
	`gëch
();

895 
	`putch
(
a
);

896 if(
a
 >= 'a')

898  (
a
 - 'a' + 0x0a);

900 if(
a
 >= '0')

902 (
a
 - '0');

904  
a
;

905 
	}
}

908 
	$gëhex
()

910  (
	`gëhexnib
() << 4) + gethexnib();

911 
	}
}

914 
	$puthex
(
ch
)

916 
ah
;

917 
ah
 = 
ch
 >> 4;

918 if(
ah
 >= 0x0a)

920 
ah
 =áh - 0x0a + 'a';

924 
ah
 += '0';

926 
ch
 &= 0x0f;

927 if(
ch
 >= 0x0a)

929 
ch
 = ch - 0x0a + 'a';

933 
ch
 += '0';

935 
	`putch
(
ah
);

936 
	`putch
(
ch
);

937 
	}
}

940 
	$putch
(
ch
)

942 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1284P__
)

943 if(
boŸu¨t
 == 1)

945 !(
UCSR0A
 & 
	`_BV
(
UDRE0
)));

946 
UDR0
 = 
ch
;

948 i‡(
boŸu¨t
 == 2)

950 !(
UCSR1A
 & 
	`_BV
(
UDRE1
)));

951 
UDR1
 = 
ch
;

953 #ñi‡
	`deföed
(
__AVR_ATmega168__
Ë|| deföed(
__AVR_ATmega328P__
)

954 !(
UCSR0A
 & 
	`_BV
(
UDRE0
)));

955 
UDR0
 = 
ch
;

958 !(
UCSRA
 & 
	`_BV
(
UDRE
)));

959 
UDR
 = 
ch
;

961 
	}
}

964 
	$gëch
()

966 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1284P__
)

967 
uöt32_t
 
cou¡
 = 0;

968 if(
boŸu¨t
 == 1)

970 !(
UCSR0A
 & 
	`_BV
(
RXC0
)))

974 
cou¡
++;

975 i‡(
cou¡
 > 
MAX_TIME_COUNT
)

976 
	`≠p_°¨t
();

978  
UDR0
;

980 if(
boŸu¨t
 == 2)

982 !(
UCSR1A
 & 
	`_BV
(
RXC1
)))

986 
cou¡
++;

987 i‡(
cou¡
 > 
MAX_TIME_COUNT
)

988 
	`≠p_°¨t
();

990  
UDR1
;

993 #ñi‡
	`deföed
(
__AVR_ATmega168__
Ë|| deföed(
__AVR_ATmega328P__
)

994 
uöt32_t
 
cou¡
 = 0;

995 !(
UCSR0A
 & 
	`_BV
(
RXC0
)))

999 
cou¡
++;

1000 i‡(
cou¡
 > 
MAX_TIME_COUNT
)

1001 
	`≠p_°¨t
();

1003  
UDR0
;

1006 
uöt32_t
 
cou¡
 = 0;

1007 !(
UCSRA
 & 
	`_BV
(
RXC
)))

1011 
cou¡
++;

1012 i‡(
cou¡
 > 
MAX_TIME_COUNT
)

1013 
	`≠p_°¨t
();

1015  
UDR
;

1017 
	}
}

1020 
	$gëNch
(
uöt8_t
 
cou¡
)

1022 
cou¡
--)

1024 #i‡
	`deföed
(
__AVR_ATmega128__
Ë|| deföed(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1284P__
)

1025 if(
boŸu¨t
 == 1)

1027 !(
UCSR0A
 & 
	`_BV
(
RXC0
)));

1028 
UDR0
;

1030 if(
boŸu¨t
 == 2)

1032 !(
UCSR1A
 & 
	`_BV
(
RXC1
)));

1033 
UDR1
;

1035 #ñi‡
	`deföed
(
__AVR_ATmega168__
Ë|| deföed(
__AVR_ATmega328P__
)

1036 
	`gëch
();

1042 
	`gëch
();

1045 
	}
}

1048 
	$byã_ª•⁄£
(
uöt8_t
 
vÆ
)

1050 i‡(
	`gëch
() == ' ')

1052 
	`putch
(0x14);

1053 
	`putch
(
vÆ
);

1054 
	`putch
(0x10);

1058 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

1059 
	`≠p_°¨t
();

1061 
	}
}

1064 
	$nŸhög_ª•⁄£
()

1066 i‡(
	`gëch
() == ' ')

1068 
	`putch
(0x14);

1069 
	`putch
(0x10);

1073 i‡(++
îr‹_cou¡
 =
MAX_ERROR_COUNT
)

1074 
	`≠p_°¨t
();

1076 
	}
}

1078 
	$Êash_Àd
(
uöt8_t
 
cou¡
)

1080 
cou¡
--)

1082 
LED_PORT
 |
	`_BV
(
LED
);

1083 
	`_dñay_ms
(100);

1084 
LED_PORT
 &~
	`_BV
(
LED
);

1085 
	`_dñay_ms
(100);

1087 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/Arduino.h

1 #i‚de‡
Arduöo_h


2 
	#Arduöo_h


	)

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<m©h.h
>

8 
	~<avr/pgm•a˚.h
>

9 
	~<avr/io.h
>

10 
	~<avr/öãºu±.h
>

12 
	~"bö¨y.h
"

14 #ifde‡
__˝lu•lus


18 
	#HIGH
 0x1

	)

19 
	#LOW
 0x0

	)

21 
	#INPUT
 0x0

	)

22 
	#OUTPUT
 0x1

	)

23 
	#INPUT_PULLUP
 0x2

	)

25 
	#åue
 0x1

	)

26 
	#Ál£
 0x0

	)

28 
	#PI
 3.1415926535897932384626433832795

	)

29 
	#HALF_PI
 1.5707963267948966192313216916398

	)

30 
	#TWO_PI
 6.283185307179586476925286766559

	)

31 
	#DEG_TO_RAD
 0.017453292519943295769236907684886

	)

32 
	#RAD_TO_DEG
 57.295779513082320876798154814105

	)

34 
	#SERIAL
 0x0

	)

35 
	#DISPLAY
 0x1

	)

37 
	#LSBFIRST
 0

	)

38 
	#MSBFIRST
 1

	)

40 
	#CHANGE
 1

	)

41 
	#FALLING
 2

	)

42 
	#RISING
 3

	)

44 #i‡
deföed
(
__AVR_ATtöy24__
Ë|| deföed(
__AVR_ATtöy44__
Ë|| deföed(
__AVR_ATtöy84__
Ë|| deföed(
__AVR_ATtöy25__
Ë|| deföed(
__AVR_ATtöy45__
Ë|| deföed(
__AVR_ATtöy85__
)

45 
	#DEFAULT
 0

	)

46 
	#EXTERNAL
 1

	)

47 
	#INTERNAL
 2

	)

49 #i‡
deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega2560__
Ë|| deföed(
__AVR_ATmega1284P__
Ë|| deföed(
__AVR_ATmega644P__
)

50 
	#INTERNAL1V1
 2

	)

51 
	#INTERNAL2V56
 3

	)

53 
	#INTERNAL
 3

	)

55 
	#DEFAULT
 1

	)

56 
	#EXTERNAL
 0

	)

60 #ifde‡
abs


61 #unde‡
abs


64 
	#mö
(
a
,
b
Ë(◊)<(b)?◊):(b))

	)

65 
	#max
(
a
,
b
Ë(◊)>(b)?◊):(b))

	)

66 
	#abs
(
x
Ë((x)>0?(x):-(x))

	)

67 
	#c⁄°øö
(
amt
,
low
,
high
Ë(◊mt)<÷ow)?÷ow):(◊mt)>(high)?(high):◊mt)))

	)

68 
	#round
(
x
Ë((x)>=0?()((x)+0.5):()((x)-0.5))

	)

69 
	#ødüns
(
deg
Ë((deg)*
DEG_TO_RAD
)

	)

70 
	#degªes
(
ød
Ë(‘ad)*
RAD_TO_DEG
)

	)

71 
	#sq
(
x
Ë((x)*(x))

	)

73 
	#öãºu±s
(Ë
	`£i
()

	)

74 
	#noI¡îru±s
(Ë
	`˛i
()

	)

76 
	#˛ockCy˛esPîMi¸o£c⁄d
(Ë–
F_CPU
 / 1000000L )

	)

77 
	#˛ockCy˛esToMi¸o£c⁄ds
(
a
Ë–◊Ë/ 
	`˛ockCy˛esPîMi¸o£c⁄d
(Ë)

	)

78 
	#mi¸o£c⁄dsToClockCy˛es
(
a
Ë–◊Ë* 
	`˛ockCy˛esPîMi¸o£c⁄d
(Ë)

	)

80 
	#lowByã
(
w
Ë((
uöt8_t
Ë((wË& 0xff))

	)

81 
	#highByã
(
w
Ë((
uöt8_t
Ë((wË>> 8))

	)

83 
	#bôRód
(
vÆue
, 
bô
Ë(((vÆueË>> (bô)Ë& 0x01)

	)

84 
	#bôSë
(
vÆue
, 
bô
Ë((vÆueË|(1UL << (bô)))

	)

85 
	#bôCÀ¨
(
vÆue
, 
bô
Ë((vÆueË&~(1UL << (bô)))

	)

86 
	#bôWrôe
(
vÆue
, 
bô
, 
bôvÆue
Ë(bôvÆuê? 
	`bôSë
(vÆue, bôË: 
	`bôCÀ¨
(vÆue, bô))

	)

89 
	tw‹d
;

91 
	#bô
(
b
Ë(1UL << (b))

	)

93 
uöt8_t
 
	tboﬁón
;

94 
uöt8_t
 
	tbyã
;

96 
öô
();

98 
pöMode
(
uöt8_t
, uint8_t);

99 
digôÆWrôe
(
uöt8_t
, uint8_t);

100 
digôÆRód
(
uöt8_t
);

101 
™ÆogRód
(
uöt8_t
);

102 
™ÆogRe„ªn˚
(
uöt8_t
 
mode
);

103 
™ÆogWrôe
(
uöt8_t
, );

105 
mûlis
();

106 
mi¸os
();

107 
dñay
();

108 
dñayMi¸o£c⁄ds
(
us
);

109 
pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
);

111 
shi·Out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
, uöt8_à
vÆ
);

112 
uöt8_t
 
shi·In
(uöt8_à
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
);

114 
©èchI¡îru±
(
uöt8_t
, (*)(), 
mode
);

115 
dëachI¡îru±
(
uöt8_t
);

117 
£tup
();

118 
lo›
();

123 
	#™ÆogInPöToBô
(
P
Ë(P)

	)

127 c⁄° 
uöt16_t
 
PROGMEM
 
p‹t_to_mode_PGM
[];

128 c⁄° 
uöt16_t
 
PROGMEM
 
p‹t_to_öput_PGM
[];

129 c⁄° 
uöt16_t
 
PROGMEM
 
p‹t_to_ouçut_PGM
[];

131 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_p‹t_PGM
[];

133 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_bô_mask_PGM
[];

134 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_timî_PGM
[];

141 
	#digôÆPöToP‹t
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_p‹t_PGM
 + (PËË)

	)

142 
	#digôÆPöToBôMask
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_bô_mask_PGM
 + (PËË)

	)

143 
	#digôÆPöToTimî
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_timî_PGM
 + (PËË)

	)

144 
	#™ÆogInPöToBô
(
P
Ë(P)

	)

145 
	#p‹tOuçutRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–
	`pgm_ªad_w‹d
–
p‹t_to_ouçut_PGM
 + (P))Ë)

	)

146 
	#p‹tI≈utRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–
	`pgm_ªad_w‹d
–
p‹t_to_öput_PGM
 + (P))Ë)

	)

147 
	#p‹tModeRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–
	`pgm_ªad_w‹d
–
p‹t_to_mode_PGM
 + (P))Ë)

	)

149 
	#NOT_A_PIN
 0

	)

150 
	#NOT_A_PORT
 0

	)

152 #ifde‡
ARDUINO_MAIN


153 
	#PA
 1

	)

154 
	#PB
 2

	)

155 
	#PC
 3

	)

156 
	#PD
 4

	)

157 
	#PE
 5

	)

158 
	#PF
 6

	)

159 
	#PG
 7

	)

160 
	#PH
 8

	)

161 
	#PJ
 10

	)

162 
	#PK
 11

	)

163 
	#PL
 12

	)

166 
	#NOT_ON_TIMER
 0

	)

167 
	#TIMER0A
 1

	)

168 
	#TIMER0B
 2

	)

169 
	#TIMER1A
 3

	)

170 
	#TIMER1B
 4

	)

171 
	#TIMER2
 5

	)

172 
	#TIMER2A
 6

	)

173 
	#TIMER2B
 7

	)

175 
	#TIMER3A
 8

	)

176 
	#TIMER3B
 9

	)

177 
	#TIMER3C
 10

	)

178 
	#TIMER4A
 11

	)

179 
	#TIMER4B
 12

	)

180 
	#TIMER4C
 13

	)

181 
	#TIMER4D
 14

	)

182 
	#TIMER5A
 15

	)

183 
	#TIMER5B
 16

	)

184 
	#TIMER5C
 17

	)

186 #ifde‡
__˝lu•lus


190 #ifde‡
__˝lu•lus


191 
	~"WCh¨a˘î.h
"

192 
	~"WSåög.h
"

193 
	~"H¨dw¨eSîül.h
"

195 
uöt16_t
 
makeW‹d
(uöt16_à
w
);

196 
uöt16_t
 
makeW‹d
(
byã
 
h
, byã 
l
);

198 
	#w‹d
(...Ë
	`makeW‹d
(
__VA_ARGS__
)

	)

200 
pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
 = 1000000L);

202 
t⁄e
(
uöt8_t
 
_pö
, 
‰equícy
, 
duøti⁄
 = 0);

203 
noT⁄e
(
uöt8_t
 
_pö
);

206 
øndom
();

207 
øndom
(, );

208 
øndomSìd
();

209 
m≠
(, , , , );

213 
	~"pös_¨duöo.h
"

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/CDC.cpp

19 
	~"Pœtf‹m.h
"

20 
	~"USBAPI.h
"

21 
	~<avr/wdt.h
>

23 #i‡
deföed
(
USBCON
)

24 #ifde‡
CDC_ENABLED


26 #i‡(
RAMEND
 < 1000)

27 
	#SERIAL_BUFFER_SIZE
 16

	)

29 
	#SERIAL_BUFFER_SIZE
 64

	)

32 
	srög_buf„r


34 
	mbuf„r
[
SERIAL_BUFFER_SIZE
];

35 vﬁ©ûê
	mhód
;

36 vﬁ©ûê
	mèû
;

39 
rög_buf„r
 
	gcdc_rx_buf„r
 = { { 0 }, 0, 0};

43 
u32
 
	mdwDTER©e
;

44 
u8
 
	mbCh¨F‹m©
;

45 
u8
 
	mbP¨ôyTy≥
;

46 
u8
 
	mbD©aBôs
;

47 
u8
 
	mlöeSèã
;

48 } 
	tLöeInfo
;

50 vﬁ©ûê
LöeInfo
 
	g_usbLöeInfo
 = { 57600, 0x00, 0x00, 0x00, 0x00 };

52 
	#WEAK
 
	`__©åibuã__
 ((
wók
))

	)

54 c⁄° 
CDCDes¸ùt‹
 
_cdcI¡îÁ˚
 
PROGMEM
;

55 c⁄° 
CDCDes¸ùt‹
 
	g_cdcI¡îÁ˚
 =

57 
D_IAD
(0,2,
CDC_COMMUNICATION_INTERFACE_CLASS
,
CDC_ABSTRACT_CONTROL_MODEL
,1),

60 
D_INTERFACE
(
CDC_ACM_INTERFACE
,1,
CDC_COMMUNICATION_INTERFACE_CLASS
,
CDC_ABSTRACT_CONTROL_MODEL
,0),

61 
D_CDCCS
(
CDC_HEADER
,0x10,0x01),

62 
D_CDCCS
(
CDC_CALL_MANAGEMENT
,1,1),

63 
D_CDCCS4
(
CDC_ABSTRACT_CONTROL_MANAGEMENT
,6),

64 
D_CDCCS
(
CDC_UNION
,
CDC_ACM_INTERFACE
,
CDC_DATA_INTERFACE
),

65 
D_ENDPOINT
(
USB_ENDPOINT_IN
 (
CDC_ENDPOINT_ACM
),
USB_ENDPOINT_TYPE_INTERRUPT
,0x10,0x40),

68 
D_INTERFACE
(
CDC_DATA_INTERFACE
,2,
CDC_DATA_INTERFACE_CLASS
,0,0),

69 
D_ENDPOINT
(
USB_ENDPOINT_OUT
(
CDC_ENDPOINT_OUT
),
USB_ENDPOINT_TYPE_BULK
,0x40,0),

70 
D_ENDPOINT
(
USB_ENDPOINT_IN
 (
CDC_ENDPOINT_IN
 ),
USB_ENDPOINT_TYPE_BULK
,0x40,0)

73 
WEAK
 
	$CDC_GëI¡îÁ˚
(
u8
* 
öãrÁ˚Num
)

75 
öãrÁ˚Num
[0] += 2;

76  
	`USB_SídC⁄åﬁ
(
TRANSFER_PGM
,&
_cdcI¡îÁ˚
,(_cdcInterface));

77 
	}
}

79 
boﬁ
 
WEAK
 
	$CDC_Sëup
(
Sëup
& 
£tup
)

81 
u8
 
r
 = 
£tup
.
bReque°
;

82 
u8
 
ªque°Ty≥
 = 
£tup
.
bmReque°Ty≥
;

84 i‡(
REQUEST_DEVICETOHOST_CLASS_INTERFACE
 =
ªque°Ty≥
)

86 i‡(
CDC_GET_LINE_CODING
 =
r
)

88 
	`USB_SídC⁄åﬁ
(0,(*)&
_usbLöeInfo
,7);

89  
åue
;

93 i‡(
REQUEST_HOSTTODEVICE_CLASS_INTERFACE
 =
ªque°Ty≥
)

95 i‡(
CDC_SET_LINE_CODING
 =
r
)

97 
	`USB_RecvC⁄åﬁ
((*)&
_usbLöeInfo
,7);

98  
åue
;

101 i‡(
CDC_SET_CONTROL_LINE_STATE
 =
r
)

103 
_usbLöeInfo
.
löeSèã
 = 
£tup
.
wVÆueL
;

109 i‡(1200 =
_usbLöeInfo
.
dwDTER©e
) {

111 i‡((
_usbLöeInfo
.
löeSèã
 & 0x01) == 0) {

112 *(
uöt16_t
 *)0x0800 = 0x7777;

113 
	`wdt_íabÀ
(
WDTO_120MS
);

120 
	`wdt_dißbÀ
();

121 
	`wdt_ª£t
();

122 *(
uöt16_t
 *)0x0800 = 0x0;

125  
åue
;

128  
Ál£
;

129 
	}
}

132 
	g_£rülPìk
 = -1;

133 
	gSîül_
::
	$begö
(
uöt16_t
 
baud_cou¡
)

135 
	}
}

137 
Sîül_
::
	$íd
()

139 
	}
}

141 
Sîül_
::
	$ac˚±
()

143 
rög_buf„r
 *
buf„r
 = &
cdc_rx_buf„r
;

144 
i
 = ()(
buf„r
->
hód
+1Ë% 
SERIAL_BUFFER_SIZE
;

152 
i
 !
buf„r
->
èû
) {

153 
c
 = 
	`USB_Recv
(
CDC_RX
);

154 i‡(
c
 == -1)

156 
buf„r
->buf„r[buf„r->
hód
] = 
c
;

157 
buf„r
->
hód
 = 
i
;

159 
i
 = ()(
buf„r
->
hód
+1Ë% 
SERIAL_BUFFER_SIZE
;

161 
	}
}

163 
	gSîül_
::
	$avaûabÀ
()

165 
rög_buf„r
 *
buf„r
 = &
cdc_rx_buf„r
;

166  ()(
SERIAL_BUFFER_SIZE
 + 
buf„r
->
hód
 - buf„r->
èû
) % SERIAL_BUFFER_SIZE;

167 
	}
}

169 
	gSîül_
::
	$≥ek
()

171 
rög_buf„r
 *
buf„r
 = &
cdc_rx_buf„r
;

172 i‡(
buf„r
->
hód
 =buf„r->
èû
) {

175  
buf„r
->buf„r[buf„r->
èû
];

177 
	}
}

179 
	gSîül_
::
	$ªad
()

181 
rög_buf„r
 *
buf„r
 = &
cdc_rx_buf„r
;

183 i‡(
buf„r
->
hód
 =buf„r->
èû
) {

186 
c
 = 
buf„r
->buf„r[buf„r->
èû
];

187 
buf„r
->
èû
 = ()(buf„r->èû + 1Ë% 
SERIAL_BUFFER_SIZE
;

188  
c
;

190 
	}
}

192 
	gSîül_
::
	$Êush
()

194 
	`USB_Flush
(
CDC_TX
);

195 
	}
}

197 
size_t
 
	gSîül_
::
	$wrôe
(
uöt8_t
 
c
)

208 i‡(
_usbLöeInfo
.
löeSèã
 > 0) {

209 
r
 = 
	`USB_Síd
(
CDC_TX
,&
c
,1);

210 i‡(
r
 > 0) {

211  
r
;

213 
	`£tWrôeEº‹
();

217 
	`£tWrôeEº‹
();

219 
	}
}

228 
	gSîül_
::
›î©‹
 
	$boﬁ
() {

229 
boﬁ
 
ªsu…
 = 
Ál£
;

230 i‡(
_usbLöeInfo
.
löeSèã
 > 0)

231 
ªsu…
 = 
åue
;

232 
	`dñay
(10);

233  
ªsu…
;

234 
	}
}

236 
Sîül_
 
	gSîül
;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/Client.h

1 #i‚de‡
˛õ¡_h


2 
	#˛õ¡_h


	)

3 
	~"Pröt.h
"

4 
	~"Såóm.h
"

5 
	~"IPAddªss.h
"

7 ˛as†
	cClõ¡
 : 
public
 
Såóm
 {

9 
public
:

10 
vútuÆ
 
c⁄√˘
(
IPAddªss
 
ù
, 
uöt16_t
 
p‹t
) =0;

11 
vútuÆ
 
c⁄√˘
(c⁄° *
ho°
, 
uöt16_t
 
p‹t
) =0;

12 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
) =0;

13 
vútuÆ
 
size_t
 
wrôe
(c⁄° 
uöt8_t
 *
buf
, size_à
size
) =0;

14 
vútuÆ
 
avaûabÀ
() = 0;

15 
vútuÆ
 
ªad
() = 0;

16 
vútuÆ
 
ªad
(
uöt8_t
 *
buf
, 
size_t
 
size
) = 0;

17 
vútuÆ
 
≥ek
() = 0;

18 
vútuÆ
 
Êush
() = 0;

19 
vútuÆ
 
°›
() = 0;

20 
vútuÆ
 
uöt8_t
 
c⁄√˘ed
() = 0;

21 
vútuÆ
 
›î©‹
 
boﬁ
() = 0;

22 
	m¥Ÿe˘ed
:

23 
uöt8_t
* 
	$øwIPAddªss
(
IPAddªss
& 
addr
Ë{ áddr.
	`øw_addªss
(); };

24 
	}
};

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/HID.cpp

19 
	~"Pœtf‹m.h
"

20 
	~"USBAPI.h
"

21 
	~"USBDesc.h
"

23 #i‡
deföed
(
USBCON
)

24 #ifde‡
HID_ENABLED


30 
Mou£_
 
	gMou£
;

31 
Keybﬂrd_
 
	gKeybﬂrd
;

38 
	#LSB
(
_x
Ë((_xË& 0xFF)

	)

39 
	#MSB
(
_x
Ë((_xË>> 8)

	)

41 
	#RAWHID_USAGE_PAGE
 0xFFC0

	)

42 
	#RAWHID_USAGE
 0x0C00

	)

43 
	#RAWHID_TX_SIZE
 64

	)

44 
	#RAWHID_RX_SIZE
 64

	)

46 c⁄° 
u8
 
_hidRï‹tDes¸ùt‹
[] 
PROGMEM
;

47 c⁄° 
u8
 
	g_hidRï‹tDes¸ùt‹
[] = {

109 #i‡
RAWHID_ENABLED


111 0x06, 
LSB
(
RAWHID_USAGE_PAGE
), 
MSB
(RAWHID_USAGE_PAGE),

112 0x0A, 
LSB
(
RAWHID_USAGE
), 
MSB
(RAWHID_USAGE),

131 c⁄° 
HIDDes¸ùt‹
 
_hidI¡îÁ˚
 
PROGMEM
;

132 c⁄° 
HIDDes¸ùt‹
 
	g_hidI¡îÁ˚
 =

134 
D_INTERFACE
(
HID_INTERFACE
,1,3,0,0),

135 
D_HIDREPORT
((
_hidRï‹tDes¸ùt‹
)),

136 
D_ENDPOINT
(
USB_ENDPOINT_IN
 (
HID_ENDPOINT_INT
),
USB_ENDPOINT_TYPE_INTERRUPT
,0x40,0x01)

143 
u8
 
	g_hid_¥Ÿocﬁ
 = 1;

144 
u8
 
	g_hid_idÀ
 = 1;

146 
	#WEAK
 
	`__©åibuã__
 ((
wók
))

	)

148 
WEAK
 
	$HID_GëI¡îÁ˚
(
u8
* 
öãrÁ˚Num
)

150 
öãrÁ˚Num
[0] += 1;

151  
	`USB_SídC⁄åﬁ
(
TRANSFER_PGM
,&
_hidI¡îÁ˚
,(_hidInterface));

152 
	}
}

154 
WEAK
 
	$HID_GëDes¸ùt‹
(
i
)

156  
	`USB_SídC⁄åﬁ
(
TRANSFER_PGM
,
_hidRï‹tDes¸ùt‹
,(_hidReportDescriptor));

157 
	}
}

159 
WEAK
 
	$HID_SídRï‹t
(
u8
 
id
, c⁄° * 
d©a
, 
Àn
)

161 
	`USB_Síd
(
HID_TX
, &
id
, 1);

162 
	`USB_Síd
(
HID_TX
 | 
TRANSFER_RELEASE
,
d©a
,
Àn
);

163 
	}
}

165 
boﬁ
 
WEAK
 
	$HID_Sëup
(
Sëup
& 
£tup
)

167 
u8
 
r
 = 
£tup
.
bReque°
;

168 
u8
 
ªque°Ty≥
 = 
£tup
.
bmReque°Ty≥
;

169 i‡(
REQUEST_DEVICETOHOST_CLASS_INTERFACE
 =
ªque°Ty≥
)

171 i‡(
HID_GET_REPORT
 =
r
)

174  
åue
;

176 i‡(
HID_GET_PROTOCOL
 =
r
)

179  
åue
;

183 i‡(
REQUEST_HOSTTODEVICE_CLASS_INTERFACE
 =
ªque°Ty≥
)

185 i‡(
HID_SET_PROTOCOL
 =
r
)

187 
_hid_¥Ÿocﬁ
 = 
£tup
.
wVÆueL
;

188  
åue
;

191 i‡(
HID_SET_IDLE
 =
r
)

193 
_hid_idÀ
 = 
£tup
.
wVÆueL
;

194  
åue
;

197  
Ál£
;

198 
	}
}

204 
	gMou£_
::
	$Mou£_
(Ë: 
	$_buâ⁄s
(0)

206 
	}
}

208 
Mou£_
::
	$begö
()

210 
	}
}

212 
Mou£_
::
	$íd
()

214 
	}
}

216 
Mou£_
::
	$˛ick
(
uöt8_t
 
b
)

218 
_buâ⁄s
 = 
b
;

219 
	`move
(0,0,0);

220 
_buâ⁄s
 = 0;

221 
	`move
(0,0,0);

222 
	}
}

224 
	gMou£_
::
	$move
(sig√d 
x
, sig√d 
y
, sig√d 
whìl
)

226 
u8
 
m
[4];

227 
m
[0] = 
_buâ⁄s
;

228 
m
[1] = 
x
;

229 
m
[2] = 
y
;

230 
m
[3] = 
whìl
;

231 
	`HID_SídRï‹t
(1,
m
,4);

232 
	}
}

234 
	gMou£_
::
	$buâ⁄s
(
uöt8_t
 
b
)

236 i‡(
b
 !
_buâ⁄s
)

238 
_buâ⁄s
 = 
b
;

239 
	`move
(0,0,0);

241 
	}
}

243 
	gMou£_
::
	$¥ess
(
uöt8_t
 
b
)

245 
	`buâ⁄s
(
_buâ⁄s
 | 
b
);

246 
	}
}

248 
	gMou£_
::
	$ªÀa£
(
uöt8_t
 
b
)

250 
	`buâ⁄s
(
_buâ⁄s
 & ~
b
);

251 
	}
}

253 
boﬁ
 
	gMou£_
::
	$isPªs£d
(
uöt8_t
 
b
)

255 i‡((
b
 & 
_buâ⁄s
) > 0)

256  
åue
;

257  
Ál£
;

258 
	}
}

264 
	gKeybﬂrd_
::
	$Keybﬂrd_
()

266 
	}
}

268 
Keybﬂrd_
::
	$begö
()

270 
	}
}

272 
Keybﬂrd_
::
	$íd
()

274 
	}
}

276 
Keybﬂrd_
::
	$£ndRï‹t
(
KeyRï‹t
* 
keys
)

278 
	`HID_SídRï‹t
(2,
keys
,(
KeyRï‹t
));

279 
	}
}

282 c⁄° 
uöt8_t
 
_asciim≠
[128] 
PROGMEM
;

284 
	#SHIFT
 0x80

	)

285 c⁄° 
uöt8_t
 
	g_asciim≠
[128] =

321 0x1e|
SHIFT
,

322 0x34|
SHIFT
,

323 0x20|
SHIFT
,

324 0x21|
SHIFT
,

325 0x22|
SHIFT
,

326 0x24|
SHIFT
,

328 0x26|
SHIFT
,

329 0x27|
SHIFT
,

330 0x25|
SHIFT
,

331 0x2e|
SHIFT
,

346 0x33|
SHIFT
,

348 0x36|
SHIFT
,

350 0x37|
SHIFT
,

351 0x38|
SHIFT
,

352 0x1f|
SHIFT
,

353 0x04|
SHIFT
,

354 0x05|
SHIFT
,

355 0x06|
SHIFT
,

356 0x07|
SHIFT
,

357 0x08|
SHIFT
,

358 0x09|
SHIFT
,

359 0x0a|
SHIFT
,

360 0x0b|
SHIFT
,

361 0x0c|
SHIFT
,

362 0x0d|
SHIFT
,

363 0x0e|
SHIFT
,

364 0x0f|
SHIFT
,

365 0x10|
SHIFT
,

366 0x11|
SHIFT
,

367 0x12|
SHIFT
,

368 0x13|
SHIFT
,

369 0x14|
SHIFT
,

370 0x15|
SHIFT
,

371 0x16|
SHIFT
,

372 0x17|
SHIFT
,

373 0x18|
SHIFT
,

374 0x19|
SHIFT
,

375 0x1a|
SHIFT
,

376 0x1b|
SHIFT
,

377 0x1c|
SHIFT
,

378 0x1d|
SHIFT
,

382 0x23|
SHIFT
,

383 0x2d|
SHIFT
,

411 0x2f|
SHIFT
,

412 0x31|
SHIFT
,

413 0x30|
SHIFT
,

414 0x35|
SHIFT
,

418 
uöt8_t
 
USBPutCh¨
(uöt8_à
c
);

424 
size_t
 
	gKeybﬂrd_
::
	$¥ess
(
uöt8_t
 
k
)

426 
uöt8_t
 
i
;

427 i‡(
k
 >= 136) {

428 
k
 = k - 136;

429 } i‡(
k
 >= 128) {

430 
_keyRï‹t
.
modifõrs
 |(1<<(
k
-128));

431 
k
 = 0;

433 
k
 = 
	`pgm_ªad_byã
(
_asciim≠
 + k);

434 i‡(!
k
) {

435 
	`£tWrôeEº‹
();

438 i‡(
k
 & 0x80) {

439 
_keyRï‹t
.
modifõrs
 |= 0x02;

440 
k
 &= 0x7F;

446 i‡(
_keyRï‹t
.
keys
[0] !
k
 && _keyReport.keys[1] != k &&

447 
_keyRï‹t
.
keys
[2] !
k
 && _keyReport.keys[3] != k &&

448 
_keyRï‹t
.
keys
[4] !
k
 && _keyReport.keys[5] != k) {

450 
i
=0; i<6; i++) {

451 i‡(
_keyRï‹t
.
keys
[
i
] == 0x00) {

452 
_keyRï‹t
.
keys
[
i
] = 
k
;

456 i‡(
i
 == 6) {

457 
	`£tWrôeEº‹
();

461 
	`£ndRï‹t
(&
_keyRï‹t
);

463 
	}
}

468 
size_t
 
	gKeybﬂrd_
::
	$ªÀa£
(
uöt8_t
 
k
)

470 
uöt8_t
 
i
;

471 i‡(
k
 >= 136) {

472 
k
 = k - 136;

473 } i‡(
k
 >= 128) {

474 
_keyRï‹t
.
modifõrs
 &~(1<<(
k
-128));

475 
k
 = 0;

477 
k
 = 
	`pgm_ªad_byã
(
_asciim≠
 + k);

478 i‡(!
k
) {

481 i‡(
k
 & 0x80) {

482 
_keyRï‹t
.
modifõrs
 &= ~(0x02);

483 
k
 &= 0x7F;

489 
i
=0; i<6; i++) {

490 i‡(0 !
k
 && 
_keyRï‹t
.
keys
[
i
] == k) {

491 
_keyRï‹t
.
keys
[
i
] = 0x00;

495 
	`£ndRï‹t
(&
_keyRï‹t
);

497 
	}
}

499 
	gKeybﬂrd_
::
	$ªÀa£AŒ
()

501 
_keyRï‹t
.
keys
[0] = 0;

502 
_keyRï‹t
.
keys
[1] = 0;

503 
_keyRï‹t
.
keys
[2] = 0;

504 
_keyRï‹t
.
keys
[3] = 0;

505 
_keyRï‹t
.
keys
[4] = 0;

506 
_keyRï‹t
.
keys
[5] = 0;

507 
_keyRï‹t
.
modifõrs
 = 0;

508 
	`£ndRï‹t
(&
_keyRï‹t
);

509 
	}
}

511 
size_t
 
	gKeybﬂrd_
::
	$wrôe
(
uöt8_t
 
c
)

513 
uöt8_t
 
p
 = 
	`¥ess
(
c
);

514 
uöt8_t
 
r
 = 
	`ªÀa£
(
c
);

515  (
p
);

516 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/HardwareSerial.cpp

24 
	~<°dlib.h
>

25 
	~<°dio.h
>

26 
	~<°rög.h
>

27 
	~<öây≥s.h
>

28 
	~"Arduöo.h
"

29 
	~"wúög_¥iv©e.h
"

33 #i‡
deföed
(
UBRRH
Ë|| deföed(
UBRR0H
Ë|| deföed(
UBRR1H
Ë|| deföed(
UBRR2H
Ë|| deföed(
UBRR3H
)

35 
	~"H¨dw¨eSîül.h
"

41 #i‡!
deföed
(
TXC0
)

42 #i‡
deföed
(
TXC
)

43 
	#TXC0
 
TXC


	)

44 #ñi‡
deföed
(
TXC1
)

46 
	#TXC0
 
TXC1


	)

48 #îr‹ 
TXC0
 
nŸ
 
deföabÀ
 
ö
 
H¨dw¨eSîül
.
h


56 #i‡(
RAMEND
 < 1000)

57 
	#SERIAL_BUFFER_SIZE
 16

	)

59 
	#SERIAL_BUFFER_SIZE
 64

	)

62 
	srög_buf„r


64 
	mbuf„r
[
SERIAL_BUFFER_SIZE
];

65 vﬁ©ûê
	mhód
;

66 vﬁ©ûê
	mèû
;

69 #i‡
deföed
(
USBCON
)

70 
rög_buf„r
 
	grx_buf„r
 = { { 0 }, 0, 0};

71 
rög_buf„r
 
	gtx_buf„r
 = { { 0 }, 0, 0};

73 #i‡
deföed
(
UBRRH
Ë|| deföed(
UBRR0H
)

74 
rög_buf„r
 
	grx_buf„r
 = { { 0 }, 0, 0 };

75 
rög_buf„r
 
	gtx_buf„r
 = { { 0 }, 0, 0 };

77 #i‡
deföed
(
UBRR1H
)

78 
rög_buf„r
 
	grx_buf„r1
 = { { 0 }, 0, 0 };

79 
rög_buf„r
 
	gtx_buf„r1
 = { { 0 }, 0, 0 };

81 #i‡
deföed
(
UBRR2H
)

82 
rög_buf„r
 
	grx_buf„r2
 = { { 0 }, 0, 0 };

83 
rög_buf„r
 
	gtx_buf„r2
 = { { 0 }, 0, 0 };

85 #i‡
deföed
(
UBRR3H
)

86 
rög_buf„r
 
	grx_buf„r3
 = { { 0 }, 0, 0 };

87 
rög_buf„r
 
	gtx_buf„r3
 = { { 0 }, 0, 0 };

90 
ölöe
 
	$°‹e_ch¨
(
c
, 
rög_buf„r
 *
buf„r
)

92 
i
 = ()(
buf„r
->
hód
 + 1Ë% 
SERIAL_BUFFER_SIZE
;

98 i‡(
i
 !
buf„r
->
èû
) {

99 
buf„r
->buf„r[buf„r->
hód
] = 
c
;

100 
buf„r
->
hód
 = 
i
;

102 
	}
}

104 #i‡!
deföed
(
USART0_RX_ve˘
Ë&& deföed(
USART1_RX_ve˘
)

107 #i‡!
deföed
(
USART_RX_ve˘
Ë&& !deföed(
SIG_USART0_RECV
) && \

108 !
deföed
(
SIG_UART0_RECV
Ë&& !deföed(
USART0_RX_ve˘
) && \

109 !
	$deföed
(
SIG_UART_RECV
)

112 
	$£rülEvít
(Ë
	`__©åibuã__
((
wók
));

113 
	$£rülEvít
(Ë{
	}
}

114 
	#£rülEvít_im∂emíãd


	)

115 #i‡
deföed
(
USART_RX_ve˘
)

116 
	$SIGNAL
(
USART_RX_ve˘
)

117 #ñi‡
	`deföed
(
SIG_USART0_RECV
)

118 
	$SIGNAL
(
SIG_USART0_RECV
)

119 #ñi‡
	`deföed
(
SIG_UART0_RECV
)

120 
	$SIGNAL
(
SIG_UART0_RECV
)

121 #ñi‡
	`deföed
(
USART0_RX_ve˘
)

122 
	$SIGNAL
(
USART0_RX_ve˘
)

123 #ñi‡
	`deföed
(
SIG_UART_RECV
)

124 
	$SIGNAL
(
SIG_UART_RECV
)

127 #i‡
	`deföed
(
UDR0
)

128 i‡(
	`bô_is_˛ór
(
UCSR0A
, 
UPE0
)) {

129 
c
 = 
UDR0
;

130 
	`°‹e_ch¨
(
c
, &
rx_buf„r
);

132 
c
 = 
UDR0
;

134 #ñi‡
	`deföed
(
UDR
)

135 i‡(
	`bô_is_˛ór
(
UCSRA
, 
PE
)) {

136 
c
 = 
UDR
;

137 
	`°‹e_ch¨
(
c
, &
rx_buf„r
);

139 
c
 = 
UDR
;

142 #îr‹ 
UDR
 
nŸ
 
deföed


144 
	}
}

148 #i‡
deföed
(
USART1_RX_ve˘
)

149 
	$£rülEvít1
(Ë
	`__©åibuã__
((
wók
));

150 
	$£rülEvít1
(Ë{
	}
}

151 
	#£rülEvít1_im∂emíãd


	)

152 
	$SIGNAL
(
USART1_RX_ve˘
)

154 i‡(
	`bô_is_˛ór
(
UCSR1A
, 
UPE1
)) {

155 
c
 = 
UDR1
;

156 
	`°‹e_ch¨
(
c
, &
rx_buf„r1
);

158 
c
 = 
UDR1
;

160 
	}
}

161 #ñi‡
deföed
(
SIG_USART1_RECV
)

162 #îr‹ 
SIG_USART1_RECV


165 #i‡
deföed
(
USART2_RX_ve˘
Ë&& deföed(
UDR2
)

166 
	$£rülEvít2
(Ë
	`__©åibuã__
((
wók
));

167 
	$£rülEvít2
(Ë{
	}
}

168 
	#£rülEvít2_im∂emíãd


	)

169 
	$SIGNAL
(
USART2_RX_ve˘
)

171 i‡(
	`bô_is_˛ór
(
UCSR2A
, 
UPE2
)) {

172 
c
 = 
UDR2
;

173 
	`°‹e_ch¨
(
c
, &
rx_buf„r2
);

175 
c
 = 
UDR2
;

177 
	}
}

178 #ñi‡
deföed
(
SIG_USART2_RECV
)

179 #îr‹ 
SIG_USART2_RECV


182 #i‡
deföed
(
USART3_RX_ve˘
Ë&& deföed(
UDR3
)

183 
	$£rülEvít3
(Ë
	`__©åibuã__
((
wók
));

184 
	$£rülEvít3
(Ë{
	}
}

185 
	#£rülEvít3_im∂emíãd


	)

186 
	$SIGNAL
(
USART3_RX_ve˘
)

188 i‡(
	`bô_is_˛ór
(
UCSR3A
, 
UPE3
)) {

189 
c
 = 
UDR3
;

190 
	`°‹e_ch¨
(
c
, &
rx_buf„r3
);

192 
c
 = 
UDR3
;

194 
	}
}

195 #ñi‡
deföed
(
SIG_USART3_RECV
)

196 #îr‹ 
SIG_USART3_RECV


199 
	$£rülEvítRun
()

201 #ifde‡
£rülEvít_im∂emíãd


202 i‡(
Sîül
.
	`avaûabÀ
()Ë
	`£rülEvít
();

204 #ifde‡
£rülEvít1_im∂emíãd


205 i‡(
Sîül1
.
	`avaûabÀ
()Ë
	`£rülEvít1
();

207 #ifde‡
£rülEvít2_im∂emíãd


208 i‡(
Sîül2
.
	`avaûabÀ
()Ë
	`£rülEvít2
();

210 #ifde‡
£rülEvít3_im∂emíãd


211 i‡(
Sîül3
.
	`avaûabÀ
()Ë
	`£rülEvít3
();

213 
	}
}

216 #i‡!
deföed
(
USART0_UDRE_ve˘
Ë&& deföed(
USART1_UDRE_ve˘
)

219 #i‡!
deföed
(
UART0_UDRE_ve˘
Ë&& !deföed(
UART_UDRE_ve˘
Ë&& !deföed(
USART0_UDRE_ve˘
Ë&& !deföed(
USART_UDRE_ve˘
)

222 #i‡
deföed
(
UART0_UDRE_ve˘
)

223 
	$ISR
(
UART0_UDRE_ve˘
)

224 #ñi‡
	`deföed
(
UART_UDRE_ve˘
)

225 
	$ISR
(
UART_UDRE_ve˘
)

226 #ñi‡
	`deföed
(
USART0_UDRE_ve˘
)

227 
	$ISR
(
USART0_UDRE_ve˘
)

228 #ñi‡
	`deföed
(
USART_UDRE_ve˘
)

229 
	$ISR
(
USART_UDRE_ve˘
)

232 i‡(
tx_buf„r
.
hód
 =tx_buf„r.
èû
) {

234 #i‡
	`deföed
(
UCSR0B
)

235 
	`cbi
(
UCSR0B
, 
UDRIE0
);

237 
	`cbi
(
UCSRB
, 
UDRIE
);

242 
c
 = 
tx_buf„r
.
buf„r
[tx_buf„r.
èû
];

243 
tx_buf„r
.
èû
 = (tx_buf„r.èû + 1Ë% 
SERIAL_BUFFER_SIZE
;

245 #i‡
	`deföed
(
UDR0
)

246 
UDR0
 = 
c
;

247 #ñi‡
	`deföed
(
UDR
)

248 
UDR
 = 
c
;

250 #îr‹ 
UDR
 
nŸ
 
deföed


253 
	}
}

257 #ifde‡
USART1_UDRE_ve˘


258 
	$ISR
(
USART1_UDRE_ve˘
)

260 i‡(
tx_buf„r1
.
hód
 =tx_buf„r1.
èû
) {

262 
	`cbi
(
UCSR1B
, 
UDRIE1
);

266 
c
 = 
tx_buf„r1
.
buf„r
[tx_buf„r1.
èû
];

267 
tx_buf„r1
.
èû
 = (tx_buf„r1.èû + 1Ë% 
SERIAL_BUFFER_SIZE
;

269 
UDR1
 = 
c
;

271 
	}
}

274 #ifde‡
USART2_UDRE_ve˘


275 
	$ISR
(
USART2_UDRE_ve˘
)

277 i‡(
tx_buf„r2
.
hód
 =tx_buf„r2.
èû
) {

279 
	`cbi
(
UCSR2B
, 
UDRIE2
);

283 
c
 = 
tx_buf„r2
.
buf„r
[tx_buf„r2.
èû
];

284 
tx_buf„r2
.
èû
 = (tx_buf„r2.èû + 1Ë% 
SERIAL_BUFFER_SIZE
;

286 
UDR2
 = 
c
;

288 
	}
}

291 #ifde‡
USART3_UDRE_ve˘


292 
	$ISR
(
USART3_UDRE_ve˘
)

294 i‡(
tx_buf„r3
.
hód
 =tx_buf„r3.
èû
) {

296 
	`cbi
(
UCSR3B
, 
UDRIE3
);

300 
c
 = 
tx_buf„r3
.
buf„r
[tx_buf„r3.
èû
];

301 
tx_buf„r3
.
èû
 = (tx_buf„r3.èû + 1Ë% 
SERIAL_BUFFER_SIZE
;

303 
UDR3
 = 
c
;

305 
	}
}

311 
	gH¨dw¨eSîül
::
	$H¨dw¨eSîül
(
rög_buf„r
 *
rx_buf„r
,Ñög_buf„∏*
tx_buf„r
,

312 vﬁ©ûê
uöt8_t
 *
ubºh
, vﬁ©ûêuöt8_à*
ubºl
,

313 vﬁ©ûê
uöt8_t
 *
uc§a
, vﬁ©ûêuöt8_à*
uc§b
,

314 vﬁ©ûê
uöt8_t
 *
uc§c
, vﬁ©ûêuöt8_à*
udr
,

315 
uöt8_t
 
rxí
, uöt8_à
txí
, uöt8_à
rxcõ
, uöt8_à
udrõ
, uöt8_à
u2x
)

317 
_rx_buf„r
 = 
rx_buf„r
;

318 
_tx_buf„r
 = 
tx_buf„r
;

319 
_ubºh
 = 
ubºh
;

320 
_ubºl
 = 
ubºl
;

321 
_uc§a
 = 
uc§a
;

322 
_uc§b
 = 
uc§b
;

323 
_uc§c
 = 
uc§c
;

324 
_udr
 = 
udr
;

325 
_rxí
 = 
rxí
;

326 
_txí
 = 
txí
;

327 
_rxcõ
 = 
rxcõ
;

328 
_udrõ
 = 
udrõ
;

329 
_u2x
 = 
u2x
;

330 
	}
}

334 
	gH¨dw¨eSîül
::
	$begö
(
baud
)

336 
uöt16_t
 
baud_£âög
;

337 
boﬁ
 
u£_u2x
 = 
åue
;

339 #i‡
F_CPU
 == 16000000UL

343 i‡(
baud
 == 57600) {

344 
u£_u2x
 = 
Ál£
;

348 
åy_agaö
:

350 i‡(
u£_u2x
) {

351 *
_uc§a
 = 1 << 
_u2x
;

352 
baud_£âög
 = (
F_CPU
 / 4 / 
baud
 - 1) / 2;

354 *
_uc§a
 = 0;

355 
baud_£âög
 = (
F_CPU
 / 8 / 
baud
 - 1) / 2;

358 i‡((
baud_£âög
 > 4095Ë&& 
u£_u2x
)

360 
u£_u2x
 = 
Ál£
;

361 
åy_agaö
;

365 *
_ubºh
 = 
baud_£âög
 >> 8;

366 *
_ubºl
 = 
baud_£âög
;

368 
å™smôtög
 = 
Ál£
;

370 
	`sbi
(*
_uc§b
, 
_rxí
);

371 
	`sbi
(*
_uc§b
, 
_txí
);

372 
	`sbi
(*
_uc§b
, 
_rxcõ
);

373 
	`cbi
(*
_uc§b
, 
_udrõ
);

374 
	}
}

376 
	gH¨dw¨eSîül
::
	$begö
(
baud
, 
byã
 
c⁄fig
)

378 
uöt16_t
 
baud_£âög
;

379 
uöt8_t
 
cuºít_c⁄fig
;

380 
boﬁ
 
u£_u2x
 = 
åue
;

382 #i‡
F_CPU
 == 16000000UL

386 i‡(
baud
 == 57600) {

387 
u£_u2x
 = 
Ál£
;

391 
åy_agaö
:

393 i‡(
u£_u2x
) {

394 *
_uc§a
 = 1 << 
_u2x
;

395 
baud_£âög
 = (
F_CPU
 / 4 / 
baud
 - 1) / 2;

397 *
_uc§a
 = 0;

398 
baud_£âög
 = (
F_CPU
 / 8 / 
baud
 - 1) / 2;

401 i‡((
baud_£âög
 > 4095Ë&& 
u£_u2x
)

403 
u£_u2x
 = 
Ál£
;

404 
åy_agaö
;

408 *
_ubºh
 = 
baud_£âög
 >> 8;

409 *
_ubºl
 = 
baud_£âög
;

412 #i‡
	`deföed
(
__AVR_ATmega8__
)

413 
c⁄fig
 |= 0x80;

415 *
_uc§c
 = 
c⁄fig
;

417 
	`sbi
(*
_uc§b
, 
_rxí
);

418 
	`sbi
(*
_uc§b
, 
_txí
);

419 
	`sbi
(*
_uc§b
, 
_rxcõ
);

420 
	`cbi
(*
_uc§b
, 
_udrõ
);

421 
	}
}

423 
	gH¨dw¨eSîül
::
	$íd
()

426 
_tx_buf„r
->
hód
 !_tx_buf„r->
èû
)

429 
	`cbi
(*
_uc§b
, 
_rxí
);

430 
	`cbi
(*
_uc§b
, 
_txí
);

431 
	`cbi
(*
_uc§b
, 
_rxcõ
);

432 
	`cbi
(*
_uc§b
, 
_udrõ
);

435 
_rx_buf„r
->
hód
 = _rx_buf„r->
èû
;

436 
	}
}

438 
	gH¨dw¨eSîül
::
	$avaûabÀ
()

440  ()(
SERIAL_BUFFER_SIZE
 + 
_rx_buf„r
->
hód
 - _rx_buf„r->
èû
) % SERIAL_BUFFER_SIZE;

441 
	}
}

443 
	gH¨dw¨eSîül
::
	$≥ek
()

445 i‡(
_rx_buf„r
->
hód
 =_rx_buf„r->
èû
) {

448  
_rx_buf„r
->
buf„r
[_rx_buf„r->
èû
];

450 
	}
}

452 
	gH¨dw¨eSîül
::
	$ªad
()

455 i‡(
_rx_buf„r
->
hód
 =_rx_buf„r->
èû
) {

458 
c
 = 
_rx_buf„r
->
buf„r
[_rx_buf„r->
èû
];

459 
_rx_buf„r
->
èû
 = ()(_rx_buf„r->èû + 1Ë% 
SERIAL_BUFFER_SIZE
;

460  
c
;

462 
	}
}

464 
	gH¨dw¨eSîül
::
	$Êush
()

467 
å™smôtög
 && ! (*
_uc§a
 & 
	`_BV
(
TXC0
)));

468 
å™smôtög
 = 
Ál£
;

469 
	}
}

471 
size_t
 
	gH¨dw¨eSîül
::
	$wrôe
(
uöt8_t
 
c
)

473 
i
 = (
_tx_buf„r
->
hód
 + 1Ë% 
SERIAL_BUFFER_SIZE
;

478 
i
 =
_tx_buf„r
->
èû
)

481 
_tx_buf„r
->
buf„r
[_tx_buf„r->
hód
] = 
c
;

482 
_tx_buf„r
->
hód
 = 
i
;

484 
	`sbi
(*
_uc§b
, 
_udrõ
);

486 
å™smôtög
 = 
åue
;

487 
	`sbi
(*
_uc§a
, 
TXC0
);

490 
	}
}

492 
	gH¨dw¨eSîül
::
›î©‹
 
	$boﬁ
() {

493  
åue
;

494 
	}
}

498 #i‡
deföed
(
UBRRH
Ë&& deföed(
UBRRL
)

499 
H¨dw¨eSîül
 
Sîül
(&
rx_buf„r
, &
tx_buf„r
, &
UBRRH
, &
UBRRL
, &
UCSRA
, &
UCSRB
, &
UCSRC
, &
UDR
, 
RXEN
, 
TXEN
, 
RXCIE
, 
UDRIE
, 
U2X
);

500 #ñi‡
deföed
(
UBRR0H
Ë&& deföed(
UBRR0L
)

501 
H¨dw¨eSîül
 
Sîül
(&
rx_buf„r
, &
tx_buf„r
, &
UBRR0H
, &
UBRR0L
, &
UCSR0A
, &
UCSR0B
, &
UCSR0C
, &
UDR0
, 
RXEN0
, 
TXEN0
, 
RXCIE0
, 
UDRIE0
, 
U2X0
);

502 #ñi‡
deföed
(
USBCON
)

505 #îr‹ 
no
 
£rül
 
p‹t
 
deföed
 (port 0)

508 #i‡
deföed
(
UBRR1H
)

509 
H¨dw¨eSîül
 
Sîül1
(&
rx_buf„r1
, &
tx_buf„r1
, &
UBRR1H
, &
UBRR1L
, &
UCSR1A
, &
UCSR1B
, &
UCSR1C
, &
UDR1
, 
RXEN1
, 
TXEN1
, 
RXCIE1
, 
UDRIE1
, 
U2X1
);

511 #i‡
deföed
(
UBRR2H
)

512 
H¨dw¨eSîül
 
Sîül2
(&
rx_buf„r2
, &
tx_buf„r2
, &
UBRR2H
, &
UBRR2L
, &
UCSR2A
, &
UCSR2B
, &
UCSR2C
, &
UDR2
, 
RXEN2
, 
TXEN2
, 
RXCIE2
, 
UDRIE2
, 
U2X2
);

514 #i‡
deföed
(
UBRR3H
)

515 
H¨dw¨eSîül
 
Sîül3
(&
rx_buf„r3
, &
tx_buf„r3
, &
UBRR3H
, &
UBRR3L
, &
UCSR3A
, &
UCSR3B
, &
UCSR3C
, &
UDR3
, 
RXEN3
, 
TXEN3
, 
RXCIE3
, 
UDRIE3
, 
U2X3
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/HardwareSerial.h

23 #i‚de‡
H¨dw¨eSîül_h


24 
	#H¨dw¨eSîül_h


	)

26 
	~<öây≥s.h
>

28 
	~"Såóm.h
"

30 
	grög_buf„r
;

32 ˛as†
	cH¨dw¨eSîül
 : 
public
 
Såóm


34 
¥iv©e
:

35 
rög_buf„r
 *
_rx_buf„r
;

36 
rög_buf„r
 *
	m_tx_buf„r
;

37 vﬁ©ûê
uöt8_t
 *
	m_ubºh
;

38 vﬁ©ûê
uöt8_t
 *
	m_ubºl
;

39 vﬁ©ûê
uöt8_t
 *
	m_uc§a
;

40 vﬁ©ûê
uöt8_t
 *
	m_uc§b
;

41 vﬁ©ûê
uöt8_t
 *
	m_uc§c
;

42 vﬁ©ûê
uöt8_t
 *
	m_udr
;

43 
uöt8_t
 
	m_rxí
;

44 
uöt8_t
 
	m_txí
;

45 
uöt8_t
 
	m_rxcõ
;

46 
uöt8_t
 
	m_udrõ
;

47 
uöt8_t
 
	m_u2x
;

48 
boﬁ
 
	må™smôtög
;

49 
	mpublic
:

50 
H¨dw¨eSîül
(
rög_buf„r
 *
rx_buf„r
,Ñög_buf„∏*
tx_buf„r
,

51 vﬁ©ûê
uöt8_t
 *
ubºh
, vﬁ©ûêuöt8_à*
ubºl
,

52 vﬁ©ûê
uöt8_t
 *
uc§a
, vﬁ©ûêuöt8_à*
uc§b
,

53 vﬁ©ûê
uöt8_t
 *
uc§c
, vﬁ©ûêuöt8_à*
udr
,

54 
uöt8_t
 
rxí
, uöt8_à
txí
, uöt8_à
rxcõ
, uöt8_à
udrõ
, uöt8_à
u2x
);

55 
begö
();

56 
begö
(, 
uöt8_t
);

57 
íd
();

58 
vútuÆ
 
avaûabÀ
();

59 
vútuÆ
 
≥ek
();

60 
vútuÆ
 
ªad
();

61 
vútuÆ
 
Êush
();

62 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
);

63 
ölöe
 
size_t
 
	$wrôe
(
n
Ë{  
	`wrôe
((
uöt8_t
)n); }

64 
ölöe
 
size_t
 
	$wrôe
(
n
Ë{  
	`wrôe
((
uöt8_t
Í); 
	}
}

65 
ölöe
 
size_t
 
	$wrôe
(
n
Ë{  
	`wrôe
((
uöt8_t
Í); 
	}
}

66 
ölöe
 
size_t
 
	$wrôe
(
n
Ë{  
	`wrôe
((
uöt8_t
Í); 
	}
}

67 
usög
 
	gPröt
::
wrôe
;

68 
›î©‹
 
boﬁ
();

72 
	#SERIAL_5N1
 0x00

	)

73 
	#SERIAL_6N1
 0x02

	)

74 
	#SERIAL_7N1
 0x04

	)

75 
	#SERIAL_8N1
 0x06

	)

76 
	#SERIAL_5N2
 0x08

	)

77 
	#SERIAL_6N2
 0x0A

	)

78 
	#SERIAL_7N2
 0x0C

	)

79 
	#SERIAL_8N2
 0x0E

	)

80 
	#SERIAL_5E1
 0x20

	)

81 
	#SERIAL_6E1
 0x22

	)

82 
	#SERIAL_7E1
 0x24

	)

83 
	#SERIAL_8E1
 0x26

	)

84 
	#SERIAL_5E2
 0x28

	)

85 
	#SERIAL_6E2
 0x2A

	)

86 
	#SERIAL_7E2
 0x2C

	)

87 
	#SERIAL_8E2
 0x2E

	)

88 
	#SERIAL_5O1
 0x30

	)

89 
	#SERIAL_6O1
 0x32

	)

90 
	#SERIAL_7O1
 0x34

	)

91 
	#SERIAL_8O1
 0x36

	)

92 
	#SERIAL_5O2
 0x38

	)

93 
	#SERIAL_6O2
 0x3A

	)

94 
	#SERIAL_7O2
 0x3C

	)

95 
	#SERIAL_8O2
 0x3E

	)

97 #i‡
deföed
(
UBRRH
Ë|| deföed(
UBRR0H
)

98 
H¨dw¨eSîül
 
Sîül
;

99 #ñi‡
deföed
(
USBCON
)

100 
	~"USBAPI.h
"

103 #i‡
deföed
(
UBRR1H
)

104 
H¨dw¨eSîül
 
Sîül1
;

106 #i‡
deföed
(
UBRR2H
)

107 
H¨dw¨eSîül
 
Sîül2
;

109 #i‡
deföed
(
UBRR3H
)

110 
H¨dw¨eSîül
 
Sîül3
;

113 
	$£rülEvítRun
(Ë
	`__©åibuã__
((
wók
));

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/IPAddress.cpp

2 
	~<Arduöo.h
>

3 
	~<IPAddªss.h
>

5 
	gIPAddªss
::
	$IPAddªss
()

7 
	`mem£t
(
_addªss
, 0, (_address));

8 
	}
}

10 
	gIPAddªss
::
	$IPAddªss
(
uöt8_t
 
fú°_o˘ë
, uöt8_à
£c⁄d_o˘ë
, uöt8_à
thúd_o˘ë
, uöt8_à
fouπh_o˘ë
)

12 
_addªss
[0] = 
fú°_o˘ë
;

13 
_addªss
[1] = 
£c⁄d_o˘ë
;

14 
_addªss
[2] = 
thúd_o˘ë
;

15 
_addªss
[3] = 
fouπh_o˘ë
;

16 
	}
}

18 
	gIPAddªss
::
	$IPAddªss
(
uöt32_t
 
addªss
)

20 
	`mem˝y
(
_addªss
, &
addªss
, (_address));

21 
	}
}

23 
	gIPAddªss
::
	$IPAddªss
(c⁄° 
uöt8_t
 *
addªss
)

25 
	`mem˝y
(
_addªss
, 
addªss
, (_address));

26 
	}
}

28 
	gIPAddªss
& IPAddªss::
›î©‹
=(c⁄° 
uöt8_t
 *
addªss
)

30 
mem˝y
(
_addªss
, 
addªss
, (_address));

31  *
	gthis
;

34 
	gIPAddªss
& IPAddªss::
›î©‹
=(
uöt32_t
 
addªss
)

36 
mem˝y
(
_addªss
, (c⁄° 
uöt8_t
 *)&
addªss
, (_address));

37  *
	gthis
;

40 
boﬁ
 
	gIPAddªss
::
›î©‹
==(c⁄° 
uöt8_t
* 
addr
)

42  
memcmp
(
addr
, 
_addªss
, (_address)) == 0;

45 
size_t
 
	gIPAddªss
::
	$¥ötTo
(
Pröt
& 
p
) const

47 
size_t
 
n
 = 0;

48 
i
 =0; i < 3; i++)

50 
n
 +
p
.
	`¥öt
(
_addªss
[
i
], 
DEC
);

51 
n
 +
p
.
	`¥öt
('.');

53 
n
 +
p
.
	`¥öt
(
_addªss
[3], 
DEC
);

54  
n
;

55 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/IPAddress.h

26 #i‚de‡
IPAddªss_h


27 
	#IPAddªss_h


	)

29 
	~<PröèbÀ.h
>

33 ˛as†
	cIPAddªss
 : 
public
 
PröèbÀ
 {

34 
¥iv©e
:

35 
uöt8_t
 
_addªss
[4];

40 
uöt8_t
* 
	$øw_addªss
(Ë{  
_addªss
; };

42 
public
:

44 
	`IPAddªss
();

45 
	`IPAddªss
(
uöt8_t
 
fú°_o˘ë
, uöt8_à
£c⁄d_o˘ë
, uöt8_à
thúd_o˘ë
, uöt8_à
fouπh_o˘ë
);

46 
	`IPAddªss
(
uöt32_t
 
addªss
);

47 
	`IPAddªss
(c⁄° 
uöt8_t
 *
addªss
);

51 
›î©‹
 
	$uöt32_t
(Ë{  *((
uöt32_t
*)
_addªss
); 
	}
};

52 
boﬁ
 
	g›î©‹
==(c⁄° 
IPAddªss
& 
addr
Ë{  (*((
uöt32_t
*)
_addªss
)) == (*((uint32_t*)addr._address)); };

53 
boﬁ
 
	g›î©‹
==(c⁄° 
uöt8_t
* 
addr
);

56 
uöt8_t
 
	g›î©‹
[](
	gödex
Ëc⁄° {  
	g_addªss
[
ödex
]; };

57 
	guöt8_t
& 
	g›î©‹
[](
	gödex
Ë{  
	g_addªss
[
ödex
]; };

60 
	gIPAddªss
& 
	g›î©‹
=(c⁄° 
uöt8_t
 *
addªss
);

61 
	gIPAddªss
& 
	g›î©‹
=(
uöt32_t
 
addªss
);

63 
vútuÆ
 
size_t
 
	$¥ötTo
(
Pröt
& 
p
) const;

65 
‰õnd
 
˛ass
 
Ethî√tCœss
;

66 
‰õnd
 
˛ass
 
UDP
;

67 
‰õnd
 
˛ass
 
Clõ¡
;

68 
‰õnd
 
˛ass
 
Sîvî
;

69 
‰õnd
 
˛ass
 
Dh˝Cœss
;

70 
‰õnd
 
˛ass
 
DNSClõ¡
;

71 
	}
};

73 c⁄° 
IPAddªss
 
INADDR_NONE
(0,0,0,0);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/Platform.h

2 #i‚de‡
__PLATFORM_H__


3 
	#__PLATFORM_H__


	)

5 
	~<öây≥s.h
>

6 
	~<avr/pgm•a˚.h
>

7 
	~<avr/ì¥om.h
>

8 
	~<avr/öãºu±.h
>

9 
	~<utû/dñay.h
>

11 
	tu8
;

12 
	tu16
;

13 
	tu32
;

15 
	~"Arduöo.h
"

17 #i‡
deföed
(
USBCON
)

18 
	~"USBDesc.h
"

19 
	~"USBC‹e.h
"

20 
	~"USBAPI.h
"

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/Print.cpp

22 
	~<°dlib.h
>

23 
	~<°dio.h
>

24 
	~<°rög.h
>

25 
	~<m©h.h
>

26 
	~"Arduöo.h
"

28 
	~"Pröt.h
"

33 
size_t
 
	gPröt
::
	$wrôe
(c⁄° 
uöt8_t
 *
buf„r
, 
size_t
 
size
)

35 
size_t
 
n
 = 0;

36 
size
--) {

37 
n
 +
	`wrôe
(*
buf„r
++);

39  
n
;

40 
	}
}

42 
size_t
 
	gPröt
::
	$¥öt
(c⁄° 
__FœshSåögHñ≥r
 *
ifsh
)

44 c⁄° 
PROGMEM
 *
p
 = (c⁄° PROGMEM *)
ifsh
;

45 
size_t
 
n
 = 0;

47 
c
 = 
	`pgm_ªad_byã
(
p
++);

48 i‡(
c
 == 0) ;

49 
n
 +
	`wrôe
(
c
);

51  
n
;

52 
	}
}

54 
size_t
 
	gPröt
::
	$¥öt
(c⁄° 
Såög
 &
s
)

56 
size_t
 
n
 = 0;

57 
uöt16_t
 
i
 = 0; i < 
s
.
	`Àngth
(); i++) {

58 
n
 +
	`wrôe
(
s
[
i
]);

60  
n
;

61 
	}
}

63 
size_t
 
	gPröt
::
	$¥öt
(c⁄° 
°r
[])

65  
	`wrôe
(
°r
);

66 
	}
}

68 
size_t
 
	gPröt
::
	$¥öt
(
c
)

70  
	`wrôe
(
c
);

71 
	}
}

73 
size_t
 
	gPröt
::
	$¥öt
(
b
, 
ba£
)

75  
	`¥öt
((Ë
b
, 
ba£
);

76 
	}
}

78 
size_t
 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

80  
	`¥öt
((Ë
n
, 
ba£
);

81 
	}
}

83 
size_t
 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

85  
	`¥öt
((Ë
n
, 
ba£
);

86 
	}
}

88 
size_t
 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

90 i‡(
ba£
 == 0) {

91  
	`wrôe
(
n
);

92 } i‡(
ba£
 == 10) {

93 i‡(
n
 < 0) {

94 
t
 = 
	`¥öt
('-');

95 
n
 = -n;

96  
	`¥ötNumbî
(
n
, 10Ë+ 
t
;

98  
	`¥ötNumbî
(
n
, 10);

100  
	`¥ötNumbî
(
n
, 
ba£
);

102 
	}
}

104 
size_t
 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

106 i‡(
ba£
 =0Ë 
	`wrôe
(
n
);

107  
	`¥ötNumbî
(
n
, 
ba£
);

108 
	}
}

110 
size_t
 
	gPröt
::
	$¥öt
(
n
, 
digôs
)

112  
	`¥ötFlﬂt
(
n
, 
digôs
);

113 
	}
}

115 
size_t
 
	gPröt
::
	$¥öén
(c⁄° 
__FœshSåögHñ≥r
 *
ifsh
)

117 
size_t
 
n
 = 
	`¥öt
(
ifsh
);

118 
n
 +
	`¥öén
();

119  
n
;

120 
	}
}

122 
size_t
 
	gPröt
::
	$¥öt
(c⁄° 
PröèbÀ
& 
x
)

124  
x
.
	`¥ötTo
(*
this
);

125 
	}
}

127 
size_t
 
	gPröt
::
	$¥öén
()

129 
size_t
 
n
 = 
	`¥öt
('\r');

130 
n
 +
	`¥öt
('\n');

131  
n
;

132 
	}
}

134 
size_t
 
	gPröt
::
	$¥öén
(c⁄° 
Såög
 &
s
)

136 
size_t
 
n
 = 
	`¥öt
(
s
);

137 
n
 +
	`¥öén
();

138  
n
;

139 
	}
}

141 
size_t
 
	gPröt
::
	$¥öén
(c⁄° 
c
[])

143 
size_t
 
n
 = 
	`¥öt
(
c
);

144 
n
 +
	`¥öén
();

145  
n
;

146 
	}
}

148 
size_t
 
	gPröt
::
	$¥öén
(
c
)

150 
size_t
 
n
 = 
	`¥öt
(
c
);

151 
n
 +
	`¥öén
();

152  
n
;

153 
	}
}

155 
size_t
 
	gPröt
::
	$¥öén
(
b
, 
ba£
)

157 
size_t
 
n
 = 
	`¥öt
(
b
, 
ba£
);

158 
n
 +
	`¥öén
();

159  
n
;

160 
	}
}

162 
size_t
 
	gPröt
::
	$¥öén
(
num
, 
ba£
)

164 
size_t
 
n
 = 
	`¥öt
(
num
, 
ba£
);

165 
n
 +
	`¥öén
();

166  
n
;

167 
	}
}

169 
size_t
 
	gPröt
::
	$¥öén
(
num
, 
ba£
)

171 
size_t
 
n
 = 
	`¥öt
(
num
, 
ba£
);

172 
n
 +
	`¥öén
();

173  
n
;

174 
	}
}

176 
size_t
 
	gPröt
::
	$¥öén
(
num
, 
ba£
)

178 
size_t
 
n
 = 
	`¥öt
(
num
, 
ba£
);

179 
n
 +
	`¥öén
();

180  
n
;

181 
	}
}

183 
size_t
 
	gPröt
::
	$¥öén
(
num
, 
ba£
)

185 
size_t
 
n
 = 
	`¥öt
(
num
, 
ba£
);

186 
n
 +
	`¥öén
();

187  
n
;

188 
	}
}

190 
size_t
 
	gPröt
::
	$¥öén
(
num
, 
digôs
)

192 
size_t
 
n
 = 
	`¥öt
(
num
, 
digôs
);

193 
n
 +
	`¥öén
();

194  
n
;

195 
	}
}

197 
size_t
 
	gPröt
::
	$¥öén
(c⁄° 
PröèbÀ
& 
x
)

199 
size_t
 
n
 = 
	`¥öt
(
x
);

200 
n
 +
	`¥öén
();

201  
n
;

202 
	}
}

206 
size_t
 
	gPröt
::
	$¥ötNumbî
(
n
, 
uöt8_t
 
ba£
) {

207 
buf
[8 * () + 1];

208 *
°r
 = &
buf
[(buf) - 1];

210 *
°r
 = '\0';

213 i‡(
ba£
 < 2) base = 10;

216 
m
 = 
n
;

217 
n
 /
ba£
;

218 
c
 = 
m
 - 
ba£
 * 
n
;

219 *--
°r
 = 
c
 < 10 ? c + '0' : c + 'A' - 10;

220 } 
n
);

222  
	`wrôe
(
°r
);

223 
	}
}

225 
size_t
 
	gPröt
::
	$¥ötFlﬂt
(
numbî
, 
uöt8_t
 
digôs
)

227 
size_t
 
n
 = 0;

229 i‡(
	`i¢™
(
numbî
)Ë 
	`¥öt
("nan");

230 i‡(
	`isöf
(
numbî
)Ë 
	`¥öt
("inf");

231 i‡(
numbî
 > 4294967040.0Ë 
	`¥öt
 ("ovf");

232 i‡(
numbî
 <-4294967040.0Ë 
	`¥öt
 ("ovf");

235 i‡(
numbî
 < 0.0)

237 
n
 +
	`¥öt
('-');

238 
numbî
 = -number;

242 
roundög
 = 0.5;

243 
uöt8_t
 
i
=0; i<
digôs
; ++i)

244 
roundög
 /= 10.0;

246 
numbî
 +
roundög
;

249 
öt_∑π
 = ()
numbî
;

250 
ªmaödî
 = 
numbî
 - ()
öt_∑π
;

251 
n
 +
	`¥öt
(
öt_∑π
);

254 i‡(
digôs
 > 0) {

255 
n
 +
	`¥öt
(".");

259 
digôs
-- > 0)

261 
ªmaödî
 *= 10.0;

262 
toPröt
 = (
ªmaödî
);

263 
n
 +
	`¥öt
(
toPröt
);

264 
ªmaödî
 -
toPröt
;

267  
n
;

268 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/Print.h

20 #i‚de‡
Pröt_h


21 
	#Pröt_h


	)

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

26 
	~"WSåög.h
"

27 
	~"PröèbÀ.h
"

29 
	#DEC
 10

	)

30 
	#HEX
 16

	)

31 
	#OCT
 8

	)

32 
	#BIN
 2

	)

34 ˛as†
	cPröt


36 
	m¥iv©e
:

37 
wrôe_îr‹
;

38 
size_t
 
¥ötNumbî
(, 
uöt8_t
);

39 
size_t
 
¥ötFlﬂt
(, 
uöt8_t
);

40 
	m¥Ÿe˘ed
:

41 
	$£tWrôeEº‹
(
îr
 = 1Ë{ 
wrôe_îr‹
 =Érr; }

42 
public
:

43 
	$Pröt
(Ë: 
	$wrôe_îr‹
(0Ë{
	}
}

45 
	$gëWrôeEº‹
(Ë{  
wrôe_îr‹
; 
	}
}

46 
	$˛órWrôeEº‹
(Ë{ 
	`£tWrôeEº‹
(0); 
	}
}

48 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
) = 0;

49 
size_t
 
	$wrôe
(c⁄° *
°r
) {

50 i‡(
°r
 =
NULL
)  0;

51  
	`wrôe
((c⁄° 
uöt8_t
 *)
°r
, 
	`°æí
(str));

52 
	}
}

53 
vútuÆ
 
size_t
 
wrôe
(c⁄° 
uöt8_t
 *
buf„r
, size_à
size
);

55 
size_t
 
¥öt
(c⁄° 
__FœshSåögHñ≥r
 *);

56 
size_t
 
¥öt
(c⁄° 
Såög
 &);

57 
size_t
 
¥öt
(const []);

58 
size_t
 
¥öt
();

59 
size_t
 
¥öt
(, 
DEC
);

60 
size_t
 
¥öt
(, 
DEC
);

61 
size_t
 
¥öt
(, 
DEC
);

62 
size_t
 
¥öt
(, 
DEC
);

63 
size_t
 
¥öt
(, 
DEC
);

64 
size_t
 
¥öt
(, = 2);

65 
size_t
 
¥öt
(c⁄° 
PröèbÀ
&);

67 
size_t
 
¥öén
(c⁄° 
__FœshSåögHñ≥r
 *);

68 
size_t
 
¥öén
(c⁄° 
Såög
 &
s
);

69 
size_t
 
¥öén
(const []);

70 
size_t
 
¥öén
();

71 
size_t
 
¥öén
(, 
DEC
);

72 
size_t
 
¥öén
(, 
DEC
);

73 
size_t
 
¥öén
(, 
DEC
);

74 
size_t
 
¥öén
(, 
DEC
);

75 
size_t
 
¥öén
(, 
DEC
);

76 
size_t
 
¥öén
(, = 2);

77 
size_t
 
¥öén
(c⁄° 
PröèbÀ
&);

78 
size_t
 
¥öén
();

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/Printable.h

20 #i‚de‡
PröèbÀ_h


21 
	#PröèbÀ_h


	)

23 
	~<√w.h
>

25 
˛ass
 
	gPröt
;

33 ˛as†
	cPröèbÀ


35 
	mpublic
:

36 
vútuÆ
 
size_t
 
	$¥ötTo
(
Pröt
& 
p
) const = 0;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/Server.h

1 #i‚de‡
£rvî_h


2 
	#£rvî_h


	)

4 ˛as†
	cSîvî
 : 
public
 
Pröt
 {

5 
public
:

6 
vútuÆ
 
begö
() =0;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/Stream.cpp

23 
	~"Arduöo.h
"

24 
	~"Såóm.h
"

26 
	#PARSE_TIMEOUT
 1000

27 
	#NO_SKIP_CHAR
 1

28 

	)

30 
	gSåóm
::
	$timedRód
()

32 
c
;

33 
_°¨tMûlis
 = 
	`mûlis
();

35 
c
 = 
	`ªad
();

36 i‡(
c
 >= 0)  c;

37 } 
	`mûlis
(Ë- 
_°¨tMûlis
 < 
_timeout
);

39 
	}
}

42 
	gSåóm
::
	$timedPìk
()

44 
c
;

45 
_°¨tMûlis
 = 
	`mûlis
();

47 
c
 = 
	`≥ek
();

48 i‡(
c
 >= 0)  c;

49 } 
	`mûlis
(Ë- 
_°¨tMûlis
 < 
_timeout
);

51 
	}
}

55 
	gSåóm
::
	$≥ekNextDigô
()

57 
c
;

59 
c
 = 
	`timedPìk
();

60 i‡(
c
 < 0)  c;

61 i‡(
c
 == '-')  c;

62 i‡(
c
 >= '0' && c <= '9')  c;

63 
	`ªad
();

65 
	}
}

70 
	gSåóm
::
	$£tTimeout
(
timeout
)

72 
_timeout
 = 
timeout
;

73 
	}
}

76 
boﬁ
 
	gSåóm
::
	$föd
(*
èrgë
)

78  
	`födU¡û
(
èrgë
, 
NULL
);

79 
	}
}

83 
boﬁ
 
	gSåóm
::
	$föd
(*
èrgë
, 
size_t
 
Àngth
)

85  
	`födU¡û
(
èrgë
, 
Àngth
, 
NULL
, 0);

86 
	}
}

89 
boﬁ
 
	gSåóm
::
	$födU¡û
(*
èrgë
, *
ãrmö©‹
)

91  
	`födU¡û
(
èrgë
, 
	`°æí
—¨gë), 
ãrmö©‹
, strlen(terminator));

92 
	}
}

97 
boﬁ
 
	gSåóm
::
	$födU¡û
(*
èrgë
, 
size_t
 
èrgëLí
, *
ãrmö©‹
, size_à
ãrmLí
)

99 
size_t
 
ödex
 = 0;

100 
size_t
 
ãrmIndex
 = 0;

101 
c
;

103 if–*
èrgë
 == 0)

104  
åue
;

105  (
c
 = 
	`timedRód
()) > 0){

107 if(
c
 !
èrgë
[
ödex
])

108 
ödex
 = 0;

110 if–
c
 =
èrgë
[
ödex
]){

112 if(++
ödex
 >
èrgëLí
){

113  
åue
;

117 if(
ãrmLí
 > 0 && 
c
 =
ãrmö©‹
[
ãrmIndex
]){

118 if(++
ãrmIndex
 >
ãrmLí
)

119  
Ál£
;

122 
ãrmIndex
 = 0;

124  
Ál£
;

125 
	}
}

131 
	gSåóm
::
	$∑r£I¡
()

133  
	`∑r£I¡
(
NO_SKIP_CHAR
);

134 
	}
}

138 
	gSåóm
::
	$∑r£I¡
(
skùCh¨
)

140 
boﬁón
 
isNeg©ive
 = 
Ál£
;

141 
vÆue
 = 0;

142 
c
;

144 
c
 = 
	`≥ekNextDigô
();

146 if(
c
 < 0)

150 if(
c
 =
skùCh¨
)

152 if(
c
 == '-')

153 
isNeg©ive
 = 
åue
;

154 if(
c
 >= '0' && c <= '9')

155 
vÆue
 = vÆuê* 10 + 
c
 - '0';

156 
	`ªad
();

157 
c
 = 
	`timedPìk
();

159  (
c
 >'0' && c <'9'Ë|| c =
skùCh¨
 );

161 if(
isNeg©ive
)

162 
vÆue
 = -value;

163  
vÆue
;

164 
	}
}

168 
	gSåóm
::
	$∑r£Flﬂt
()

170  
	`∑r£Flﬂt
(
NO_SKIP_CHAR
);

171 
	}
}

175 
	gSåóm
::
	$∑r£Flﬂt
(
skùCh¨
){

176 
boﬁón
 
isNeg©ive
 = 
Ál£
;

177 
boﬁón
 
isFø˘i⁄
 = 
Ál£
;

178 
vÆue
 = 0;

179 
c
;

180 
‰a˘i⁄
 = 1.0;

182 
c
 = 
	`≥ekNextDigô
();

184 if(
c
 < 0)

188 if(
c
 =
skùCh¨
)

190 if(
c
 == '-')

191 
isNeg©ive
 = 
åue
;

192 i‡(
c
 == '.')

193 
isFø˘i⁄
 = 
åue
;

194 if(
c
 >= '0' && c <= '9') {

195 
vÆue
 = vÆuê* 10 + 
c
 - '0';

196 if(
isFø˘i⁄
)

197 
‰a˘i⁄
 *= 0.1;

199 
	`ªad
();

200 
c
 = 
	`timedPìk
();

202  (
c
 >'0' && c <'9'Ë|| c ='.' || c =
skùCh¨
 );

204 if(
isNeg©ive
)

205 
vÆue
 = -value;

206 if(
isFø˘i⁄
)

207  
vÆue
 * 
‰a˘i⁄
;

209  
vÆue
;

210 
	}
}

217 
size_t
 
	gSåóm
::
	$ªadByãs
(*
buf„r
, 
size_t
 
Àngth
)

219 
size_t
 
cou¡
 = 0;

220 
cou¡
 < 
Àngth
) {

221 
c
 = 
	`timedRód
();

222 i‡(
c
 < 0) ;

223 *
buf„r
++ = ()
c
;

224 
cou¡
++;

226  
cou¡
;

227 
	}
}

234 
size_t
 
	gSåóm
::
	$ªadByãsU¡û
(
ãrmö©‹
, *
buf„r
, 
size_t
 
Àngth
)

236 i‡(
Àngth
 < 1)  0;

237 
size_t
 
ödex
 = 0;

238 
ödex
 < 
Àngth
) {

239 
c
 = 
	`timedRód
();

240 i‡(
c
 < 0 || c =
ãrmö©‹
) ;

241 *
buf„r
++ = ()
c
;

242 
ödex
++;

244  
ödex
;

245 
	}
}

247 
Såög
 
	gSåóm
::
	$ªadSåög
()

249 
Såög
 
ªt
;

250 
c
 = 
	`timedRód
();

251 
c
 >= 0)

253 
ªt
 +()
c
;

254 
c
 = 
	`timedRód
();

256  
ªt
;

257 
	}
}

259 
Såög
 
	gSåóm
::
	$ªadSåögU¡û
(
ãrmö©‹
)

261 
Såög
 
ªt
;

262 
c
 = 
	`timedRód
();

263 
c
 >0 && c !
ãrmö©‹
)

265 
ªt
 +()
c
;

266 
c
 = 
	`timedRód
();

268  
ªt
;

269 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/Stream.h

22 #i‚de‡
Såóm_h


23 
	#Såóm_h


	)

25 
	~<öây≥s.h
>

26 
	~"Pröt.h
"

38 ˛as†
	cSåóm
 : 
public
 
Pröt


40 
¥iv©e
:

41 
_timeout
;

42 
	m_°¨tMûlis
;

43 
timedRód
();

44 
timedPìk
();

45 
≥ekNextDigô
();

47 
	mpublic
:

48 
vútuÆ
 
avaûabÀ
() = 0;

49 
vútuÆ
 
ªad
() = 0;

50 
vútuÆ
 
≥ek
() = 0;

51 
vútuÆ
 
Êush
() = 0;

53 
	$Såóm
(Ë{
_timeout
=1000;}

57 
	`£tTimeout
(
timeout
);

59 
boﬁ
 
	`föd
(*
èrgë
);

62 
boﬁ
 
	`föd
(*
èrgë
, 
size_t
 
Àngth
);

65 
boﬁ
 
	`födU¡û
(*
èrgë
, *
ãrmö©‹
);

67 
boﬁ
 
	`födU¡û
(*
èrgë
, 
size_t
 
èrgëLí
, *
ãrmö©e
, size_à
ãrmLí
);

70 
	`∑r£I¡
();

74 
	`∑r£Flﬂt
();

76 
size_t
 
	`ªadByãs
–*
buf„r
, size_à
Àngth
);

80 
size_t
 
	`ªadByãsU¡û
–
ãrmö©‹
, *
buf„r
, size_à
Àngth
);

85 
Såög
 
	`ªadSåög
();

86 
Såög
 
	`ªadSåögU¡û
(
ãrmö©‹
);

88 
¥Ÿe˘ed
:

89 
	`∑r£I¡
(
skùCh¨
);

93 
	`∑r£Flﬂt
(
skùCh¨
);

94 
	}
};

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/Tone.cpp

35 
	~<avr/öãºu±.h
>

36 
	~<avr/pgm•a˚.h
>

37 
	~"Arduöo.h
"

38 
	~"pös_¨duöo.h
"

40 #i‡
deföed
(
__AVR_ATmega8__
Ë|| deföed(
__AVR_ATmega128__
)

41 
	#TCCR2A
 
TCCR2


	)

42 
	#TCCR2B
 
TCCR2


	)

43 
	#COM2A1
 
COM21


	)

44 
	#COM2A0
 
COM20


	)

45 
	#OCR2A
 
OCR2


	)

46 
	#TIMSK2
 
TIMSK


	)

47 
	#OCIE2A
 
OCIE2


	)

48 
	#TIMER2_COMPA_ve˘
 
TIMER2_COMP_ve˘


	)

49 
	#TIMSK1
 
TIMSK


	)

57 #i‡!
deföed
(
__AVR_ATmega8__
)

58 vﬁ©ûê
	gtimî0_toggÀ_cou¡
;

59 vﬁ©ûê
uöt8_t
 *
	gtimî0_pö_p‹t
;

60 vﬁ©ûê
uöt8_t
 
	gtimî0_pö_mask
;

63 vﬁ©ûê
	gtimî1_toggÀ_cou¡
;

64 vﬁ©ûê
uöt8_t
 *
	gtimî1_pö_p‹t
;

65 vﬁ©ûê
uöt8_t
 
	gtimî1_pö_mask
;

66 vﬁ©ûê
	gtimî2_toggÀ_cou¡
;

67 vﬁ©ûê
uöt8_t
 *
	gtimî2_pö_p‹t
;

68 vﬁ©ûê
uöt8_t
 
	gtimî2_pö_mask
;

70 #i‡
deföed
(
TIMSK3
)

71 vﬁ©ûê
	gtimî3_toggÀ_cou¡
;

72 vﬁ©ûê
uöt8_t
 *
	gtimî3_pö_p‹t
;

73 vﬁ©ûê
uöt8_t
 
	gtimî3_pö_mask
;

76 #i‡
deföed
(
TIMSK4
)

77 vﬁ©ûê
	gtimî4_toggÀ_cou¡
;

78 vﬁ©ûê
uöt8_t
 *
	gtimî4_pö_p‹t
;

79 vﬁ©ûê
uöt8_t
 
	gtimî4_pö_mask
;

82 #i‡
deföed
(
TIMSK5
)

83 vﬁ©ûê
	gtimî5_toggÀ_cou¡
;

84 vﬁ©ûê
uöt8_t
 *
	gtimî5_pö_p‹t
;

85 vﬁ©ûê
uöt8_t
 
	gtimî5_pö_mask
;

89 #i‡
deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega2560__
)

91 
	#AVAILABLE_TONE_PINS
 1

	)

92 
	#USE_TIMER2


	)

94 c⁄° 
uöt8_t
 
PROGMEM
 
	gt⁄e_pö_to_timî_PGM
[] = { 2 };

95 
uöt8_t
 
	gt⁄e_pös
[
AVAILABLE_TONE_PINS
] = { 255 };

97 #ñi‡
deföed
(
__AVR_ATmega8__
)

99 
	#AVAILABLE_TONE_PINS
 1

	)

100 
	#USE_TIMER2


	)

102 c⁄° 
uöt8_t
 
PROGMEM
 
	gt⁄e_pö_to_timî_PGM
[] = { 2 };

103 
uöt8_t
 
	gt⁄e_pös
[
AVAILABLE_TONE_PINS
] = { 255 };

105 #ñi‡
deföed
(
__AVR_ATmega32U4__
)

107 
	#AVAILABLE_TONE_PINS
 1

	)

108 
	#USE_TIMER3


	)

110 c⁄° 
uöt8_t
 
PROGMEM
 
	gt⁄e_pö_to_timî_PGM
[] = { 3 };

111 
uöt8_t
 
	gt⁄e_pös
[
AVAILABLE_TONE_PINS
] = { 255 };

115 
	#AVAILABLE_TONE_PINS
 1

	)

116 
	#USE_TIMER2


	)

119 c⁄° 
uöt8_t
 
PROGMEM
 
	gt⁄e_pö_to_timî_PGM
[] = { 2 };

120 
uöt8_t
 
	gt⁄e_pös
[
AVAILABLE_TONE_PINS
] = { 255 };

126 
öt8_t
 
	$t⁄eBegö
(
uöt8_t
 
_pö
)

128 
öt8_t
 
_timî
 = -1;

131 
i
 = 0; i < 
AVAILABLE_TONE_PINS
; i++) {

132 i‡(
t⁄e_pös
[
i
] =
_pö
) {

133  
	`pgm_ªad_byã
(
t⁄e_pö_to_timî_PGM
 + 
i
);

138 
i
 = 0; i < 
AVAILABLE_TONE_PINS
; i++) {

139 i‡(
t⁄e_pös
[
i
] == 255) {

140 
t⁄e_pös
[
i
] = 
_pö
;

141 
_timî
 = 
	`pgm_ªad_byã
(
t⁄e_pö_to_timî_PGM
 + 
i
);

146 i‡(
_timî
 != -1)

152 
_timî
)

154 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
TCCR0B
)

157 
TCCR0A
 = 0;

158 
TCCR0B
 = 0;

159 
	`bôWrôe
(
TCCR0A
, 
WGM01
, 1);

160 
	`bôWrôe
(
TCCR0B
, 
CS00
, 1);

161 
timî0_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

162 
timî0_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

166 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
TCCR1B
Ë&& deföed(
WGM12
)

169 
TCCR1A
 = 0;

170 
TCCR1B
 = 0;

171 
	`bôWrôe
(
TCCR1B
, 
WGM12
, 1);

172 
	`bôWrôe
(
TCCR1B
, 
CS10
, 1);

173 
timî1_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

174 
timî1_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

178 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
TCCR2B
)

181 
TCCR2A
 = 0;

182 
TCCR2B
 = 0;

183 
	`bôWrôe
(
TCCR2A
, 
WGM21
, 1);

184 
	`bôWrôe
(
TCCR2B
, 
CS20
, 1);

185 
timî2_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

186 
timî2_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

190 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
TCCR3B
Ë&& deföed(
TIMSK3
)

193 
TCCR3A
 = 0;

194 
TCCR3B
 = 0;

195 
	`bôWrôe
(
TCCR3B
, 
WGM32
, 1);

196 
	`bôWrôe
(
TCCR3B
, 
CS30
, 1);

197 
timî3_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

198 
timî3_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

202 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
TCCR4B
Ë&& deföed(
TIMSK4
)

205 
TCCR4A
 = 0;

206 
TCCR4B
 = 0;

207 #i‡
	`deföed
(
WGM42
)

208 
	`bôWrôe
(
TCCR4B
, 
WGM42
, 1);

209 #ñi‡
	`deföed
(
CS43
)

210 #w¨nög 
this
 
may
 
nŸ
 
be
 
c‹ª˘


212 
	`bôWrôe
(
TCCR4B
, 
CS43
, 1);

214 
	`bôWrôe
(
TCCR4B
, 
CS40
, 1);

215 
timî4_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

216 
timî4_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

220 #i‡
	`deföed
(
TCCR5A
Ë&& deföed(
TCCR5B
Ë&& deföed(
TIMSK5
)

223 
TCCR5A
 = 0;

224 
TCCR5B
 = 0;

225 
	`bôWrôe
(
TCCR5B
, 
WGM52
, 1);

226 
	`bôWrôe
(
TCCR5B
, 
CS50
, 1);

227 
timî5_pö_p‹t
 = 
	`p‹tOuçutRegi°î
(
	`digôÆPöToP‹t
(
_pö
));

228 
timî5_pö_mask
 = 
	`digôÆPöToBôMask
(
_pö
);

234  
_timî
;

235 
	}
}

241 
	$t⁄e
(
uöt8_t
 
_pö
, 
‰equícy
, 
duøti⁄
)

243 
uöt8_t
 
¥esˇœrbôs
 = 0b001;

244 
toggÀ_cou¡
 = 0;

245 
uöt32_t
 
o¸
 = 0;

246 
öt8_t
 
_timî
;

248 
_timî
 = 
	`t⁄eBegö
(
_pö
);

250 i‡(
_timî
 >= 0)

253 
	`pöMode
(
_pö
, 
OUTPUT
);

256 i‡(
_timî
 == 0 || _timer == 2)

258 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 - 1;

259 
¥esˇœrbôs
 = 0b001;

260 i‡(
o¸
 > 255)

262 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 8 - 1;

263 
¥esˇœrbôs
 = 0b010;

265 i‡(
_timî
 =2 && 
o¸
 > 255)

267 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 32 - 1;

268 
¥esˇœrbôs
 = 0b011;

271 i‡(
o¸
 > 255)

273 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 64 - 1;

274 
¥esˇœrbôs
 = 
_timî
 == 0 ? 0b011 : 0b100;

276 i‡(
_timî
 =2 && 
o¸
 > 255)

278 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 128 - 1;

279 
¥esˇœrbôs
 = 0b101;

282 i‡(
o¸
 > 255)

284 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 256 - 1;

285 
¥esˇœrbôs
 = 
_timî
 == 0 ? 0b100 : 0b110;

286 i‡(
o¸
 > 255)

289 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 1024 - 1;

290 
¥esˇœrbôs
 = 
_timî
 == 0 ? 0b101 : 0b111;

296 #i‡
	`deföed
(
TCCR0B
)

297 i‡(
_timî
 == 0)

299 
TCCR0B
 = 
¥esˇœrbôs
;

303 #i‡
	`deföed
(
TCCR2B
)

305 
TCCR2B
 = 
¥esˇœrbôs
;

316 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 - 1;

318 
¥esˇœrbôs
 = 0b001;

319 i‡(
o¸
 > 0xffff)

321 
o¸
 = 
F_CPU
 / 
‰equícy
 / 2 / 64 - 1;

322 
¥esˇœrbôs
 = 0b011;

325 i‡(
_timî
 == 1)

327 #i‡
	`deföed
(
TCCR1B
)

328 
TCCR1B
 = (TCCR1B & 0b11111000Ë| 
¥esˇœrbôs
;

331 #i‡
	`deföed
(
TCCR3B
)

332 i‡(
_timî
 == 3)

333 
TCCR3B
 = (TCCR3B & 0b11111000Ë| 
¥esˇœrbôs
;

335 #i‡
	`deföed
(
TCCR4B
)

336 i‡(
_timî
 == 4)

337 
TCCR4B
 = (TCCR4B & 0b11111000Ë| 
¥esˇœrbôs
;

339 #i‡
	`deföed
(
TCCR5B
)

340 i‡(
_timî
 == 5)

341 
TCCR5B
 = (TCCR5B & 0b11111000Ë| 
¥esˇœrbôs
;

348 i‡(
duøti⁄
 > 0)

350 
toggÀ_cou¡
 = 2 * 
‰equícy
 * 
duøti⁄
 / 1000;

354 
toggÀ_cou¡
 = -1;

360 
_timî
)

363 #i‡
	`deföed
(
OCR0A
Ë&& deföed(
TIMSK0
Ë&& deföed(
OCIE0A
)

365 
OCR0A
 = 
o¸
;

366 
timî0_toggÀ_cou¡
 = 
toggÀ_cou¡
;

367 
	`bôWrôe
(
TIMSK0
, 
OCIE0A
, 1);

372 #i‡
	`deföed
(
OCR1A
Ë&& deföed(
TIMSK1
Ë&& deföed(
OCIE1A
)

373 
OCR1A
 = 
o¸
;

374 
timî1_toggÀ_cou¡
 = 
toggÀ_cou¡
;

375 
	`bôWrôe
(
TIMSK1
, 
OCIE1A
, 1);

376 #ñi‡
	`deföed
(
OCR1A
Ë&& deföed(
TIMSK
Ë&& deföed(
OCIE1A
)

378 
OCR1A
 = 
o¸
;

379 
timî1_toggÀ_cou¡
 = 
toggÀ_cou¡
;

380 
	`bôWrôe
(
TIMSK
, 
OCIE1A
, 1);

384 #i‡
	`deföed
(
OCR2A
Ë&& deföed(
TIMSK2
Ë&& deföed(
OCIE2A
)

386 
OCR2A
 = 
o¸
;

387 
timî2_toggÀ_cou¡
 = 
toggÀ_cou¡
;

388 
	`bôWrôe
(
TIMSK2
, 
OCIE2A
, 1);

392 #i‡
	`deföed
(
TIMSK3
)

394 
OCR3A
 = 
o¸
;

395 
timî3_toggÀ_cou¡
 = 
toggÀ_cou¡
;

396 
	`bôWrôe
(
TIMSK3
, 
OCIE3A
, 1);

400 #i‡
	`deföed
(
TIMSK4
)

402 
OCR4A
 = 
o¸
;

403 
timî4_toggÀ_cou¡
 = 
toggÀ_cou¡
;

404 
	`bôWrôe
(
TIMSK4
, 
OCIE4A
, 1);

408 #i‡
	`deföed
(
OCR5A
Ë&& deföed(
TIMSK5
Ë&& deföed(
OCIE5A
)

410 
OCR5A
 = 
o¸
;

411 
timî5_toggÀ_cou¡
 = 
toggÀ_cou¡
;

412 
	`bôWrôe
(
TIMSK5
, 
OCIE5A
, 1);

418 
	}
}

424 
	$dißbÀTimî
(
uöt8_t
 
_timî
)

426 
_timî
)

429 #i‡
	`deföed
(
TIMSK0
)

430 
TIMSK0
 = 0;

431 #ñi‡
	`deföed
(
TIMSK
)

432 
TIMSK
 = 0;

436 #i‡
	`deföed
(
TIMSK1
Ë&& deföed(
OCIE1A
)

438 
	`bôWrôe
(
TIMSK1
, 
OCIE1A
, 0);

443 #i‡
	`deföed
(
TIMSK2
Ë&& deföed(
OCIE2A
)

444 
	`bôWrôe
(
TIMSK2
, 
OCIE2A
, 0);

446 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
WGM20
)

447 
TCCR2A
 = (1 << 
WGM20
);

449 #i‡
	`deföed
(
TCCR2B
Ë&& deföed(
CS22
)

450 
TCCR2B
 = (TCCR2B & 0b11111000Ë| (1 << 
CS22
);

452 #i‡
	`deföed
(
OCR2A
)

453 
OCR2A
 = 0;

457 #i‡
	`deföed
(
TIMSK3
)

459 
TIMSK3
 = 0;

463 #i‡
	`deföed
(
TIMSK4
)

465 
TIMSK4
 = 0;

469 #i‡
	`deföed
(
TIMSK5
)

471 
TIMSK5
 = 0;

475 
	}
}

478 
	$noT⁄e
(
uöt8_t
 
_pö
)

480 
öt8_t
 
_timî
 = -1;

482 
i
 = 0; i < 
AVAILABLE_TONE_PINS
; i++) {

483 i‡(
t⁄e_pös
[
i
] =
_pö
) {

484 
_timî
 = 
	`pgm_ªad_byã
(
t⁄e_pö_to_timî_PGM
 + 
i
);

485 
t⁄e_pös
[
i
] = 255;

489 
	`dißbÀTimî
(
_timî
);

491 
	`digôÆWrôe
(
_pö
, 0);

492 
	}
}

494 #ifde‡
USE_TIMER0


495 
	$ISR
(
TIMER0_COMPA_ve˘
)

497 i‡(
timî0_toggÀ_cou¡
 != 0)

500 *
timî0_pö_p‹t
 ^
timî0_pö_mask
;

502 i‡(
timî0_toggÀ_cou¡
 > 0)

503 
timî0_toggÀ_cou¡
--;

507 
	`dißbÀTimî
(0);

508 *
timî0_pö_p‹t
 &~(
timî0_pö_mask
);

510 
	}
}

514 #ifde‡
USE_TIMER1


515 
	$ISR
(
TIMER1_COMPA_ve˘
)

517 i‡(
timî1_toggÀ_cou¡
 != 0)

520 *
timî1_pö_p‹t
 ^
timî1_pö_mask
;

522 i‡(
timî1_toggÀ_cou¡
 > 0)

523 
timî1_toggÀ_cou¡
--;

527 
	`dißbÀTimî
(1);

528 *
timî1_pö_p‹t
 &~(
timî1_pö_mask
);

530 
	}
}

534 #ifde‡
USE_TIMER2


535 
	$ISR
(
TIMER2_COMPA_ve˘
)

538 i‡(
timî2_toggÀ_cou¡
 != 0)

541 *
timî2_pö_p‹t
 ^
timî2_pö_mask
;

543 i‡(
timî2_toggÀ_cou¡
 > 0)

544 
timî2_toggÀ_cou¡
--;

551 
	`noT⁄e
(
t⁄e_pös
[0]);

555 
	}
}

559 #ifde‡
USE_TIMER3


560 
	$ISR
(
TIMER3_COMPA_ve˘
)

562 i‡(
timî3_toggÀ_cou¡
 != 0)

565 *
timî3_pö_p‹t
 ^
timî3_pö_mask
;

567 i‡(
timî3_toggÀ_cou¡
 > 0)

568 
timî3_toggÀ_cou¡
--;

572 
	`dißbÀTimî
(3);

573 *
timî3_pö_p‹t
 &~(
timî3_pö_mask
);

575 
	}
}

579 #ifde‡
USE_TIMER4


580 
	$ISR
(
TIMER4_COMPA_ve˘
)

582 i‡(
timî4_toggÀ_cou¡
 != 0)

585 *
timî4_pö_p‹t
 ^
timî4_pö_mask
;

587 i‡(
timî4_toggÀ_cou¡
 > 0)

588 
timî4_toggÀ_cou¡
--;

592 
	`dißbÀTimî
(4);

593 *
timî4_pö_p‹t
 &~(
timî4_pö_mask
);

595 
	}
}

599 #ifde‡
USE_TIMER5


600 
	$ISR
(
TIMER5_COMPA_ve˘
)

602 i‡(
timî5_toggÀ_cou¡
 != 0)

605 *
timî5_pö_p‹t
 ^
timî5_pö_mask
;

607 i‡(
timî5_toggÀ_cou¡
 > 0)

608 
timî5_toggÀ_cou¡
--;

612 
	`dißbÀTimî
(5);

613 *
timî5_pö_p‹t
 &~(
timî5_pö_mask
);

615 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/USBAPI.h

3 #i‚de‡
__USBAPI__


4 
	#__USBAPI__


	)

6 #i‡
deföed
(
USBCON
)

12 ˛as†
	cUSBDevi˚_


14 
	mpublic
:

15 
USBDevi˚_
();

16 
boﬁ
 
c⁄figuªd
();

18 
©èch
();

19 
dëach
();

20 
pﬁl
();

22 
USBDevi˚_
 
USBDevi˚
;

28 ˛as†
	cSîül_
 : 
public
 
Såóm


30 
¥iv©e
:

31 
rög_buf„r
 *
_cdc_rx_buf„r
;

32 
	mpublic
:

33 
begö
(
uöt16_t
 
baud_cou¡
);

34 
íd
();

36 
vútuÆ
 
avaûabÀ
();

37 
vútuÆ
 
ac˚±
();

38 
vútuÆ
 
≥ek
();

39 
vútuÆ
 
ªad
();

40 
vútuÆ
 
Êush
();

41 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
);

42 
usög
 
	mPröt
::
wrôe
;

43 
›î©‹
 
boﬁ
();

45 
Sîül_
 
Sîül
;

51 
	#MOUSE_LEFT
 1

	)

52 
	#MOUSE_RIGHT
 2

	)

53 
	#MOUSE_MIDDLE
 4

	)

54 
	#MOUSE_ALL
 (
MOUSE_LEFT
 | 
MOUSE_RIGHT
 | 
MOUSE_MIDDLE
)

	)

56 ˛as†
	cMou£_


58 
	m¥iv©e
:

59 
uöt8_t
 
_buâ⁄s
;

60 
buâ⁄s
(
uöt8_t
 
b
);

61 
	mpublic
:

62 
Mou£_
();

63 
begö
();

64 
íd
();

65 
˛ick
(
uöt8_t
 
b
 = 
MOUSE_LEFT
);

66 
move
(sig√d 
x
, sig√d 
y
, sig√d 
whìl
 = 0);

67 
¥ess
(
uöt8_t
 
b
 = 
MOUSE_LEFT
);

68 
ªÀa£
(
uöt8_t
 
b
 = 
MOUSE_LEFT
);

69 
boﬁ
 
isPªs£d
(
uöt8_t
 
b
 = 
MOUSE_LEFT
);

71 
Mou£_
 
Mou£
;

77 
	#KEY_LEFT_CTRL
 0x80

	)

78 
	#KEY_LEFT_SHIFT
 0x81

	)

79 
	#KEY_LEFT_ALT
 0x82

	)

80 
	#KEY_LEFT_GUI
 0x83

	)

81 
	#KEY_RIGHT_CTRL
 0x84

	)

82 
	#KEY_RIGHT_SHIFT
 0x85

	)

83 
	#KEY_RIGHT_ALT
 0x86

	)

84 
	#KEY_RIGHT_GUI
 0x87

	)

86 
	#KEY_UP_ARROW
 0xDA

	)

87 
	#KEY_DOWN_ARROW
 0xD9

	)

88 
	#KEY_LEFT_ARROW
 0xD8

	)

89 
	#KEY_RIGHT_ARROW
 0xD7

	)

90 
	#KEY_BACKSPACE
 0xB2

	)

91 
	#KEY_TAB
 0xB3

	)

92 
	#KEY_RETURN
 0xB0

	)

93 
	#KEY_ESC
 0xB1

	)

94 
	#KEY_INSERT
 0xD1

	)

95 
	#KEY_DELETE
 0xD4

	)

96 
	#KEY_PAGE_UP
 0xD3

	)

97 
	#KEY_PAGE_DOWN
 0xD6

	)

98 
	#KEY_HOME
 0xD2

	)

99 
	#KEY_END
 0xD5

	)

100 
	#KEY_CAPS_LOCK
 0xC1

	)

101 
	#KEY_F1
 0xC2

	)

102 
	#KEY_F2
 0xC3

	)

103 
	#KEY_F3
 0xC4

	)

104 
	#KEY_F4
 0xC5

	)

105 
	#KEY_F5
 0xC6

	)

106 
	#KEY_F6
 0xC7

	)

107 
	#KEY_F7
 0xC8

	)

108 
	#KEY_F8
 0xC9

	)

109 
	#KEY_F9
 0xCA

	)

110 
	#KEY_F10
 0xCB

	)

111 
	#KEY_F11
 0xCC

	)

112 
	#KEY_F12
 0xCD

	)

117 
uöt8_t
 
	mmodifõrs
;

118 
uöt8_t
 
	mª£rved
;

119 
uöt8_t
 
	mkeys
[6];

120 } 
	tKeyRï‹t
;

122 ˛as†
	cKeybﬂrd_
 : 
public
 
Pröt


124 
¥iv©e
:

125 
KeyRï‹t
 
_keyRï‹t
;

126 
£ndRï‹t
(
KeyRï‹t
* 
keys
);

127 
	mpublic
:

128 
Keybﬂrd_
();

129 
begö
();

130 
íd
();

131 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
 
k
);

132 
vútuÆ
 
size_t
 
¥ess
(
uöt8_t
 
k
);

133 
vútuÆ
 
size_t
 
ªÀa£
(
uöt8_t
 
k
);

134 
vútuÆ
 
ªÀa£AŒ
();

136 
Keybﬂrd_
 
Keybﬂrd
;

144 
uöt8_t
 
	mbmReque°Ty≥
;

145 
uöt8_t
 
	mbReque°
;

146 
uöt8_t
 
	mwVÆueL
;

147 
uöt8_t
 
	mwVÆueH
;

148 
uöt16_t
 
	mwIndex
;

149 
uöt16_t
 
	mwLígth
;

150 } 
	tSëup
;

156 
HID_GëI¡îÁ˚
(
uöt8_t
* 
öãrÁ˚Num
);

157 
HID_GëDes¸ùt‹
(
i
);

158 
boﬁ
 
HID_Sëup
(
Sëup
& 
£tup
);

159 
HID_SídRï‹t
(
uöt8_t
 
id
, c⁄° * 
d©a
, 
Àn
);

165 
MSC_GëI¡îÁ˚
(
uöt8_t
* 
öãrÁ˚Num
);

166 
MSC_GëDes¸ùt‹
(
i
);

167 
boﬁ
 
MSC_Sëup
(
Sëup
& 
£tup
);

168 
boﬁ
 
MSC_D©a
(
uöt8_t
 
rx
,uöt8_à
tx
);

174 
CDC_GëI¡îÁ˚
(
uöt8_t
* 
öãrÁ˚Num
);

175 
CDC_GëDes¸ùt‹
(
i
);

176 
boﬁ
 
CDC_Sëup
(
Sëup
& 
£tup
);

181 
	#TRANSFER_PGM
 0x80

	)

182 
	#TRANSFER_RELEASE
 0x40

	)

183 
	#TRANSFER_ZERO
 0x20

	)

185 
USB_SídC⁄åﬁ
(
uöt8_t
 
Êags
, c⁄° * 
d
, 
Àn
);

186 
USB_RecvC⁄åﬁ
(* 
d
, 
Àn
);

188 
uöt8_t
 
USB_AvaûabÀ
(uöt8_à
ï
);

189 
USB_Síd
(
uöt8_t
 
ï
, c⁄° * 
d©a
, 
Àn
);

190 
USB_Recv
(
uöt8_t
 
ï
, * 
d©a
, 
Àn
);

191 
USB_Recv
(
uöt8_t
 
ï
);

192 
USB_Flush
(
uöt8_t
 
ï
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/USBCore.cpp

19 
	~"Pœtf‹m.h
"

20 
	~"USBAPI.h
"

21 
	~"USBDesc.h
"

23 #i‡
deföed
(
USBCON
)

25 
	#EP_TYPE_CONTROL
 0x00

	)

26 
	#EP_TYPE_BULK_IN
 0x81

	)

27 
	#EP_TYPE_BULK_OUT
 0x80

	)

28 
	#EP_TYPE_INTERRUPT_IN
 0xC1

	)

29 
	#EP_TYPE_INTERRUPT_OUT
 0xC0

	)

30 
	#EP_TYPE_ISOCHRONOUS_IN
 0x41

	)

31 
	#EP_TYPE_ISOCHRONOUS_OUT
 0x40

	)

34 
	#TX_RX_LED_PULSE_MS
 100

	)

35 vﬁ©ûê
u8
 
	gTxLEDPul£
;

36 vﬁ©ûê
u8
 
	gRxLEDPul£
;

41 c⁄° 
u16
 
STRING_LANGUAGE
[] 
PROGMEM
;

42 c⁄° 
u16
 
STRING_IPRODUCT
[] 
PROGMEM
;

43 c⁄° 
u16
 
STRING_IMANUFACTURER
[] 
PROGMEM
;

44 c⁄° 
Devi˚Des¸ùt‹
 
USB_Devi˚Des¸ùt‹
 
PROGMEM
;

45 c⁄° 
Devi˚Des¸ùt‹
 
USB_Devi˚Des¸ùt‹A
 
PROGMEM
;

47 c⁄° 
u16
 
	gSTRING_LANGUAGE
[2] = {

52 c⁄° 
u16
 
	gSTRING_IPRODUCT
[17] = {

54 #i‡
USB_PID
 == 0x8036

56 #ñi‡
USB_PID
 == 0x8037

58 #ñi‡
USB_PID
 == 0x803C

60 #ñi‡
USB_PID
 == 0x9208

67 c⁄° 
u16
 
	gSTRING_IMANUFACTURER
[12] = {

69 #i‡
USB_VID
 == 0x2341

71 #ñi‡
USB_VID
 == 0x1b4f

78 #ifde‡
CDC_ENABLED


79 
	#DEVICE_CLASS
 0x02

	)

81 
	#DEVICE_CLASS
 0x00

	)

85 c⁄° 
Devi˚Des¸ùt‹
 
	gUSB_Devi˚Des¸ùt‹
 =

86 
D_DEVICE
(0x00,0x00,0x00,64,
USB_VID
,
USB_PID
,0x100,
IMANUFACTURER
,
IPRODUCT
,0,1);

88 c⁄° 
Devi˚Des¸ùt‹
 
	gUSB_Devi˚Des¸ùt‹A
 =

89 
D_DEVICE
(
DEVICE_CLASS
,0x00,0x00,64,
USB_VID
,
USB_PID
,0x100,
IMANUFACTURER
,
IPRODUCT
,0,1);

94 vﬁ©ûê
u8
 
	g_usbC⁄figuøti⁄
 = 0;

96 
ölöe
 
	$WaôIN
()

98 !(
UEINTX
 & (1<<
TXINI
)));

99 
	}
}

101 
ölöe
 
	$CÀ¨IN
()

103 
UEINTX
 = ~(1<<
TXINI
);

104 
	}
}

106 
ölöe
 
	$WaôOUT
()

108 !(
UEINTX
 & (1<<
RXOUTI
)))

110 
	}
}

112 
ölöe
 
u8
 
	$WaôF‹INOrOUT
()

114 !(
UEINTX
 & ((1<<
TXINI
)|(1<<
RXOUTI
))))

116  (
UEINTX
 & (1<<
RXOUTI
)) == 0;

117 
	}
}

119 
ölöe
 
	$CÀ¨OUT
()

121 
UEINTX
 = ~(1<<
RXOUTI
);

122 
	}
}

124 
	$Recv
(vﬁ©ûê
u8
* 
d©a
, u8 
cou¡
)

126 
cou¡
--)

127 *
d©a
++ = 
UEDATX
;

129 
RXLED1
;

130 
RxLEDPul£
 = 
TX_RX_LED_PULSE_MS
;

131 
	}
}

133 
ölöe
 
u8
 
	$Recv8
()

135 
RXLED1
;

136 
RxLEDPul£
 = 
TX_RX_LED_PULSE_MS
;

138  
UEDATX
;

139 
	}
}

141 
ölöe
 
	$Síd8
(
u8
 
d
)

143 
UEDATX
 = 
d
;

144 
	}
}

146 
ölöe
 
	$SëEP
(
u8
 
ï
)

148 
UENUM
 = 
ï
;

149 
	}
}

151 
ölöe
 
u8
 
	$FifoByãCou¡
()

153  
UEBCLX
;

154 
	}
}

156 
ölöe
 
u8
 
	$Re˚ivedSëupI¡
()

158  
UEINTX
 & (1<<
RXSTPI
);

159 
	}
}

161 
ölöe
 
	$CÀ¨SëupI¡
()

163 
UEINTX
 = ~((1<<
RXSTPI
Ë| (1<<
RXOUTI
Ë| (1<<
TXINI
));

164 
	}
}

166 
ölöe
 
	$SèŒ
()

168 
UECONX
 = (1<<
STALLRQ
Ë| (1<<
EPEN
);

169 
	}
}

171 
ölöe
 
u8
 
	$RódWrôeAŒowed
()

173  
UEINTX
 & (1<<
RWAL
);

174 
	}
}

176 
ölöe
 
u8
 
	$SèŒed
()

178  
UEINTX
 & (1<<
STALLEDI
);

179 
	}
}

181 
ölöe
 
u8
 
	$FifoFªe
()

183  
UEINTX
 & (1<<
FIFOCON
);

184 
	}
}

186 
ölöe
 
	$Rñó£RX
()

188 
UEINTX
 = 0x6B;

189 
	}
}

191 
ölöe
 
	$Rñó£TX
()

193 
UEINTX
 = 0x3A;

194 
	}
}

196 
ölöe
 
u8
 
	$FømeNumbî
()

198  
UDFNUML
;

199 
	}
}

204 
u8
 
	$USBGëC⁄figuøti⁄
()

206  
_usbC⁄figuøti⁄
;

207 
	}
}

209 
	#USB_RECV_TIMEOUT


	)

210 ˛as†
	cLockEP


212 
u8
 
	m_§eg
;

213 
	mpublic
:

214 
	$LockEP
(
u8
 
ï
Ë: 
	$_§eg
(
SREG
)

216 
	`˛i
();

217 
	`SëEP
(
ï
 & 7);

219 ~
	$LockEP
()

221 
SREG
 = 
_§eg
;

222 
	}
}

226 
u8
 
	$USB_AvaûabÀ
(
u8
 
ï
)

228 
LockEP
 
	`lock
(
ï
);

229  
	`FifoByãCou¡
();

230 
	}
}

234 
	$USB_Recv
(
u8
 
ï
, * 
d
, 
Àn
)

236 i‡(!
_usbC⁄figuøti⁄
 || 
Àn
 < 0)

239 
LockEP
 
	`lock
(
ï
);

240 
u8
 
n
 = 
	`FifoByãCou¡
();

241 
Àn
 = 
	`mö
(
n
,len);

242 
n
 = 
Àn
;

243 
u8
* 
d°
 = (u8*)
d
;

244 
n
--)

245 *
d°
++ = 
	`Recv8
();

246 i‡(
Àn
 && !
	`FifoByãCou¡
())

247 
	`Rñó£RX
();

249  
Àn
;

250 
	}
}

253 
	$USB_Recv
(
u8
 
ï
)

255 
u8
 
c
;

256 i‡(
	`USB_Recv
(
ï
,&
c
,1) != 1)

258  
c
;

259 
	}
}

262 
u8
 
	$USB_SídS∑˚
(
u8
 
ï
)

264 
LockEP
 
	`lock
(
ï
);

265 i‡(!
	`RódWrôeAŒowed
())

267  64 - 
	`FifoByãCou¡
();

268 
	}
}

271 
	$USB_Síd
(
u8
 
ï
, c⁄° * 
d
, 
Àn
)

273 i‡(!
_usbC⁄figuøti⁄
)

276 
r
 = 
Àn
;

277 c⁄° 
u8
* 
d©a
 = (c⁄° u8*)
d
;

278 
u8
 
zîo
 = 
ï
 & 
TRANSFER_ZERO
;

279 
u8
 
timeout
 = 250;

280 
Àn
)

282 
u8
 
n
 = 
	`USB_SídS∑˚
(
ï
);

283 i‡(
n
 == 0)

285 i‡(!(--
timeout
))

287 
	`dñay
(1);

291 i‡(
n
 > 
Àn
)

292 
n
 = 
Àn
;

293 
Àn
 -
n
;

295 
LockEP
 
	`lock
(
ï
);

296 i‡(
ï
 & 
TRANSFER_ZERO
)

298 
n
--)

299 
	`Síd8
(0);

301 i‡(
ï
 & 
TRANSFER_PGM
)

303 
n
--)

304 
	`Síd8
(
	`pgm_ªad_byã
(
d©a
++));

308 
n
--)

309 
	`Síd8
(*
d©a
++);

311 i‡(!
	`RódWrôeAŒowed
(Ë|| ((
Àn
 =0Ë&& (
ï
 & 
TRANSFER_RELEASE
)))

312 
	`Rñó£TX
();

315 
TXLED1
;

316 
TxLEDPul£
 = 
TX_RX_LED_PULSE_MS
;

317  
r
;

318 
	}
}

320 c⁄° 
u8
 
_öôEndpoöts
[] 
PROGMEM
;

321 c⁄° 
u8
 
	g_öôEndpoöts
[] =

325 #ifde‡
CDC_ENABLED


326 
EP_TYPE_INTERRUPT_IN
,

327 
EP_TYPE_BULK_OUT
,

328 
EP_TYPE_BULK_IN
,

331 #ifde‡
HID_ENABLED


332 
EP_TYPE_INTERRUPT_IN


336 
	#EP_SINGLE_64
 0x32

337 
	#EP_DOUBLE_64
 0x36

338 

	)

340 
	$InôEP
(
u8
 
ödex
, u8 
ty≥
, u8 
size
)

342 
UENUM
 = 
ödex
;

343 
UECONX
 = 1;

344 
UECFG0X
 = 
ty≥
;

345 
UECFG1X
 = 
size
;

346 
	}
}

349 
	$InôEndpoöts
()

351 
u8
 
i
 = 1; i < (
_öôEndpoöts
); i++)

353 
UENUM
 = 
i
;

354 
UECONX
 = 1;

355 
UECFG0X
 = 
	`pgm_ªad_byã
(
_öôEndpoöts
+
i
);

356 
UECFG1X
 = 
EP_DOUBLE_64
;

358 
UERST
 = 0x7E;

359 
UERST
 = 0;

360 
	}
}

364 
boﬁ
 
	$CœssI¡îÁ˚Reque°
(
Sëup
& 
£tup
)

366 
u8
 
i
 = 
£tup
.
wIndex
;

368 #ifde‡
CDC_ENABLED


369 i‡(
CDC_ACM_INTERFACE
 =
i
)

370  
	`CDC_Sëup
(
£tup
);

373 #ifde‡
HID_ENABLED


374 i‡(
HID_INTERFACE
 =
i
)

375  
	`HID_Sëup
(
£tup
);

377  
Ál£
;

378 
	}
}

380 
	g_cm¨k
;

381 
	g_˚nd
;

382 
	$InôC⁄åﬁ
(
íd
)

384 
	`SëEP
(0);

385 
_cm¨k
 = 0;

386 
_˚nd
 = 
íd
;

387 
	}
}

390 
boﬁ
 
	$SídC⁄åﬁ
(
u8
 
d
)

392 i‡(
_cm¨k
 < 
_˚nd
)

394 i‡(!
	`WaôF‹INOrOUT
())

395  
Ál£
;

396 
	`Síd8
(
d
);

397 i‡(!((
_cm¨k
 + 1) & 0x3F))

398 
	`CÀ¨IN
();

400 
_cm¨k
++;

401  
åue
;

402 
	}
};

405 
	$USB_SídC⁄åﬁ
(
u8
 
Êags
, c⁄° * 
d
, 
Àn
)

407 
£¡
 = 
Àn
;

408 c⁄° 
u8
* 
d©a
 = (c⁄° u8*)
d
;

409 
boﬁ
 
pgm
 = 
Êags
 & 
TRANSFER_PGM
;

410 
Àn
--)

412 
u8
 
c
 = 
pgm
 ? 
	`pgm_ªad_byã
(
d©a
++) : *data++;

413 i‡(!
	`SídC⁄åﬁ
(
c
))

416  
£¡
;

417 
	}
}

422 
	$USB_RecvC⁄åﬁ
(* 
d
, 
Àn
)

424 
	`WaôOUT
();

425 
	`Recv
((
u8
*)
d
,
Àn
);

426 
	`CÀ¨OUT
();

427  
Àn
;

428 
	}
}

430 
	$SídI¡îÁ˚s
()

432 
tŸÆ
 = 0;

433 
u8
 
öãrÁ˚s
 = 0;

435 #ifde‡
CDC_ENABLED


436 
tŸÆ
 = 
	`CDC_GëI¡îÁ˚
(&
öãrÁ˚s
);

439 #ifde‡
HID_ENABLED


440 
tŸÆ
 +
	`HID_GëI¡îÁ˚
(&
öãrÁ˚s
);

443  
öãrÁ˚s
;

444 
	}
}

450 
boﬁ
 
	$SídC⁄figuøti⁄
(
maxÀn
)

453 
	`InôC⁄åﬁ
(0);

454 
öãrÁ˚s
 = 
	`SídI¡îÁ˚s
();

455 
C⁄figDes¸ùt‹
 
c⁄fig
 = 
	`D_CONFIG
(
_cm¨k
 + (C⁄figDes¸ùt‹),
öãrÁ˚s
);

458 
	`InôC⁄åﬁ
(
maxÀn
);

459 
	`USB_SídC⁄åﬁ
(0,&
c⁄fig
,(
C⁄figDes¸ùt‹
));

460 
	`SídI¡îÁ˚s
();

461  
åue
;

462 
	}
}

464 
u8
 
	g_cdcComposôe
 = 0;

467 
boﬁ
 
	$SídDes¸ùt‹
(
Sëup
& 
£tup
)

469 
u8
 
t
 = 
£tup
.
wVÆueH
;

470 i‡(
USB_CONFIGURATION_DESCRIPTOR_TYPE
 =
t
)

471  
	`SídC⁄figuøti⁄
(
£tup
.
wLígth
);

473 
	`InôC⁄åﬁ
(
£tup
.
wLígth
);

474 #ifde‡
HID_ENABLED


475 i‡(
HID_REPORT_DESCRIPTOR_TYPE
 =
t
)

476  
	`HID_GëDes¸ùt‹
(
t
);

479 
u8
 
desc_Àngth
 = 0;

480 c⁄° 
u8
* 
desc_addr
 = 0;

481 i‡(
USB_DEVICE_DESCRIPTOR_TYPE
 =
t
)

483 i‡(
£tup
.
wLígth
 == 8)

484 
_cdcComposôe
 = 1;

485 
desc_addr
 = 
_cdcComposôe
 ? (c⁄° 
u8
*)&
USB_Devi˚Des¸ùt‹A
 : (c⁄° u8*)&
USB_Devi˚Des¸ùt‹
;

487 i‡(
USB_STRING_DESCRIPTOR_TYPE
 =
t
)

489 i‡(
£tup
.
wVÆueL
 == 0)

490 
desc_addr
 = (c⁄° 
u8
*)&
STRING_LANGUAGE
;

491 i‡(
£tup
.
wVÆueL
 =
IPRODUCT
)

492 
desc_addr
 = (c⁄° 
u8
*)&
STRING_IPRODUCT
;

493 i‡(
£tup
.
wVÆueL
 =
IMANUFACTURER
)

494 
desc_addr
 = (c⁄° 
u8
*)&
STRING_IMANUFACTURER
;

496  
Ál£
;

499 i‡(
desc_addr
 == 0)

500  
Ál£
;

501 i‡(
desc_Àngth
 == 0)

502 
desc_Àngth
 = 
	`pgm_ªad_byã
(
desc_addr
);

504 
	`USB_SídC⁄åﬁ
(
TRANSFER_PGM
,
desc_addr
,
desc_Àngth
);

505  
åue
;

506 
	}
}

509 
	$ISR
(
USB_COM_ve˘
)

511 
	`SëEP
(0);

512 i‡(!
	`Re˚ivedSëupI¡
())

515 
Sëup
 
£tup
;

516 
	`Recv
((
u8
*)&
£tup
,8);

517 
	`CÀ¨SëupI¡
();

519 
u8
 
ªque°Ty≥
 = 
£tup
.
bmReque°Ty≥
;

520 i‡(
ªque°Ty≥
 & 
REQUEST_DEVICETOHOST
)

521 
	`WaôIN
();

523 
	`CÀ¨IN
();

525 
boﬁ
 
ok
 = 
åue
;

526 i‡(
REQUEST_STANDARD
 =(
ªque°Ty≥
 & 
REQUEST_TYPE
))

529 
u8
 
r
 = 
£tup
.
bReque°
;

530 i‡(
GET_STATUS
 =
r
)

532 
	`Síd8
(0);

533 
	`Síd8
(0);

535 i‡(
CLEAR_FEATURE
 =
r
)

538 i‡(
SET_FEATURE
 =
r
)

541 i‡(
SET_ADDRESS
 =
r
)

543 
	`WaôIN
();

544 
UDADDR
 = 
£tup
.
wVÆueL
 | (1<<
ADDEN
);

546 i‡(
GET_DESCRIPTOR
 =
r
)

548 
ok
 = 
	`SídDes¸ùt‹
(
£tup
);

550 i‡(
SET_DESCRIPTOR
 =
r
)

552 
ok
 = 
Ál£
;

554 i‡(
GET_CONFIGURATION
 =
r
)

556 
	`Síd8
(1);

558 i‡(
SET_CONFIGURATION
 =
r
)

560 i‡(
REQUEST_DEVICE
 =(
ªque°Ty≥
 & 
REQUEST_RECIPIENT
))

562 
	`InôEndpoöts
();

563 
_usbC⁄figuøti⁄
 = 
£tup
.
wVÆueL
;

565 
ok
 = 
Ál£
;

567 i‡(
GET_INTERFACE
 =
r
)

570 i‡(
SET_INTERFACE
 =
r
)

576 
	`InôC⁄åﬁ
(
£tup
.
wLígth
);

577 
ok
 = 
	`CœssI¡îÁ˚Reque°
(
£tup
);

580 i‡(
ok
)

581 
	`CÀ¨IN
();

584 
	`SèŒ
();

586 
	}
}

588 
	$USB_Flush
(
u8
 
ï
)

590 
	`SëEP
(
ï
);

591 i‡(
	`FifoByãCou¡
())

592 
	`Rñó£TX
();

593 
	}
}

596 
	$ISR
(
USB_GEN_ve˘
)

598 
u8
 
udöt
 = 
UDINT
;

599 
UDINT
 = 0;

602 i‡(
udöt
 & (1<<
EORSTI
))

604 
	`InôEP
(0,
EP_TYPE_CONTROL
,
EP_SINGLE_64
);

605 
_usbC⁄figuøti⁄
 = 0;

606 
UEIENX
 = 1 << 
RXSTPE
;

610 i‡(
udöt
 & (1<<
SOFI
))

612 #ifde‡
CDC_ENABLED


613 
	`USB_Flush
(
CDC_TX
);

614 i‡(
	`USB_AvaûabÀ
(
CDC_RX
))

615 
Sîül
.
	`ac˚±
();

619 i‡(
TxLEDPul£
 && !(--TxLEDPulse))

620 
TXLED0
;

621 i‡(
RxLEDPul£
 && !(--RxLEDPulse))

622 
RXLED0
;

624 
	}
}

628 
u8
 
	$USBC⁄√˘ed
()

630 
u8
 
f
 = 
UDFNUML
;

631 
	`dñay
(3);

632  
f
 !
UDFNUML
;

633 
	}
}

638 
USBDevi˚_
 
	gUSBDevi˚
;

640 
	gUSBDevi˚_
::
	$USBDevi˚_
()

642 
	}
}

644 
USBDevi˚_
::
	$©èch
()

646 
_usbC⁄figuøti⁄
 = 0;

647 
UHWCON
 = 0x01;

648 
USBCON
 = (1<<
USBE
)|(1<<
FRZCLK
);

649 #i‡
F_CPU
 == 16000000UL

650 
PLLCSR
 = 0x12;

651 #ñi‡
F_CPU
 == 8000000UL

652 
PLLCSR
 = 0x02;

654 !(
PLLCSR
 & (1<<
PLOCK
)))

660 
	`dñay
(1);

662 
USBCON
 = ((1<<
USBE
)|(1<<
OTGPADE
));

663 
UDIEN
 = (1<<
EORSTE
)|(1<<
SOFE
);

664 
UDCON
 = 0;

666 
TX_RX_LED_INIT
;

667 
	}
}

669 
	gUSBDevi˚_
::
	$dëach
()

671 
	}
}

675 
boﬁ
 
USBDevi˚_
::
	$c⁄figuªd
()

677  
_usbC⁄figuøti⁄
;

678 
	}
}

680 
	gUSBDevi˚_
::
	$pﬁl
()

682 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/USBCore.h

18 #i‚de‡
__USBCORE_H__


19 
	#__USBCORE_H__


	)

22 
	#GET_STATUS
 0

	)

23 
	#CLEAR_FEATURE
 1

	)

24 
	#SET_FEATURE
 3

	)

25 
	#SET_ADDRESS
 5

	)

26 
	#GET_DESCRIPTOR
 6

	)

27 
	#SET_DESCRIPTOR
 7

	)

28 
	#GET_CONFIGURATION
 8

	)

29 
	#SET_CONFIGURATION
 9

	)

30 
	#GET_INTERFACE
 10

	)

31 
	#SET_INTERFACE
 11

	)

35 
	#REQUEST_HOSTTODEVICE
 0x00

	)

36 
	#REQUEST_DEVICETOHOST
 0x80

	)

37 
	#REQUEST_DIRECTION
 0x80

	)

39 
	#REQUEST_STANDARD
 0x00

	)

40 
	#REQUEST_CLASS
 0x20

	)

41 
	#REQUEST_VENDOR
 0x40

	)

42 
	#REQUEST_TYPE
 0x60

	)

44 
	#REQUEST_DEVICE
 0x00

	)

45 
	#REQUEST_INTERFACE
 0x01

	)

46 
	#REQUEST_ENDPOINT
 0x02

	)

47 
	#REQUEST_OTHER
 0x03

	)

48 
	#REQUEST_RECIPIENT
 0x03

	)

50 
	#REQUEST_DEVICETOHOST_CLASS_INTERFACE
 (
REQUEST_DEVICETOHOST
 + 
REQUEST_CLASS
 + 
REQUEST_INTERFACE
)

	)

51 
	#REQUEST_HOSTTODEVICE_CLASS_INTERFACE
 (
REQUEST_HOSTTODEVICE
 + 
REQUEST_CLASS
 + 
REQUEST_INTERFACE
)

	)

55 
	#CDC_SET_LINE_CODING
 0x20

	)

56 
	#CDC_GET_LINE_CODING
 0x21

	)

57 
	#CDC_SET_CONTROL_LINE_STATE
 0x22

	)

59 
	#MSC_RESET
 0xFF

	)

60 
	#MSC_GET_MAX_LUN
 0xFE

	)

62 
	#HID_GET_REPORT
 0x01

	)

63 
	#HID_GET_IDLE
 0x02

	)

64 
	#HID_GET_PROTOCOL
 0x03

	)

65 
	#HID_SET_REPORT
 0x09

	)

66 
	#HID_SET_IDLE
 0x0A

	)

67 
	#HID_SET_PROTOCOL
 0x0B

	)

71 
	#USB_DEVICE_DESC_SIZE
 18

	)

72 
	#USB_CONFIGUARTION_DESC_SIZE
 9

	)

73 
	#USB_INTERFACE_DESC_SIZE
 9

	)

74 
	#USB_ENDPOINT_DESC_SIZE
 7

	)

76 
	#USB_DEVICE_DESCRIPTOR_TYPE
 1

	)

77 
	#USB_CONFIGURATION_DESCRIPTOR_TYPE
 2

	)

78 
	#USB_STRING_DESCRIPTOR_TYPE
 3

	)

79 
	#USB_INTERFACE_DESCRIPTOR_TYPE
 4

	)

80 
	#USB_ENDPOINT_DESCRIPTOR_TYPE
 5

	)

82 
	#USB_DEVICE_CLASS_COMMUNICATIONS
 0x02

	)

83 
	#USB_DEVICE_CLASS_HUMAN_INTERFACE
 0x03

	)

84 
	#USB_DEVICE_CLASS_STORAGE
 0x08

	)

85 
	#USB_DEVICE_CLASS_VENDOR_SPECIFIC
 0xFF

	)

87 
	#USB_CONFIG_POWERED_MASK
 0x40

	)

88 
	#USB_CONFIG_BUS_POWERED
 0x80

	)

89 
	#USB_CONFIG_SELF_POWERED
 0xC0

	)

90 
	#USB_CONFIG_REMOTE_WAKEUP
 0x20

	)

93 
	#USB_CONFIG_POWER_MA
(
mA
Ë((mA)/2)

	)

96 
	#USB_ENDPOINT_DIRECTION_MASK
 0x80

	)

97 
	#USB_ENDPOINT_OUT
(
addr
Ë(◊ddrË| 0x00)

	)

98 
	#USB_ENDPOINT_IN
(
addr
Ë(◊ddrË| 0x80)

	)

100 
	#USB_ENDPOINT_TYPE_MASK
 0x03

	)

101 
	#USB_ENDPOINT_TYPE_CONTROL
 0x00

	)

102 
	#USB_ENDPOINT_TYPE_ISOCHRONOUS
 0x01

	)

103 
	#USB_ENDPOINT_TYPE_BULK
 0x02

	)

104 
	#USB_ENDPOINT_TYPE_INTERRUPT
 0x03

	)

106 
	#TOBYTES
(
x
Ë((xË& 0xFF),(((xË>> 8Ë& 0xFF)

	)

108 
	#CDC_V1_10
 0x0110

	)

109 
	#CDC_COMMUNICATION_INTERFACE_CLASS
 0x02

	)

111 
	#CDC_CALL_MANAGEMENT
 0x01

	)

112 
	#CDC_ABSTRACT_CONTROL_MODEL
 0x02

	)

113 
	#CDC_HEADER
 0x00

	)

114 
	#CDC_ABSTRACT_CONTROL_MANAGEMENT
 0x02

	)

115 
	#CDC_UNION
 0x06

	)

116 
	#CDC_CS_INTERFACE
 0x24

	)

117 
	#CDC_CS_ENDPOINT
 0x25

	)

118 
	#CDC_DATA_INTERFACE_CLASS
 0x0A

	)

120 
	#MSC_SUBCLASS_SCSI
 0x06

	)

121 
	#MSC_PROTOCOL_BULK_ONLY
 0x50

	)

123 
	#HID_HID_DESCRIPTOR_TYPE
 0x21

	)

124 
	#HID_REPORT_DESCRIPTOR_TYPE
 0x22

	)

125 
	#HID_PHYSICAL_DESCRIPTOR_TYPE
 0x23

	)

130 
u8
 
	mÀn
;

131 
u8
 
	mdty≥
;

132 
u16
 
	musbVîsi⁄
;

133 
u8
 
	mdevi˚Cœss
;

134 
u8
 
	mdevi˚SubCœss
;

135 
u8
 
	mdevi˚PrŸocﬁ
;

136 
u8
 
	m∑ckëSize0
;

137 
u16
 
	midVíd‹
;

138 
u16
 
	midProdu˘
;

139 
u16
 
	mdevi˚Vîsi⁄
;

140 
u8
 
	miM™uÁ˘uªr
;

141 
u8
 
	miProdu˘
;

142 
u8
 
	miSîülNumbî
;

143 
u8
 
	mbNumC⁄figuøti⁄s
;

144 } 
	tDevi˚Des¸ùt‹
;

148 
u8
 
	mÀn
;

149 
u8
 
	mdty≥
;

150 
u16
 
	m˛í
;

151 
u8
 
	mnumI¡îÁ˚s
;

152 
u8
 
	mc⁄fig
;

153 
u8
 
	mic⁄fig
;

154 
u8
 
	m©åibuãs
;

155 
u8
 
	mmaxPowî
;

156 } 
	tC⁄figDes¸ùt‹
;

163 
u8
 
	mÀn
;

164 
u8
 
	mdty≥
;

165 
u8
 
	mnumbî
;

166 
u8
 
	mÆã∫©e
;

167 
u8
 
	mnumEndpoöts
;

168 
u8
 
	möãrÁ˚Cœss
;

169 
u8
 
	möãrÁ˚SubCœss
;

170 
u8
 
	m¥Ÿocﬁ
;

171 
u8
 
	miI¡îÁ˚
;

172 } 
	tI¡îÁ˚Des¸ùt‹
;

177 
u8
 
	mÀn
;

178 
u8
 
	mdty≥
;

179 
u8
 
	maddr
;

180 
u8
 
	m©å
;

181 
u16
 
	m∑ckëSize
;

182 
u8
 
	möãrvÆ
;

183 } 
	tEndpoötDes¸ùt‹
;

189 
u8
 
	mÀn
;

190 
u8
 
	mdty≥
;

191 
u8
 
	mfú°I¡îÁ˚
;

192 
u8
 
	möãrÁ˚Cou¡
;

193 
u8
 
	mfun˘i⁄Cœss
;

194 
u8
 
	mfu¡i⁄SubCœss
;

195 
u8
 
	mfun˘i⁄PrŸocﬁ
;

196 
u8
 
	miI¡îÁ˚
;

197 } 
	tIADDes¸ùt‹
;

202 
u8
 
	mÀn
;

203 
u8
 
	mdty≥
;

204 
u8
 
	msubty≥
;

205 
u8
 
	md0
;

206 
u8
 
	md1
;

207 } 
	tCDCCSI¡îÁ˚Des¸ùt‹
;

211 
u8
 
	mÀn
;

212 
u8
 
	mdty≥
;

213 
u8
 
	msubty≥
;

214 
u8
 
	md0
;

215 } 
	tCDCCSI¡îÁ˚Des¸ùt‹4
;

219 
u8
 
	mÀn
;

220 
u8
 
	mdty≥
;

221 
u8
 
	msubty≥
;

222 
u8
 
	mbmC≠abûôõs
;

223 
u8
 
	mbD©aI¡îÁ˚
;

224 } 
	tCMFun˘i⁄ÆDes¸ùt‹
;

228 
u8
 
	mÀn
;

229 
u8
 
	mdty≥
;

230 
u8
 
	msubty≥
;

231 
u8
 
	mbmC≠abûôõs
;

232 } 
	tACMFun˘i⁄ÆDes¸ùt‹
;

237 
IADDes¸ùt‹
 
	müd
;

240 
I¡îÁ˚Des¸ùt‹
 
	mcif
;

241 
CDCCSI¡îÁ˚Des¸ùt‹
 
	mhódî
;

242 
CMFun˘i⁄ÆDes¸ùt‹
 
	mˇŒM™agemít
;

243 
ACMFun˘i⁄ÆDes¸ùt‹
 
	mc⁄åﬁM™agemít
;

244 
CDCCSI¡îÁ˚Des¸ùt‹
 
	mfun˘i⁄ÆDes¸ùt‹
;

245 
EndpoötDes¸ùt‹
 
	mcifö
;

248 
I¡îÁ˚Des¸ùt‹
 
	mdif
;

249 
EndpoötDes¸ùt‹
 
	mö
;

250 
EndpoötDes¸ùt‹
 
	mout
;

251 } 
	tCDCDes¸ùt‹
;

255 
I¡îÁ˚Des¸ùt‹
 
	mmsc
;

256 
EndpoötDes¸ùt‹
 
	mö
;

257 
EndpoötDes¸ùt‹
 
	mout
;

258 } 
	tMSCDes¸ùt‹
;

262 
u8
 
	mÀn
;

263 
u8
 
	mdty≥
;

264 
u8
 
	maddr
;

265 
u8
 
	mvîsi⁄L
;

266 
u8
 
	mvîsi⁄H
;

267 
u8
 
	mcou¡ry
;

268 
u8
 
	mdes˘y≥
;

269 
u8
 
	mdescLíL
;

270 
u8
 
	mdescLíH
;

271 } 
	tHIDDescDes¸ùt‹
;

275 
I¡îÁ˚Des¸ùt‹
 
	mhid
;

276 
HIDDescDes¸ùt‹
 
	mdesc
;

277 
EndpoötDes¸ùt‹
 
	mö
;

278 } 
	tHIDDes¸ùt‹
;

281 
	#D_DEVICE
(
_˛ass
,
_subCœss
,
_¥Ÿo
,
_∑ckëSize0
,
_vid
,
_pid
,
_vîsi⁄
,
_im
,
_ù
,
_is
,
_c⁄figs
) \

282 { 18, 1, 0x200, 
_˛ass
,
_subCœss
,
_¥Ÿo
,
_∑ckëSize0
,
_vid
,
_pid
,
_vîsi⁄
,
_im
,
_ù
,
_is
,
_c⁄figs
 }

	)

284 
	#D_CONFIG
(
_tŸÆLígth
,
_öãrÁ˚s
) \

285 { 9, 2, 
_tŸÆLígth
,
_öãrÁ˚s
, 1, 0, 
USB_CONFIG_BUS_POWERED
, 
	`USB_CONFIG_POWER_MA
(500Ë}

	)

287 
	#D_INTERFACE
(
_n
,
_numEndpoöts
,
_˛ass
,
_subCœss
,
_¥Ÿocﬁ
) \

288 { 9, 4, 
_n
, 0, 
_numEndpoöts
, 
_˛ass
,
_subCœss
, 
_¥Ÿocﬁ
, 0 }

	)

290 
	#D_ENDPOINT
(
_addr
,
_©å
,
_∑ckëSize
, 
_öãrvÆ
) \

291 { 7, 5, 
_addr
,
_©å
,
_∑ckëSize
, 
_öãrvÆ
 }

	)

293 
	#D_IAD
(
_fú°I¡îÁ˚
, 
_cou¡
, 
_˛ass
, 
_subCœss
, 
_¥Ÿocﬁ
) \

294 { 8, 11, 
_fú°I¡îÁ˚
, 
_cou¡
, 
_˛ass
, 
_subCœss
, 
_¥Ÿocﬁ
, 0 }

	)

296 
	#D_HIDREPORT
(
_des¸ùt‹Lígth
) \

297 { 9, 0x21, 0x1, 0x1, 0, 1, 0x22, 
_des¸ùt‹Lígth
, 0 }

	)

299 
	#D_CDCCS
(
_subty≥
,
_d0
,
_d1
Ë{ 5, 0x24, _subty≥, _d0, _d1 }

	)

300 
	#D_CDCCS4
(
_subty≥
,
_d0
Ë{ 4, 0x24, _subty≥, _d0 }

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/USBDesc.h

19 
	#CDC_ENABLED


	)

20 
	#HID_ENABLED


	)

23 #ifde‡
CDC_ENABLED


24 
	#CDC_INTERFACE_COUNT
 2

	)

25 
	#CDC_ENPOINT_COUNT
 3

	)

27 
	#CDC_INTERFACE_COUNT
 0

	)

28 
	#CDC_ENPOINT_COUNT
 0

	)

31 #ifde‡
HID_ENABLED


32 
	#HID_INTERFACE_COUNT
 1

	)

33 
	#HID_ENPOINT_COUNT
 1

	)

35 
	#HID_INTERFACE_COUNT
 0

	)

36 
	#HID_ENPOINT_COUNT
 0

	)

39 
	#CDC_ACM_INTERFACE
 0

40 
	#CDC_DATA_INTERFACE
 1

41 
	#CDC_FIRST_ENDPOINT
 1

	)

42 
	#CDC_ENDPOINT_ACM
 (
CDC_FIRST_ENDPOINT
)

43 
	#CDC_ENDPOINT_OUT
 (
CDC_FIRST_ENDPOINT
+1)

	)

44 
	#CDC_ENDPOINT_IN
 (
CDC_FIRST_ENDPOINT
+2)

	)

46 
	#HID_INTERFACE
 (
CDC_ACM_INTERFACE
 + 
CDC_INTERFACE_COUNT
)

47 
	#HID_FIRST_ENDPOINT
 (
CDC_FIRST_ENDPOINT
 + 
CDC_ENPOINT_COUNT
)

	)

48 
	#HID_ENDPOINT_INT
 (
HID_FIRST_ENDPOINT
)

	)

50 
	#INTERFACE_COUNT
 (
MSC_INTERFACE
 + 
MSC_INTERFACE_COUNT
)

	)

52 #ifde‡
CDC_ENABLED


53 
	#CDC_RX
 
CDC_ENDPOINT_OUT


	)

54 
	#CDC_TX
 
CDC_ENDPOINT_IN


	)

57 #ifde‡
HID_ENABLED


58 
	#HID_TX
 
HID_ENDPOINT_INT


	)

61 
	#IMANUFACTURER
 1

	)

62 
	#IPRODUCT
 2

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/Udp.h

35 #i‚de‡
udp_h


36 
	#udp_h


	)

38 
	~<Såóm.h
>

39 
	~<IPAddªss.h
>

41 ˛as†
	cUDP
 : 
public
 
Såóm
 {

43 
public
:

44 
vútuÆ
 
uöt8_t
 
begö
(
uöt16_t
) =0;

45 
vútuÆ
 
°›
() =0;

51 
vútuÆ
 
begöPackë
(
IPAddªss
 
ù
, 
uöt16_t
 
p‹t
) =0;

54 
vútuÆ
 
begöPackë
(c⁄° *
ho°
, 
uöt16_t
 
p‹t
) =0;

57 
vútuÆ
 
ídPackë
() =0;

59 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
) =0;

61 
vútuÆ
 
size_t
 
wrôe
(c⁄° 
uöt8_t
 *
buf„r
, size_à
size
) =0;

65 
vútuÆ
 
∑r£Packë
() =0;

67 
vútuÆ
 
avaûabÀ
() =0;

69 
vútuÆ
 
ªad
() =0;

72 
vútuÆ
 
ªad
(* 
buf„r
, 
size_t
 
Àn
) =0;

75 
vútuÆ
 
ªad
(* 
buf„r
, 
size_t
 
Àn
) =0;

77 
vútuÆ
 
≥ek
() =0;

78 
vútuÆ
 
Êush
() =0;

81 
vútuÆ
 
IPAddªss
 
ªmŸeIP
() =0;

83 
vútuÆ
 
uöt16_t
 
ªmŸeP‹t
() =0;

84 
	m¥Ÿe˘ed
:

85 
uöt8_t
* 
	$øwIPAddªss
(
IPAddªss
& 
addr
Ë{ áddr.
	`øw_addªss
(); };

86 
	}
};

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/WCharacter.h

20 #i‚de‡
Ch¨a˘î_h


21 
	#Ch¨a˘î_h


	)

23 
	~<˘y≥.h
>

26 
ölöe
 
boﬁón
 
	$isAÕhaNumîic
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

27 
ölöe
 
boﬁón
 
	$isAÕha
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
ölöe
 
boﬁón
 
	$isAscii
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

29 
ölöe
 
boﬁón
 
	$isWhôe•a˚
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

30 
ölöe
 
boﬁón
 
	$isC⁄åﬁ
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

31 
ölöe
 
boﬁón
 
	$isDigô
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

32 
ölöe
 
boﬁón
 
	$isGøph
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

33 
ölöe
 
boﬁón
 
	$isLowîCa£
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

34 
ölöe
 
boﬁón
 
	$isPröèbÀ
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

35 
ölöe
 
boﬁón
 
	$isPun˘
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

36 
ölöe
 
boﬁón
 
	$isS∑˚
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

37 
ölöe
 
boﬁón
 
	$isUµîCa£
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

38 
ölöe
 
boﬁón
 
	$isHexadecimÆDigô
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

39 
ölöe
 
	$toAscii
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

40 
ölöe
 
	$toLowîCa£
(
c
Ë
	`__©åibuã__
((
Æways_ölöe
));

41 
ölöe
 
	$toUµîCa£
(
c
)
	`__©åibuã__
((
Æways_ölöe
));

46 
ölöe
 
boﬁón
 
	$isAÕhaNumîic
(
c
)

48  ( 
	`iß um
(
c
Ë=0 ? 
Ál£
 : 
åue
);

49 
	}
}

54 
ölöe
 
boﬁón
 
	$isAÕha
(
c
)

56  ( 
	`ißÕha
(
c
Ë=0 ? 
Ál£
 : 
åue
);

57 
	}
}

62 
ölöe
 
boﬁón
 
	$isAscii
(
c
)

64  ( 
	`ißscii
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

65 
	}
}

69 
ölöe
 
boﬁón
 
	$isWhôe•a˚
(
c
)

71  ( 
	`isbœnk
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

72 
	}
}

76 
ölöe
 
boﬁón
 
	$isC⁄åﬁ
(
c
)

78  ( 
	`is˙ål
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

79 
	}
}

83 
ölöe
 
boﬁón
 
	$isDigô
(
c
)

85  ( 
	`isdigô
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

86 
	}
}

90 
ölöe
 
boﬁón
 
	$isGøph
(
c
)

92  ( 
	`isgøph
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

93 
	}
}

97 
ölöe
 
boﬁón
 
	$isLowîCa£
(
c
)

99  (
	`i¶owî
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

100 
	}
}

104 
ölöe
 
boﬁón
 
	$isPröèbÀ
(
c
)

106  ( 
	`i•röt
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

107 
	}
}

112 
ölöe
 
boﬁón
 
	$isPun˘
(
c
)

114  ( 
	`i•un˘
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

115 
	}
}

121 
ölöe
 
boﬁón
 
	$isS∑˚
(
c
)

123  ( 
	`is•a˚
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

124 
	}
}

128 
ölöe
 
boﬁón
 
	$isUµîCa£
(
c
)

130  ( 
	`isuµî
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

131 
	}
}

136 
ölöe
 
boﬁón
 
	$isHexadecimÆDigô
(
c
)

138  ( 
	`isxdigô
 (
c
Ë=0 ? 
Ál£
 : 
åue
);

139 
	}
}

144 
ölöe
 
	$toAscii
(
c
)

146  
	`tﬂscii
 (
c
);

147 
	}
}

156 
ölöe
 
	$toLowîCa£
(
c
)

158  
	`tﬁowî
 (
c
);

159 
	}
}

163 
ölöe
 
	$toUµîCa£
(
c
)

165  
	`touµî
 (
c
);

166 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/WInterrupts.c

27 
	~<öây≥s.h
>

28 
	~<avr/io.h
>

29 
	~<avr/öãºu±.h
>

30 
	~<avr/pgm•a˚.h
>

31 
	~<°dio.h
>

33 
	~"wúög_¥iv©e.h
"

35 vﬁ©ûê
voidFuncPå
 
	götFunc
[
EXTERNAL_NUM_INTERRUPTS
];

38 
©èchI¡îru±
(
uöt8_t
 
öãºu±Num
, (*
u£rFunc
)(), 
mode
) {

39 if(
öãºu±Num
 < 
EXTERNAL_NUM_INTERRUPTS
) {

40 
ötFunc
[
öãºu±Num
] = 
u£rFunc
;

49 
öãºu±Num
) {

50 #i‡
	`deföed
(
__AVR_ATmega32U4__
)

55 
EICRA
 = (EICRA & ~((1<<
ISC00
Ë| (1<<
ISC01
))Ë| (
mode
 << ISC00);

56 
EIMSK
 |(1<<
INT0
);

59 
EICRA
 = (EICRA & ~((1<<
ISC10
Ë| (1<<
ISC11
))Ë| (
mode
 << ISC10);

60 
EIMSK
 |(1<<
INT1
);

63 
EICRA
 = (EICRA & ~((1<<
ISC20
Ë| (1<<
ISC21
))Ë| (
mode
 << ISC20);

64 
EIMSK
 |(1<<
INT2
);

67 
EICRA
 = (EICRA & ~((1<<
ISC30
Ë| (1<<
ISC31
))Ë| (
mode
 << ISC30);

68 
EIMSK
 |(1<<
INT3
);

70 #ñi‡
	`deföed
(
EICRA
Ë&& deföed(
EICRB
Ë&& deföed(
EIMSK
)

72 
EICRA
 = (EICRA & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

73 
EIMSK
 |(1 << 
INT0
);

76 
EICRA
 = (EICRA & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

77 
EIMSK
 |(1 << 
INT1
);

80 
EICRA
 = (EICRA & ~((1 << 
ISC20
Ë| (1 << 
ISC21
))Ë| (
mode
 << ISC20);

81 
EIMSK
 |(1 << 
INT2
);

84 
EICRA
 = (EICRA & ~((1 << 
ISC30
Ë| (1 << 
ISC31
))Ë| (
mode
 << ISC30);

85 
EIMSK
 |(1 << 
INT3
);

88 
EICRB
 = (EICRB & ~((1 << 
ISC40
Ë| (1 << 
ISC41
))Ë| (
mode
 << ISC40);

89 
EIMSK
 |(1 << 
INT4
);

92 
EICRB
 = (EICRB & ~((1 << 
ISC50
Ë| (1 << 
ISC51
))Ë| (
mode
 << ISC50);

93 
EIMSK
 |(1 << 
INT5
);

96 
EICRB
 = (EICRB & ~((1 << 
ISC60
Ë| (1 << 
ISC61
))Ë| (
mode
 << ISC60);

97 
EIMSK
 |(1 << 
INT6
);

100 
EICRB
 = (EICRB & ~((1 << 
ISC70
Ë| (1 << 
ISC71
))Ë| (
mode
 << ISC70);

101 
EIMSK
 |(1 << 
INT7
);

105 #i‡
	`deföed
(
EICRA
Ë&& deföed(
ISC00
Ë&& deföed(
EIMSK
)

106 
EICRA
 = (EICRA & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

107 
EIMSK
 |(1 << 
INT0
);

108 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC00
Ë&& deföed(
GICR
)

109 
MCUCR
 = (MCUCR & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

110 
GICR
 |(1 << 
INT0
);

111 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC00
Ë&& deföed(
GIMSK
)

112 
MCUCR
 = (MCUCR & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

113 
GIMSK
 |(1 << 
INT0
);

115 #îr‹ 
©èchI¡îru±
 
nŸ
 
föished
 
this
 
	`CPU
 (0)

120 #i‡
	`deföed
(
EICRA
Ë&& deföed(
ISC10
Ë&& deföed(
ISC11
Ë&& deföed(
EIMSK
)

121 
EICRA
 = (EICRA & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

122 
EIMSK
 |(1 << 
INT1
);

123 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC10
Ë&& deföed(
ISC11
Ë&& deföed(
GICR
)

124 
MCUCR
 = (MCUCR & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

125 
GICR
 |(1 << 
INT1
);

126 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC10
Ë&& deföed(
GIMSK
) && defined(GIMSK)

127 
MCUCR
 = (MCUCR & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

128 
GIMSK
 |(1 << 
INT1
);

130 #w¨nög 
©èchI¡îru±
 
may
 
√ed
 
some
 
m‹e
 
w‹k
 
this
 
	`˝u
 (1)

135 #i‡
	`deföed
(
EICRA
Ë&& deföed(
ISC20
Ë&& deföed(
ISC21
Ë&& deföed(
EIMSK
)

136 
EICRA
 = (EICRA & ~((1 << 
ISC20
Ë| (1 << 
ISC21
))Ë| (
mode
 << ISC20);

137 
EIMSK
 |(1 << 
INT2
);

138 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC20
Ë&& deföed(
ISC21
Ë&& deföed(
GICR
)

139 
MCUCR
 = (MCUCR & ~((1 << 
ISC20
Ë| (1 << 
ISC21
))Ë| (
mode
 << ISC20);

140 
GICR
 |(1 << 
INT2
);

141 #ñi‡
	`deföed
(
MCUCR
Ë&& deföed(
ISC20
Ë&& deföed(
GIMSK
) && defined(GIMSK)

142 
MCUCR
 = (MCUCR & ~((1 << 
ISC20
Ë| (1 << 
ISC21
))Ë| (
mode
 << ISC20);

143 
GIMSK
 |(1 << 
INT2
);

149 
	}
}

151 
	$dëachI¡îru±
(
uöt8_t
 
öãºu±Num
) {

152 if(
öãºu±Num
 < 
EXTERNAL_NUM_INTERRUPTS
) {

156 
öãºu±Num
) {

157 #i‡
	`deföed
(
__AVR_ATmega32U4__
)

159 
EIMSK
 &~(1<<
INT0
);

162 
EIMSK
 &~(1<<
INT1
);

165 
EIMSK
 &~(1<<
INT2
);

168 
EIMSK
 &~(1<<
INT3
);

170 #ñi‡
	`deföed
(
EICRA
Ë&& deföed(
EICRB
Ë&& deföed(
EIMSK
)

172 
EIMSK
 &~(1 << 
INT0
);

175 
EIMSK
 &~(1 << 
INT1
);

178 
EIMSK
 &~(1 << 
INT2
);

181 
EIMSK
 &~(1 << 
INT3
);

184 
EIMSK
 &~(1 << 
INT4
);

187 
EIMSK
 &~(1 << 
INT5
);

190 
EIMSK
 &~(1 << 
INT6
);

193 
EIMSK
 &~(1 << 
INT7
);

197 #i‡
	`deföed
(
EIMSK
Ë&& deföed(
INT0
)

198 
EIMSK
 &~(1 << 
INT0
);

199 #ñi‡
	`deföed
(
GICR
Ë&& deföed(
ISC00
)

200 
GICR
 &~(1 << 
INT0
);

201 #ñi‡
	`deföed
(
GIMSK
Ë&& deföed(
INT0
)

202 
GIMSK
 &~(1 << 
INT0
);

204 #îr‹ 
dëachI¡îru±
 
nŸ
 
föished
 
this
 
˝u


209 #i‡
	`deföed
(
EIMSK
Ë&& deföed(
INT1
)

210 
EIMSK
 &~(1 << 
INT1
);

211 #ñi‡
	`deföed
(
GICR
Ë&& deföed(
INT1
)

212 
GICR
 &~(1 << 
INT1
);

213 #ñi‡
	`deföed
(
GIMSK
Ë&& deföed(
INT1
)

214 
GIMSK
 &~(1 << 
INT1
);

216 #w¨nög 
dëachI¡îru±
 
may
 
√ed
 
some
 
m‹e
 
w‹k
 
this
 
	`˝u
 (1)

222 
ötFunc
[
öãºu±Num
] = 0;

224 
	}
}

232 #i‡
deföed
(
__AVR_ATmega32U4__
)

233 
	$SIGNAL
(
INT0_ve˘
) {

234 if(
ötFunc
[
EXTERNAL_INT_0
])

235 
ötFunc
[
EXTERNAL_INT_0
]();

236 
	}
}

238 
	$SIGNAL
(
INT1_ve˘
) {

239 if(
ötFunc
[
EXTERNAL_INT_1
])

240 
ötFunc
[
EXTERNAL_INT_1
]();

241 
	}
}

243 
	$SIGNAL
(
INT2_ve˘
) {

244 if(
ötFunc
[
EXTERNAL_INT_2
])

245 
ötFunc
[
EXTERNAL_INT_2
]();

246 
	}
}

248 
	$SIGNAL
(
INT3_ve˘
) {

249 if(
ötFunc
[
EXTERNAL_INT_3
])

250 
ötFunc
[
EXTERNAL_INT_3
]();

251 
	}
}

253 #ñi‡
deföed
(
EICRA
Ë&& deföed(
EICRB
)

255 
	$SIGNAL
(
INT0_ve˘
) {

256 if(
ötFunc
[
EXTERNAL_INT_2
])

257 
ötFunc
[
EXTERNAL_INT_2
]();

258 
	}
}

260 
	$SIGNAL
(
INT1_ve˘
) {

261 if(
ötFunc
[
EXTERNAL_INT_3
])

262 
ötFunc
[
EXTERNAL_INT_3
]();

263 
	}
}

265 
	$SIGNAL
(
INT2_ve˘
) {

266 if(
ötFunc
[
EXTERNAL_INT_4
])

267 
ötFunc
[
EXTERNAL_INT_4
]();

268 
	}
}

270 
	$SIGNAL
(
INT3_ve˘
) {

271 if(
ötFunc
[
EXTERNAL_INT_5
])

272 
ötFunc
[
EXTERNAL_INT_5
]();

273 
	}
}

275 
	$SIGNAL
(
INT4_ve˘
) {

276 if(
ötFunc
[
EXTERNAL_INT_0
])

277 
ötFunc
[
EXTERNAL_INT_0
]();

278 
	}
}

280 
	$SIGNAL
(
INT5_ve˘
) {

281 if(
ötFunc
[
EXTERNAL_INT_1
])

282 
ötFunc
[
EXTERNAL_INT_1
]();

283 
	}
}

285 
	$SIGNAL
(
INT6_ve˘
) {

286 if(
ötFunc
[
EXTERNAL_INT_6
])

287 
ötFunc
[
EXTERNAL_INT_6
]();

288 
	}
}

290 
	$SIGNAL
(
INT7_ve˘
) {

291 if(
ötFunc
[
EXTERNAL_INT_7
])

292 
ötFunc
[
EXTERNAL_INT_7
]();

293 
	}
}

297 
	$SIGNAL
(
INT0_ve˘
) {

298 if(
ötFunc
[
EXTERNAL_INT_0
])

299 
ötFunc
[
EXTERNAL_INT_0
]();

300 
	}
}

302 
	$SIGNAL
(
INT1_ve˘
) {

303 if(
ötFunc
[
EXTERNAL_INT_1
])

304 
ötFunc
[
EXTERNAL_INT_1
]();

305 
	}
}

307 #i‡
deföed
(
EICRA
Ë&& deföed(
ISC20
)

308 
	$SIGNAL
(
INT2_ve˘
) {

309 if(
ötFunc
[
EXTERNAL_INT_2
])

310 
ötFunc
[
EXTERNAL_INT_2
]();

311 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/WMath.cpp

27 
	~"°dlib.h
"

30 
	$øndomSìd
(
£ed
)

32 i‡(
£ed
 != 0) {

33 
	`§™dom
(
£ed
);

35 
	}
}

37 
	$øndom
(
howbig
)

39 i‡(
howbig
 == 0) {

42  
	`øndom
(Ë% 
howbig
;

43 
	}
}

45 
	$øndom
(
howsmÆl
, 
howbig
)

47 i‡(
howsmÆl
 >
howbig
) {

48  
howsmÆl
;

50 
diff
 = 
howbig
 - 
howsmÆl
;

51  
	`øndom
(
diff
Ë+ 
howsmÆl
;

52 
	}
}

54 
	$m≠
(
x
, 
ö_mö
, 
ö_max
, 
out_mö
, 
out_max
)

56  (
x
 - 
ö_mö
Ë* (
out_max
 - 
out_mö
Ë/ (
ö_max
 - in_min) + out_min;

57 
	}
}

59 
	$makeW‹d
(
w
Ë{  w; 
	}
}

60 
	$makeW‹d
(
h
, 
l
Ë{  (h << 8Ë|Ü; 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/WString.cpp

22 
	~"WSåög.h
"

29 
	gSåög
::
	$Såög
(c⁄° *
c°r
)

31 
	`öô
();

32 i‡(
c°r
Ë
	`c›y
(c°r, 
	`°æí
(cstr));

33 
	}
}

35 
	gSåög
::
	$Såög
(c⁄° 
Såög
 &
vÆue
)

37 
	`öô
();

38 *
this
 = 
vÆue
;

39 
	}
}

41 #ifde‡
__GXX_EXPERIMENTAL_CXX0X__


42 
	gSåög
::
	$Såög
(
Såög
 &&
rvÆ
)

44 
	`öô
();

45 
	`move
(
rvÆ
);

46 
	}
}

47 
	gSåög
::
	$Såög
(
SåögSumHñ≥r
 &&
rvÆ
)

49 
	`öô
();

50 
	`move
(
rvÆ
);

51 
	}
}

54 
	gSåög
::
	$Såög
(
c
)

56 
	`öô
();

57 
buf
[2];

58 
buf
[0] = 
c
;

59 
buf
[1] = 0;

60 *
this
 = 
buf
;

61 
	}
}

63 
	gSåög
::
	$Såög
(
vÆue
, 
ba£
)

65 
	`öô
();

66 
buf
[9];

67 
	`utﬂ
(
vÆue
, 
buf
, 
ba£
);

68 *
this
 = 
buf
;

69 
	}
}

71 
	gSåög
::
	$Såög
(
vÆue
, 
ba£
)

73 
	`öô
();

74 
buf
[18];

75 
	`ôﬂ
(
vÆue
, 
buf
, 
ba£
);

76 *
this
 = 
buf
;

77 
	}
}

79 
	gSåög
::
	$Såög
(
vÆue
, 
ba£
)

81 
	`öô
();

82 
buf
[17];

83 
	`utﬂ
(
vÆue
, 
buf
, 
ba£
);

84 *
this
 = 
buf
;

85 
	}
}

87 
	gSåög
::
	$Såög
(
vÆue
, 
ba£
)

89 
	`öô
();

90 
buf
[34];

91 
	`…ﬂ
(
vÆue
, 
buf
, 
ba£
);

92 *
this
 = 
buf
;

93 
	}
}

95 
	gSåög
::
	$Såög
(
vÆue
, 
ba£
)

97 
	`öô
();

98 
buf
[33];

99 
	`u…ﬂ
(
vÆue
, 
buf
, 
ba£
);

100 *
this
 = 
buf
;

101 
	}
}

103 
	gSåög
::~
	$Såög
()

105 
	`‰ì
(
buf„r
);

106 
	}
}

112 
ölöe
 
	gSåög
::
	$öô
()

114 
buf„r
 = 
NULL
;

115 
ˇ∑côy
 = 0;

116 
Àn
 = 0;

117 
Êags
 = 0;

118 
	}
}

120 
	gSåög
::
	$övÆid©e
()

122 i‡(
buf„r
Ë
	`‰ì
(buffer);

123 
buf„r
 = 
NULL
;

124 
ˇ∑côy
 = 
Àn
 = 0;

125 
	}
}

127 
	gSåög
::
	$ª£rve
(
size
)

129 i‡(
buf„r
 && 
ˇ∑côy
 >
size
)  1;

130 i‡(
	`ch™geBuf„r
(
size
)) {

131 i‡(
Àn
 =0Ë
buf„r
[0] = 0;

135 
	}
}

137 
	gSåög
::
	$ch™geBuf„r
(
maxSåLí
)

139 *
√wbuf„r
 = (*)
	`ªÆloc
(
buf„r
, 
maxSåLí
 + 1);

140 i‡(
√wbuf„r
) {

141 
buf„r
 = 
√wbuf„r
;

142 
ˇ∑côy
 = 
maxSåLí
;

146 
	}
}

152 
	gSåög
 & Såög::
	$c›y
(c⁄° *
c°r
, 
Àngth
)

154 i‡(!
	`ª£rve
(
Àngth
)) {

155 
	`övÆid©e
();

156  *
this
;

158 
Àn
 = 
Àngth
;

159 
	`°r˝y
(
buf„r
, 
c°r
);

160  *
this
;

161 
	}
}

163 #ifde‡
__GXX_EXPERIMENTAL_CXX0X__


164 
	gSåög
::
	$move
(
Såög
 &
rhs
)

166 i‡(
buf„r
) {

167 i‡(
ˇ∑côy
 >
rhs
.
Àn
) {

168 
	`°r˝y
(
buf„r
, 
rhs
.buffer);

169 
Àn
 = 
rhs
.len;

170 
rhs
.
Àn
 = 0;

173 
	`‰ì
(
buf„r
);

176 
buf„r
 = 
rhs
.buffer;

177 
ˇ∑côy
 = 
rhs
.capacity;

178 
Àn
 = 
rhs
.len;

179 
rhs
.
buf„r
 = 
NULL
;

180 
rhs
.
ˇ∑côy
 = 0;

181 
rhs
.
Àn
 = 0;

182 
	}
}

185 
	gSåög
 & Såög::
›î©‹
 = (c⁄° 
Såög
 &
rhs
)

187 i‡(
this
 =&
rhs
)  *this;

189 i‡(
	grhs
.
	gbuf„r
Ë
c›y
(
rhs
.
buf„r
,Ñhs.
Àn
);

190 
övÆid©e
();

192  *
	gthis
;

195 #ifde‡
__GXX_EXPERIMENTAL_CXX0X__


196 
	gSåög
 & Såög::
›î©‹
 = (
Såög
 &&
rvÆ
)

198 i‡(
this
 !&
rvÆ
Ë
move
(rval);

199  *
	gthis
;

202 
	gSåög
 & Såög::
›î©‹
 = (
SåögSumHñ≥r
 &&
rvÆ
)

204 i‡(
this
 !&
rvÆ
Ë
move
(rval);

205  *
	gthis
;

209 
	gSåög
 & Såög::
›î©‹
 = (c⁄° *
c°r
)

211 i‡(
c°r
Ë
c›y
(c°r, 
°æí
(cstr));

212 
övÆid©e
();

214  *
	gthis
;

221 
	gSåög
::
	$c⁄ˇt
(c⁄° 
Såög
 &
s
)

223  
	`c⁄ˇt
(
s
.
buf„r
, s.
Àn
);

224 
	}
}

226 
	gSåög
::
	$c⁄ˇt
(c⁄° *
c°r
, 
Àngth
)

228 
√wÀn
 = 
Àn
 + 
Àngth
;

229 i‡(!
c°r
)  0;

230 i‡(
Àngth
 == 0)  1;

231 i‡(!
	`ª£rve
(
√wÀn
))  0;

232 
	`°r˝y
(
buf„r
 + 
Àn
, 
c°r
);

233 
Àn
 = 
√wÀn
;

235 
	}
}

237 
	gSåög
::
	$c⁄ˇt
(c⁄° *
c°r
)

239 i‡(!
c°r
)  0;

240  
	`c⁄ˇt
(
c°r
, 
	`°æí
(cstr));

241 
	}
}

243 
	gSåög
::
	$c⁄ˇt
(
c
)

245 
buf
[2];

246 
buf
[0] = 
c
;

247 
buf
[1] = 0;

248  
	`c⁄ˇt
(
buf
, 1);

249 
	}
}

251 
	gSåög
::
	$c⁄ˇt
(
num
)

253 
buf
[4];

254 
	`ôﬂ
(
num
, 
buf
, 10);

255  
	`c⁄ˇt
(
buf
, 
	`°æí
(buf));

256 
	}
}

258 
	gSåög
::
	$c⁄ˇt
(
num
)

260 
buf
[7];

261 
	`ôﬂ
(
num
, 
buf
, 10);

262  
	`c⁄ˇt
(
buf
, 
	`°æí
(buf));

263 
	}
}

265 
	gSåög
::
	$c⁄ˇt
(
num
)

267 
buf
[6];

268 
	`utﬂ
(
num
, 
buf
, 10);

269  
	`c⁄ˇt
(
buf
, 
	`°æí
(buf));

270 
	}
}

272 
	gSåög
::
	$c⁄ˇt
(
num
)

274 
buf
[12];

275 
	`…ﬂ
(
num
, 
buf
, 10);

276  
	`c⁄ˇt
(
buf
, 
	`°æí
(buf));

277 
	}
}

279 
	gSåög
::
	$c⁄ˇt
(
num
)

281 
buf
[11];

282 
	`u…ﬂ
(
num
, 
buf
, 10);

283  
	`c⁄ˇt
(
buf
, 
	`°æí
(buf));

284 
	}
}

290 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, c⁄° 
	gSåög
 &
	grhs
)

292 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

293 i‡(!
	ga
.
c⁄ˇt
(
rhs
.
buf„r
,Ñhs.
Àn
)Ëa.
övÆid©e
();

294  
	ga
;

297 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, c⁄° *
	gc°r
)

299 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

300 i‡(!
	gc°r
 || !
	ga
.
c⁄ˇt
(
c°r
, 
°æí
(c°r))Ëa.
övÆid©e
();

301  
	ga
;

304 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gc
)

306 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

307 i‡(!
	ga
.
c⁄ˇt
(
c
)Ëa.
övÆid©e
();

308  
	ga
;

311 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
)

313 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

314 i‡(!
	ga
.
c⁄ˇt
(
num
)Ëa.
övÆid©e
();

315  
	ga
;

318 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
)

320 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

321 i‡(!
	ga
.
c⁄ˇt
(
num
)Ëa.
övÆid©e
();

322  
	ga
;

325 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
)

327 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

328 i‡(!
	ga
.
c⁄ˇt
(
num
)Ëa.
övÆid©e
();

329  
	ga
;

332 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
)

334 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

335 i‡(!
	ga
.
c⁄ˇt
(
num
)Ëa.
övÆid©e
();

336  
	ga
;

339 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
)

341 
	gSåögSumHñ≥r
 &
	ga
 = 
c⁄°_ˇ°
<
SåögSumHñ≥r
&>(
lhs
);

342 i‡(!
	ga
.
c⁄ˇt
(
num
)Ëa.
övÆid©e
();

343  
	ga
;

350 
	gSåög
::
	$com∑ªTo
(c⁄° 
Såög
 &
s
) const

352 i‡(!
buf„r
 || !
s
.buffer) {

353 i‡(
s
.
buf„r
 && s.
Àn
 > 0)  0 - *(*)s.buffer;

354 i‡(
buf„r
 && 
Àn
 > 0)  *(*)buffer;

357  
	`°rcmp
(
buf„r
, 
s
.buffer);

358 
	}
}

360 
	gSåög
::
	$equÆs
(c⁄° 
Såög
 &
s2
) const

362  (
Àn
 =
s2
.À¿&& 
	`com∑ªTo
(s2) == 0);

363 
	}
}

365 
	gSåög
::
	$equÆs
(c⁄° *
c°r
) const

367 i‡(
Àn
 =0Ë (
c°r
 =
NULL
 || *cstr == 0);

368 i‡(
c°r
 =
NULL
Ë 
buf„r
[0] == 0;

369  
	`°rcmp
(
buf„r
, 
c°r
) == 0;

370 
	}
}

372 
	gSåög
::
›î©‹
<(c⁄° 
Såög
 &
rhs
) const

374  
com∑ªTo
(
rhs
) < 0;

377 
	gSåög
::
›î©‹
>(c⁄° 
Såög
 &
rhs
) const

379  
com∑ªTo
(
rhs
) > 0;

382 
	gSåög
::
›î©‹
<=(c⁄° 
Såög
 &
rhs
) const

384  
com∑ªTo
(
rhs
) <= 0;

387 
	gSåög
::
›î©‹
>=(c⁄° 
Såög
 &
rhs
) const

389  
com∑ªTo
(
rhs
) >= 0;

392 
	gSåög
::
	$equÆsIgn‹eCa£
–c⁄° 
Såög
 &
s2
 ) const

394 i‡(
this
 =&
s2
)  1;

395 i‡(
Àn
 !
s2
.len)  0;

396 i‡(
Àn
 == 0)  1;

397 c⁄° *
p1
 = 
buf„r
;

398 c⁄° *
p2
 = 
s2
.
buf„r
;

399 *
p1
) {

400 i‡(
	`tﬁowî
(*
p1
++Ë!tﬁowî(*
p2
++))  0;

403 
	}
}

405 
	gSåög
::
	$°¨tsWôh
–c⁄° 
Såög
 &
s2
 ) const

407 i‡(
Àn
 < 
s2
.len)  0;

408  
	`°¨tsWôh
(
s2
, 0);

409 
	}
}

411 
	gSåög
::
	$°¨tsWôh
–c⁄° 
Såög
 &
s2
, 
off£t
 ) const

413 i‡(
off£t
 > 
Àn
 - 
s2
.À¿|| !
buf„r
 || !s2.buffer)  0;

414  
	`°∫cmp
–&
buf„r
[
off£t
], 
s2
.buf„r, s2.
Àn
 ) == 0;

415 
	}
}

417 
	gSåög
::
	$ídsWôh
–c⁄° 
Såög
 &
s2
 ) const

419 i‡–
Àn
 < 
s2
.À¿|| !
buf„r
 || !s2.buffer)  0;

420  
	`°rcmp
(&
buf„r
[
Àn
 - 
s2
.len], s2.buffer) == 0;

421 
	}
}

427 
	gSåög
::
	$ch¨At
(
loc
) const

429  
›î©‹
[](
loc
);

430 
	}
}

432 
	gSåög
::
	$£tCh¨At
(
loc
, 
c
)

434 i‡(
loc
 < 
Àn
Ë
buf„r
[loc] = 
c
;

435 
	}
}

437 & 
	gSåög
::
›î©‹
[](
ödex
)

439 
dummy_wrôabÀ_ch¨
;

440 i‡(
	gödex
 >
Àn
 || !
buf„r
) {

441 
dummy_wrôabÀ_ch¨
 = 0;

442  
	gdummy_wrôabÀ_ch¨
;

444  
	gbuf„r
[
ödex
];

447 
	gSåög
::
›î©‹
[]–
ödex
 ) const

449 i‡(
ödex
 >
Àn
 || !
buf„r
)  0;

450  
	gbuf„r
[
ödex
];

453 
	gSåög
::
	$gëByãs
(*
buf
, 
bufsize
, 
ödex
) const

455 i‡(!
bufsize
 || !
buf
) ;

456 i‡(
ödex
 >
Àn
) {

457 
buf
[0] = 0;

460 
n
 = 
bufsize
 - 1;

461 i‡(
n
 > 
Àn
 - 
ödex
)Ç =Üen - index;

462 
	`°∫˝y
((*)
buf
, 
buf„r
 + 
ödex
, 
n
);

463 
buf
[
n
] = 0;

464 
	}
}

470 
	gSåög
::
	$ödexOf
(
c
) const

472  
	`ödexOf
(
c
, 0);

473 
	}
}

475 
	gSåög
::
	$ödexOf
–
ch
, 
‰omIndex
 ) const

477 i‡(
‰omIndex
 >
Àn
)  -1;

478 c⁄° * 
ãmp
 = 
	`°rchr
(
buf„r
 + 
‰omIndex
, 
ch
);

479 i‡(
ãmp
 =
NULL
)  -1;

480  
ãmp
 - 
buf„r
;

481 
	}
}

483 
	gSåög
::
	$ödexOf
(c⁄° 
Såög
 &
s2
) const

485  
	`ödexOf
(
s2
, 0);

486 
	}
}

488 
	gSåög
::
	$ödexOf
(c⁄° 
Såög
 &
s2
, 
‰omIndex
) const

490 i‡(
‰omIndex
 >
Àn
)  -1;

491 c⁄° *
found
 = 
	`°r°r
(
buf„r
 + 
‰omIndex
, 
s2
.buffer);

492 i‡(
found
 =
NULL
)  -1;

493  
found
 - 
buf„r
;

494 
	}
}

496 
	gSåög
::
	$œ°IndexOf
–
theCh¨
 ) const

498  
	`œ°IndexOf
(
theCh¨
, 
Àn
 - 1);

499 
	}
}

501 
	gSåög
::
	$œ°IndexOf
(
ch
, 
‰omIndex
) const

503 i‡(
‰omIndex
 >
Àn
)  -1;

504 
ãmpch¨
 = 
buf„r
[
‰omIndex
 + 1];

505 
buf„r
[
‰omIndex
 + 1] = '\0';

506 * 
ãmp
 = 
	`°ºchr
–
buf„r
, 
ch
 );

507 
buf„r
[
‰omIndex
 + 1] = 
ãmpch¨
;

508 i‡(
ãmp
 =
NULL
)  -1;

509  
ãmp
 - 
buf„r
;

510 
	}
}

512 
	gSåög
::
	$œ°IndexOf
(c⁄° 
Såög
 &
s2
) const

514  
	`œ°IndexOf
(
s2
, 
Àn
 - s2.len);

515 
	}
}

517 
	gSåög
::
	$œ°IndexOf
(c⁄° 
Såög
 &
s2
, 
‰omIndex
) const

519 i‡(
s2
.
Àn
 == 0 ||Üen == 0 || s2.len >Üen)  -1;

520 i‡(
‰omIndex
 >
Àn
) fromIndex =Üen - 1;

521 
found
 = -1;

522 *
p
 = 
buf„r
;Ö <buf„∏+ 
‰omIndex
;Ö++) {

523 
p
 = 
	`°r°r
’, 
s2
.
buf„r
);

524 i‡(!
p
) ;

525 i‡(()(
p
 - 
buf„r
Ë<
‰omIndex
Ë
found
 =Ö - buffer;

527  
found
;

528 
	}
}

530 
Såög
 
	gSåög
::
	$sub°rög
–
À·
 ) const

532  
	`sub°rög
(
À·
, 
Àn
);

533 
	}
}

535 
Såög
 
	gSåög
::
	$sub°rög
(
À·
, 
right
) const

537 i‡(
À·
 > 
right
) {

538 
ãmp
 = 
right
;

539 
right
 = 
À·
;

540 
À·
 = 
ãmp
;

542 
Såög
 
out
;

543 i‡(
À·
 > 
Àn
Ë 
out
;

544 i‡(
right
 > 
Àn
)Ñight =Üen;

545 
ãmp
 = 
buf„r
[
right
];

546 
buf„r
[
right
] = '\0';

547 
out
 = 
buf„r
 + 
À·
;

548 
buf„r
[
right
] = 
ãmp
;

549  
out
;

550 
	}
}

556 
	gSåög
::
	$ª∂a˚
(
föd
, 
ª∂a˚
)

558 i‡(!
buf„r
) ;

559 *
p
 = 
buf„r
; *p;Ö++) {

560 i‡(*
p
 =
föd
Ë*∞
ª∂a˚
;

562 
	}
}

564 
	gSåög
::
	$ª∂a˚
(c⁄° 
Såög
& 
föd
, c⁄° Såög& 
ª∂a˚
)

566 i‡(
Àn
 =0 || 
föd
.len == 0) ;

567 
diff
 = 
ª∂a˚
.
Àn
 - 
föd
.len;

568 *
ªadFrom
 = 
buf„r
;

569 *
foundAt
;

570 i‡(
diff
 == 0) {

571 (
foundAt
 = 
	`°r°r
(
ªadFrom
, 
föd
.
buf„r
)Ë!
NULL
) {

572 
	`mem˝y
(
foundAt
, 
ª∂a˚
.
buf„r
,Ñïœ˚.
Àn
);

573 
ªadFrom
 = 
foundAt
 + 
ª∂a˚
.
Àn
;

575 } i‡(
diff
 < 0) {

576 *
wrôeTo
 = 
buf„r
;

577 (
foundAt
 = 
	`°r°r
(
ªadFrom
, 
föd
.
buf„r
)Ë!
NULL
) {

578 
n
 = 
foundAt
 - 
ªadFrom
;

579 
	`mem˝y
(
wrôeTo
, 
ªadFrom
, 
n
);

580 
wrôeTo
 +
n
;

581 
	`mem˝y
(
wrôeTo
, 
ª∂a˚
.
buf„r
,Ñïœ˚.
Àn
);

582 
wrôeTo
 +
ª∂a˚
.
Àn
;

583 
ªadFrom
 = 
foundAt
 + 
föd
.
Àn
;

584 
Àn
 +
diff
;

586 
	`°r˝y
(
wrôeTo
, 
ªadFrom
);

588 
size
 = 
Àn
;

589 (
foundAt
 = 
	`°r°r
(
ªadFrom
, 
föd
.
buf„r
)Ë!
NULL
) {

590 
ªadFrom
 = 
foundAt
 + 
föd
.
Àn
;

591 
size
 +
diff
;

593 i‡(
size
 =
Àn
) ;

594 i‡(
size
 > 
ˇ∑côy
 && !
	`ch™geBuf„r
(size)) ;

595 
ödex
 = 
Àn
 - 1;

596 
ödex
 >0 && (ödex = 
	`œ°IndexOf
(
föd
, index)) >= 0) {

597 
ªadFrom
 = 
buf„r
 + 
ödex
 + 
föd
.
Àn
;

598 
	`memmove
(
ªadFrom
 + 
diff
,ÑódFrom, 
Àn
 - (ªadFrom - 
buf„r
));

599 
Àn
 +
diff
;

600 
buf„r
[
Àn
] = 0;

601 
	`mem˝y
(
buf„r
 + 
ödex
, 
ª∂a˚
.buf„r,Ñïœ˚.
Àn
);

602 
ödex
--;

605 
	}
}

607 
	gSåög
::
	$toLowîCa£
()

609 i‡(!
buf„r
) ;

610 *
p
 = 
buf„r
; *p;Ö++) {

611 *
p
 = 
	`tﬁowî
(*p);

613 
	}
}

615 
	gSåög
::
	$toUµîCa£
()

617 i‡(!
buf„r
) ;

618 *
p
 = 
buf„r
; *p;Ö++) {

619 *
p
 = 
	`touµî
(*p);

621 
	}
}

623 
	gSåög
::
	$åim
()

625 i‡(!
buf„r
 || 
Àn
 == 0) ;

626 *
begö
 = 
buf„r
;

627 
	`is•a˚
(*
begö
)) begin++;

628 *
íd
 = 
buf„r
 + 
Àn
 - 1;

629 
	`is•a˚
(*
íd
Ë&&Énd >
begö
)Énd--;

630 
Àn
 = 
íd
 + 1 - 
begö
;

631 i‡(
begö
 > 
buf„r
Ë
	`mem˝y
(buf„r, begö, 
Àn
);

632 
buf„r
[
Àn
] = 0;

633 
	}
}

639 
	gSåög
::
	$toI¡
() const

641 i‡(
buf„r
Ë 
	`©ﬁ
(buffer);

643 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/WString.h

22 #i‚de‡
Såög_˛ass_h


23 
	#Såög_˛ass_h


	)

24 #ifde‡
__˝lu•lus


26 
	~<°dlib.h
>

27 
	~<°rög.h
>

28 
	~<˘y≥.h
>

29 
	~<avr/pgm•a˚.h
>

37 
˛ass
 
	g__FœshSåögHñ≥r
;

38 
	#F
(
°rög_lôîÆ
Ë(
ªöãΩªt_ˇ°
<c⁄° 
__FœshSåögHñ≥r
 *>(
	`PSTR
(°rög_lôîÆ)))

	)

42 
˛ass
 
	gSåögSumHñ≥r
;

45 ˛as†
	cSåög


50 (
	tSåög
::*
	tSåögIfHñ≥rTy≥
)() const;

51 
	$SåögIfHñ≥r
() const {}

53 
public
:

59 
	`Såög
(c⁄° *
c°r
 = "");

60 
	`Såög
(c⁄° 
Såög
 &
°r
);

61 #ifde‡
__GXX_EXPERIMENTAL_CXX0X__


62 
	`Såög
(
Såög
 &&
rvÆ
);

63 
	`Såög
(
SåögSumHñ≥r
 &&
rvÆ
);

65 
ex∂icô
 
	`Såög
(
c
);

66 
ex∂icô
 
	`Såög
(, 
ba£
=10);

67 
ex∂icô
 
	`Såög
(, 
ba£
=10);

68 
ex∂icô
 
	`Såög
(, 
ba£
=10);

69 
ex∂icô
 
	`Såög
(, 
ba£
=10);

70 
ex∂icô
 
	`Såög
(, 
ba£
=10);

71 ~
	`Såög
();

77 
	`ª£rve
(
size
);

78 
ölöe
 
	$Àngth
(Ëc⁄° { 
Àn
;
	}
}

83 
	gSåög
 & 
	g›î©‹
 = (c⁄° 
Såög
 &
rhs
);

84 
	gSåög
 & 
	g›î©‹
 = (c⁄° *
c°r
);

85 #ifde‡
__GXX_EXPERIMENTAL_CXX0X__


86 
	gSåög
 & 
	g›î©‹
 = (
Såög
 &&
rvÆ
);

87 
	gSåög
 & 
	g›î©‹
 = (
SåögSumHñ≥r
 &&
rvÆ
);

95 
c⁄ˇt
(c⁄° 
Såög
 &
°r
);

96 
c⁄ˇt
(c⁄° *
c°r
);

97 
c⁄ˇt
(
c
);

98 
c⁄ˇt
(
c
);

99 
c⁄ˇt
(
num
);

100 
c⁄ˇt
(
num
);

101 
c⁄ˇt
(
num
);

102 
c⁄ˇt
(
num
);

106 
	gSåög
 & 
	g›î©‹
 +(c⁄° 
Såög
 &
rhs
Ë{
c⁄ˇt
‘hs);  (*
	gthis
);}

107 
	gSåög
 & 
	g›î©‹
 +(c⁄° *
c°r
Ë{
c⁄ˇt
(c°r);  (*
	gthis
);}

108 
	gSåög
 & 
	g›î©‹
 +(
c
Ë{
c⁄ˇt
(c);  (*
	gthis
);}

109 
	gSåög
 & 
	g›î©‹
 +(
num
Ë{
c⁄ˇt
“um);  (*
	gthis
);}

110 
	gSåög
 & 
	g›î©‹
 +(
num
Ë{
c⁄ˇt
“um);  (*
	gthis
);}

111 
	gSåög
 & 
	g›î©‹
 +(
num
Ë{
c⁄ˇt
“um);  (*
	gthis
);}

112 
	gSåög
 & 
	g›î©‹
 +(
num
Ë{
c⁄ˇt
“um);  (*
	gthis
);}

113 
	gSåög
 & 
	g›î©‹
 +(
num
Ë{
c⁄ˇt
“um);  (*
	gthis
);}

115 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, c⁄° 
	gSåög
 &
	grhs
);

116 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, c⁄° *
	gc°r
);

117 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gc
);

118 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
);

119 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
);

120 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
);

121 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
);

122 
‰õnd
 
	gSåögSumHñ≥r
 & 
	g›î©‹
 + (c⁄° SåögSumHñ≥∏&
	glhs
, 
	gnum
);

125 
›î©‹
 
	$SåögIfHñ≥rTy≥
(Ëc⁄° {  
buf„r
 ? &
Såög
::
SåögIfHñ≥r
 : 0; 
	}
}

126 
	$com∑ªTo
(c⁄° 
Såög
 &
s
) const;

127 
	$equÆs
(c⁄° 
Såög
 &
s
) const;

128 
	$equÆs
(c⁄° *
c°r
) const;

129 
›î©‹
 =(c⁄° 
Såög
 &
rhs
Ëc⁄° { 
	`equÆs
‘hs);
	}
}

130 
	g›î©‹
 =(c⁄° *
c°r
Ëc⁄° { 
equÆs
(cstr);}

131 
	g›î©‹
 !(c⁄° 
Såög
 &
rhs
Ëc⁄° { !
equÆs
(rhs);}

132 
	g›î©‹
 !(c⁄° *
c°r
Ëc⁄° { !
equÆs
(cstr);}

133 
	g›î©‹
 < (c⁄° 
	gSåög
 &
	grhs
) const;

134 
	g›î©‹
 > (c⁄° 
	gSåög
 &
	grhs
) const;

135 
	g›î©‹
 <(c⁄° 
Såög
 &
rhs
) const;

136 
	g›î©‹
 >(c⁄° 
Såög
 &
rhs
) const;

137 
	$equÆsIgn‹eCa£
(c⁄° 
Såög
 &
s
) const;

138 
	$°¨tsWôh
–c⁄° 
Såög
 &
¥efix
) const;

139 
	$°¨tsWôh
(c⁄° 
Såög
 &
¥efix
, 
off£t
) const;

140 
	$ídsWôh
(c⁄° 
Såög
 &
suffix
) const;

143 
	$ch¨At
(
ödex
) const;

144 
	`£tCh¨At
(
ödex
, 
c
);

145 
›î©‹
 [] (
ödex
) const;

146 & 
›î©‹
 [] (
ödex
);

147 
	$gëByãs
(*
buf
, 
bufsize
, 
ödex
=0) const;

148 
	$toCh¨Aºay
(*
buf
, 
bufsize
, 
ödex
=0) const

149 {
	`gëByãs
((*)
buf
, 
bufsize
, 
ödex
);
	}
}

152 
	$ödexOf
–
ch
 ) const;

153 
	$ödexOf
–
ch
, 
‰omIndex
 ) const;

154 
	$ödexOf
–c⁄° 
Såög
 &
°r
 ) const;

155 
	$ödexOf
–c⁄° 
Såög
 &
°r
, 
‰omIndex
 ) const;

156 
	$œ°IndexOf
–
ch
 ) const;

157 
	$œ°IndexOf
–
ch
, 
‰omIndex
 ) const;

158 
	$œ°IndexOf
–c⁄° 
Såög
 &
°r
 ) const;

159 
	$œ°IndexOf
–c⁄° 
Såög
 &
°r
, 
‰omIndex
 ) const;

160 
Såög
 
	$sub°rög
–
begöIndex
 ) const;

161 
Såög
 
	$sub°rög
–
begöIndex
, 
ídIndex
 ) const;

164 
	`ª∂a˚
(
föd
, 
ª∂a˚
);

165 
	`ª∂a˚
(c⁄° 
Såög
& 
föd
, c⁄° Såög& 
ª∂a˚
);

166 
	`toLowîCa£
();

167 
	`toUµîCa£
();

168 
	`åim
();

171 
	$toI¡
() const;

173 
¥Ÿe˘ed
:

174 *
buf„r
;

175 
ˇ∑côy
;

176 
Àn
;

177 
Êags
;

178 
¥Ÿe˘ed
:

179 
	`öô
();

180 
	`övÆid©e
();

181 
	`ch™geBuf„r
(
maxSåLí
);

182 
	`c⁄ˇt
(c⁄° *
c°r
, 
Àngth
);

185 
Såög
 & 
	`c›y
(c⁄° *
c°r
, 
Àngth
);

186 #ifde‡
__GXX_EXPERIMENTAL_CXX0X__


187 
	`move
(
Såög
 &
rhs
);

189 
	}
};

191 ˛as†
	cSåögSumHñ≥r
 : 
public
 
Såög


193 
public
:

194 
	$SåögSumHñ≥r
(c⁄° 
Såög
 &
s
Ë: 
	$Såög
(
s
) {}

195 
	$SåögSumHñ≥r
(c⁄° *
p
Ë: 
	$Såög
(
p
Ë{
	}
}

196 
	$SåögSumHñ≥r
(
c
Ë: 
	$Såög
(
c
Ë{
	}
}

197 
	$SåögSumHñ≥r
(
num
Ë: 
	$Såög
(
num
Ë{
	}
}

198 
	$SåögSumHñ≥r
(
num
Ë: 
	$Såög
(
num
Ë{
	}
}

199 
	$SåögSumHñ≥r
(
num
Ë: 
	$Såög
(
num
Ë{
	}
}

200 
	$SåögSumHñ≥r
(
num
Ë: 
	$Såög
(
num
Ë{
	}
}

201 
	$SåögSumHñ≥r
(
num
Ë: 
	$Såög
(
num
Ë{
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/binary.h

1 #i‚de‡
Bö¨y_h


2 
	#Bö¨y_h


	)

4 
	#B0
 0

	)

5 
	#B00
 0

	)

6 
	#B000
 0

	)

7 
	#B0000
 0

	)

8 
	#B00000
 0

	)

9 
	#B000000
 0

	)

10 
	#B0000000
 0

	)

11 
	#B00000000
 0

	)

12 
	#B1
 1

	)

13 
	#B01
 1

	)

14 
	#B001
 1

	)

15 
	#B0001
 1

	)

16 
	#B00001
 1

	)

17 
	#B000001
 1

	)

18 
	#B0000001
 1

	)

19 
	#B00000001
 1

	)

20 
	#B10
 2

	)

21 
	#B010
 2

	)

22 
	#B0010
 2

	)

23 
	#B00010
 2

	)

24 
	#B000010
 2

	)

25 
	#B0000010
 2

	)

26 
	#B00000010
 2

	)

27 
	#B11
 3

	)

28 
	#B011
 3

	)

29 
	#B0011
 3

	)

30 
	#B00011
 3

	)

31 
	#B000011
 3

	)

32 
	#B0000011
 3

	)

33 
	#B00000011
 3

	)

34 
	#B100
 4

	)

35 
	#B0100
 4

	)

36 
	#B00100
 4

	)

37 
	#B000100
 4

	)

38 
	#B0000100
 4

	)

39 
	#B00000100
 4

	)

40 
	#B101
 5

	)

41 
	#B0101
 5

	)

42 
	#B00101
 5

	)

43 
	#B000101
 5

	)

44 
	#B0000101
 5

	)

45 
	#B00000101
 5

	)

46 
	#B110
 6

	)

47 
	#B0110
 6

	)

48 
	#B00110
 6

	)

49 
	#B000110
 6

	)

50 
	#B0000110
 6

	)

51 
	#B00000110
 6

	)

52 
	#B111
 7

	)

53 
	#B0111
 7

	)

54 
	#B00111
 7

	)

55 
	#B000111
 7

	)

56 
	#B0000111
 7

	)

57 
	#B00000111
 7

	)

58 
	#B1000
 8

	)

59 
	#B01000
 8

	)

60 
	#B001000
 8

	)

61 
	#B0001000
 8

	)

62 
	#B00001000
 8

	)

63 
	#B1001
 9

	)

64 
	#B01001
 9

	)

65 
	#B001001
 9

	)

66 
	#B0001001
 9

	)

67 
	#B00001001
 9

	)

68 
	#B1010
 10

	)

69 
	#B01010
 10

	)

70 
	#B001010
 10

	)

71 
	#B0001010
 10

	)

72 
	#B00001010
 10

	)

73 
	#B1011
 11

	)

74 
	#B01011
 11

	)

75 
	#B001011
 11

	)

76 
	#B0001011
 11

	)

77 
	#B00001011
 11

	)

78 
	#B1100
 12

	)

79 
	#B01100
 12

	)

80 
	#B001100
 12

	)

81 
	#B0001100
 12

	)

82 
	#B00001100
 12

	)

83 
	#B1101
 13

	)

84 
	#B01101
 13

	)

85 
	#B001101
 13

	)

86 
	#B0001101
 13

	)

87 
	#B00001101
 13

	)

88 
	#B1110
 14

	)

89 
	#B01110
 14

	)

90 
	#B001110
 14

	)

91 
	#B0001110
 14

	)

92 
	#B00001110
 14

	)

93 
	#B1111
 15

	)

94 
	#B01111
 15

	)

95 
	#B001111
 15

	)

96 
	#B0001111
 15

	)

97 
	#B00001111
 15

	)

98 
	#B10000
 16

	)

99 
	#B010000
 16

	)

100 
	#B0010000
 16

	)

101 
	#B00010000
 16

	)

102 
	#B10001
 17

	)

103 
	#B010001
 17

	)

104 
	#B0010001
 17

	)

105 
	#B00010001
 17

	)

106 
	#B10010
 18

	)

107 
	#B010010
 18

	)

108 
	#B0010010
 18

	)

109 
	#B00010010
 18

	)

110 
	#B10011
 19

	)

111 
	#B010011
 19

	)

112 
	#B0010011
 19

	)

113 
	#B00010011
 19

	)

114 
	#B10100
 20

	)

115 
	#B010100
 20

	)

116 
	#B0010100
 20

	)

117 
	#B00010100
 20

	)

118 
	#B10101
 21

	)

119 
	#B010101
 21

	)

120 
	#B0010101
 21

	)

121 
	#B00010101
 21

	)

122 
	#B10110
 22

	)

123 
	#B010110
 22

	)

124 
	#B0010110
 22

	)

125 
	#B00010110
 22

	)

126 
	#B10111
 23

	)

127 
	#B010111
 23

	)

128 
	#B0010111
 23

	)

129 
	#B00010111
 23

	)

130 
	#B11000
 24

	)

131 
	#B011000
 24

	)

132 
	#B0011000
 24

	)

133 
	#B00011000
 24

	)

134 
	#B11001
 25

	)

135 
	#B011001
 25

	)

136 
	#B0011001
 25

	)

137 
	#B00011001
 25

	)

138 
	#B11010
 26

	)

139 
	#B011010
 26

	)

140 
	#B0011010
 26

	)

141 
	#B00011010
 26

	)

142 
	#B11011
 27

	)

143 
	#B011011
 27

	)

144 
	#B0011011
 27

	)

145 
	#B00011011
 27

	)

146 
	#B11100
 28

	)

147 
	#B011100
 28

	)

148 
	#B0011100
 28

	)

149 
	#B00011100
 28

	)

150 
	#B11101
 29

	)

151 
	#B011101
 29

	)

152 
	#B0011101
 29

	)

153 
	#B00011101
 29

	)

154 
	#B11110
 30

	)

155 
	#B011110
 30

	)

156 
	#B0011110
 30

	)

157 
	#B00011110
 30

	)

158 
	#B11111
 31

	)

159 
	#B011111
 31

	)

160 
	#B0011111
 31

	)

161 
	#B00011111
 31

	)

162 
	#B100000
 32

	)

163 
	#B0100000
 32

	)

164 
	#B00100000
 32

	)

165 
	#B100001
 33

	)

166 
	#B0100001
 33

	)

167 
	#B00100001
 33

	)

168 
	#B100010
 34

	)

169 
	#B0100010
 34

	)

170 
	#B00100010
 34

	)

171 
	#B100011
 35

	)

172 
	#B0100011
 35

	)

173 
	#B00100011
 35

	)

174 
	#B100100
 36

	)

175 
	#B0100100
 36

	)

176 
	#B00100100
 36

	)

177 
	#B100101
 37

	)

178 
	#B0100101
 37

	)

179 
	#B00100101
 37

	)

180 
	#B100110
 38

	)

181 
	#B0100110
 38

	)

182 
	#B00100110
 38

	)

183 
	#B100111
 39

	)

184 
	#B0100111
 39

	)

185 
	#B00100111
 39

	)

186 
	#B101000
 40

	)

187 
	#B0101000
 40

	)

188 
	#B00101000
 40

	)

189 
	#B101001
 41

	)

190 
	#B0101001
 41

	)

191 
	#B00101001
 41

	)

192 
	#B101010
 42

	)

193 
	#B0101010
 42

	)

194 
	#B00101010
 42

	)

195 
	#B101011
 43

	)

196 
	#B0101011
 43

	)

197 
	#B00101011
 43

	)

198 
	#B101100
 44

	)

199 
	#B0101100
 44

	)

200 
	#B00101100
 44

	)

201 
	#B101101
 45

	)

202 
	#B0101101
 45

	)

203 
	#B00101101
 45

	)

204 
	#B101110
 46

	)

205 
	#B0101110
 46

	)

206 
	#B00101110
 46

	)

207 
	#B101111
 47

	)

208 
	#B0101111
 47

	)

209 
	#B00101111
 47

	)

210 
	#B110000
 48

	)

211 
	#B0110000
 48

	)

212 
	#B00110000
 48

	)

213 
	#B110001
 49

	)

214 
	#B0110001
 49

	)

215 
	#B00110001
 49

	)

216 
	#B110010
 50

	)

217 
	#B0110010
 50

	)

218 
	#B00110010
 50

	)

219 
	#B110011
 51

	)

220 
	#B0110011
 51

	)

221 
	#B00110011
 51

	)

222 
	#B110100
 52

	)

223 
	#B0110100
 52

	)

224 
	#B00110100
 52

	)

225 
	#B110101
 53

	)

226 
	#B0110101
 53

	)

227 
	#B00110101
 53

	)

228 
	#B110110
 54

	)

229 
	#B0110110
 54

	)

230 
	#B00110110
 54

	)

231 
	#B110111
 55

	)

232 
	#B0110111
 55

	)

233 
	#B00110111
 55

	)

234 
	#B111000
 56

	)

235 
	#B0111000
 56

	)

236 
	#B00111000
 56

	)

237 
	#B111001
 57

	)

238 
	#B0111001
 57

	)

239 
	#B00111001
 57

	)

240 
	#B111010
 58

	)

241 
	#B0111010
 58

	)

242 
	#B00111010
 58

	)

243 
	#B111011
 59

	)

244 
	#B0111011
 59

	)

245 
	#B00111011
 59

	)

246 
	#B111100
 60

	)

247 
	#B0111100
 60

	)

248 
	#B00111100
 60

	)

249 
	#B111101
 61

	)

250 
	#B0111101
 61

	)

251 
	#B00111101
 61

	)

252 
	#B111110
 62

	)

253 
	#B0111110
 62

	)

254 
	#B00111110
 62

	)

255 
	#B111111
 63

	)

256 
	#B0111111
 63

	)

257 
	#B00111111
 63

	)

258 
	#B1000000
 64

	)

259 
	#B01000000
 64

	)

260 
	#B1000001
 65

	)

261 
	#B01000001
 65

	)

262 
	#B1000010
 66

	)

263 
	#B01000010
 66

	)

264 
	#B1000011
 67

	)

265 
	#B01000011
 67

	)

266 
	#B1000100
 68

	)

267 
	#B01000100
 68

	)

268 
	#B1000101
 69

	)

269 
	#B01000101
 69

	)

270 
	#B1000110
 70

	)

271 
	#B01000110
 70

	)

272 
	#B1000111
 71

	)

273 
	#B01000111
 71

	)

274 
	#B1001000
 72

	)

275 
	#B01001000
 72

	)

276 
	#B1001001
 73

	)

277 
	#B01001001
 73

	)

278 
	#B1001010
 74

	)

279 
	#B01001010
 74

	)

280 
	#B1001011
 75

	)

281 
	#B01001011
 75

	)

282 
	#B1001100
 76

	)

283 
	#B01001100
 76

	)

284 
	#B1001101
 77

	)

285 
	#B01001101
 77

	)

286 
	#B1001110
 78

	)

287 
	#B01001110
 78

	)

288 
	#B1001111
 79

	)

289 
	#B01001111
 79

	)

290 
	#B1010000
 80

	)

291 
	#B01010000
 80

	)

292 
	#B1010001
 81

	)

293 
	#B01010001
 81

	)

294 
	#B1010010
 82

	)

295 
	#B01010010
 82

	)

296 
	#B1010011
 83

	)

297 
	#B01010011
 83

	)

298 
	#B1010100
 84

	)

299 
	#B01010100
 84

	)

300 
	#B1010101
 85

	)

301 
	#B01010101
 85

	)

302 
	#B1010110
 86

	)

303 
	#B01010110
 86

	)

304 
	#B1010111
 87

	)

305 
	#B01010111
 87

	)

306 
	#B1011000
 88

	)

307 
	#B01011000
 88

	)

308 
	#B1011001
 89

	)

309 
	#B01011001
 89

	)

310 
	#B1011010
 90

	)

311 
	#B01011010
 90

	)

312 
	#B1011011
 91

	)

313 
	#B01011011
 91

	)

314 
	#B1011100
 92

	)

315 
	#B01011100
 92

	)

316 
	#B1011101
 93

	)

317 
	#B01011101
 93

	)

318 
	#B1011110
 94

	)

319 
	#B01011110
 94

	)

320 
	#B1011111
 95

	)

321 
	#B01011111
 95

	)

322 
	#B1100000
 96

	)

323 
	#B01100000
 96

	)

324 
	#B1100001
 97

	)

325 
	#B01100001
 97

	)

326 
	#B1100010
 98

	)

327 
	#B01100010
 98

	)

328 
	#B1100011
 99

	)

329 
	#B01100011
 99

	)

330 
	#B1100100
 100

	)

331 
	#B01100100
 100

	)

332 
	#B1100101
 101

	)

333 
	#B01100101
 101

	)

334 
	#B1100110
 102

	)

335 
	#B01100110
 102

	)

336 
	#B1100111
 103

	)

337 
	#B01100111
 103

	)

338 
	#B1101000
 104

	)

339 
	#B01101000
 104

	)

340 
	#B1101001
 105

	)

341 
	#B01101001
 105

	)

342 
	#B1101010
 106

	)

343 
	#B01101010
 106

	)

344 
	#B1101011
 107

	)

345 
	#B01101011
 107

	)

346 
	#B1101100
 108

	)

347 
	#B01101100
 108

	)

348 
	#B1101101
 109

	)

349 
	#B01101101
 109

	)

350 
	#B1101110
 110

	)

351 
	#B01101110
 110

	)

352 
	#B1101111
 111

	)

353 
	#B01101111
 111

	)

354 
	#B1110000
 112

	)

355 
	#B01110000
 112

	)

356 
	#B1110001
 113

	)

357 
	#B01110001
 113

	)

358 
	#B1110010
 114

	)

359 
	#B01110010
 114

	)

360 
	#B1110011
 115

	)

361 
	#B01110011
 115

	)

362 
	#B1110100
 116

	)

363 
	#B01110100
 116

	)

364 
	#B1110101
 117

	)

365 
	#B01110101
 117

	)

366 
	#B1110110
 118

	)

367 
	#B01110110
 118

	)

368 
	#B1110111
 119

	)

369 
	#B01110111
 119

	)

370 
	#B1111000
 120

	)

371 
	#B01111000
 120

	)

372 
	#B1111001
 121

	)

373 
	#B01111001
 121

	)

374 
	#B1111010
 122

	)

375 
	#B01111010
 122

	)

376 
	#B1111011
 123

	)

377 
	#B01111011
 123

	)

378 
	#B1111100
 124

	)

379 
	#B01111100
 124

	)

380 
	#B1111101
 125

	)

381 
	#B01111101
 125

	)

382 
	#B1111110
 126

	)

383 
	#B01111110
 126

	)

384 
	#B1111111
 127

	)

385 
	#B01111111
 127

	)

386 
	#B10000000
 128

	)

387 
	#B10000001
 129

	)

388 
	#B10000010
 130

	)

389 
	#B10000011
 131

	)

390 
	#B10000100
 132

	)

391 
	#B10000101
 133

	)

392 
	#B10000110
 134

	)

393 
	#B10000111
 135

	)

394 
	#B10001000
 136

	)

395 
	#B10001001
 137

	)

396 
	#B10001010
 138

	)

397 
	#B10001011
 139

	)

398 
	#B10001100
 140

	)

399 
	#B10001101
 141

	)

400 
	#B10001110
 142

	)

401 
	#B10001111
 143

	)

402 
	#B10010000
 144

	)

403 
	#B10010001
 145

	)

404 
	#B10010010
 146

	)

405 
	#B10010011
 147

	)

406 
	#B10010100
 148

	)

407 
	#B10010101
 149

	)

408 
	#B10010110
 150

	)

409 
	#B10010111
 151

	)

410 
	#B10011000
 152

	)

411 
	#B10011001
 153

	)

412 
	#B10011010
 154

	)

413 
	#B10011011
 155

	)

414 
	#B10011100
 156

	)

415 
	#B10011101
 157

	)

416 
	#B10011110
 158

	)

417 
	#B10011111
 159

	)

418 
	#B10100000
 160

	)

419 
	#B10100001
 161

	)

420 
	#B10100010
 162

	)

421 
	#B10100011
 163

	)

422 
	#B10100100
 164

	)

423 
	#B10100101
 165

	)

424 
	#B10100110
 166

	)

425 
	#B10100111
 167

	)

426 
	#B10101000
 168

	)

427 
	#B10101001
 169

	)

428 
	#B10101010
 170

	)

429 
	#B10101011
 171

	)

430 
	#B10101100
 172

	)

431 
	#B10101101
 173

	)

432 
	#B10101110
 174

	)

433 
	#B10101111
 175

	)

434 
	#B10110000
 176

	)

435 
	#B10110001
 177

	)

436 
	#B10110010
 178

	)

437 
	#B10110011
 179

	)

438 
	#B10110100
 180

	)

439 
	#B10110101
 181

	)

440 
	#B10110110
 182

	)

441 
	#B10110111
 183

	)

442 
	#B10111000
 184

	)

443 
	#B10111001
 185

	)

444 
	#B10111010
 186

	)

445 
	#B10111011
 187

	)

446 
	#B10111100
 188

	)

447 
	#B10111101
 189

	)

448 
	#B10111110
 190

	)

449 
	#B10111111
 191

	)

450 
	#B11000000
 192

	)

451 
	#B11000001
 193

	)

452 
	#B11000010
 194

	)

453 
	#B11000011
 195

	)

454 
	#B11000100
 196

	)

455 
	#B11000101
 197

	)

456 
	#B11000110
 198

	)

457 
	#B11000111
 199

	)

458 
	#B11001000
 200

	)

459 
	#B11001001
 201

	)

460 
	#B11001010
 202

	)

461 
	#B11001011
 203

	)

462 
	#B11001100
 204

	)

463 
	#B11001101
 205

	)

464 
	#B11001110
 206

	)

465 
	#B11001111
 207

	)

466 
	#B11010000
 208

	)

467 
	#B11010001
 209

	)

468 
	#B11010010
 210

	)

469 
	#B11010011
 211

	)

470 
	#B11010100
 212

	)

471 
	#B11010101
 213

	)

472 
	#B11010110
 214

	)

473 
	#B11010111
 215

	)

474 
	#B11011000
 216

	)

475 
	#B11011001
 217

	)

476 
	#B11011010
 218

	)

477 
	#B11011011
 219

	)

478 
	#B11011100
 220

	)

479 
	#B11011101
 221

	)

480 
	#B11011110
 222

	)

481 
	#B11011111
 223

	)

482 
	#B11100000
 224

	)

483 
	#B11100001
 225

	)

484 
	#B11100010
 226

	)

485 
	#B11100011
 227

	)

486 
	#B11100100
 228

	)

487 
	#B11100101
 229

	)

488 
	#B11100110
 230

	)

489 
	#B11100111
 231

	)

490 
	#B11101000
 232

	)

491 
	#B11101001
 233

	)

492 
	#B11101010
 234

	)

493 
	#B11101011
 235

	)

494 
	#B11101100
 236

	)

495 
	#B11101101
 237

	)

496 
	#B11101110
 238

	)

497 
	#B11101111
 239

	)

498 
	#B11110000
 240

	)

499 
	#B11110001
 241

	)

500 
	#B11110010
 242

	)

501 
	#B11110011
 243

	)

502 
	#B11110100
 244

	)

503 
	#B11110101
 245

	)

504 
	#B11110110
 246

	)

505 
	#B11110111
 247

	)

506 
	#B11111000
 248

	)

507 
	#B11111001
 249

	)

508 
	#B11111010
 250

	)

509 
	#B11111011
 251

	)

510 
	#B11111100
 252

	)

511 
	#B11111101
 253

	)

512 
	#B11111110
 254

	)

513 
	#B11111111
 255

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/main.cpp

1 
	~<Arduöo.h
>

3 
	$maö
()

5 
	`öô
();

7 #i‡
	`deföed
(
USBCON
)

8 
USBDevi˚
.
	`©èch
();

11 
	`£tup
();

14 
	`lo›
();

15 i‡(
£rülEvítRun
Ë
	`£rülEvítRun
();

19 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/new.cpp

1 
	~<√w.h
>

3 * 
›î©‹
 
	$√w
(
size_t
 
size
)

5  
	`mÆloc
(
size
);

6 
	}
}

8 
›î©‹
 
	$dñëe
(* 
±r
)

10 
	`‰ì
(
±r
);

11 
	}
}

13 
	$__cxa_gu¨d_acquúe
(
__gu¨d
 *
g
Ë{ !*(*)(g);
	}
};

14 
	$__cxa_gu¨d_ªÀa£
 (
__gu¨d
 *
g
Ë{*(*)g = 1;
	}
};

15 
	$__cxa_gu¨d_ab‹t
 (
__gu¨d
 *Ë{
	}
};

17 
	$__cxa_puª_vútuÆ
(Ë{
	}
};

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/new.h

5 #i‚de‡
NEW_H


6 
	#NEW_H


	)

8 
	~<°dlib.h
>

10 * 
›î©‹
 
√w
(
size_t
 
size
);

11 
›î©‹
 
dñëe
(* 
±r
);

13 
__exãnsi⁄__
 
	t__gu¨d
 
	t__©åibuã__
((
	tmode
 (
	t__DI__
)));

15 "C" 
__cxa_gu¨d_acquúe
(
__gu¨d
 *);

16 "C" 
__cxa_gu¨d_ªÀa£
 (
__gu¨d
 *);

17 "C" 
__cxa_gu¨d_ab‹t
 (
__gu¨d
 *);

19 "C" 
__cxa_puª_vútuÆ
();

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/wiring.c

25 
	~"wúög_¥iv©e.h
"

29 
	#MICROSECONDS_PER_TIMER0_OVERFLOW
 (
	`˛ockCy˛esToMi¸o£c⁄ds
(64 * 256))

	)

32 
	#MILLIS_INC
 (
MICROSECONDS_PER_TIMER0_OVERFLOW
 / 1000)

	)

37 
	#FRACT_INC
 ((
MICROSECONDS_PER_TIMER0_OVERFLOW
 % 1000Ë>> 3)

	)

38 
	#FRACT_MAX
 (1000 >> 3)

	)

40 vﬁ©ûê
	gtimî0_ovîÊow_cou¡
 = 0;

41 vﬁ©ûê
	gtimî0_mûlis
 = 0;

42 
	gtimî0_‰a˘
 = 0;

44 #i‡
deföed
(
__AVR_ATtöy24__
Ë|| deföed(
__AVR_ATtöy44__
Ë|| deföed(
__AVR_ATtöy84__
)

45 
	$SIGNAL
(
TIM0_OVF_ve˘
)

47 
	$SIGNAL
(
TIMER0_OVF_ve˘
)

52 
m
 = 
timî0_mûlis
;

53 
f
 = 
timî0_‰a˘
;

55 
m
 +
MILLIS_INC
;

56 
f
 +
FRACT_INC
;

57 i‡(
f
 >
FRACT_MAX
) {

58 
f
 -
FRACT_MAX
;

59 
m
 += 1;

62 
timî0_‰a˘
 = 
f
;

63 
timî0_mûlis
 = 
m
;

64 
timî0_ovîÊow_cou¡
++;

65 
	}
}

67 
	$mûlis
()

69 
m
;

70 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

74 
	`˛i
();

75 
m
 = 
timî0_mûlis
;

76 
SREG
 = 
ﬁdSREG
;

78  
m
;

79 
	}
}

81 
	$mi¸os
() {

82 
m
;

83 
uöt8_t
 
ﬁdSREG
 = 
SREG
, 
t
;

85 
	`˛i
();

86 
m
 = 
timî0_ovîÊow_cou¡
;

87 #i‡
	`deföed
(
TCNT0
)

88 
t
 = 
TCNT0
;

89 #ñi‡
	`deföed
(
TCNT0L
)

90 
t
 = 
TCNT0L
;

92 #îr‹ 
TIMER
 0 
nŸ
 
deföed


96 #ifde‡
TIFR0


97 i‡((
TIFR0
 & 
	`_BV
(
TOV0
)Ë&& (
t
 < 255))

98 
m
++;

100 i‡((
TIFR
 & 
	`_BV
(
TOV0
)Ë&& (
t
 < 255))

101 
m
++;

104 
SREG
 = 
ﬁdSREG
;

106  ((
m
 << 8Ë+ 
t
Ë* (64 / 
	`˛ockCy˛esPîMi¸o£c⁄d
());

107 
	}
}

109 
	$dñay
(
ms
)

111 
uöt16_t
 
°¨t
 = (uöt16_t)
	`mi¸os
();

113 
ms
 > 0) {

114 i‡(((
uöt16_t
)
	`mi¸os
(Ë- 
°¨t
) >= 1000) {

115 
ms
--;

116 
°¨t
 += 1000;

119 
	}
}

122 
	$dñayMi¸o£c⁄ds
(
us
)

127 #i‡
F_CPU
 >= 20000000L

132 
__asm__
 
	`__vﬁ©ûe__
 (

135 i‡(--
us
 == 0)

141 
us
 = (us<<2) + us;

144 
us
 -= 2;

146 #ñi‡
F_CPU
 >= 16000000L

151 i‡(--
us
 == 0)

157 
us
 <<= 2;

160 
us
 -= 2;

167 i‡(--
us
 == 0)

169 i‡(--
us
 == 0)

175 
us
 <<= 1;

179 
us
--;

183 
__asm__
 
	`__vﬁ©ûe__
 (

185 "b∫ê1b" : "=w" (
us
) : "0" (us)

187 
	}
}

189 
	$öô
()

193 
	`£i
();

198 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
WGM01
)

199 
	`sbi
(
TCCR0A
, 
WGM01
);

200 
	`sbi
(
TCCR0A
, 
WGM00
);

204 #i‡
	`deföed
(
__AVR_ATmega128__
)

206 
	`sbi
(
TCCR0
, 
CS02
);

207 #ñi‡
	`deföed
(
TCCR0
Ë&& deföed(
CS01
Ë&& deföed(
CS00
)

209 
	`sbi
(
TCCR0
, 
CS01
);

210 
	`sbi
(
TCCR0
, 
CS00
);

211 #ñi‡
	`deföed
(
TCCR0B
Ë&& deföed(
CS01
Ë&& deföed(
CS00
)

213 
	`sbi
(
TCCR0B
, 
CS01
);

214 
	`sbi
(
TCCR0B
, 
CS00
);

215 #ñi‡
	`deföed
(
TCCR0A
Ë&& deföed(
CS01
Ë&& deföed(
CS00
)

217 
	`sbi
(
TCCR0A
, 
CS01
);

218 
	`sbi
(
TCCR0A
, 
CS00
);

220 #îr‹ 
Timî
 0 
¥esˇÀ
 
Á˘‹
 64 
nŸ
 
£t
 
c‹ª˘ly


224 #i‡
	`deföed
(
TIMSK
Ë&& deföed(
TOIE0
)

225 
	`sbi
(
TIMSK
, 
TOIE0
);

226 #ñi‡
	`deföed
(
TIMSK0
Ë&& deföed(
TOIE0
)

227 
	`sbi
(
TIMSK0
, 
TOIE0
);

229 #îr‹ 
Timî
 0 
ovîÊow
 
öãºu±
 
nŸ
 
£t
 
c‹ª˘ly


237 #i‡
	`deföed
(
TCCR1B
Ë&& deföed(
CS11
Ë&& deföed(
CS10
)

238 
TCCR1B
 = 0;

241 
	`sbi
(
TCCR1B
, 
CS11
);

242 #i‡
F_CPU
 >= 8000000L

243 
	`sbi
(
TCCR1B
, 
CS10
);

245 #ñi‡
	`deföed
(
TCCR1
Ë&& deföed(
CS11
Ë&& deföed(
CS10
)

246 
	`sbi
(
TCCR1
, 
CS11
);

247 #i‡
F_CPU
 >= 8000000L

248 
	`sbi
(
TCCR1
, 
CS10
);

252 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
WGM10
)

253 
	`sbi
(
TCCR1A
, 
WGM10
);

254 #ñi‡
	`deföed
(
TCCR1
)

255 #w¨nög 
this
 
√eds
 
to
 
be
 
föished


259 #i‡
	`deföed
(
TCCR2
Ë&& deföed(
CS22
)

260 
	`sbi
(
TCCR2
, 
CS22
);

261 #ñi‡
	`deföed
(
TCCR2B
Ë&& deföed(
CS22
)

262 
	`sbi
(
TCCR2B
, 
CS22
);

264 #w¨nög 
Timî
 2 
nŸ
 
	`föished
 (
may
ÇŸ 
be
 
¥e£¡
 
⁄
 
this
 
CPU
)

268 #i‡
	`deföed
(
TCCR2
Ë&& deföed(
WGM20
)

269 
	`sbi
(
TCCR2
, 
WGM20
);

270 #ñi‡
	`deföed
(
TCCR2A
Ë&& deföed(
WGM20
)

271 
	`sbi
(
TCCR2A
, 
WGM20
);

273 #w¨nög 
Timî
 2 
nŸ
 
	`föished
 (
may
ÇŸ 
be
 
¥e£¡
 
⁄
 
this
 
CPU
)

276 #i‡
	`deföed
(
TCCR3B
Ë&& deföed(
CS31
Ë&& deföed(
WGM30
)

277 
	`sbi
(
TCCR3B
, 
CS31
);

278 
	`sbi
(
TCCR3B
, 
CS30
);

279 
	`sbi
(
TCCR3A
, 
WGM30
);

282 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
TCCR4B
Ë&& deföed(
TCCR4D
)

283 
	`sbi
(
TCCR4B
, 
CS42
);

284 
	`sbi
(
TCCR4B
, 
CS41
);

285 
	`sbi
(
TCCR4B
, 
CS40
);

286 
	`sbi
(
TCCR4D
, 
WGM40
);

287 
	`sbi
(
TCCR4A
, 
PWM4A
);

288 
	`sbi
(
TCCR4C
, 
PWM4D
);

290 #i‡
	`deföed
(
TCCR4B
Ë&& deföed(
CS41
Ë&& deföed(
WGM40
)

291 
	`sbi
(
TCCR4B
, 
CS41
);

292 
	`sbi
(
TCCR4B
, 
CS40
);

293 
	`sbi
(
TCCR4A
, 
WGM40
);

297 #i‡
	`deföed
(
TCCR5B
Ë&& deföed(
CS51
Ë&& deföed(
WGM50
)

298 
	`sbi
(
TCCR5B
, 
CS51
);

299 
	`sbi
(
TCCR5B
, 
CS50
);

300 
	`sbi
(
TCCR5A
, 
WGM50
);

303 #i‡
	`deföed
(
ADCSRA
)

308 
	`sbi
(
ADCSRA
, 
ADPS2
);

309 
	`sbi
(
ADCSRA
, 
ADPS1
);

310 
	`sbi
(
ADCSRA
, 
ADPS0
);

313 
	`sbi
(
ADCSRA
, 
ADEN
);

319 #i‡
	`deföed
(
UCSRB
)

320 
UCSRB
 = 0;

321 #ñi‡
	`deföed
(
UCSR0B
)

322 
UCSR0B
 = 0;

324 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/wiring_analog.c

27 
	~"wúög_¥iv©e.h
"

28 
	~"pös_¨duöo.h
"

30 
uöt8_t
 
	g™Æog_ª„ªn˚
 = 
DEFAULT
;

32 
	$™ÆogRe„ªn˚
(
uöt8_t
 
mode
)

37 
™Æog_ª„ªn˚
 = 
mode
;

38 
	}
}

40 
	$™ÆogRód
(
uöt8_t
 
pö
)

42 
uöt8_t
 
low
, 
high
;

44 #i‡
	`deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega2560__
)

45 i‡(
pö
 >= 54)Öin -= 54;

46 #ñi‡
	`deföed
(
__AVR_ATmega32U4__
)

47 i‡(
pö
 >= 18)Öin -= 18;

48 #ñi‡
	`deföed
(
__AVR_ATmega1284P__
Ë|| deföed(
__AVR_ATmega644P__
)

49 i‡(
pö
 >= 24)Öin -= 24;

51 i‡(
pö
 >= 14)Öin -= 14;

54 #i‡
	`deföed
(
__AVR_ATmega32U4__
)

55 
pö
 = 
	`™ÆogPöToCh™√l
(pin);

56 
ADCSRB
 = (ADCSRB & ~(1 << 
MUX5
)Ë| (((
pö
 >> 3) & 0x01) << MUX5);

57 #ñi‡
	`deföed
(
ADCSRB
Ë&& deföed(
MUX5
)

60 
ADCSRB
 = (ADCSRB & ~(1 << 
MUX5
)Ë| (((
pö
 >> 3) & 0x01) << MUX5);

66 #i‡
	`deföed
(
ADMUX
)

67 
ADMUX
 = (
™Æog_ª„ªn˚
 << 6Ë| (
pö
 & 0x07);

73 #i‡
	`deföed
(
ADCSRA
Ë&& deföed(
ADCL
)

75 
	`sbi
(
ADCSRA
, 
ADSC
);

78 
	`bô_is_£t
(
ADCSRA
, 
ADSC
));

84 
low
 = 
ADCL
;

85 
high
 = 
ADCH
;

88 
low
 = 0;

89 
high
 = 0;

93  (
high
 << 8Ë| 
low
;

94 
	}
}

100 
	$™ÆogWrôe
(
uöt8_t
 
pö
, 
vÆ
)

107 
	`pöMode
(
pö
, 
OUTPUT
);

108 i‡(
vÆ
 == 0)

110 
	`digôÆWrôe
(
pö
, 
LOW
);

112 i‡(
vÆ
 == 255)

114 
	`digôÆWrôe
(
pö
, 
HIGH
);

118 
	`digôÆPöToTimî
(
pö
))

121 #i‡
	`deföed
(
TCCR0
Ë&& deföed(
COM00
Ë&& !deföed(
__AVR_ATmega8__
)

122 
TIMER0A
:

124 
	`sbi
(
TCCR0
, 
COM00
);

125 
OCR0
 = 
vÆ
;

129 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
COM0A1
)

130 
TIMER0A
:

132 
	`sbi
(
TCCR0A
, 
COM0A1
);

133 
OCR0A
 = 
vÆ
;

137 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
COM0B1
)

138 
TIMER0B
:

140 
	`sbi
(
TCCR0A
, 
COM0B1
);

141 
OCR0B
 = 
vÆ
;

145 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
COM1A1
)

146 
TIMER1A
:

148 
	`sbi
(
TCCR1A
, 
COM1A1
);

149 
OCR1A
 = 
vÆ
;

153 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
COM1B1
)

154 
TIMER1B
:

156 
	`sbi
(
TCCR1A
, 
COM1B1
);

157 
OCR1B
 = 
vÆ
;

161 #i‡
	`deföed
(
TCCR2
Ë&& deföed(
COM21
)

162 
TIMER2
:

164 
	`sbi
(
TCCR2
, 
COM21
);

165 
OCR2
 = 
vÆ
;

169 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
COM2A1
)

170 
TIMER2A
:

172 
	`sbi
(
TCCR2A
, 
COM2A1
);

173 
OCR2A
 = 
vÆ
;

177 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
COM2B1
)

178 
TIMER2B
:

180 
	`sbi
(
TCCR2A
, 
COM2B1
);

181 
OCR2B
 = 
vÆ
;

185 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3A1
)

186 
TIMER3A
:

188 
	`sbi
(
TCCR3A
, 
COM3A1
);

189 
OCR3A
 = 
vÆ
;

193 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3B1
)

194 
TIMER3B
:

196 
	`sbi
(
TCCR3A
, 
COM3B1
);

197 
OCR3B
 = 
vÆ
;

201 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3C1
)

202 
TIMER3C
:

204 
	`sbi
(
TCCR3A
, 
COM3C1
);

205 
OCR3C
 = 
vÆ
;

209 #i‡
	`deföed
(
TCCR4A
)

210 
TIMER4A
:

212 
	`sbi
(
TCCR4A
, 
COM4A1
);

213 #i‡
	`deföed
(
COM4A0
)

214 
	`cbi
(
TCCR4A
, 
COM4A0
);

216 
OCR4A
 = 
vÆ
;

220 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4B1
)

221 
TIMER4B
:

223 
	`sbi
(
TCCR4A
, 
COM4B1
);

224 
OCR4B
 = 
vÆ
;

228 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4C1
)

229 
TIMER4C
:

231 
	`sbi
(
TCCR4A
, 
COM4C1
);

232 
OCR4C
 = 
vÆ
;

236 #i‡
	`deföed
(
TCCR4C
Ë&& deföed(
COM4D1
)

237 
TIMER4D
:

239 
	`sbi
(
TCCR4C
, 
COM4D1
);

240 #i‡
	`deföed
(
COM4D0
)

241 
	`cbi
(
TCCR4C
, 
COM4D0
);

243 
OCR4D
 = 
vÆ
;

248 #i‡
	`deföed
(
TCCR5A
Ë&& deföed(
COM5A1
)

249 
TIMER5A
:

251 
	`sbi
(
TCCR5A
, 
COM5A1
);

252 
OCR5A
 = 
vÆ
;

256 #i‡
	`deföed
(
TCCR5A
Ë&& deföed(
COM5B1
)

257 
TIMER5B
:

259 
	`sbi
(
TCCR5A
, 
COM5B1
);

260 
OCR5B
 = 
vÆ
;

264 #i‡
	`deföed
(
TCCR5A
Ë&& deföed(
COM5C1
)

265 
TIMER5C
:

267 
	`sbi
(
TCCR5A
, 
COM5C1
);

268 
OCR5C
 = 
vÆ
;

272 
NOT_ON_TIMER
:

274 i‡(
vÆ
 < 128) {

275 
	`digôÆWrôe
(
pö
, 
LOW
);

277 
	`digôÆWrôe
(
pö
, 
HIGH
);

281 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/wiring_digital.c

27 
	#ARDUINO_MAIN


	)

28 
	~"wúög_¥iv©e.h
"

29 
	~"pös_¨duöo.h
"

31 
	$pöMode
(
uöt8_t
 
pö
, uöt8_à
mode
)

33 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

34 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

35 vﬁ©ûê
uöt8_t
 *
ªg
, *
out
;

37 i‡(
p‹t
 =
NOT_A_PIN
) ;

40 
ªg
 = 
	`p‹tModeRegi°î
(
p‹t
);

41 
out
 = 
	`p‹tOuçutRegi°î
(
p‹t
);

43 i‡(
mode
 =
INPUT
) {

44 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

45 
	`˛i
();

46 *
ªg
 &~
bô
;

47 *
out
 &~
bô
;

48 
SREG
 = 
ﬁdSREG
;

49 } i‡(
mode
 =
INPUT_PULLUP
) {

50 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

51 
	`˛i
();

52 *
ªg
 &~
bô
;

53 *
out
 |
bô
;

54 
SREG
 = 
ﬁdSREG
;

56 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

57 
	`˛i
();

58 *
ªg
 |
bô
;

59 
SREG
 = 
ﬁdSREG
;

61 
	}
}

77 
	$tu∫OffPWM
(
uöt8_t
 
timî
)

79 
timî
)

81 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
COM1A1
)

82 
TIMER1A
: 
	`cbi
(
TCCR1A
, 
COM1A1
); ;

84 #i‡
	`deföed
(
TCCR1A
Ë&& deföed(
COM1B1
)

85 
TIMER1B
: 
	`cbi
(
TCCR1A
, 
COM1B1
); ;

88 #i‡
	`deföed
(
TCCR2
Ë&& deföed(
COM21
)

89 
TIMER2
: 
	`cbi
(
TCCR2
, 
COM21
); ;

92 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
COM0A1
)

93 
TIMER0A
: 
	`cbi
(
TCCR0A
, 
COM0A1
); ;

96 #i‡
	`deföed
(
TIMER0B
Ë&& deföed(
COM0B1
)

97 
TIMER0B
: 
	`cbi
(
TCCR0A
, 
COM0B1
); ;

99 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
COM2A1
)

100 
TIMER2A
: 
	`cbi
(
TCCR2A
, 
COM2A1
); ;

102 #i‡
	`deföed
(
TCCR2A
Ë&& deföed(
COM2B1
)

103 
TIMER2B
: 
	`cbi
(
TCCR2A
, 
COM2B1
); ;

106 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3A1
)

107 
TIMER3A
: 
	`cbi
(
TCCR3A
, 
COM3A1
); ;

109 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3B1
)

110 
TIMER3B
: 
	`cbi
(
TCCR3A
, 
COM3B1
); ;

112 #i‡
	`deföed
(
TCCR3A
Ë&& deföed(
COM3C1
)

113 
TIMER3C
: 
	`cbi
(
TCCR3A
, 
COM3C1
); ;

116 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4A1
)

117 
TIMER4A
: 
	`cbi
(
TCCR4A
, 
COM4A1
); ;

119 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4B1
)

120 
TIMER4B
: 
	`cbi
(
TCCR4A
, 
COM4B1
); ;

122 #i‡
	`deföed
(
TCCR4A
Ë&& deföed(
COM4C1
)

123 
TIMER4C
: 
	`cbi
(
TCCR4A
, 
COM4C1
); ;

125 #i‡
	`deföed
(
TCCR4C
Ë&& deföed(
COM4D1
)

126 
TIMER4D
: 
	`cbi
(
TCCR4C
, 
COM4D1
); ;

129 #i‡
	`deföed
(
TCCR5A
)

130 
TIMER5A
: 
	`cbi
(
TCCR5A
, 
COM5A1
); ;

131 
TIMER5B
: 
	`cbi
(
TCCR5A
, 
COM5B1
); ;

132 
TIMER5C
: 
	`cbi
(
TCCR5A
, 
COM5C1
); ;

135 
	}
}

137 
	$digôÆWrôe
(
uöt8_t
 
pö
, uöt8_à
vÆ
)

139 
uöt8_t
 
timî
 = 
	`digôÆPöToTimî
(
pö
);

140 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

141 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

142 vﬁ©ûê
uöt8_t
 *
out
;

144 i‡(
p‹t
 =
NOT_A_PIN
) ;

148 i‡(
timî
 !
NOT_ON_TIMER
Ë
	`tu∫OffPWM
(timer);

150 
out
 = 
	`p‹tOuçutRegi°î
(
p‹t
);

152 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

153 
	`˛i
();

155 i‡(
vÆ
 =
LOW
) {

156 *
out
 &~
bô
;

158 *
out
 |
bô
;

161 
SREG
 = 
ﬁdSREG
;

162 
	}
}

164 
	$digôÆRód
(
uöt8_t
 
pö
)

166 
uöt8_t
 
timî
 = 
	`digôÆPöToTimî
(
pö
);

167 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

168 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

170 i‡(
p‹t
 =
NOT_A_PIN
Ë 
LOW
;

174 i‡(
timî
 !
NOT_ON_TIMER
Ë
	`tu∫OffPWM
(timer);

176 i‡(*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë 
HIGH
;

177  
LOW
;

178 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/wiring_private.h

25 #i‚de‡
WúögPriv©e_h


26 
	#WúögPriv©e_h


	)

28 
	~<avr/io.h
>

29 
	~<avr/öãºu±.h
>

30 
	~<°dio.h
>

31 
	~<°d¨g.h
>

33 
	~"Arduöo.h
"

35 #ifde‡
__˝lu•lus


39 #i‚de‡
cbi


40 
	#cbi
(
s‰
, 
bô
Ë(
	`_SFR_BYTE
(s‰Ë&~
	`_BV
(bô))

	)

42 #i‚de‡
sbi


43 
	#sbi
(
s‰
, 
bô
Ë(
	`_SFR_BYTE
(s‰Ë|
	`_BV
(bô))

	)

46 
	#EXTERNAL_INT_0
 0

	)

47 
	#EXTERNAL_INT_1
 1

	)

48 
	#EXTERNAL_INT_2
 2

	)

49 
	#EXTERNAL_INT_3
 3

	)

50 
	#EXTERNAL_INT_4
 4

	)

51 
	#EXTERNAL_INT_5
 5

	)

52 
	#EXTERNAL_INT_6
 6

	)

53 
	#EXTERNAL_INT_7
 7

	)

55 #i‡
deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega2560__
)

56 
	#EXTERNAL_NUM_INTERRUPTS
 8

	)

57 #ñi‡
deföed
(
__AVR_ATmega1284P__
Ë|| deföed(
__AVR_ATmega644P__
)

58 
	#EXTERNAL_NUM_INTERRUPTS
 3

	)

59 #ñi‡
deföed
(
__AVR_ATmega32U4__
)

60 
	#EXTERNAL_NUM_INTERRUPTS
 4

	)

62 
	#EXTERNAL_NUM_INTERRUPTS
 2

	)

65 (*
voidFuncPå
)();

67 #ifde‡
__˝lu•lus


	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/wiring_pulse.c

25 
	~"wúög_¥iv©e.h
"

26 
	~"pös_¨duöo.h
"

32 
	$pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
)

37 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

38 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

39 
uöt8_t
 
°©eMask
 = (
°©e
 ? 
bô
 : 0);

40 
width
 = 0;

44 
numlo›s
 = 0;

45 
maxlo›s
 = 
	`mi¸o£c⁄dsToClockCy˛es
(
timeout
) / 16;

48 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë=
°©eMask
)

49 i‡(
numlo›s
++ =
maxlo›s
)

53 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë!
°©eMask
)

54 i‡(
numlo›s
++ =
maxlo›s
)

58 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë=
°©eMask
) {

59 i‡(
numlo›s
++ =
maxlo›s
)

61 
width
++;

68  
	`˛ockCy˛esToMi¸o£c⁄ds
(
width
 * 21 + 16);

69 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/wiring_shift.c

25 
	~"wúög_¥iv©e.h
"

27 
uöt8_t
 
	$shi·In
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
) {

28 
uöt8_t
 
vÆue
 = 0;

29 
uöt8_t
 
i
;

31 
i
 = 0; i < 8; ++i) {

32 
	`digôÆWrôe
(
˛ockPö
, 
HIGH
);

33 i‡(
bôOrdî
 =
LSBFIRST
)

34 
vÆue
 |
	`digôÆRód
(
d©aPö
Ë<< 
i
;

36 
vÆue
 |
	`digôÆRód
(
d©aPö
Ë<< (7 - 
i
);

37 
	`digôÆWrôe
(
˛ockPö
, 
LOW
);

39  
vÆue
;

40 
	}
}

42 
	$shi·Out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
, uöt8_à
vÆ
)

44 
uöt8_t
 
i
;

46 
i
 = 0; i < 8; i++) {

47 i‡(
bôOrdî
 =
LSBFIRST
)

48 
	`digôÆWrôe
(
d©aPö
, !!(
vÆ
 & (1 << 
i
)));

50 
	`digôÆWrôe
(
d©aPö
, !!(
vÆ
 & (1 << (7 - 
i
))));

52 
	`digôÆWrôe
(
˛ockPö
, 
HIGH
);

53 
	`digôÆWrôe
(
˛ockPö
, 
LOW
);

55 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/variants/standard/pins_arduino.h

30 #i‚de‡
Pös_Arduöo_h


31 
	#Pös_Arduöo_h


	)

33 
	~<avr/pgm•a˚.h
>

35 
	#NOT_A_PIN
 0

	)

36 
	#NOT_A_PORT
 0

	)

38 
	#NOT_ON_TIMER
 0

	)

39 
	#TIMER0A
 1

	)

40 
	#TIMER0B
 2

	)

41 
	#TIMER1A
 3

	)

42 
	#TIMER1B
 4

	)

43 
	#TIMER2
 5

	)

44 
	#TIMER2A
 6

	)

45 
	#TIMER2B
 7

	)

47 
	#TIMER3A
 8

	)

48 
	#TIMER3B
 9

	)

49 
	#TIMER3C
 10

	)

50 
	#TIMER4A
 11

	)

51 
	#TIMER4B
 12

	)

52 
	#TIMER4C
 13

	)

53 
	#TIMER4D
 14

	)

54 
	#TIMER5A
 15

	)

55 
	#TIMER5B
 16

	)

56 
	#TIMER5C
 17

	)

58 c⁄° 
uöt8_t
 
	gSS
 = 4;

59 c⁄° 
uöt8_t
 
	gMOSI
 = 5;

60 c⁄° 
uöt8_t
 
	gMISO
 = 6;

61 c⁄° 
uöt8_t
 
	gSCK
 = 7;

63 c⁄° 
uöt8_t
 
	gSDA
 = 17;

64 c⁄° 
uöt8_t
 
	gSCL
 = 16;

65 c⁄° 
uöt8_t
 
	gLED_BUILTIN
 = 13;

67 c⁄° 
uöt8_t
 
	gA0
 = 31;

68 c⁄° 
uöt8_t
 
	gA1
 = 30;

69 c⁄° 
uöt8_t
 
	gA2
 = 29;

70 c⁄° 
uöt8_t
 
	gA3
 = 28;

71 c⁄° 
uöt8_t
 
	gA4
 = 27;

72 c⁄° 
uöt8_t
 
	gA5
 = 26;

73 c⁄° 
uöt8_t
 
	gA6
 = 25;

74 c⁄° 
uöt8_t
 
	gA7
 = 24;

112 
	#NUM_DIGITAL_PINS
 24

	)

113 
	#NUM_ANALOG_INPUTS
 8

	)

114 
	#™ÆogI≈utToDigôÆPö
(
p
Ë(’ < 
NUM_ANALOG_INPUTS
Ë? 31 - (pË: -1)

	)

116 
	#digôÆPöHasPWM
(
p
Ë(’Ë=3 || (pË=4 || (pË=12 || (pË=13 || (pË=14 || (pË=15 )

	)

118 
	#digôÆPöToPCICR
(
p
Ë–((’Ë>0Ë&& (’Ë<31)Ë? (&
PCICR
Ë: ((
uöt8_t
 *)0Ë)

	)

120 
	#digôÆPöToPCICRbô
(
p
) ( (((p) >= 24) && ((p) <= 31)) ? 0 : \

121 –(((
p
) >= 0) && ((p) <= 7)) ? 1 : \

122 –(((
p
) >= 16) && ((p) <= 23)) ? 2 : \

123 –(((
p
) >= 8) && ((p) <= 15)) ? 3 : \

124 0 ) ) ) )

	)

126 
	#digôÆPöToPCMSK
(
p
Ë–((’Ë>24Ë&& (’Ë<31)Ë? (&
PCMSK0
) : \

127 –(((
p
Ë>0Ë&& (’Ë<7)Ë? (&
PCMSK1
) : \

128 –(((
p
Ë>16Ë&& (’Ë<23)Ë? (&
PCMSK2
) : \

129 –(((
p
Ë>8Ë&& (’Ë<15)Ë? (&
PCMSK3
) : \

130 ((
uöt8_t
 *)0ËËËË)

	)

133 
	#digôÆPöToPCMSKbô
(
p
) ( (((p) >= 24) && ((p) <= 31)) ? (31 - (p)) : \

134 –(((
p
) >= 0) && ((p) <= 7)) ? (p) : \

135 –(((
p
) >= 16) && ((p) <= 23)) ? ((p) - 16) : \

136 –(((
p
) >= 8) && ((p) <= 15)) ? ((p) - 8) : \

137 0 ) ) ) )

	)

139 
	#PA
 1

	)

140 
	#PB
 2

	)

141 
	#PC
 3

	)

142 
	#PD
 4

	)

143 
	#PE
 5

	)

144 
	#PF
 6

	)

145 
	#PG
 7

	)

146 
	#PH
 8

	)

147 
	#PJ
 10

	)

148 
	#PK
 11

	)

149 
	#PL
 12

	)

151 #ifde‡
ARDUINO_MAIN


155 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_mode_PGM
[] =

157 
NOT_A_PORT
,

158 (
uöt16_t
Ë&
DDRA
,

159 (
uöt16_t
Ë&
DDRB
,

160 (
uöt16_t
Ë&
DDRC
,

161 (
uöt16_t
Ë&
DDRD
,

164 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_ouçut_PGM
[] =

166 
NOT_A_PORT
,

167 (
uöt16_t
Ë&
PORTA
,

168 (
uöt16_t
Ë&
PORTB
,

169 (
uöt16_t
Ë&
PORTC
,

170 (
uöt16_t
Ë&
PORTD
,

172 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_öput_PGM
[] =

174 
NOT_A_PORT
,

175 (
uöt16_t
Ë&
PINA
,

176 (
uöt16_t
Ë&
PINB
,

177 (
uöt16_t
Ë&
PINC
,

178 (
uöt16_t
Ë&
PIND
,

180 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_p‹t_PGM
[] =

182 
PB
,

183 
PB
,

184 
PB
,

185 
PB
,

186 
PB
,

187 
PB
,

188 
PB
,

189 
PB
,

190 
PD
,

191 
PD
,

192 
PD
,

193 
PD
,

194 
PD
,

195 
PD
,

196 
PD
,

197 
PD
,

198 
PC
,

199 
PC
,

200 
PC
,

201 
PC
,

202 
PC
,

203 
PC
,

204 
PC
,

205 
PC
,

206 
PA
,

207 
PA
,

208 
PA
,

209 
PA
,

210 
PA
,

211 
PA
,

212 
PA
,

213 
PA


215 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_bô_mask_PGM
[] =

217 
_BV
(0),

218 
_BV
(1),

219 
_BV
(2),

220 
_BV
(3),

221 
_BV
(4),

222 
_BV
(5),

223 
_BV
(6),

224 
_BV
(7),

225 
_BV
(0),

226 
_BV
(1),

227 
_BV
(2),

228 
_BV
(3),

229 
_BV
(4),

230 
_BV
(5),

231 
_BV
(6),

232 
_BV
(7),

233 
_BV
(0),

234 
_BV
(1),

235 
_BV
(2),

236 
_BV
(3),

237 
_BV
(4),

238 
_BV
(5),

239 
_BV
(6),

240 
_BV
(7),

241 
_BV
(7),

242 
_BV
(6),

243 
_BV
(5),

244 
_BV
(4),

245 
_BV
(3),

246 
_BV
(2),

247 
_BV
(1),

248 
_BV
(0)

250 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_timî_PGM
[] =

252 
NOT_ON_TIMER
,

253 
NOT_ON_TIMER
,

254 
NOT_ON_TIMER
,

255 
TIMER0A
,

256 
TIMER0B
,

257 
NOT_ON_TIMER
,

258 
NOT_ON_TIMER
,

259 
NOT_ON_TIMER
,

260 
NOT_ON_TIMER
,

261 
NOT_ON_TIMER
,

262 
NOT_ON_TIMER
,

263 
NOT_ON_TIMER
,

264 
TIMER1B
,

265 
TIMER1A
,

266 
TIMER2B
,

267 
TIMER2A
,

268 
NOT_ON_TIMER
,

269 
NOT_ON_TIMER
,

270 
NOT_ON_TIMER
,

271 
NOT_ON_TIMER
,

272 
NOT_ON_TIMER
,

273 
NOT_ON_TIMER
,

274 
NOT_ON_TIMER
,

275 
NOT_ON_TIMER
,

276 
NOT_ON_TIMER
,

277 
NOT_ON_TIMER
,

278 
NOT_ON_TIMER
,

279 
NOT_ON_TIMER
,

280 
NOT_ON_TIMER
,

281 
NOT_ON_TIMER
,

282 
NOT_ON_TIMER
,

283 
NOT_ON_TIMER


	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/BlinkM.cpp

5 
	~"M¨lö.h
"

6 #ifde‡
BLINKM


8 #i‡(
ARDUINO
 >= 100)

9 
	~"Arduöo.h
"

11 
	~"WProgøm.h
"

14 
	~"BlökM.h
"

16 
	$SídCﬁ‹s
(
byã
 
ªd
, byã 
g∫
, byã 
blu
)

18 
Wúe
.
	`begö
();

19 
Wúe
.
	`begöTønsmissi⁄
(0x09);

20 
Wúe
.
	`wrôe
('o');

21 
Wúe
.
	`wrôe
('n');

22 
Wúe
.
	`wrôe
(
ªd
);

23 
Wúe
.
	`wrôe
(
g∫
);

24 
Wúe
.
	`wrôe
(
blu
);

25 
Wúe
.
	`ídTønsmissi⁄
();

26 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/BlinkM.h

5 #i‡(
ARDUINO
 >= 100)

6 
	~"Arduöo.h
"

8 
	~"WProgøm.h
"

11 
	~"Wúe.h
"

13 
SídCﬁ‹s
(
byã
 
ªd
, byã 
g∫
, byã 
blu
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/Configuration.h

1 #i‚de‡
CONFIGURATION_H


2 
	#CONFIGURATION_H


	)

4 
	~"bﬂrds.h
"

27 
	#STRING_VERSION_CONFIG_H
 
__DATE__
 " " 
__TIME__


28 
	#STRING_CONFIG_H_AUTHOR
 "(jcrocholl, Mini Kossel)"

29 

	)

33 
	#SERIAL_PORT
 0

	)

36 
	#BAUDRATE
 115200

	)

43 #i‚de‡
MOTHERBOARD


44 
	#MOTHERBOARD
 33

	)

48 
	#CUSTOM_MENDEL_NAME
 "Kos£l"

	)

55 
	#EXTRUDERS
 1

	)

61 
	#POWER_SUPPLY
 1

	)

70 
	#DELTA


	)

75 
	#DELTA_SEGMENTS_PER_SECOND
 160

	)

78 
	#DELTA_DIAGONAL_ROD
 213.5

79 

	)

81 
	#DELTA_SMOOTH_ROD_OFFSET
 143.275

82 

	)

84 
	#DELTA_EFFECTOR_OFFSET
 30.0

85 

	)

87 
	#DELTA_CARRIAGE_OFFSET
 30.0

88 

	)

90 
	#DELTA_RADIUS
 (
DELTA_SMOOTH_ROD_OFFSET
-
DELTA_EFFECTOR_OFFSET
-
DELTA_CARRIAGE_OFFSET
)

	)

93 
	#DELTA_PRINTABLE_RADIUS
 80.0

	)

96 
	#SIN_60
 0.8660254037844386

	)

97 
	#COS_60
 0.5

	)

98 
	#DELTA_TOWER1_X
 -
SIN_60
*
DELTA_RADIUS


99 
	#DELTA_TOWER1_Y
 -
COS_60
*
DELTA_RADIUS


	)

100 
	#DELTA_TOWER2_X
 
SIN_60
*
DELTA_RADIUS


101 
	#DELTA_TOWER2_Y
 -
COS_60
*
DELTA_RADIUS


	)

102 
	#DELTA_TOWER3_X
 0.0

103 
	#DELTA_TOWER3_Y
 
DELTA_RADIUS


	)

106 
	#DELTA_DIAGONAL_ROD_2
 
	`pow
(
DELTA_DIAGONAL_ROD
,2)

	)

146 
	#TEMP_SENSOR_0
 5

	)

147 
	#TEMP_SENSOR_1
 0

	)

148 
	#TEMP_SENSOR_2
 0

	)

149 
	#TEMP_SENSOR_BED
 0

	)

153 
	#MAX_REDUNDANT_TEMP_SENSOR_DIFF
 10

	)

156 
	#TEMP_RESIDENCY_TIME
 10

157 
	#TEMP_HYSTERESIS
 3

158 
	#TEMP_WINDOW
 1

159 

	)

163 
	#HEATER_0_MINTEMP
 5

	)

164 
	#HEATER_1_MINTEMP
 5

	)

165 
	#HEATER_2_MINTEMP
 5

	)

166 
	#BED_MINTEMP
 5

	)

171 
	#HEATER_0_MAXTEMP
 275

	)

172 
	#HEATER_1_MAXTEMP
 275

	)

173 
	#HEATER_2_MAXTEMP
 275

	)

174 
	#BED_MAXTEMP
 150

	)

187 
	#PIDTEMP


	)

188 
	#BANG_MAX
 255

189 
	#PID_MAX
 255

190 #ifde‡
PIDTEMP


	)

193 
	#PID_FUNCTIONAL_RANGE
 10

195 
	#PID_INTEGRAL_DRIVE_MAX
 255

196 
	#K1
 0.95

197 
	#PID_dT
 ((
OVERSAMPLENR
 * 10.0)/(
F_CPU
 / 64.0 / 256.0))

198 

	)

201 
	#DEFAULT_Kp
 22.2

	)

202 
	#DEFAULT_Ki
 1.08

	)

203 
	#DEFAULT_Kd
 114

	)

234 
	#MAX_BED_POWER
 255

235 

	)

236 #ifde‡
PIDTEMPBED


239 
	#DEFAULT_bedKp
 10.00

	)

240 
	#DEFAULT_bedKi
 .023

	)

241 
	#DEFAULT_bedKd
 305.4

	)

256 
	#PREVENT_DANGEROUS_EXTRUDE


	)

258 
	#PREVENT_LENGTHY_EXTRUDE


	)

260 
	#EXTRUDE_MINTEMP
 170

	)

261 
	#EXTRUDE_MAXLENGTH
 (
X_MAX_LENGTH
+
Y_MAX_LENGTH
)

262 

	)

309 
	#ENDSTOPPULLUPS


310 

	)

311 #i‚de‡
ENDSTOPPULLUPS


321 #ifde‡
ENDSTOPPULLUPS


322 
	#ENDSTOPPULLUP_XMAX


	)

323 
	#ENDSTOPPULLUP_YMAX


	)

324 
	#ENDSTOPPULLUP_ZMAX


	)

325 
	#ENDSTOPPULLUP_XMIN


	)

326 
	#ENDSTOPPULLUP_YMIN


	)

327 
	#ENDSTOPPULLUP_ZMIN


	)

331 c⁄° 
boﬁ
 
	gX_MIN_ENDSTOP_INVERTING
 = 
Ál£
;

332 c⁄° 
boﬁ
 
	gY_MIN_ENDSTOP_INVERTING
 = 
Ál£
;

333 c⁄° 
boﬁ
 
	gZ_MIN_ENDSTOP_INVERTING
 = 
Ál£
;

334 c⁄° 
boﬁ
 
	gX_MAX_ENDSTOP_INVERTING
 = 
Ál£
;

335 c⁄° 
boﬁ
 
	gY_MAX_ENDSTOP_INVERTING
 = 
Ál£
;

336 c⁄° 
boﬁ
 
	gZ_MAX_ENDSTOP_INVERTING
 = 
Ál£
;

341 #i‡
deföed
(
COREXY
Ë&& !deföed(
DISABLE_MAX_ENDSTOPS
)

342 
	#DISABLE_MAX_ENDSTOPS


	)

346 
	#X_ENABLE_ON
 0

	)

347 
	#Y_ENABLE_ON
 0

	)

348 
	#Z_ENABLE_ON
 0

	)

349 
	#E_ENABLE_ON
 0

350 

	)

352 
	#DISABLE_X
 
Ál£


	)

353 
	#DISABLE_Y
 
Ál£


	)

354 
	#DISABLE_Z
 
Ál£


	)

355 
	#DISABLE_E
 
Ál£


356 
	#DISABLE_INACTIVE_EXTRUDER
 
åue


357 

	)

358 
	#INVERT_X_DIR
 
Ál£


359 
	#INVERT_Y_DIR
 
Ál£


360 
	#INVERT_Z_DIR
 
Ál£


361 
	#INVERT_E0_DIR
 
Ál£


362 
	#INVERT_E1_DIR
 
Ál£


363 
	#INVERT_E2_DIR
 
Ál£


364 

	)

367 
	#X_HOME_DIR
 1

	)

368 
	#Y_HOME_DIR
 1

	)

369 
	#Z_HOME_DIR
 1

	)

371 
	#mö_so·w¨e_íd°›s
 
åue


372 
	#max_so·w¨e_íd°›s
 
åue


373 

	)

375 
	#X_MAX_POS
 
DELTA_PRINTABLE_RADIUS


	)

376 
	#X_MIN_POS
 -
DELTA_PRINTABLE_RADIUS


	)

377 
	#Y_MAX_POS
 
DELTA_PRINTABLE_RADIUS


	)

378 
	#Y_MIN_POS
 -
DELTA_PRINTABLE_RADIUS


	)

379 
	#Z_MAX_POS
 
MANUAL_Z_HOME_POS


	)

380 
	#Z_MIN_POS
 0

	)

382 
	#X_MAX_LENGTH
 (
X_MAX_POS
 - 
X_MIN_POS
)

	)

383 
	#Y_MAX_LENGTH
 (
Y_MAX_POS
 - 
Y_MIN_POS
)

	)

384 
	#Z_MAX_LENGTH
 (
Z_MAX_POS
 - 
Z_MIN_POS
)

	)

387 
	#ENABLE_AUTO_BED_LEVELING


388 
	#Z_PROBE_REPEATABILITY_TEST


389 

	)

390 #ifde‡
ENABLE_AUTO_BED_LEVELING


404 
	#AUTO_BED_LEVELING_GRID


	)

409 #ifde‡
AUTO_BED_LEVELING_GRID


412 
	#DELTA_PROBABLE_RADIUS
 (
DELTA_PRINTABLE_RADIUS
-10)

	)

413 
	#LEFT_PROBE_BED_POSITION
 -
DELTA_PROBABLE_RADIUS


	)

414 
	#RIGHT_PROBE_BED_POSITION
 
DELTA_PROBABLE_RADIUS


	)

415 
	#BACK_PROBE_BED_POSITION
 
DELTA_PROBABLE_RADIUS


	)

416 
	#FRONT_PROBE_BED_POSITION
 -
DELTA_PROBABLE_RADIUS


	)

419 
	#AUTO_BED_LEVELING_GRID_POINTS
 7

	)

420 
	#AUTO_BED_LEVELING_GRID_X
 ((
RIGHT_PROBE_BED_POSITION
 - 
LEFT_PROBE_BED_POSITION
Ë/ (
AUTO_BED_LEVELING_GRID_POINTS
 - 1))

	)

421 
	#AUTO_BED_LEVELING_GRID_Y
 ((
BACK_PROBE_BED_POSITION
 - 
FRONT_PROBE_BED_POSITION
Ë/ (
AUTO_BED_LEVELING_GRID_POINTS
 - 1))

	)

427 
	#NONLINEAR_BED_LEVELING


	)

433 
	#ABL_PROBE_PT_1_X
 15

	)

434 
	#ABL_PROBE_PT_1_Y
 180

	)

435 
	#ABL_PROBE_PT_2_X
 15

	)

436 
	#ABL_PROBE_PT_2_Y
 20

	)

437 
	#ABL_PROBE_PT_3_X
 170

	)

438 
	#ABL_PROBE_PT_3_Y
 20

	)

444 
	#X_PROBE_OFFSET_FROM_EXTRUDER
 0

445 
	#Y_PROBE_OFFSET_FROM_EXTRUDER
 -18

446 
	#Z_PROBE_OFFSET_FROM_EXTRUDER
 -5.9

447 

	)

448 
	#Z_RAISE_BEFORE_HOMING
 4

450 

	)

451 
	#XY_TRAVEL_SPEED
 8000

452 

	)

453 
	#Z_RAISE_BEFORE_PROBING
 100

454 
	#Z_RAISE_BETWEEN_PROBINGS
 5

455 

	)

469 
	#Z_SAFE_HOMING


475 

	)

476 #ifde‡
Z_SAFE_HOMING


478 
	#Z_SAFE_HOMING_X_POINT
 (
X_MAX_LENGTH
/2)

479 
	#Z_SAFE_HOMING_Y_POINT
 (
Y_MAX_LENGTH
/2)

480 

	)

486 
	#MANUAL_HOME_POSITIONS


487 
	#BED_CENTER_AT_0_0


488 

	)

491 
	#MANUAL_X_HOME_POS
 0

	)

492 
	#MANUAL_Y_HOME_POS
 0

	)

493 
	#MANUAL_Z_HOME_POS
 168.3

494 

	)

496 
	#NUM_AXIS
 4

497 
	#HOMING_FEEDRATE
 {200*60, 200*60, 200*60, 0}

498 

	)

501 
	#XYZ_FULL_STEPS_PER_ROTATION
 200

	)

502 
	#XYZ_MICROSTEPS
 32

	)

503 
	#XYZ_BELT_PITCH
 2

	)

504 
	#XYZ_PULLEY_TEETH
 20

	)

505 
	#XYZ_STEPS
 (
XYZ_FULL_STEPS_PER_ROTATION
 * 
XYZ_MICROSTEPS
 / (
XYZ_BELT_PITCH
Ë/ (
XYZ_PULLEY_TEETH
))

	)

507 
	#DEFAULT_AXIS_STEPS_PER_UNIT
 {
XYZ_STEPS
, XYZ_STEPS, XYZ_STEPS, 170}

	)

508 
	#DEFAULT_MAX_FEEDRATE
 {200, 200, 200, 200}

509 
	#DEFAULT_MAX_ACCELERATION
 {9000,9000,9000,9000}

510 

	)

511 
	#DEFAULT_ACCELERATION
 3000

512 
	#DEFAULT_RETRACT_ACCELERATION
 3000

513 

	)

521 
	#DEFAULT_XYJERK
 20.0

522 
	#DEFAULT_ZJERK
 20.0

523 
	#DEFAULT_EJERK
 20.0

524 

	)

530 
	#CUSTOM_M_CODES


	)

531 #ifde‡
CUSTOM_M_CODES


532 
	#CUSTOM_M_CODE_SET_Z_PROBE_OFFSET
 851

	)

533 
	#Z_PROBE_OFFSET_RANGE_MIN
 -15

	)

534 
	#Z_PROBE_OFFSET_RANGE_MAX
 -5

	)

550 
	#PLA_PREHEAT_HOTEND_TEMP
 180

	)

551 
	#PLA_PREHEAT_HPB_TEMP
 70

	)

552 
	#PLA_PREHEAT_FAN_SPEED
 255

553 

	)

554 
	#ABS_PREHEAT_HOTEND_TEMP
 240

	)

555 
	#ABS_PREHEAT_HPB_TEMP
 100

	)

556 
	#ABS_PREHEAT_FAN_SPEED
 255

557 

	)

577 
	#REPRAP_DISCOUNT_SMART_CONTROLLER


	)

600 #i‡
deföed
 (
MAKRPANEL
)

601 
	#DOGLCD


	)

602 
	#SDSUPPORT


	)

603 
	#ULTIPANEL


	)

604 
	#NEWPANEL


	)

605 
	#DEFAULT_LCD_CONTRAST
 17

	)

608 #i‡
deföed
 (
REPRAP_DISCOUNT_FULL_GRAPHIC_SMART_CONTROLLER
)

609 
	#DOGLCD


	)

610 
	#U8GLIB_ST7920


	)

611 
	#REPRAP_DISCOUNT_SMART_CONTROLLER


	)

614 #i‡
deföed
(
ULTIMAKERCONTROLLER
Ë|| deföed(
REPRAP_DISCOUNT_SMART_CONTROLLER
Ë|| deföed(
G3D_PANEL
)

615 
	#ULTIPANEL


	)

616 
	#NEWPANEL


	)

619 #i‡
deföed
(
REPRAPWORLD_KEYPAD
)

620 
	#NEWPANEL


	)

621 
	#ULTIPANEL


	)

623 #i‡
deföed
(
RA_CONTROL_PANEL
)

624 
	#ULTIPANEL


	)

625 
	#NEWPANEL


	)

626 
	#LCD_I2C_TYPE_PCA8574


	)

627 
	#LCD_I2C_ADDRESS
 0x27

629 

	)

633 #ifde‡
LCD_I2C_SAINSMART_YWROBOT


636 
	#LCD_I2C_TYPE_PCF8575


	)

637 
	#LCD_I2C_ADDRESS
 0x27

638 
	#NEWPANEL


	)

639 
	#ULTIPANEL


	)

644 #ifde‡
LCD_I2C_PANELOLU2


650 
	#LCD_I2C_TYPE_MCP23017


	)

651 
	#LCD_I2C_ADDRESS
 0x20

652 
	#LCD_USE_I2C_BUZZER


653 
	#NEWPANEL


	)

654 
	#ULTIPANEL


	)

656 #i‚de‡
ENCODER_PULSES_PER_STEP


657 
	#ENCODER_PULSES_PER_STEP
 4

	)

660 #i‚de‡
ENCODER_STEPS_PER_MENU_ITEM


661 
	#ENCODER_STEPS_PER_MENU_ITEM
 1

	)

665 #ifde‡
LCD_USE_I2C_BUZZER


666 
	#LCD_FEEDBACK_FREQUENCY_HZ
 1000

	)

667 
	#LCD_FEEDBACK_FREQUENCY_DURATION_MS
 100

	)

674 #ifde‡
LCD_I2C_VIKI


679 
	#LCD_I2C_TYPE_MCP23017


	)

680 
	#LCD_I2C_ADDRESS
 0x20

681 
	#LCD_USE_I2C_BUZZER


682 
	#NEWPANEL


	)

683 
	#ULTIPANEL


	)

691 #ifde‡
SR_LCD


692 
	#SR_LCD_2W_NL


695 

	)

697 #ifde‡
ULTIPANEL


699 
	#SDSUPPORT


	)

700 
	#ULTRA_LCD


	)

701 #ifde‡
DOGLCD


702 
	#LCD_WIDTH
 20

	)

703 
	#LCD_HEIGHT
 5

	)

705 
	#LCD_WIDTH
 20

	)

706 
	#LCD_HEIGHT
 4

	)

709 #ifde‡
ULTRA_LCD


710 #ifde‡
DOGLCD


711 
	#LCD_WIDTH
 20

	)

712 
	#LCD_HEIGHT
 5

	)

714 
	#LCD_WIDTH
 16

	)

715 
	#LCD_HEIGHT
 2

	)

721 #ifde‡
DOGLCD


722 #i‚de‡
DEFAULT_LCD_CONTRAST


723 
	#DEFAULT_LCD_CONTRAST
 32

	)

744 
	#SOFT_PWM_SCALE
 0

	)

795 
	#FILAMENT_SENSOR_EXTRUDER_NUM
 0

796 
	#MEASUREMENT_DELAY_CM
 14

797 

	)

798 
	#DEFAULT_NOMINAL_FILAMENT_DIA
 3.0

799 
	#MEASURED_UPPER_LIMIT
 3.30

800 
	#MEASURED_LOWER_LIMIT
 1.90

801 
	#MAX_MEASUREMENT_DELAY
 20

802 

	)

804 
	#DEFAULT_MEASURED_FILAMENT_DIA
 
DEFAULT_NOMINAL_FILAMENT_DIA


805 

	)

814 
	~"C⁄figuøti⁄_adv.h
"

815 
	~"thîmi°‹èbÀs.h
"

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/ConfigurationStore.cpp

1 
	~"M¨lö.h
"

2 
	~"∂™√r.h
"

3 
	~"ãm≥øtuª.h
"

4 
	~"u…ølcd.h
"

5 
	~"C⁄figuøti⁄St‹e.h
"

7 
	$_EEPROM_wrôeD©a
(&
pos
, 
uöt8_t
* 
vÆue
, uöt8_à
size
)

11 
	`ì¥om_wrôe_byã
((*)
pos
, *
vÆue
);

12 
pos
++;

13 
vÆue
++;

14 }--
size
);

15 
	}
}

16 
	#EEPROM_WRITE_VAR
(
pos
, 
vÆue
Ë
	`_EEPROM_wrôeD©a
’os, (
uöt8_t
*)&vÆue, (vÆue))

	)

17 
	$_EEPROM_ªadD©a
(&
pos
, 
uöt8_t
* 
vÆue
, uöt8_à
size
)

21 *
vÆue
 = 
	`ì¥om_ªad_byã
((*)
pos
);

22 
pos
++;

23 
vÆue
++;

24 }--
size
);

25 
	}
}

26 
	#EEPROM_READ_VAR
(
pos
, 
vÆue
Ë
	`_EEPROM_ªadD©a
’os, (
uöt8_t
*)&vÆue, (vÆue))

	)

32 
	#EEPROM_OFFSET
 100

	)

41 
	#EEPROM_VERSION
 "V10"

	)

42 #ifde‡
DELTA


43 #unde‡
EEPROM_VERSION


44 
	#EEPROM_VERSION
 "V11"

	)

46 #ifde‡
SCARA


47 #unde‡
EEPROM_VERSION


48 
	#EEPROM_VERSION
 "V12"

	)

51 #ifde‡
EEPROM_SETTINGS


52 
	$C⁄fig_St‹eSëtögs
()

54 
vî
[4]= "000";

55 
i
=
EEPROM_OFFSET
;

56 
	`EEPROM_WRITE_VAR
(
i
,
vî
);

57 
	`EEPROM_WRITE_VAR
(
i
,
axis_°ïs_≥r_unô
);

58 
	`EEPROM_WRITE_VAR
(
i
,
max_„edøã
);

59 
	`EEPROM_WRITE_VAR
(
i
,
max_ac˚Àøti⁄_unôs_≥r_sq_£c⁄d
);

60 
	`EEPROM_WRITE_VAR
(
i
,
ac˚Àøti⁄
);

61 
	`EEPROM_WRITE_VAR
(
i
,
ªåa˘_ac˚Àøti⁄
);

62 
	`EEPROM_WRITE_VAR
(
i
,
möimum„edøã
);

63 
	`EEPROM_WRITE_VAR
(
i
,
möåavñ„edøã
);

64 
	`EEPROM_WRITE_VAR
(
i
,
mö£gmíâime
);

65 
	`EEPROM_WRITE_VAR
(
i
,
max_xy_jîk
);

66 
	`EEPROM_WRITE_VAR
(
i
,
max_z_jîk
);

67 
	`EEPROM_WRITE_VAR
(
i
,
max_e_jîk
);

68 
	`EEPROM_WRITE_VAR
(
i
,
add_homög
);

69 #ifde‡
DELTA


70 
	`EEPROM_WRITE_VAR
(
i
,
íd°›_adj
);

71 
	`EEPROM_WRITE_VAR
(
i
,
dñè_ødius
);

72 
	`EEPROM_WRITE_VAR
(
i
,
dñè_düg⁄Æ_rod
);

73 
	`EEPROM_WRITE_VAR
(
i
,
dñè_£gmíts_≥r_£c⁄d
);

75 #i‚de‡
ULTIPANEL


76 
∂aPªhótHŸídTemp
 = 
PLA_PREHEAT_HOTEND_TEMP
, 
∂aPªhótHPBTemp
 = 
PLA_PREHEAT_HPB_TEMP
, 
∂aPªhótF™S≥ed
 = 
PLA_PREHEAT_FAN_SPEED
;

77 
absPªhótHŸídTemp
 = 
ABS_PREHEAT_HOTEND_TEMP
, 
absPªhótHPBTemp
 = 
ABS_PREHEAT_HPB_TEMP
, 
absPªhótF™S≥ed
 = 
ABS_PREHEAT_FAN_SPEED
;

79 
	`EEPROM_WRITE_VAR
(
i
,
∂aPªhótHŸídTemp
);

80 
	`EEPROM_WRITE_VAR
(
i
,
∂aPªhótHPBTemp
);

81 
	`EEPROM_WRITE_VAR
(
i
,
∂aPªhótF™S≥ed
);

82 
	`EEPROM_WRITE_VAR
(
i
,
absPªhótHŸídTemp
);

83 
	`EEPROM_WRITE_VAR
(
i
,
absPªhótHPBTemp
);

84 
	`EEPROM_WRITE_VAR
(
i
,
absPªhótF™S≥ed
);

85 
	`EEPROM_WRITE_VAR
(
i
,
z¥obe_zoff£t
);

86 #ifde‡
PIDTEMP


87 
	`EEPROM_WRITE_VAR
(
i
,
Kp
);

88 
	`EEPROM_WRITE_VAR
(
i
,
Ki
);

89 
	`EEPROM_WRITE_VAR
(
i
,
Kd
);

91 
dummy
 = 3000.0f;

92 
	`EEPROM_WRITE_VAR
(
i
,
dummy
);

93 
dummy
 = 0.0f;

94 
	`EEPROM_WRITE_VAR
(
i
,
dummy
);

95 
	`EEPROM_WRITE_VAR
(
i
,
dummy
);

97 #i‚de‡
DOGLCD


98 
lcd_c⁄åa°
 = 32;

100 
	`EEPROM_WRITE_VAR
(
i
,
lcd_c⁄åa°
);

101 #ifde‡
SCARA


102 
	`EEPROM_WRITE_VAR
(
i
,
axis_sˇlög
);

104 
vî2
[4]=
EEPROM_VERSION
;

105 
i
=
EEPROM_OFFSET
;

106 
	`EEPROM_WRITE_VAR
(
i
,
vî2
);

107 
SERIAL_ECHO_START
;

108 
	`SERIAL_ECHOLNPGM
("Settings Stored");

109 
	}
}

113 #i‚de‡
DISABLE_M503


114 
	$C⁄fig_PrötSëtögs
()

116 
SERIAL_ECHO_START
;

117 
	`SERIAL_ECHOLNPGM
("StepsÖer unit:");

118 
SERIAL_ECHO_START
;

119 
	`SERIAL_ECHOPAIR
(" M92 X",
axis_°ïs_≥r_unô
[
X_AXIS
]);

120 
	`SERIAL_ECHOPAIR
(" Y",
axis_°ïs_≥r_unô
[
Y_AXIS
]);

121 
	`SERIAL_ECHOPAIR
(" Z",
axis_°ïs_≥r_unô
[
Z_AXIS
]);

122 
	`SERIAL_ECHOPAIR
(" E",
axis_°ïs_≥r_unô
[
E_AXIS
]);

123 
	`SERIAL_ECHOLN
("");

125 
SERIAL_ECHO_START
;

126 #ifde‡
SCARA


127 
	`SERIAL_ECHOLNPGM
("Scaling factors:");

128 
SERIAL_ECHO_START
;

129 
	`SERIAL_ECHOPAIR
(" M365 X",
axis_sˇlög
[
X_AXIS
]);

130 
	`SERIAL_ECHOPAIR
(" Y",
axis_sˇlög
[
Y_AXIS
]);

131 
	`SERIAL_ECHOPAIR
(" Z",
axis_sˇlög
[
Z_AXIS
]);

132 
	`SERIAL_ECHOLN
("");

134 
SERIAL_ECHO_START
;

136 
	`SERIAL_ECHOLNPGM
("Maximum feedrates (mm/s):");

137 
SERIAL_ECHO_START
;

138 
	`SERIAL_ECHOPAIR
(" M203 X", 
max_„edøã
[
X_AXIS
]);

139 
	`SERIAL_ECHOPAIR
(" Y", 
max_„edøã
[
Y_AXIS
]);

140 
	`SERIAL_ECHOPAIR
(" Z", 
max_„edøã
[
Z_AXIS
]);

141 
	`SERIAL_ECHOPAIR
(" E", 
max_„edøã
[
E_AXIS
]);

142 
	`SERIAL_ECHOLN
("");

144 
SERIAL_ECHO_START
;

145 
	`SERIAL_ECHOLNPGM
("Maximum Acceleration (mm/s2):");

146 
SERIAL_ECHO_START
;

147 
	`SERIAL_ECHOPAIR
(" M201 X" ,
max_ac˚Àøti⁄_unôs_≥r_sq_£c⁄d
[
X_AXIS
] );

148 
	`SERIAL_ECHOPAIR
(" Y" , 
max_ac˚Àøti⁄_unôs_≥r_sq_£c⁄d
[
Y_AXIS
] );

149 
	`SERIAL_ECHOPAIR
(" Z" ,
max_ac˚Àøti⁄_unôs_≥r_sq_£c⁄d
[
Z_AXIS
] );

150 
	`SERIAL_ECHOPAIR
(" E" ,
max_ac˚Àøti⁄_unôs_≥r_sq_£c⁄d
[
E_AXIS
]);

151 
	`SERIAL_ECHOLN
("");

152 
SERIAL_ECHO_START
;

153 
	`SERIAL_ECHOLNPGM
("Acceleration: S=acceleration, T=retractácceleration");

154 
SERIAL_ECHO_START
;

155 
	`SERIAL_ECHOPAIR
(" M204 S",
ac˚Àøti⁄
 );

156 
	`SERIAL_ECHOPAIR
(" T" ,
ªåa˘_ac˚Àøti⁄
);

157 
	`SERIAL_ECHOLN
("");

159 
SERIAL_ECHO_START
;

160 
	`SERIAL_ECHOLNPGM
("Advanced variables: S=Min feedrate (mm/s), T=MinÅravel feedrate (mm/s), B=minimum segmentÅime (ms), X=maximum XY jerk (mm/s), Z=maximum Z jerk (mm/s), E=maximum E jerk (mm/s)");

161 
SERIAL_ECHO_START
;

162 
	`SERIAL_ECHOPAIR
(" M205 S",
möimum„edøã
 );

163 
	`SERIAL_ECHOPAIR
(" T" ,
möåavñ„edøã
 );

164 
	`SERIAL_ECHOPAIR
(" B" ,
mö£gmíâime
 );

165 
	`SERIAL_ECHOPAIR
(" X" ,
max_xy_jîk
 );

166 
	`SERIAL_ECHOPAIR
(" Z" ,
max_z_jîk
);

167 
	`SERIAL_ECHOPAIR
(" E" ,
max_e_jîk
);

168 
	`SERIAL_ECHOLN
("");

170 
SERIAL_ECHO_START
;

171 
	`SERIAL_ECHOLNPGM
("Home offset (mm):");

172 
SERIAL_ECHO_START
;

173 
	`SERIAL_ECHOPAIR
(" M206 X",
add_homög
[
X_AXIS
] );

174 
	`SERIAL_ECHOPAIR
(" Y" ,
add_homög
[
Y_AXIS
] );

175 
	`SERIAL_ECHOPAIR
(" Z" ,
add_homög
[
Z_AXIS
] );

176 
	`SERIAL_ECHOLN
("");

177 #ifde‡
DELTA


178 
SERIAL_ECHO_START
;

179 
	`SERIAL_ECHOLNPGM
("Endstopádjustement (mm):");

180 
SERIAL_ECHO_START
;

181 
	`SERIAL_ECHOPAIR
(" M666 X",
íd°›_adj
[
X_AXIS
] );

182 
	`SERIAL_ECHOPAIR
(" Y" ,
íd°›_adj
[
Y_AXIS
] );

183 
	`SERIAL_ECHOPAIR
(" Z" ,
íd°›_adj
[
Z_AXIS
] );

184 
	`SERIAL_ECHOLN
("");

185 
SERIAL_ECHO_START
;

186 
	`SERIAL_ECHOLNPGM
("Delta settings: L=delta_diagonal_rod, R=delta_radius, S=delta_segments_per_second");

187 
SERIAL_ECHO_START
;

188 
	`SERIAL_ECHOPAIR
(" M665 L",
dñè_düg⁄Æ_rod
 );

189 
	`SERIAL_ECHOPAIR
(" R" ,
dñè_ødius
 );

190 
	`SERIAL_ECHOPAIR
(" S" ,
dñè_£gmíts_≥r_£c⁄d
 );

191 
	`SERIAL_ECHOLN
("");

193 #ifde‡
PIDTEMP


194 
SERIAL_ECHO_START
;

195 
	`SERIAL_ECHOLNPGM
("PID settings:");

196 
SERIAL_ECHO_START
;

197 
	`SERIAL_ECHOPAIR
(" M301 P",
Kp
);

198 
	`SERIAL_ECHOPAIR
(" I" ,
	`unsˇÀPID_i
(
Ki
));

199 
	`SERIAL_ECHOPAIR
(" D" ,
	`unsˇÀPID_d
(
Kd
));

200 
	`SERIAL_ECHOLN
("");

202 
	}
}

206 #ifde‡
EEPROM_SETTINGS


207 
	$C⁄fig_RërõveSëtögs
()

209 
i
=
EEPROM_OFFSET
;

210 
°‹ed_vî
[4];

211 
vî
[4]=
EEPROM_VERSION
;

212 
	`EEPROM_READ_VAR
(
i
,
°‹ed_vî
);

214 i‡(
	`°∫cmp
(
vî
,
°‹ed_vî
,3) == 0)

217 
	`EEPROM_READ_VAR
(
i
,
axis_°ïs_≥r_unô
);

218 
	`EEPROM_READ_VAR
(
i
,
max_„edøã
);

219 
	`EEPROM_READ_VAR
(
i
,
max_ac˚Àøti⁄_unôs_≥r_sq_£c⁄d
);

222 
	`ª£t_ac˚Àøti⁄_øãs
();

224 
	`EEPROM_READ_VAR
(
i
,
ac˚Àøti⁄
);

225 
	`EEPROM_READ_VAR
(
i
,
ªåa˘_ac˚Àøti⁄
);

226 
	`EEPROM_READ_VAR
(
i
,
möimum„edøã
);

227 
	`EEPROM_READ_VAR
(
i
,
möåavñ„edøã
);

228 
	`EEPROM_READ_VAR
(
i
,
mö£gmíâime
);

229 
	`EEPROM_READ_VAR
(
i
,
max_xy_jîk
);

230 
	`EEPROM_READ_VAR
(
i
,
max_z_jîk
);

231 
	`EEPROM_READ_VAR
(
i
,
max_e_jîk
);

232 
	`EEPROM_READ_VAR
(
i
,
add_homög
);

233 #ifde‡
DELTA


234 
	`EEPROM_READ_VAR
(
i
,
íd°›_adj
);

235 
	`EEPROM_READ_VAR
(
i
,
dñè_ødius
);

236 
	`EEPROM_READ_VAR
(
i
,
dñè_düg⁄Æ_rod
);

237 
	`EEPROM_READ_VAR
(
i
,
dñè_£gmíts_≥r_£c⁄d
);

239 #i‚de‡
ULTIPANEL


240 
∂aPªhótHŸídTemp
, 
∂aPªhótHPBTemp
, 
∂aPªhótF™S≥ed
;

241 
absPªhótHŸídTemp
, 
absPªhótHPBTemp
, 
absPªhótF™S≥ed
;

243 
	`EEPROM_READ_VAR
(
i
,
∂aPªhótHŸídTemp
);

244 
	`EEPROM_READ_VAR
(
i
,
∂aPªhótHPBTemp
);

245 
	`EEPROM_READ_VAR
(
i
,
∂aPªhótF™S≥ed
);

246 
	`EEPROM_READ_VAR
(
i
,
absPªhótHŸídTemp
);

247 
	`EEPROM_READ_VAR
(
i
,
absPªhótHPBTemp
);

248 
	`EEPROM_READ_VAR
(
i
,
absPªhótF™S≥ed
);

249 
	`EEPROM_READ_VAR
(
i
,
z¥obe_zoff£t
);

250 #i‚de‡
PIDTEMP


251 
Kp
,
Ki
,
Kd
;

254 
	`EEPROM_READ_VAR
(
i
,
Kp
);

255 
	`EEPROM_READ_VAR
(
i
,
Ki
);

256 
	`EEPROM_READ_VAR
(
i
,
Kd
);

257 #i‚de‡
DOGLCD


258 
lcd_c⁄åa°
;

260 
	`EEPROM_READ_VAR
(
i
,
lcd_c⁄åa°
);

261 #ifde‡
SCARA


262 
	`EEPROM_READ_VAR
(
i
,
axis_sˇlög
);

266 
	`upd©ePID
();

267 
SERIAL_ECHO_START
;

268 
	`SERIAL_ECHOLNPGM
("Stored settingsÑetrieved");

272 
	`C⁄fig_Re£tDeÁu…
();

274 #ifde‡
EEPROM_CHITCHAT


275 
	`C⁄fig_PrötSëtögs
();

277 
	}
}

280 
	$C⁄fig_Re£tDeÁu…
()

282 
tmp1
[]=
DEFAULT_AXIS_STEPS_PER_UNIT
;

283 
tmp2
[]=
DEFAULT_MAX_FEEDRATE
;

284 
tmp3
[]=
DEFAULT_MAX_ACCELERATION
;

285 
i
=0;i<4;i++)

287 
axis_°ïs_≥r_unô
[
i
]=
tmp1
[i];

288 
max_„edøã
[
i
]=
tmp2
[i];

289 
max_ac˚Àøti⁄_unôs_≥r_sq_£c⁄d
[
i
]=
tmp3
[i];

290 #ifde‡
SCARA


291 
axis_sˇlög
[
i
]=1;

296 
	`ª£t_ac˚Àøti⁄_øãs
();

298 
ac˚Àøti⁄
=
DEFAULT_ACCELERATION
;

299 
ªåa˘_ac˚Àøti⁄
=
DEFAULT_RETRACT_ACCELERATION
;

300 
möimum„edøã
=
DEFAULT_MINIMUMFEEDRATE
;

301 
mö£gmíâime
=
DEFAULT_MINSEGMENTTIME
;

302 
möåavñ„edøã
=
DEFAULT_MINTRAVELFEEDRATE
;

303 
max_xy_jîk
=
DEFAULT_XYJERK
;

304 
max_z_jîk
=
DEFAULT_ZJERK
;

305 
max_e_jîk
=
DEFAULT_EJERK
;

306 
add_homög
[
X_AXIS
] =ádd_homög[
Y_AXIS
] =ádd_homög[
Z_AXIS
] = 0;

307 #ifde‡
DELTA


308 
íd°›_adj
[
X_AXIS
] =Énd°›_adj[
Y_AXIS
] =Énd°›_adj[
Z_AXIS
] = 0;

309 
dñè_ødius

DELTA_RADIUS
;

310 
dñè_düg⁄Æ_rod

DELTA_DIAGONAL_ROD
;

311 
dñè_£gmíts_≥r_£c⁄d

DELTA_SEGMENTS_PER_SECOND
;

312 
	`ªˇlc_dñè_£âögs
(
dñè_ødius
, 
dñè_düg⁄Æ_rod
);

314 #ifde‡
ULTIPANEL


315 
∂aPªhótHŸídTemp
 = 
PLA_PREHEAT_HOTEND_TEMP
;

316 
∂aPªhótHPBTemp
 = 
PLA_PREHEAT_HPB_TEMP
;

317 
∂aPªhótF™S≥ed
 = 
PLA_PREHEAT_FAN_SPEED
;

318 
absPªhótHŸídTemp
 = 
ABS_PREHEAT_HOTEND_TEMP
;

319 
absPªhótHPBTemp
 = 
ABS_PREHEAT_HPB_TEMP
;

320 
absPªhótF™S≥ed
 = 
ABS_PREHEAT_FAN_SPEED
;

322 #ifde‡
ENABLE_AUTO_BED_LEVELING


323 
z¥obe_zoff£t
 = -
Z_PROBE_OFFSET_FROM_EXTRUDER
;

325 #ifde‡
DOGLCD


326 
lcd_c⁄åa°
 = 
DEFAULT_LCD_CONTRAST
;

328 #ifde‡
PIDTEMP


329 
Kp
 = 
DEFAULT_Kp
;

330 
Ki
 = 
	`sˇÀPID_i
(
DEFAULT_Ki
);

331 
Kd
 = 
	`sˇÀPID_d
(
DEFAULT_Kd
);

334 
	`upd©ePID
();

336 #ifde‡
PID_ADD_EXTRUSION_RATE


337 
Kc
 = 
DEFAULT_Kc
;

341 
SERIAL_ECHO_START
;

342 
	`SERIAL_ECHOLNPGM
("Hardcoded Default Settings Loaded");

344 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/ConfigurationStore.h

1 #i‚de‡
CONFIG_STORE_H


2 
	#CONFIG_STORE_H


	)

4 
	~"C⁄figuøti⁄.h
"

6 
C⁄fig_Re£tDeÁu…
();

8 #i‚de‡
DISABLE_M503


9 
C⁄fig_PrötSëtögs
();

11 
FORCE_INLINE
 
	$C⁄fig_PrötSëtögs
(Ë{
	}
}

14 #ifde‡
EEPROM_SETTINGS


15 
C⁄fig_St‹eSëtögs
();

16 
C⁄fig_RërõveSëtögs
();

18 
FORCE_INLINE
 
	$C⁄fig_St‹eSëtögs
(Ë{
	}
}

19 
FORCE_INLINE
 
	$C⁄fig_RërõveSëtögs
(Ë{ 
	`C⁄fig_Re£tDeÁu…
(); 
	`C⁄fig_PrötSëtögs
(); 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/Configuration_adv.h

1 #i‚de‡
CONFIGURATION_ADV_H


2 
	#CONFIGURATION_ADV_H


	)

8 #ifde‡
BED_LIMIT_SWITCHING


9 
	#BED_HYSTERESIS
 2

11 
	#BED_CHECK_INTERVAL
 5000

12 

	)

21 #ifde‡
PIDTEMP


24 
	#PID_ADD_EXTRUSION_RATE


	)

25 #ifde‡
PID_ADD_EXTRUSION_RATE


26 
	#DEFAULT_Kc
 (1)

29 

	)

38 
	#AUTOTEMP


	)

39 #ifde‡
AUTOTEMP


40 
	#AUTOTEMP_OLDWEIGHT
 0.98

	)

50 
	#EXTRUDER_RUNOUT_MINTEMP
 190

	)

51 
	#EXTRUDER_RUNOUT_SECONDS
 30.

	)

52 
	#EXTRUDER_RUNOUT_ESTEPS
 14.

53 
	#EXTRUDER_RUNOUT_SPEED
 1500.

54 
	#EXTRUDER_RUNOUT_EXTRUDE
 100

	)

58 
	#TEMP_SENSOR_AD595_OFFSET
 0.0

	)

59 
	#TEMP_SENSOR_AD595_GAIN
 1.0

	)

64 
	#CONTROLLERFAN_PIN
 -1

65 
	#CONTROLLERFAN_SECS
 60

66 
	#CONTROLLERFAN_SPEED
 255

67 

	)

78 
	#EXTRUDER_0_AUTO_FAN_PIN
 -1

	)

79 
	#EXTRUDER_1_AUTO_FAN_PIN
 -1

	)

80 
	#EXTRUDER_2_AUTO_FAN_PIN
 -1

	)

81 
	#EXTRUDER_AUTO_FAN_TEMPERATURE
 50

	)

82 
	#EXTRUDER_AUTO_FAN_SPEED
 255

83 

	)

89 
	#ENDSTOPS_ONLY_FOR_HOMING


90 

	)

94 #ifde‡
MANUAL_HOME_POSITIONS


95 
	#X_HOME_POS
 
MANUAL_X_HOME_POS


	)

96 
	#Y_HOME_POS
 
MANUAL_Y_HOME_POS


	)

97 
	#Z_HOME_POS
 
MANUAL_Z_HOME_POS


	)

100 #i‡
X_HOME_DIR
 == -1

101 #ifde‡
BED_CENTER_AT_0_0


102 
	#X_HOME_POS
 
X_MAX_LENGTH
 * -0.5

	)

104 
	#X_HOME_POS
 
X_MIN_POS


	)

107 #ifde‡
BED_CENTER_AT_0_0


108 
	#X_HOME_POS
 
X_MAX_LENGTH
 * 0.5

	)

110 
	#X_HOME_POS
 
X_MAX_POS


	)

115 #i‡
Y_HOME_DIR
 == -1

116 #ifde‡
BED_CENTER_AT_0_0


117 
	#Y_HOME_POS
 
Y_MAX_LENGTH
 * -0.5

	)

119 
	#Y_HOME_POS
 
Y_MIN_POS


	)

122 #ifde‡
BED_CENTER_AT_0_0


123 
	#Y_HOME_POS
 
Y_MAX_LENGTH
 * 0.5

	)

125 
	#Y_HOME_POS
 
Y_MAX_POS


	)

130 #i‡
Z_HOME_DIR
 == -1

131 
	#Z_HOME_POS
 
Z_MIN_POS


	)

133 
	#Z_HOME_POS
 
Z_MAX_POS


	)

148 #ifde‡
Z_DUAL_STEPPER_DRIVERS


149 #unde‡
EXTRUDERS


150 
	#EXTRUDERS
 1

	)

157 
	#INVERT_Y2_VS_Y_DIR
 
åue


	)

159 #ifde‡
Y_DUAL_STEPPER_DRIVERS


160 #unde‡
EXTRUDERS


161 
	#EXTRUDERS
 1

	)

164 #i‡
deföed
 (
Z_DUAL_STEPPER_DRIVERS
Ë&& deföed (
Y_DUAL_STEPPER_DRIVERS
)

173 #ifde‡
DUAL_X_CARRIAGE


177 
	#X2_MIN_POS
 80

178 
	#X2_MAX_POS
 353

179 
	#X2_HOME_DIR
 1

180 
	#X2_HOME_POS
 
X2_MAX_POS


185 

	)

187 
	#X2_ENABLE_PIN
 29

	)

188 
	#X2_STEP_PIN
 25

	)

189 
	#X2_DIR_PIN
 23

	)

201 
	#DEFAULT_DUAL_X_CARRIAGE_MODE
 0

	)

204 
	#EXTRUDER1_Z_OFFSET
 0.0

205 

	)

207 
	#TOOLCHANGE_PARK_ZLIFT
 0.2

208 
	#TOOLCHANGE_UNPARK_ZLIFT
 1

209 

	)

211 
	#DEFAULT_DUPLICATION_X_OFFSET
 100

	)

216 
	#X_HOME_RETRACT_MM
 5

	)

217 
	#Y_HOME_RETRACT_MM
 5

	)

218 
	#Z_HOME_RETRACT_MM
 5

	)

221 
	#AXIS_RELATIVE_MODES
 {
Ál£
, fÆ£, fÆ£, fÆ£}

	)

222 #ifde‡
CONFIG_STEPPERS_TOSHIBA


223 
	#MAX_STEP_FREQUENCY
 10000

224 #ñ£

	)

225 
	#MAX_STEP_FREQUENCY
 40000

228 
	#INVERT_X_STEP_PIN
 
Ál£


	)

229 
	#INVERT_Y_STEP_PIN
 
Ál£


	)

230 
	#INVERT_Z_STEP_PIN
 
Ál£


	)

231 
	#INVERT_E_STEP_PIN
 
Ál£


	)

234 
	#DEFAULT_STEPPER_DEACTIVE_TIME
 60

	)

236 
	#DEFAULT_MINIMUMFEEDRATE
 0.0

237 
	#DEFAULT_MINTRAVELFEEDRATE
 0.0

	)

240 #ifde‡
ULTIPANEL


241 
	#MANUAL_FEEDRATE
 {50*60, 50*60, 4*60, 60}

243 

	)

245 #ifde‡
ULTIPANEL


246 
	#ULTIPANEL_FEEDMULTIPLY


	)

250 
	#DEFAULT_MINSEGMENTTIME
 20000

	)

264 
	#MINIMUM_PLANNER_SPEED
 0.05

265 

	)

267 
	#MICROSTEP1
 
LOW
,
	)
LOW

268 
	#MICROSTEP2
 
HIGH
,
LOW


	)

269 
	#MICROSTEP4
 
LOW
,
HIGH


	)

270 
	#MICROSTEP8
 
HIGH
,
	)
HIGH

271 
	#MICROSTEP16
 
HIGH
,
	)
HIGH

274 
	#MICROSTEP_MODES
 {16,16,16,16,16}

275 

	)

277 
	#DIGIPOT_MOTOR_CURRENT
 {135,135,135,135,135}

278 

	)

282 
	#DIGIPOT_I2C_NUM_CHANNELS
 8

	)

284 
	#DIGIPOT_I2C_MOTOR_CURRENTS
 {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}

	)

291 
	#CHDK_DELAY
 50

292 

	)

293 
	#SD_FINISHED_STEPPERRELEASE
 
åue


294 
	#SD_FINISHED_RELEASECOMMAND
 "M84 X Y Z E"

295 

	)

296 
	#SDCARD_RATHERRECENTFIRST


300 

	)

304 #ifde‡
USE_WATCHDOG


318 #ifde‡
BABYSTEPPING


319 
	#BABYSTEP_XY


320 
	#BABYSTEP_INVERT_Z
 
Ál£


321 
	#BABYSTEP_Z_MULTIPLICATOR
 2

322 

	)

323 #ifde‡
COREXY


324 #îr‹ 
BABYSTEPPING
 
nŸ
 
im∂emíãd
 
COREXY
 
yë
.

327 #ifde‡
DELTA


328 #ifde‡
BABYSTEP_XY


329 #îr‹ 
BABYSTEPPING
 
⁄ly
 
im∂emíãd
 
Z
 
axis
 
⁄
 
dñèbŸs
.

343 #ifde‡
ADVANCE


344 
	#EXTRUDER_ADVANCE_K
 .0

	)

346 
	#D_FILAMENT
 2.85

	)

347 
	#STEPS_MM_E
 836

	)

348 
	#EXTRUSION_AREA
 (0.25 * 
D_FILAMENT
 * D_FILAMENT * 3.14159)

	)

349 
	#STEPS_PER_CUBIC_MM_E
 (
axis_°ïs_≥r_unô
[
E_AXIS
]/ 
EXTRUSION_AREA
)

	)

354 
	#MM_PER_ARC_SEGMENT
 1

	)

355 
	#N_ARC_CORRECTION
 25

	)

357 c⁄° 
	gdr›£gmíts
=5;

363 
	#SDCARDDETECTINVERTED


	)

365 #ifde‡
ULTIPANEL


366 #unde‡
SDCARDDETECTINVERTED


371 #i‚de‡
POWER_SUPPLY


372 
	#POWER_SUPPLY
 1

	)

375 #i‡(
POWER_SUPPLY
 == 1)

376 
	#PS_ON_AWAKE
 
LOW


	)

377 
	#PS_ON_ASLEEP
 
HIGH


	)

380 #i‡(
POWER_SUPPLY
 == 2)

381 
	#PS_ON_AWAKE
 
HIGH


	)

382 
	#PS_ON_ASLEEP
 
LOW


	)

394 #i‡
deföed
 
SDSUPPORT


395 
	#BLOCK_BUFFER_SIZE
 16

396 #ñ£

	)

397 
	#BLOCK_BUFFER_SIZE
 64

399 

	)

402 
	#MAX_CMD_SIZE
 96

	)

403 
	#BUFSIZE
 4

	)

413 #ifde‡
FWRETRACT


414 
	#MIN_RETRACT
 0.1

415 
	#RETRACT_LENGTH
 3

416 
	#RETRACT_LENGTH_SWAP
 13

417 
	#RETRACT_FEEDRATE
 45

418 
	#RETRACT_ZLIFT
 0

419 
	#RETRACT_RECOVER_LENGTH
 0

420 
	#RETRACT_RECOVER_LENGTH_SWAP
 0

421 
	#RETRACT_RECOVER_FEEDRATE
 8

423 

	)

425 #ifde‡
ULTIPANEL


426 
	#FILAMENTCHANGEENABLE


	)

427 #ifde‡
FILAMENTCHANGEENABLE


428 
	#FILAMENTCHANGE_XPOS
 3

	)

429 
	#FILAMENTCHANGE_YPOS
 3

	)

430 
	#FILAMENTCHANGE_ZADD
 10

	)

431 
	#FILAMENTCHANGE_FIRSTRETRACT
 -2

	)

432 
	#FILAMENTCHANGE_FINALRETRACT
 -100

	)

436 #ifde‡
FILAMENTCHANGEENABLE


437 #ifde‡
EXTRUDER_RUNOUT_PREVENT


438 #îr‹ 
EXTRUDER_RUNOUT_PREVENT
 
cuºíéy
 
öcom∑tibÀ
 
wôh
 
FILAMENTCHANGE


445 #i‡
EXTRUDERS
 > 1 && 
deföed
 
TEMP_SENSOR_1_AS_REDUNDANT


449 #i‡
EXTRUDERS
 > 1 && 
deföed
 
HEATERS_PARALLEL


453 #i‡
TEMP_SENSOR_0
 > 0

454 
	#THERMISTORHEATER_0
 
TEMP_SENSOR_0


	)

455 
	#HEATER_0_USES_THERMISTOR


	)

457 #i‡
TEMP_SENSOR_1
 > 0

458 
	#THERMISTORHEATER_1
 
TEMP_SENSOR_1


	)

459 
	#HEATER_1_USES_THERMISTOR


	)

461 #i‡
TEMP_SENSOR_2
 > 0

462 
	#THERMISTORHEATER_2
 
TEMP_SENSOR_2


	)

463 
	#HEATER_2_USES_THERMISTOR


	)

465 #i‡
TEMP_SENSOR_BED
 > 0

466 
	#THERMISTORBED
 
TEMP_SENSOR_BED


	)

467 
	#BED_USES_THERMISTOR


	)

469 #i‡
TEMP_SENSOR_0
 == -1

470 
	#HEATER_0_USES_AD595


	)

472 #i‡
TEMP_SENSOR_1
 == -1

473 
	#HEATER_1_USES_AD595


	)

475 #i‡
TEMP_SENSOR_2
 == -1

476 
	#HEATER_2_USES_AD595


	)

478 #i‡
TEMP_SENSOR_BED
 == -1

479 
	#BED_USES_AD595


	)

481 #i‡
TEMP_SENSOR_0
 == -2

482 
	#HEATER_0_USES_MAX6675


	)

484 #i‡
TEMP_SENSOR_0
 == 0

485 #unde‡
HEATER_0_MINTEMP


486 #unde‡
HEATER_0_MAXTEMP


488 #i‡
TEMP_SENSOR_1
 == 0

489 #unde‡
HEATER_1_MINTEMP


490 #unde‡
HEATER_1_MAXTEMP


492 #i‡
TEMP_SENSOR_2
 == 0

493 #unde‡
HEATER_2_MINTEMP


494 #unde‡
HEATER_2_MAXTEMP


496 #i‡
TEMP_SENSOR_BED
 == 0

497 #unde‡
BED_MINTEMP


498 #unde‡
BED_MAXTEMP


	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/DOGMbitmaps.h

1 
	#START_BMPWIDTH
 60

2 
	#START_BMPHEIGHT
 64

3 
	#START_BMPBYTEWIDTH
 8

4 c⁄° 
°¨t_bmp
[574] 
PROGMEM
 = {

5 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,

	)

77 #i‡
EXTRUDERS
 == 1

78 
	#STATUS_SCREENWIDTH
 115

79 
	#STATUS_SCREENHEIGHT
 19

80 
	#STATUS_SCREENBYTEWIDTH
 15

81 c⁄° 
°©us_s¸ìn0_bmp
[] 
PROGMEM
 = {

82 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0xE0,

	)

103 
	#STATUS_SCREENWIDTH
 115

104 
	#STATUS_SCREENHEIGHT
 19

105 
	#STATUS_SCREENBYTEWIDTH
 15

106 c⁄° 
°©us_s¸ìn1_bmp
[] 
PROGMEM
 = {

107 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0xE0,

	)

127 #ñi‡
EXTRUDERS
 == 2

128 
	#STATUS_SCREENWIDTH
 115

129 
	#STATUS_SCREENHEIGHT
 19

130 
	#STATUS_SCREENBYTEWIDTH
 15

131 c⁄° 
°©us_s¸ìn0_bmp
[] 
PROGMEM
 = {

132 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0xE0,

	)

153 
	#STATUS_SCREENWIDTH
 115

154 
	#STATUS_SCREENHEIGHT
 19

155 
	#STATUS_SCREENBYTEWIDTH
 15

156 c⁄° 
°©us_s¸ìn1_bmp
[] 
PROGMEM
 = {

157 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0xE0,

	)

178 
	#STATUS_SCREENWIDTH
 115

179 
	#STATUS_SCREENHEIGHT
 19

180 
	#STATUS_SCREENBYTEWIDTH
 15

181 c⁄° 
°©us_s¸ìn0_bmp
[] 
PROGMEM
 = {

182 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0xE0,

	)

203 
	#STATUS_SCREENWIDTH
 115

204 
	#STATUS_SCREENHEIGHT
 19

205 
	#STATUS_SCREENBYTEWIDTH
 15

206 c⁄° 
°©us_s¸ìn1_bmp
[] 
PROGMEM
 = {

207 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0xE0,

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/LiquidCrystalRus.cpp

1 
	~"LiquidCry°ÆRus.h
"

3 
	~<°dio.h
>

4 
	~<°rög.h
>

5 
	~<öây≥s.h
>

6 
	~<avr/pgm•a˚.h
>

8 #i‡
deföed
(
ARDUINO
) && ARDUINO >= 100

9 
	~"Arduöo.h
"

11 
	~"WProgøm.h
"

16 c⁄° 
PROGMEM
 
uöt8_t
 
	gutf_ªcode
[] =

46 
	gLiquidCry°ÆRus
::
	$LiquidCry°ÆRus
(
uöt8_t
 
rs
, uöt8_à
rw
, uöt8_à
íabÀ
,

47 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
,

48 
uöt8_t
 
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
)

50 
	`öô
(0, 
rs
, 
rw
, 
íabÀ
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
);

51 
	}
}

53 
	gLiquidCry°ÆRus
::
	$LiquidCry°ÆRus
(
uöt8_t
 
rs
, uöt8_à
íabÀ
,

54 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
,

55 
uöt8_t
 
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
)

57 
	`öô
(0, 
rs
, 255, 
íabÀ
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
);

58 
	}
}

60 
	gLiquidCry°ÆRus
::
	$LiquidCry°ÆRus
(
uöt8_t
 
rs
, uöt8_à
rw
, uöt8_à
íabÀ
,

61 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
)

63 
	`öô
(1, 
rs
, 
rw
, 
íabÀ
, 
d0
, 
d1
, 
d2
, 
d3
, 0, 0, 0, 0);

64 
	}
}

66 
	gLiquidCry°ÆRus
::
	$LiquidCry°ÆRus
(
uöt8_t
 
rs
, uöt8_à
íabÀ
,

67 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
)

69 
	`öô
(1, 
rs
, 255, 
íabÀ
, 
d0
, 
d1
, 
d2
, 
d3
, 0, 0, 0, 0);

70 
	}
}

72 
	gLiquidCry°ÆRus
::
	$öô
(
uöt8_t
 
fourbômode
, uöt8_à
rs
, uöt8_à
rw
, uöt8_à
íabÀ
,

73 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
,

74 
uöt8_t
 
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
)

76 
_rs_pö
 = 
rs
;

77 
_rw_pö
 = 
rw
;

78 
_íabÀ_pö
 = 
íabÀ
;

80 
_d©a_pös
[0] = 
d0
;

81 
_d©a_pös
[1] = 
d1
;

82 
_d©a_pös
[2] = 
d2
;

83 
_d©a_pös
[3] = 
d3
;

84 
_d©a_pös
[4] = 
d4
;

85 
_d©a_pös
[5] = 
d5
;

86 
_d©a_pös
[6] = 
d6
;

87 
_d©a_pös
[7] = 
d7
;

89 
	`pöMode
(
_rs_pö
, 
OUTPUT
);

91 i‡(
_rw_pö
 != 255) {

92 
	`pöMode
(
_rw_pö
, 
OUTPUT
);

94 
	`pöMode
(
_íabÀ_pö
, 
OUTPUT
);

96 i‡(
fourbômode
)

97 
_di•œyfun˘i⁄
 = 
LCD_4BITMODE
 | 
LCD_1LINE
 | 
LCD_5x8DOTS
;

99 
_di•œyfun˘i⁄
 = 
LCD_8BITMODE
 | 
LCD_1LINE
 | 
LCD_5x8DOTS
;

101 
	`begö
(16, 1);

102 
	}
}

104 
	gLiquidCry°ÆRus
::
	$begö
(
uöt8_t
 
cﬁs
, uöt8_à
löes
, uöt8_à
dŸsize
) {

105 i‡(
löes
 > 1) {

106 
_di•œyfun˘i⁄
 |
LCD_2LINE
;

108 
_numlöes
 = 
löes
;

109 
_cuºlöe
 = 0;

112 i‡((
dŸsize
 !0Ë&& (
löes
 == 1)) {

113 
_di•œyfun˘i⁄
 |
LCD_5x10DOTS
;

119 
	`dñayMi¸o£c⁄ds
(50000);

121 
	`digôÆWrôe
(
_rs_pö
, 
LOW
);

122 
	`digôÆWrôe
(
_íabÀ_pö
, 
LOW
);

123 i‡(
_rw_pö
 != 255) {

124 
	`digôÆWrôe
(
_rw_pö
, 
LOW
);

128 i‡(! (
_di•œyfun˘i⁄
 & 
LCD_8BITMODE
)) {

133 
	`wrôeNbôs
(0x03,4);

134 
	`dñayMi¸o£c⁄ds
(4500);

137 
	`wrôeNbôs
(0x03,4);

138 
	`dñayMi¸o£c⁄ds
(4500);

141 
	`wrôeNbôs
(0x03,4);

142 
	`dñayMi¸o£c⁄ds
(150);

145 
	`wrôeNbôs
(0x02,4);

151 
	`comm™d
(
LCD_FUNCTIONSET
 | 
_di•œyfun˘i⁄
);

152 
	`dñayMi¸o£c⁄ds
(4500);

155 
	`comm™d
(
LCD_FUNCTIONSET
 | 
_di•œyfun˘i⁄
);

156 
	`dñayMi¸o£c⁄ds
(150);

159 
	`comm™d
(
LCD_FUNCTIONSET
 | 
_di•œyfun˘i⁄
);

163 
	`comm™d
(
LCD_FUNCTIONSET
 | 
_di•œyfun˘i⁄
);

166 
_di•œyc⁄åﬁ
 = 
LCD_DISPLAYON
 | 
LCD_CURSOROFF
 | 
LCD_BLINKOFF
;

167 
	`di•œy
();

170 
	`˛ór
();

173 
_di•œymode
 = 
LCD_ENTRYLEFT
 | 
LCD_ENTRYSHIFTDECREMENT
;

175 
	`comm™d
(
LCD_ENTRYMODESET
 | 
_di•œymode
);

177 
	}
}

179 
	gLiquidCry°ÆRus
::
	$£tDRAMModñ
(
uöt8_t
 
modñ
) {

180 
_døm_modñ
 = 
modñ
;

181 
	}
}

184 
	gLiquidCry°ÆRus
::
	$˛ór
()

186 
	`comm™d
(
LCD_CLEARDISPLAY
);

187 
	`dñayMi¸o£c⁄ds
(2000);

188 
	}
}

190 
	gLiquidCry°ÆRus
::
	$home
()

192 
	`comm™d
(
LCD_RETURNHOME
);

193 
	`dñayMi¸o£c⁄ds
(2000);

194 
	}
}

196 
	gLiquidCry°ÆRus
::
	$£tCurs‹
(
uöt8_t
 
cﬁ
, uöt8_à
row
)

198 
row_off£ts
[] = { 0x00, 0x40, 0x14, 0x54 };

199 i‡–
row
 >
_numlöes
 ) {

200 
row
 = 
_numlöes
-1;

203 
	`comm™d
(
LCD_SETDDRAMADDR
 | (
cﬁ
 + 
row_off£ts
[
row
]));

204 
	}
}

207 
	gLiquidCry°ÆRus
::
	$noDi•œy
() {

208 
_di•œyc⁄åﬁ
 &~
LCD_DISPLAYON
;

209 
	`comm™d
(
LCD_DISPLAYCONTROL
 | 
_di•œyc⁄åﬁ
);

210 
	}
}

211 
	gLiquidCry°ÆRus
::
	$di•œy
() {

212 
_di•œyc⁄åﬁ
 |
LCD_DISPLAYON
;

213 
	`comm™d
(
LCD_DISPLAYCONTROL
 | 
_di•œyc⁄åﬁ
);

214 
	}
}

217 
	gLiquidCry°ÆRus
::
	$noCurs‹
() {

218 
_di•œyc⁄åﬁ
 &~
LCD_CURSORON
;

219 
	`comm™d
(
LCD_DISPLAYCONTROL
 | 
_di•œyc⁄åﬁ
);

220 
	}
}

221 
	gLiquidCry°ÆRus
::
	$curs‹
() {

222 
_di•œyc⁄åﬁ
 |
LCD_CURSORON
;

223 
	`comm™d
(
LCD_DISPLAYCONTROL
 | 
_di•œyc⁄åﬁ
);

224 
	}
}

227 
	gLiquidCry°ÆRus
::
	$noBlök
() {

228 
_di•œyc⁄åﬁ
 &~
LCD_BLINKON
;

229 
	`comm™d
(
LCD_DISPLAYCONTROL
 | 
_di•œyc⁄åﬁ
);

230 
	}
}

231 
	gLiquidCry°ÆRus
::
	$blök
() {

232 
_di•œyc⁄åﬁ
 |
LCD_BLINKON
;

233 
	`comm™d
(
LCD_DISPLAYCONTROL
 | 
_di•œyc⁄åﬁ
);

234 
	}
}

237 
	gLiquidCry°ÆRus
::
	$s¸ﬁlDi•œyLe·
() {

238 
	`comm™d
(
LCD_CURSORSHIFT
 | 
LCD_DISPLAYMOVE
 | 
LCD_MOVELEFT
);

239 
	}
}

240 
	gLiquidCry°ÆRus
::
	$s¸ﬁlDi•œyRight
() {

241 
	`comm™d
(
LCD_CURSORSHIFT
 | 
LCD_DISPLAYMOVE
 | 
LCD_MOVERIGHT
);

242 
	}
}

245 
	gLiquidCry°ÆRus
::
	$À·ToRight
() {

246 
_di•œymode
 |
LCD_ENTRYLEFT
;

247 
	`comm™d
(
LCD_ENTRYMODESET
 | 
_di•œymode
);

248 
	}
}

251 
	gLiquidCry°ÆRus
::
	$rightToLe·
() {

252 
_di•œymode
 &~
LCD_ENTRYLEFT
;

253 
	`comm™d
(
LCD_ENTRYMODESET
 | 
_di•œymode
);

254 
	}
}

257 
	gLiquidCry°ÆRus
::
	$autos¸ﬁl
() {

258 
_di•œymode
 |
LCD_ENTRYSHIFTINCREMENT
;

259 
	`comm™d
(
LCD_ENTRYMODESET
 | 
_di•œymode
);

260 
	}
}

263 
	gLiquidCry°ÆRus
::
	$noAutos¸ﬁl
() {

264 
_di•œymode
 &~
LCD_ENTRYSHIFTINCREMENT
;

265 
	`comm™d
(
LCD_ENTRYMODESET
 | 
_di•œymode
);

266 
	}
}

270 
	gLiquidCry°ÆRus
::
	$¸óãCh¨
(
uöt8_t
 
loˇti⁄
, uöt8_à
ch¨m≠
[]) {

271 
loˇti⁄
 &= 0x7;

272 
	`comm™d
(
LCD_SETCGRAMADDR
 | (
loˇti⁄
 << 3));

273 
i
=0; i<8; i++) {

274 
	`wrôe
(
ch¨m≠
[
i
]);

276 
	}
}

280 
ölöe
 
	gLiquidCry°ÆRus
::
	$comm™d
(
uöt8_t
 
vÆue
) {

281 
	`£nd
(
vÆue
, 
LOW
);

282 
	}
}

284 #i‡
deföed
(
ARDUINO
) && ARDUINO >= 100

285 
size_t
 
	gLiquidCry°ÆRus
::
	$wrôe
(
uöt8_t
 
vÆue
)

287 
LiquidCry°ÆRus
::
	$wrôe
(
uöt8_t
 
vÆue
)

290 
uöt8_t
 
out_ch¨
=
vÆue
;

292 i‡(
_døm_modñ
 =
LCD_DRAM_WH1601
) {

293 
uöt8_t
 
ac
=
	`ªcv
(
LOW
) & 0x7f;

294 i‡(
ac
>7 &&ác<0x14Ë
	`comm™d
(
LCD_SETDDRAMADDR
 | (0x40+ac-8));

297 i‡(
vÆue
>=0x80) {

298 i‡(
vÆue
 >= 0xc0) {

299 
utf_hi_ch¨
 = 
vÆue
 - 0xd0;

301 
vÆue
 &= 0x3f;

302 i‡(!
utf_hi_ch¨
 && (
vÆue
 == 1))

303 
	`£nd
(0xa2,
HIGH
);

304 i‡((
utf_hi_ch¨
 =1Ë&& (
vÆue
 == 0x11))

305 
	`£nd
(0xb5,
HIGH
);

307 
	`£nd
(
	`pgm_ªad_byã_√¨
(
utf_ªcode
 + 
vÆue
 + (
utf_hi_ch¨
<<6Ë- 0x10), 
HIGH
);

309 } 
	`£nd
(
out_ch¨
, 
HIGH
);

310 #i‡
	`deföed
(
ARDUINO
) && ARDUINO >= 100

313 
	}
}

318 
	gLiquidCry°ÆRus
::
	$£nd
(
uöt8_t
 
vÆue
, uöt8_à
mode
) {

319 
	`digôÆWrôe
(
_rs_pö
, 
mode
);

322 i‡(
_rw_pö
 != 255) {

323 
	`digôÆWrôe
(
_rw_pö
, 
LOW
);

326 i‡(
_di•œyfun˘i⁄
 & 
LCD_8BITMODE
) {

327 
	`wrôeNbôs
(
vÆue
,8);

329 
	`wrôeNbôs
(
vÆue
>>4,4);

330 
	`wrôeNbôs
(
vÆue
,4);

332 
	}
}

335 
uöt8_t
 
	gLiquidCry°ÆRus
::
	$ªcv
(
uöt8_t
 
mode
) {

336 
uöt8_t
 
ªtvÆ
;

337 
	`digôÆWrôe
(
_rs_pö
, 
mode
);

340 i‡(
_rw_pö
 != 255) {

341 
	`digôÆWrôe
(
_rw_pö
, 
HIGH
);

344 i‡(
_di•œyfun˘i⁄
 & 
LCD_8BITMODE
) {

345 
ªtvÆ
 = 
	`ªadNbôs
(8);

347 
ªtvÆ
 = 
	`ªadNbôs
(4) << 4;

348 
ªtvÆ
 |
	`ªadNbôs
(4);

350  
ªtvÆ
;

351 
	}
}

352 
	gLiquidCry°ÆRus
::
	$pul£E«bÀ
() {

353 
	`digôÆWrôe
(
_íabÀ_pö
, 
LOW
);

354 
	`dñayMi¸o£c⁄ds
(1);

355 
	`digôÆWrôe
(
_íabÀ_pö
, 
HIGH
);

356 
	`dñayMi¸o£c⁄ds
(1);

357 
	`digôÆWrôe
(
_íabÀ_pö
, 
LOW
);

358 
	`dñayMi¸o£c⁄ds
(100);

359 
	}
}

361 
	gLiquidCry°ÆRus
::
	$wrôeNbôs
(
uöt8_t
 
vÆue
, uöt8_à
n
) {

362 
i
 = 0; i < 
n
; i++) {

363 
	`pöMode
(
_d©a_pös
[
i
], 
OUTPUT
);

364 
	`digôÆWrôe
(
_d©a_pös
[
i
], (
vÆue
 >> i) & 0x01);

367 
	`pul£E«bÀ
();

368 
	}
}

370 
uöt8_t
 
	gLiquidCry°ÆRus
::
	$ªadNbôs
(
uöt8_t
 
n
) {

371 
uöt8_t
 
ªtvÆ
=0;

372 
i
 = 0; i < 
n
; i++) {

373 
	`pöMode
(
_d©a_pös
[
i
], 
INPUT
);

376 
	`digôÆWrôe
(
_íabÀ_pö
, 
LOW
);

377 
	`dñayMi¸o£c⁄ds
(1);

378 
	`digôÆWrôe
(
_íabÀ_pö
, 
HIGH
);

379 
	`dñayMi¸o£c⁄ds
(1);

381 
i
 = 0; i < 
n
; i++) {

382 
ªtvÆ
 |(
	`digôÆRód
(
_d©a_pös
[
i
]Ë=
HIGH
)?(1 << i):0;

385 
	`digôÆWrôe
(
_íabÀ_pö
, 
LOW
);

387  
ªtvÆ
;

388 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/LiquidCrystalRus.h

7 #i‚de‡
LiquidCry°ÆRus_h


8 
	#LiquidCry°ÆRus_h


	)

10 
	~<öây≥s.h
>

11 
	~"Pröt.h
"

14 
	#LCD_CLEARDISPLAY
 0x01

	)

15 
	#LCD_RETURNHOME
 0x02

	)

16 
	#LCD_ENTRYMODESET
 0x04

	)

17 
	#LCD_DISPLAYCONTROL
 0x08

	)

18 
	#LCD_CURSORSHIFT
 0x10

	)

19 
	#LCD_FUNCTIONSET
 0x20

	)

20 
	#LCD_SETCGRAMADDR
 0x40

	)

21 
	#LCD_SETDDRAMADDR
 0x80

	)

24 
	#LCD_ENTRYRIGHT
 0x00

	)

25 
	#LCD_ENTRYLEFT
 0x02

	)

26 
	#LCD_ENTRYSHIFTINCREMENT
 0x01

	)

27 
	#LCD_ENTRYSHIFTDECREMENT
 0x00

	)

30 
	#LCD_DISPLAYON
 0x04

	)

31 
	#LCD_DISPLAYOFF
 0x00

	)

32 
	#LCD_CURSORON
 0x02

	)

33 
	#LCD_CURSOROFF
 0x00

	)

34 
	#LCD_BLINKON
 0x01

	)

35 
	#LCD_BLINKOFF
 0x00

	)

38 
	#LCD_DISPLAYMOVE
 0x08

	)

39 
	#LCD_CURSORMOVE
 0x00

	)

40 
	#LCD_MOVERIGHT
 0x04

	)

41 
	#LCD_MOVELEFT
 0x00

	)

44 
	#LCD_8BITMODE
 0x10

	)

45 
	#LCD_4BITMODE
 0x00

	)

46 
	#LCD_2LINE
 0x08

	)

47 
	#LCD_1LINE
 0x00

	)

48 
	#LCD_5x10DOTS
 0x04

	)

49 
	#LCD_5x8DOTS
 0x00

	)

52 
	#LCD_DRAM_N‹mÆ
 0x00

	)

53 
	#LCD_DRAM_WH1601
 0x01

	)

56 ˛as†
	cLiquidCry°ÆRus
 : 
public
 
Pröt
 {

57 
public
:

58 
LiquidCry°ÆRus
(
uöt8_t
 
rs
, uöt8_à
íabÀ
,

59 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
,

60 
uöt8_t
 
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
);

61 
LiquidCry°ÆRus
(
uöt8_t
 
rs
, uöt8_à
rw
, uöt8_à
íabÀ
,

62 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
,

63 
uöt8_t
 
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
);

64 
LiquidCry°ÆRus
(
uöt8_t
 
rs
, uöt8_à
rw
, uöt8_à
íabÀ
,

65 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
);

66 
LiquidCry°ÆRus
(
uöt8_t
 
rs
, uöt8_à
íabÀ
,

67 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
);

69 
öô
(
uöt8_t
 
fourbômode
, uöt8_à
rs
, uöt8_à
rw
, uöt8_à
íabÀ
,

70 
uöt8_t
 
d0
, uöt8_à
d1
, uöt8_à
d2
, uöt8_à
d3
,

71 
uöt8_t
 
d4
, uöt8_à
d5
, uöt8_à
d6
, uöt8_à
d7
);

73 
begö
(
uöt8_t
 
cﬁs
, uöt8_à
rows
, uöt8_à
ch¨size
 = 
LCD_5x8DOTS
);

75 
˛ór
();

76 
home
();

78 
noDi•œy
();

79 
di•œy
();

80 
noBlök
();

81 
blök
();

82 
noCurs‹
();

83 
curs‹
();

84 
s¸ﬁlDi•œyLe·
();

85 
s¸ﬁlDi•œyRight
();

86 
À·ToRight
();

87 
rightToLe·
();

88 
autos¸ﬁl
();

89 
noAutos¸ﬁl
();

91 
¸óãCh¨
(
uöt8_t
, uint8_t[]);

92 
£tCurs‹
(
uöt8_t
, uint8_t);

94 #i‡
deföed
(
ARDUINO
) && ARDUINO >= 100

95 
vútuÆ
 
size_t
 
wrôe
(
uöt8_t
);

96 
usög
 
	mPröt
::
wrôe
;

98 
vútuÆ
 
wrôe
(
uöt8_t
);

101 
comm™d
(
uöt8_t
);

103 
£tDRAMModñ
(
uöt8_t
);

105 
	m¥iv©e
:

106 
£nd
(
uöt8_t
, uint8_t);

107 
wrôeNbôs
(
uöt8_t
, uint8_t);

108 
uöt8_t
 
ªcv
(uint8_t);

109 
uöt8_t
 
ªadNbôs
(uint8_t);

110 
pul£E«bÀ
();

112 
uöt8_t
 
	m_rs_pö
;

113 
uöt8_t
 
	m_rw_pö
;

114 
uöt8_t
 
	m_íabÀ_pö
;

115 
uöt8_t
 
	m_d©a_pös
[8];

117 
uöt8_t
 
	m_di•œyfun˘i⁄
;

118 
uöt8_t
 
	m_di•œyc⁄åﬁ
;

119 
uöt8_t
 
	m_di•œymode
;

121 
uöt8_t
 
	m_öôülized
;

123 
uöt8_t
 
	m_numlöes
,
	m_cuºlöe
;

125 
uöt8_t
 
	m_døm_modñ
;

126 
uöt8_t
 
	mutf_hi_ch¨
;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/Marlin.h

4 #i‚de‡
MARLIN_H


5 
	#MARLIN_H


	)

7 
	#FORCE_INLINE
 
	`__©åibuã__
((
Æways_ölöe
)Ë
ölöe


	)

9 
	~<m©h.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<öây≥s.h
>

15 
	~<utû/dñay.h
>

16 
	~<avr/pgm•a˚.h
>

17 
	~<avr/ì¥om.h
>

18 
	~<avr/öãºu±.h
>

21 
	~"Á°io.h
"

22 
	~"C⁄figuøti⁄.h
"

23 
	~"pös.h
"

25 #i‚de‡
AT90USB


26 
	#H¨dw¨eSîül_h


28 

	)

29 #i‡(
ARDUINO
 >= 100)

30 
	~"Arduöo.h
"

32 
	~"WProgøm.h
"

34 
	#™ÆogI≈utToDigôÆPö
(
p
Ë(’Ë+ 
A0
)

	)

37 #ifde‡
AT90USB


38 
	~"H¨dw¨eSîül.h
"

41 
	~"M¨löSîül.h
"

43 #i‚de‡
cbi


44 
	#cbi
(
s‰
, 
bô
Ë(
	`_SFR_BYTE
(s‰Ë&~
	`_BV
(bô))

	)

46 #i‚de‡
sbi


47 
	#sbi
(
s‰
, 
bô
Ë(
	`_SFR_BYTE
(s‰Ë|
	`_BV
(bô))

	)

50 
	~"WSåög.h
"

52 #ifde‡
AT90USB


53 #ifde‡
BTENABLED


54 
	#MYSERIAL
 
bt


	)

56 
	#MYSERIAL
 
Sîül


	)

59 
	#MYSERIAL
 
MSîül


	)

62 
	#SERIAL_PROTOCOL
(
x
Ë(
MYSERIAL
.
	`¥öt
(x))

	)

63 
	#SERIAL_PROTOCOL_F
(
x
,
y
Ë(
MYSERIAL
.
	`¥öt
(x,y))

	)

64 
	#SERIAL_PROTOCOLPGM
(
x
Ë(
	`£rüÕrötPGM
(
	`PSTR
(x)))

	)

65 
	#SERIAL_PROTOCOLLN
(
x
Ë(
MYSERIAL
.
	`¥öt
(x),MYSERIAL.
	`wrôe
('\n'))

	)

66 
	#SERIAL_PROTOCOLLNPGM
(
x
Ë(
	`£rüÕrötPGM
(
	`PSTR
(x)),
MYSERIAL
.
	`wrôe
('\n'))

	)

69 c⁄° 
	gîr‹magic
[] 
	gPROGMEM
 ="Error:";

70 c⁄° 
	gechomagic
[] 
	gPROGMEM
 ="echo:";

71 
	#SERIAL_ERROR_START
 (
	`£rüÕrötPGM
(
îr‹magic
))

	)

72 
	#SERIAL_ERROR
(
x
Ë
	`SERIAL_PROTOCOL
(x)

	)

73 
	#SERIAL_ERRORPGM
(
x
Ë
	`SERIAL_PROTOCOLPGM
(x)

	)

74 
	#SERIAL_ERRORLN
(
x
Ë
	`SERIAL_PROTOCOLLN
(x)

	)

75 
	#SERIAL_ERRORLNPGM
(
x
Ë
	`SERIAL_PROTOCOLLNPGM
(x)

	)

77 
	#SERIAL_ECHO_START
 (
	`£rüÕrötPGM
(
echomagic
))

	)

78 
	#SERIAL_ECHO
(
x
Ë
	`SERIAL_PROTOCOL
(x)

	)

79 
	#SERIAL_ECHOPGM
(
x
Ë
	`SERIAL_PROTOCOLPGM
(x)

	)

80 
	#SERIAL_ECHOLN
(
x
Ë
	`SERIAL_PROTOCOLLN
(x)

	)

81 
	#SERIAL_ECHOLNPGM
(
x
Ë
	`SERIAL_PROTOCOLLNPGM
(x)

	)

83 
	#SERIAL_ECHOPAIR
(
«me
,
vÆue
Ë(
	`£rül_ech›aú_P
(
	`PSTR
“ame),(vÆue)))

	)

85 
£rül_ech›aú_P
(c⁄° *
s_P
, 
v
);

86 
£rül_ech›aú_P
(c⁄° *
s_P
, 
v
);

87 
£rül_ech›aú_P
(c⁄° *
s_P
, 
v
);

91 
FORCE_INLINE
 
	$£rüÕrötPGM
(c⁄° *
°r
)

93 
ch
=
	`pgm_ªad_byã
(
°r
);

94 
ch
)

96 
MYSERIAL
.
	`wrôe
(
ch
);

97 
ch
=
	`pgm_ªad_byã
(++
°r
);

99 
	}
}

102 
gë_comm™d
();

103 
¥o˚ss_comm™ds
();

105 
m™age_öa˘ivôy
();

107 #i‡
deföed
(
DUAL_X_CARRIAGE
Ë&& deföed(
X_ENABLE_PIN
) && X_ENABLE_PIN > -1 \

108 && 
deföed
(
X2_ENABLE_PIN
Ë&& 
	gX2_ENABLE_PIN
 > -1

109 
	#íabÀ_x
(Ëdÿ{ 
	`WRITE
(
X_ENABLE_PIN
, 
X_ENABLE_ON
); WRITE(
X2_ENABLE_PIN
, X_ENABLE_ON); } 0)

	)

110 
	#dißbÀ_x
(Ëdÿ{ 
	`WRITE
(
X_ENABLE_PIN
,!
X_ENABLE_ON
); WRITE(
X2_ENABLE_PIN
,!X_ENABLE_ON); 
axis_known_posôi⁄
[
X_AXIS
] = 
Ál£
; } 0)

	)

111 #ñi‡
deföed
(
X_ENABLE_PIN
) && X_ENABLE_PIN > -1

112 
	#íabÀ_x
(Ë
	`WRITE
(
X_ENABLE_PIN
, 
X_ENABLE_ON
)

	)

113 
	#dißbÀ_x
(Ë{ 
	`WRITE
(
X_ENABLE_PIN
,!
X_ENABLE_ON
); 
axis_known_posôi⁄
[
X_AXIS
] = 
Ál£
; }

	)

115 
	#íabÀ_x
(Ë;

	)

116 
	#dißbÀ_x
(Ë;

	)

119 #i‡
deföed
(
Y_ENABLE_PIN
) && Y_ENABLE_PIN > -1

120 #ifde‡
Y_DUAL_STEPPER_DRIVERS


121 
	#íabÀ_y
(Ë{ 
	`WRITE
(
Y_ENABLE_PIN
, 
Y_ENABLE_ON
); WRITE(
Y2_ENABLE_PIN
, Y_ENABLE_ON); }

	)

122 
	#dißbÀ_y
(Ë{ 
	`WRITE
(
Y_ENABLE_PIN
,!
Y_ENABLE_ON
); WRITE(
Y2_ENABLE_PIN
, !Y_ENABLE_ON); 
axis_known_posôi⁄
[
Y_AXIS
] = 
Ál£
; }

	)

124 
	#íabÀ_y
(Ë
	`WRITE
(
Y_ENABLE_PIN
, 
Y_ENABLE_ON
)

	)

125 
	#dißbÀ_y
(Ë{ 
	`WRITE
(
Y_ENABLE_PIN
,!
Y_ENABLE_ON
); 
axis_known_posôi⁄
[
Y_AXIS
] = 
Ál£
; }

	)

128 
	#íabÀ_y
(Ë;

	)

129 
	#dißbÀ_y
(Ë;

	)

132 #i‡
deföed
(
Z_ENABLE_PIN
) && Z_ENABLE_PIN > -1

133 #ifde‡
Z_DUAL_STEPPER_DRIVERS


134 
	#íabÀ_z
(Ë{ 
	`WRITE
(
Z_ENABLE_PIN
, 
Z_ENABLE_ON
); WRITE(
Z2_ENABLE_PIN
, Z_ENABLE_ON); }

	)

135 
	#dißbÀ_z
(Ë{ 
	`WRITE
(
Z_ENABLE_PIN
,!
Z_ENABLE_ON
); WRITE(
Z2_ENABLE_PIN
,!Z_ENABLE_ON); 
axis_known_posôi⁄
[
Z_AXIS
] = 
Ál£
; }

	)

137 
	#íabÀ_z
(Ë
	`WRITE
(
Z_ENABLE_PIN
, 
Z_ENABLE_ON
)

	)

138 
	#dißbÀ_z
(Ë{ 
	`WRITE
(
Z_ENABLE_PIN
,!
Z_ENABLE_ON
); 
axis_known_posôi⁄
[
Z_AXIS
] = 
Ál£
; }

	)

141 
	#íabÀ_z
(Ë;

	)

142 
	#dißbÀ_z
(Ë;

	)

145 #i‡
deföed
(
E0_ENABLE_PIN
) && (E0_ENABLE_PIN > -1)

146 
	#íabÀ_e0
(Ë
	`WRITE
(
E0_ENABLE_PIN
, 
E_ENABLE_ON
)

	)

147 
	#dißbÀ_e0
(Ë
	`WRITE
(
E0_ENABLE_PIN
,!
E_ENABLE_ON
)

	)

149 
	#íabÀ_e0
(Ë

	)

150 
	#dißbÀ_e0
(Ë

	)

153 #i‡(
EXTRUDERS
 > 1Ë&& 
deföed
(
E1_ENABLE_PIN
) && (E1_ENABLE_PIN > -1)

154 
	#íabÀ_e1
(Ë
	`WRITE
(
E1_ENABLE_PIN
, 
E_ENABLE_ON
)

	)

155 
	#dißbÀ_e1
(Ë
	`WRITE
(
E1_ENABLE_PIN
,!
E_ENABLE_ON
)

	)

157 
	#íabÀ_e1
(Ë

	)

158 
	#dißbÀ_e1
(Ë

	)

161 #i‡(
EXTRUDERS
 > 2Ë&& 
deföed
(
E2_ENABLE_PIN
) && (E2_ENABLE_PIN > -1)

162 
	#íabÀ_e2
(Ë
	`WRITE
(
E2_ENABLE_PIN
, 
E_ENABLE_ON
)

	)

163 
	#dißbÀ_e2
(Ë
	`WRITE
(
E2_ENABLE_PIN
,!
E_ENABLE_ON
)

	)

165 
	#íabÀ_e2
(Ë

	)

166 
	#dißbÀ_e2
(Ë

	)

170 
	eAxisEnum
 {
	mX_AXIS
=0, 
	mY_AXIS
=1, 
	mZ_AXIS
=2, 
	mE_AXIS
=3};

173 
FlushSîülReque°Re£nd
();

174 
CÀ¨ToSíd
();

176 
gë_co‹dö©es
();

177 #ifde‡
DELTA


178 
ˇlcuœã_dñè
(
ˇπesün
[3]);

179 
adju°_dñè
(
ˇπesün
[3]);

180 
¥ï¨e_move_øw
();

181 
dñè
[3];

183 #ifde‡
SCARA


184 
ˇlcuœã_dñè
(
ˇπesün
[3]);

185 
ˇlcuœã_SCARA_f‹w¨d_Tønsf‹m
(
f_sˇø
[3]);

187 
¥ï¨e_move
();

188 
kûl
();

189 
St›
();

191 
boﬁ
 
IsSt›≥d
();

193 
íquecomm™d
(c⁄° *
cmd
);

194 
íquecomm™d_P
(c⁄° *
cmd
);

195 
¥ï¨e_¨c_move
(
is˛ockwi£
);

196 
˛amp_to_so·w¨e_íd°›s
(
èrgë
[3]);

198 
ª‰esh_cmd_timeout
();

200 #ifde‡
FAST_PWM_FAN


201 
£tPwmFªquícy
(
uöt8_t
 
pö
, 
vÆ
);

204 #i‚de‡
CRITICAL_SECTION_START


205 
	#CRITICAL_SECTION_START
 
_§eg
 = 
SREG
; 
	`˛i
();

	)

206 
	#CRITICAL_SECTION_END
 
SREG
 = 
_§eg
;

	)

209 
homög_„edøã
[];

210 
boﬁ
 
axis_ªœtive_modes
[];

211 
„edmu…ùly
;

212 
exåudemu…ùly
;

213 
exåudî_mu…ùly
[
EXTRUDERS
];

214 
vﬁumëric_mu…ùlõr
[
EXTRUDERS
];

215 
cuºít_posôi⁄
[
NUM_AXIS
] ;

216 
add_homög
[3];

217 #ifde‡
DELTA


218 
íd°›_adj
[3];

219 
dñè_ødius
;

220 
dñè_düg⁄Æ_rod
;

221 
dñè_£gmíts_≥r_£c⁄d
;

222 
ªˇlc_dñè_£âögs
(
ødius
, 
düg⁄Æ_rod
);

224 #ifde‡
SCARA


225 
axis_sˇlög
[3];

227 
mö_pos
[3];

228 
max_pos
[3];

229 
boﬁ
 
axis_known_posôi⁄
[3];

230 
z¥obe_zoff£t
;

231 
ÁnS≥ed
;

232 #ifde‡
BARICUDA


233 
VÆvePªssuª
;

234 
EtoPPªssuª
;

237 #ifde‡
FAN_SOFT_PWM


238 
ÁnS≥edSo·Pwm
;

241 #ifde‡
FILAMENT_SENSOR


242 
fûamít_width_nomöÆ
;

243 
boﬁ
 
fûamít_£ns‹
;

244 
fûamít_width_mós
;

245 sig√d 
mósuªmít_dñay
[];

246 
dñay_ödex1
, 
dñay_ödex2
;

247 
dñay_di°
;

248 
mós_dñay_cm
;

251 #ifde‡
FWRETRACT


252 
boﬁ
 
aut‹ëø˘_íabÀd
;

253 
boﬁ
 
ªåa˘ed
[
EXTRUDERS
];

254 
ªåa˘_Àngth
, 
ªåa˘_Àngth_sw≠
, 
ªåa˘_„edøã
, 
ªåa˘_zli·
;

255 
ªåa˘_ªcovî_Àngth
, 
ªåa˘_ªcovî_Àngth_sw≠
, 
ªåa˘_ªcovî_„edøã
;

258 
°¨âime
;

259 
°›time
;

262 
uöt8_t
 
a˘ive_exåudî
;

264 #ifde‡
DIGIPOT_I2C


265 
digùŸ_i2c_£t_cuºít
–
ch™√l
, 
cuºít
 );

266 
digùŸ_i2c_öô
();

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/MarlinSerial.cpp

23 
	~"M¨lö.h
"

24 
	~"M¨löSîül.h
"

26 #i‚de‡
AT90USB


29 #i‡
deföed
(
UBRRH
Ë|| deföed(
UBRR0H
Ë|| deföed(
UBRR1H
Ë|| deföed(
UBRR2H
Ë|| deföed(
UBRR3H
)

31 #i‡
UART_PRESENT
(
SERIAL_PORT
)

32 
rög_buf„r
 
	grx_buf„r
 = { { 0 }, 0, 0 };

35 
FORCE_INLINE
 
	$°‹e_ch¨
(
c
)

37 
i
 = ()(
rx_buf„r
.
hód
 + 1Ë% 
RX_BUFFER_SIZE
;

43 i‡(
i
 !
rx_buf„r
.
èû
) {

44 
rx_buf„r
.
buf„r
[rx_buf„r.
hód
] = 
c
;

45 
rx_buf„r
.
hód
 = 
i
;

47 
	}
}

51 #i‡
deföed
(
M_USARTx_RX_ve˘
)

54 
	$SIGNAL
(
M_USARTx_RX_ve˘
)

56 
c
 = 
M_UDRx
;

57 
	`°‹e_ch¨
(
c
);

58 
	}
}

63 
	gM¨löSîül
::
	$M¨löSîül
()

66 
	}
}

70 
M¨löSîül
::
	$begö
(
baud
)

72 
uöt16_t
 
baud_£âög
;

73 
boﬁ
 
u£U2X
 = 
åue
;

75 #i‡
F_CPU
 =16000000UL && 
SERIAL_PORT
 == 0

79 i‡(
baud
 == 57600) {

80 
u£U2X
 = 
Ál£
;

84 i‡(
u£U2X
) {

85 
M_UCSRxA
 = 1 << 
M_U2Xx
;

86 
baud_£âög
 = (
F_CPU
 / 4 / 
baud
 - 1) / 2;

88 
M_UCSRxA
 = 0;

89 
baud_£âög
 = (
F_CPU
 / 8 / 
baud
 - 1) / 2;

93 
M_UBRRxH
 = 
baud_£âög
 >> 8;

94 
M_UBRRxL
 = 
baud_£âög
;

96 
	`sbi
(
M_UCSRxB
, 
M_RXENx
);

97 
	`sbi
(
M_UCSRxB
, 
M_TXENx
);

98 
	`sbi
(
M_UCSRxB
, 
M_RXCIEx
);

99 
	}
}

101 
	gM¨löSîül
::
	$íd
()

103 
	`cbi
(
M_UCSRxB
, 
M_RXENx
);

104 
	`cbi
(
M_UCSRxB
, 
M_TXENx
);

105 
	`cbi
(
M_UCSRxB
, 
M_RXCIEx
);

106 
	}
}

110 
	gM¨löSîül
::
	$≥ek
()

112 i‡(
rx_buf„r
.
hód
 =rx_buf„r.
èû
) {

115  
rx_buf„r
.
buf„r
[rx_buf„r.
èû
];

117 
	}
}

119 
	gM¨löSîül
::
	$ªad
()

122 i‡(
rx_buf„r
.
hód
 =rx_buf„r.
èû
) {

125 
c
 = 
rx_buf„r
.
buf„r
[rx_buf„r.
èû
];

126 
rx_buf„r
.
èû
 = ()‘x_buf„r.èû + 1Ë% 
RX_BUFFER_SIZE
;

127  
c
;

129 
	}
}

131 
	gM¨löSîül
::
	$Êush
()

142 
rx_buf„r
.
hód
 =Ñx_buf„r.
èû
;

143 
	}
}

153 
	gM¨löSîül
::
	$¥öt
(
c
, 
ba£
)

155 
	`¥öt
((Ë
c
, 
ba£
);

156 
	}
}

158 
	gM¨löSîül
::
	$¥öt
(
b
, 
ba£
)

160 
	`¥öt
((Ë
b
, 
ba£
);

161 
	}
}

163 
	gM¨löSîül
::
	$¥öt
(
n
, 
ba£
)

165 
	`¥öt
((Ë
n
, 
ba£
);

166 
	}
}

168 
	gM¨löSîül
::
	$¥öt
(
n
, 
ba£
)

170 
	`¥öt
((Ë
n
, 
ba£
);

171 
	}
}

173 
	gM¨löSîül
::
	$¥öt
(
n
, 
ba£
)

175 i‡(
ba£
 == 0) {

176 
	`wrôe
(
n
);

177 } i‡(
ba£
 == 10) {

178 i‡(
n
 < 0) {

179 
	`¥öt
('-');

180 
n
 = -n;

182 
	`¥ötNumbî
(
n
, 10);

184 
	`¥ötNumbî
(
n
, 
ba£
);

186 
	}
}

188 
	gM¨löSîül
::
	$¥öt
(
n
, 
ba£
)

190 i‡(
ba£
 =0Ë
	`wrôe
(
n
);

191 
	`¥ötNumbî
(
n
, 
ba£
);

192 
	}
}

194 
	gM¨löSîül
::
	$¥öt
(
n
, 
digôs
)

196 
	`¥ötFlﬂt
(
n
, 
digôs
);

197 
	}
}

199 
	gM¨löSîül
::
	$¥öén
()

201 
	`¥öt
('\r');

202 
	`¥öt
('\n');

203 
	}
}

205 
	gM¨löSîül
::
	$¥öén
(c⁄° 
Såög
 &
s
)

207 
	`¥öt
(
s
);

208 
	`¥öén
();

209 
	}
}

211 
	gM¨löSîül
::
	$¥öén
(c⁄° 
c
[])

213 
	`¥öt
(
c
);

214 
	`¥öén
();

215 
	}
}

217 
	gM¨löSîül
::
	$¥öén
(
c
, 
ba£
)

219 
	`¥öt
(
c
, 
ba£
);

220 
	`¥öén
();

221 
	}
}

223 
	gM¨löSîül
::
	$¥öén
(
b
, 
ba£
)

225 
	`¥öt
(
b
, 
ba£
);

226 
	`¥öén
();

227 
	}
}

229 
	gM¨löSîül
::
	$¥öén
(
n
, 
ba£
)

231 
	`¥öt
(
n
, 
ba£
);

232 
	`¥öén
();

233 
	}
}

235 
	gM¨löSîül
::
	$¥öén
(
n
, 
ba£
)

237 
	`¥öt
(
n
, 
ba£
);

238 
	`¥öén
();

239 
	}
}

241 
	gM¨löSîül
::
	$¥öén
(
n
, 
ba£
)

243 
	`¥öt
(
n
, 
ba£
);

244 
	`¥öén
();

245 
	}
}

247 
	gM¨löSîül
::
	$¥öén
(
n
, 
ba£
)

249 
	`¥öt
(
n
, 
ba£
);

250 
	`¥öén
();

251 
	}
}

253 
	gM¨löSîül
::
	$¥öén
(
n
, 
digôs
)

255 
	`¥öt
(
n
, 
digôs
);

256 
	`¥öén
();

257 
	}
}

261 
	gM¨löSîül
::
	$¥ötNumbî
(
n
, 
uöt8_t
 
ba£
)

263 
buf
[8 * ()];

264 
i
 = 0;

266 i‡(
n
 == 0) {

267 
	`¥öt
('0');

271 
n
 > 0) {

272 
buf
[
i
++] = 
n
 % 
ba£
;

273 
n
 /
ba£
;

276 ; 
i
 > 0; i--)

277 
	`¥öt
((Ë(
buf
[
i
 - 1] < 10 ?

278 '0' + 
buf
[
i
 - 1] :

279 'A' + 
buf
[
i
 - 1] - 10));

280 
	}
}

282 
	gM¨löSîül
::
	$¥ötFlﬂt
(
numbî
, 
uöt8_t
 
digôs
)

285 i‡(
numbî
 < 0.0)

287 
	`¥öt
('-');

288 
numbî
 = -number;

292 
roundög
 = 0.5;

293 
uöt8_t
 
i
=0; i<
digôs
; ++i)

294 
roundög
 /= 10.0;

296 
numbî
 +
roundög
;

299 
öt_∑π
 = ()
numbî
;

300 
ªmaödî
 = 
numbî
 - ()
öt_∑π
;

301 
	`¥öt
(
öt_∑π
);

304 i‡(
digôs
 > 0)

305 
	`¥öt
(".");

308 
digôs
-- > 0)

310 
ªmaödî
 *= 10.0;

311 
toPröt
 = (
ªmaödî
);

312 
	`¥öt
(
toPröt
);

313 
ªmaödî
 -
toPröt
;

315 
	}
}

319 
M¨löSîül
 
	gMSîül
;

325 #i‡
deföed
(
AT90USB
Ë&& deföed (
BTENABLED
)

326 
H¨dw¨eSîül
 
	gbt
;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/MarlinSerial.h

22 #i‚de‡
M¨löSîül_h


23 
	#M¨löSîül_h


	)

24 
	~"M¨lö.h
"

26 #i‡!
deföed
(
SERIAL_PORT
)

27 
	#SERIAL_PORT
 0

	)

31 
	#UART_PRESENT
(
p‹t
Ë(’‹à=0 && (
	`deföed
(
UBRRH
Ë|| deföed(
UBRR0H
))) || \

32 (
p‹t
 =1 && 
	`deföed
(
UBRR1H
)Ë|| (p‹à=2 && deföed(
UBRR2H
)) || \

33 (
p‹t
 =3 && 
	`deföed
(
UBRR3H
)))

	)

37 
	#SERIAL_REGNAME
(
ªgi°îba£
,
numbî
,
suffix
Ë
	`SERIAL_REGNAME_INTERNAL
‘egi°îba£,numbî,suffix)

	)

38 #i‡
SERIAL_PORT
 =0 && (!
deföed
(
UBRR0H
Ë|| !deföed(
UDR0
))

39 
	#SERIAL_REGNAME_INTERNAL
(
ªgi°îba£
,
numbî
,
suffix
Ëªgi°îba£##
	)
suffix

41 
	#SERIAL_REGNAME_INTERNAL
(
ªgi°îba£
,
numbî
,
suffix
Ëªgi°îba£##numbî##
	)
suffix

46 
	#M_UCSRxA
 
	`SERIAL_REGNAME
(
UCSR
,
SERIAL_PORT
,
A
)

47 
	#M_UCSRxB
 
	`SERIAL_REGNAME
(
UCSR
,
SERIAL_PORT
,
B
)

	)

48 
	#M_RXENx
 
	`SERIAL_REGNAME
(
RXEN
,
SERIAL_PORT
,)

	)

49 
	#M_TXENx
 
	`SERIAL_REGNAME
(
TXEN
,
SERIAL_PORT
,)

	)

50 
	#M_RXCIEx
 
	`SERIAL_REGNAME
(
RXCIE
,
SERIAL_PORT
,)

	)

51 
	#M_UDREx
 
	`SERIAL_REGNAME
(
UDRE
,
SERIAL_PORT
,)

	)

52 
	#M_UDRx
 
	`SERIAL_REGNAME
(
UDR
,
SERIAL_PORT
,)

	)

53 
	#M_UBRRxH
 
	`SERIAL_REGNAME
(
UBRR
,
SERIAL_PORT
,
H
)

	)

54 
	#M_UBRRxL
 
	`SERIAL_REGNAME
(
UBRR
,
SERIAL_PORT
,
L
)

	)

55 
	#M_RXCx
 
	`SERIAL_REGNAME
(
RXC
,
SERIAL_PORT
,)

	)

56 
	#M_USARTx_RX_ve˘
 
	`SERIAL_REGNAME
(
USART
,
SERIAL_PORT
,
_RX_ve˘
)

	)

57 
	#M_U2Xx
 
	`SERIAL_REGNAME
(
U2X
,
SERIAL_PORT
,)

	)

61 
	#DEC
 10

	)

62 
	#HEX
 16

	)

63 
	#OCT
 8

	)

64 
	#BIN
 2

	)

65 
	#BYTE
 0

	)

68 #i‚de‡
AT90USB


73 
	#RX_BUFFER_SIZE
 128

	)

76 
	srög_buf„r


78 
	mbuf„r
[
RX_BUFFER_SIZE
];

79 
	mhód
;

80 
	mèû
;

83 #i‡
UART_PRESENT
(
SERIAL_PORT
)

84 
rög_buf„r
 
rx_buf„r
;

87 ˛as†
	cM¨löSîül


90 
	mpublic
:

91 
M¨löSîül
();

92 
begö
();

93 
íd
();

94 
≥ek
();

95 
ªad
();

96 
Êush
();

98 
FORCE_INLINE
 
	$avaûabÀ
()

100  ()(
RX_BUFFER_SIZE
 + 
rx_buf„r
.
hód
 -Ñx_buf„r.
èû
) % RX_BUFFER_SIZE;

103 
FORCE_INLINE
 
	$wrôe
(
uöt8_t
 
c
)

105 !((
M_UCSRxA
Ë& (1 << 
M_UDREx
)))

108 
M_UDRx
 = 
c
;

109 
	}
}

112 
FORCE_INLINE
 
	$checkRx
()

114 if((
M_UCSRxA
 & (1<<
M_RXCx
)) != 0) {

115 
c
 = 
M_UDRx
;

116 
i
 = ()(
rx_buf„r
.
hód
 + 1Ë% 
RX_BUFFER_SIZE
;

122 i‡(
i
 !
rx_buf„r
.
èû
) {

123 
rx_buf„r
.
buf„r
[rx_buf„r.
hód
] = 
c
;

124 
rx_buf„r
.
hód
 = 
i
;

127 
	}
}

130 
	g¥iv©e
:

131 
¥ötNumbî
(, 
uöt8_t
);

132 
¥ötFlﬂt
(, 
uöt8_t
);

135 
	gpublic
:

137 
FORCE_INLINE
 
	$wrôe
(c⁄° *
°r
)

139 *
°r
)

140 
	`wrôe
(*
°r
++);

141 
	}
}

144 
FORCE_INLINE
 
	$wrôe
(c⁄° 
uöt8_t
 *
buf„r
, 
size_t
 
size
)

146 
size
--)

147 
	`wrôe
(*
buf„r
++);

148 
	}
}

150 
FORCE_INLINE
 
	$¥öt
(c⁄° 
Såög
 &
s
)

152 
i
 = 0; i < ()
s
.
	`Àngth
(); i++) {

153 
	`wrôe
(
s
[
i
]);

155 
	}
}

157 
FORCE_INLINE
 
	$¥öt
(c⁄° *
°r
)

159 
	`wrôe
(
°r
);

160 
	}
}

161 
¥öt
(, 
BYTE
);

162 
¥öt
(, 
BYTE
);

163 
¥öt
(, 
DEC
);

164 
¥öt
(, 
DEC
);

165 
¥öt
(, 
DEC
);

166 
¥öt
(, 
DEC
);

167 
¥öt
(, = 2);

169 
¥öén
(c⁄° 
Såög
 &
s
);

170 
¥öén
(const []);

171 
¥öén
(, 
BYTE
);

172 
¥öén
(, 
BYTE
);

173 
¥öén
(, 
DEC
);

174 
¥öén
(, 
DEC
);

175 
¥öén
(, 
DEC
);

176 
¥öén
(, 
DEC
);

177 
¥öén
(, = 2);

178 
¥öén
();

181 
M¨löSîül
 
MSîül
;

185 #i‡
deföed
(
AT90USB
Ë&& deföed (
BTENABLED
)

186 
H¨dw¨eSîül
 
bt
;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/Marlin_main.cpp

30 
	~"M¨lö.h
"

32 #ifde‡
ENABLE_AUTO_BED_LEVELING


33 
	~"ve˘‹_3.h
"

34 #ifde‡
AUTO_BED_LEVELING_GRID


35 
	~"qr_sﬁve.h
"

39 
	~"u…ølcd.h
"

40 
	~"∂™√r.h
"

41 
	~"°ï≥r.h
"

42 
	~"ãm≥øtuª.h
"

43 
	~"mŸi⁄_c⁄åﬁ.h
"

44 
	~"ˇrdªadî.h
"

45 
	~"w©chdog.h
"

46 
	~"C⁄figuøti⁄St‹e.h
"

47 
	~"œnguage.h
"

48 
	~"pös_¨duöo.h
"

49 
	~"m©h.h
"

51 #ifde‡
BLINKM


52 
	~"BlökM.h
"

53 
	~"Wúe.h
"

56 #i‡
NUM_SERVOS
 > 0

57 
	~"Sîvo.h
"

60 #i‡
deföed
(
DIGIPOTSS_PIN
) && DIGIPOTSS_PIN > -1

61 
	~<SPI.h
>

64 
	#VERSION_STRING
 "1.0.0"

	)

202 #ifde‡
SDSUPPORT


203 
C¨dRódî
 
	gˇrd
;

205 
	ghomög_„edøã
[] = 
HOMING_FEEDRATE
;

206 
boﬁ
 
	gaxis_ªœtive_modes
[] = 
AXIS_RELATIVE_MODES
;

207 
	g„edmu…ùly
=100;

208 
	gßved_„edmu…ùly
;

209 
	gexåudemu…ùly
=100;

210 
	gexåudî_mu…ùly
[
EXTRUDERS
] = {100

211 #i‡
EXTRUDERS
 > 1

213 #i‡
EXTRUDERS
 > 2

218 
	gvﬁumëric_mu…ùlõr
[
EXTRUDERS
] = {1.0

219 #i‡
EXTRUDERS
 > 1

221 #i‡
EXTRUDERS
 > 2

226 
	gcuºít_posôi⁄
[
NUM_AXIS
] = { 0.0, 0.0, 0.0, 0.0 };

227 
	gadd_homög
[3]={0,0,0};

228 #ifde‡
DELTA


229 
	gíd°›_adj
[3]={0,0,0};

232 
	gmö_pos
[3] = { 
X_MIN_POS
, 
Y_MIN_POS
, 
Z_MIN_POS
 };

233 
	gmax_pos
[3] = { 
X_MAX_POS
, 
Y_MAX_POS
, 
Z_MAX_POS
 };

234 
boﬁ
 
	gaxis_known_posôi⁄
[3] = {
Ál£
, false, false};

235 
	gz¥obe_zoff£t
;

238 #i‡
EXTRUDERS
 > 1

239 #i‚de‡
DUAL_X_CARRIAGE


240 
	#NUM_EXTRUDER_OFFSETS
 2

241 #ñ£

	)

242 
	#NUM_EXTRUDER_OFFSETS
 3

244 
exåudî_off£t
[
NUM_EXTRUDER_OFFSETS
][
EXTRUDERS
] = {

	)

245 #i‡
deföed
(
EXTRUDER_OFFSET_X
Ë&& deföed(
EXTRUDER_OFFSET_Y
)

246 
	gEXTRUDER_OFFSET_X
, 
	gEXTRUDER_OFFSET_Y


250 
uöt8_t
 
	ga˘ive_exåudî
 = 0;

251 
	gÁnS≥ed
=0;

252 #ifde‡
SERVO_ENDSTOPS


253 
	g£rvo_íd°›s
[] = 
SERVO_ENDSTOPS
;

254 
	g£rvo_íd°›_™gÀs
[] = 
SERVO_ENDSTOP_ANGLES
;

256 #ifde‡
BARICUDA


257 
	gVÆvePªssuª
=0;

258 
	gEtoPPªssuª
=0;

261 #ifde‡
FWRETRACT


262 
boﬁ
 
	gaut‹ëø˘_íabÀd
=
Ál£
;

263 
boﬁ
 
	gªåa˘ed
[
EXTRUDERS
]={
Ál£


264 #i‡
EXTRUDERS
 > 1

265 , 
Ál£


266 #i‡
EXTRUDERS
 > 2

267 , 
Ál£


271 
boﬁ
 
	gªåa˘ed_sw≠
[
EXTRUDERS
]={
Ál£


272 #i‡
EXTRUDERS
 > 1

273 , 
Ál£


274 #i‡
EXTRUDERS
 > 2

275 , 
Ál£


280 
	gªåa˘_Àngth
 = 
RETRACT_LENGTH
;

281 
	gªåa˘_Àngth_sw≠
 = 
RETRACT_LENGTH_SWAP
;

282 
	gªåa˘_„edøã
 = 
RETRACT_FEEDRATE
;

283 
	gªåa˘_zli·
 = 
RETRACT_ZLIFT
;

284 
	gªåa˘_ªcovî_Àngth
 = 
RETRACT_RECOVER_LENGTH
;

285 
	gªåa˘_ªcovî_Àngth_sw≠
 = 
RETRACT_RECOVER_LENGTH_SWAP
;

286 
	gªåa˘_ªcovî_„edøã
 = 
RETRACT_RECOVER_FEEDRATE
;

289 #ifde‡
ULTIPANEL


290 #ifde‡
PS_DEFAULT_OFF


291 
boﬁ
 
	gpowîsuµly
 = 
Ál£
;

293 
boﬁ
 
	gpowîsuµly
 = 
åue
;

297 #ifde‡
DELTA


298 
	gdñè
[3] = {0.0, 0.0, 0.0};

299 
	#SIN_60
 0.8660254037844386

	)

300 
	#COS_60
 0.5

	)

302 
	gdñè_ødius

DELTA_RADIUS
;

303 
	gdñè_towî1_x
-
SIN_60
*
dñè_ødius
;

304 
	gdñè_towî1_y
-
COS_60
*
dñè_ødius
;

305 
	gdñè_towî2_x

SIN_60
*
dñè_ødius
;

306 
	gdñè_towî2_y
-
COS_60
*
dñè_ødius
;

307 
	gdñè_towî3_x
= 0.0;

308 
	gdñè_towî3_y

dñè_ødius
;

309 
	gdñè_düg⁄Æ_rod

DELTA_DIAGONAL_ROD
;

310 
	gdñè_düg⁄Æ_rod_2

sq
(
dñè_düg⁄Æ_rod
);

311 
	gdñè_£gmíts_≥r_£c⁄d

DELTA_SEGMENTS_PER_SECOND
;

314 #ifde‡
NONLINEAR_BED_LEVELING


315 
	gbed_Àvñ
[
AUTO_BED_LEVELING_GRID_POINTS
][AUTO_BED_LEVELING_GRID_POINTS];

317 #ifde‡
SCARA


318 
	gaxis_sˇlög
[3]={1,1,1};

321 
boﬁ
 
	gˇn˚l_hótup
 = 
Ál£
 ;

323 #ifde‡
FILAMENT_SENSOR


325 
	gfûamít_width_nomöÆ
=
DEFAULT_NOMINAL_FILAMENT_DIA
;

326 
boﬁ
 
	gfûamít_£ns‹
=
Ál£
;

327 
	gfûamít_width_mós
=
DEFAULT_MEASURED_FILAMENT_DIA
;

328 sig√d 
	gmósuªmít_dñay
[
MAX_MEASUREMENT_DELAY
+1];

329 
	gdñay_ödex1
=0;

330 
	gdñay_ödex2
=-1;

331 
	gdñay_di°
=0;

332 
	gmós_dñay_cm
 = 
MEASUREMENT_DELAY_CM
;

338 c⁄° 
	gaxis_codes
[
NUM_AXIS
] = {'X', 'Y', 'Z', 'E'};

339 
	gde°ö©i⁄
[
NUM_AXIS
] = { 0.0, 0.0, 0.0, 0.0};

341 #i‚de‡
DELTA


342 
	gdñè
[3] = {0.0, 0.0, 0.0};

345 
	goff£t
[3] = {0.0, 0.0, 0.0};

346 
boﬁ
 
	ghome_Æl_axis
 = 
åue
;

347 
	g„edøã
 = 1500.0, 
	g√xt_„edøã
, 
	gßved_„edøã
;

348 
	ggcode_N
, 
	ggcode_La°N
, 
	gSt›≥d_gcode_La°N
 = 0;

350 
boﬁ
 
	gªœtive_mode
 = 
Ál£
;

352 
	gcmdbuf„r
[
BUFSIZE
][
MAX_CMD_SIZE
];

353 
boﬁ
 
	g‰omsd
[
BUFSIZE
];

354 
	gbufödr
 = 0;

355 
	gbufödw
 = 0;

356 
	gbuÊí
 = 0;

358 
	g£rül_ch¨
;

359 
	g£rül_cou¡
 = 0;

360 
boﬁón
 
	gcommít_mode
 = 
Ál£
;

361 *
	g°rchr_poöãr
;

363 c⁄° 
	g£nsôive_pös
[] = 
SENSITIVE_PINS
;

369 
	g¥evious_mûlis_cmd
 = 0;

370 
	gmax_öa˘ive_time
 = 0;

371 
	g°ï≥r_öa˘ive_time
 = 
DEFAULT_STEPPER_DEACTIVE_TIME
*1000l;

373 
	g°¨âime
=0;

374 
	g°›time
=0;

376 
uöt8_t
 
	gtmp_exåudî
;

379 
boﬁ
 
	gSt›≥d
=
Ál£
;

381 #i‡
NUM_SERVOS
 > 0

382 
Sîvo
 
	g£rvos
[
NUM_SERVOS
];

385 
boﬁ
 
	gCoﬁdownNoWaô
 = 
åue
;

386 
boﬁ
 
	gèrgë_dúe˘i⁄
;

389 #ifde‡
CHDK


390 
	gchdkHigh
 = 0;

391 
boﬁón
 
	gchdkA˘ive
 = 
Ál£
;

398 
gë_¨c_co‹dö©es
();

399 
boﬁ
 
£tT¨gëedHŸíd
(
code
);

401 
	$£rül_ech›aú_P
(c⁄° *
s_P
, 
v
)

402 { 
	`£rüÕrötPGM
(
s_P
); 
	`SERIAL_ECHO
(
v
); 
	}
}

403 
	$£rül_ech›aú_P
(c⁄° *
s_P
, 
v
)

404 { 
	`£rüÕrötPGM
(
s_P
); 
	`SERIAL_ECHO
(
v
); 
	}
}

405 
	$£rül_ech›aú_P
(c⁄° *
s_P
, 
v
)

406 { 
	`£rüÕrötPGM
(
s_P
); 
	`SERIAL_ECHO
(
v
); 
	}
}

408 #ifde‡
SDSUPPORT


409 
	~"SdF©Utû.h
"

410 
	$‰ìMem‹y
(Ë{  
SdF©Utû
::
	`FªeRam
(); 
	}
}

413 
__bss_íd
;

414 
__hóp_°¨t
;

415 *
__brkvÆ
;

417 
‰ìMem‹y
() {

418 
	g‰ì_mem‹y
;

420 i‡(()
	g__brkvÆ
 == 0)

421 
‰ì_mem‹y
 = (()&‰ì_mem‹yË- (()&
__bss_íd
);

423 
	g‰ì_mem‹y
 = (()&
‰ì_mem‹y
Ë- (()
__brkvÆ
);

425  
	g‰ì_mem‹y
;

433 
	$íquecomm™d
(c⁄° *
cmd
)

435 if(
buÊí
 < 
BUFSIZE
)

438 
	`°r˝y
(&(
cmdbuf„r
[
bufödw
][0]),
cmd
);

439 
SERIAL_ECHO_START
;

440 
	`SERIAL_ECHOPGM
(
MSG_Enqueög
);

441 
	`SERIAL_ECHO
(
cmdbuf„r
[
bufödw
]);

442 
	`SERIAL_ECHOLNPGM
("\"");

443 
bufödw
(bufödw + 1)%
BUFSIZE
;

444 
buÊí
 += 1;

446 
	}
}

448 
	$íquecomm™d_P
(c⁄° *
cmd
)

450 if(
buÊí
 < 
BUFSIZE
)

453 
	`°r˝y_P
(&(
cmdbuf„r
[
bufödw
][0]),
cmd
);

454 
SERIAL_ECHO_START
;

455 
	`SERIAL_ECHOPGM
(
MSG_Enqueög
);

456 
	`SERIAL_ECHO
(
cmdbuf„r
[
bufödw
]);

457 
	`SERIAL_ECHOLNPGM
("\"");

458 
bufödw
(bufödw + 1)%
BUFSIZE
;

459 
buÊí
 += 1;

461 
	}
}

463 
	$£tup_kûÕö
()

465 #i‡
	`deföed
(
KILL_PIN
) && KILL_PIN > -1

466 
	`pöMode
(
KILL_PIN
,
INPUT
);

467 
	`WRITE
(
KILL_PIN
,
HIGH
);

469 
	}
}

471 
	$£tup_phŸpö
()

473 #i‡
	`deföed
(
PHOTOGRAPH_PIN
) && PHOTOGRAPH_PIN > -1

474 
	`SET_OUTPUT
(
PHOTOGRAPH_PIN
);

475 
	`WRITE
(
PHOTOGRAPH_PIN
, 
LOW
);

477 
	}
}

479 
	$£tup_powîhﬁd
()

481 #i‡
	`deföed
(
SUICIDE_PIN
) && SUICIDE_PIN > -1

482 
	`SET_OUTPUT
(
SUICIDE_PIN
);

483 
	`WRITE
(
SUICIDE_PIN
, 
HIGH
);

485 #i‡
	`deföed
(
PS_ON_PIN
) && PS_ON_PIN > -1

486 
	`SET_OUTPUT
(
PS_ON_PIN
);

487 #i‡
	`deföed
(
PS_DEFAULT_OFF
)

488 
	`WRITE
(
PS_ON_PIN
, 
PS_ON_ASLEEP
);

490 
	`WRITE
(
PS_ON_PIN
, 
PS_ON_AWAKE
);

493 
	}
}

495 
	$suicide
()

497 #i‡
	`deföed
(
SUICIDE_PIN
) && SUICIDE_PIN > -1

498 
	`SET_OUTPUT
(
SUICIDE_PIN
);

499 
	`WRITE
(
SUICIDE_PIN
, 
LOW
);

501 
	}
}

503 
	$£rvo_öô
()

505 #i‡(
NUM_SERVOS
 >1Ë&& 
	`deföed
(
SERVO0_PIN
) && (SERVO0_PIN > -1)

506 
£rvos
[0].
	`©èch
(
SERVO0_PIN
);

508 #i‡(
NUM_SERVOS
 >2Ë&& 
	`deföed
(
SERVO1_PIN
) && (SERVO1_PIN > -1)

509 
£rvos
[1].
	`©èch
(
SERVO1_PIN
);

511 #i‡(
NUM_SERVOS
 >3Ë&& 
	`deföed
(
SERVO2_PIN
) && (SERVO2_PIN > -1)

512 
£rvos
[2].
	`©èch
(
SERVO2_PIN
);

514 #i‡(
NUM_SERVOS
 >4Ë&& 
	`deföed
(
SERVO3_PIN
) && (SERVO3_PIN > -1)

515 
£rvos
[3].
	`©èch
(
SERVO3_PIN
);

517 #i‡(
NUM_SERVOS
 >= 5)

522 #ifde‡
SERVO_ENDSTOPS


523 
öt8_t
 
i
 = 0; i < 3; i++)

525 if(
£rvo_íd°›s
[
i
] > -1) {

526 
£rvos
[
£rvo_íd°›s
[
i
]].
	`wrôe
(
£rvo_íd°›_™gÀs
[i * 2 + 1]);

531 #i‡
	`deföed
 (
ENABLE_AUTO_BED_LEVELING
Ë&& (
PROBE_SERVO_DEACTIVATION_DELAY
 > 0)

532 
	`dñay
(
PROBE_SERVO_DEACTIVATION_DELAY
);

533 
£rvos
[
£rvo_íd°›s
[
Z_AXIS
]].
	`dëach
();

535 
	}
}

538 
	$£tup
()

540 
	`£tup_kûÕö
();

541 
	`£tup_powîhﬁd
();

542 
MYSERIAL
.
	`begö
(
BAUDRATE
);

543 
	`SERIAL_PROTOCOLLNPGM
("start");

544 
SERIAL_ECHO_START
;

547 
byã
 
mcu
 = 
MCUSR
;

548 if(
mcu
 & 1Ë
	`SERIAL_ECHOLNPGM
(
MSG_POWERUP
);

549 if(
mcu
 & 2Ë
	`SERIAL_ECHOLNPGM
(
MSG_EXTERNAL_RESET
);

550 if(
mcu
 & 4Ë
	`SERIAL_ECHOLNPGM
(
MSG_BROWNOUT_RESET
);

551 if(
mcu
 & 8Ë
	`SERIAL_ECHOLNPGM
(
MSG_WATCHDOG_RESET
);

552 if(
mcu
 & 32Ë
	`SERIAL_ECHOLNPGM
(
MSG_SOFTWARE_RESET
);

553 
MCUSR
=0;

555 
	`SERIAL_ECHOPGM
(
MSG_MARLIN
);

556 
	`SERIAL_ECHOLNPGM
(
VERSION_STRING
);

557 #ifde‡
STRING_VERSION_CONFIG_H


558 #ifde‡
STRING_CONFIG_H_AUTHOR


559 
SERIAL_ECHO_START
;

560 
	`SERIAL_ECHOPGM
(
MSG_CONFIGURATION_VER
);

561 
	`SERIAL_ECHOPGM
(
STRING_VERSION_CONFIG_H
);

562 
	`SERIAL_ECHOPGM
(
MSG_AUTHOR
);

563 
	`SERIAL_ECHOLNPGM
(
STRING_CONFIG_H_AUTHOR
);

564 
	`SERIAL_ECHOPGM
("Compiled: ");

565 
	`SERIAL_ECHOLNPGM
(
__DATE__
);

568 
SERIAL_ECHO_START
;

569 
	`SERIAL_ECHOPGM
(
MSG_FREE_MEMORY
);

570 
	`SERIAL_ECHO
(
	`‰ìMem‹y
());

571 
	`SERIAL_ECHOPGM
(
MSG_PLANNER_BUFFER_BYTES
);

572 
	`SERIAL_ECHOLN
(()(
block_t
)*
BLOCK_BUFFER_SIZE
);

573 
öt8_t
 
i
 = 0; i < 
BUFSIZE
; i++)

575 
‰omsd
[
i
] = 
Ál£
;

579 
	`C⁄fig_RërõveSëtögs
();

581 
	`ç_öô
();

582 
	`∂™_öô
();

583 
	`w©chdog_öô
();

584 
	`°_öô
();

585 
	`£tup_phŸpö
();

586 
	`£rvo_öô
();

589 
	`lcd_öô
();

590 
	`_dñay_ms
(1000);

592 #i‡
	`deföed
(
CONTROLLERFAN_PIN
) && CONTROLLERFAN_PIN > -1

593 
	`SET_OUTPUT
(
CONTROLLERFAN_PIN
);

596 #ifde‡
DIGIPOT_I2C


597 
	`digùŸ_i2c_öô
();

599 #ifde‡
Z_PROBE_SLED


600 
	`pöMode
(
SERVO0_PIN
, 
OUTPUT
);

601 
	`digôÆWrôe
(
SERVO0_PIN
, 
LOW
);

603 
	}
}

606 
	$lo›
()

608 if(
buÊí
 < (
BUFSIZE
-1))

609 
	`gë_comm™d
();

610 #ifde‡
SDSUPPORT


611 
ˇrd
.
	`checkauto°¨t
(
Ál£
);

613 if(
buÊí
)

615 #ifde‡
SDSUPPORT


616 if(
ˇrd
.
ßvög
)

618 if(
	`°r°r_P
(
cmdbuf„r
[
bufödr
], 
	`PSTR
("M29")Ë=
NULL
)

620 
ˇrd
.
	`wrôe_comm™d
(
cmdbuf„r
[
bufödr
]);

621 if(
ˇrd
.
loggög
)

623 
	`¥o˚ss_comm™ds
();

627 
	`SERIAL_PROTOCOLLNPGM
(
MSG_OK
);

632 
ˇrd
.
	`˛o£fûe
();

633 
	`SERIAL_PROTOCOLLNPGM
(
MSG_FILE_SAVED
);

638 
	`¥o˚ss_comm™ds
();

641 
	`¥o˚ss_comm™ds
();

643 
buÊí
 = (buflen-1);

644 
bufödr
 = (buföd∏+ 1)%
BUFSIZE
;

647 
	`m™age_hóãr
();

648 
	`m™age_öa˘ivôy
();

649 
	`checkHôEnd°›s
();

650 
	`lcd_upd©e
();

651 
	}
}

653 
	$gë_comm™d
()

655  
MYSERIAL
.
	`avaûabÀ
(Ë> 0 && 
buÊí
 < 
BUFSIZE
) {

656 
£rül_ch¨
 = 
MYSERIAL
.
	`ªad
();

657 if(
£rül_ch¨
 == '\n' ||

658 
£rül_ch¨
 == '\r' ||

659 (
£rül_ch¨
 =':' && 
commít_mode
 =
Ál£
) ||

660 
£rül_cou¡
 >(
MAX_CMD_SIZE
 - 1) )

662 if(!
£rül_cou¡
) {

663 
commít_mode
 = 
Ál£
;

666 
cmdbuf„r
[
bufödw
][
£rül_cou¡
] = 0;

667 if(!
commít_mode
){

668 
commít_mode
 = 
Ál£
;

669 
‰omsd
[
bufödw
] = 
Ál£
;

670 if(
	`°rchr
(
cmdbuf„r
[
bufödw
], 'N'Ë!
NULL
)

672 
°rchr_poöãr
 = 
	`°rchr
(
cmdbuf„r
[
bufödw
], 'N');

673 
gcode_N
 = (
	`°πﬁ
(&
cmdbuf„r
[
bufödw
][
°rchr_poöãr
 - cmdbuf„r[bufödw] + 1], 
NULL
, 10));

674 if(
gcode_N
 !
gcode_La°N
+1 && (
	`°r°r_P
(
cmdbuf„r
[
bufödw
], 
	`PSTR
("M110")Ë=
NULL
) ) {

675 
SERIAL_ERROR_START
;

676 
	`SERIAL_ERRORPGM
(
MSG_ERR_LINE_NO
);

677 
	`SERIAL_ERRORLN
(
gcode_La°N
);

679 
	`FlushSîülReque°Re£nd
();

680 
£rül_cou¡
 = 0;

684 if(
	`°rchr
(
cmdbuf„r
[
bufödw
], '*'Ë!
NULL
)

686 
byã
 
checksum
 = 0;

687 
byã
 
cou¡
 = 0;

688 
cmdbuf„r
[
bufödw
][
cou¡
] !'*'Ë
checksum
 = checksum^cmdbuffer[bufindw][count++];

689 
°rchr_poöãr
 = 
	`°rchr
(
cmdbuf„r
[
bufödw
], '*');

691 if–()(
	`°πod
(&
cmdbuf„r
[
bufödw
][
°rchr_poöãr
 - cmdbuf„r[bufödw] + 1], 
NULL
)Ë!
checksum
) {

692 
SERIAL_ERROR_START
;

693 
	`SERIAL_ERRORPGM
(
MSG_ERR_CHECKSUM_MISMATCH
);

694 
	`SERIAL_ERRORLN
(
gcode_La°N
);

695 
	`FlushSîülReque°Re£nd
();

696 
£rül_cou¡
 = 0;

703 
SERIAL_ERROR_START
;

704 
	`SERIAL_ERRORPGM
(
MSG_ERR_NO_CHECKSUM
);

705 
	`SERIAL_ERRORLN
(
gcode_La°N
);

706 
	`FlushSîülReque°Re£nd
();

707 
£rül_cou¡
 = 0;

711 
gcode_La°N
 = 
gcode_N
;

716 if((
	`°rchr
(
cmdbuf„r
[
bufödw
], '*'Ë!
NULL
))

718 
SERIAL_ERROR_START
;

719 
	`SERIAL_ERRORPGM
(
MSG_ERR_NO_LINENUMBER_WITH_CHECKSUM
);

720 
	`SERIAL_ERRORLN
(
gcode_La°N
);

721 
£rül_cou¡
 = 0;

725 if((
	`°rchr
(
cmdbuf„r
[
bufödw
], 'G'Ë!
NULL
)){

726 
°rchr_poöãr
 = 
	`°rchr
(
cmdbuf„r
[
bufödw
], 'G');

727 ()((
	`°πod
(&
cmdbuf„r
[
bufödw
][
°rchr_poöãr
 - cmdbuf„r[bufödw] + 1], 
NULL
)))){

732 i‡(
St›≥d
 =
åue
) {

733 
	`SERIAL_ERRORLNPGM
(
MSG_ERR_STOPPED
);

734 
	`LCD_MESSAGEPGM
(
MSG_STOPPED
);

744 if(
	`°rcmp
(
cmdbuf„r
[
bufödw
], "M112") == 0)

745 
	`kûl
();

747 
bufödw
 = (bufödw + 1)%
BUFSIZE
;

748 
buÊí
 += 1;

750 
£rül_cou¡
 = 0;

754 if(
£rül_ch¨
 =';'Ë
commít_mode
 = 
åue
;

755 if(!
commít_mode
Ë
cmdbuf„r
[
bufödw
][
£rül_cou¡
++] = 
£rül_ch¨
;

758 #ifde‡
SDSUPPORT


759 if(!
ˇrd
.
sd¥ötög
 || 
£rül_cou¡
!=0){

767 
boﬁ
 
°›_buf„rög
=
Ál£
;

768 if(
buÊí
==0Ë
°›_buf„rög
=
Ál£
;

770  !
ˇrd
.
	`eof
(Ë&& 
buÊí
 < 
BUFSIZE
 && !
°›_buf„rög
) {

771 
öt16_t
 
n
=
ˇrd
.
	`gë
();

772 
£rül_ch¨
 = ()
n
;

773 if(
£rül_ch¨
 == '\n' ||

774 
£rül_ch¨
 == '\r' ||

775 (
£rül_ch¨
 ='#' && 
commít_mode
 =
Ál£
) ||

776 (
£rül_ch¨
 =':' && 
commít_mode
 =
Ál£
) ||

777 
£rül_cou¡
 >(
MAX_CMD_SIZE
 - 1)||
n
==-1)

779 if(
ˇrd
.
	`eof
()){

780 
	`SERIAL_PROTOCOLLNPGM
(
MSG_FILE_PRINTED
);

781 
°›time
=
	`mûlis
();

782 
time
[30];

783 
t
=(
°›time
-
°¨âime
)/1000;

784 
hours
, 
möuãs
;

785 
möuãs
=(
t
/60)%60;

786 
hours
=
t
/60/60;

787 
	`•rötf_P
(
time
, 
	`PSTR
("%òhour†%òmöuãs"),
hours
, 
möuãs
);

788 
SERIAL_ECHO_START
;

789 
	`SERIAL_ECHOLN
(
time
);

790 
	`lcd_£t°©us
(
time
);

791 
ˇrd
.
	`¥ötögHasFöished
();

792 
ˇrd
.
	`checkauto°¨t
(
åue
);

795 if(
£rül_ch¨
=='#')

796 
°›_buf„rög
=
åue
;

798 if(!
£rül_cou¡
)

800 
commít_mode
 = 
Ál£
;

803 
cmdbuf„r
[
bufödw
][
£rül_cou¡
] = 0;

805 
‰omsd
[
bufödw
] = 
åue
;

806 
buÊí
 += 1;

807 
bufödw
 = (bufödw + 1)%
BUFSIZE
;

809 
commít_mode
 = 
Ál£
;

810 
£rül_cou¡
 = 0;

814 if(
£rül_ch¨
 =';'Ë
commít_mode
 = 
åue
;

815 if(!
commít_mode
Ë
cmdbuf„r
[
bufödw
][
£rül_cou¡
++] = 
£rül_ch¨
;

821 
	}
}

824 
	$code_vÆue
()

826  (
	`°πod
(&
cmdbuf„r
[
bufödr
][
°rchr_poöãr
 - cmdbuf„r[bufödr] + 1], 
NULL
));

827 
	}
}

829 
	$code_vÆue_l⁄g
()

831  (
	`°πﬁ
(&
cmdbuf„r
[
bufödr
][
°rchr_poöãr
 - cmdbuf„r[bufödr] + 1], 
NULL
, 10));

832 
	}
}

834 
boﬁ
 
	$code_£í
(
code
)

836 
°rchr_poöãr
 = 
	`°rchr
(
cmdbuf„r
[
bufödr
], 
code
);

837  (
°rchr_poöãr
 !
NULL
);

838 
	}
}

840 
	#DEFINE_PGM_READ_ANY
(
ty≥
, 
ªadî
) \

841 
ölöe
 
ty≥
 
	`pgm_ªad_™y
(c⁄°Åy≥ *
p
) \

842 {  
pgm_ªad_
##
ªadî
##
	`_√¨
(
p
); }

	)

844 
DEFINE_PGM_READ_ANY
(, );

845 
DEFINE_PGM_READ_ANY
(sig√d , 
byã
);

847 
	#XYZ_CONSTS_FROM_CONFIG
(
ty≥
, 
¨øy
, 
CONFIG
) \

848 c⁄° 
PROGMEM
 
ty≥
 
¨øy
##
_P
[3] = \

849 { 
X_
##
CONFIG
, 
Y_
##CONFIG, 
Z_
##CONFIG }; \

850 
ölöe
 
ty≥
 
	`¨øy
(
axis
) \

851 {  
	`pgm_ªad_™y
(&
¨øy
##
_P
[
axis
]); }

	)

853 
XYZ_CONSTS_FROM_CONFIG
(, 
ba£_mö_pos
, 
MIN_POS
);

854 
XYZ_CONSTS_FROM_CONFIG
(, 
ba£_max_pos
, 
MAX_POS
);

855 
XYZ_CONSTS_FROM_CONFIG
(, 
ba£_home_pos
, 
HOME_POS
);

856 
XYZ_CONSTS_FROM_CONFIG
(, 
max_Àngth
, 
MAX_LENGTH
);

857 
XYZ_CONSTS_FROM_CONFIG
(, 
home_ªåa˘_mm
, 
HOME_RETRACT_MM
);

858 
XYZ_CONSTS_FROM_CONFIG
(sig√d , 
home_dú
, 
HOME_DIR
);

860 #ifde‡
DUAL_X_CARRIAGE


861 #i‡
EXTRUDERS
 =1 || 
deföed
(
COREXY
) \

862 || !
deföed
(
X2_ENABLE_PIN
Ë|| !deföed(
X2_STEP_PIN
Ë|| !deföed(
X2_DIR_PIN
) \

863 || !
deföed
(
X2_HOME_POS
Ë|| !deföed(
X2_MIN_POS
Ë|| !deföed(
X2_MAX_POS
) \

864 || !
deföed
(
X_MAX_PIN
Ë|| 
	gX_MAX_PIN
 < 0

867 #i‡
X_HOME_DIR
 !-1 || 
X2_HOME_DIR
 != 1

871 
	#DXC_FULL_CONTROL_MODE
 0

	)

872 
	#DXC_AUTO_PARK_MODE
 1

	)

873 
	#DXC_DUPLICATION_MODE
 2

	)

874 
	gduÆ_x_ˇºüge_mode
 = 
DEFAULT_DUAL_X_CARRIAGE_MODE
;

876 
	$x_home_pos
(
exåudî
) {

877 i‡(
exåudî
 == 0)

878  
	`ba£_home_pos
(
X_AXIS
Ë+ 
add_homög
[X_AXIS];

884  (
exåudî_off£t
[
X_AXIS
][1] > 0Ë?Éxåudî_off£t[X_AXIS][1] : 
X2_HOME_POS
;

885 
	}
}

887 
	$x_home_dú
(
exåudî
) {

888  (
exåudî
 =0Ë? 
X_HOME_DIR
 : 
X2_HOME_DIR
;

889 
	}
}

891 
	göa˘ive_exåudî_x_pos
 = 
X2_MAX_POS
;

892 
boﬁ
 
	ga˘ive_exåudî_∑rked
 = 
Ál£
;

893 
	gøi£d_∑rked_posôi⁄
[
NUM_AXIS
];

894 
	gdñayed_move_time
 = 0;

895 
	gdu∂iˇã_exåudî_x_off£t
 = 
DEFAULT_DUPLICATION_X_OFFSET
;

896 
	gdu∂iˇã_exåudî_ãmp_off£t
 = 0;

897 
boﬁ
 
	gexåudî_du∂iˇti⁄_íabÀd
 = 
Ál£
;

900 
	$axis_is_©_home
(
axis
) {

901 #ifde‡
DUAL_X_CARRIAGE


902 i‡(
axis
 =
X_AXIS
) {

903 i‡(
a˘ive_exåudî
 != 0) {

904 
cuºít_posôi⁄
[
X_AXIS
] = 
	`x_home_pos
(
a˘ive_exåudî
);

905 
mö_pos
[
X_AXIS
] = 
X2_MIN_POS
;

906 
max_pos
[
X_AXIS
] = 
	`max
(
exåudî_off£t
[X_AXIS][1], 
X2_MAX_POS
);

909 i‡(
duÆ_x_ˇºüge_mode
 =
DXC_DUPLICATION_MODE
 && 
a˘ive_exåudî
 == 0) {

910 
cuºít_posôi⁄
[
X_AXIS
] = 
	`ba£_home_pos
(X_AXISË+ 
add_homög
[X_AXIS];

911 
mö_pos
[
X_AXIS
] = 
	`ba£_mö_pos
(X_AXISË+ 
add_homög
[X_AXIS];

912 
max_pos
[
X_AXIS
] = 
	`mö
(
	`ba£_max_pos
(X_AXISË+ 
add_homög
[X_AXIS],

913 
	`max
(
exåudî_off£t
[
X_AXIS
][1], 
X2_MAX_POS
Ë- 
du∂iˇã_exåudî_x_off£t
);

918 #ifde‡
SCARA


919 
homïosôi⁄
[3];

920 
i
;

922 i‡(
axis
 < 2)

925 
i
=0; i<3; i++)

927 
homïosôi⁄
[
i
] = 
	`ba£_home_pos
(i);

933 
	`ˇlcuœã_dñè
(
homïosôi⁄
);

938 
i
=0; i<2; i++)

940 
dñè
[
i
] -
add_homög
[i];

948 
	`ˇlcuœã_SCARA_f‹w¨d_Tønsf‹m
(
dñè
);

953 
cuºít_posôi⁄
[
axis
] = 
dñè
[axis];

957 
mö_pos
[
axis
] = 
	`ba£_mö_pos
(axis);

958 
max_pos
[
axis
] = 
	`ba£_max_pos
(axis);

962 
cuºít_posôi⁄
[
axis
] = 
	`ba£_home_pos
◊xisË+ 
add_homög
[axis];

963 
mö_pos
[
axis
] = 
	`ba£_mö_pos
◊xisË+ 
add_homög
[axis];

964 
max_pos
[
axis
] = 
	`ba£_max_pos
◊xisË+ 
add_homög
[axis];

967 
cuºít_posôi⁄
[
axis
] = 
	`ba£_home_pos
◊xisË+ 
add_homög
[axis];

968 
mö_pos
[
axis
] = 
	`ba£_mö_pos
◊xisË+ 
add_homög
[axis];

969 
max_pos
[
axis
] = 
	`ba£_max_pos
◊xisË+ 
add_homög
[axis];

971 
	}
}

973 #ifde‡
ENABLE_AUTO_BED_LEVELING


974 #ifde‡
AUTO_BED_LEVELING_GRID


975 
	$£t_bed_Àvñ_equ©i⁄_lsq
(*
∂™e_equ©i⁄_c€fficõ¡s
)

977 
ve˘‹_3
 
∂™eN‹mÆ
 = 
	`ve˘‹_3
(-
∂™e_equ©i⁄_c€fficõ¡s
[0], -plane_equation_coefficients[1], 1);

978 
∂™eN‹mÆ
.
	`debug
("planeNormal");

979 
∂™_bed_Àvñ_m©rix
 = 
m©rix_3x3
::
	`¸óã_look_©
(
∂™eN‹mÆ
);

986 
ve˘‹_3
 
c‹ª˘ed_posôi⁄
 = 
	`∂™_gë_posôi⁄
();

988 
cuºít_posôi⁄
[
X_AXIS
] = 
c‹ª˘ed_posôi⁄
.
x
;

989 
cuºít_posôi⁄
[
Y_AXIS
] = 
c‹ª˘ed_posôi⁄
.
y
;

990 
cuºít_posôi⁄
[
Z_AXIS
] = 
c‹ª˘ed_posôi⁄
.
z
;

993 
cuºít_posôi⁄
[
Z_AXIS
] = 
z¥obe_zoff£t
;

995 
	`∂™_£t_posôi⁄
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
], cuºít_posôi⁄[
E_AXIS
]);

996 
	}
}

1000 
	$£t_bed_Àvñ_equ©i⁄_3±s
(
z_©_±_1
, 
z_©_±_2
, 
z_©_±_3
) {

1002 
∂™_bed_Àvñ_m©rix
.
	`£t_to_idítôy
();

1004 
ve˘‹_3
 
±1
 = 
	`ve˘‹_3
(
ABL_PROBE_PT_1_X
, 
ABL_PROBE_PT_1_Y
, 
z_©_±_1
);

1005 
ve˘‹_3
 
±2
 = 
	`ve˘‹_3
(
ABL_PROBE_PT_2_X
, 
ABL_PROBE_PT_2_Y
, 
z_©_±_2
);

1006 
ve˘‹_3
 
±3
 = 
	`ve˘‹_3
(
ABL_PROBE_PT_3_X
, 
ABL_PROBE_PT_3_Y
, 
z_©_±_3
);

1008 
ve˘‹_3
 
‰om_2_to_1
 = (
±1
 - 
±2
).
	`gë_n‹mÆ
();

1009 
ve˘‹_3
 
‰om_2_to_3
 = (
±3
 - 
±2
).
	`gë_n‹mÆ
();

1010 
ve˘‹_3
 
∂™eN‹mÆ
 = ve˘‹_3::
	`¸oss
(
‰om_2_to_1
, 
‰om_2_to_3
).
	`gë_n‹mÆ
();

1011 
∂™eN‹mÆ
 = 
	`ve˘‹_3
’œ√N‹mÆ.
x
,Öœ√N‹mÆ.
y
, 
	`abs
’œ√N‹mÆ.
z
));

1013 
∂™_bed_Àvñ_m©rix
 = 
m©rix_3x3
::
	`¸óã_look_©
(
∂™eN‹mÆ
);

1015 
ve˘‹_3
 
c‹ª˘ed_posôi⁄
 = 
	`∂™_gë_posôi⁄
();

1016 
cuºít_posôi⁄
[
X_AXIS
] = 
c‹ª˘ed_posôi⁄
.
x
;

1017 
cuºít_posôi⁄
[
Y_AXIS
] = 
c‹ª˘ed_posôi⁄
.
y
;

1018 
cuºít_posôi⁄
[
Z_AXIS
] = 
c‹ª˘ed_posôi⁄
.
z
;

1021 
cuºít_posôi⁄
[
Z_AXIS
] = 
z¥obe_zoff£t
;

1023 
	`∂™_£t_posôi⁄
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
], cuºít_posôi⁄[
E_AXIS
]);

1025 
	}
}

1029 
	$run_z_¥obe
() {

1030 
∂™_bed_Àvñ_m©rix
.
	`£t_to_idítôy
();

1032 #ifde‡
DELTA


1033 
	`íabÀ_íd°›s
(
åue
);

1034 
°¨t_z
 = 
cuºít_posôi⁄
[
Z_AXIS
];

1035 
°¨t_°ïs
 = 
	`°_gë_posôi⁄
(
Z_AXIS
);

1037 
„edøã
 = 
homög_„edøã
[
Z_AXIS
]/10;

1038 
de°ö©i⁄
[
Z_AXIS
] = -10;

1039 
	`¥ï¨e_move_øw
();

1040 
	`°_synchr⁄ize
();

1041 
	`íd°›s_hô_⁄_puΩo£
();

1043 
	`íabÀ_íd°›s
(
Ál£
);

1044 
°›_°ïs
 = 
	`°_gë_posôi⁄
(
Z_AXIS
);

1046 
mm
 = 
°¨t_z
 - (
°¨t_°ïs
 - 
°›_°ïs
Ë/ 
axis_°ïs_≥r_unô
[
Z_AXIS
];

1047 
cuºít_posôi⁄
[
Z_AXIS
] = 
mm
;

1048 
	`ˇlcuœã_dñè
(
cuºít_posôi⁄
);

1049 
	`∂™_£t_posôi⁄
(
dñè
[
X_AXIS
], dñè[
Y_AXIS
], dñè[
Z_AXIS
], 
cuºít_posôi⁄
[
E_AXIS
]);

1051 
„edøã
 = 
homög_„edøã
[
Z_AXIS
];

1054 
zPosôi⁄
 = -10;

1055 
	`∂™_buf„r_löe
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], 
zPosôi⁄
, cuºít_posôi⁄[
E_AXIS
], 
„edøã
/60, 
a˘ive_exåudî
);

1056 
	`°_synchr⁄ize
();

1059 
zPosôi⁄
 = 
	`°_gë_posôi⁄_mm
(
Z_AXIS
);

1060 
	`∂™_£t_posôi⁄
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], 
zPosôi⁄
, cuºít_posôi⁄[
E_AXIS
]);

1063 
zPosôi⁄
 +
	`home_ªåa˘_mm
(
Z_AXIS
);

1064 
	`∂™_buf„r_löe
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], 
zPosôi⁄
, cuºít_posôi⁄[
E_AXIS
], 
„edøã
/60, 
a˘ive_exåudî
);

1065 
	`°_synchr⁄ize
();

1068 
„edøã
 = 
homög_„edøã
[
Z_AXIS
]/4;

1069 
zPosôi⁄
 -
	`home_ªåa˘_mm
(
Z_AXIS
) * 2;

1070 
	`∂™_buf„r_löe
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], 
zPosôi⁄
, cuºít_posôi⁄[
E_AXIS
], 
„edøã
/60, 
a˘ive_exåudî
);

1071 
	`°_synchr⁄ize
();

1073 
cuºít_posôi⁄
[
Z_AXIS
] = 
	`°_gë_posôi⁄_mm
(Z_AXIS);

1075 
	`∂™_£t_posôi⁄
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
], cuºít_posôi⁄[
E_AXIS
]);

1077 
	}
}

1079 
	$do_blockög_move_to
(
x
, 
y
, 
z
) {

1080 
ﬁdFìdR©e
 = 
„edøã
;

1082 
„edøã
 = 
XY_TRAVEL_SPEED
;

1084 #ifde‡
DELTA


1085 
de°ö©i⁄
[
X_AXIS
] = 
x
;

1086 
de°ö©i⁄
[
Y_AXIS
] = 
y
;

1087 
de°ö©i⁄
[
Z_AXIS
] = 
z
;

1088 
	`¥ï¨e_move_øw
();

1090 
cuºít_posôi⁄
[
X_AXIS
] = 
x
;

1091 
cuºít_posôi⁄
[
Y_AXIS
] = 
y
;

1092 
cuºít_posôi⁄
[
Z_AXIS
] = 
z
;

1093 
	`∂™_buf„r_löe
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
], cuºít_posôi⁄[
E_AXIS
], 
„edøã
/60, 
a˘ive_exåudî
);

1095 
	`°_synchr⁄ize
();

1097 
„edøã
 = 
ﬁdFìdR©e
;

1098 
	}
}

1100 
	$do_blockög_move_ªœtive
(
off£t_x
, 
off£t_y
, 
off£t_z
) {

1101 
	`do_blockög_move_to
(
cuºít_posôi⁄
[
X_AXIS
] + 
off£t_x
, cuºít_posôi⁄[
Y_AXIS
] + 
off£t_y
, cuºít_posôi⁄[
Z_AXIS
] + 
off£t_z
);

1102 
	}
}

1104 
	$£tup_f‹_íd°›_move
() {

1105 
ßved_„edøã
 = 
„edøã
;

1106 
ßved_„edmu…ùly
 = 
„edmu…ùly
;

1107 
„edmu…ùly
 = 100;

1108 
¥evious_mûlis_cmd
 = 
	`mûlis
();

1110 #i‚de‡
DELTA


1111 
	`íabÀ_íd°›s
(
åue
);

1113 
	}
}

1115 
	$˛ón_up_a·î_íd°›_move
() {

1116 #ifde‡
ENDSTOPS_ONLY_FOR_HOMING


1117 
	`íabÀ_íd°›s
(
Ál£
);

1120 
„edøã
 = 
ßved_„edøã
;

1121 
„edmu…ùly
 = 
ßved_„edmu…ùly
;

1122 
¥evious_mûlis_cmd
 = 
	`mûlis
();

1123 
	}
}

1125 
	$ígage_z_¥obe
() {

1127 #ifde‡
SERVO_ENDSTOPS


1128 i‡(
£rvo_íd°›s
[
Z_AXIS
] > -1) {

1129 #i‡
	`deföed
 (
ENABLE_AUTO_BED_LEVELING
Ë&& (
PROBE_SERVO_DEACTIVATION_DELAY
 > 0)

1130 
£rvos
[
£rvo_íd°›s
[
Z_AXIS
]].
	`©èch
(0);

1132 
£rvos
[
£rvo_íd°›s
[
Z_AXIS
]].
	`wrôe
(
£rvo_íd°›_™gÀs
[Z_AXIS * 2]);

1133 #i‡
	`deföed
 (
ENABLE_AUTO_BED_LEVELING
Ë&& (
PROBE_SERVO_DEACTIVATION_DELAY
 > 0)

1134 
	`dñay
(
PROBE_SERVO_DEACTIVATION_DELAY
);

1135 
£rvos
[
£rvo_íd°›s
[
Z_AXIS
]].
	`dëach
();

1139 
„edøã
 = 
homög_„edøã
[
X_AXIS
];

1140 
de°ö©i⁄
[
X_AXIS
] = 35;

1141 
de°ö©i⁄
[
Y_AXIS
] = 72;

1142 
de°ö©i⁄
[
Z_AXIS
] = 100;

1143 
	`¥ï¨e_move_øw
();

1145 
„edøã
 = 
homög_„edøã
[
X_AXIS
]/10;

1146 
de°ö©i⁄
[
X_AXIS
] = 0;

1147 
	`¥ï¨e_move_øw
();

1148 
	`°_synchr⁄ize
();

1150 
	}
}

1152 
	$ªåa˘_z_¥obe
() {

1154 #ifde‡
SERVO_ENDSTOPS


1155 i‡(
£rvo_íd°›s
[
Z_AXIS
] > -1) {

1156 #i‡
	`deföed
 (
ENABLE_AUTO_BED_LEVELING
Ë&& (
PROBE_SERVO_DEACTIVATION_DELAY
 > 0)

1157 
£rvos
[
£rvo_íd°›s
[
Z_AXIS
]].
	`©èch
(0);

1159 
£rvos
[
£rvo_íd°›s
[
Z_AXIS
]].
	`wrôe
(
£rvo_íd°›_™gÀs
[Z_AXIS * 2 + 1]);

1160 #i‡
	`deföed
 (
ENABLE_AUTO_BED_LEVELING
Ë&& (
PROBE_SERVO_DEACTIVATION_DELAY
 > 0)

1161 
	`dñay
(
PROBE_SERVO_DEACTIVATION_DELAY
);

1162 
£rvos
[
£rvo_íd°›s
[
Z_AXIS
]].
	`dëach
();

1166 
„edøã
 = 
homög_„edøã
[
X_AXIS
];

1167 
de°ö©i⁄
[
Z_AXIS
] = 
cuºít_posôi⁄
[Z_AXIS] + 20;

1168 
	`¥ï¨e_move_øw
();

1170 
de°ö©i⁄
[
X_AXIS
] = -32.5;

1171 
de°ö©i⁄
[
Y_AXIS
] = -78;

1172 
de°ö©i⁄
[
Z_AXIS
] = 33;

1173 
	`¥ï¨e_move_øw
();

1181 
„edøã
 = 
homög_„edøã
[
Z_AXIS
]/10;

1182 
de°ö©i⁄
[
Z_AXIS
] = 
cuºít_posôi⁄
[Z_AXIS] - 22;

1183 
	`¥ï¨e_move_øw
();

1185 
„edøã
 = 
homög_„edøã
[
Z_AXIS
];

1186 
de°ö©i⁄
[
Z_AXIS
] = 
cuºít_posôi⁄
[Z_AXIS] + 32;

1187 
	`¥ï¨e_move_øw
();

1188 
	`°_synchr⁄ize
();

1190 
	}
}

1193 
	$¥obe_±
(
x
, 
y
, 
z_bef‹e
) {

1195 
	`do_blockög_move_to
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], 
z_bef‹e
);

1196 
	`do_blockög_move_to
(
x
 - 
X_PROBE_OFFSET_FROM_EXTRUDER
, 
y
 - 
Y_PROBE_OFFSET_FROM_EXTRUDER
, 
cuºít_posôi⁄
[
Z_AXIS
]);

1198 #i‡
	`deföed
(
SERVO_ENDSTOPS
Ë&& !deföed(
Z_PROBE_SLED
)

1199 
	`ígage_z_¥obe
();

1201 
	`run_z_¥obe
();

1202 
mósuªd_z
 = 
cuºít_posôi⁄
[
Z_AXIS
];

1203 #i‡
	`deföed
(
SERVO_ENDSTOPS
Ë&& !deföed(
Z_PROBE_SLED
)

1204 
	`ªåa˘_z_¥obe
();

1207 
	`SERIAL_PROTOCOLPGM
(
MSG_BED
);

1208 
	`SERIAL_PROTOCOLPGM
(" x: ");

1209 
	`SERIAL_PROTOCOL
(
x
);

1210 
	`SERIAL_PROTOCOLPGM
(" y: ");

1211 
	`SERIAL_PROTOCOL
(
y
);

1212 
	`SERIAL_PROTOCOLPGM
(" z: ");

1213 
	`SERIAL_PROTOCOL
(
mósuªd_z
);

1214 
	`SERIAL_PROTOCOLPGM
("\n");

1215  
mósuªd_z
;

1216 
	}
}

1220 #ifde‡
NONLINEAR_BED_LEVELING


1221 
	$exå≠ﬁ©e_⁄e_poöt
(
x
, 
y
, 
xdú
, 
ydú
) {

1222 i‡(
bed_Àvñ
[
x
][
y
] != 0.0) {

1225 
a
 = 2*
bed_Àvñ
[
x
+
xdú
][
y
] - bed_level[x+xdir*2][y];

1226 
b
 = 2*
bed_Àvñ
[
x
][
y
+
ydú
] - bed_level[x][y+ydir*2];

1227 
c
 = 2*
bed_Àvñ
[
x
+
xdú
][
y
+
ydú
] - bed_level[x+xdir*2][y+ydir*2];

1228 
medün
 = 
c
;

1229 i‡(
a
 < 
b
) {

1230 i‡(
b
 < 
c
Ë
medün
 = b;

1231 i‡(
c
 < 
a
Ë
medün
 =á;

1233 i‡(
c
 < 
b
Ë
medün
 = b;

1234 i‡(
a
 < 
c
Ë
medün
 =á;

1236 
bed_Àvñ
[
x
][
y
] = 
medün
;

1237 
	}
}

1241 
	$exå≠ﬁ©e_u≈robed_bed_Àvñ
() {

1242 
hÆf
 = (
AUTO_BED_LEVELING_GRID_POINTS
-1)/2;

1243 
y
 = 0; y <
hÆf
; y++) {

1244 
x
 = 0; x <
hÆf
; x++) {

1245 i‡(
x
 + 
y
 < 3) ;

1246 
	`exå≠ﬁ©e_⁄e_poöt
(
hÆf
-
x
, hÆf-
y
, x>1?+1:0, y>1?+1:0);

1247 
	`exå≠ﬁ©e_⁄e_poöt
(
hÆf
+
x
, hÆf-
y
, x>1?-1:0, y>1?+1:0);

1248 
	`exå≠ﬁ©e_⁄e_poöt
(
hÆf
-
x
, hÆf+
y
, x>1?+1:0, y>1?-1:0);

1249 
	`exå≠ﬁ©e_⁄e_poöt
(
hÆf
+
x
, hÆf+
y
, x>1?-1:0, y>1?-1:0);

1252 
	}
}

1255 
	$¥öt_bed_Àvñ
() {

1256 
y
 = 0; y < 
AUTO_BED_LEVELING_GRID_POINTS
; y++) {

1257 
x
 = 0; x < 
AUTO_BED_LEVELING_GRID_POINTS
; x++) {

1258 
	`SERIAL_PROTOCOL_F
(
bed_Àvñ
[
x
][
y
], 2);

1259 
	`SERIAL_PROTOCOLPGM
(" ");

1261 
	`SERIAL_ECHOLN
("");

1263 
	}
}

1266 
	$ª£t_bed_Àvñ
() {

1267 
y
 = 0; y < 
AUTO_BED_LEVELING_GRID_POINTS
; y++) {

1268 
x
 = 0; x < 
AUTO_BED_LEVELING_GRID_POINTS
; x++) {

1269 
bed_Àvñ
[
x
][
y
] = 0.0;

1272 
	}
}

1275 
	$homóxis
(
axis
) {

1276 
	#HOMEAXIS_DO
(
LETTER
) \

1277 ((
LETTER
##
_MIN_PIN
 > -1 && LETTER##
_HOME_DIR
==-1Ë|| (LETTER##
_MAX_PIN
 > -1 && LETTER##_HOME_DIR==1))

	)

1279 i‡(
axis
==
X_AXIS
 ? 
	`HOMEAXIS_DO
(
X
) :

1280 
axis
==
Y_AXIS
 ? 
	`HOMEAXIS_DO
(
Y
) :

1281 
axis
==
Z_AXIS
 ? 
	`HOMEAXIS_DO
(
Z
) :

1283 
axis_home_dú
 = 
	`home_dú
(
axis
);

1284 #ifde‡
DUAL_X_CARRIAGE


1285 i‡(
axis
 =
X_AXIS
)

1286 
axis_home_dú
 = 
	`x_home_dú
(
a˘ive_exåudî
);

1289 
cuºít_posôi⁄
[
axis
] = 0;

1290 
	`∂™_£t_posôi⁄
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
], cuºít_posôi⁄[
E_AXIS
]);

1293 #i‚de‡
Z_PROBE_SLED


1295 #ifde‡
SERVO_ENDSTOPS


1296 #i‡
	`deföed
 (
ENABLE_AUTO_BED_LEVELING
Ë&& (
PROBE_SERVO_DEACTIVATION_DELAY
 > 0)

1297 i‡(
axis
==
Z_AXIS
) {

1298 
	`ígage_z_¥obe
();

1302 i‡(
£rvo_íd°›s
[
axis
] > -1) {

1303 
£rvos
[
£rvo_íd°›s
[
axis
]].
	`wrôe
(
£rvo_íd°›_™gÀs
[axis * 2]);

1308 
cuºít_posôi⁄
[
axis
] = 0;

1309 
	`∂™_£t_posôi⁄
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
], cuºít_posôi⁄[
E_AXIS
]);

1310 
de°ö©i⁄
[
axis
] = 1.5 * 
	`max_Àngth
◊xisË* 
axis_home_dú
;

1311 
„edøã
 = 
homög_„edøã
[
axis
];

1312 
	`∂™_buf„r_löe
(
de°ö©i⁄
[
X_AXIS
], de°ö©i⁄[
Y_AXIS
], de°ö©i⁄[
Z_AXIS
], de°ö©i⁄[
E_AXIS
], 
„edøã
/60, 
a˘ive_exåudî
);

1313 
	`°_synchr⁄ize
();

1315 
	`íabÀ_íd°›s
(
Ál£
);

1316 
cuºít_posôi⁄
[
axis
] = 0;

1317 
	`∂™_£t_posôi⁄
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
], cuºít_posôi⁄[
E_AXIS
]);

1318 
de°ö©i⁄
[
axis
] = -
	`home_ªåa˘_mm
◊xisË* 
axis_home_dú
;

1319 
	`∂™_buf„r_löe
(
de°ö©i⁄
[
X_AXIS
], de°ö©i⁄[
Y_AXIS
], de°ö©i⁄[
Z_AXIS
], de°ö©i⁄[
E_AXIS
], 
„edøã
/60, 
a˘ive_exåudî
);

1320 
	`°_synchr⁄ize
();

1321 
	`íabÀ_íd°›s
(
åue
);

1323 
de°ö©i⁄
[
axis
] = 2*
	`home_ªåa˘_mm
◊xisË* 
axis_home_dú
;

1324 #ifde‡
DELTA


1325 
„edøã
 = 
homög_„edøã
[
axis
]/4;

1327 
„edøã
 = 
homög_„edøã
[
axis
]/2 ;

1329 
	`∂™_buf„r_löe
(
de°ö©i⁄
[
X_AXIS
], de°ö©i⁄[
Y_AXIS
], de°ö©i⁄[
Z_AXIS
], de°ö©i⁄[
E_AXIS
], 
„edøã
/60, 
a˘ive_exåudî
);

1330 
	`°_synchr⁄ize
();

1331 #ifde‡
DELTA


1333 i‡(
íd°›_adj
[
axis
] * 
axis_home_dú
 < 0) {

1334 
	`∂™_£t_posôi⁄
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
], cuºít_posôi⁄[
E_AXIS
]);

1335 
de°ö©i⁄
[
axis
] = 
íd°›_adj
[axis];

1336 
	`∂™_buf„r_löe
(
de°ö©i⁄
[
X_AXIS
], de°ö©i⁄[
Y_AXIS
], de°ö©i⁄[
Z_AXIS
], de°ö©i⁄[
E_AXIS
], 
„edøã
/60, 
a˘ive_exåudî
);

1337 
	`°_synchr⁄ize
();

1340 
	`axis_is_©_home
(
axis
);

1341 
de°ö©i⁄
[
axis
] = 
cuºít_posôi⁄
[axis];

1342 
„edøã
 = 0.0;

1343 
	`íd°›s_hô_⁄_puΩo£
();

1344 
axis_known_posôi⁄
[
axis
] = 
åue
;

1347 #ifde‡
SERVO_ENDSTOPS


1348 i‡(
£rvo_íd°›s
[
axis
] > -1) {

1349 
£rvos
[
£rvo_íd°›s
[
axis
]].
	`wrôe
(
£rvo_íd°›_™gÀs
[axis * 2 + 1]);

1352 #i‡
	`deföed
 (
ENABLE_AUTO_BED_LEVELING
Ë&& (
PROBE_SERVO_DEACTIVATION_DELAY
 > 0)

1353 #i‚de‡
Z_PROBE_SLED


1354 i‡(
axis
==
Z_AXIS
Ë
	`ªåa˘_z_¥obe
();

1359 
	}
}

1360 
	#HOMEAXIS
(
LETTER
Ë
	`homóxis
(LETTER##
_AXIS
)

	)

1362 
	$ª‰esh_cmd_timeout
()

1364 
¥evious_mûlis_cmd
 = 
	`mûlis
();

1365 
	}
}

1367 #ifde‡
FWRETRACT


1368 
	$ªåa˘
(
boﬁ
 
ªåa˘ög
, boﬁ 
sw≠ªåa˘
 = 
Ál£
) {

1369 if(
ªåa˘ög
 && !
ªåa˘ed
[
a˘ive_exåudî
]) {

1370 
de°ö©i⁄
[
X_AXIS
]=
cuºít_posôi⁄
[X_AXIS];

1371 
de°ö©i⁄
[
Y_AXIS
]=
cuºít_posôi⁄
[Y_AXIS];

1372 
de°ö©i⁄
[
Z_AXIS
]=
cuºít_posôi⁄
[Z_AXIS];

1373 
de°ö©i⁄
[
E_AXIS
]=
cuºít_posôi⁄
[E_AXIS];

1374 i‡(
sw≠ªåa˘
) {

1375 
cuºít_posôi⁄
[
E_AXIS
]+=
ªåa˘_Àngth_sw≠
/
vﬁumëric_mu…ùlõr
[
a˘ive_exåudî
];

1377 
cuºít_posôi⁄
[
E_AXIS
]+=
ªåa˘_Àngth
/
vﬁumëric_mu…ùlõr
[
a˘ive_exåudî
];

1379 
	`∂™_£t_e_posôi⁄
(
cuºít_posôi⁄
[
E_AXIS
]);

1380 
ﬁdFìdøã
 = 
„edøã
;

1381 
„edøã
=
ªåa˘_„edøã
*60;

1382 
ªåa˘ed
[
a˘ive_exåudî
]=
åue
;

1383 
	`¥ï¨e_move
();

1384 
cuºít_posôi⁄
[
Z_AXIS
]-=
ªåa˘_zli·
;

1385 #ifde‡
DELTA


1386 
	`ˇlcuœã_dñè
(
cuºít_posôi⁄
);

1387 
	`∂™_£t_posôi⁄
(
dñè
[
X_AXIS
], dñè[
Y_AXIS
], dñè[
Z_AXIS
], 
cuºít_posôi⁄
[
E_AXIS
]);

1389 
	`∂™_£t_posôi⁄
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
], cuºít_posôi⁄[
E_AXIS
]);

1391 
	`¥ï¨e_move
();

1392 
„edøã
 = 
ﬁdFìdøã
;

1393 } if(!
ªåa˘ög
 && 
ªåa˘ed
[
a˘ive_exåudî
]) {

1394 
de°ö©i⁄
[
X_AXIS
]=
cuºít_posôi⁄
[X_AXIS];

1395 
de°ö©i⁄
[
Y_AXIS
]=
cuºít_posôi⁄
[Y_AXIS];

1396 
de°ö©i⁄
[
Z_AXIS
]=
cuºít_posôi⁄
[Z_AXIS];

1397 
de°ö©i⁄
[
E_AXIS
]=
cuºít_posôi⁄
[E_AXIS];

1398 
cuºít_posôi⁄
[
Z_AXIS
]+=
ªåa˘_zli·
;

1399 #ifde‡
DELTA


1400 
	`ˇlcuœã_dñè
(
cuºít_posôi⁄
);

1401 
	`∂™_£t_posôi⁄
(
dñè
[
X_AXIS
], dñè[
Y_AXIS
], dñè[
Z_AXIS
], 
cuºít_posôi⁄
[
E_AXIS
]);

1403 
	`∂™_£t_posôi⁄
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
], cuºít_posôi⁄[
E_AXIS
]);

1406 i‡(
sw≠ªåa˘
) {

1407 
cuºít_posôi⁄
[
E_AXIS
]-=(
ªåa˘_Àngth_sw≠
+
ªåa˘_ªcovî_Àngth_sw≠
)/
vﬁumëric_mu…ùlõr
[
a˘ive_exåudî
];

1409 
cuºít_posôi⁄
[
E_AXIS
]-=(
ªåa˘_Àngth
+
ªåa˘_ªcovî_Àngth
)/
vﬁumëric_mu…ùlõr
[
a˘ive_exåudî
];

1411 
	`∂™_£t_e_posôi⁄
(
cuºít_posôi⁄
[
E_AXIS
]);

1412 
ﬁdFìdøã
 = 
„edøã
;

1413 
„edøã
=
ªåa˘_ªcovî_„edøã
*60;

1414 
ªåa˘ed
[
a˘ive_exåudî
]=
Ál£
;

1415 
	`¥ï¨e_move
();

1416 
„edøã
 = 
ﬁdFìdøã
;

1418 
	}
}

1421 #ifde‡
Z_PROBE_SLED


1428 
	$dock_¶ed
(
boﬁ
 
dock
, 
off£t
=0) {

1429 
z_loc
;

1431 i‡(!((
axis_known_posôi⁄
[
X_AXIS
]Ë&& (axis_known_posôi⁄[
Y_AXIS
]))) {

1432 
	`LCD_MESSAGEPGM
(
MSG_POSITION_UNKNOWN
);

1433 
SERIAL_ECHO_START
;

1434 
	`SERIAL_ECHOLNPGM
(
MSG_POSITION_UNKNOWN
);

1438 i‡(
dock
) {

1439 
	`do_blockög_move_to
(
X_MAX_POS
 + 
SLED_DOCKING_OFFSET
 + 
off£t
,

1440 
cuºít_posôi⁄
[
Y_AXIS
],

1441 
cuºít_posôi⁄
[
Z_AXIS
]);

1443 
	`digôÆWrôe
(
SERVO0_PIN
, 
LOW
);

1445 i‡(
cuºít_posôi⁄
[
Z_AXIS
] < (
Z_RAISE_BEFORE_PROBING
 + 5))

1446 
z_loc
 = 
Z_RAISE_BEFORE_PROBING
;

1448 
z_loc
 = 
cuºít_posôi⁄
[
Z_AXIS
];

1449 
	`do_blockög_move_to
(
X_MAX_POS
 + 
SLED_DOCKING_OFFSET
 + 
off£t
,

1450 
Y_PROBE_OFFSET_FROM_EXTRUDER
, 
z_loc
);

1452 
	`digôÆWrôe
(
SERVO0_PIN
, 
HIGH
);

1454 
	}
}

1457 
	$¥o˚ss_comm™ds
()

1459 
codíum
;

1460 *
°¨pos
 = 
NULL
;

1461 #ifde‡
ENABLE_AUTO_BED_LEVELING


1462 
x_tmp
, 
y_tmp
, 
z_tmp
, 
ªÆ_z
;

1464 if(
	`code_£í
('G'))

1466 ()
	`code_vÆue
())

1470 if(
St›≥d
 =
Ál£
) {

1471 
	`gë_co‹dö©es
();

1472 #ifde‡
FWRETRACT


1473 if(
aut‹ëø˘_íabÀd
)

1474 if–!(
	`code_£í
('X') || code_seen('Y') || code_seen('Z')) && code_seen('E')) {

1475 
ech™ge
=
de°ö©i⁄
[
E_AXIS
]-
cuºít_posôi⁄
[E_AXIS];

1476 if((
ech™ge
<-
MIN_RETRACT
 && !
ªåa˘ed
) || (echange>MIN_RETRACT &&Ñetracted)) {

1477 
cuºít_posôi⁄
[
E_AXIS
] = 
de°ö©i⁄
[E_AXIS];

1478 
	`∂™_£t_e_posôi⁄
(
cuºít_posôi⁄
[
E_AXIS
]);

1479 
	`ªåa˘
(!
ªåa˘ed
);

1484 
	`¥ï¨e_move
();

1488 #i‚de‡
SCARA


1490 if(
St›≥d
 =
Ál£
) {

1491 
	`gë_¨c_co‹dö©es
();

1492 
	`¥ï¨e_¨c_move
(
åue
);

1496 if(
St›≥d
 =
Ál£
) {

1497 
	`gë_¨c_co‹dö©es
();

1498 
	`¥ï¨e_¨c_move
(
Ál£
);

1503 
	`LCD_MESSAGEPGM
(
MSG_DWELL
);

1504 
codíum
 = 0;

1505 if(
	`code_£í
('P')Ë
codíum
 = 
	`code_vÆue
();

1506 if(
	`code_£í
('S')Ë
codíum
 = 
	`code_vÆue
() * 1000;

1508 
	`°_synchr⁄ize
();

1509 
codíum
 +
	`mûlis
();

1510 
¥evious_mûlis_cmd
 = 
	`mûlis
();

1511 
	`mûlis
(Ë< 
codíum
) {

1512 
	`m™age_hóãr
();

1513 
	`m™age_öa˘ivôy
();

1514 
	`lcd_upd©e
();

1517 #ifde‡
FWRETRACT


1519 #i‡
EXTRUDERS
 > 1

1520 
ªåa˘ed_sw≠
[
a˘ive_exåudî
]=(
	`code_£í
('S'Ë&& 
	`code_vÆue_l⁄g
() == 1);

1521 
	`ªåa˘
(
åue
,
ªåa˘ed_sw≠
[
a˘ive_exåudî
]);

1523 
	`ªåa˘
(
åue
);

1527 #i‡
EXTRUDERS
 > 1

1528 
	`ªåa˘
(
Ál£
,
ªåa˘ed_sw≠
[
a˘ive_exåudî
]);

1530 
	`ªåa˘
(
Ál£
);

1535 #ifde‡
ENABLE_AUTO_BED_LEVELING


1536 
∂™_bed_Àvñ_m©rix
.
	`£t_to_idítôy
();

1539 #ifde‡
NONLINEAR_BED_LEVELING


1540 
	`ª£t_bed_Àvñ
();

1543 
ßved_„edøã
 = 
„edøã
;

1544 
ßved_„edmu…ùly
 = 
„edmu…ùly
;

1545 
„edmu…ùly
 = 100;

1546 
¥evious_mûlis_cmd
 = 
	`mûlis
();

1548 
	`íabÀ_íd°›s
(
åue
);

1550 
öt8_t
 
i
=0; i < 
NUM_AXIS
; i++) {

1551 
de°ö©i⁄
[
i
] = 
cuºít_posôi⁄
[i];

1553 
„edøã
 = 0.0;

1555 #ifde‡
DELTA


1560 
cuºít_posôi⁄
[
X_AXIS
] = 0;

1561 
cuºít_posôi⁄
[
Y_AXIS
] = 0;

1562 
cuºít_posôi⁄
[
Z_AXIS
] = 0;

1563 
	`∂™_£t_posôi⁄
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
], cuºít_posôi⁄[
E_AXIS
]);

1565 
de°ö©i⁄
[
X_AXIS
] = 3 * 
Z_MAX_LENGTH
;

1566 
de°ö©i⁄
[
Y_AXIS
] = 3 * 
Z_MAX_LENGTH
;

1567 
de°ö©i⁄
[
Z_AXIS
] = 3 * 
Z_MAX_LENGTH
;

1568 
„edøã
 = 1.732 * 
homög_„edøã
[
X_AXIS
];

1569 
	`∂™_buf„r_löe
(
de°ö©i⁄
[
X_AXIS
], de°ö©i⁄[
Y_AXIS
], de°ö©i⁄[
Z_AXIS
], de°ö©i⁄[
E_AXIS
], 
„edøã
/60, 
a˘ive_exåudî
);

1570 
	`°_synchr⁄ize
();

1571 
	`íd°›s_hô_⁄_puΩo£
();

1573 
cuºít_posôi⁄
[
X_AXIS
] = 
de°ö©i⁄
[X_AXIS];

1574 
cuºít_posôi⁄
[
Y_AXIS
] = 
de°ö©i⁄
[Y_AXIS];

1575 
cuºít_posôi⁄
[
Z_AXIS
] = 
de°ö©i⁄
[Z_AXIS];

1578 
	`HOMEAXIS
(
X
);

1579 
	`HOMEAXIS
(
Y
);

1580 
	`HOMEAXIS
(
Z
);

1582 
	`ˇlcuœã_dñè
(
cuºít_posôi⁄
);

1583 
	`∂™_£t_posôi⁄
(
dñè
[
X_AXIS
], dñè[
Y_AXIS
], dñè[
Z_AXIS
], 
cuºít_posôi⁄
[
E_AXIS
]);

1587 
home_Æl_axis
 = !((
	`code_£í
(
axis_codes
[
X_AXIS
])Ë|| (code_£í◊xis_codes[
Y_AXIS
])Ë|| (code_£í◊xis_codes[
Z_AXIS
])));

1589 #i‡
Z_HOME_DIR
 > 0

1590 if((
home_Æl_axis
Ë|| (
	`code_£í
(
axis_codes
[
Z_AXIS
]))) {

1591 
	`HOMEAXIS
(
Z
);

1595 #ifde‡
QUICK_HOME


1596 if((
home_Æl_axis
)||–
	`code_£í
(
axis_codes
[
X_AXIS
]Ë&& code_£í◊xis_codes[
Y_AXIS
])) )

1598 
cuºít_posôi⁄
[
X_AXIS
] = 0;cuºít_posôi⁄[
Y_AXIS
] = 0;

1600 #i‚de‡
DUAL_X_CARRIAGE


1601 
x_axis_home_dú
 = 
	`home_dú
(
X_AXIS
);

1603 
x_axis_home_dú
 = 
	`x_home_dú
(
a˘ive_exåudî
);

1604 
exåudî_du∂iˇti⁄_íabÀd
 = 
Ál£
;

1607 
	`∂™_£t_posôi⁄
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
], cuºít_posôi⁄[
E_AXIS
]);

1608 
de°ö©i⁄
[
X_AXIS
] = 1.5 * 
	`max_Àngth
(X_AXISË* 
x_axis_home_dú
;de°ö©i⁄[
Y_AXIS
] = 1.5 * max_Àngth(Y_AXISË* 
	`home_dú
(Y_AXIS);

1609 
„edøã
 = 
homög_„edøã
[
X_AXIS
];

1610 if(
homög_„edøã
[
Y_AXIS
]<
„edøã
)

1611 
„edøã
 = 
homög_„edøã
[
Y_AXIS
];

1612 i‡(
	`max_Àngth
(
X_AXIS
Ë> max_Àngth(
Y_AXIS
)) {

1613 
„edøã
 *
	`sqπ
(
	`pow
(
	`max_Àngth
(
Y_AXIS
Ë/ max_Àngth(
X_AXIS
), 2) + 1);

1615 
„edøã
 *
	`sqπ
(
	`pow
(
	`max_Àngth
(
X_AXIS
Ë/ max_Àngth(
Y_AXIS
), 2) + 1);

1617 
	`∂™_buf„r_löe
(
de°ö©i⁄
[
X_AXIS
], de°ö©i⁄[
Y_AXIS
], de°ö©i⁄[
Z_AXIS
], de°ö©i⁄[
E_AXIS
], 
„edøã
/60, 
a˘ive_exåudî
);

1618 
	`°_synchr⁄ize
();

1620 
	`axis_is_©_home
(
X_AXIS
);

1621 
	`axis_is_©_home
(
Y_AXIS
);

1622 
	`∂™_£t_posôi⁄
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
], cuºít_posôi⁄[
E_AXIS
]);

1623 
de°ö©i⁄
[
X_AXIS
] = 
cuºít_posôi⁄
[X_AXIS];

1624 
de°ö©i⁄
[
Y_AXIS
] = 
cuºít_posôi⁄
[Y_AXIS];

1625 
	`∂™_buf„r_löe
(
de°ö©i⁄
[
X_AXIS
], de°ö©i⁄[
Y_AXIS
], de°ö©i⁄[
Z_AXIS
], de°ö©i⁄[
E_AXIS
], 
„edøã
/60, 
a˘ive_exåudî
);

1626 
„edøã
 = 0.0;

1627 
	`°_synchr⁄ize
();

1628 
	`íd°›s_hô_⁄_puΩo£
();

1630 
cuºít_posôi⁄
[
X_AXIS
] = 
de°ö©i⁄
[X_AXIS];

1631 
cuºít_posôi⁄
[
Y_AXIS
] = 
de°ö©i⁄
[Y_AXIS];

1632 #i‚de‡
SCARA


1633 
cuºít_posôi⁄
[
Z_AXIS
] = 
de°ö©i⁄
[Z_AXIS];

1638 if((
home_Æl_axis
Ë|| (
	`code_£í
(
axis_codes
[
X_AXIS
])))

1640 #ifde‡
DUAL_X_CARRIAGE


1641 
tmp_exåudî
 = 
a˘ive_exåudî
;

1642 
exåudî_du∂iˇti⁄_íabÀd
 = 
Ál£
;

1643 
a˘ive_exåudî
 = !active_extruder;

1644 
	`HOMEAXIS
(
X
);

1645 
öa˘ive_exåudî_x_pos
 = 
cuºít_posôi⁄
[
X_AXIS
];

1646 
a˘ive_exåudî
 = 
tmp_exåudî
;

1647 
	`HOMEAXIS
(
X
);

1649 
	`mem˝y
(
øi£d_∑rked_posôi⁄
, 
cuºít_posôi⁄
, (raised_parked_position));

1650 
dñayed_move_time
 = 0;

1651 
a˘ive_exåudî_∑rked
 = 
åue
;

1653 
	`HOMEAXIS
(
X
);

1657 if((
home_Æl_axis
Ë|| (
	`code_£í
(
axis_codes
[
Y_AXIS
]))) {

1658 
	`HOMEAXIS
(
Y
);

1661 if(
	`code_£í
(
axis_codes
[
X_AXIS
]))

1663 if(
	`code_vÆue_l⁄g
() != 0) {

1664 #ifde‡
SCARA


1665 
cuºít_posôi⁄
[
X_AXIS
]=
	`code_vÆue
();

1667 
cuºít_posôi⁄
[
X_AXIS
]=
	`code_vÆue
()+
add_homög
[X_AXIS];

1672 if(
	`code_£í
(
axis_codes
[
Y_AXIS
])) {

1673 if(
	`code_vÆue_l⁄g
() != 0) {

1674 #ifde‡
SCARA


1675 
cuºít_posôi⁄
[
Y_AXIS
]=
	`code_vÆue
();

1677 
cuºít_posôi⁄
[
Y_AXIS
]=
	`code_vÆue
()+
add_homög
[Y_AXIS];

1682 #i‡
Z_HOME_DIR
 < 0

1683 #i‚de‡
Z_SAFE_HOMING


1684 if((
home_Æl_axis
Ë|| (
	`code_£í
(
axis_codes
[
Z_AXIS
]))) {

1685 #i‡
	`deföed
 (
Z_RAISE_BEFORE_HOMING
) && (Z_RAISE_BEFORE_HOMING > 0)

1686 
de°ö©i⁄
[
Z_AXIS
] = 
Z_RAISE_BEFORE_HOMING
 * 
	`home_dú
(Z_AXIS) * (-1);

1687 
„edøã
 = 
max_„edøã
[
Z_AXIS
];

1688 
	`∂™_buf„r_löe
(
de°ö©i⁄
[
X_AXIS
], de°ö©i⁄[
Y_AXIS
], de°ö©i⁄[
Z_AXIS
], de°ö©i⁄[
E_AXIS
], 
„edøã
, 
a˘ive_exåudî
);

1689 
	`°_synchr⁄ize
();

1691 
	`HOMEAXIS
(
Z
);

1694 if(
home_Æl_axis
) {

1695 
de°ö©i⁄
[
X_AXIS
] = 
	`round
(
Z_SAFE_HOMING_X_POINT
 - 
X_PROBE_OFFSET_FROM_EXTRUDER
);

1696 
de°ö©i⁄
[
Y_AXIS
] = 
	`round
(
Z_SAFE_HOMING_Y_POINT
 - 
Y_PROBE_OFFSET_FROM_EXTRUDER
);

1697 
de°ö©i⁄
[
Z_AXIS
] = 
Z_RAISE_BEFORE_HOMING
 * 
	`home_dú
(Z_AXIS) * (-1);

1698 
„edøã
 = 
XY_TRAVEL_SPEED
;

1699 
cuºít_posôi⁄
[
Z_AXIS
] = 0;

1701 
	`∂™_£t_posôi⁄
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
], cuºít_posôi⁄[
E_AXIS
]);

1702 
	`∂™_buf„r_löe
(
de°ö©i⁄
[
X_AXIS
], de°ö©i⁄[
Y_AXIS
], de°ö©i⁄[
Z_AXIS
], de°ö©i⁄[
E_AXIS
], 
„edøã
, 
a˘ive_exåudî
);

1703 
	`°_synchr⁄ize
();

1704 
cuºít_posôi⁄
[
X_AXIS
] = 
de°ö©i⁄
[X_AXIS];

1705 
cuºít_posôi⁄
[
Y_AXIS
] = 
de°ö©i⁄
[Y_AXIS];

1707 
	`HOMEAXIS
(
Z
);

1710 if(
	`code_£í
(
axis_codes
[
Z_AXIS
])) {

1711 i‡–(
axis_known_posôi⁄
[
X_AXIS
]Ë&& (axis_known_posôi⁄[
Y_AXIS
]) \

1712 && (
cuºít_posôi⁄
[
X_AXIS
]+
X_PROBE_OFFSET_FROM_EXTRUDER
 >
X_MIN_POS
) \

1713 && (
cuºít_posôi⁄
[
X_AXIS
]+
X_PROBE_OFFSET_FROM_EXTRUDER
 <
X_MAX_POS
) \

1714 && (
cuºít_posôi⁄
[
Y_AXIS
]+
Y_PROBE_OFFSET_FROM_EXTRUDER
 >
Y_MIN_POS
) \

1715 && (
cuºít_posôi⁄
[
Y_AXIS
]+
Y_PROBE_OFFSET_FROM_EXTRUDER
 <
Y_MAX_POS
)) {

1717 
cuºít_posôi⁄
[
Z_AXIS
] = 0;

1718 
	`∂™_£t_posôi⁄
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
], cuºít_posôi⁄[
E_AXIS
]);

1719 
de°ö©i⁄
[
Z_AXIS
] = 
Z_RAISE_BEFORE_HOMING
 * 
	`home_dú
(Z_AXIS) * (-1);

1720 
„edøã
 = 
max_„edøã
[
Z_AXIS
];

1721 
	`∂™_buf„r_löe
(
de°ö©i⁄
[
X_AXIS
], de°ö©i⁄[
Y_AXIS
], de°ö©i⁄[
Z_AXIS
], de°ö©i⁄[
E_AXIS
], 
„edøã
, 
a˘ive_exåudî
);

1722 
	`°_synchr⁄ize
();

1724 
	`HOMEAXIS
(
Z
);

1725 } i‡(!((
axis_known_posôi⁄
[
X_AXIS
]Ë&& (axis_known_posôi⁄[
Y_AXIS
]))) {

1726 
	`LCD_MESSAGEPGM
(
MSG_POSITION_UNKNOWN
);

1727 
SERIAL_ECHO_START
;

1728 
	`SERIAL_ECHOLNPGM
(
MSG_POSITION_UNKNOWN
);

1730 
	`LCD_MESSAGEPGM
(
MSG_ZPROBE_OUT
);

1731 
SERIAL_ECHO_START
;

1732 
	`SERIAL_ECHOLNPGM
(
MSG_ZPROBE_OUT
);

1740 if(
	`code_£í
(
axis_codes
[
Z_AXIS
])) {

1741 if(
	`code_vÆue_l⁄g
() != 0) {

1742 
cuºít_posôi⁄
[
Z_AXIS
]=
	`code_vÆue
()+
add_homög
[Z_AXIS];

1745 #ifde‡
ENABLE_AUTO_BED_LEVELING


1746 if((
home_Æl_axis
Ë|| (
	`code_£í
(
axis_codes
[
Z_AXIS
]))) {

1747 
cuºít_posôi⁄
[
Z_AXIS
] +
z¥obe_zoff£t
;

1750 
	`∂™_£t_posôi⁄
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
], cuºít_posôi⁄[
E_AXIS
]);

1753 #ifde‡
SCARA


1754 
	`ˇlcuœã_dñè
(
cuºít_posôi⁄
);

1755 
	`∂™_£t_posôi⁄
(
dñè
[
X_AXIS
], dñè[
Y_AXIS
], dñè[
Z_AXIS
], 
cuºít_posôi⁄
[
E_AXIS
]);

1758 #ifde‡
ENDSTOPS_ONLY_FOR_HOMING


1759 
	`íabÀ_íd°›s
(
Ál£
);

1762 
„edøã
 = 
ßved_„edøã
;

1763 
„edmu…ùly
 = 
ßved_„edmu…ùly
;

1764 
¥evious_mûlis_cmd
 = 
	`mûlis
();

1765 
	`íd°›s_hô_⁄_puΩo£
();

1768 #ifde‡
ENABLE_AUTO_BED_LEVELING


1771 #i‡
Z_MIN_PIN
 == -1

1776 i‡(! (
axis_known_posôi⁄
[
X_AXIS
] &&áxis_known_posôi⁄[
Y_AXIS
]) )

1778 
	`LCD_MESSAGEPGM
(
MSG_POSITION_UNKNOWN
);

1779 
SERIAL_ECHO_START
;

1780 
	`SERIAL_ECHOLNPGM
(
MSG_POSITION_UNKNOWN
);

1784 #ifde‡
Z_PROBE_SLED


1785 
	`dock_¶ed
(
Ál£
);

1787 
	`°_synchr⁄ize
();

1791 
∂™_bed_Àvñ_m©rix
.
	`£t_to_idítôy
();

1793 #ifde‡
NONLINEAR_BED_LEVELING


1794 
	`ª£t_bed_Àvñ
();

1796 
ve˘‹_3
 
unc‹ª˘ed_posôi⁄
 = 
	`∂™_gë_posôi⁄
();

1798 
cuºít_posôi⁄
[
X_AXIS
] = 
unc‹ª˘ed_posôi⁄
.
x
;

1799 
cuºít_posôi⁄
[
Y_AXIS
] = 
unc‹ª˘ed_posôi⁄
.
y
;

1800 
cuºít_posôi⁄
[
Z_AXIS
] = 
unc‹ª˘ed_posôi⁄
.
z
;

1801 
	`∂™_£t_posôi⁄
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
], cuºít_posôi⁄[
E_AXIS
]);

1804 #i‚de‡
SERVO_ENDSTOPS


1805 
	`ígage_z_¥obe
();

1808 
	`£tup_f‹_íd°›_move
();

1810 
„edøã
 = 
homög_„edøã
[
Z_AXIS
];

1811 #ifde‡
AUTO_BED_LEVELING_GRID


1819 
eqnAM©rix
[
AUTO_BED_LEVELING_GRID_POINTS
*AUTO_BED_LEVELING_GRID_POINTS*3];

1821 
eqnBVe˘‹
[
AUTO_BED_LEVELING_GRID_POINTS
*AUTO_BED_LEVELING_GRID_POINTS];

1823 #ifde‡
NONLINEAR_BED_LEVELING


1824 
z_off£t
 = 
Z_PROBE_OFFSET_FROM_EXTRUDER
;

1825 i‡(
	`code_£í
(
axis_codes
[
Z_AXIS
])) {

1826 
z_off£t
 +
	`code_vÆue
();

1830 
¥obePoötCou¡î
 = 0;

1831 
yCou¡
=0; yCou¡ < 
AUTO_BED_LEVELING_GRID_POINTS
; yCount++)

1833 
yProbe
 = 
FRONT_PROBE_BED_POSITION
 + 
AUTO_BED_LEVELING_GRID_Y
 * 
yCou¡
;

1834 
xSèπ
, 
xSt›
, 
xInc
;

1835 i‡(
yCou¡
 % 2) {

1836 
xSèπ
 = 0;

1837 
xSt›
 = 
AUTO_BED_LEVELING_GRID_POINTS
;

1838 
xInc
 = 1;

1840 
xSèπ
 = 
AUTO_BED_LEVELING_GRID_POINTS
 - 1;

1841 
xSt›
 = -1;

1842 
xInc
 = -1;

1845 
xCou¡
=
xSèπ
; xCou¡ !
xSt›
; xCou¡ +
xInc
)

1847 
xProbe
 = 
LEFT_PROBE_BED_POSITION
 + 
AUTO_BED_LEVELING_GRID_X
 * 
xCou¡
;

1848 
z_bef‹e
;

1849 i‡(
¥obePoötCou¡î
 == 0)

1852 
z_bef‹e
 = 
Z_RAISE_BEFORE_PROBING
;

1856 
z_bef‹e
 = 
cuºít_posôi⁄
[
Z_AXIS
] + 
Z_RAISE_BETWEEN_PROBINGS
;

1859 #ifde‡
DELTA


1861 
di°™˚_‰om_˚¡î
 = 
	`sqπ
(
xProbe
*xProbê+ 
yProbe
*yProbe);

1862 i‡(
di°™˚_‰om_˚¡î
 > 
DELTA_PROBABLE_RADIUS
) ;

1865 
mósuªd_z
 = 
	`¥obe_±
(
xProbe
, 
yProbe
, 
z_bef‹e
);

1867 #ifde‡
NONLINEAR_BED_LEVELING


1868 
bed_Àvñ
[
xCou¡
][
yCou¡
] = 
mósuªd_z
 + 
z_off£t
;

1871 
eqnBVe˘‹
[
¥obePoötCou¡î
] = 
mósuªd_z
;

1873 
eqnAM©rix
[
¥obePoötCou¡î
 + 0*
AUTO_BED_LEVELING_GRID_POINTS
*AUTO_BED_LEVELING_GRID_POINTS] = 
xProbe
;

1874 
eqnAM©rix
[
¥obePoötCou¡î
 + 1*
AUTO_BED_LEVELING_GRID_POINTS
*AUTO_BED_LEVELING_GRID_POINTS] = 
yProbe
;

1875 
eqnAM©rix
[
¥obePoötCou¡î
 + 2*
AUTO_BED_LEVELING_GRID_POINTS
*AUTO_BED_LEVELING_GRID_POINTS] = 1;

1876 
¥obePoötCou¡î
++;

1878 
	`m™age_hóãr
();

1879 
	`m™age_öa˘ivôy
();

1880 
	`lcd_upd©e
();

1883 
	`˛ón_up_a·î_íd°›_move
();

1885 #ifde‡
NONLINEAR_BED_LEVELING


1886 
	`exå≠ﬁ©e_u≈robed_bed_Àvñ
();

1887 
	`¥öt_bed_Àvñ
();

1890 *
∂™e_equ©i⁄_c€fficõ¡s
 = 
	`qr_sﬁve
(
AUTO_BED_LEVELING_GRID_POINTS
*AUTO_BED_LEVELING_GRID_POINTS, 3, 
eqnAM©rix
, 
eqnBVe˘‹
);

1892 
	`SERIAL_PROTOCOLPGM
("Eqn coefficients:á: ");

1893 
	`SERIAL_PROTOCOL
(
∂™e_equ©i⁄_c€fficõ¡s
[0]);

1894 
	`SERIAL_PROTOCOLPGM
(" b: ");

1895 
	`SERIAL_PROTOCOL
(
∂™e_equ©i⁄_c€fficõ¡s
[1]);

1896 
	`SERIAL_PROTOCOLPGM
(" d: ");

1897 
	`SERIAL_PROTOCOLLN
(
∂™e_equ©i⁄_c€fficõ¡s
[2]);

1900 
	`£t_bed_Àvñ_equ©i⁄_lsq
(
∂™e_equ©i⁄_c€fficõ¡s
);

1902 
	`‰ì
(
∂™e_equ©i⁄_c€fficõ¡s
);

1909 
z_©_±_1
 = 
	`¥obe_±
(
ABL_PROBE_PT_1_X
, 
ABL_PROBE_PT_1_Y
, 
Z_RAISE_BEFORE_PROBING
);

1912 
z_©_±_2
 = 
	`¥obe_±
(
ABL_PROBE_PT_2_X
, 
ABL_PROBE_PT_2_Y
, 
cuºít_posôi⁄
[
Z_AXIS
] + 
Z_RAISE_BETWEEN_PROBINGS
);

1915 
z_©_±_3
 = 
	`¥obe_±
(
ABL_PROBE_PT_3_X
, 
ABL_PROBE_PT_3_Y
, 
cuºít_posôi⁄
[
Z_AXIS
] + 
Z_RAISE_BETWEEN_PROBINGS
);

1917 
	`˛ón_up_a·î_íd°›_move
();

1919 
	`£t_bed_Àvñ_equ©i⁄_3±s
(
z_©_±_1
, 
z_©_±_2
, 
z_©_±_3
);

1923 
	`°_synchr⁄ize
();

1925 #i‚de‡
SERVO_ENDSTOPS


1926 
	`ªåa˘_z_¥obe
();

1929 #i‚de‡
NONLINEAR_BED_LEVELING


1933 
ªÆ_z
 = (
	`°_gë_posôi⁄
(
Z_AXIS
))/
axis_°ïs_≥r_unô
[Z_AXIS];

1934 
x_tmp
 = 
cuºít_posôi⁄
[
X_AXIS
] + 
X_PROBE_OFFSET_FROM_EXTRUDER
;

1935 
y_tmp
 = 
cuºít_posôi⁄
[
Y_AXIS
] + 
Y_PROBE_OFFSET_FROM_EXTRUDER
;

1936 
z_tmp
 = 
cuºít_posôi⁄
[
Z_AXIS
];

1938 
	`≠∂y_rŸ©i⁄_xyz
(
∂™_bed_Àvñ_m©rix
, 
x_tmp
, 
y_tmp
, 
z_tmp
);

1939 
cuºít_posôi⁄
[
Z_AXIS
] = 
z_tmp
 - 
ªÆ_z
 + current_position[Z_AXIS];

1940 
	`∂™_£t_posôi⁄
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
], cuºít_posôi⁄[
E_AXIS
]);

1943 #ifde‡
Z_PROBE_SLED


1944 
	`dock_¶ed
(
åue
, -
SLED_DOCKING_OFFSET
);

1948 #i‚de‡
Z_PROBE_SLED


1951 
	`ígage_z_¥obe
();

1952 
	`°_synchr⁄ize
();

1954 
	`£tup_f‹_íd°›_move
();

1956 
„edøã
 = 
homög_„edøã
[
Z_AXIS
];

1958 
	`run_z_¥obe
();

1959 
	`SERIAL_PROTOCOLPGM
(
MSG_BED
);

1960 
	`SERIAL_PROTOCOLPGM
(" X: ");

1961 
	`SERIAL_PROTOCOL
(
cuºít_posôi⁄
[
X_AXIS
]);

1962 
	`SERIAL_PROTOCOLPGM
(" Y: ");

1963 
	`SERIAL_PROTOCOL
(
cuºít_posôi⁄
[
Y_AXIS
]);

1964 
	`SERIAL_PROTOCOLPGM
(" Z: ");

1965 
	`SERIAL_PROTOCOL
(
cuºít_posôi⁄
[
Z_AXIS
]);

1966 
	`SERIAL_PROTOCOLPGM
("\n");

1968 
	`˛ón_up_a·î_íd°›_move
();

1969 
	`ªåa˘_z_¥obe
();

1974 
	`dock_¶ed
(
åue
);

1977 
	`dock_¶ed
(
Ál£
);

1982 
ªœtive_mode
 = 
Ál£
;

1985 
ªœtive_mode
 = 
åue
;

1988 if(!
	`code_£í
(
axis_codes
[
E_AXIS
]))

1989 
	`°_synchr⁄ize
();

1990 
öt8_t
 
i
=0; i < 
NUM_AXIS
; i++) {

1991 if(
	`code_£í
(
axis_codes
[
i
])) {

1992 if(
i
 =
E_AXIS
) {

1993 
cuºít_posôi⁄
[
i
] = 
	`code_vÆue
();

1994 
	`∂™_£t_e_posôi⁄
(
cuºít_posôi⁄
[
E_AXIS
]);

1997 #ifde‡
SCARA


1998 i‡(
i
 =
X_AXIS
 || i =
Y_AXIS
) {

1999 
cuºít_posôi⁄
[
i
] = 
	`code_vÆue
();

2002 
cuºít_posôi⁄
[
i
] = 
	`code_vÆue
()+
add_homög
[i];

2005 
cuºít_posôi⁄
[
i
] = 
	`code_vÆue
()+
add_homög
[i];

2007 
	`∂™_£t_posôi⁄
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
], cuºít_posôi⁄[
E_AXIS
]);

2015 if(
	`code_£í
('M'))

2017  ()
	`code_vÆue
() )

2019 #ifde‡
ULTIPANEL


2023 *
§c
 = 
°rchr_poöãr
 + 2;

2025 
codíum
 = 0;

2027 
boﬁ
 
hasP
 = 
Ál£
, 
hasS
 = false;

2028 i‡(
	`code_£í
('P')) {

2029 
codíum
 = 
	`code_vÆue
();

2030 
hasP
 = 
codíum
 > 0;

2032 i‡(
	`code_£í
('S')) {

2033 
codíum
 = 
	`code_vÆue
() * 1000;

2034 
hasS
 = 
codíum
 > 0;

2036 
°¨pos
 = 
	`°rchr
(
§c
, '*');

2037 i‡(
°¨pos
 !
NULL
) *(starpos) = '\0';

2038 *
§c
 == ' ') ++src;

2039 i‡(!
hasP
 && !
hasS
 && *
§c
 != '\0') {

2040 
	`lcd_£t°©us
(
§c
);

2042 
	`LCD_MESSAGEPGM
(
MSG_USERWAIT
);

2045 
	`lcd_ign‹e_˛ick
();

2046 
	`°_synchr⁄ize
();

2047 
¥evious_mûlis_cmd
 = 
	`mûlis
();

2048 i‡(
codíum
 > 0){

2049 
codíum
 +
	`mûlis
();

2050 
	`mûlis
(Ë< 
codíum
 && !
	`lcd_˛icked
()){

2051 
	`m™age_hóãr
();

2052 
	`m™age_öa˘ivôy
();

2053 
	`lcd_upd©e
();

2055 
	`lcd_ign‹e_˛ick
(
Ál£
);

2057 i‡(!
	`lcd_dëe˘ed
())

2059 !
	`lcd_˛icked
()){

2060 
	`m™age_hóãr
();

2061 
	`m™age_öa˘ivôy
();

2062 
	`lcd_upd©e
();

2065 i‡(
IS_SD_PRINTING
)

2066 
	`LCD_MESSAGEPGM
(
MSG_RESUMING
);

2068 
	`LCD_MESSAGEPGM
(
WELCOME_MSG
);

2073 
	`LCD_MESSAGEPGM
(
MSG_NO_MOVE
);

2074 
	`íabÀ_x
();

2075 
	`íabÀ_y
();

2076 
	`íabÀ_z
();

2077 
	`íabÀ_e0
();

2078 
	`íabÀ_e1
();

2079 
	`íabÀ_e2
();

2082 #ifde‡
SDSUPPORT


2084 
	`SERIAL_PROTOCOLLNPGM
(
MSG_BEGIN_FILE_LIST
);

2085 
ˇrd
.
	`ls
();

2086 
	`SERIAL_PROTOCOLLNPGM
(
MSG_END_FILE_LIST
);

2090 
ˇrd
.
	`öôsd
();

2094 
ˇrd
.
	`ªÀa£
();

2098 
°¨pos
 = (
	`°rchr
(
°rchr_poöãr
 + 4,'*'));

2099 if(
°¨pos
!=
NULL
)

2100 *(
°¨pos
)='\0';

2101 
ˇrd
.
	`›íFûe
(
°rchr_poöãr
 + 4,
åue
);

2104 
ˇrd
.
	`°¨tFûïröt
();

2105 
°¨âime
=
	`mûlis
();

2108 
ˇrd
.
	`∑u£SDPröt
();

2111 if(
ˇrd
.
ˇrdOK
 && 
	`code_£í
('S')) {

2112 
ˇrd
.
	`£tIndex
(
	`code_vÆue_l⁄g
());

2116 
ˇrd
.
	`gëSètus
();

2119 
°¨pos
 = (
	`°rchr
(
°rchr_poöãr
 + 4,'*'));

2120 if(
°¨pos
 !
NULL
){

2121 * 
≈os
 = 
	`°rchr
(
cmdbuf„r
[
bufödr
], 'N');

2122 
°rchr_poöãr
 = 
	`°rchr
(
≈os
,' ') + 1;

2123 *(
°¨pos
) = '\0';

2125 
ˇrd
.
	`›íFûe
(
°rchr_poöãr
+4,
Ál£
);

2132 i‡(
ˇrd
.
ˇrdOK
){

2133 
ˇrd
.
	`˛o£fûe
();

2134 
°¨pos
 = (
	`°rchr
(
°rchr_poöãr
 + 4,'*'));

2135 if(
°¨pos
 !
NULL
){

2136 * 
≈os
 = 
	`°rchr
(
cmdbuf„r
[
bufödr
], 'N');

2137 
°rchr_poöãr
 = 
	`°rchr
(
≈os
,' ') + 1;

2138 *(
°¨pos
) = '\0';

2140 
ˇrd
.
	`ªmoveFûe
(
°rchr_poöãr
 + 4);

2145 if(
ˇrd
.
sd¥ötög
) {

2146 
	`°_synchr⁄ize
();

2149 
°¨pos
 = (
	`°rchr
(
°rchr_poöãr
 + 4,'*'));

2151 * 
«me°¨ços
 = (
	`°rchr
(
°rchr_poöãr
 + 4,'!'));

2152 if(
«me°¨ços
==
NULL
)

2154 
«me°¨ços
=
°rchr_poöãr
 + 4;

2157 
«me°¨ços
++;

2159 if(
°¨pos
!=
NULL
)

2160 *(
°¨pos
)='\0';

2162 
boﬁ
 
ˇŒ_¥o˚duª
=(
	`code_£í
('P'));

2164 if(
°rchr_poöãr
>
«me°¨ços
)

2165 
ˇŒ_¥o˚duª
=
Ál£
;

2167 if–
ˇrd
.
ˇrdOK
 )

2169 
ˇrd
.
	`›íFûe
(
«me°¨ços
,
åue
,!
ˇŒ_¥o˚duª
);

2170 if(
	`code_£í
('S'))

2171 if(
°rchr_poöãr
<
«me°¨ços
)

2172 
ˇrd
.
	`£tIndex
(
	`code_vÆue_l⁄g
());

2173 
ˇrd
.
	`°¨tFûïröt
();

2174 if(!
ˇŒ_¥o˚duª
)

2175 
°¨âime
=
	`mûlis
();

2179 
°¨pos
 = (
	`°rchr
(
°rchr_poöãr
 + 5,'*'));

2180 if(
°¨pos
 !
NULL
){

2181 * 
≈os
 = 
	`°rchr
(
cmdbuf„r
[
bufödr
], 'N');

2182 
°rchr_poöãr
 = 
	`°rchr
(
≈os
,' ') + 1;

2183 *(
°¨pos
) = '\0';

2185 
ˇrd
.
	`›íLogFûe
(
°rchr_poöãr
+5);

2192 
°›time
=
	`mûlis
();

2193 
time
[30];

2194 
t
=(
°›time
-
°¨âime
)/1000;

2195 
£c
,
mö
;

2196 
mö
=
t
/60;

2197 
£c
=
t
%60;

2198 
	`•rötf_P
(
time
, 
	`PSTR
("%òmö, %ò£c"), 
mö
, 
£c
);

2199 
SERIAL_ECHO_START
;

2200 
	`SERIAL_ECHOLN
(
time
);

2201 
	`lcd_£t°©us
(
time
);

2202 
	`autŸempShutdown
();

2206 i‡(
	`code_£í
('S'))

2208 
pö_°©us
 = 
	`code_vÆue
();

2209 
pö_numbî
 = 
LED_PIN
;

2210 i‡(
	`code_£í
('P'Ë&& 
pö_°©us
 >= 0 &&Öin_status <= 255)

2211 
pö_numbî
 = 
	`code_vÆue
();

2212 
öt8_t
 
i
 = 0; i < (öt8_t)((
£nsôive_pös
)/()); i++)

2214 i‡(
£nsôive_pös
[
i
] =
pö_numbî
)

2216 
pö_numbî
 = -1;

2220 #i‡
	`deföed
(
FAN_PIN
) && FAN_PIN > -1

2221 i‡(
pö_numbî
 =
FAN_PIN
)

2222 
ÁnS≥ed
 = 
pö_°©us
;

2224 i‡(
pö_numbî
 > -1)

2226 
	`pöMode
(
pö_numbî
, 
OUTPUT
);

2227 
	`digôÆWrôe
(
pö_numbî
, 
pö_°©us
);

2228 
	`™ÆogWrôe
(
pö_numbî
, 
pö_°©us
);

2247 #ifde‡
ENABLE_AUTO_BED_LEVELING


2248 #ifde‡
Z_PROBE_REPEATABILITY_TEST


2252 #i‡
Z_MIN_PIN
 == -1

2256 
sum
=0.0;

2257 
món
=0.0;

2258 
sigma
=0.0;

2259 
ßm∂e_£t
[50];

2260 
vîbo£_Àvñ
=1, 
n
=0, 
j
, 
n_ßm∂es
 = 10, 
n_Àgs
=0, 
ígage_¥obe_f‹_óch_ªadög
=0 ;

2261 
X_cuºít
, 
Y_cuºít
, 
Z_cuºít
;

2262 
X_¥obe_loˇti⁄
, 
Y_¥obe_loˇti⁄
, 
Z_°¨t_loˇti⁄
, 
ext_posôi⁄
;

2264 i‡(
	`code_£í
('V') || code_seen('v')) {

2265 
vîbo£_Àvñ
 = 
	`code_vÆue
();

2266 i‡(
vîbo£_Àvñ
<0 || verbose_level>4 ) {

2267 
	`SERIAL_PROTOCOLPGM
("?Verbose LevelÇotÖlausable.\n");

2268 
Sigma_Exô
;

2272 i‡(
vîbo£_Àvñ
 > 0) {

2273 
	`SERIAL_PROTOCOLPGM
("M48 Z-Probe RepeatabilityÅest. Version 2.00\n");

2274 
	`SERIAL_PROTOCOLPGM
("Full supportát: http://3dprintboard.com/forum.php\n");

2277 i‡(
	`code_£í
('n')) {

2278 
n_ßm∂es
 = 
	`code_vÆue
();

2279 i‡(
n_ßm∂es
<4 ||Ç_samples>50 ) {

2280 
	`SERIAL_PROTOCOLPGM
("?Specified sample sizeÇotÖlausable.\n");

2281 
Sigma_Exô
;

2285 
X_cuºít
 = 
X_¥obe_loˇti⁄
 = 
	`°_gë_posôi⁄_mm
(
X_AXIS
);

2286 
Y_cuºít
 = 
Y_¥obe_loˇti⁄
 = 
	`°_gë_posôi⁄_mm
(
Y_AXIS
);

2287 
Z_cuºít
 = 
	`°_gë_posôi⁄_mm
(
Z_AXIS
);

2288 
Z_°¨t_loˇti⁄
 = 
	`°_gë_posôi⁄_mm
(
Z_AXIS
Ë+ 
Z_RAISE_BEFORE_PROBING
;

2289 
ext_posôi⁄
 = 
	`°_gë_posôi⁄_mm
(
E_AXIS
);

2291 i‡(
	`code_£í
('E') || code_seen('e') )

2292 
ígage_¥obe_f‹_óch_ªadög
++;

2294 i‡(
	`code_£í
('X') || code_seen('x') ) {

2295 
X_¥obe_loˇti⁄
 = 
	`code_vÆue
(Ë- 
X_PROBE_OFFSET_FROM_EXTRUDER
;

2296 i‡(
X_¥obe_loˇti⁄
<
X_MIN_POS
 || X_¥obe_loˇti⁄>
X_MAX_POS
 ) {

2297 
	`SERIAL_PROTOCOLPGM
("?Specified XÖosition out ofÑange.\n");

2298 
Sigma_Exô
;

2302 i‡(
	`code_£í
('Y') || code_seen('y') ) {

2303 
Y_¥obe_loˇti⁄
 = 
	`code_vÆue
(Ë- 
Y_PROBE_OFFSET_FROM_EXTRUDER
;

2304 i‡(
Y_¥obe_loˇti⁄
<
Y_MIN_POS
 || Y_¥obe_loˇti⁄>
Y_MAX_POS
 ) {

2305 
	`SERIAL_PROTOCOLPGM
("?Specified YÖosition out ofÑange.\n");

2306 
Sigma_Exô
;

2310 i‡(
	`code_£í
('L') || code_seen('l') ) {

2311 
n_Àgs
 = 
	`code_vÆue
();

2312 i‡–
n_Àgs
==1 )

2313 
n_Àgs
 = 2;

2314 i‡–
n_Àgs
<0 ||Ç_legs>15 ) {

2315 
	`SERIAL_PROTOCOLPGM
("?SpecifiedÇumber ofÜegs in movementÇotÖlausable.\n");

2316 
Sigma_Exô
;

2324 
	`°_synchr⁄ize
();

2325 
∂™_bed_Àvñ_m©rix
.
	`£t_to_idítôy
();

2326 
	`∂™_buf„r_löe
–
X_cuºít
, 
Y_cuºít
, 
Z_°¨t_loˇti⁄
,

2327 
ext_posôi⁄
,

2328 
homög_„edøã
[
Z_AXIS
]/60,

2329 
a˘ive_exåudî
);

2330 
	`°_synchr⁄ize
();

2337 i‡(
vîbo£_Àvñ
 > 2)

2338 
	`SERIAL_PROTOCOL
("PositioningÖrobe forÅheÅest.\n");

2340 
	`∂™_buf„r_löe
–
X_¥obe_loˇti⁄
, 
Y_¥obe_loˇti⁄
, 
Z_°¨t_loˇti⁄
,

2341 
ext_posôi⁄
,

2342 
homög_„edøã
[
X_AXIS
]/60,

2343 
a˘ive_exåudî
);

2344 
	`°_synchr⁄ize
();

2346 
cuºít_posôi⁄
[
X_AXIS
] = 
X_cuºít
 = 
	`°_gë_posôi⁄_mm
(X_AXIS);

2347 
cuºít_posôi⁄
[
Y_AXIS
] = 
Y_cuºít
 = 
	`°_gë_posôi⁄_mm
(Y_AXIS);

2348 
cuºít_posôi⁄
[
Z_AXIS
] = 
Z_cuºít
 = 
	`°_gë_posôi⁄_mm
(Z_AXIS);

2349 
cuºít_posôi⁄
[
E_AXIS
] = 
ext_posôi⁄
 = 
	`°_gë_posôi⁄_mm
(E_AXIS);

2356 
	`ígage_z_¥obe
();

2358 
	`£tup_f‹_íd°›_move
();

2359 
	`run_z_¥obe
();

2361 
cuºít_posôi⁄
[
Z_AXIS
] = 
Z_cuºít
 = 
	`°_gë_posôi⁄_mm
(Z_AXIS);

2362 
Z_°¨t_loˇti⁄
 = 
	`°_gë_posôi⁄_mm
(
Z_AXIS
Ë+ 
Z_RAISE_BEFORE_PROBING
;

2364 
	`∂™_buf„r_löe
–
X_¥obe_loˇti⁄
, 
Y_¥obe_loˇti⁄
, 
Z_°¨t_loˇti⁄
,

2365 
ext_posôi⁄
,

2366 
homög_„edøã
[
X_AXIS
]/60,

2367 
a˘ive_exåudî
);

2368 
	`°_synchr⁄ize
();

2369 
cuºít_posôi⁄
[
Z_AXIS
] = 
Z_cuºít
 = 
	`°_gë_posôi⁄_mm
(Z_AXIS);

2371 i‡(
ígage_¥obe_f‹_óch_ªadög
)

2372 
	`ªåa˘_z_¥obe
();

2374  
n
=0;Ç<
n_ßm∂es
;Ç++) {

2376 
	`do_blockög_move_to
–
X_¥obe_loˇti⁄
, 
Y_¥obe_loˇti⁄
, 
Z_°¨t_loˇti⁄
);

2378 i‡–
n_Àgs
) {

2379 
ødius
=0.0, 
thëa
=0.0, 
x_swìp
, 
y_swìp
;

2380 
rŸ©i⁄Æ_dúe˘i⁄
, 
l
;

2382 
rŸ©i⁄Æ_dúe˘i⁄
 = (Ë
	`mûlis
() & 0x0001;

2383 
ødius
 = (Ë
	`mûlis
(Ë% (Ë(
X_MAX_LENGTH
/4);

2384 
thëa
 = (Ë((Ë
	`mûlis
() % () 360) / (360./(2*3.1415926));

2391  
l
=0;Ü<
n_Àgs
-1;Ü++) {

2392 i‡(
rŸ©i⁄Æ_dúe˘i⁄
==1)

2393 
thëa
 +(Ë((Ë
	`mûlis
() % () 20) / (360.0/(2*3.1415926));

2395 
thëa
 -(Ë((Ë
	`mûlis
() % () 20) / (360.0/(2*3.1415926));

2397 
ødius
 +(Ë–((Ë((Ë
	`mûlis
() % () 10)) - 5);

2398 i‡–
ødius
<0.0 )

2399 
ødius
 = -radius;

2401 
X_cuºít
 = 
X_¥obe_loˇti⁄
 + 
	`cos
(
thëa
Ë* 
ødius
;

2402 
Y_cuºít
 = 
Y_¥obe_loˇti⁄
 + 
	`sö
(
thëa
Ë* 
ødius
;

2404 i‡–
X_cuºít
<
X_MIN_POS
)

2405 
X_cuºít
 = 
X_MIN_POS
;

2406 i‡–
X_cuºít
>
X_MAX_POS
)

2407 
X_cuºít
 = 
X_MAX_POS
;

2409 i‡–
Y_cuºít
<
Y_MIN_POS
)

2410 
Y_cuºít
 = 
Y_MIN_POS
;

2411 i‡–
Y_cuºít
>
Y_MAX_POS
)

2412 
Y_cuºít
 = 
Y_MAX_POS
;

2414 i‡(
vîbo£_Àvñ
>3 ) {

2415 
	`SERIAL_ECHOPAIR
("x: ", 
X_cuºít
);

2416 
	`SERIAL_ECHOPAIR
("y: ", 
Y_cuºít
);

2417 
	`SERIAL_PROTOCOLLNPGM
("");

2420 
	`do_blockög_move_to
–
X_cuºít
, 
Y_cuºít
, 
Z_cuºít
 );

2422 
	`do_blockög_move_to
–
X_¥obe_loˇti⁄
, 
Y_¥obe_loˇti⁄
, 
Z_°¨t_loˇti⁄
);

2425 i‡(
ígage_¥obe_f‹_óch_ªadög
) {

2426 
	`ígage_z_¥obe
();

2427 
	`dñay
(1000);

2430 
	`£tup_f‹_íd°›_move
();

2431 
	`run_z_¥obe
();

2433 
ßm∂e_£t
[
n
] = 
cuºít_posôi⁄
[
Z_AXIS
];

2438 
sum
=0.0;

2439  
j
=0; j<=
n
; j++) {

2440 
sum
 = sum + 
ßm∂e_£t
[
j
];

2442 
món
 = 
sum
 / ((
n
+1));

2448 
sum
=0.0;

2449  
j
=0; j<=
n
; j++) {

2450 
sum
 = sum + (
ßm∂e_£t
[
j
]-
món
) * (sample_set[j]-mean);

2452 
sigma
 = 
	`sqπ
–
sum
 / ((
n
+1)) );

2454 i‡(
vîbo£_Àvñ
 > 1) {

2455 
	`SERIAL_PROTOCOL
(
n
+1);

2456 
	`SERIAL_PROTOCOL
(" of ");

2457 
	`SERIAL_PROTOCOL
(
n_ßm∂es
);

2458 
	`SERIAL_PROTOCOLPGM
(" z: ");

2459 
	`SERIAL_PROTOCOL_F
(
cuºít_posôi⁄
[
Z_AXIS
], 6);

2462 i‡(
vîbo£_Àvñ
 > 2) {

2463 
	`SERIAL_PROTOCOL
(" mean: ");

2464 
	`SERIAL_PROTOCOL_F
(
món
,6);

2466 
	`SERIAL_PROTOCOL
(" sigma: ");

2467 
	`SERIAL_PROTOCOL_F
(
sigma
,6);

2470 i‡(
vîbo£_Àvñ
 > 0)

2471 
	`SERIAL_PROTOCOLPGM
("\n");

2473 
	`∂™_buf„r_löe
–
X_¥obe_loˇti⁄
, 
Y_¥obe_loˇti⁄
, 
Z_°¨t_loˇti⁄
,

2474 
cuºít_posôi⁄
[
E_AXIS
], 
homög_„edøã
[
Z_AXIS
]/60, 
a˘ive_exåudî
);

2475 
	`°_synchr⁄ize
();

2477 i‡(
ígage_¥obe_f‹_óch_ªadög
) {

2478 
	`ªåa˘_z_¥obe
();

2479 
	`dñay
(1000);

2483 
	`ªåa˘_z_¥obe
();

2484 
	`dñay
(1000);

2486 
	`˛ón_up_a·î_íd°›_move
();

2490 i‡(
vîbo£_Àvñ
 > 0) {

2491 
	`SERIAL_PROTOCOLPGM
("Mean: ");

2492 
	`SERIAL_PROTOCOL_F
(
món
, 6);

2493 
	`SERIAL_PROTOCOLPGM
("\n");

2496 
	`SERIAL_PROTOCOLPGM
("Standard Deviation: ");

2497 
	`SERIAL_PROTOCOL_F
(
sigma
, 6);

2498 
	`SERIAL_PROTOCOLPGM
("\n\n");

2500 
Sigma_Exô
:

2507 if(
	`£tT¨gëedHŸíd
(104)){

2510 i‡(
	`code_£í
('S')Ë
	`£tT¨gëHŸíd
(
	`code_vÆue
(), 
tmp_exåudî
);

2511 #ifde‡
DUAL_X_CARRIAGE


2512 i‡(
duÆ_x_ˇºüge_mode
 =
DXC_DUPLICATION_MODE
 && 
tmp_exåudî
 == 0)

2513 
	`£tT¨gëHŸíd1
(
	`code_vÆue
(Ë=0.0 ? 0.0 : code_vÆue(Ë+ 
du∂iˇã_exåudî_ãmp_off£t
);

2515 
	`£tW©ch
();

2518 
	`kûl
();

2521 i‡(
	`code_£í
('S')Ë
	`£tT¨gëBed
(
	`code_vÆue
());

2524 if(
	`£tT¨gëedHŸíd
(105)){

2527 #i‡
	`deföed
(
TEMP_0_PIN
) && TEMP_0_PIN > -1

2528 
	`SERIAL_PROTOCOLPGM
("ok T:");

2529 
	`SERIAL_PROTOCOL_F
(
	`degHŸíd
(
tmp_exåudî
),1);

2530 
	`SERIAL_PROTOCOLPGM
(" /");

2531 
	`SERIAL_PROTOCOL_F
(
	`degT¨gëHŸíd
(
tmp_exåudî
),1);

2532 #i‡
	`deföed
(
TEMP_BED_PIN
) && TEMP_BED_PIN > -1

2533 
	`SERIAL_PROTOCOLPGM
(" B:");

2534 
	`SERIAL_PROTOCOL_F
(
	`degBed
(),1);

2535 
	`SERIAL_PROTOCOLPGM
(" /");

2536 
	`SERIAL_PROTOCOL_F
(
	`degT¨gëBed
(),1);

2538 
öt8_t
 
cur_exåudî
 = 0; cur_exåudî < 
EXTRUDERS
; ++cur_extruder) {

2539 
	`SERIAL_PROTOCOLPGM
(" T");

2540 
	`SERIAL_PROTOCOL
(
cur_exåudî
);

2541 
	`SERIAL_PROTOCOLPGM
(":");

2542 
	`SERIAL_PROTOCOL_F
(
	`degHŸíd
(
cur_exåudî
),1);

2543 
	`SERIAL_PROTOCOLPGM
(" /");

2544 
	`SERIAL_PROTOCOL_F
(
	`degT¨gëHŸíd
(
cur_exåudî
),1);

2547 
SERIAL_ERROR_START
;

2548 
	`SERIAL_ERRORLNPGM
(
MSG_ERR_NO_THERMISTORS
);

2551 
	`SERIAL_PROTOCOLPGM
(" @:");

2552 #ifde‡
EXTRUDER_WATTS


2553 
	`SERIAL_PROTOCOL
((
EXTRUDER_WATTS
 * 
	`gëHóãrPowî
(
tmp_exåudî
))/127);

2554 
	`SERIAL_PROTOCOLPGM
("W");

2556 
	`SERIAL_PROTOCOL
(
	`gëHóãrPowî
(
tmp_exåudî
));

2559 
	`SERIAL_PROTOCOLPGM
(" B@:");

2560 #ifde‡
BED_WATTS


2561 
	`SERIAL_PROTOCOL
((
BED_WATTS
 * 
	`gëHóãrPowî
(-1))/127);

2562 
	`SERIAL_PROTOCOLPGM
("W");

2564 
	`SERIAL_PROTOCOL
(
	`gëHóãrPowî
(-1));

2567 #ifde‡
SHOW_TEMP_ADC_VALUES


2568 #i‡
	`deföed
(
TEMP_BED_PIN
) && TEMP_BED_PIN > -1

2569 
	`SERIAL_PROTOCOLPGM
(" ADC B:");

2570 
	`SERIAL_PROTOCOL_F
(
	`degBed
(),1);

2571 
	`SERIAL_PROTOCOLPGM
("C->");

2572 
	`SERIAL_PROTOCOL_F
(
	`øwBedTemp
()/
OVERSAMPLENR
,0);

2574 
öt8_t
 
cur_exåudî
 = 0; cur_exåudî < 
EXTRUDERS
; ++cur_extruder) {

2575 
	`SERIAL_PROTOCOLPGM
(" T");

2576 
	`SERIAL_PROTOCOL
(
cur_exåudî
);

2577 
	`SERIAL_PROTOCOLPGM
(":");

2578 
	`SERIAL_PROTOCOL_F
(
	`degHŸíd
(
cur_exåudî
),1);

2579 
	`SERIAL_PROTOCOLPGM
("C->");

2580 
	`SERIAL_PROTOCOL_F
(
	`øwHŸídTemp
(
cur_exåudî
)/
OVERSAMPLENR
,0);

2584 
	`SERIAL_PROTOCOLLN
("");

2589 if(
	`£tT¨gëedHŸíd
(109)){

2592 
	`LCD_MESSAGEPGM
(
MSG_HEATING
);

2593 #ifde‡
AUTOTEMP


2594 
autŸemp_íabÀd
=
Ál£
;

2596 i‡(
	`code_£í
('S')) {

2597 
	`£tT¨gëHŸíd
(
	`code_vÆue
(), 
tmp_exåudî
);

2598 #ifde‡
DUAL_X_CARRIAGE


2599 i‡(
duÆ_x_ˇºüge_mode
 =
DXC_DUPLICATION_MODE
 && 
tmp_exåudî
 == 0)

2600 
	`£tT¨gëHŸíd1
(
	`code_vÆue
(Ë=0.0 ? 0.0 : code_vÆue(Ë+ 
du∂iˇã_exåudî_ãmp_off£t
);

2602 
CoﬁdownNoWaô
 = 
åue
;

2603 } i‡(
	`code_£í
('R')) {

2604 
	`£tT¨gëHŸíd
(
	`code_vÆue
(), 
tmp_exåudî
);

2605 #ifde‡
DUAL_X_CARRIAGE


2606 i‡(
duÆ_x_ˇºüge_mode
 =
DXC_DUPLICATION_MODE
 && 
tmp_exåudî
 == 0)

2607 
	`£tT¨gëHŸíd1
(
	`code_vÆue
(Ë=0.0 ? 0.0 : code_vÆue(Ë+ 
du∂iˇã_exåudî_ãmp_off£t
);

2609 
CoﬁdownNoWaô
 = 
Ál£
;

2611 #ifde‡
AUTOTEMP


2612 i‡(
	`code_£í
('S')Ë
autŸemp_mö
=
	`code_vÆue
();

2613 i‡(
	`code_£í
('B')Ë
autŸemp_max
=
	`code_vÆue
();

2614 i‡(
	`code_£í
('F'))

2616 
autŸemp_Á˘‹
=
	`code_vÆue
();

2617 
autŸemp_íabÀd
=
åue
;

2621 
	`£tW©ch
();

2622 
codíum
 = 
	`mûlis
();

2625 
èrgë_dúe˘i⁄
 = 
	`isHótögHŸíd
(
tmp_exåudî
);

2627 
ˇn˚l_hótup
 = 
Ál£
;

2629 #ifde‡
TEMP_RESIDENCY_TIME


2630 
ªsidícySèπ
;

2631 
ªsidícySèπ
 = -1;

2634 (!
ˇn˚l_hótup
)&&((
ªsidícySèπ
 == -1) ||

2635 (
ªsidícySèπ
 >0 && (((Ë(
	`mûlis
(Ë-ÑesidícySèπ)Ë< (
TEMP_RESIDENCY_TIME
 * 1000UL)))) ) {

2637  
èrgë_dúe˘i⁄
 ? (
	`isHótögHŸíd
(
tmp_exåudî
)Ë: (
	`isCoﬁögHŸíd
—mp_exåudî)&&(
CoﬁdownNoWaô
==
Ál£
)) ) {

2639 if–(
	`mûlis
(Ë- 
codíum
) > 1000UL )

2641 
	`SERIAL_PROTOCOLPGM
("T:");

2642 
	`SERIAL_PROTOCOL_F
(
	`degHŸíd
(
tmp_exåudî
),1);

2643 
	`SERIAL_PROTOCOLPGM
(" E:");

2644 
	`SERIAL_PROTOCOL
(()
tmp_exåudî
);

2645 #ifde‡
TEMP_RESIDENCY_TIME


2646 
	`SERIAL_PROTOCOLPGM
(" W:");

2647 if(
ªsidícySèπ
 > -1)

2649 
codíum
 = ((
TEMP_RESIDENCY_TIME
 * 1000ULË- (
	`mûlis
(Ë- 
ªsidícySèπ
)) / 1000UL;

2650 
	`SERIAL_PROTOCOLLN
–
codíum
 );

2654 
	`SERIAL_PROTOCOLLN
( "?" );

2657 
	`SERIAL_PROTOCOLLN
("");

2659 
codíum
 = 
	`mûlis
();

2661 
	`m™age_hóãr
();

2662 
	`m™age_öa˘ivôy
();

2663 
	`lcd_upd©e
();

2664 #ifde‡
TEMP_RESIDENCY_TIME


2667 i‡((
ªsidícySèπ
 =-1 && 
èrgë_dúe˘i⁄
 && (
	`degHŸíd
(
tmp_exåudî
Ë>(
	`degT¨gëHŸíd
—mp_exåudî)-
TEMP_WINDOW
))) ||

2668 (
ªsidícySèπ
 =-1 && !
èrgë_dúe˘i⁄
 && (
	`degHŸíd
(
tmp_exåudî
Ë<(
	`degT¨gëHŸíd
—mp_exåudî)+
TEMP_WINDOW
))) ||

2669 (
ªsidícySèπ
 > -1 && 
	`œbs
(
	`degHŸíd
(
tmp_exåudî
Ë- 
	`degT¨gëHŸíd
—mp_exåudî)Ë> 
TEMP_HYSTERESIS
) )

2671 
ªsidícySèπ
 = 
	`mûlis
();

2675 
	`LCD_MESSAGEPGM
(
MSG_HEATING_COMPLETE
);

2676 
°¨âime
=
	`mûlis
();

2677 
¥evious_mûlis_cmd
 = 
	`mûlis
();

2681 #i‡
	`deföed
(
TEMP_BED_PIN
) && TEMP_BED_PIN > -1

2682 
	`LCD_MESSAGEPGM
(
MSG_BED_HEATING
);

2683 i‡(
	`code_£í
('S')) {

2684 
	`£tT¨gëBed
(
	`code_vÆue
());

2685 
CoﬁdownNoWaô
 = 
åue
;

2686 } i‡(
	`code_£í
('R')) {

2687 
	`£tT¨gëBed
(
	`code_vÆue
());

2688 
CoﬁdownNoWaô
 = 
Ál£
;

2690 
codíum
 = 
	`mûlis
();

2692 
ˇn˚l_hótup
 = 
Ál£
;

2693 
èrgë_dúe˘i⁄
 = 
	`isHótögBed
();

2695  (
èrgë_dúe˘i⁄
)&&(!
ˇn˚l_hótup
Ë? (
	`isHótögBed
()Ë: (
	`isCoﬁögBed
()&&(
CoﬁdownNoWaô
==
Ál£
)) )

2697 if(–
	`mûlis
(Ë- 
codíum
) > 1000 )

2699 
â
=
	`degHŸíd
(
a˘ive_exåudî
);

2700 
	`SERIAL_PROTOCOLPGM
("T:");

2701 
	`SERIAL_PROTOCOL
(
â
);

2702 
	`SERIAL_PROTOCOLPGM
(" E:");

2703 
	`SERIAL_PROTOCOL
(()
a˘ive_exåudî
);

2704 
	`SERIAL_PROTOCOLPGM
(" B:");

2705 
	`SERIAL_PROTOCOL_F
(
	`degBed
(),1);

2706 
	`SERIAL_PROTOCOLLN
("");

2707 
codíum
 = 
	`mûlis
();

2709 
	`m™age_hóãr
();

2710 
	`m™age_öa˘ivôy
();

2711 
	`lcd_upd©e
();

2713 
	`LCD_MESSAGEPGM
(
MSG_BED_DONE
);

2714 
¥evious_mûlis_cmd
 = 
	`mûlis
();

2718 #i‡
	`deföed
(
FAN_PIN
) && FAN_PIN > -1

2720 i‡(
	`code_£í
('S')){

2721 
ÁnS≥ed
=
	`c⁄°øö
(
	`code_vÆue
(),0,255);

2724 
ÁnS≥ed
=255;

2728 
ÁnS≥ed
 = 0;

2731 #ifde‡
BARICUDA


2733 #i‡
	`deföed
(
HEATER_1_PIN
) && HEATER_1_PIN > -1

2735 i‡(
	`code_£í
('S')){

2736 
VÆvePªssuª
=
	`c⁄°øö
(
	`code_vÆue
(),0,255);

2739 
VÆvePªssuª
=255;

2743 
VÆvePªssuª
 = 0;

2748 #i‡
	`deföed
(
HEATER_2_PIN
) && HEATER_2_PIN > -1

2750 i‡(
	`code_£í
('S')){

2751 
EtoPPªssuª
=
	`c⁄°øö
(
	`code_vÆue
(),0,255);

2754 
EtoPPªssuª
=255;

2758 
EtoPPªssuª
 = 0;

2763 #i‡
	`deföed
(
PS_ON_PIN
) && PS_ON_PIN > -1

2765 
	`SET_OUTPUT
(
PS_ON_PIN
);

2766 
	`WRITE
(
PS_ON_PIN
, 
PS_ON_AWAKE
);

2771 #i‡
deföed
 
SUICIDE_PIN
 && SUICIDE_PIN > -1

2772 
	`SET_OUTPUT
(
SUICIDE_PIN
);

2773 
	`WRITE
(
SUICIDE_PIN
, 
HIGH
);

2776 #ifde‡
ULTIPANEL


2777 
powîsuµly
 = 
åue
;

2778 
	`LCD_MESSAGEPGM
(
WELCOME_MSG
);

2779 
	`lcd_upd©e
();

2785 
	`dißbÀ_hóãr
();

2786 
	`°_synchr⁄ize
();

2787 
	`dißbÀ_e0
();

2788 
	`dißbÀ_e1
();

2789 
	`dißbÀ_e2
();

2790 
	`föishAndDißbÀSãµîs
();

2791 
ÁnS≥ed
 = 0;

2792 
	`dñay
(1000);

2793 #i‡
	`deföed
(
SUICIDE_PIN
) && SUICIDE_PIN > -1

2794 
	`°_synchr⁄ize
();

2795 
	`suicide
();

2796 #ñi‡
	`deföed
(
PS_ON_PIN
) && PS_ON_PIN > -1

2797 
	`SET_OUTPUT
(
PS_ON_PIN
);

2798 
	`WRITE
(
PS_ON_PIN
, 
PS_ON_ASLEEP
);

2800 #ifde‡
ULTIPANEL


2801 
powîsuµly
 = 
Ál£
;

2802 
	`LCD_MESSAGEPGM
(
MACHINE_NAME
" "
MSG_OFF
".");

2803 
	`lcd_upd©e
();

2808 
axis_ªœtive_modes
[3] = 
Ál£
;

2811 
axis_ªœtive_modes
[3] = 
åue
;

2815 if(
	`code_£í
('S')){

2816 
°ï≥r_öa˘ive_time
 = 
	`code_vÆue
() * 1000;

2820 
boﬁ
 
Æl_axis
 = !((
	`code_£í
(
axis_codes
[
X_AXIS
])Ë|| (code_£í◊xis_codes[
Y_AXIS
])Ë|| (code_£í◊xis_codes[
Z_AXIS
]))|| (code_£í◊xis_codes[
E_AXIS
])));

2821 if(
Æl_axis
)

2823 
	`°_synchr⁄ize
();

2824 
	`dißbÀ_e0
();

2825 
	`dißbÀ_e1
();

2826 
	`dißbÀ_e2
();

2827 
	`föishAndDißbÀSãµîs
();

2831 
	`°_synchr⁄ize
();

2832 if(
	`code_£í
('X')Ë
	`dißbÀ_x
();

2833 if(
	`code_£í
('Y')Ë
	`dißbÀ_y
();

2834 if(
	`code_£í
('Z')Ë
	`dißbÀ_z
();

2835 #i‡((
E0_ENABLE_PIN
 !
X_ENABLE_PIN
Ë&& (
E1_ENABLE_PIN
 !
Y_ENABLE_PIN
))

2836 if(
	`code_£í
('E')) {

2837 
	`dißbÀ_e0
();

2838 
	`dißbÀ_e1
();

2839 
	`dißbÀ_e2
();

2846 if(
	`code_£í
('S')) {

2847 
max_öa˘ive_time
 = 
	`code_vÆue
() * 1000;

2851 
öt8_t
 
i
=0; i < 
NUM_AXIS
; i++)

2853 if(
	`code_£í
(
axis_codes
[
i
]))

2855 if(
i
 == 3) {

2856 
vÆue
 = 
	`code_vÆue
();

2857 if(
vÆue
 < 20.0) {

2858 
Á˘‹
 = 
axis_°ïs_≥r_unô
[
i
] / 
vÆue
;

2859 
max_e_jîk
 *
Á˘‹
;

2860 
max_„edøã
[
i
] *
Á˘‹
;

2861 
axis_°ïs_≥r_sqr_£c⁄d
[
i
] *
Á˘‹
;

2863 
axis_°ïs_≥r_unô
[
i
] = 
vÆue
;

2866 
axis_°ïs_≥r_unô
[
i
] = 
	`code_vÆue
();

2872 
	`SERIAL_PROTOCOLPGM
(
MSG_M115_REPORT
);

2875 
°¨pos
 = (
	`°rchr
(
°rchr_poöãr
 + 5,'*'));

2876 if(
°¨pos
!=
NULL
)

2877 *(
°¨pos
)='\0';

2878 
	`lcd_£t°©us
(
°rchr_poöãr
 + 5);

2881 
	`SERIAL_PROTOCOLPGM
("X:");

2882 
	`SERIAL_PROTOCOL
(
cuºít_posôi⁄
[
X_AXIS
]);

2883 
	`SERIAL_PROTOCOLPGM
(" Y:");

2884 
	`SERIAL_PROTOCOL
(
cuºít_posôi⁄
[
Y_AXIS
]);

2885 
	`SERIAL_PROTOCOLPGM
(" Z:");

2886 
	`SERIAL_PROTOCOL
(
cuºít_posôi⁄
[
Z_AXIS
]);

2887 
	`SERIAL_PROTOCOLPGM
(" E:");

2888 
	`SERIAL_PROTOCOL
(
cuºít_posôi⁄
[
E_AXIS
]);

2890 
	`SERIAL_PROTOCOLPGM
(
MSG_COUNT_X
);

2891 
	`SERIAL_PROTOCOL
((
	`°_gë_posôi⁄
(
X_AXIS
))/
axis_°ïs_≥r_unô
[X_AXIS]);

2892 
	`SERIAL_PROTOCOLPGM
(" Y:");

2893 
	`SERIAL_PROTOCOL
((
	`°_gë_posôi⁄
(
Y_AXIS
))/
axis_°ïs_≥r_unô
[Y_AXIS]);

2894 
	`SERIAL_PROTOCOLPGM
(" Z:");

2895 
	`SERIAL_PROTOCOL
((
	`°_gë_posôi⁄
(
Z_AXIS
))/
axis_°ïs_≥r_unô
[Z_AXIS]);

2897 
	`SERIAL_PROTOCOLLN
("");

2898 #ifde‡
SCARA


2899 
	`SERIAL_PROTOCOLPGM
("SCARA Theta:");

2900 
	`SERIAL_PROTOCOL
(
dñè
[
X_AXIS
]);

2901 
	`SERIAL_PROTOCOLPGM
(" Psi+Theta:");

2902 
	`SERIAL_PROTOCOL
(
dñè
[
Y_AXIS
]);

2903 
	`SERIAL_PROTOCOLLN
("");

2905 
	`SERIAL_PROTOCOLPGM
("SCARA Cal - Theta:");

2906 
	`SERIAL_PROTOCOL
(
dñè
[
X_AXIS
]+
add_homög
[X_AXIS]);

2907 
	`SERIAL_PROTOCOLPGM
(" Psi+Theta (90):");

2908 
	`SERIAL_PROTOCOL
(
dñè
[
Y_AXIS
]-dñè[
X_AXIS
]-90+
add_homög
[Y_AXIS]);

2909 
	`SERIAL_PROTOCOLLN
("");

2911 
	`SERIAL_PROTOCOLPGM
("SCARA step Cal - Theta:");

2912 
	`SERIAL_PROTOCOL
(
dñè
[
X_AXIS
]/90*
axis_°ïs_≥r_unô
[X_AXIS]);

2913 
	`SERIAL_PROTOCOLPGM
(" Psi+Theta:");

2914 
	`SERIAL_PROTOCOL
((
dñè
[
Y_AXIS
]-dñè[
X_AXIS
])/90*
axis_°ïs_≥r_unô
[Y_AXIS]);

2915 
	`SERIAL_PROTOCOLLN
("");

2916 
	`SERIAL_PROTOCOLLN
("");

2920 
	`íabÀ_íd°›s
(
Ál£
) ;

2923 
	`íabÀ_íd°›s
(
åue
) ;

2926 
	`SERIAL_PROTOCOLLN
(
MSG_M119_REPORT
);

2927 #i‡
	`deföed
(
X_MIN_PIN
) && X_MIN_PIN > -1

2928 
	`SERIAL_PROTOCOLPGM
(
MSG_X_MIN
);

2929 
	`SERIAL_PROTOCOLLN
(((
	`READ
(
X_MIN_PIN
)^
X_MIN_ENDSTOP_INVERTING
)?
MSG_ENDSTOP_HIT
:
MSG_ENDSTOP_OPEN
));

2931 #i‡
	`deföed
(
X_MAX_PIN
) && X_MAX_PIN > -1

2932 
	`SERIAL_PROTOCOLPGM
(
MSG_X_MAX
);

2933 
	`SERIAL_PROTOCOLLN
(((
	`READ
(
X_MAX_PIN
)^
X_MAX_ENDSTOP_INVERTING
)?
MSG_ENDSTOP_HIT
:
MSG_ENDSTOP_OPEN
));

2935 #i‡
	`deföed
(
Y_MIN_PIN
) && Y_MIN_PIN > -1

2936 
	`SERIAL_PROTOCOLPGM
(
MSG_Y_MIN
);

2937 
	`SERIAL_PROTOCOLLN
(((
	`READ
(
Y_MIN_PIN
)^
Y_MIN_ENDSTOP_INVERTING
)?
MSG_ENDSTOP_HIT
:
MSG_ENDSTOP_OPEN
));

2939 #i‡
	`deföed
(
Y_MAX_PIN
) && Y_MAX_PIN > -1

2940 
	`SERIAL_PROTOCOLPGM
(
MSG_Y_MAX
);

2941 
	`SERIAL_PROTOCOLLN
(((
	`READ
(
Y_MAX_PIN
)^
Y_MAX_ENDSTOP_INVERTING
)?
MSG_ENDSTOP_HIT
:
MSG_ENDSTOP_OPEN
));

2943 #i‡
	`deföed
(
Z_MIN_PIN
) && Z_MIN_PIN > -1

2944 
	`SERIAL_PROTOCOLPGM
(
MSG_Z_MIN
);

2945 
	`SERIAL_PROTOCOLLN
(((
	`READ
(
Z_MIN_PIN
)^
Z_MIN_ENDSTOP_INVERTING
)?
MSG_ENDSTOP_HIT
:
MSG_ENDSTOP_OPEN
));

2947 #i‡
	`deföed
(
Z_MAX_PIN
) && Z_MAX_PIN > -1

2948 
	`SERIAL_PROTOCOLPGM
(
MSG_Z_MAX
);

2949 
	`SERIAL_PROTOCOLLN
(((
	`READ
(
Z_MAX_PIN
)^
Z_MAX_ENDSTOP_INVERTING
)?
MSG_ENDSTOP_HIT
:
MSG_ENDSTOP_OPEN
));

2953 #ifde‡
BLINKM


2956 
byã
 
ªd
;

2957 
byã
 
g∫
;

2958 
byã
 
blu
;

2960 if(
	`code_£í
('R')Ë
ªd
 = 
	`code_vÆue
();

2961 if(
	`code_£í
('U')Ë
g∫
 = 
	`code_vÆue
();

2962 if(
	`code_£í
('B')Ë
blu
 = 
	`code_vÆue
();

2964 
	`SídCﬁ‹s
(
ªd
,
g∫
,
blu
);

2970 
¨ó
 = .0;

2971 
ødius
 = .0;

2972 if(
	`code_£í
('D')) {

2973 
ødius
 = ()
	`code_vÆue
() * .5;

2974 if(
ødius
 == 0) {

2975 
¨ó
 = 1;

2977 
¨ó
 = 
M_PI
 * 
	`pow
(
ødius
, 2);

2985 
tmp_exåudî
 = 
a˘ive_exåudî
;

2986 if(
	`code_£í
('T')) {

2987 
tmp_exåudî
 = 
	`code_vÆue
();

2988 if(
tmp_exåudî
 >
EXTRUDERS
) {

2989 
SERIAL_ECHO_START
;

2990 
	`SERIAL_ECHO
(
MSG_M200_INVALID_EXTRUDER
);

2994 
vﬁumëric_mu…ùlõr
[
tmp_exåudî
] = 1 / 
¨ó
;

2998 
öt8_t
 
i
=0; i < 
NUM_AXIS
; i++)

3000 if(
	`code_£í
(
axis_codes
[
i
]))

3002 
max_ac˚Àøti⁄_unôs_≥r_sq_£c⁄d
[
i
] = 
	`code_vÆue
();

3006 
	`ª£t_ac˚Àøti⁄_øãs
();

3010 
öt8_t
 
i
=0; i < 
NUM_AXIS
; i++) {

3011 if(
	`code_£í
(
axis_codes
[
i
])Ë
axis_åavñ_°ïs_≥r_sqr_£c⁄d
[i] = 
	`code_vÆue
(Ë* 
axis_°ïs_≥r_unô
[i];

3016 
öt8_t
 
i
=0; i < 
NUM_AXIS
; i++) {

3017 if(
	`code_£í
(
axis_codes
[
i
])Ë
max_„edøã
[i] = 
	`code_vÆue
();

3022 if(
	`code_£í
('S')Ë
ac˚Àøti⁄
 = 
	`code_vÆue
() ;

3023 if(
	`code_£í
('T')Ë
ªåa˘_ac˚Àøti⁄
 = 
	`code_vÆue
() ;

3028 if(
	`code_£í
('S')Ë
möimum„edøã
 = 
	`code_vÆue
();

3029 if(
	`code_£í
('T')Ë
möåavñ„edøã
 = 
	`code_vÆue
();

3030 if(
	`code_£í
('B')Ë
mö£gmíâime
 = 
	`code_vÆue
() ;

3031 if(
	`code_£í
('X')Ë
max_xy_jîk
 = 
	`code_vÆue
() ;

3032 if(
	`code_£í
('Z')Ë
max_z_jîk
 = 
	`code_vÆue
() ;

3033 if(
	`code_£í
('E')Ë
max_e_jîk
 = 
	`code_vÆue
() ;

3037 
öt8_t
 
i
=0; i < 3; i++)

3039 if(
	`code_£í
(
axis_codes
[
i
])Ë
add_homög
[i] = 
	`code_vÆue
();

3041 #ifde‡
SCARA


3042 if(
	`code_£í
('T'))

3044 
add_homög
[
X_AXIS
] = 
	`code_vÆue
() ;

3046 if(
	`code_£í
('P'))

3048 
add_homög
[
Y_AXIS
] = 
	`code_vÆue
() ;

3052 #ifde‡
DELTA


3054 if(
	`code_£í
('L')) {

3055 
dñè_düg⁄Æ_rod

	`code_vÆue
();

3057 if(
	`code_£í
('R')) {

3058 
dñè_ødius

	`code_vÆue
();

3060 if(
	`code_£í
('S')) {

3061 
dñè_£gmíts_≥r_£c⁄d

	`code_vÆue
();

3064 
	`ªˇlc_dñè_£âögs
(
dñè_ødius
, 
dñè_düg⁄Æ_rod
);

3067 
öt8_t
 
i
=0; i < 3; i++)

3069 if(
	`code_£í
(
axis_codes
[
i
])Ë
íd°›_adj
[i] = 
	`code_vÆue
();

3073 #ifde‡
FWRETRACT


3076 if(
	`code_£í
('S'))

3078 
ªåa˘_Àngth
 = 
	`code_vÆue
() ;

3080 if(
	`code_£í
('F'))

3082 
ªåa˘_„edøã
 = 
	`code_vÆue
()/60 ;

3084 if(
	`code_£í
('Z'))

3086 
ªåa˘_zli·
 = 
	`code_vÆue
() ;

3091 if(
	`code_£í
('S'))

3093 
ªåa˘_ªcovî_Àngth
 = 
	`code_vÆue
() ;

3095 if(
	`code_£í
('F'))

3097 
ªåa˘_ªcovî_„edøã
 = 
	`code_vÆue
()/60 ;

3102 if(
	`code_£í
('S'))

3104 
t

	`code_vÆue
() ;

3105 
t
)

3109 
aut‹ëø˘_íabÀd
=
Ál£
;

3110 
ªåa˘ed
[0]=
Ál£
;

3111 #i‡
EXTRUDERS
 > 1

3112 
ªåa˘ed
[1]=
Ál£
;

3114 #i‡
EXTRUDERS
 > 2

3115 
ªåa˘ed
[2]=
Ál£
;

3120 
aut‹ëø˘_íabÀd
=
åue
;

3121 
ªåa˘ed
[0]=
Ál£
;

3122 #i‡
EXTRUDERS
 > 1

3123 
ªåa˘ed
[1]=
Ál£
;

3125 #i‡
EXTRUDERS
 > 2

3126 
ªåa˘ed
[2]=
Ál£
;

3130 
SERIAL_ECHO_START
;

3131 
	`SERIAL_ECHOPGM
(
MSG_UNKNOWN_COMMAND
);

3132 
	`SERIAL_ECHO
(
cmdbuf„r
[
bufödr
]);

3133 
	`SERIAL_ECHOLNPGM
("\"");

3139 #i‡
EXTRUDERS
 > 1

3142 if(
	`£tT¨gëedHŸíd
(218)){

3145 if(
	`code_£í
('X'))

3147 
exåudî_off£t
[
X_AXIS
][
tmp_exåudî
] = 
	`code_vÆue
();

3149 if(
	`code_£í
('Y'))

3151 
exåudî_off£t
[
Y_AXIS
][
tmp_exåudî
] = 
	`code_vÆue
();

3153 #ifde‡
DUAL_X_CARRIAGE


3154 if(
	`code_£í
('Z'))

3156 
exåudî_off£t
[
Z_AXIS
][
tmp_exåudî
] = 
	`code_vÆue
();

3159 
SERIAL_ECHO_START
;

3160 
	`SERIAL_ECHOPGM
(
MSG_HOTEND_OFFSET
);

3161 
tmp_exåudî
 = 0;Åmp_exåudî < 
EXTRUDERS
;Åmp_extruder++)

3163 
	`SERIAL_ECHO
(" ");

3164 
	`SERIAL_ECHO
(
exåudî_off£t
[
X_AXIS
][
tmp_exåudî
]);

3165 
	`SERIAL_ECHO
(",");

3166 
	`SERIAL_ECHO
(
exåudî_off£t
[
Y_AXIS
][
tmp_exåudî
]);

3167 #ifde‡
DUAL_X_CARRIAGE


3168 
	`SERIAL_ECHO
(",");

3169 
	`SERIAL_ECHO
(
exåudî_off£t
[
Z_AXIS
][
tmp_exåudî
]);

3172 
	`SERIAL_ECHOLN
("");

3177 if(
	`code_£í
('S'))

3179 
„edmu…ùly
 = 
	`code_vÆue
() ;

3185 if(
	`code_£í
('S'))

3187 
tmp_code
 = 
	`code_vÆue
();

3188 i‡(
	`code_£í
('T'))

3190 if(
	`£tT¨gëedHŸíd
(221)){

3193 
exåudî_mu…ùly
[
tmp_exåudî
] = 
tmp_code
;

3197 
exåudemu…ùly
 = 
tmp_code
 ;

3205 if(
	`code_£í
('P')){

3206 
pö_numbî
 = 
	`code_vÆue
();

3207 
pö_°©e
 = -1;

3209 if(
	`code_£í
('S')Ë
pö_°©e
 = 
	`code_vÆue
();

3211 if(
pö_°©e
 >= -1 &&Öin_state <= 1){

3213 
öt8_t
 
i
 = 0; i < (öt8_t)((
£nsôive_pös
)/()); i++)

3215 i‡(
£nsôive_pös
[
i
] =
pö_numbî
)

3217 
pö_numbî
 = -1;

3222 i‡(
pö_numbî
 > -1)

3224 
èrgë
 = 
LOW
;

3226 
	`°_synchr⁄ize
();

3228 
	`pöMode
(
pö_numbî
, 
INPUT
);

3230 
pö_°©e
){

3232 
èrgë
 = 
HIGH
;

3236 
èrgë
 = 
LOW
;

3240 
èrgë
 = !
	`digôÆRód
(
pö_numbî
);

3244 
	`digôÆRód
(
pö_numbî
Ë!
èrgë
){

3245 
	`m™age_hóãr
();

3246 
	`m™age_öa˘ivôy
();

3247 
	`lcd_upd©e
();

3255 #i‡
NUM_SERVOS
 > 0

3258 
£rvo_ödex
 = -1;

3259 
£rvo_posôi⁄
 = 0;

3260 i‡(
	`code_£í
('P'))

3261 
£rvo_ödex
 = 
	`code_vÆue
();

3262 i‡(
	`code_£í
('S')) {

3263 
£rvo_posôi⁄
 = 
	`code_vÆue
();

3264 i‡((
£rvo_ödex
 >0Ë&& (£rvo_ödex < 
NUM_SERVOS
)) {

3265 #i‡
	`deföed
 (
ENABLE_AUTO_BED_LEVELING
Ë&& (
PROBE_SERVO_DEACTIVATION_DELAY
 > 0)

3266 
£rvos
[
£rvo_ödex
].
	`©èch
(0);

3268 
£rvos
[
£rvo_ödex
].
	`wrôe
(
£rvo_posôi⁄
);

3269 #i‡
	`deföed
 (
ENABLE_AUTO_BED_LEVELING
Ë&& (
PROBE_SERVO_DEACTIVATION_DELAY
 > 0)

3270 
	`dñay
(
PROBE_SERVO_DEACTIVATION_DELAY
);

3271 
£rvos
[
£rvo_ödex
].
	`dëach
();

3275 
SERIAL_ECHO_START
;

3276 
	`SERIAL_ECHO
("Servo ");

3277 
	`SERIAL_ECHO
(
£rvo_ödex
);

3278 
	`SERIAL_ECHOLN
(" out ofÑange");

3281 i‡(
£rvo_ödex
 >= 0) {

3282 
	`SERIAL_PROTOCOL
(
MSG_OK
);

3283 
	`SERIAL_PROTOCOL
(" Servo ");

3284 
	`SERIAL_PROTOCOL
(
£rvo_ödex
);

3285 
	`SERIAL_PROTOCOL
(": ");

3286 
	`SERIAL_PROTOCOL
(
£rvos
[
£rvo_ödex
].
	`ªad
());

3287 
	`SERIAL_PROTOCOLLN
("");

3293 #i‡(
LARGE_FLASH
 =
åue
 && ( 
BEEPER
 > 0 || 
	`deföed
(
ULTRALCD
Ë|| deföed(
LCD_USE_I2C_BUZZER
)))

3296 
bìpS
 = 
	`code_£í
('S'Ë? 
	`code_vÆue
() : 110;

3297 
bìpP
 = 
	`code_£í
('P'Ë? 
	`code_vÆue
() : 1000;

3298 i‡(
bìpS
 > 0)

3300 #i‡
BEEPER
 > 0

3301 
	`t⁄e
(
BEEPER
, 
bìpS
);

3302 
	`dñay
(
bìpP
);

3303 
	`noT⁄e
(
BEEPER
);

3304 #ñi‡
	`deföed
(
ULTRALCD
)

3305 
	`lcd_buzz
(
bìpS
, 
bìpP
);

3306 #ñi‡
	`deföed
(
LCD_USE_I2C_BUZZER
)

3307 
	`lcd_buzz
(
bìpP
, 
bìpS
);

3312 
	`dñay
(
bìpP
);

3318 #ifde‡
PIDTEMP


3321 if(
	`code_£í
('P')Ë
Kp
 = 
	`code_vÆue
();

3322 if(
	`code_£í
('I')Ë
Ki
 = 
	`sˇÀPID_i
(
	`code_vÆue
());

3323 if(
	`code_£í
('D')Ë
Kd
 = 
	`sˇÀPID_d
(
	`code_vÆue
());

3325 #ifde‡
PID_ADD_EXTRUSION_RATE


3326 if(
	`code_£í
('C')Ë
Kc
 = 
	`code_vÆue
();

3329 
	`upd©ePID
();

3330 
	`SERIAL_PROTOCOL
(
MSG_OK
);

3331 
	`SERIAL_PROTOCOL
("Ö:");

3332 
	`SERIAL_PROTOCOL
(
Kp
);

3333 
	`SERIAL_PROTOCOL
(" i:");

3334 
	`SERIAL_PROTOCOL
(
	`unsˇÀPID_i
(
Ki
));

3335 
	`SERIAL_PROTOCOL
(" d:");

3336 
	`SERIAL_PROTOCOL
(
	`unsˇÀPID_d
(
Kd
));

3337 #ifde‡
PID_ADD_EXTRUSION_RATE


3338 
	`SERIAL_PROTOCOL
(" c:");

3340 
	`SERIAL_PROTOCOL
(
Kc
);

3342 
	`SERIAL_PROTOCOLLN
("");

3346 #ifde‡
PIDTEMPBED


3349 if(
	`code_£í
('P')Ë
bedKp
 = 
	`code_vÆue
();

3350 if(
	`code_£í
('I')Ë
bedKi
 = 
	`sˇÀPID_i
(
	`code_vÆue
());

3351 if(
	`code_£í
('D')Ë
bedKd
 = 
	`sˇÀPID_d
(
	`code_vÆue
());

3353 
	`upd©ePID
();

3354 
	`SERIAL_PROTOCOL
(
MSG_OK
);

3355 
	`SERIAL_PROTOCOL
("Ö:");

3356 
	`SERIAL_PROTOCOL
(
bedKp
);

3357 
	`SERIAL_PROTOCOL
(" i:");

3358 
	`SERIAL_PROTOCOL
(
	`unsˇÀPID_i
(
bedKi
));

3359 
	`SERIAL_PROTOCOL
(" d:");

3360 
	`SERIAL_PROTOCOL
(
	`unsˇÀPID_d
(
bedKd
));

3361 
	`SERIAL_PROTOCOLLN
("");

3367 #ifde‡
CHDK


3369 
	`SET_OUTPUT
(
CHDK
);

3370 
	`WRITE
(
CHDK
, 
HIGH
);

3371 
chdkHigh
 = 
	`mûlis
();

3372 
chdkA˘ive
 = 
åue
;

3376 #i‡
	`deföed
(
PHOTOGRAPH_PIN
) && PHOTOGRAPH_PIN > -1

3377 c⁄° 
uöt8_t
 
NUM_PULSES
=16;

3378 c⁄° 
PULSE_LENGTH
=0.01524;

3379 
i
=0; i < 
NUM_PULSES
; i++) {

3380 
	`WRITE
(
PHOTOGRAPH_PIN
, 
HIGH
);

3381 
	`_dñay_ms
(
PULSE_LENGTH
);

3382 
	`WRITE
(
PHOTOGRAPH_PIN
, 
LOW
);

3383 
	`_dñay_ms
(
PULSE_LENGTH
);

3385 
	`dñay
(7.33);

3386 
i
=0; i < 
NUM_PULSES
; i++) {

3387 
	`WRITE
(
PHOTOGRAPH_PIN
, 
HIGH
);

3388 
	`_dñay_ms
(
PULSE_LENGTH
);

3389 
	`WRITE
(
PHOTOGRAPH_PIN
, 
LOW
);

3390 
	`_dñay_ms
(
PULSE_LENGTH
);

3396 #ifde‡
DOGLCD


3399 i‡(
	`code_£í
('C')) {

3400 
	`lcd_£tc⁄åa°
–(()
	`code_vÆue
())&63 );

3402 
	`SERIAL_PROTOCOLPGM
("lcd contrast value: ");

3403 
	`SERIAL_PROTOCOL
(
lcd_c⁄åa°
);

3404 
	`SERIAL_PROTOCOLLN
("");

3408 #ifde‡
PREVENT_DANGEROUS_EXTRUDE


3411 
ãmp
 = .0;

3412 i‡(
	`code_£í
('S')Ë
ãmp
=
	`code_vÆue
();

3413 
	`£t_exåude_mö_ãmp
(
ãmp
);

3419 
ãmp
 = 150.0;

3420 
e
=0;

3421 
c
=5;

3422 i‡(
	`code_£í
('E')Ë
e
=
	`code_vÆue
();

3423 i‡(
e
<0)

3424 
ãmp
=70;

3425 i‡(
	`code_£í
('S')Ë
ãmp
=
	`code_vÆue
();

3426 i‡(
	`code_£í
('C')Ë
c
=
	`code_vÆue
();

3427 
	`PID_autŸu√
(
ãmp
, 
e
, 
c
);

3430 #ifde‡
SCARA


3432 
	`SERIAL_ECHOLN
(" Cal: Theta 0 ");

3435 if(
St›≥d
 =
Ál£
) {

3437 
dñè
[
X_AXIS
] = 0;

3438 
dñè
[
Y_AXIS
] = 120;

3439 
	`ˇlcuœã_SCARA_f‹w¨d_Tønsf‹m
(
dñè
);

3440 
de°ö©i⁄
[
X_AXIS
] = 
dñè
[X_AXIS]/
axis_sˇlög
[X_AXIS];

3441 
de°ö©i⁄
[
Y_AXIS
] = 
dñè
[Y_AXIS]/
axis_sˇlög
[Y_AXIS];

3443 
	`¥ï¨e_move
();

3450 
	`SERIAL_ECHOLN
(" Cal: Theta 90 ");

3453 if(
St›≥d
 =
Ál£
) {

3455 
dñè
[
X_AXIS
] = 90;

3456 
dñè
[
Y_AXIS
] = 130;

3457 
	`ˇlcuœã_SCARA_f‹w¨d_Tønsf‹m
(
dñè
);

3458 
de°ö©i⁄
[
X_AXIS
] = 
dñè
[X_AXIS]/
axis_sˇlög
[X_AXIS];

3459 
de°ö©i⁄
[
Y_AXIS
] = 
dñè
[Y_AXIS]/
axis_sˇlög
[Y_AXIS];

3461 
	`¥ï¨e_move
();

3467 
	`SERIAL_ECHOLN
(" Cal: Psi 0 ");

3470 if(
St›≥d
 =
Ál£
) {

3472 
dñè
[
X_AXIS
] = 60;

3473 
dñè
[
Y_AXIS
] = 180;

3474 
	`ˇlcuœã_SCARA_f‹w¨d_Tønsf‹m
(
dñè
);

3475 
de°ö©i⁄
[
X_AXIS
] = 
dñè
[X_AXIS]/
axis_sˇlög
[X_AXIS];

3476 
de°ö©i⁄
[
Y_AXIS
] = 
dñè
[Y_AXIS]/
axis_sˇlög
[Y_AXIS];

3478 
	`¥ï¨e_move
();

3484 
	`SERIAL_ECHOLN
(" Cal: Psi 90 ");

3487 if(
St›≥d
 =
Ál£
) {

3489 
dñè
[
X_AXIS
] = 50;

3490 
dñè
[
Y_AXIS
] = 90;

3491 
	`ˇlcuœã_SCARA_f‹w¨d_Tønsf‹m
(
dñè
);

3492 
de°ö©i⁄
[
X_AXIS
] = 
dñè
[X_AXIS]/
axis_sˇlög
[X_AXIS];

3493 
de°ö©i⁄
[
Y_AXIS
] = 
dñè
[Y_AXIS]/
axis_sˇlög
[Y_AXIS];

3495 
	`¥ï¨e_move
();

3501 
	`SERIAL_ECHOLN
(" Cal: Theta-Psi 90 ");

3504 if(
St›≥d
 =
Ál£
) {

3506 
dñè
[
X_AXIS
] = 45;

3507 
dñè
[
Y_AXIS
] = 135;

3508 
	`ˇlcuœã_SCARA_f‹w¨d_Tønsf‹m
(
dñè
);

3509 
de°ö©i⁄
[
X_AXIS
] = 
dñè
[X_AXIS]/
axis_sˇlög
[X_AXIS];

3510 
de°ö©i⁄
[
Y_AXIS
] = 
dñè
[Y_AXIS]/
axis_sˇlög
[Y_AXIS];

3512 
	`¥ï¨e_move
();

3518 
öt8_t
 
i
=0; i < 3; i++)

3520 if(
	`code_£í
(
axis_codes
[
i
]))

3523 
axis_sˇlög
[
i
] = 
	`code_vÆue
();

3531 
	`°_synchr⁄ize
();

3534 #i‡
	`deföed
(
ENABLE_AUTO_BED_LEVELING
Ë&& !deföed(
Z_PROBE_SLED
)

3537 
	`ígage_z_¥obe
();

3543 
	`ªåa˘_z_¥obe
();

3548 #ifde‡
FILAMENT_SENSOR


3551 #i‡(
FILWIDTH_PIN
 > -1)

3552 if(
	`code_£í
('N')Ë
fûamít_width_nomöÆ
=
	`code_vÆue
();

3554 
	`SERIAL_PROTOCOLPGM
("Filament dia (nominal mm):");

3555 
	`SERIAL_PROTOCOLLN
(
fûamít_width_nomöÆ
);

3565 if(
	`code_£í
('D')Ë
mós_dñay_cm
=
	`code_vÆue
();

3567 if(
mós_dñay_cm
> 
MAX_MEASUREMENT_DELAY
)

3568 
mós_dñay_cm
 = 
MAX_MEASUREMENT_DELAY
;

3570 if(
dñay_ödex2
 == -1)

3572 
ãmp_øtio
 = 
	`widthFû_to_size_øtio
();

3574 
dñay_ödex1
=0; dñay_ödex1<(
MAX_MEASUREMENT_DELAY
+1); ++delay_index1 ){

3575 
mósuªmít_dñay
[
dñay_ödex1
]=
ãmp_øtio
-100;

3577 
dñay_ödex1
=0;

3578 
dñay_ödex2
=0;

3581 
fûamít_£ns‹
 = 
åue
 ;

3592 
fûamít_£ns‹
 = 
Ál£
 ;

3601 
	`SERIAL_PROTOCOLPGM
("Filament dia (measured mm):");

3602 
	`SERIAL_PROTOCOLLN
(
fûamít_width_mós
);

3613 
	`C⁄fig_St‹eSëtögs
();

3618 
	`C⁄fig_RërõveSëtögs
();

3623 
	`C⁄fig_Re£tDeÁu…
();

3628 
	`C⁄fig_PrötSëtögs
();

3631 #ifde‡
ABORT_ON_ENDSTOP_HIT_FEATURE_ENABLED


3634 if(
	`code_£í
('S')Ë
ab‹t_⁄_íd°›_hô
 = 
	`code_vÆue
() > 0;

3639 #ifde‡
CUSTOM_M_CODE_SET_Z_PROBE_OFFSET


3640 
CUSTOM_M_CODE_SET_Z_PROBE_OFFSET
:

3642 
vÆue
;

3643 i‡(
	`code_£í
('Z'))

3645 
vÆue
 = 
	`code_vÆue
();

3646 i‡((
Z_PROBE_OFFSET_RANGE_MIN
 <
vÆue
Ë&& (vÆuê<
Z_PROBE_OFFSET_RANGE_MAX
))

3648 
z¥obe_zoff£t
 = -
vÆue
;

3649 
SERIAL_ECHO_START
;

3650 
	`SERIAL_ECHOLNPGM
(
MSG_ZPROBE_ZOFFSET
 " " 
MSG_OK
);

3651 
	`SERIAL_PROTOCOLLN
("");

3655 
SERIAL_ECHO_START
;

3656 
	`SERIAL_ECHOPGM
(
MSG_ZPROBE_ZOFFSET
);

3657 
	`SERIAL_ECHOPGM
(
MSG_Z_MIN
);

3658 
	`SERIAL_ECHO
(
Z_PROBE_OFFSET_RANGE_MIN
);

3659 
	`SERIAL_ECHOPGM
(
MSG_Z_MAX
);

3660 
	`SERIAL_ECHO
(
Z_PROBE_OFFSET_RANGE_MAX
);

3661 
	`SERIAL_PROTOCOLLN
("");

3666 
SERIAL_ECHO_START
;

3667 
	`SERIAL_ECHOLNPGM
(
MSG_ZPROBE_ZOFFSET
 " : ");

3668 
	`SERIAL_ECHO
(-
z¥obe_zoff£t
);

3669 
	`SERIAL_PROTOCOLLN
("");

3675 #ifde‡
FILAMENTCHANGEENABLE


3678 
èrgë
[4];

3679 
œ°pos
[4];

3680 
èrgë
[
X_AXIS
]=
cuºít_posôi⁄
[X_AXIS];

3681 
èrgë
[
Y_AXIS
]=
cuºít_posôi⁄
[Y_AXIS];

3682 
èrgë
[
Z_AXIS
]=
cuºít_posôi⁄
[Z_AXIS];

3683 
èrgë
[
E_AXIS
]=
cuºít_posôi⁄
[E_AXIS];

3684 
œ°pos
[
X_AXIS
]=
cuºít_posôi⁄
[X_AXIS];

3685 
œ°pos
[
Y_AXIS
]=
cuºít_posôi⁄
[Y_AXIS];

3686 
œ°pos
[
Z_AXIS
]=
cuºít_posôi⁄
[Z_AXIS];

3687 
œ°pos
[
E_AXIS
]=
cuºít_posôi⁄
[E_AXIS];

3689 if(
	`code_£í
('E'))

3691 
èrgë
[
E_AXIS
]+
	`code_vÆue
();

3695 #ifde‡
FILAMENTCHANGE_FIRSTRETRACT


3696 
èrgë
[
E_AXIS
]+
FILAMENTCHANGE_FIRSTRETRACT
 ;

3699 
	`∂™_buf„r_löe
(
èrgë
[
X_AXIS
],Å¨gë[
Y_AXIS
],Å¨gë[
Z_AXIS
],Å¨gë[
E_AXIS
], 
„edøã
/60, 
a˘ive_exåudî
);

3702 if(
	`code_£í
('Z'))

3704 
èrgë
[
Z_AXIS
]+
	`code_vÆue
();

3708 #ifde‡
FILAMENTCHANGE_ZADD


3709 
èrgë
[
Z_AXIS
]+
FILAMENTCHANGE_ZADD
 ;

3712 
	`∂™_buf„r_löe
(
èrgë
[
X_AXIS
],Å¨gë[
Y_AXIS
],Å¨gë[
Z_AXIS
],Å¨gë[
E_AXIS
], 
„edøã
/60, 
a˘ive_exåudî
);

3715 if(
	`code_£í
('X'))

3717 
èrgë
[
X_AXIS
]+
	`code_vÆue
();

3721 #ifde‡
FILAMENTCHANGE_XPOS


3722 
èrgë
[
X_AXIS
]
FILAMENTCHANGE_XPOS
 ;

3725 if(
	`code_£í
('Y'))

3727 
èrgë
[
Y_AXIS
]
	`code_vÆue
();

3731 #ifde‡
FILAMENTCHANGE_YPOS


3732 
èrgë
[
Y_AXIS
]
FILAMENTCHANGE_YPOS
 ;

3736 
	`∂™_buf„r_löe
(
èrgë
[
X_AXIS
],Å¨gë[
Y_AXIS
],Å¨gë[
Z_AXIS
],Å¨gë[
E_AXIS
], 
„edøã
/60, 
a˘ive_exåudî
);

3738 if(
	`code_£í
('L'))

3740 
èrgë
[
E_AXIS
]+
	`code_vÆue
();

3744 #ifde‡
FILAMENTCHANGE_FINALRETRACT


3745 
èrgë
[
E_AXIS
]+
FILAMENTCHANGE_FINALRETRACT
 ;

3749 
	`∂™_buf„r_löe
(
èrgë
[
X_AXIS
],Å¨gë[
Y_AXIS
],Å¨gë[
Z_AXIS
],Å¨gë[
E_AXIS
], 
„edøã
/60, 
a˘ive_exåudî
);

3752 
	`°_synchr⁄ize
();

3754 
	`dißbÀ_e0
();

3755 
	`dißbÀ_e1
();

3756 
	`dißbÀ_e2
();

3757 
	`dñay
(100);

3758 
	`LCD_ALERTMESSAGEPGM
(
MSG_FILAMENTCHANGE
);

3759 
uöt8_t
 
˙t
=0;

3760 !
	`lcd_˛icked
()){

3761 
˙t
++;

3762 
	`m™age_hóãr
();

3763 
	`m™age_öa˘ivôy
();

3764 
	`lcd_upd©e
();

3765 if(
˙t
==0)

3767 #i‡
BEEPER
 > 0

3768 
	`SET_OUTPUT
(
BEEPER
);

3770 
	`WRITE
(
BEEPER
,
HIGH
);

3771 
	`dñay
(3);

3772 
	`WRITE
(
BEEPER
,
LOW
);

3773 
	`dñay
(3);

3775 #i‡!
	`deföed
(
LCD_FEEDBACK_FREQUENCY_HZ
Ë|| !deföed(
LCD_FEEDBACK_FREQUENCY_DURATION_MS
)

3776 
	`lcd_buzz
(1000/6,100);

3778 
	`lcd_buzz
(
LCD_FEEDBACK_FREQUENCY_DURATION_MS
,
LCD_FEEDBACK_FREQUENCY_HZ
);

3785 if(
	`code_£í
('L'))

3787 
èrgë
[
E_AXIS
]+-
	`code_vÆue
();

3791 #ifde‡
FILAMENTCHANGE_FINALRETRACT


3792 
èrgë
[
E_AXIS
]+=(-1)*
FILAMENTCHANGE_FINALRETRACT
 ;

3795 
cuºít_posôi⁄
[
E_AXIS
]=
èrgë
[E_AXIS];

3796 
	`∂™_£t_e_posôi⁄
(
cuºít_posôi⁄
[
E_AXIS
]);

3797 
	`∂™_buf„r_löe
(
èrgë
[
X_AXIS
],Å¨gë[
Y_AXIS
],Å¨gë[
Z_AXIS
],Å¨gë[
E_AXIS
], 
„edøã
/60, 
a˘ive_exåudî
);

3798 
	`∂™_buf„r_löe
(
œ°pos
[
X_AXIS
],Üa°pos[
Y_AXIS
], 
èrgë
[
Z_AXIS
],Å¨gë[
E_AXIS
], 
„edøã
/60, 
a˘ive_exåudî
);

3799 
	`∂™_buf„r_löe
(
œ°pos
[
X_AXIS
],Üa°pos[
Y_AXIS
],Üa°pos[
Z_AXIS
], 
èrgë
[
E_AXIS
], 
„edøã
/60, 
a˘ive_exåudî
);

3800 
	`∂™_buf„r_löe
(
œ°pos
[
X_AXIS
],Üa°pos[
Y_AXIS
],Üa°pos[
Z_AXIS
],Üa°pos[
E_AXIS
], 
„edøã
/60, 
a˘ive_exåudî
);

3804 #ifde‡
DUAL_X_CARRIAGE


3815 
	`°_synchr⁄ize
();

3817 i‡(
	`code_£í
('S'))

3818 
duÆ_x_ˇºüge_mode
 = 
	`code_vÆue
();

3820 i‡(
duÆ_x_ˇºüge_mode
 =
DXC_DUPLICATION_MODE
)

3822 i‡(
	`code_£í
('X'))

3823 
du∂iˇã_exåudî_x_off£t
 = 
	`max
(
	`code_vÆue
(),
X2_MIN_POS
 - 
	`x_home_pos
(0));

3825 i‡(
	`code_£í
('R'))

3826 
du∂iˇã_exåudî_ãmp_off£t
 = 
	`code_vÆue
();

3828 
SERIAL_ECHO_START
;

3829 
	`SERIAL_ECHOPGM
(
MSG_HOTEND_OFFSET
);

3830 
	`SERIAL_ECHO
(" ");

3831 
	`SERIAL_ECHO
(
exåudî_off£t
[
X_AXIS
][0]);

3832 
	`SERIAL_ECHO
(",");

3833 
	`SERIAL_ECHO
(
exåudî_off£t
[
Y_AXIS
][0]);

3834 
	`SERIAL_ECHO
(" ");

3835 
	`SERIAL_ECHO
(
du∂iˇã_exåudî_x_off£t
);

3836 
	`SERIAL_ECHO
(",");

3837 
	`SERIAL_ECHOLN
(
exåudî_off£t
[
Y_AXIS
][1]);

3839 i‡(
duÆ_x_ˇºüge_mode
 !
DXC_FULL_CONTROL_MODE
 && duÆ_x_ˇºüge_modê!
DXC_AUTO_PARK_MODE
)

3841 
duÆ_x_ˇºüge_mode
 = 
DEFAULT_DUAL_X_CARRIAGE_MODE
;

3844 
a˘ive_exåudî_∑rked
 = 
Ál£
;

3845 
exåudî_du∂iˇti⁄_íabÀd
 = 
Ál£
;

3846 
dñayed_move_time
 = 0;

3853 #i‡
	`deföed
(
DIGIPOTSS_PIN
) && DIGIPOTSS_PIN > -1

3854 
i
=0;i<
NUM_AXIS
;i++Ëif(
	`code_£í
(
axis_codes
[i])Ë
	`digùŸ_cuºít
(i,
	`code_vÆue
());

3855 if(
	`code_£í
('B')Ë
	`digùŸ_cuºít
(4,
	`code_vÆue
());

3856 if(
	`code_£í
('S')Ë
i
=0;i<=4;i++Ë
	`digùŸ_cuºít
(i,
	`code_vÆue
());

3858 #ifde‡
MOTOR_CURRENT_PWM_XY_PIN


3859 if(
	`code_£í
('X')Ë
	`digùŸ_cuºít
(0, 
	`code_vÆue
());

3861 #ifde‡
MOTOR_CURRENT_PWM_Z_PIN


3862 if(
	`code_£í
('Z')Ë
	`digùŸ_cuºít
(1, 
	`code_vÆue
());

3864 #ifde‡
MOTOR_CURRENT_PWM_E_PIN


3865 if(
	`code_£í
('E')Ë
	`digùŸ_cuºít
(2, 
	`code_vÆue
());

3867 #ifde‡
DIGIPOT_I2C


3869 
i
=0;i<
NUM_AXIS
;i++Ëif(
	`code_£í
(
axis_codes
[i])Ë
	`digùŸ_i2c_£t_cuºít
(i, 
	`code_vÆue
());

3871 
i
=
NUM_AXIS
;i<
DIGIPOT_I2C_NUM_CHANNELS
;i++Ëif(
	`code_£í
('B'+i-NUM_AXIS)Ë
	`digùŸ_i2c_£t_cuºít
(i, 
	`code_vÆue
());

3877 #i‡
	`deföed
(
DIGIPOTSS_PIN
) && DIGIPOTSS_PIN > -1

3878 
uöt8_t
 
ch™√l
,
cuºít
;

3879 if(
	`code_£í
('P')Ë
ch™√l
=
	`code_vÆue
();

3880 if(
	`code_£í
('S')Ë
cuºít
=
	`code_vÆue
();

3881 
	`digôÆPŸWrôe
(
ch™√l
, 
cuºít
);

3887 #i‡
	`deföed
(
X_MS1_PIN
) && X_MS1_PIN > -1

3888 if(
	`code_£í
('S')Ë
i
=0;i<=4;i++Ë
	`mi¸o°ï_mode
(i,
	`code_vÆue
());

3889 
i
=0;i<
NUM_AXIS
;i++Ëif(
	`code_£í
(
axis_codes
[i])Ë
	`mi¸o°ï_mode
(i,(
uöt8_t
)
	`code_vÆue
());

3890 if(
	`code_£í
('B')Ë
	`mi¸o°ï_mode
(4,
	`code_vÆue
());

3891 
	`mi¸o°ï_ªadögs
();

3897 #i‡
	`deföed
(
X_MS1_PIN
) && X_MS1_PIN > -1

3898 if(
	`code_£í
('S')Ë()
	`code_vÆue
())

3901 
i
=0;i<
NUM_AXIS
;i++Ëif(
	`code_£í
(
axis_codes
[i])Ë
	`mi¸o°ï_ms
(i,
	`code_vÆue
(),-1);

3902 if(
	`code_£í
('B')Ë
	`mi¸o°ï_ms
(4,
	`code_vÆue
(),-1);

3905 
i
=0;i<
NUM_AXIS
;i++Ëif(
	`code_£í
(
axis_codes
[i])Ë
	`mi¸o°ï_ms
(i,-1,
	`code_vÆue
());

3906 if(
	`code_£í
('B')Ë
	`mi¸o°ï_ms
(4,-1,
	`code_vÆue
());

3909 
	`mi¸o°ï_ªadögs
();

3914 
St›≥d
 = 
Ál£
;

3915 
	`lcd_ª£t_Æît_Àvñ
();

3916 
gcode_La°N
 = 
St›≥d_gcode_La°N
;

3917 
	`FlushSîülReque°Re£nd
();

3922 if(
	`code_£í
('T'))

3924 
tmp_exåudî
 = 
	`code_vÆue
();

3925 if(
tmp_exåudî
 >
EXTRUDERS
) {

3926 
SERIAL_ECHO_START
;

3927 
	`SERIAL_ECHO
("T");

3928 
	`SERIAL_ECHO
(
tmp_exåudî
);

3929 
	`SERIAL_ECHOLN
(
MSG_INVALID_EXTRUDER
);

3932 
boﬁón
 
make_move
 = 
Ál£
;

3933 if(
	`code_£í
('F')) {

3934 
make_move
 = 
åue
;

3935 
√xt_„edøã
 = 
	`code_vÆue
();

3936 if(
√xt_„edøã
 > 0.0) {

3937 
„edøã
 = 
√xt_„edøã
;

3940 #i‡
EXTRUDERS
 > 1

3941 if(
tmp_exåudî
 !
a˘ive_exåudî
) {

3943 
	`mem˝y
(
de°ö©i⁄
, 
cuºít_posôi⁄
, (destination));

3944 #ifde‡
DUAL_X_CARRIAGE


3945 i‡(
duÆ_x_ˇºüge_mode
 =
DXC_AUTO_PARK_MODE
 && 
St›≥d
 =
Ál£
 &&

3946 (
dñayed_move_time
 !0 || 
cuºít_posôi⁄
[
X_AXIS
] !
	`x_home_pos
(
a˘ive_exåudî
)))

3949 
	`∂™_buf„r_löe
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
] + 
TOOLCHANGE_PARK_ZLIFT
,

3950 
cuºít_posôi⁄
[
E_AXIS
], 
max_„edøã
[
Z_AXIS
], 
a˘ive_exåudî
);

3951 
	`∂™_buf„r_löe
(
	`x_home_pos
(
a˘ive_exåudî
), 
cuºít_posôi⁄
[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
] + 
TOOLCHANGE_PARK_ZLIFT
,

3952 
cuºít_posôi⁄
[
E_AXIS
], 
max_„edøã
[
X_AXIS
], 
a˘ive_exåudî
);

3953 
	`∂™_buf„r_löe
(
	`x_home_pos
(
a˘ive_exåudî
), 
cuºít_posôi⁄
[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
],

3954 
cuºít_posôi⁄
[
E_AXIS
], 
max_„edøã
[
Z_AXIS
], 
a˘ive_exåudî
);

3955 
	`°_synchr⁄ize
();

3959 
cuºít_posôi⁄
[
Y_AXIS
] = current_position[Y_AXIS] -

3960 
exåudî_off£t
[
Y_AXIS
][
a˘ive_exåudî
] +

3961 
exåudî_off£t
[
Y_AXIS
][
tmp_exåudî
];

3962 
cuºít_posôi⁄
[
Z_AXIS
] = current_position[Z_AXIS] -

3963 
exåudî_off£t
[
Z_AXIS
][
a˘ive_exåudî
] +

3964 
exåudî_off£t
[
Z_AXIS
][
tmp_exåudî
];

3966 
a˘ive_exåudî
 = 
tmp_exåudî
;

3969 
	`axis_is_©_home
(
X_AXIS
);

3971 i‡(
duÆ_x_ˇºüge_mode
 =
DXC_FULL_CONTROL_MODE
)

3973 
cuºít_posôi⁄
[
X_AXIS
] = 
öa˘ive_exåudî_x_pos
;

3974 
öa˘ive_exåudî_x_pos
 = 
de°ö©i⁄
[
X_AXIS
];

3976 i‡(
duÆ_x_ˇºüge_mode
 =
DXC_DUPLICATION_MODE
)

3978 
a˘ive_exåudî_∑rked
 = (
a˘ive_exåudî
 == 0);

3979 i‡(
a˘ive_exåudî
 =0 || 
a˘ive_exåudî_∑rked
)

3980 
cuºít_posôi⁄
[
X_AXIS
] = 
öa˘ive_exåudî_x_pos
;

3982 
cuºít_posôi⁄
[
X_AXIS
] = 
de°ö©i⁄
[X_AXIS] + 
du∂iˇã_exåudî_x_off£t
;

3983 
öa˘ive_exåudî_x_pos
 = 
de°ö©i⁄
[
X_AXIS
];

3984 
exåudî_du∂iˇti⁄_íabÀd
 = 
Ál£
;

3989 
	`mem˝y
(
øi£d_∑rked_posôi⁄
, 
cuºít_posôi⁄
, (raised_parked_position));

3990 
øi£d_∑rked_posôi⁄
[
Z_AXIS
] +
TOOLCHANGE_UNPARK_ZLIFT
;

3991 
a˘ive_exåudî_∑rked
 = 
åue
;

3992 
dñayed_move_time
 = 0;

3996 
i
;

3997 
i
 = 0; i < 2; i++) {

3998 
cuºít_posôi⁄
[
i
] = current_position[i] -

3999 
exåudî_off£t
[
i
][
a˘ive_exåudî
] +

4000 
exåudî_off£t
[
i
][
tmp_exåudî
];

4003 
a˘ive_exåudî
 = 
tmp_exåudî
;

4005 #ifde‡
DELTA


4007 
	`ˇlcuœã_dñè
(
cuºít_posôi⁄
);

4009 
	`∂™_£t_posôi⁄
(
dñè
[
X_AXIS
], dñè[
Y_AXIS
], dñè[
Z_AXIS
],
cuºít_posôi⁄
[
E_AXIS
]);

4012 
	`∂™_£t_posôi⁄
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
], cuºít_posôi⁄[
E_AXIS
]);

4016 if(
make_move
 && 
St›≥d
 =
Ál£
) {

4017 
	`¥ï¨e_move
();

4021 
SERIAL_ECHO_START
;

4022 
	`SERIAL_ECHO
(
MSG_ACTIVE_EXTRUDER
);

4023 
	`SERIAL_PROTOCOLLN
(()
a˘ive_exåudî
);

4029 
SERIAL_ECHO_START
;

4030 
	`SERIAL_ECHOPGM
(
MSG_UNKNOWN_COMMAND
);

4031 
	`SERIAL_ECHO
(
cmdbuf„r
[
bufödr
]);

4032 
	`SERIAL_ECHOLNPGM
("\"");

4035 
	`CÀ¨ToSíd
();

4036 
	}
}

4038 
	$FlushSîülReque°Re£nd
()

4041 
MYSERIAL
.
	`Êush
();

4042 
	`SERIAL_PROTOCOLPGM
(
MSG_RESEND
);

4043 
	`SERIAL_PROTOCOLLN
(
gcode_La°N
 + 1);

4044 
	`CÀ¨ToSíd
();

4045 
	}
}

4047 
	$CÀ¨ToSíd
()

4049 
¥evious_mûlis_cmd
 = 
	`mûlis
();

4050 #ifde‡
SDSUPPORT


4051 if(
‰omsd
[
bufödr
])

4054 
	`SERIAL_PROTOCOLLNPGM
(
MSG_OK
);

4055 
	}
}

4057 
	$gë_co‹dö©es
()

4059 
boﬁ
 
£í
[4]={
Ál£
,false,false,false};

4060 
öt8_t
 
i
=0; i < 
NUM_AXIS
; i++) {

4061 if(
	`code_£í
(
axis_codes
[
i
]))

4063 
de°ö©i⁄
[
i
] = ()
	`code_vÆue
(Ë+ (
axis_ªœtive_modes
[i] || 
ªœtive_mode
)*
cuºít_posôi⁄
[i];

4064 
£í
[
i
]=
åue
;

4066 
de°ö©i⁄
[
i
] = 
cuºít_posôi⁄
[i];

4068 if(
	`code_£í
('F')) {

4069 
√xt_„edøã
 = 
	`code_vÆue
();

4070 if(
√xt_„edøã
 > 0.0Ë
„edøã
 =Çext_feedrate;

4072 
	}
}

4074 
	$gë_¨c_co‹dö©es
()

4076 #ifde‡
SF_ARC_FIX


4077 
boﬁ
 
ªœtive_mode_backup
 = 
ªœtive_mode
;

4078 
ªœtive_mode
 = 
åue
;

4080 
	`gë_co‹dö©es
();

4081 #ifde‡
SF_ARC_FIX


4082 
ªœtive_mode
=
ªœtive_mode_backup
;

4085 if(
	`code_£í
('I')) {

4086 
off£t
[0] = 
	`code_vÆue
();

4089 
off£t
[0] = 0.0;

4091 if(
	`code_£í
('J')) {

4092 
off£t
[1] = 
	`code_vÆue
();

4095 
off£t
[1] = 0.0;

4097 
	}
}

4099 
	$˛amp_to_so·w¨e_íd°›s
(
èrgë
[3])

4101 i‡(
mö_so·w¨e_íd°›s
) {

4102 i‡(
èrgë
[
X_AXIS
] < 
mö_pos
[X_AXIS])Åarget[X_AXIS] = min_pos[X_AXIS];

4103 i‡(
èrgë
[
Y_AXIS
] < 
mö_pos
[Y_AXIS])Åarget[Y_AXIS] = min_pos[Y_AXIS];

4104 i‡(
èrgë
[
Z_AXIS
] < 
mö_pos
[Z_AXIS])Åarget[Z_AXIS] = min_pos[Z_AXIS];

4107 i‡(
max_so·w¨e_íd°›s
) {

4108 i‡(
èrgë
[
X_AXIS
] > 
max_pos
[X_AXIS])Åarget[X_AXIS] = max_pos[X_AXIS];

4109 i‡(
èrgë
[
Y_AXIS
] > 
max_pos
[Y_AXIS])Åarget[Y_AXIS] = max_pos[Y_AXIS];

4110 i‡(
èrgë
[
Z_AXIS
] > 
max_pos
[Z_AXIS])Åarget[Z_AXIS] = max_pos[Z_AXIS];

4112 
	}
}

4114 #ifde‡
DELTA


4115 
	$ªˇlc_dñè_£âögs
(
ødius
, 
düg⁄Æ_rod
)

4117 
dñè_towî1_x
-
SIN_60
*
ødius
;

4118 
dñè_towî1_y
-
COS_60
*
ødius
;

4119 
dñè_towî2_x

SIN_60
*
ødius
;

4120 
dñè_towî2_y
-
COS_60
*
ødius
;

4121 
dñè_towî3_x
= 0.0;

4122 
dñè_towî3_y

ødius
;

4123 
dñè_düg⁄Æ_rod_2

	`sq
(
düg⁄Æ_rod
);

4124 
	}
}

4126 
	$ˇlcuœã_dñè
(
ˇπesün
[3])

4128 
dñè
[
X_AXIS
] = 
	`sqπ
(
dñè_düg⁄Æ_rod_2


4129 - 
	`sq
(
dñè_towî1_x
-
ˇπesün
[
X_AXIS
])

4130 - 
	`sq
(
dñè_towî1_y
-
ˇπesün
[
Y_AXIS
])

4131 Ë+ 
ˇπesün
[
Z_AXIS
];

4132 
dñè
[
Y_AXIS
] = 
	`sqπ
(
dñè_düg⁄Æ_rod_2


4133 - 
	`sq
(
dñè_towî2_x
-
ˇπesün
[
X_AXIS
])

4134 - 
	`sq
(
dñè_towî2_y
-
ˇπesün
[
Y_AXIS
])

4135 Ë+ 
ˇπesün
[
Z_AXIS
];

4136 
dñè
[
Z_AXIS
] = 
	`sqπ
(
dñè_düg⁄Æ_rod_2


4137 - 
	`sq
(
dñè_towî3_x
-
ˇπesün
[
X_AXIS
])

4138 - 
	`sq
(
dñè_towî3_y
-
ˇπesün
[
Y_AXIS
])

4139 Ë+ 
ˇπesün
[
Z_AXIS
];

4149 
	}
}

4152 
	$adju°_dñè
(
ˇπesün
[3])

4154 
hÆf
 = (
AUTO_BED_LEVELING_GRID_POINTS
 - 1) / 2;

4155 
grid_x
 = 
	`max
(0.001-
hÆf
, 
	`mö
(hÆf-0.001, 
ˇπesün
[
X_AXIS
] / 
AUTO_BED_LEVELING_GRID_X
));

4156 
grid_y
 = 
	`max
(0.001-
hÆf
, 
	`mö
(hÆf-0.001, 
ˇπesün
[
Y_AXIS
] / 
AUTO_BED_LEVELING_GRID_Y
));

4157 
Êo‹_x
 = 
	`Êo‹
(
grid_x
);

4158 
Êo‹_y
 = 
	`Êo‹
(
grid_y
);

4159 
øtio_x
 = 
grid_x
 - 
Êo‹_x
;

4160 
øtio_y
 = 
grid_y
 - 
Êo‹_y
;

4161 
z1
 = 
bed_Àvñ
[
Êo‹_x
+
hÆf
][
Êo‹_y
+half];

4162 
z2
 = 
bed_Àvñ
[
Êo‹_x
+
hÆf
][
Êo‹_y
+half+1];

4163 
z3
 = 
bed_Àvñ
[
Êo‹_x
+
hÆf
+1][
Êo‹_y
+half];

4164 
z4
 = 
bed_Àvñ
[
Êo‹_x
+
hÆf
+1][
Êo‹_y
+half+1];

4165 
À·
 = (1-
øtio_y
)*
z1
 +Ñ©io_y*
z2
;

4166 
right
 = (1-
øtio_y
)*
z3
 +Ñ©io_y*
z4
;

4167 
off£t
 = (1-
øtio_x
)*
À·
 +Ñ©io_x*
right
;

4169 
dñè
[
X_AXIS
] +
off£t
;

4170 
dñè
[
Y_AXIS
] +
off£t
;

4171 
dñè
[
Z_AXIS
] +
off£t
;

4188 
	}
}

4190 
	$¥ï¨e_move_øw
()

4192 
¥evious_mûlis_cmd
 = 
	`mûlis
();

4193 
	`ˇlcuœã_dñè
(
de°ö©i⁄
);

4194 
	`∂™_buf„r_löe
(
dñè
[
X_AXIS
], dñè[
Y_AXIS
], dñè[
Z_AXIS
],

4195 
de°ö©i⁄
[
E_AXIS
], 
„edøã
*
„edmu…ùly
/60/100.0,

4196 
a˘ive_exåudî
);

4197 
öt8_t
 
i
=0; i < 
NUM_AXIS
; i++) {

4198 
cuºít_posôi⁄
[
i
] = 
de°ö©i⁄
[i];

4200 
	}
}

4203 
	$¥ï¨e_move
()

4205 
	`˛amp_to_so·w¨e_íd°›s
(
de°ö©i⁄
);

4206 
¥evious_mûlis_cmd
 = 
	`mûlis
();

4208 #ifde‡
SCARA


4210 
dif„ªn˚
[
NUM_AXIS
];

4211 
öt8_t
 
i
=0; i < 
NUM_AXIS
; i++) {

4212 
dif„ªn˚
[
i
] = 
de°ö©i⁄
[i] - 
cuºít_posôi⁄
[i];

4215 
ˇπesün_mm
 = 
	`sqπ
–
	`sq
(
dif„ªn˚
[
X_AXIS
]) +

4216 
	`sq
(
dif„ªn˚
[
Y_AXIS
]) +

4217 
	`sq
(
dif„ªn˚
[
Z_AXIS
]));

4218 i‡(
ˇπesün_mm
 < 0.000001Ë{ c¨ãsün_mm = 
	`abs
(
dif„ªn˚
[
E_AXIS
]); }

4219 i‡(
ˇπesün_mm
 < 0.000001) { ; }

4220 
£c⁄ds
 = 6000 * 
ˇπesün_mm
 / 
„edøã
 / 
„edmu…ùly
;

4221 
°ïs
 = 
	`max
(1, (
sˇø_£gmíts_≥r_£c⁄d
 * 
£c⁄ds
));

4225 
s
 = 1; s <
°ïs
; s++) {

4226 
‰a˘i⁄
 = (
s
Ë/ (
°ïs
);

4227 
öt8_t
 
i
=0; i < 
NUM_AXIS
; i++) {

4228 
de°ö©i⁄
[
i
] = 
cuºít_posôi⁄
[i] + 
dif„ªn˚
[i] * 
‰a˘i⁄
;

4232 
	`ˇlcuœã_dñè
(
de°ö©i⁄
);

4240 
	`∂™_buf„r_löe
(
dñè
[
X_AXIS
], dñè[
Y_AXIS
], dñè[
Z_AXIS
],

4241 
de°ö©i⁄
[
E_AXIS
], 
„edøã
*
„edmu…ùly
/60/100.0,

4242 
a˘ive_exåudî
);

4246 #ifde‡
DELTA


4247 
dif„ªn˚
[
NUM_AXIS
];

4248 
öt8_t
 
i
=0; i < 
NUM_AXIS
; i++) {

4249 
dif„ªn˚
[
i
] = 
de°ö©i⁄
[i] - 
cuºít_posôi⁄
[i];

4251 
ˇπesün_mm
 = 
	`sqπ
(
	`sq
(
dif„ªn˚
[
X_AXIS
]) +

4252 
	`sq
(
dif„ªn˚
[
Y_AXIS
]) +

4253 
	`sq
(
dif„ªn˚
[
Z_AXIS
]));

4254 i‡(
ˇπesün_mm
 < 0.000001Ë{ c¨ãsün_mm = 
	`abs
(
dif„ªn˚
[
E_AXIS
]); }

4255 i‡(
ˇπesün_mm
 < 0.000001) { ; }

4256 
£c⁄ds
 = 6000 * 
ˇπesün_mm
 / 
„edøã
 / 
„edmu…ùly
;

4257 
°ïs
 = 
	`max
(1, (
dñè_£gmíts_≥r_£c⁄d
 * 
£c⁄ds
));

4261 
s
 = 1; s <
°ïs
; s++) {

4262 
‰a˘i⁄
 = (
s
Ë/ (
°ïs
);

4263 
öt8_t
 
i
=0; i < 
NUM_AXIS
; i++) {

4264 
de°ö©i⁄
[
i
] = 
cuºít_posôi⁄
[i] + 
dif„ªn˚
[i] * 
‰a˘i⁄
;

4266 
	`ˇlcuœã_dñè
(
de°ö©i⁄
);

4267 #ifde‡
NONLINEAR_BED_LEVELING


4268 
	`adju°_dñè
(
de°ö©i⁄
);

4270 
	`∂™_buf„r_löe
(
dñè
[
X_AXIS
], dñè[
Y_AXIS
], dñè[
Z_AXIS
],

4271 
de°ö©i⁄
[
E_AXIS
], 
„edøã
*
„edmu…ùly
/60/100.0,

4272 
a˘ive_exåudî
);

4277 #ifde‡
DUAL_X_CARRIAGE


4278 i‡(
a˘ive_exåudî_∑rked
)

4280 i‡(
duÆ_x_ˇºüge_mode
 =
DXC_DUPLICATION_MODE
 && 
a˘ive_exåudî
 == 0)

4283 
	`∂™_£t_posôi⁄
(
öa˘ive_exåudî_x_pos
, 
cuºít_posôi⁄
[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
], cuºít_posôi⁄[
E_AXIS
]);

4284 
	`∂™_buf„r_löe
(
cuºít_posôi⁄
[
X_AXIS
] + 
du∂iˇã_exåudî_x_off£t
, cuºít_posôi⁄[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
],

4285 
cuºít_posôi⁄
[
E_AXIS
], 
max_„edøã
[
X_AXIS
], 1);

4286 
	`∂™_£t_posôi⁄
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
], cuºít_posôi⁄[
E_AXIS
]);

4287 
	`°_synchr⁄ize
();

4288 
exåudî_du∂iˇti⁄_íabÀd
 = 
åue
;

4289 
a˘ive_exåudî_∑rked
 = 
Ál£
;

4291 i‡(
duÆ_x_ˇºüge_mode
 =
DXC_AUTO_PARK_MODE
)

4293 i‡(
cuºít_posôi⁄
[
E_AXIS
] =
de°ö©i⁄
[E_AXIS])

4297 i‡(
dñayed_move_time
 != 0xFFFFFFFFUL)

4299 
	`mem˝y
(
cuºít_posôi⁄
, 
de°ö©i⁄
, (current_position));

4300 i‡(
de°ö©i⁄
[
Z_AXIS
] > 
øi£d_∑rked_posôi⁄
[Z_AXIS])

4301 
øi£d_∑rked_posôi⁄
[
Z_AXIS
] = 
de°ö©i⁄
[Z_AXIS];

4302 
dñayed_move_time
 = 
	`mûlis
();

4306 
dñayed_move_time
 = 0;

4308 
	`∂™_buf„r_löe
(
øi£d_∑rked_posôi⁄
[
X_AXIS
],Ñai£d_∑rked_posôi⁄[
Y_AXIS
],Ñai£d_∑rked_posôi⁄[
Z_AXIS
], 
cuºít_posôi⁄
[
E_AXIS
], 
max_„edøã
[Z_AXIS], 
a˘ive_exåudî
);

4309 
	`∂™_buf„r_löe
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], 
øi£d_∑rked_posôi⁄
[
Z_AXIS
],

4310 
cuºít_posôi⁄
[
E_AXIS
], 
	`mö
(
max_„edøã
[
X_AXIS
],max_„edøã[
Y_AXIS
]), 
a˘ive_exåudî
);

4311 
	`∂™_buf„r_löe
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
],

4312 
cuºít_posôi⁄
[
E_AXIS
], 
max_„edøã
[
Z_AXIS
], 
a˘ive_exåudî
);

4313 
a˘ive_exåudî_∑rked
 = 
Ál£
;

4318 #i‡! (
deföed
 
DELTA
 || deföed 
SCARA
)

4320 if–(
cuºít_posôi⁄
[
X_AXIS
] =
de°ö©i⁄
 [X_AXIS]Ë&& (cuºít_posôi⁄[
Y_AXIS
] == destination [Y_AXIS])) {

4321 
	`∂™_buf„r_löe
(
de°ö©i⁄
[
X_AXIS
], de°ö©i⁄[
Y_AXIS
], de°ö©i⁄[
Z_AXIS
], de°ö©i⁄[
E_AXIS
], 
„edøã
/60, 
a˘ive_exåudî
);

4324 
	`∂™_buf„r_löe
(
de°ö©i⁄
[
X_AXIS
], de°ö©i⁄[
Y_AXIS
], de°ö©i⁄[
Z_AXIS
], de°ö©i⁄[
E_AXIS
], 
„edøã
*
„edmu…ùly
/60/100.0, 
a˘ive_exåudî
);

4328 
öt8_t
 
i
=0; i < 
NUM_AXIS
; i++) {

4329 
cuºít_posôi⁄
[
i
] = 
de°ö©i⁄
[i];

4331 
	}
}

4333 
	$¥ï¨e_¨c_move
(
is˛ockwi£
) {

4334 
r
 = 
	`hypŸ
(
off£t
[
X_AXIS
], off£t[
Y_AXIS
]);

4337 
	`mc_¨c
(
cuºít_posôi⁄
, 
de°ö©i⁄
, 
off£t
, 
X_AXIS
, 
Y_AXIS
, 
Z_AXIS
, 
„edøã
*
„edmu…ùly
/60/100.0, 
r
, 
is˛ockwi£
, 
a˘ive_exåudî
);

4342 
öt8_t
 
i
=0; i < 
NUM_AXIS
; i++) {

4343 
cuºít_posôi⁄
[
i
] = 
de°ö©i⁄
[i];

4345 
¥evious_mûlis_cmd
 = 
	`mûlis
();

4346 
	}
}

4348 #i‡
deföed
(
CONTROLLERFAN_PIN
) && CONTROLLERFAN_PIN > -1

4350 #i‡
deföed
(
FAN_PIN
)

4351 #i‡
CONTROLLERFAN_PIN
 =
FAN_PIN


4356 
	gœ°MŸ‹
 = 0;

4357 
	gœ°MŸ‹Check
 = 0;

4359 
	$c⁄åﬁÀrF™
()

4361 i‡((
	`mûlis
(Ë- 
œ°MŸ‹Check
) >= 2500)

4363 
œ°MŸ‹Check
 = 
	`mûlis
();

4365 if(!
	`READ
(
X_ENABLE_PIN
Ë|| !READ(
Y_ENABLE_PIN
Ë|| !READ(
Z_ENABLE_PIN
Ë|| (
so·_pwm_bed
 > 0)

4366 #i‡
EXTRUDERS
 > 2

4367 || !
	`READ
(
E2_ENABLE_PIN
)

4369 #i‡
EXTRUDER
 > 1

4370 #i‡
	`deföed
(
X2_ENABLE_PIN
) && X2_ENABLE_PIN > -1

4371 || !
	`READ
(
X2_ENABLE_PIN
)

4373 || !
	`READ
(
E1_ENABLE_PIN
)

4375 || !
	`READ
(
E0_ENABLE_PIN
))

4377 
œ°MŸ‹
 = 
	`mûlis
();

4380 i‡((
	`mûlis
(Ë- 
œ°MŸ‹
Ë>(
CONTROLLERFAN_SECS
*1000UL) ||ÜastMotor == 0)

4382 
	`digôÆWrôe
(
CONTROLLERFAN_PIN
, 0);

4383 
	`™ÆogWrôe
(
CONTROLLERFAN_PIN
, 0);

4388 
	`digôÆWrôe
(
CONTROLLERFAN_PIN
, 
CONTROLLERFAN_SPEED
);

4389 
	`™ÆogWrôe
(
CONTROLLERFAN_PIN
, 
CONTROLLERFAN_SPEED
);

4392 
	}
}

4395 #ifde‡
SCARA


4396 
	$ˇlcuœã_SCARA_f‹w¨d_Tønsf‹m
(
f_sˇø
[3])

4401 
x_sö
, 
x_cos
, 
y_sö
, 
y_cos
;

4406 
x_sö
 = 
	`sö
(
f_sˇø
[
X_AXIS
]/
SCARA_RAD2DEG
Ë* 
Lökage_1
;

4407 
x_cos
 = 
	`cos
(
f_sˇø
[
X_AXIS
]/
SCARA_RAD2DEG
Ë* 
Lökage_1
;

4408 
y_sö
 = 
	`sö
(
f_sˇø
[
Y_AXIS
]/
SCARA_RAD2DEG
Ë* 
Lökage_2
;

4409 
y_cos
 = 
	`cos
(
f_sˇø
[
Y_AXIS
]/
SCARA_RAD2DEG
Ë* 
Lökage_2
;

4416 
dñè
[
X_AXIS
] = 
x_cos
 + 
y_cos
 + 
SCARA_off£t_x
;

4417 
dñè
[
Y_AXIS
] = 
x_sö
 + 
y_sö
 + 
SCARA_off£t_y
;

4421 
	}
}

4423 
	$ˇlcuœã_dñè
(
ˇπesün
[3]){

4428 
SCARA_pos
[2];

4429 
SCARA_C2
, 
SCARA_S2
, 
SCARA_K1
, 
SCARA_K2
, 
SCARA_thëa
, 
SCARA_psi
;

4431 
SCARA_pos
[
X_AXIS
] = 
ˇπesün
[X_AXIS] * 
axis_sˇlög
[X_AXIS] - 
SCARA_off£t_x
;

4432 
SCARA_pos
[
Y_AXIS
] = 
ˇπesün
[Y_AXIS] * 
axis_sˇlög
[Y_AXIS] - 
SCARA_off£t_y
;

4434 #i‡(
Lökage_1
 =
Lökage_2
)

4435 
SCARA_C2
 = ( ( 
	`sq
(
SCARA_pos
[
X_AXIS
]Ë+ sq(SCARA_pos[
Y_AXIS
]ËË/ (2 * ()
L1_2
) ) - 1;

4437 
SCARA_C2
 = ( 
	`sq
(
SCARA_pos
[
X_AXIS
]Ë+ sq(SCARA_pos[
Y_AXIS
]Ë- ()
L1_2
 - ()
L2_2
 ) / 45000;

4440 
SCARA_S2
 = 
	`sqπ
–1 - 
	`sq
(
SCARA_C2
) );

4442 
SCARA_K1
 = 
Lökage_1
 + 
Lökage_2
 * 
SCARA_C2
;

4443 
SCARA_K2
 = 
Lökage_2
 * 
SCARA_S2
;

4445 
SCARA_thëa
 = ( 
	`©™2
(
SCARA_pos
[
X_AXIS
],SCARA_pos[
Y_AXIS
])-©™2(
SCARA_K1
, 
SCARA_K2
) ) * -1;

4446 
SCARA_psi
 = 
	`©™2
(
SCARA_S2
,
SCARA_C2
);

4448 
dñè
[
X_AXIS
] = 
SCARA_thëa
 * 
SCARA_RAD2DEG
;

4449 
dñè
[
Y_AXIS
] = (
SCARA_thëa
 + 
SCARA_psi
Ë* 
SCARA_RAD2DEG
;

4450 
dñè
[
Z_AXIS
] = 
ˇπesün
[Z_AXIS];

4469 
	}
}

4473 #ifde‡
TEMP_STAT_LEDS


4474 
boﬁ
 
	gblue_Àd
 = 
Ál£
;

4475 
boﬁ
 
	gªd_Àd
 = 
Ál£
;

4476 
uöt32_t
 
	g°©_upd©e
 = 0;

4478 
	$h™dÀ_°©us_Àds
() {

4479 
max_ãmp
 = 0.0;

4480 if(
	`mûlis
(Ë> 
°©_upd©e
) {

4481 
°©_upd©e
 += 500;

4482 
öt8_t
 
cur_exåudî
 = 0; cur_exåudî < 
EXTRUDERS
; ++cur_extruder) {

4483 
max_ãmp
 = 
	`max
(max_ãmp, 
	`degHŸíd
(
cur_exåudî
));

4484 
max_ãmp
 = 
	`max
(max_ãmp, 
	`degT¨gëHŸíd
(
cur_exåudî
));

4486 #i‡
	`deföed
(
TEMP_BED_PIN
) && TEMP_BED_PIN > -1

4487 
max_ãmp
 = 
	`max
(max_ãmp, 
	`degT¨gëBed
());

4488 
max_ãmp
 = 
	`max
(max_ãmp, 
	`degBed
());

4490 if((
max_ãmp
 > 55.0Ë&& (
ªd_Àd
 =
Ál£
)) {

4491 
	`digôÆWrôe
(
STAT_LED_RED
, 1);

4492 
	`digôÆWrôe
(
STAT_LED_BLUE
, 0);

4493 
ªd_Àd
 = 
åue
;

4494 
blue_Àd
 = 
Ál£
;

4496 if((
max_ãmp
 < 54.0Ë&& (
blue_Àd
 =
Ál£
)) {

4497 
	`digôÆWrôe
(
STAT_LED_RED
, 0);

4498 
	`digôÆWrôe
(
STAT_LED_BLUE
, 1);

4499 
ªd_Àd
 = 
Ál£
;

4500 
blue_Àd
 = 
åue
;

4503 
	}
}

4506 
	$m™age_öa˘ivôy
()

4508 if(
buÊí
 < (
BUFSIZE
-1))

4509 
	`gë_comm™d
();

4511 if–(
	`mûlis
(Ë- 
¥evious_mûlis_cmd
Ë> 
max_öa˘ive_time
 )

4512 if(
max_öa˘ive_time
)

4513 
	`kûl
();

4514 if(
°ï≥r_öa˘ive_time
) {

4515 if–(
	`mûlis
(Ë- 
¥evious_mûlis_cmd
Ë> 
°ï≥r_öa˘ive_time
 )

4517 if(
	`blocks_queued
(Ë=
Ál£
) {

4518 
	`dißbÀ_x
();

4519 
	`dißbÀ_y
();

4520 
	`dißbÀ_z
();

4521 
	`dißbÀ_e0
();

4522 
	`dißbÀ_e1
();

4523 
	`dißbÀ_e2
();

4528 #ifde‡
CHDK


4529 i‡(
chdkA˘ive
 && (
	`mûlis
(Ë- 
chdkHigh
 > 
CHDK_DELAY
))

4531 
chdkA˘ive
 = 
Ál£
;

4532 
	`WRITE
(
CHDK
, 
LOW
);

4536 #i‡
	`deföed
(
KILL_PIN
) && KILL_PIN > -1

4537 if–0 =
	`READ
(
KILL_PIN
) )

4538 
	`kûl
();

4540 #i‡
	`deföed
(
CONTROLLERFAN_PIN
) && CONTROLLERFAN_PIN > -1

4541 
	`c⁄åﬁÀrF™
();

4543 #ifde‡
EXTRUDER_RUNOUT_PREVENT


4544 if–(
	`mûlis
(Ë- 
¥evious_mûlis_cmd
Ë> 
EXTRUDER_RUNOUT_SECONDS
*1000 )

4545 if(
	`degHŸíd
(
a˘ive_exåudî
)>
EXTRUDER_RUNOUT_MINTEMP
)

4547 
boﬁ
 
ﬁd°©us
=
	`READ
(
E0_ENABLE_PIN
);

4548 
	`íabÀ_e0
();

4549 
ﬁdïos
=
cuºít_posôi⁄
[
E_AXIS
];

4550 
ﬁdedes
=
de°ö©i⁄
[
E_AXIS
];

4551 
	`∂™_buf„r_löe
(
de°ö©i⁄
[
X_AXIS
], de°ö©i⁄[
Y_AXIS
], de°ö©i⁄[
Z_AXIS
],

4552 
de°ö©i⁄
[
E_AXIS
]+
EXTRUDER_RUNOUT_EXTRUDE
*
EXTRUDER_RUNOUT_ESTEPS
/
axis_°ïs_≥r_unô
[E_AXIS],

4553 
EXTRUDER_RUNOUT_SPEED
/60.*
EXTRUDER_RUNOUT_ESTEPS
/
axis_°ïs_≥r_unô
[
E_AXIS
], 
a˘ive_exåudî
);

4554 
cuºít_posôi⁄
[
E_AXIS
]=
ﬁdïos
;

4555 
de°ö©i⁄
[
E_AXIS
]=
ﬁdedes
;

4556 
	`∂™_£t_e_posôi⁄
(
ﬁdïos
);

4557 
¥evious_mûlis_cmd
=
	`mûlis
();

4558 
	`°_synchr⁄ize
();

4559 
	`WRITE
(
E0_ENABLE_PIN
,
ﬁd°©us
);

4562 #i‡
	`deföed
(
DUAL_X_CARRIAGE
)

4564 i‡(
dñayed_move_time
 !0 && (
	`mûlis
(Ë- dñayed_move_timeË> 1000 && 
St›≥d
 =
Ál£
)

4567 
dñayed_move_time
 = 0xFFFFFFFFUL;

4568 
	`mem˝y
(
de°ö©i⁄
,
cuºít_posôi⁄
,(destination));

4569 
	`¥ï¨e_move
();

4572 #ifde‡
TEMP_STAT_LEDS


4573 
	`h™dÀ_°©us_Àds
();

4575 
	`check_axes_a˘ivôy
();

4576 
	}
}

4578 
	$kûl
()

4580 
	`˛i
();

4581 
	`dißbÀ_hóãr
();

4583 
	`dißbÀ_x
();

4584 
	`dißbÀ_y
();

4585 
	`dißbÀ_z
();

4586 
	`dißbÀ_e0
();

4587 
	`dißbÀ_e1
();

4588 
	`dißbÀ_e2
();

4590 #i‡
	`deföed
(
PS_ON_PIN
) && PS_ON_PIN > -1

4591 
	`pöMode
(
PS_ON_PIN
,
INPUT
);

4593 
SERIAL_ERROR_START
;

4594 
	`SERIAL_ERRORLNPGM
(
MSG_ERR_KILLED
);

4595 
	`LCD_ALERTMESSAGEPGM
(
MSG_KILLED
);

4596 
	`suicide
();

4598 
	}
}

4600 
	$St›
()

4602 
	`dißbÀ_hóãr
();

4603 if(
St›≥d
 =
Ál£
) {

4604 
St›≥d
 = 
åue
;

4605 
St›≥d_gcode_La°N
 = 
gcode_La°N
;

4606 
SERIAL_ERROR_START
;

4607 
	`SERIAL_ERRORLNPGM
(
MSG_ERR_STOPPED
);

4608 
	`LCD_MESSAGEPGM
(
MSG_STOPPED
);

4610 
	}
}

4612 
boﬁ
 
	$IsSt›≥d
(Ë{  
St›≥d
; 
	}
};

4614 #ifde‡
FAST_PWM_FAN


4615 
	$£tPwmFªquícy
(
uöt8_t
 
pö
, 
vÆ
)

4617 
vÆ
 &= 0x07;

4618 
	`digôÆPöToTimî
(
pö
))

4621 #i‡
	`deföed
(
TCCR0A
)

4622 
TIMER0A
:

4623 
TIMER0B
:

4629 #i‡
	`deföed
(
TCCR1A
)

4630 
TIMER1A
:

4631 
TIMER1B
:

4637 #i‡
	`deföed
(
TCCR2
)

4638 
TIMER2
:

4639 
TIMER2
:

4640 
TCCR2
 &~(
	`_BV
(
CS10
Ë| _BV(
CS11
Ë| _BV(
CS12
));

4641 
TCCR2
 |
vÆ
;

4645 #i‡
	`deföed
(
TCCR2A
)

4646 
TIMER2A
:

4647 
TIMER2B
:

4648 
TCCR2B
 &~(
	`_BV
(
CS20
Ë| _BV(
CS21
Ë| _BV(
CS22
));

4649 
TCCR2B
 |
vÆ
;

4653 #i‡
	`deföed
(
TCCR3A
)

4654 
TIMER3A
:

4655 
TIMER3B
:

4656 
TIMER3C
:

4657 
TCCR3B
 &~(
	`_BV
(
CS30
Ë| _BV(
CS31
Ë| _BV(
CS32
));

4658 
TCCR3B
 |
vÆ
;

4662 #i‡
	`deföed
(
TCCR4A
)

4663 
TIMER4A
:

4664 
TIMER4B
:

4665 
TIMER4C
:

4666 
TCCR4B
 &~(
	`_BV
(
CS40
Ë| _BV(
CS41
Ë| _BV(
CS42
));

4667 
TCCR4B
 |
vÆ
;

4671 #i‡
	`deföed
(
TCCR5A
)

4672 
TIMER5A
:

4673 
TIMER5B
:

4674 
TIMER5C
:

4675 
TCCR5B
 &~(
	`_BV
(
CS50
Ë| _BV(
CS51
Ë| _BV(
CS52
));

4676 
TCCR5B
 |
vÆ
;

4681 
	}
}

4684 
boﬁ
 
	$£tT¨gëedHŸíd
(
code
){

4685 
tmp_exåudî
 = 
a˘ive_exåudî
;

4686 if(
	`code_£í
('T')) {

4687 
tmp_exåudî
 = 
	`code_vÆue
();

4688 if(
tmp_exåudî
 >
EXTRUDERS
) {

4689 
SERIAL_ECHO_START
;

4690 
code
){

4692 
	`SERIAL_ECHO
(
MSG_M104_INVALID_EXTRUDER
);

4695 
	`SERIAL_ECHO
(
MSG_M105_INVALID_EXTRUDER
);

4698 
	`SERIAL_ECHO
(
MSG_M109_INVALID_EXTRUDER
);

4701 
	`SERIAL_ECHO
(
MSG_M218_INVALID_EXTRUDER
);

4704 
	`SERIAL_ECHO
(
MSG_M221_INVALID_EXTRUDER
);

4707 
	`SERIAL_ECHOLN
(
tmp_exåudî
);

4708  
åue
;

4711  
Ál£
;

4712 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/Sd2Card.cpp

20 
	~"M¨lö.h
"

22 #ifde‡
SDSUPPORT


23 
	~"Sd2C¨d.h
"

25 #i‚de‡
SOFTWARE_SPI


29 #i‡(
SPR0
 !0 || 
SPR1
 != 1)

30 #îr‹ 
u√x≥˘ed
 
SPCR
 
bôs


36 
	$•iInô
(
uöt8_t
 
•iR©e
) {

38 
SPCR
 = (1 << 
SPE
Ë| (1 << 
MSTR
Ë| (
•iR©e
 >> 1);

39 
SPSR
 = 
•iR©e
 & 1 || spiR©ê=6 ? 0 : 1 << 
SPI2X
;

40 
	}
}

43 
uöt8_t
 
	$•iRec
() {

44 
SPDR
 = 0XFF;

45 !(
SPSR
 & (1 << 
SPIF
))) { }

46  
SPDR
;

47 
	}
}

50 
ölöe
 
__©åibuã__
((
Æways_ölöe
))

51 
	$•iRód
(
uöt8_t
* 
buf
, 
uöt16_t
 
nbyã
) {

52 i‡(
nbyã
-- == 0) ;

53 
SPDR
 = 0XFF;

54 
uöt16_t
 
i
 = 0; i < 
nbyã
; i++) {

55 !(
SPSR
 & (1 << 
SPIF
))) { }

56 
buf
[
i
] = 
SPDR
;

57 
SPDR
 = 0XFF;

59 !(
SPSR
 & (1 << 
SPIF
))) { }

60 
buf
[
nbyã
] = 
SPDR
;

61 
	}
}

64 
	$•iSíd
(
uöt8_t
 
b
) {

65 
SPDR
 = 
b
;

66 !(
SPSR
 & (1 << 
SPIF
))) { }

67 
	}
}

70 
ölöe
 
__©åibuã__
((
Æways_ölöe
))

71 
	$•iSídBlock
(
uöt8_t
 
tokí
, c⁄° uöt8_t* 
buf
) {

72 
SPDR
 = 
tokí
;

73 
uöt16_t
 
i
 = 0; i < 512; i += 2) {

74 !(
SPSR
 & (1 << 
SPIF
))) { }

75 
SPDR
 = 
buf
[
i
];

76 !(
SPSR
 & (1 << 
SPIF
))) { }

77 
SPDR
 = 
buf
[
i
 + 1];

79 !(
SPSR
 & (1 << 
SPIF
))) { }

80 
	}
}

85 
	#n›
 
asm
 vﬁ©ûê("n›\n\t")

	)

88 
uöt8_t
 
	$•iRec
() {

89 
uöt8_t
 
d©a
 = 0;

91 
	`˛i
();

93 
	`Á°DigôÆWrôe
(
SPI_MOSI_PIN
, 
HIGH
);

95 
uöt8_t
 
i
 = 0; i < 8; i++) {

96 
	`Á°DigôÆWrôe
(
SPI_SCK_PIN
, 
HIGH
);

99 
n›
;

100 
n›
;

102 
d©a
 <<= 1;

104 i‡(
	`Á°DigôÆRód
(
SPI_MISO_PIN
)Ë
d©a
 |= 1;

106 
	`Á°DigôÆWrôe
(
SPI_SCK_PIN
, 
LOW
);

109 
	`£i
();

110  
d©a
;

111 
	}
}

114 
	$•iRód
(
uöt8_t
* 
buf
, 
uöt16_t
 
nbyã
) {

115 
uöt16_t
 
i
 = 0; i < 
nbyã
; i++) {

116 
buf
[
i
] = 
	`•iRec
();

118 
	}
}

121 
	$•iSíd
(
uöt8_t
 
d©a
) {

123 
	`˛i
();

124 
uöt8_t
 
i
 = 0; i < 8; i++) {

125 
	`Á°DigôÆWrôe
(
SPI_SCK_PIN
, 
LOW
);

127 
	`Á°DigôÆWrôe
(
SPI_MOSI_PIN
, 
d©a
 & 0X80);

129 
d©a
 <<= 1;

131 
	`Á°DigôÆWrôe
(
SPI_SCK_PIN
, 
HIGH
);

134 
n›
;

135 
n›
;

136 
n›
;

137 
n›
;

139 
	`Á°DigôÆWrôe
(
SPI_SCK_PIN
, 
LOW
);

141 
	`£i
();

142 
	}
}

145 
	$•iSídBlock
(
uöt8_t
 
tokí
, c⁄° uöt8_t* 
buf
) {

146 
	`•iSíd
(
tokí
);

147 
uöt16_t
 
i
 = 0; i < 512; i++) {

148 
	`•iSíd
(
buf
[
i
]);

150 
	}
}

154 
uöt8_t
 
	gSd2C¨d
::
	$ˇrdComm™d
(
uöt8_t
 
cmd
, 
uöt32_t
 
¨g
) {

156 
	`chùSñe˘Low
();

159 
	`waôNŸBusy
(300);

162 
	`•iSíd
(
cmd
 | 0x40);

165 
öt8_t
 
s
 = 24; s >0; s -8Ë
	`•iSíd
(
¨g
 >> s);

168 
uöt8_t
 
¸c
 = 0XFF;

169 i‡(
cmd
 =
CMD0
Ë
¸c
 = 0X95;

170 i‡(
cmd
 =
CMD8
Ë
¸c
 = 0X87;

171 
	`•iSíd
(
¸c
);

174 i‡(
cmd
 =
CMD12
Ë
	`•iRec
();

177 
uöt8_t
 
i
 = 0; ((
°©us_
 = 
	`•iRec
()) & 0X80) && i != 0XFF; i++) { }

178  
°©us_
;

179 
	}
}

187 
uöt32_t
 
	gSd2C¨d
::
	$ˇrdSize
() {

188 
csd_t
 
csd
;

189 i‡(!
	`ªadCSD
(&
csd
))  0;

190 i‡(
csd
.
v1
.
csd_vî
 == 0) {

191 
uöt8_t
 
ªad_bl_Àn
 = 
csd
.
v1
.read_bl_len;

192 
uöt16_t
 
c_size
 = (
csd
.
v1
.
c_size_high
 << 10)

193 | (
csd
.
v1
.
c_size_mid
 << 2Ë| csd.v1.
c_size_low
;

194 
uöt8_t
 
c_size_mu…
 = (
csd
.
v1
.
c_size_mu…_high
 << 1)

195 | 
csd
.
v1
.
c_size_mu…_low
;

196  (
uöt32_t
)(
c_size
 + 1Ë<< (
c_size_mu…
 + 
ªad_bl_Àn
 - 7);

197 } i‡(
csd
.
v2
.
csd_vî
 == 1) {

198 
uöt32_t
 
c_size
 = ((uöt32_t)
csd
.
v2
.
c_size_high
 << 16)

199 | (
csd
.
v2
.
c_size_mid
 << 8Ë| csd.v2.
c_size_low
;

200  (
c_size
 + 1) << 10;

202 
	`îr‹
(
SD_CARD_ERROR_BAD_CSD
);

205 
	}
}

207 
	gSd2C¨d
::
	$chùSñe˘High
() {

208 
	`digôÆWrôe
(
chùSñe˘Pö_
, 
HIGH
);

209 
	}
}

211 
	gSd2C¨d
::
	$chùSñe˘Low
() {

212 #i‚de‡
SOFTWARE_SPI


213 
	`•iInô
(
•iR©e_
);

215 
	`digôÆWrôe
(
chùSñe˘Pö_
, 
LOW
);

216 
	}
}

231 
boﬁ
 
	gSd2C¨d
::
	$îa£
(
uöt32_t
 
fú°Block
, uöt32_à
œ°Block
) {

232 
csd_t
 
csd
;

233 i‡(!
	`ªadCSD
(&
csd
)Ë
Áû
;

235 i‡(!
csd
.
v1
.
îa£_blk_í
) {

237 
uöt8_t
 
m
 = (
csd
.
v1
.
£˘‹_size_high
 << 1Ë| csd.v1.
£˘‹_size_low
;

238 i‡((
fú°Block
 & 
m
Ë!0 || ((
œ°Block
 + 1) & m) != 0) {

240 
	`îr‹
(
SD_CARD_ERROR_ERASE_SINGLE_BLOCK
);

241 
Áû
;

244 i‡(
ty≥_
 !
SD_CARD_TYPE_SDHC
) {

245 
fú°Block
 <<= 9;

246 
œ°Block
 <<= 9;

248 i‡(
	`ˇrdComm™d
(
CMD32
, 
fú°Block
)

249 || 
	`ˇrdComm™d
(
CMD33
, 
œ°Block
)

250 || 
	`ˇrdComm™d
(
CMD38
, 0)) {

251 
	`îr‹
(
SD_CARD_ERROR_ERASE
);

252 
Áû
;

254 i‡(!
	`waôNŸBusy
(
SD_ERASE_TIMEOUT
)) {

255 
	`îr‹
(
SD_CARD_ERROR_ERASE_TIMEOUT
);

256 
Áû
;

258 
	`chùSñe˘High
();

259  
åue
;

261 
Áû
:

262 
	`chùSñe˘High
();

263  
Ál£
;

264 
	}
}

271 
boﬁ
 
	gSd2C¨d
::
	$îa£SögÀBlockE«bÀ
() {

272 
csd_t
 
csd
;

273  
	`ªadCSD
(&
csd
Ë? csd.
v1
.
îa£_blk_í
 : 
Ál£
;

274 
	}
}

286 
boﬁ
 
	gSd2C¨d
::
	$öô
(
uöt8_t
 
sckR©eID
, uöt8_à
chùSñe˘Pö
) {

287 
îr‹Code_
 = 
ty≥_
 = 0;

288 
chùSñe˘Pö_
 = 
chùSñe˘Pö
;

290 
uöt16_t
 
t0
 = (uöt16_t)
	`mûlis
();

291 
uöt32_t
 
¨g
;

294 
	`pöMode
(
chùSñe˘Pö_
, 
OUTPUT
);

295 
	`chùSñe˘High
();

296 
	`pöMode
(
SPI_MISO_PIN
, 
INPUT
);

297 
	`pöMode
(
SPI_MOSI_PIN
, 
OUTPUT
);

298 
	`pöMode
(
SPI_SCK_PIN
, 
OUTPUT
);

300 #i‚de‡
SOFTWARE_SPI


302 
	`pöMode
(
SS_PIN
, 
OUTPUT
);

304 #i‡
SET_SPI_SS_HIGH


305 
	`digôÆWrôe
(
SS_PIN
, 
HIGH
);

308 
•iR©e_
 = 
SPI_SD_INIT_RATE
;

309 
	`•iInô
(
•iR©e_
);

313 
uöt8_t
 
i
 = 0; i < 10; i++Ë
	`•iSíd
(0XFF);

316 (
°©us_
 = 
	`ˇrdComm™d
(
CMD0
, 0)Ë!
R1_IDLE_STATE
) {

317 i‡(((
uöt16_t
)
	`mûlis
(Ë- 
t0
Ë> 
SD_INIT_TIMEOUT
) {

318 
	`îr‹
(
SD_CARD_ERROR_CMD0
);

319 
Áû
;

323 i‡((
	`ˇrdComm™d
(
CMD8
, 0x1AAË& 
R1_ILLEGAL_COMMAND
)) {

324 
	`ty≥
(
SD_CARD_TYPE_SD1
);

327 
uöt8_t
 
i
 = 0; i < 4; i++Ë
°©us_
 = 
	`•iRec
();

328 i‡(
°©us_
 != 0XAA) {

329 
	`îr‹
(
SD_CARD_ERROR_CMD8
);

330 
Áû
;

332 
	`ty≥
(
SD_CARD_TYPE_SD2
);

335 
¨g
 = 
	`ty≥
(Ë=
SD_CARD_TYPE_SD2
 ? 0X40000000 : 0;

337 (
°©us_
 = 
	`ˇrdAcmd
(
ACMD41
, 
¨g
)Ë!
R1_READY_STATE
) {

339 i‡(((
uöt16_t
)
	`mûlis
(Ë- 
t0
Ë> 
SD_INIT_TIMEOUT
) {

340 
	`îr‹
(
SD_CARD_ERROR_ACMD41
);

341 
Áû
;

345 i‡(
	`ty≥
(Ë=
SD_CARD_TYPE_SD2
) {

346 i‡(
	`ˇrdComm™d
(
CMD58
, 0)) {

347 
	`îr‹
(
SD_CARD_ERROR_CMD58
);

348 
Áû
;

350 i‡((
	`•iRec
(Ë& 0XC0Ë=0XC0Ë
	`ty≥
(
SD_CARD_TYPE_SDHC
);

352 
uöt8_t
 
i
 = 0; i < 3; i++Ë
	`•iRec
();

354 
	`chùSñe˘High
();

356 #i‚de‡
SOFTWARE_SPI


357  
	`£tSckR©e
(
sckR©eID
);

359  
åue
;

362 
Áû
:

363 
	`chùSñe˘High
();

364  
Ál£
;

365 
	}
}

375 
boﬁ
 
	gSd2C¨d
::
	$ªadBlock
(
uöt32_t
 
blockNumbî
, 
uöt8_t
* 
d°
) {

376 #ifde‡
SD_CHECK_AND_RETRY


377 
uöt8_t
 
ªåyC¡
 = 3;

379 i‡(
	`ty≥
()!
SD_CARD_TYPE_SDHC
Ë
blockNumbî
 <<= 9;

380 
ªåy2
:

381 
ªåyC¡
 --;

382 i‡(
	`ˇrdComm™d
(
CMD17
, 
blockNumbî
)) {

383 
	`îr‹
(
SD_CARD_ERROR_CMD17
);

384 i‡(
ªåyC¡
 > 0Ë
ªåy
;

385 
Áû
;

387 i‡(!
	`ªadD©a
(
d°
, 512))

389 i‡(
ªåyC¡
 > 0Ë
ªåy
;

390 
Áû
;

392  
åue
;

393 
ªåy
:

394 
	`chùSñe˘High
();

395 
	`ˇrdComm™d
(
CMD12
, 0);

396 
îr‹Code_
 = 0;

397 
ªåy2
;

400 i‡(
	`ty≥
()!
SD_CARD_TYPE_SDHC
Ë
blockNumbî
 <<= 9;

401 i‡(
	`ˇrdComm™d
(
CMD17
, 
blockNumbî
)) {

402 
	`îr‹
(
SD_CARD_ERROR_CMD17
);

403 
Áû
;

405  
	`ªadD©a
(
d°
, 512);

408 
Áû
:

409 
	`chùSñe˘High
();

410  
Ál£
;

411 
	}
}

420 
boﬁ
 
	gSd2C¨d
::
	$ªadD©a
(
uöt8_t
 *
d°
) {

421 
	`chùSñe˘Low
();

422  
	`ªadD©a
(
d°
, 512);

423 
	}
}

425 #ifde‡
SD_CHECK_AND_RETRY


426 c⁄° 
uöt16_t
 
	g¸˘ab
[] 
	gPROGMEM
 = {

460 
uöt16_t
 
	$CRC_CCITT
(c⁄° 
uöt8_t
* 
d©a
, 
size_t
 
n
) {

461 
uöt16_t
 
¸c
 = 0;

462 
size_t
 
i
 = 0; i < 
n
; i++) {

463 
¸c
 = 
	`pgm_ªad_w‹d
(&
¸˘ab
[(¸¯>> 8 ^ 
d©a
[
i
]) & 0XFF]) ^ (crc << 8);

465  
¸c
;

466 
	}
}

470 
boﬁ
 
	gSd2C¨d
::
	$ªadD©a
(
uöt8_t
* 
d°
, 
uöt16_t
 
cou¡
) {

472 
uöt16_t
 
t0
 = 
	`mûlis
();

473 (
°©us_
 = 
	`•iRec
()) == 0XFF) {

474 i‡(((
uöt16_t
)
	`mûlis
(Ë- 
t0
Ë> 
SD_READ_TIMEOUT
) {

475 
	`îr‹
(
SD_CARD_ERROR_READ_TIMEOUT
);

476 
Áû
;

479 i‡(
°©us_
 !
DATA_START_BLOCK
) {

480 
	`îr‹
(
SD_CARD_ERROR_READ
);

481 
Áû
;

484 
	`•iRód
(
d°
, 
cou¡
);

486 #ifde‡
SD_CHECK_AND_RETRY


488 
uöt16_t
 
ˇlcCrc
 = 
	`CRC_CCITT
(
d°
, 
cou¡
);

489 
uöt16_t
 
ªcvCrc
 = 
	`•iRec
() << 8;

490 
ªcvCrc
 |
	`•iRec
();

491 i‡(
ˇlcCrc
 !
ªcvCrc
)

493 
	`îr‹
(
SD_CARD_ERROR_CRC
);

494 
Áû
;

499 
	`•iRec
();

500 
	`•iRec
();

502 
	`chùSñe˘High
();

503  
åue
;

505 
Áû
:

506 
	`chùSñe˘High
();

507  
Ál£
;

508 
	}
}

511 
boﬁ
 
	gSd2C¨d
::
	$ªadRegi°î
(
uöt8_t
 
cmd
, * 
buf
) {

512 
uöt8_t
* 
d°
 = 
ªöãΩªt_ˇ°
<uöt8_t*>(
buf
);

513 i‡(
	`ˇrdComm™d
(
cmd
, 0)) {

514 
	`îr‹
(
SD_CARD_ERROR_READ_REG
);

515 
Áû
;

517  
	`ªadD©a
(
d°
, 16);

519 
Áû
:

520 
	`chùSñe˘High
();

521  
Ál£
;

522 
	}
}

534 
boﬁ
 
	gSd2C¨d
::
	$ªadSèπ
(
uöt32_t
 
blockNumbî
) {

535 i‡(
	`ty≥
()!
SD_CARD_TYPE_SDHC
Ë
blockNumbî
 <<= 9;

536 i‡(
	`ˇrdComm™d
(
CMD18
, 
blockNumbî
)) {

537 
	`îr‹
(
SD_CARD_ERROR_CMD18
);

538 
Áû
;

540 
	`chùSñe˘High
();

541  
åue
;

543 
Áû
:

544 
	`chùSñe˘High
();

545  
Ál£
;

546 
	}
}

553 
boﬁ
 
	gSd2C¨d
::
	$ªadSt›
() {

554 
	`chùSñe˘Low
();

555 i‡(
	`ˇrdComm™d
(
CMD12
, 0)) {

556 
	`îr‹
(
SD_CARD_ERROR_CMD12
);

557 
Áû
;

559 
	`chùSñe˘High
();

560  
åue
;

562 
Áû
:

563 
	`chùSñe˘High
();

564  
Ál£
;

565 
	}
}

579 
boﬁ
 
	gSd2C¨d
::
	$£tSckR©e
(
uöt8_t
 
sckR©eID
) {

580 i‡(
sckR©eID
 > 6) {

581 
	`îr‹
(
SD_CARD_ERROR_SCK_RATE
);

582  
Ál£
;

584 
•iR©e_
 = 
sckR©eID
;

585  
åue
;

586 
	}
}

589 
boﬁ
 
	gSd2C¨d
::
	$waôNŸBusy
(
uöt16_t
 
timeoutMûlis
) {

590 
uöt16_t
 
t0
 = 
	`mûlis
();

591 
	`•iRec
() != 0XFF) {

592 i‡(((
uöt16_t
)
	`mûlis
(Ë- 
t0
Ë>
timeoutMûlis
Ë
Áû
;

594  
åue
;

596 
Áû
:

597  
Ál£
;

598 
	}
}

608 
boﬁ
 
	gSd2C¨d
::
	$wrôeBlock
(
uöt32_t
 
blockNumbî
, c⁄° 
uöt8_t
* 
§c
) {

610 i‡(
	`ty≥
(Ë!
SD_CARD_TYPE_SDHC
Ë
blockNumbî
 <<= 9;

611 i‡(
	`ˇrdComm™d
(
CMD24
, 
blockNumbî
)) {

612 
	`îr‹
(
SD_CARD_ERROR_CMD24
);

613 
Áû
;

615 i‡(!
	`wrôeD©a
(
DATA_START_BLOCK
, 
§c
)Ë
Áû
;

618 i‡(!
	`waôNŸBusy
(
SD_WRITE_TIMEOUT
)) {

619 
	`îr‹
(
SD_CARD_ERROR_WRITE_TIMEOUT
);

620 
Áû
;

623 i‡(
	`ˇrdComm™d
(
CMD13
, 0Ë|| 
	`•iRec
()) {

624 
	`îr‹
(
SD_CARD_ERROR_WRITE_PROGRAMMING
);

625 
Áû
;

627 
	`chùSñe˘High
();

628  
åue
;

630 
Áû
:

631 
	`chùSñe˘High
();

632  
Ál£
;

633 
	}
}

640 
boﬁ
 
	gSd2C¨d
::
	$wrôeD©a
(c⁄° 
uöt8_t
* 
§c
) {

641 
	`chùSñe˘Low
();

643 i‡(!
	`waôNŸBusy
(
SD_WRITE_TIMEOUT
)Ë
Áû
;

644 i‡(!
	`wrôeD©a
(
WRITE_MULTIPLE_TOKEN
, 
§c
)Ë
Áû
;

645 
	`chùSñe˘High
();

646  
åue
;

648 
Áû
:

649 
	`îr‹
(
SD_CARD_ERROR_WRITE_MULTIPLE
);

650 
	`chùSñe˘High
();

651  
Ál£
;

652 
	}
}

655 
boﬁ
 
	gSd2C¨d
::
	$wrôeD©a
(
uöt8_t
 
tokí
, c⁄° uöt8_t* 
§c
) {

656 
	`•iSídBlock
(
tokí
, 
§c
);

658 
	`•iSíd
(0xff);

659 
	`•iSíd
(0xff);

661 
°©us_
 = 
	`•iRec
();

662 i‡((
°©us_
 & 
DATA_RES_MASK
Ë!
DATA_RES_ACCEPTED
) {

663 
	`îr‹
(
SD_CARD_ERROR_WRITE
);

664 
Áû
;

666  
åue
;

668 
Áû
:

669 
	`chùSñe˘High
();

670  
Ál£
;

671 
	}
}

684 
boﬁ
 
	gSd2C¨d
::
	$wrôeSèπ
(
uöt32_t
 
blockNumbî
, uöt32_à
îa£Cou¡
) {

686 i‡(
	`ˇrdAcmd
(
ACMD23
, 
îa£Cou¡
)) {

687 
	`îr‹
(
SD_CARD_ERROR_ACMD23
);

688 
Áû
;

691 i‡(
	`ty≥
(Ë!
SD_CARD_TYPE_SDHC
Ë
blockNumbî
 <<= 9;

692 i‡(
	`ˇrdComm™d
(
CMD25
, 
blockNumbî
)) {

693 
	`îr‹
(
SD_CARD_ERROR_CMD25
);

694 
Áû
;

696 
	`chùSñe˘High
();

697  
åue
;

699 
Áû
:

700 
	`chùSñe˘High
();

701  
Ál£
;

702 
	}
}

709 
boﬁ
 
	gSd2C¨d
::
	$wrôeSt›
() {

710 
	`chùSñe˘Low
();

711 i‡(!
	`waôNŸBusy
(
SD_WRITE_TIMEOUT
)Ë
Áû
;

712 
	`•iSíd
(
STOP_TRAN_TOKEN
);

713 i‡(!
	`waôNŸBusy
(
SD_WRITE_TIMEOUT
)Ë
Áû
;

714 
	`chùSñe˘High
();

715  
åue
;

717 
Áû
:

718 
	`îr‹
(
SD_CARD_ERROR_STOP_TRAN
);

719 
	`chùSñe˘High
();

720  
Ál£
;

721 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/Sd2Card.h

21 
	~"M¨lö.h
"

22 #ifde‡
SDSUPPORT


24 #i‚de‡
Sd2C¨d_h


25 
	#Sd2C¨d_h


	)

30 
	~"SdF©C⁄fig.h
"

31 
	~"Sd2PöM≠.h
"

32 
	~"SdInfo.h
"

36 
uöt8_t
 c⁄° 
	gSPI_FULL_SPEED
 = 0;

38 
uöt8_t
 c⁄° 
	gSPI_HALF_SPEED
 = 1;

40 
uöt8_t
 c⁄° 
	gSPI_QUARTER_SPEED
 = 2;

42 
uöt8_t
 c⁄° 
	gSPI_EIGHTH_SPEED
 = 3;

44 
uöt8_t
 c⁄° 
	gSPI_SIXTEENTH_SPEED
 = 4;

47 
uöt16_t
 c⁄° 
	gSD_INIT_TIMEOUT
 = 2000;

49 
uöt16_t
 c⁄° 
	gSD_ERASE_TIMEOUT
 = 10000;

51 
uöt16_t
 c⁄° 
	gSD_READ_TIMEOUT
 = 300;

53 
uöt16_t
 c⁄° 
	gSD_WRITE_TIMEOUT
 = 600;

57 
uöt8_t
 c⁄° 
	gSD_CARD_ERROR_CMD0
 = 0X1;

59 
uöt8_t
 c⁄° 
	gSD_CARD_ERROR_CMD8
 = 0X2;

61 
uöt8_t
 c⁄° 
	gSD_CARD_ERROR_CMD12
 = 0X3;

63 
uöt8_t
 c⁄° 
	gSD_CARD_ERROR_CMD17
 = 0X4;

65 
uöt8_t
 c⁄° 
	gSD_CARD_ERROR_CMD18
 = 0X5;

67 
uöt8_t
 c⁄° 
	gSD_CARD_ERROR_CMD24
 = 0X6;

69 
uöt8_t
 c⁄° 
	gSD_CARD_ERROR_CMD25
 = 0X7;

71 
uöt8_t
 c⁄° 
	gSD_CARD_ERROR_CMD58
 = 0X8;

73 
uöt8_t
 c⁄° 
	gSD_CARD_ERROR_ACMD23
 = 0X9;

75 
uöt8_t
 c⁄° 
	gSD_CARD_ERROR_ACMD41
 = 0XA;

77 
uöt8_t
 c⁄° 
	gSD_CARD_ERROR_BAD_CSD
 = 0XB;

79 
uöt8_t
 c⁄° 
	gSD_CARD_ERROR_ERASE
 = 0XC;

81 
uöt8_t
 c⁄° 
	gSD_CARD_ERROR_ERASE_SINGLE_BLOCK
 = 0XD;

83 
uöt8_t
 c⁄° 
	gSD_CARD_ERROR_ERASE_TIMEOUT
 = 0XE;

85 
uöt8_t
 c⁄° 
	gSD_CARD_ERROR_READ
 = 0XF;

87 
uöt8_t
 c⁄° 
	gSD_CARD_ERROR_READ_REG
 = 0X10;

89 
uöt8_t
 c⁄° 
	gSD_CARD_ERROR_READ_TIMEOUT
 = 0X11;

91 
uöt8_t
 c⁄° 
	gSD_CARD_ERROR_STOP_TRAN
 = 0X12;

93 
uöt8_t
 c⁄° 
	gSD_CARD_ERROR_WRITE
 = 0X13;

95 
uöt8_t
 c⁄° 
	gSD_CARD_ERROR_WRITE_BLOCK_ZERO
 = 0X14;

97 
uöt8_t
 c⁄° 
	gSD_CARD_ERROR_WRITE_MULTIPLE
 = 0X15;

99 
uöt8_t
 c⁄° 
	gSD_CARD_ERROR_WRITE_PROGRAMMING
 = 0X16;

101 
uöt8_t
 c⁄° 
	gSD_CARD_ERROR_WRITE_TIMEOUT
 = 0X17;

103 
uöt8_t
 c⁄° 
	gSD_CARD_ERROR_SCK_RATE
 = 0X18;

105 
uöt8_t
 c⁄° 
	gSD_CARD_ERROR_INIT_NOT_CALLED
 = 0X19;

107 
uöt8_t
 c⁄° 
	gSD_CARD_ERROR_CRC
 = 0X20;

111 
uöt8_t
 c⁄° 
	gSD_CARD_TYPE_SD1
 = 1;

113 
uöt8_t
 c⁄° 
	gSD_CARD_TYPE_SD2
 = 2;

115 
uöt8_t
 c⁄° 
	gSD_CARD_TYPE_SDHC
 = 3;

120 #i‡
MEGA_SOFT_SPI
 && (
deföed
(
__AVR_ATmega1280__
)||deföed(
__AVR_ATmega2560__
))

121 
	#SOFTWARE_SPI


	)

122 #ñi‡
USE_SOFTWARE_SPI


123 
	#SOFTWARE_SPI


	)

128 #i‚de‡
SOFTWARE_SPI


131 
uöt8_t
 c⁄° 
	gSD_CHIP_SELECT_PIN
 = 
SS_PIN
;

134 
uöt8_t
 c⁄° 
	gSPI_MOSI_PIN
 = 
MOSI_PIN
;

136 
uöt8_t
 c⁄° 
	gSPI_MISO_PIN
 = 
MISO_PIN
;

138 
uöt8_t
 c⁄° 
	gSPI_SCK_PIN
 = 
SCK_PIN
;

143 
uöt8_t
 c⁄° 
	gSD_CHIP_SELECT_PIN
 = 
SOFT_SPI_CS_PIN
;

145 
uöt8_t
 c⁄° 
	gSPI_MOSI_PIN
 = 
SOFT_SPI_MOSI_PIN
;

147 
uöt8_t
 c⁄° 
	gSPI_MISO_PIN
 = 
SOFT_SPI_MISO_PIN
;

149 
uöt8_t
 c⁄° 
	gSPI_SCK_PIN
 = 
SOFT_SPI_SCK_PIN
;

156 ˛as†
	cSd2C¨d
 {

157 
	mpublic
:

159 
	$Sd2C¨d
(Ë: 
	`îr‹Code_
(
SD_CARD_ERROR_INIT_NOT_CALLED
), 
	$ty≥_
(0) {}

160 
uöt32_t
 
	`ˇrdSize
();

161 
boﬁ
 
	`îa£
(
uöt32_t
 
fú°Block
, uöt32_à
œ°Block
);

162 
boﬁ
 
	`îa£SögÀBlockE«bÀ
();

167 
	$îr‹
(
uöt8_t
 
code
Ë{
îr‹Code_
 = code;
	}
}

171 
	$îr‹Code
(Ëc⁄° { 
îr‹Code_
;
	}
}

173 
	$îr‹D©a
(Ëc⁄° { 
°©us_
;
	}
}

180 
boﬁ
 
öô
(
uöt8_t
 
sckR©eID
 = 
SPI_FULL_SPEED
,

181 
uöt8_t
 
chùSñe˘Pö
 = 
SD_CHIP_SELECT_PIN
);

182 
boﬁ
 
ªadBlock
(
uöt32_t
 
block
, 
uöt8_t
* 
d°
);

192 
boﬁ
 
	$ªadCID
(
cid_t
* 
cid
) {

193  
	`ªadRegi°î
(
CMD10
, 
cid
);

194 
	}
}

203 
boﬁ
 
	$ªadCSD
(
csd_t
* 
csd
) {

204  
	`ªadRegi°î
(
CMD9
, 
csd
);

205 
	}
}

206 
boﬁ
 
ªadD©a
(
uöt8_t
 *
d°
);

207 
boﬁ
 
ªadSèπ
(
uöt32_t
 
blockNumbî
);

208 
boﬁ
 
ªadSt›
();

209 
boﬁ
 
£tSckR©e
(
uöt8_t
 
sckR©eID
);

213 
	$ty≥
(Ëc⁄° { 
ty≥_
;
	}
}

214 
boﬁ
 
wrôeBlock
(
uöt32_t
 
blockNumbî
, c⁄° 
uöt8_t
* 
§c
);

215 
boﬁ
 
wrôeD©a
(c⁄° 
uöt8_t
* 
§c
);

216 
boﬁ
 
wrôeSèπ
(
uöt32_t
 
blockNumbî
, uöt32_à
îa£Cou¡
);

217 
boﬁ
 
wrôeSt›
();

218 
	g¥iv©e
:

220 
uöt8_t
 
chùSñe˘Pö_
;

221 
uöt8_t
 
	gîr‹Code_
;

222 
uöt8_t
 
	g•iR©e_
;

223 
uöt8_t
 
	g°©us_
;

224 
uöt8_t
 
	gty≥_
;

226 
uöt8_t
 
	$ˇrdAcmd
(
uöt8_t
 
cmd
, 
uöt32_t
 
¨g
) {

227 
	`ˇrdComm™d
(
CMD55
, 0);

228  
	`ˇrdComm™d
(
cmd
, 
¨g
);

229 
	}
}

230 
uöt8_t
 
ˇrdComm™d
(uöt8_à
cmd
, 
uöt32_t
 
¨g
);

232 
boﬁ
 
ªadD©a
(
uöt8_t
* 
d°
, 
uöt16_t
 
cou¡
);

233 
boﬁ
 
ªadRegi°î
(
uöt8_t
 
cmd
, * 
buf
);

234 
chùSñe˘High
();

235 
chùSñe˘Low
();

236 
	$ty≥
(
uöt8_t
 
vÆue
Ë{
ty≥_
 = vÆue;
	}
}

237 
boﬁ
 
waôNŸBusy
(
uöt16_t
 
timeoutMûlis
);

238 
boﬁ
 
wrôeD©a
(
uöt8_t
 
tokí
, c⁄° uöt8_t* 
§c
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/Sd2PinMap.h

21 
	~"M¨lö.h
"

22 #ifde‡
SDSUPPORT


24 #i‚de‡
Sd2PöM≠_h


25 
	#Sd2PöM≠_h


	)

26 
	~<avr/io.h
>

29 
	spö_m≠_t
 {

30 vﬁ©ûê
uöt8_t
* 
	mddr
;

31 vﬁ©ûê
uöt8_t
* 
	mpö
;

32 vﬁ©ûê
uöt8_t
* 
	mp‹t
;

33 
uöt8_t
 
	mbô
;

36 #i‡
deföed
(
__AVR_ATmega1280__
)\

37 || 
	$deföed
(
__AVR_ATmega2560__
)

41 
uöt8_t
 c⁄° 
SDA_PIN
 = 20;

42 
uöt8_t
 c⁄° 
SCL_PIN
 = 21;

44 #unde‡
MOSI_PIN


45 #unde‡
MISO_PIN


47 
uöt8_t
 c⁄° 
SS_PIN
 = 53;

48 
uöt8_t
 c⁄° 
MOSI_PIN
 = 51;

49 
uöt8_t
 c⁄° 
MISO_PIN
 = 50;

50 
uöt8_t
 c⁄° 
SCK_PIN
 = 52;

52 c⁄° 
pö_m≠_t
 
digôÆPöM≠
[] = {

53 {&
DDRE
, &
PINE
, &
PORTE
, 0},

54 {&
DDRE
, &
PINE
, &
PORTE
, 1},

55 {&
DDRE
, &
PINE
, &
PORTE
, 4},

56 {&
DDRE
, &
PINE
, &
PORTE
, 5},

57 {&
DDRG
, &
PING
, &
PORTG
, 5},

58 {&
DDRE
, &
PINE
, &
PORTE
, 3},

59 {&
DDRH
, &
PINH
, &
PORTH
, 3},

60 {&
DDRH
, &
PINH
, &
PORTH
, 4},

61 {&
DDRH
, &
PINH
, &
PORTH
, 5},

62 {&
DDRH
, &
PINH
, &
PORTH
, 6},

63 {&
DDRB
, &
PINB
, &
PORTB
, 4},

64 {&
DDRB
, &
PINB
, &
PORTB
, 5},

65 {&
DDRB
, &
PINB
, &
PORTB
, 6},

66 {&
DDRB
, &
PINB
, &
PORTB
, 7},

67 {&
DDRJ
, &
PINJ
, &
PORTJ
, 1},

68 {&
DDRJ
, &
PINJ
, &
PORTJ
, 0},

69 {&
DDRH
, &
PINH
, &
PORTH
, 1},

70 {&
DDRH
, &
PINH
, &
PORTH
, 0},

71 {&
DDRD
, &
PIND
, &
PORTD
, 3},

72 {&
DDRD
, &
PIND
, &
PORTD
, 2},

73 {&
DDRD
, &
PIND
, &
PORTD
, 1},

74 {&
DDRD
, &
PIND
, &
PORTD
, 0},

75 {&
DDRA
, &
PINA
, &
PORTA
, 0},

76 {&
DDRA
, &
PINA
, &
PORTA
, 1},

77 {&
DDRA
, &
PINA
, &
PORTA
, 2},

78 {&
DDRA
, &
PINA
, &
PORTA
, 3},

79 {&
DDRA
, &
PINA
, &
PORTA
, 4},

80 {&
DDRA
, &
PINA
, &
PORTA
, 5},

81 {&
DDRA
, &
PINA
, &
PORTA
, 6},

82 {&
DDRA
, &
PINA
, &
PORTA
, 7},

83 {&
DDRC
, &
PINC
, &
PORTC
, 7},

84 {&
DDRC
, &
PINC
, &
PORTC
, 6},

85 {&
DDRC
, &
PINC
, &
PORTC
, 5},

86 {&
DDRC
, &
PINC
, &
PORTC
, 4},

87 {&
DDRC
, &
PINC
, &
PORTC
, 3},

88 {&
DDRC
, &
PINC
, &
PORTC
, 2},

89 {&
DDRC
, &
PINC
, &
PORTC
, 1},

90 {&
DDRC
, &
PINC
, &
PORTC
, 0},

91 {&
DDRD
, &
PIND
, &
PORTD
, 7},

92 {&
DDRG
, &
PING
, &
PORTG
, 2},

93 {&
DDRG
, &
PING
, &
PORTG
, 1},

94 {&
DDRG
, &
PING
, &
PORTG
, 0},

95 {&
DDRL
, &
PINL
, &
PORTL
, 7},

96 {&
DDRL
, &
PINL
, &
PORTL
, 6},

97 {&
DDRL
, &
PINL
, &
PORTL
, 5},

98 {&
DDRL
, &
PINL
, &
PORTL
, 4},

99 {&
DDRL
, &
PINL
, &
PORTL
, 3},

100 {&
DDRL
, &
PINL
, &
PORTL
, 2},

101 {&
DDRL
, &
PINL
, &
PORTL
, 1},

102 {&
DDRL
, &
PINL
, &
PORTL
, 0},

103 {&
DDRB
, &
PINB
, &
PORTB
, 3},

104 {&
DDRB
, &
PINB
, &
PORTB
, 2},

105 {&
DDRB
, &
PINB
, &
PORTB
, 1},

106 {&
DDRB
, &
PINB
, &
PORTB
, 0},

107 {&
DDRF
, &
PINF
, &
PORTF
, 0},

108 {&
DDRF
, &
PINF
, &
PORTF
, 1},

109 {&
DDRF
, &
PINF
, &
PORTF
, 2},

110 {&
DDRF
, &
PINF
, &
PORTF
, 3},

111 {&
DDRF
, &
PINF
, &
PORTF
, 4},

112 {&
DDRF
, &
PINF
, &
PORTF
, 5},

113 {&
DDRF
, &
PINF
, &
PORTF
, 6},

114 {&
DDRF
, &
PINF
, &
PORTF
, 7},

115 {&
DDRK
, &
PINK
, &
PORTK
, 0},

116 {&
DDRK
, &
PINK
, &
PORTK
, 1},

117 {&
DDRK
, &
PINK
, &
PORTK
, 2},

118 {&
DDRK
, &
PINK
, &
PORTK
, 3},

119 {&
DDRK
, &
PINK
, &
PORTK
, 4},

120 {&
DDRK
, &
PINK
, &
PORTK
, 5},

121 {&
DDRK
, &
PINK
, &
PORTK
, 6},

122 {&
DDRK
, &
PINK
, &
PORTK
, 7}

123 
	}
};

125 #ñi‡
deföed
(
__AVR_ATmega644P__
)\

126 || 
deföed
(
__AVR_ATmega644__
)\

127 || 
	$deföed
(
__AVR_ATmega1284P__
)

131 
uöt8_t
 c⁄° 
SDA_PIN
 = 17;

132 
uöt8_t
 c⁄° 
SCL_PIN
 = 18;

135 
uöt8_t
 c⁄° 
SS_PIN
 = 4;

136 
uöt8_t
 c⁄° 
MOSI_PIN
 = 5;

137 
uöt8_t
 c⁄° 
MISO_PIN
 = 6;

138 
uöt8_t
 c⁄° 
SCK_PIN
 = 7;

140 c⁄° 
pö_m≠_t
 
digôÆPöM≠
[] = {

141 {&
DDRB
, &
PINB
, &
PORTB
, 0},

142 {&
DDRB
, &
PINB
, &
PORTB
, 1},

143 {&
DDRB
, &
PINB
, &
PORTB
, 2},

144 {&
DDRB
, &
PINB
, &
PORTB
, 3},

145 {&
DDRB
, &
PINB
, &
PORTB
, 4},

146 {&
DDRB
, &
PINB
, &
PORTB
, 5},

147 {&
DDRB
, &
PINB
, &
PORTB
, 6},

148 {&
DDRB
, &
PINB
, &
PORTB
, 7},

149 {&
DDRD
, &
PIND
, &
PORTD
, 0},

150 {&
DDRD
, &
PIND
, &
PORTD
, 1},

151 {&
DDRD
, &
PIND
, &
PORTD
, 2},

152 {&
DDRD
, &
PIND
, &
PORTD
, 3},

153 {&
DDRD
, &
PIND
, &
PORTD
, 4},

154 {&
DDRD
, &
PIND
, &
PORTD
, 5},

155 {&
DDRD
, &
PIND
, &
PORTD
, 6},

156 {&
DDRD
, &
PIND
, &
PORTD
, 7},

157 {&
DDRC
, &
PINC
, &
PORTC
, 0},

158 {&
DDRC
, &
PINC
, &
PORTC
, 1},

159 {&
DDRC
, &
PINC
, &
PORTC
, 2},

160 {&
DDRC
, &
PINC
, &
PORTC
, 3},

161 {&
DDRC
, &
PINC
, &
PORTC
, 4},

162 {&
DDRC
, &
PINC
, &
PORTC
, 5},

163 {&
DDRC
, &
PINC
, &
PORTC
, 6},

164 {&
DDRC
, &
PINC
, &
PORTC
, 7},

165 {&
DDRA
, &
PINA
, &
PORTA
, 7},

166 {&
DDRA
, &
PINA
, &
PORTA
, 6},

167 {&
DDRA
, &
PINA
, &
PORTA
, 5},

168 {&
DDRA
, &
PINA
, &
PORTA
, 4},

169 {&
DDRA
, &
PINA
, &
PORTA
, 3},

170 {&
DDRA
, &
PINA
, &
PORTA
, 2},

171 {&
DDRA
, &
PINA
, &
PORTA
, 1},

172 {&
DDRA
, &
PINA
, &
PORTA
, 0}

173 
	}
};

175 #ñi‡
deföed
(
__AVR_ATmega32U4__
)

179 
uöt8_t
 c⁄° 
	gSDA_PIN
 = 6;

180 
uöt8_t
 c⁄° 
	gSCL_PIN
 = 5;

183 
uöt8_t
 c⁄° 
	gSS_PIN
 = 0;

184 
uöt8_t
 c⁄° 
	gMOSI_PIN
 = 2;

185 
uöt8_t
 c⁄° 
	gMISO_PIN
 = 3;

186 
uöt8_t
 c⁄° 
	gSCK_PIN
 = 1;

188 c⁄° 
pö_m≠_t
 
	gdigôÆPöM≠
[] = {

189 {&
DDRB
, &
PINB
, &
PORTB
, 0},

190 {&
DDRB
, &
PINB
, &
PORTB
, 1},

191 {&
DDRB
, &
PINB
, &
PORTB
, 2},

192 {&
DDRB
, &
PINB
, &
PORTB
, 3},

193 {&
DDRB
, &
PINB
, &
PORTB
, 7},

194 {&
DDRD
, &
PIND
, &
PORTD
, 0},

195 {&
DDRD
, &
PIND
, &
PORTD
, 1},

196 {&
DDRD
, &
PIND
, &
PORTD
, 2},

197 {&
DDRD
, &
PIND
, &
PORTD
, 3},

198 {&
DDRC
, &
PINC
, &
PORTC
, 6},

199 {&
DDRC
, &
PINC
, &
PORTC
, 7},

200 {&
DDRD
, &
PIND
, &
PORTD
, 6},

201 {&
DDRD
, &
PIND
, &
PORTD
, 7},

202 {&
DDRB
, &
PINB
, &
PORTB
, 4},

203 {&
DDRB
, &
PINB
, &
PORTB
, 5},

204 {&
DDRB
, &
PINB
, &
PORTB
, 6},

205 {&
DDRF
, &
PINF
, &
PORTF
, 7},

206 {&
DDRF
, &
PINF
, &
PORTF
, 6},

207 {&
DDRF
, &
PINF
, &
PORTF
, 5},

208 {&
DDRF
, &
PINF
, &
PORTF
, 4},

209 {&
DDRF
, &
PINF
, &
PORTF
, 1},

210 {&
DDRF
, &
PINF
, &
PORTF
, 0},

211 {&
DDRD
, &
PIND
, &
PORTD
, 4},

212 {&
DDRD
, &
PIND
, &
PORTD
, 5},

213 {&
DDRE
, &
PINE
, &
PORTE
, 6}

216 #ñi‡
deföed
(
__AVR_AT90USB646__
)\

217 || 
	$deföed
(
__AVR_AT90USB1286__
)

221 
uöt8_t
 c⁄° 
SDA_PIN
 = 1;

222 
uöt8_t
 c⁄° 
SCL_PIN
 = 0;

225 
uöt8_t
 c⁄° 
SS_PIN
 = 20;

226 
uöt8_t
 c⁄° 
MOSI_PIN
 = 22;

227 
uöt8_t
 c⁄° 
MISO_PIN
 = 23;

228 
uöt8_t
 c⁄° 
SCK_PIN
 = 21;

230 c⁄° 
pö_m≠_t
 
digôÆPöM≠
[] = {

231 {&
DDRD
, &
PIND
, &
PORTD
, 0},

232 {&
DDRD
, &
PIND
, &
PORTD
, 1},

233 {&
DDRD
, &
PIND
, &
PORTD
, 2},

234 {&
DDRD
, &
PIND
, &
PORTD
, 3},

235 {&
DDRD
, &
PIND
, &
PORTD
, 4},

236 {&
DDRD
, &
PIND
, &
PORTD
, 5},

237 {&
DDRD
, &
PIND
, &
PORTD
, 6},

238 {&
DDRD
, &
PIND
, &
PORTD
, 7},

239 {&
DDRE
, &
PINE
, &
PORTE
, 0},

240 {&
DDRE
, &
PINE
, &
PORTE
, 1},

241 {&
DDRC
, &
PINC
, &
PORTC
, 0},

242 {&
DDRC
, &
PINC
, &
PORTC
, 1},

243 {&
DDRC
, &
PINC
, &
PORTC
, 2},

244 {&
DDRC
, &
PINC
, &
PORTC
, 3},

245 {&
DDRC
, &
PINC
, &
PORTC
, 4},

246 {&
DDRC
, &
PINC
, &
PORTC
, 5},

247 {&
DDRC
, &
PINC
, &
PORTC
, 6},

248 {&
DDRC
, &
PINC
, &
PORTC
, 7},

249 {&
DDRE
, &
PINE
, &
PORTE
, 6},

250 {&
DDRE
, &
PINE
, &
PORTE
, 7},

251 {&
DDRB
, &
PINB
, &
PORTB
, 0},

252 {&
DDRB
, &
PINB
, &
PORTB
, 1},

253 {&
DDRB
, &
PINB
, &
PORTB
, 2},

254 {&
DDRB
, &
PINB
, &
PORTB
, 3},

255 {&
DDRB
, &
PINB
, &
PORTB
, 4},

256 {&
DDRB
, &
PINB
, &
PORTB
, 5},

257 {&
DDRB
, &
PINB
, &
PORTB
, 6},

258 {&
DDRB
, &
PINB
, &
PORTB
, 7},

259 {&
DDRA
, &
PINA
, &
PORTA
, 0},

260 {&
DDRA
, &
PINA
, &
PORTA
, 1},

261 {&
DDRA
, &
PINA
, &
PORTA
, 2},

262 {&
DDRA
, &
PINA
, &
PORTA
, 3},

263 {&
DDRA
, &
PINA
, &
PORTA
, 4},

264 {&
DDRA
, &
PINA
, &
PORTA
, 5},

265 {&
DDRA
, &
PINA
, &
PORTA
, 6},

266 {&
DDRA
, &
PINA
, &
PORTA
, 7},

267 {&
DDRE
, &
PINE
, &
PORTE
, 4},

268 {&
DDRE
, &
PINE
, &
PORTE
, 5},

269 {&
DDRF
, &
PINF
, &
PORTF
, 0},

270 {&
DDRF
, &
PINF
, &
PORTF
, 1},

271 {&
DDRF
, &
PINF
, &
PORTF
, 2},

272 {&
DDRF
, &
PINF
, &
PORTF
, 3},

273 {&
DDRF
, &
PINF
, &
PORTF
, 4},

274 {&
DDRF
, &
PINF
, &
PORTF
, 5},

275 {&
DDRF
, &
PINF
, &
PORTF
, 6},

276 {&
DDRF
, &
PINF
, &
PORTF
, 7}

277 
	}
};

279 #ñi‡
deföed
(
__AVR_ATmega168__
)\

280 ||
deföed
(
__AVR_ATmega168P__
)\

281 ||
	$deföed
(
__AVR_ATmega328P__
)

285 
uöt8_t
 c⁄° 
SDA_PIN
 = 18;

286 
uöt8_t
 c⁄° 
SCL_PIN
 = 19;

289 
uöt8_t
 c⁄° 
SS_PIN
 = 10;

290 
uöt8_t
 c⁄° 
MOSI_PIN
 = 11;

291 
uöt8_t
 c⁄° 
MISO_PIN
 = 12;

292 
uöt8_t
 c⁄° 
SCK_PIN
 = 13;

294 c⁄° 
pö_m≠_t
 
digôÆPöM≠
[] = {

295 {&
DDRD
, &
PIND
, &
PORTD
, 0},

296 {&
DDRD
, &
PIND
, &
PORTD
, 1},

297 {&
DDRD
, &
PIND
, &
PORTD
, 2},

298 {&
DDRD
, &
PIND
, &
PORTD
, 3},

299 {&
DDRD
, &
PIND
, &
PORTD
, 4},

300 {&
DDRD
, &
PIND
, &
PORTD
, 5},

301 {&
DDRD
, &
PIND
, &
PORTD
, 6},

302 {&
DDRD
, &
PIND
, &
PORTD
, 7},

303 {&
DDRB
, &
PINB
, &
PORTB
, 0},

304 {&
DDRB
, &
PINB
, &
PORTB
, 1},

305 {&
DDRB
, &
PINB
, &
PORTB
, 2},

306 {&
DDRB
, &
PINB
, &
PORTB
, 3},

307 {&
DDRB
, &
PINB
, &
PORTB
, 4},

308 {&
DDRB
, &
PINB
, &
PORTB
, 5},

309 {&
DDRC
, &
PINC
, &
PORTC
, 0},

310 {&
DDRC
, &
PINC
, &
PORTC
, 1},

311 {&
DDRC
, &
PINC
, &
PORTC
, 2},

312 {&
DDRC
, &
PINC
, &
PORTC
, 3},

313 {&
DDRC
, &
PINC
, &
PORTC
, 4},

314 {&
DDRC
, &
PINC
, &
PORTC
, 5}

315 
	}
};

317 #îr‹ 
unknown
 
chù


320 c⁄° 
uöt8_t
 
	gdigôÆPöCou¡
 = (
digôÆPöM≠
)/(
pö_m≠_t
);

322 
uöt8_t
 
	$badPöNumbî
()

323 
	`__©åibuã__
((
	`îr‹
("PinÇumber isÅooÜarge orÇotá constant")));

325 
ölöe
 
	`__©åibuã__
((
Æways_ölöe
))

326 
boﬁ
 
	$gëPöMode
(
uöt8_t
 
pö
) {

327 i‡(
	`__buûtö_c⁄°™t_p
(
pö
Ë&&Öö < 
digôÆPöCou¡
) {

328  (*
digôÆPöM≠
[
pö
].
ddr
 >> digôÆPöM≠[pö].
bô
) & 1;

330  
	`badPöNumbî
();

332 
	}
}

333 
ölöe
 
__©åibuã__
((
Æways_ölöe
))

334 
	$£tPöMode
(
uöt8_t
 
pö
, uöt8_à
mode
) {

335 i‡(
	`__buûtö_c⁄°™t_p
(
pö
Ë&&Öö < 
digôÆPöCou¡
) {

336 i‡(
mode
) {

337 *
digôÆPöM≠
[
pö
].
ddr
 |1 << digôÆPöM≠[pö].
bô
;

339 *
digôÆPöM≠
[
pö
].
ddr
 &~(1 << digôÆPöM≠[pö].
bô
);

342 
	`badPöNumbî
();

344 
	}
}

345 
ölöe
 
__©åibuã__
((
Æways_ölöe
))

346 
boﬁ
 
	$Á°DigôÆRód
(
uöt8_t
 
pö
) {

347 i‡(
	`__buûtö_c⁄°™t_p
(
pö
Ë&&Öö < 
digôÆPöCou¡
) {

348  (*
digôÆPöM≠
[
pö
].pö >> digôÆPöM≠[pö].
bô
) & 1;

350  
	`badPöNumbî
();

352 
	}
}

353 
ölöe
 
__©åibuã__
((
Æways_ölöe
))

354 
	$Á°DigôÆWrôe
(
uöt8_t
 
pö
, uöt8_à
vÆue
) {

355 i‡(
	`__buûtö_c⁄°™t_p
(
pö
Ë&&Öö < 
digôÆPöCou¡
) {

356 i‡(
vÆue
) {

357 *
digôÆPöM≠
[
pö
].
p‹t
 |1 << digôÆPöM≠[pö].
bô
;

359 *
digôÆPöM≠
[
pö
].
p‹t
 &~(1 << digôÆPöM≠[pö].
bô
);

362 
	`badPöNumbî
();

364 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/SdBaseFile.cpp

21 
	~"M¨lö.h
"

22 #ifde‡
SDSUPPORT


24 
	~"SdBa£Fûe.h
"

27 
SdBa£Fûe
* 
	gSdBa£Fûe
::
cwd_
 = 0;

29 (*
SdBa£Fûe
::
d©eTime_
)(
uöt16_t
* 
d©e
, uöt16_t* 
time
) = 0;

32 
boﬁ
 
SdBa£Fûe
::
	$addClu°î
() {

33 i‡(!
vﬁ_
->
	`ÆlocC⁄tiguous
(1, &
curClu°î_
)Ë
Áû
;

36 i‡(
fú°Clu°î_
 == 0) {

37 
fú°Clu°î_
 = 
curClu°î_
;

38 
Êags_
 |
F_FILE_DIR_DIRTY
;

40  
åue
;

42 
Áû
:

43  
Ál£
;

44 
	}
}

48 
boﬁ
 
	gSdBa£Fûe
::
	$addDúClu°î
() {

49 
uöt32_t
 
block
;

51 i‡(
fûeSize_
/(
dú_t
Ë>0XFFFFË
Áû
;

53 i‡(!
	`addClu°î
()Ë
Áû
;

54 i‡(!
vﬁ_
->
	`ˇcheFlush
()Ë
Áû
;

56 
block
 = 
vﬁ_
->
	`˛u°îSèπBlock
(
curClu°î_
);

59 
vﬁ_
->
	`ˇcheSëBlockNumbî
(
block
, 
åue
);

62 
	`mem£t
(
vﬁ_
->
ˇcheBuf„r_
.
d©a
, 0, 512);

65 
uöt8_t
 
i
 = 1; i < 
vﬁ_
->
blocksPîClu°î_
; i++) {

66 i‡(!
vﬁ_
->
	`wrôeBlock
(
block
 + 
i
, vﬁ_->
ˇcheBuf„r_
.
d©a
)Ë
Áû
;

69 
fûeSize_
 +512UL << 
vﬁ_
->
˛u°îSizeShi·_
;

70  
åue
;

72 
Áû
:

73  
Ál£
;

74 
	}
}

78 
dú_t
* 
	gSdBa£Fûe
::
	$ˇcheDúE¡ry
(
uöt8_t
 
a˘i⁄
) {

79 i‡(!
vﬁ_
->
	`ˇcheRawBlock
(
dúBlock_
, 
a˘i⁄
)Ë
Áû
;

80  
vﬁ_
->
	`ˇche
()->
dú
 + 
dúIndex_
;

82 
Áû
:

84 
	}
}

93 
boﬁ
 
	gSdBa£Fûe
::
	$˛o£
() {

94 
boﬁ
 
πn
 = 
	`sync
();

95 
ty≥_
 = 
FAT_FILE_TYPE_CLOSED
;

96  
πn
;

97 
	}
}

109 
boﬁ
 
	gSdBa£Fûe
::
	$c⁄tiguousR™ge
(
uöt32_t
* 
bgnBlock
, uöt32_t* 
ídBlock
) {

111 i‡(
fú°Clu°î_
 =0Ë
Áû
;

113 
uöt32_t
 
c
 = 
fú°Clu°î_
; ; c++) {

114 
uöt32_t
 
√xt
;

115 i‡(!
vﬁ_
->
	`ÁtGë
(
c
, &
√xt
)Ë
Áû
;

118 i‡(
√xt
 !(
c
 + 1)) {

120 i‡(!
vﬁ_
->
	`isEOC
(
√xt
)Ë
Áû
;

121 *
bgnBlock
 = 
vﬁ_
->
	`˛u°îSèπBlock
(
fú°Clu°î_
);

122 *
ídBlock
 = 
vﬁ_
->
	`˛u°îSèπBlock
(
c
)

123 + 
vﬁ_
->
blocksPîClu°î_
 - 1;

124  
åue
;

128 
Áû
:

129  
Ál£
;

130 
	}
}

149 
boﬁ
 
	gSdBa£Fûe
::
	$¸óãC⁄tiguous
(
SdBa£Fûe
* 
dúFûe
,

150 c⁄° * 
∑th
, 
uöt32_t
 
size
) {

151 
uöt32_t
 
cou¡
;

153 i‡(
size
 =0Ë
Áû
;

154 i‡(!
	`›í
(
dúFûe
, 
∑th
, 
O_CREAT
 | 
O_EXCL
 | 
O_RDWR
)Ë
Áû
;

157 
cou¡
 = ((
size
 - 1Ë>> (
vﬁ_
->
˛u°îSizeShi·_
 + 9)) + 1;

160 i‡(!
vﬁ_
->
	`ÆlocC⁄tiguous
(
cou¡
, &
fú°Clu°î_
)) {

161 
	`ªmove
();

162 
Áû
;

164 
fûeSize_
 = 
size
;

167 
Êags_
 |
F_FILE_DIR_DIRTY
;

169  
	`sync
();

171 
Áû
:

172  
Ál£
;

173 
	}
}

182 
boﬁ
 
	gSdBa£Fûe
::
	$dúE¡ry
(
dú_t
* 
dú
) {

183 
dú_t
* 
p
;

185 i‡(!
	`sync
()Ë
Áû
;

188 
p
 = 
	`ˇcheDúE¡ry
(
SdVﬁume
::
CACHE_FOR_READ
);

189 i‡(!
p
Ë
Áû
;

192 
	`mem˝y
(
dú
, 
p
, (
dú_t
));

193  
åue
;

195 
Áû
:

196  
Ál£
;

197 
	}
}

205 
	gSdBa£Fûe
::
	$dúName
(c⁄° 
dú_t
& 
dú
, * 
«me
) {

206 
uöt8_t
 
j
 = 0;

207 
uöt8_t
 
i
 = 0; i < 11; i++) {

208 i‡(
dú
.
«me
[
i
] == ' ');

209 i‡(
i
 =8Ë
«me
[
j
++] = '.';

210 
«me
[
j
++] = 
dú
.«me[
i
];

212 
«me
[
j
] = 0;

213 
	}
}

226 
boﬁ
 
	gSdBa£Fûe
::
	$exi°s
(c⁄° * 
«me
) {

227 
SdBa£Fûe
 
fûe
;

228  
fûe
.
	`›í
(
this
, 
«me
, 
O_READ
);

229 
	}
}

251 
öt16_t
 
	gSdBa£Fûe
::
	$fgës
(* 
°r
, 
öt16_t
 
num
, * 
dñim
) {

252 
ch
;

253 
öt16_t
 
n
 = 0;

254 
öt16_t
 
r
 = -1;

255 (
n
 + 1Ë< 
num
 && (
r
 = 
	`ªad
(&
ch
, 1)) == 1) {

257 i‡(
ch
 == '\r') ;

258 
°r
[
n
++] = 
ch
;

259 i‡(!
dñim
) {

260 i‡(
ch
 == '\n') ;

262 i‡(
	`°rchr
(
dñim
, 
ch
)) ;

265 i‡(
r
 < 0) {

269 
°r
[
n
] = '\0';

270  
n
;

271 
	}
}

280 
boﬁ
 
	gSdBa£Fûe
::
	$gëFûíame
(* 
«me
) {

281 i‡(!
	`isO≥n
()Ë 
Ál£
;

283 i‡(
	`isRoŸ
()) {

284 
«me
[0] = '/';

285 
«me
[1] = '\0';

286  
åue
;

289 
dú_t
* 
p
 = 
	`ˇcheDúE¡ry
(
SdVﬁume
::
CACHE_FOR_READ
);

290 i‡(!
p
Ë 
Ál£
;

293 
	`dúName
(*
p
, 
«me
);

294  
åue
;

295 
	}
}

297 
	gSdBa£Fûe
::
	$gëpos
(
Âos_t
* 
pos
) {

298 
pos
->
posôi⁄
 = 
curPosôi⁄_
;

299 
pos
->
˛u°î
 = 
curClu°î_
;

300 
	}
}

318 
	gSdBa£Fûe
::
	$ls
(
uöt8_t
 
Êags
, uöt8_à
ödít
) {

319 
	`ªwöd
();

320 
öt8_t
 
°©us
;

321 (
°©us
 = 
	`lsPrötNext
–
Êags
, 
ödít
))) {

322 i‡(
°©us
 > 1 && (
Êags
 & 
LS_R
)) {

323 
uöt16_t
 
ödex
 = 
	`curPosôi⁄
()/32 - 1;

324 
SdBa£Fûe
 
s
;

325 i‡(
s
.
	`›í
(
this
, 
ödex
, 
O_READ
)Ës.
	`ls
–
Êags
, 
ödít
 + 2);

326 
	`£ekSë
(32 * (
ödex
 + 1));

329 
	}
}

333 
öt8_t
 
	gSdBa£Fûe
::
	$lsPrötNext
–
uöt8_t
 
Êags
, uöt8_à
ödít
) {

334 
dú_t
 
dú
;

335 
uöt8_t
 
w
 = 0;

338 i‡(
	`ªad
(&
dú
, (dir)) != (dir))  0;

339 i‡(
dú
.
«me
[0] =
DIR_NAME_FREE
)  0;

342 i‡(
dú
.
«me
[0] !
DIR_NAME_DELETED
 && dir.name[0] != '.'

343 && 
	`DIR_IS_FILE_OR_SUBDIR
(&
dú
)) ;

346 
uöt8_t
 
i
 = 0; i < 
ödít
; i++Ë
MYSERIAL
.
	`wrôe
(' ');

349 
uöt8_t
 
i
 = 0; i < 11; i++) {

350 i‡(
dú
.
«me
[
i
] == ' ');

351 i‡(
i
 == 8) {

352 
MYSERIAL
.
	`wrôe
('.');

353 
w
++;

355 
MYSERIAL
.
	`wrôe
(
dú
.
«me
[
i
]);

356 
w
++;

358 i‡(
	`DIR_IS_SUBDIR
(&
dú
)) {

359 
MYSERIAL
.
	`wrôe
('/');

360 
w
++;

362 i‡(
Êags
 & (
LS_DATE
 | 
LS_SIZE
)) {

363 
w
++ < 14Ë
MYSERIAL
.
	`wrôe
(' ');

366 i‡(
Êags
 & 
LS_DATE
) {

367 
MYSERIAL
.
	`wrôe
(' ');

368 
	`¥ötF©D©e
–
dú
.
œ°WrôeD©e
);

369 
MYSERIAL
.
	`wrôe
(' ');

370 
	`¥ötF©Time
–
dú
.
œ°WrôeTime
);

373 i‡(!
	`DIR_IS_SUBDIR
(&
dú
Ë&& (
Êags
 & 
LS_SIZE
)) {

374 
MYSERIAL
.
	`wrôe
(' ');

375 
MYSERIAL
.
	`¥öt
(
dú
.
fûeSize
);

377 
MYSERIAL
.
	`¥öén
();

378  
	`DIR_IS_FILE
(&
dú
) ? 1 : 2;

379 
	}
}

382 
boﬁ
 
	gSdBa£Fûe
::
	$make83Name
(c⁄° * 
°r
, 
uöt8_t
* 
«me
, c⁄° ** 
±r
) {

383 
uöt8_t
 
c
;

384 
uöt8_t
 
n
 = 7;

385 
uöt8_t
 
i
 = 0;

387 
i
 < 11Ë
«me
[i++] = ' ';

388 
i
 = 0;

389 *
°r
 != '\0' && *str != '/') {

390 
c
 = *
°r
++;

391 i‡(
c
 == '.') {

392 i‡(
n
 =10Ë
Áû
;

393 
n
 = 10;

394 
i
 = 8;

397 
PGM_P
 
p
 = 
	`PSTR
("|<>^+=?/[];,*\"\\");

398 
uöt8_t
 
b
;

399 (
b
 = 
	`pgm_ªad_byã
(
p
++))Ëi‡(b =
c
Ë
Áû
;

401 i‡(
i
 > 
n
 || 
c
 < 0X21 || c > 0X7E)
Áû
;

403 
«me
[
i
++] = (
c
 < 'a' || c > 'z') ? (c) : (c + ('A' - 'a'));

406 *
±r
 = 
°r
;

408  
«me
[0] != ' ';

410 
Áû
:

411  
Ál£
;

412 
	}
}

428 
boﬁ
 
	gSdBa£Fûe
::
	$mkdú
(
SdBa£Fûe
* 
∑ª¡
, c⁄° * 
∑th
, 
boﬁ
 
pFœg
) {

429 
uöt8_t
 
d«me
[11];

430 
SdBa£Fûe
 
dú1
, 
dú2
;

431 
SdBa£Fûe
* 
sub
 = &
dú1
;

432 
SdBa£Fûe
* 
°¨t
 = 
∑ª¡
;

434 i‡(!
∑ª¡
 || 
	`isO≥n
()Ë
Áû
;

436 i‡(*
∑th
 == '/') {

437 *
∑th
 == '/')Öath++;

438 i‡(!
∑ª¡
->
	`isRoŸ
()) {

439 i‡(!
dú2
.
	`›íRoŸ
(
∑ª¡
->
vﬁ_
)Ë
Áû
;

440 
∑ª¡
 = &
dú2
;

444 i‡(!
	`make83Name
(
∑th
, 
d«me
, &∑th)Ë
Áû
;

445 *
∑th
 == '/')Öath++;

446 i‡(!*
∑th
) ;

447 i‡(!
sub
->
	`›í
(
∑ª¡
, 
d«me
, 
O_READ
)) {

448 i‡(!
pFœg
 || !
sub
->
	`mkdú
(
∑ª¡
, 
d«me
)) {

449 
Áû
;

452 i‡(
∑ª¡
 !
°¨t
Ë∑ª¡->
	`˛o£
();

453 
∑ª¡
 = 
sub
;

454 
sub
 = 
∑ª¡
 !&
dú1
 ? &dú1 : &
dú2
;

456  
	`mkdú
(
∑ª¡
, 
d«me
);

458 
Áû
:

459  
Ál£
;

460 
	}
}

462 
boﬁ
 
	gSdBa£Fûe
::
	$mkdú
(
SdBa£Fûe
* 
∑ª¡
, c⁄° 
uöt8_t
 
d«me
[11]) {

463 
uöt32_t
 
block
;

464 
dú_t
 
d
;

465 
dú_t
* 
p
;

467 i‡(!
∑ª¡
->
	`isDú
()Ë
Áû
;

470 i‡(!
	`›í
(
∑ª¡
, 
d«me
, 
O_CREAT
 | 
O_EXCL
 | 
O_RDWR
)Ë
Áû
;

473 
Êags_
 = 
O_READ
;

474 
ty≥_
 = 
FAT_FILE_TYPE_SUBDIR
;

477 i‡(!
	`addDúClu°î
())
Áû
;

480 i‡(!
	`sync
()Ë
Áû
;

483 
p
 = 
	`ˇcheDúE¡ry
(
SdVﬁume
::
CACHE_FOR_WRITE
);

484 i‡(!
p
Ë
Áû
;

487 
p
->
©åibuãs
 = 
DIR_ATT_DIRECTORY
;

490 
	`mem˝y
(&
d
, 
p
, (d));

491 
d
.
«me
[0] = '.';

492 
uöt8_t
 
i
 = 1; i < 11; i++Ë
d
.
«me
[i] = ' ';

495 
block
 = 
vﬁ_
->
	`˛u°îSèπBlock
(
fú°Clu°î_
);

496 i‡(!
vﬁ_
->
	`ˇcheRawBlock
(
block
, 
SdVﬁume
::
CACHE_FOR_WRITE
)Ë
Áû
;

499 
	`mem˝y
(&
vﬁ_
->
	`ˇche
()->
dú
[0], &
d
, (d));

502 
d
.
«me
[1] = '.';

503 i‡(
∑ª¡
->
	`isRoŸ
()) {

504 
d
.
fú°Clu°îLow
 = 0;

505 
d
.
fú°Clu°îHigh
 = 0;

507 
d
.
fú°Clu°îLow
 = 
∑ª¡
->
fú°Clu°î_
 & 0XFFFF;

508 
d
.
fú°Clu°îHigh
 = 
∑ª¡
->
fú°Clu°î_
 >> 16;

511 
	`mem˝y
(&
vﬁ_
->
	`ˇche
()->
dú
[1], &
d
, (d));

514  
vﬁ_
->
	`ˇcheFlush
();

516 
Áû
:

517  
Ál£
;

518 
	}
}

530 
boﬁ
 
	gSdBa£Fûe
::
	$›í
(c⁄° * 
∑th
, 
uöt8_t
 
oÊag
) {

531  
	`›í
(
cwd_
, 
∑th
, 
oÊag
);

532 
	}
}

584 
boﬁ
 
	gSdBa£Fûe
::
	$›í
(
SdBa£Fûe
* 
dúFûe
, c⁄° * 
∑th
, 
uöt8_t
 
oÊag
) {

585 
uöt8_t
 
d«me
[11];

586 
SdBa£Fûe
 
dú1
, 
dú2
;

587 
SdBa£Fûe
 *
∑ª¡
 = 
dúFûe
;

588 
SdBa£Fûe
 *
sub
 = &
dú1
;

590 i‡(!
dúFûe
Ë
Áû
;

593 i‡(
	`isO≥n
()Ë
Áû
;

595 i‡(*
∑th
 == '/') {

596 *
∑th
 == '/')Öath++;

597 i‡(!
dúFûe
->
	`isRoŸ
()) {

598 i‡(!
dú2
.
	`›íRoŸ
(
dúFûe
->
vﬁ_
)Ë
Áû
;

599 
∑ª¡
 = &
dú2
;

603 i‡(!
	`make83Name
(
∑th
, 
d«me
, &∑th)Ë
Áû
;

604 *
∑th
 == '/')Öath++;

605 i‡(!*
∑th
) ;

606 i‡(!
sub
->
	`›í
(
∑ª¡
, 
d«me
, 
O_READ
)Ë
Áû
;

607 i‡(
∑ª¡
 !
dúFûe
Ë∑ª¡->
	`˛o£
();

608 
∑ª¡
 = 
sub
;

609 
sub
 = 
∑ª¡
 !&
dú1
 ? &dú1 : &
dú2
;

611  
	`›í
(
∑ª¡
, 
d«me
, 
oÊag
);

613 
Áû
:

614  
Ál£
;

615 
	}
}

618 
boﬁ
 
	gSdBa£Fûe
::
	$›í
(
SdBa£Fûe
* 
dúFûe
,

619 c⁄° 
uöt8_t
 
d«me
[11], uöt8_à
oÊag
) {

620 
boﬁ
 
em±yFound
 = 
Ál£
;

621 
boﬁ
 
fûeFound
 = 
Ál£
;

622 
uöt8_t
 
ödex
;

623 
dú_t
* 
p
;

625 
vﬁ_
 = 
dúFûe
->vol_;

627 
dúFûe
->
	`ªwöd
();

630 
dúFûe
->
curPosôi⁄_
 < dúFûe->
fûeSize_
) {

631 
ödex
 = 0XF & (
dúFûe
->
curPosôi⁄_
 >> 5);

632 
p
 = 
dúFûe
->
	`ªadDúCache
();

633 i‡(!
p
Ë
Áû
;

635 i‡(
p
->
«me
[0] =
DIR_NAME_FREE
 ||Ö->«me[0] =
DIR_NAME_DELETED
) {

637 i‡(!
em±yFound
) {

638 
dúBlock_
 = 
dúFûe
->
vﬁ_
->
	`ˇcheBlockNumbî
();

639 
dúIndex_
 = 
ödex
;

640 
em±yFound
 = 
åue
;

643 i‡(
p
->
«me
[0] =
DIR_NAME_FREE
) ;

644 } i‡(!
	`memcmp
(
d«me
, 
p
->
«me
, 11)) {

645 
fûeFound
 = 
åue
;

649 i‡(
fûeFound
) {

651 i‡(
oÊag
 & 
O_EXCL
Ë
Áû
;

654 i‡(!(
oÊag
 & 
O_CREAT
Ë|| !(oÊag & 
O_WRITE
)Ë
Áû
;

655 i‡(
em±yFound
) {

656 
ödex
 = 
dúIndex_
;

657 
p
 = 
	`ˇcheDúE¡ry
(
SdVﬁume
::
CACHE_FOR_WRITE
);

658 i‡(!
p
Ë
Áû
;

660 i‡(
dúFûe
->
ty≥_
 =
FAT_FILE_TYPE_ROOT_FIXED
Ë
Áû
;

663 i‡(!
dúFûe
->
	`addDúClu°î
()Ë
Áû
;

666 
p
 = 
dúFûe
->
vﬁ_
->
	`ˇche
()->
dú
;

667 
ödex
 = 0;

670 
	`mem£t
(
p
, 0, (
dú_t
));

671 
	`mem˝y
(
p
->
«me
, 
d«me
, 11);

674 i‡(
d©eTime_
) {

676 
	`d©eTime_
(&
p
->
¸óti⁄D©e
, &p->
¸óti⁄Time
);

679 
p
->
¸óti⁄D©e
 = 
FAT_DEFAULT_DATE
;

680 
p
->
¸óti⁄Time
 = 
FAT_DEFAULT_TIME
;

682 
p
->
œ°Ac˚ssD©e
 =Ö->
¸óti⁄D©e
;

683 
p
->
œ°WrôeD©e
 =Ö->
¸óti⁄D©e
;

684 
p
->
œ°WrôeTime
 =Ö->
¸óti⁄Time
;

687 i‡(!
dúFûe
->
vﬁ_
->
	`ˇcheFlush
()Ë
Áû
;

690  
	`›íCachedE¡ry
(
ödex
, 
oÊag
);

692 
Áû
:

693  
Ál£
;

694 
	}
}

709 
boﬁ
 
	gSdBa£Fûe
::
	$›í
(
SdBa£Fûe
* 
dúFûe
, 
uöt16_t
 
ödex
, 
uöt8_t
 
oÊag
) {

710 
dú_t
* 
p
;

712 
vﬁ_
 = 
dúFûe
->vol_;

715 i‡(
	`isO≥n
(Ë|| !
dúFûe
Ë
Áû
;

718 i‡(
oÊag
 & 
O_EXCL
Ë
Áû
;

721 i‡(!
dúFûe
->
	`£ekSë
(32 * 
ödex
)Ë
Áû
;

724 
p
 = 
dúFûe
->
	`ªadDúCache
();

725 i‡(!
p
Ë
Áû
;

728 i‡(
p
->
«me
[0] =
DIR_NAME_FREE
 ||

729 
p
->
«me
[0] =
DIR_NAME_DELETED
 ||Ö->name[0] == '.') {

730 
Áû
;

733  
	`›íCachedE¡ry
(
ödex
 & 0XF, 
oÊag
);

735 
Áû
:

736  
Ál£
;

737 
	}
}

740 
boﬁ
 
	gSdBa£Fûe
::
	$›íCachedE¡ry
(
uöt8_t
 
dúIndex
, uöt8_à
oÊag
) {

742 
dú_t
* 
p
 = &
vﬁ_
->
	`ˇche
()->
dú
[
dúIndex
];

745 i‡(
p
->
©åibuãs
 & (
DIR_ATT_READ_ONLY
 | 
DIR_ATT_DIRECTORY
)) {

746 i‡(
oÊag
 & (
O_WRITE
 | 
O_TRUNC
)Ë
Áû
;

749 
dúBlock_
 = 
vﬁ_
->
	`ˇcheBlockNumbî
();

750 
dúIndex_
 = 
dúIndex
;

753 
fú°Clu°î_
 = (
uöt32_t
)
p
->
fú°Clu°îHigh
 << 16;

754 
fú°Clu°î_
 |
p
->
fú°Clu°îLow
;

757 i‡(
	`DIR_IS_FILE
(
p
)) {

758 
fûeSize_
 = 
p
->
fûeSize
;

759 
ty≥_
 = 
FAT_FILE_TYPE_NORMAL
;

760 } i‡(
	`DIR_IS_SUBDIR
(
p
)) {

761 i‡(!
vﬁ_
->
	`chaöSize
(
fú°Clu°î_
, &
fûeSize_
)Ë
Áû
;

762 
ty≥_
 = 
FAT_FILE_TYPE_SUBDIR
;

764 
Áû
;

767 
Êags_
 = 
oÊag
 & 
F_OFLAG
;

770 
curClu°î_
 = 0;

771 
curPosôi⁄_
 = 0;

772 i‡((
oÊag
 & 
O_TRUNC
Ë&& !
	`åunˇã
(0)Ë 
Ál£
;

773  
oÊag
 & 
O_AT_END
 ? 
	`£ekEnd
(0Ë: 
åue
;

775 
Áû
:

776 
ty≥_
 = 
FAT_FILE_TYPE_CLOSED
;

777  
Ál£
;

778 
	}
}

791 
boﬁ
 
	gSdBa£Fûe
::
	$›íNext
(
SdBa£Fûe
* 
dúFûe
, 
uöt8_t
 
oÊag
) {

792 
dú_t
* 
p
;

793 
uöt8_t
 
ödex
;

795 i‡(!
dúFûe
Ë
Áû
;

798 i‡(
	`isO≥n
()Ë
Áû
;

800 
vﬁ_
 = 
dúFûe
->vol_;

803 
ödex
 = 0XF & (
dúFûe
->
curPosôi⁄_
 >> 5);

806 
p
 = 
dúFûe
->
	`ªadDúCache
();

807 i‡(!
p
Ë
Áû
;

810 i‡(
p
->
«me
[0] =
DIR_NAME_FREE
Ë
Áû
;

813 i‡(
p
->
«me
[0] =
DIR_NAME_DELETED
 ||Ö->name[0] == '.') {

817 i‡(
	`DIR_IS_FILE_OR_SUBDIR
(
p
)) {

818  
	`›íCachedE¡ry
(
ödex
, 
oÊag
);

822 
Áû
:

823  
Ál£
;

824 
	}
}

833 
boﬁ
 
	gSdBa£Fûe
::
	$›íP¨ít
(
SdBa£Fûe
* 
dú
) {

834 
dú_t
 
íåy
;

835 
dú_t
* 
p
;

836 
SdBa£Fûe
 
fûe
;

837 
uöt32_t
 
c
;

838 
uöt32_t
 
˛u°î
;

839 
uöt32_t
 
lbn
;

841 i‡(
	`isO≥n
(Ë|| !
dú
 || dú->
	`isRoŸ
(Ë|| !dú->
	`isDú
()Ë
Áû
;

842 
vﬁ_
 = 
dú
->vol_;

844 i‡(!
dú
->
	`£ekSë
(32)Ë
Áû
;

846 i‡(
dú
->
	`ªad
(&
íåy
, ”¡ry)Ë!32Ë
Áû
;

848 i‡(
íåy
.
«me
[0] !'.' ||É¡ry.«me[1] !'.'Ë
Áû
;

850 
˛u°î
 = 
íåy
.
fú°Clu°îLow
;

851 
˛u°î
 |(
uöt32_t
)
íåy
.
fú°Clu°îHigh
 << 16;

852 i‡(
˛u°î
 =0Ë 
	`›íRoŸ
(
vﬁ_
);

854 
lbn
 = 
vﬁ_
->
	`˛u°îSèπBlock
(
˛u°î
);

856 i‡(!
vﬁ_
->
	`ˇcheRawBlock
(
lbn
, 
SdVﬁume
::
CACHE_FOR_READ
)) {

857 
Áû
;

859 
p
 = &
vﬁ_
->
ˇcheBuf„r_
.
dú
[1];

861 i‡(
p
->
«me
[0] !'.' ||Ö->«me[1] !'.'Ë
Áû
;

863 i‡(
p
->
fú°Clu°îHigh
 =0 &&Ö->
fú°Clu°îLow
 == 0) {

864 i‡(!
fûe
.
	`›íRoŸ
(
dú
->
	`vﬁume
())Ë
Áû
;

866 i‡(!
fûe
.
	`›íCachedE¡ry
(1, 
O_READ
)Ë
Áû
;

870 i‡(
fûe
.
	`ªadDú
(&
íåy
, 
NULL
Ë!32Ë
Áû
;

871 
c
 = 
íåy
.
fú°Clu°îLow
;

872 
c
 |(
uöt32_t
)
íåy
.
fú°Clu°îHigh
 << 16;

873 } 
c
 !
˛u°î
);

875  
	`›í
(&
fûe
, fûe.
	`curPosôi⁄
()/32 - 1, 
O_READ
);

877 
Áû
:

878  
Ál£
;

879 
	}
}

890 
boﬁ
 
	gSdBa£Fûe
::
	$›íRoŸ
(
SdVﬁume
* 
vﬁ
) {

892 i‡(
	`isO≥n
()Ë
Áû
;

894 i‡(
vﬁ
->
	`ÁtTy≥
(Ë=16 || (
FAT12_SUPPORT
 && vol->fatType() == 12)) {

895 
ty≥_
 = 
FAT_FILE_TYPE_ROOT_FIXED
;

896 
fú°Clu°î_
 = 0;

897 
fûeSize_
 = 32 * 
vﬁ
->
	`roŸDúE¡ryCou¡
();

898 } i‡(
vﬁ
->
	`ÁtTy≥
() == 32) {

899 
ty≥_
 = 
FAT_FILE_TYPE_ROOT32
;

900 
fú°Clu°î_
 = 
vﬁ
->
	`roŸDúSèπ
();

901 i‡(!
vﬁ
->
	`chaöSize
(
fú°Clu°î_
, &
fûeSize_
)Ë
Áû
;

904  
Ál£
;

906 
vﬁ_
 = 
vﬁ
;

908 
Êags_
 = 
O_READ
;

911 
curClu°î_
 = 0;

912 
curPosôi⁄_
 = 0;

915 
dúBlock_
 = 0;

916 
dúIndex_
 = 0;

917  
åue
;

919 
Áû
:

920  
Ál£
;

921 
	}
}

927 
	gSdBa£Fûe
::
	$≥ek
() {

928 
Âos_t
 
pos
;

929 
	`gëpos
(&
pos
);

930 
c
 = 
	`ªad
();

931 i‡(
c
 >0Ë
	`£ços
(&
pos
);

932  
c
;

933 
	}
}

942 
	gSdBa£Fûe
::
	$¥ötDúName
(c⁄° 
dú_t
& 
dú
,

943 
uöt8_t
 
width
, 
boﬁ
 
¥ötSœsh
) {

944 
uöt8_t
 
w
 = 0;

945 
uöt8_t
 
i
 = 0; i < 11; i++) {

946 i‡(
dú
.
«me
[
i
] == ' ');

947 i‡(
i
 == 8) {

948 
MYSERIAL
.
	`wrôe
('.');

949 
w
++;

951 
MYSERIAL
.
	`wrôe
(
dú
.
«me
[
i
]);

952 
w
++;

954 i‡(
	`DIR_IS_SUBDIR
(&
dú
Ë&& 
¥ötSœsh
) {

955 
MYSERIAL
.
	`wrôe
('/');

956 
w
++;

958 
w
 < 
width
) {

959 
MYSERIAL
.
	`wrôe
(' ');

960 
w
++;

962 
	}
}

965 
	$¥öt2u
–
uöt8_t
 
v
) {

966 i‡(
v
 < 10Ë
MYSERIAL
.
	`wrôe
('0');

967 
MYSERIAL
.
	`¥öt
(
v
, 
DEC
);

968 
	}
}

985 
	gSdBa£Fûe
::
	$¥ötF©D©e
(
uöt16_t
 
ÁtD©e
) {

986 
MYSERIAL
.
	`¥öt
(
	`FAT_YEAR
(
ÁtD©e
));

987 
MYSERIAL
.
	`wrôe
('-');

988 
	`¥öt2u
–
	`FAT_MONTH
(
ÁtD©e
));

989 
MYSERIAL
.
	`wrôe
('-');

990 
	`¥öt2u
–
	`FAT_DAY
(
ÁtD©e
));

991 
	}
}

1001 
	gSdBa£Fûe
::
	$¥ötF©Time
–
uöt16_t
 
ÁtTime
) {

1002 
	`¥öt2u
–
	`FAT_HOUR
(
ÁtTime
));

1003 
MYSERIAL
.
	`wrôe
(':');

1004 
	`¥öt2u
–
	`FAT_MINUTE
(
ÁtTime
));

1005 
MYSERIAL
.
	`wrôe
(':');

1006 
	`¥öt2u
–
	`FAT_SECOND
(
ÁtTime
));

1007 
	}
}

1014 
boﬁ
 
	gSdBa£Fûe
::
	$¥ötName
() {

1015 
«me
[13];

1016 i‡(!
	`gëFûíame
(
«me
)Ë 
Ál£
;

1017 
MYSERIAL
.
	`¥öt
(
«me
);

1018  
åue
;

1019 
	}
}

1026 
öt16_t
 
	gSdBa£Fûe
::
	$ªad
() {

1027 
uöt8_t
 
b
;

1028  
	`ªad
(&
b
, 1) == 1 ? b : -1;

1029 
	}
}

1044 
öt16_t
 
	gSdBa£Fûe
::
	$ªad
(* 
buf
, 
uöt16_t
 
nbyã
) {

1045 
uöt8_t
* 
d°
 = 
ªöãΩªt_ˇ°
<uöt8_t*>(
buf
);

1046 
uöt16_t
 
off£t
;

1047 
uöt16_t
 
toRód
;

1048 
uöt32_t
 
block
;

1051 i‡(!
	`isO≥n
(Ë|| !(
Êags_
 & 
O_READ
)Ë
Áû
;

1054 i‡(
nbyã
 >(
fûeSize_
 - 
curPosôi⁄_
)) {

1055 
nbyã
 = 
fûeSize_
 - 
curPosôi⁄_
;

1058 
toRód
 = 
nbyã
;

1059 
toRód
 > 0) {

1060 
off£t
 = 
curPosôi⁄_
 & 0X1FF;

1061 i‡(
ty≥_
 =
FAT_FILE_TYPE_ROOT_FIXED
) {

1062 
block
 = 
vﬁ_
->
	`roŸDúSèπ
(Ë+ (
curPosôi⁄_
 >> 9);

1064 
uöt8_t
 
blockOfClu°î
 = 
vﬁ_
->
	`blockOfClu°î
(
curPosôi⁄_
);

1065 i‡(
off£t
 =0 && 
blockOfClu°î
 == 0) {

1067 i‡(
curPosôi⁄_
 == 0) {

1069 
curClu°î_
 = 
fú°Clu°î_
;

1072 i‡(!
vﬁ_
->
	`ÁtGë
(
curClu°î_
, &curClu°î_)Ë
Áû
;

1075 
block
 = 
vﬁ_
->
	`˛u°îSèπBlock
(
curClu°î_
Ë+ 
blockOfClu°î
;

1077 
uöt16_t
 
n
 = 
toRód
;

1080 i‡(
n
 > (512 - 
off£t
))Ç = 512 - offset;

1083 i‡(
n
 =512 && 
block
 !
vﬁ_
->
	`ˇcheBlockNumbî
()) {

1084 i‡(!
vﬁ_
->
	`ªadBlock
(
block
, 
d°
)Ë
Áû
;

1087 i‡(!
vﬁ_
->
	`ˇcheRawBlock
(
block
, 
SdVﬁume
::
CACHE_FOR_READ
)Ë
Áû
;

1088 
uöt8_t
* 
§c
 = 
vﬁ_
->
	`ˇche
()->
d©a
 + 
off£t
;

1089 
	`mem˝y
(
d°
, 
§c
, 
n
);

1091 
d°
 +
n
;

1092 
curPosôi⁄_
 +
n
;

1093 
toRód
 -
n
;

1095  
nbyã
;

1097 
Áû
:

1099 
	}
}

1111 
öt8_t
 
	gSdBa£Fûe
::
	$ªadDú
(
dú_t
* 
dú
, * 
l⁄gFûíame
) {

1112 
öt16_t
 
n
;

1114 i‡(!
	`isDú
(Ë|| (0X1F & 
curPosôi⁄_
))  -1;

1117 i‡(
l⁄gFûíame
 !
NULL
)

1119 
l⁄gFûíame
[0] = '\0';

1123 
n
 = 
	`ªad
(
dú
, (
dú_t
));

1124 i‡(
n
 !(
dú_t
)) Ç == 0 ? 0 : -1;

1126 i‡(
dú
->
«me
[0] =
DIR_NAME_FREE
)  0;

1128 i‡(
dú
->
«me
[0] =
DIR_NAME_DELETED
 || dir->name[0] == '.') ;

1131 i‡(
	`DIR_IS_LONG_NAME
(
dú
Ë&& 
l⁄gFûíame
 !
NULL
)

1133 
vÁt_t
 *
VFAT
 = (vÁt_t*)
dú
;

1135 i‡(
VFAT
->
fú°Clu°îLow
 =0 && (VFAT->
£quí˚Numbî
 & 0x1FË> 0 && (VFAT->£quí˚Numbî & 0x1FË<
MAX_VFAT_ENTRIES
)

1138 
n
 = ((
VFAT
->
£quí˚Numbî
 & 0x1F) - 1) * 13;

1139 
l⁄gFûíame
[
n
+0] = 
VFAT
->
«me1
[0];

1140 
l⁄gFûíame
[
n
+1] = 
VFAT
->
«me1
[1];

1141 
l⁄gFûíame
[
n
+2] = 
VFAT
->
«me1
[2];

1142 
l⁄gFûíame
[
n
+3] = 
VFAT
->
«me1
[3];

1143 
l⁄gFûíame
[
n
+4] = 
VFAT
->
«me1
[4];

1144 
l⁄gFûíame
[
n
+5] = 
VFAT
->
«me2
[0];

1145 
l⁄gFûíame
[
n
+6] = 
VFAT
->
«me2
[1];

1146 
l⁄gFûíame
[
n
+7] = 
VFAT
->
«me2
[2];

1147 
l⁄gFûíame
[
n
+8] = 
VFAT
->
«me2
[3];

1148 
l⁄gFûíame
[
n
+9] = 
VFAT
->
«me2
[4];

1149 
l⁄gFûíame
[
n
+10] = 
VFAT
->
«me2
[5];

1150 
l⁄gFûíame
[
n
+11] = 
VFAT
->
«me3
[0];

1151 
l⁄gFûíame
[
n
+12] = 
VFAT
->
«me3
[1];

1153 i‡(
VFAT
->
£quí˚Numbî
 & 0x40)

1154 
l⁄gFûíame
[
n
+13] = '\0';

1158 i‡(
	`DIR_IS_FILE_OR_SUBDIR
(
dú
)Ë 
n
;

1160 
	}
}

1164 
dú_t
* 
	gSdBa£Fûe
::
	$ªadDúCache
() {

1165 
uöt8_t
 
i
;

1167 i‡(!
	`isDú
()Ë
Áû
;

1170 
i
 = (
curPosôi⁄_
 >> 5) & 0XF;

1173 i‡(
	`ªad
(Ë< 0Ë
Áû
;

1176 
curPosôi⁄_
 += 31;

1179  
vﬁ_
->
	`ˇche
()->
dú
 + 
i
;

1181 
Áû
:

1183 
	}
}

1198 
boﬁ
 
	gSdBa£Fûe
::
	$ªmove
() {

1199 
dú_t
* 
d
;

1201 i‡(!
	`åunˇã
(0)Ë
Áû
;

1204 
d
 = 
	`ˇcheDúE¡ry
(
SdVﬁume
::
CACHE_FOR_WRITE
);

1205 i‡(!
d
Ë
Áû
;

1208 
d
->
«me
[0] = 
DIR_NAME_DELETED
;

1211 
ty≥_
 = 
FAT_FILE_TYPE_CLOSED
;

1214  
vﬁ_
->
	`ˇcheFlush
();

1215  
åue
;

1217 
Áû
:

1218  
Ál£
;

1219 
	}
}

1238 
boﬁ
 
	gSdBa£Fûe
::
	$ªmove
(
SdBa£Fûe
* 
dúFûe
, c⁄° * 
∑th
) {

1239 
SdBa£Fûe
 
fûe
;

1240 i‡(!
fûe
.
	`›í
(
dúFûe
, 
∑th
, 
O_WRITE
)Ë
Áû
;

1241  
fûe
.
	`ªmove
();

1243 
Áû
:

1245  
Ál£
;

1246 
	}
}

1258 
boﬁ
 
	gSdBa£Fûe
::
	$ª«me
(
SdBa£Fûe
* 
dúFûe
, c⁄° * 
√wP©h
) {

1259 
dú_t
 
íåy
;

1260 
uöt32_t
 
dúClu°î
 = 0;

1261 
SdBa£Fûe
 
fûe
;

1262 
dú_t
* 
d
;

1265 i‡(!(
	`isFûe
(Ë|| 
	`isSubDú
())Ë
Áû
;

1268 i‡(
vﬁ_
 !
dúFûe
->vﬁ_Ë
Áû
;

1271 
	`sync
();

1272 
d
 = 
	`ˇcheDúE¡ry
(
SdVﬁume
::
CACHE_FOR_WRITE
);

1273 i‡(!
d
Ë
Áû
;

1276 
	`mem˝y
(&
íåy
, 
d
, (entry));

1279 
d
->
«me
[0] = 
DIR_NAME_DELETED
;

1282 i‡(
	`isFûe
()) {

1283 i‡(!
fûe
.
	`›í
(
dúFûe
, 
√wP©h
, 
O_CREAT
 | 
O_EXCL
 | 
O_WRITE
)) {

1284 
ª°‹e
;

1288 i‡(!
fûe
.
	`mkdú
(
dúFûe
, 
√wP©h
, 
Ál£
)) {

1289 
ª°‹e
;

1292 
dúClu°î
 = 
fûe
.
fú°Clu°î_
;

1295 
dúBlock_
 = 
fûe
.dirBlock_;

1296 
dúIndex_
 = 
fûe
.dirIndex_;

1299 
fûe
.
ty≥_
 = 
FAT_FILE_TYPE_CLOSED
;

1302 
d
 = 
	`ˇcheDúE¡ry
(
SdVﬁume
::
CACHE_FOR_WRITE
);

1303 i‡(!
d
Ë
Áû
;

1306 
	`mem˝y
(&
d
->
©åibuãs
, &
íåy
.©åibuãs, ”¡ryË- (d->
«me
));

1309 i‡(
dúClu°î
) {

1311 
uöt32_t
 
block
 = 
vﬁ_
->
	`˛u°îSèπBlock
(
dúClu°î
);

1312 i‡(!
vﬁ_
->
	`ˇcheRawBlock
(
block
, 
SdVﬁume
::
CACHE_FOR_READ
)Ë
Áû
;

1313 
	`mem˝y
(&
íåy
, &
vﬁ_
->
	`ˇche
()->
dú
[1], (entry));

1316 i‡(!
vﬁ_
->
	`‰ìChaö
(
dúClu°î
)Ë
Áû
;

1319 
block
 = 
vﬁ_
->
	`˛u°îSèπBlock
(
fú°Clu°î_
);

1320 i‡(!
vﬁ_
->
	`ˇcheRawBlock
(
block
, 
SdVﬁume
::
CACHE_FOR_WRITE
)Ë
Áû
;

1321 
	`mem˝y
(&
vﬁ_
->
	`ˇche
()->
dú
[1], &
íåy
, (entry));

1323  
vﬁ_
->
	`ˇcheFlush
();

1325 
ª°‹e
:

1326 
d
 = 
	`ˇcheDúE¡ry
(
SdVﬁume
::
CACHE_FOR_WRITE
);

1327 i‡(!
d
Ë
Áû
;

1329 
d
->
«me
[0] = 
íåy
.name[0];

1330 
vﬁ_
->
	`ˇcheFlush
();

1332 
Áû
:

1333  
Ál£
;

1334 
	}
}

1351 
boﬁ
 
	gSdBa£Fûe
::
	$rmdú
() {

1353 i‡(!
	`isSubDú
()Ë
Áû
;

1355 
	`ªwöd
();

1358 
curPosôi⁄_
 < 
fûeSize_
) {

1359 
dú_t
* 
p
 = 
	`ªadDúCache
();

1360 i‡(!
p
Ë
Áû
;

1362 i‡(
p
->
«me
[0] =
DIR_NAME_FREE
) ;

1364 i‡(
p
->
«me
[0] =
DIR_NAME_DELETED
 ||Ö->name[0] == '.') ;

1366 i‡(
	`DIR_IS_FILE_OR_SUBDIR
(
p
)Ë
Áû
;

1369 
ty≥_
 = 
FAT_FILE_TYPE_NORMAL
;

1370 
Êags_
 |
O_WRITE
;

1371  
	`ªmove
();

1373 
Áû
:

1374  
Ál£
;

1375 
	}
}

1392 
boﬁ
 
	gSdBa£Fûe
::
	$rmRfSèr
() {

1393 
uöt16_t
 
ödex
;

1394 
SdBa£Fûe
 
f
;

1395 
	`ªwöd
();

1396 
curPosôi⁄_
 < 
fûeSize_
) {

1398 
ödex
 = 
curPosôi⁄_
/32;

1400 
dú_t
* 
p
 = 
	`ªadDúCache
();

1401 i‡(!
p
Ë
Áû
;

1404 i‡(
p
->
«me
[0] =
DIR_NAME_FREE
) ;

1407 i‡(
p
->
«me
[0] =
DIR_NAME_DELETED
 ||Ö->name[0] == '.') ;

1410 i‡(!
	`DIR_IS_FILE_OR_SUBDIR
(
p
)) ;

1412 i‡(!
f
.
	`›í
(
this
, 
ödex
, 
O_READ
)Ë
Áû
;

1413 i‡(
f
.
	`isSubDú
()) {

1415 i‡(!
f
.
	`rmRfSèr
()Ë
Áû
;

1418 
f
.
Êags_
 |
O_WRITE
;

1419 i‡(!
f
.
	`ªmove
()Ë
Áû
;

1422 i‡(
curPosôi⁄_
 !(32*(
ödex
 + 1))) {

1423 i‡(!
	`£ekSë
(32*(
ödex
 + 1))Ë
Áû
;

1427 i‡(!
	`isRoŸ
()) {

1428 i‡(!
	`rmdú
()Ë
Áû
;

1430  
åue
;

1432 
Áû
:

1433  
Ál£
;

1434 
	}
}

1443 
	gSdBa£Fûe
::
	$SdBa£Fûe
(c⁄° * 
∑th
, 
uöt8_t
 
oÊag
) {

1444 
ty≥_
 = 
FAT_FILE_TYPE_CLOSED
;

1445 
wrôeEº‹
 = 
Ál£
;

1446 
	`›í
(
∑th
, 
oÊag
);

1447 
	}
}

1456 
boﬁ
 
	gSdBa£Fûe
::
	$£ekSë
(
uöt32_t
 
pos
) {

1457 
uöt32_t
 
nCur
;

1458 
uöt32_t
 
nNew
;

1460 i‡(!
	`isO≥n
(Ë|| 
pos
 > 
fûeSize_
Ë
Áû
;

1462 i‡(
ty≥_
 =
FAT_FILE_TYPE_ROOT_FIXED
) {

1463 
curPosôi⁄_
 = 
pos
;

1464 
d⁄e
;

1466 i‡(
pos
 == 0) {

1468 
curClu°î_
 = 0;

1469 
curPosôi⁄_
 = 0;

1470 
d⁄e
;

1473 
nCur
 = (
curPosôi⁄_
 - 1Ë>> (
vﬁ_
->
˛u°îSizeShi·_
 + 9);

1474 
nNew
 = (
pos
 - 1Ë>> (
vﬁ_
->
˛u°îSizeShi·_
 + 9);

1476 i‡(
nNew
 < 
nCur
 || 
curPosôi⁄_
 == 0) {

1478 
curClu°î_
 = 
fú°Clu°î_
;

1481 
nNew
 -
nCur
;

1483 
nNew
--) {

1484 i‡(!
vﬁ_
->
	`ÁtGë
(
curClu°î_
, &curClu°î_)Ë
Áû
;

1486 
curPosôi⁄_
 = 
pos
;

1488 
d⁄e
:

1489  
åue
;

1491 
Áû
:

1492  
Ál£
;

1493 
	}
}

1495 
	gSdBa£Fûe
::
	$£ços
(
Âos_t
* 
pos
) {

1496 
curPosôi⁄_
 = 
pos
->
posôi⁄
;

1497 
curClu°î_
 = 
pos
->
˛u°î
;

1498 
	}
}

1508 
boﬁ
 
	gSdBa£Fûe
::
	$sync
() {

1510 i‡(!
	`isO≥n
()Ë
Áû
;

1512 i‡(
Êags_
 & 
F_FILE_DIR_DIRTY
) {

1513 
dú_t
* 
d
 = 
	`ˇcheDúE¡ry
(
SdVﬁume
::
CACHE_FOR_WRITE
);

1515 i‡(!
d
 || d->
«me
[0] =
DIR_NAME_DELETED
Ë
Áû
;

1518 i‡(!
	`isDú
()Ë
d
->
fûeSize
 = 
fûeSize_
;

1521 
d
->
fú°Clu°îLow
 = 
fú°Clu°î_
 & 0XFFFF;

1522 
d
->
fú°Clu°îHigh
 = 
fú°Clu°î_
 >> 16;

1525 i‡(
d©eTime_
) {

1526 
	`d©eTime_
(&
d
->
œ°WrôeD©e
, &d->
œ°WrôeTime
);

1527 
d
->
œ°Ac˚ssD©e
 = d->
œ°WrôeD©e
;

1530 
Êags_
 &~
F_FILE_DIR_DIRTY
;

1532  
vﬁ_
->
	`ˇcheFlush
();

1534 
Áû
:

1535 
wrôeEº‹
 = 
åue
;

1536  
Ál£
;

1537 
	}
}

1550 
boﬁ
 
	gSdBa£Fûe
::
	$time°amp
(
SdBa£Fûe
* 
fûe
) {

1551 
dú_t
* 
d
;

1552 
dú_t
 
dú
;

1555 i‡(!
fûe
->
	`dúE¡ry
(&
dú
)Ë
Áû
;

1558 i‡(!
	`sync
()Ë
Áû
;

1560 
d
 = 
	`ˇcheDúE¡ry
(
SdVﬁume
::
CACHE_FOR_WRITE
);

1561 i‡(!
d
Ë
Áû
;

1564 
d
->
œ°Ac˚ssD©e
 = 
dú
.lastAccessDate;

1565 
d
->
¸óti⁄D©e
 = 
dú
.creationDate;

1566 
d
->
¸óti⁄Time
 = 
dú
.creationTime;

1567 
d
->
¸óti⁄TimeTíths
 = 
dú
.creationTimeTenths;

1568 
d
->
œ°WrôeD©e
 = 
dú
.lastWriteDate;

1569 
d
->
œ°WrôeTime
 = 
dú
.lastWriteTime;

1572  
vﬁ_
->
	`ˇcheFlush
();

1574 
Áû
:

1575  
Ál£
;

1576 
	}
}

1611 
boﬁ
 
	gSdBa£Fûe
::
	$time°amp
(
uöt8_t
 
Êags
, 
uöt16_t
 
yór
, uöt8_à
m⁄th
,

1612 
uöt8_t
 
day
, uöt8_à
hour
, uöt8_à
möuã
, uöt8_à
£c⁄d
) {

1613 
uöt16_t
 
dúD©e
;

1614 
uöt16_t
 
dúTime
;

1615 
dú_t
* 
d
;

1617 i‡(!
	`isO≥n
()

1618 || 
yór
 < 1980

1619 || 
yór
 > 2107

1620 || 
m⁄th
 < 1

1621 || 
m⁄th
 > 12

1622 || 
day
 < 1

1623 || 
day
 > 31

1624 || 
hour
 > 23

1625 || 
möuã
 > 59

1626 || 
£c⁄d
 > 59) {

1627 
Áû
;

1630 i‡(!
	`sync
()Ë
Áû
;

1632 
d
 = 
	`ˇcheDúE¡ry
(
SdVﬁume
::
CACHE_FOR_WRITE
);

1633 i‡(!
d
Ë
Áû
;

1635 
dúD©e
 = 
	`FAT_DATE
(
yór
, 
m⁄th
, 
day
);

1636 
dúTime
 = 
	`FAT_TIME
(
hour
, 
möuã
, 
£c⁄d
);

1637 i‡(
Êags
 & 
T_ACCESS
) {

1638 
d
->
œ°Ac˚ssD©e
 = 
dúD©e
;

1640 i‡(
Êags
 & 
T_CREATE
) {

1641 
d
->
¸óti⁄D©e
 = 
dúD©e
;

1642 
d
->
¸óti⁄Time
 = 
dúTime
;

1644 
d
->
¸óti⁄TimeTíths
 = 
£c⁄d
 & 1 ? 100 : 0;

1646 i‡(
Êags
 & 
T_WRITE
) {

1647 
d
->
œ°WrôeD©e
 = 
dúD©e
;

1648 
d
->
œ°WrôeTime
 = 
dúTime
;

1650  
vﬁ_
->
	`ˇcheFlush
();

1652 
Áû
:

1653  
Ál£
;

1654 
	}
}

1667 
boﬁ
 
	gSdBa£Fûe
::
	$åunˇã
(
uöt32_t
 
Àngth
) {

1668 
uöt32_t
 
√wPos
;

1670 i‡(!
	`isFûe
(Ë|| !(
Êags_
 & 
O_WRITE
)Ë
Áû
;

1673 i‡(
Àngth
 > 
fûeSize_
Ë
Áû
;

1676 i‡(
fûeSize_
 =0Ë 
åue
;

1679 
√wPos
 = 
curPosôi⁄_
 > 
Àngth
 ?Üength : curPosition_;

1682 i‡(!
	`£ekSë
(
Àngth
)Ë
Áû
;

1684 i‡(
Àngth
 == 0) {

1686 i‡(!
vﬁ_
->
	`‰ìChaö
(
fú°Clu°î_
)Ë
Áû
;

1687 
fú°Clu°î_
 = 0;

1689 
uöt32_t
 
toFªe
;

1690 i‡(!
vﬁ_
->
	`ÁtGë
(
curClu°î_
, &
toFªe
)Ë
Áû
;

1692 i‡(!
vﬁ_
->
	`isEOC
(
toFªe
)) {

1694 i‡(!
vﬁ_
->
	`‰ìChaö
(
toFªe
)Ë
Áû
;

1697 i‡(!
vﬁ_
->
	`ÁtPutEOC
(
curClu°î_
)Ë
Áû
;

1700 
fûeSize_
 = 
Àngth
;

1703 
Êags_
 |
F_FILE_DIR_DIRTY
;

1705 i‡(!
	`sync
()Ë
Áû
;

1708  
	`£ekSë
(
√wPos
);

1710 
Áû
:

1711  
Ál£
;

1712 
	}
}

1729 
öt16_t
 
	gSdBa£Fûe
::
	$wrôe
(c⁄° * 
buf
, 
uöt16_t
 
nbyã
) {

1731 c⁄° 
uöt8_t
* 
§c
 = 
ªöãΩªt_ˇ°
<c⁄° uöt8_t*>(
buf
);

1734 
uöt16_t
 
nToWrôe
 = 
nbyã
;

1737 i‡(!
	`isFûe
(Ë|| !(
Êags_
 & 
O_WRITE
)Ë
Áû
;

1740 i‡((
Êags_
 & 
O_APPEND
Ë&& 
curPosôi⁄_
 !
fûeSize_
) {

1741 i‡(!
	`£ekEnd
()Ë
Áû
;

1744 
nToWrôe
 > 0) {

1745 
uöt8_t
 
blockOfClu°î
 = 
vﬁ_
->
	`blockOfClu°î
(
curPosôi⁄_
);

1746 
uöt16_t
 
blockOff£t
 = 
curPosôi⁄_
 & 0X1FF;

1747 i‡(
blockOfClu°î
 =0 && 
blockOff£t
 == 0) {

1749 i‡(
curClu°î_
 == 0) {

1750 i‡(
fú°Clu°î_
 == 0) {

1752 i‡(!
	`addClu°î
()Ë
Áû
;

1754 
curClu°î_
 = 
fú°Clu°î_
;

1757 
uöt32_t
 
√xt
;

1758 i‡(!
vﬁ_
->
	`ÁtGë
(
curClu°î_
, &
√xt
)Ë
Áû
;

1759 i‡(
vﬁ_
->
	`isEOC
(
√xt
)) {

1761 i‡(!
	`addClu°î
()Ë
Áû
;

1763 
curClu°î_
 = 
√xt
;

1768 
uöt16_t
 
n
 = 512 - 
blockOff£t
;

1771 i‡(
n
 > 
nToWrôe
)Ç =ÇToWrite;

1774 
uöt32_t
 
block
 = 
vﬁ_
->
	`˛u°îSèπBlock
(
curClu°î_
Ë+ 
blockOfClu°î
;

1775 i‡(
n
 == 512) {

1777 i‡(
vﬁ_
->
	`ˇcheBlockNumbî
(Ë=
block
) {

1779 
vﬁ_
->
	`ˇcheSëBlockNumbî
(0XFFFFFFFF, 
Ál£
);

1781 i‡(!
vﬁ_
->
	`wrôeBlock
(
block
, 
§c
)Ë
Áû
;

1783 i‡(
blockOff£t
 =0 && 
curPosôi⁄_
 >
fûeSize_
) {

1785 i‡(!
vﬁ_
->
	`ˇcheFlush
()Ë
Áû
;

1787 
vﬁ_
->
	`ˇcheSëBlockNumbî
(
block
, 
åue
);

1790 i‡(!
vﬁ_
->
	`ˇcheRawBlock
(
block
, 
SdVﬁume
::
CACHE_FOR_WRITE
)Ë
Áû
;

1792 
uöt8_t
* 
d°
 = 
vﬁ_
->
	`ˇche
()->
d©a
 + 
blockOff£t
;

1793 
	`mem˝y
(
d°
, 
§c
, 
n
);

1795 
curPosôi⁄_
 +
n
;

1796 
§c
 +
n
;

1797 
nToWrôe
 -
n
;

1799 i‡(
curPosôi⁄_
 > 
fûeSize_
) {

1801 
fûeSize_
 = 
curPosôi⁄_
;

1802 
Êags_
 |
F_FILE_DIR_DIRTY
;

1803 } i‡(
d©eTime_
 && 
nbyã
) {

1805 
Êags_
 |
F_FILE_DIR_DIRTY
;

1808 i‡(
Êags_
 & 
O_SYNC
) {

1809 i‡(!
	`sync
()Ë
Áû
;

1811  
nbyã
;

1813 
Áû
:

1815 
wrôeEº‹
 = 
åue
;

1817 
	}
}

1820 #i‡
ALLOW_DEPRECATED_FUNCTIONS
 && !
deföed
(
DOXYGEN
)

1821 (*
SdBa£Fûe
::
ﬁdD©eTime_
)(
uöt16_t
& 
d©e
, uöt16_t& 
time
) = 0;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/SdBaseFile.h

20 
	~"M¨lö.h
"

21 #ifde‡
SDSUPPORT


23 #i‚de‡
SdBa£Fûe_h


24 
	#SdBa£Fûe_h


	)

29 
	~"M¨lö.h
"

30 
	~"SdF©C⁄fig.h
"

31 
	~"SdVﬁume.h
"

38 
	sÂos_t
 {

40 
uöt32_t
 
	mposôi⁄
;

42 
uöt32_t
 
	m˛u°î
;

43 
Âos_t
(Ë: 
posôi⁄
(0), 
˛u°î
(0) {}

48 
uöt8_t
 c⁄° 
	gO_READ
 = 0X01;

50 
uöt8_t
 c⁄° 
	gO_RDONLY
 = 
O_READ
;

52 
uöt8_t
 c⁄° 
	gO_WRITE
 = 0X02;

54 
uöt8_t
 c⁄° 
	gO_WRONLY
 = 
O_WRITE
;

56 
uöt8_t
 c⁄° 
	gO_RDWR
 = (
O_READ
 | 
O_WRITE
);

58 
uöt8_t
 c⁄° 
	gO_ACCMODE
 = (
O_READ
 | 
O_WRITE
);

60 
uöt8_t
 c⁄° 
	gO_APPEND
 = 0X04;

62 
uöt8_t
 c⁄° 
	gO_SYNC
 = 0X08;

64 
uöt8_t
 c⁄° 
	gO_TRUNC
 = 0X10;

66 
uöt8_t
 c⁄° 
	gO_AT_END
 = 0X20;

68 
uöt8_t
 c⁄° 
	gO_CREAT
 = 0X40;

70 
uöt8_t
 c⁄° 
	gO_EXCL
 = 0X80;

75 
uöt8_t
 c⁄° 
	gLS_DATE
 = 1;

77 
uöt8_t
 c⁄° 
	gLS_SIZE
 = 2;

79 
uöt8_t
 c⁄° 
	gLS_R
 = 4;

84 
uöt8_t
 c⁄° 
	gT_ACCESS
 = 1;

86 
uöt8_t
 c⁄° 
	gT_CREATE
 = 2;

88 
uöt8_t
 c⁄° 
	gT_WRITE
 = 4;

91 
uöt8_t
 c⁄° 
	gFAT_FILE_TYPE_CLOSED
 = 0;

93 
uöt8_t
 c⁄° 
	gFAT_FILE_TYPE_NORMAL
 = 1;

95 
uöt8_t
 c⁄° 
	gFAT_FILE_TYPE_ROOT_FIXED
 = 2;

97 
uöt8_t
 c⁄° 
	gFAT_FILE_TYPE_ROOT32
 = 3;

99 
uöt8_t
 c⁄° 
	gFAT_FILE_TYPE_SUBDIR
 = 4;

101 
uöt8_t
 c⁄° 
	gFAT_FILE_TYPE_MIN_DIR
 = 
FAT_FILE_TYPE_ROOT_FIXED
;

110 
ölöe
 
uöt16_t
 
	$FAT_DATE
(
uöt16_t
 
yór
, 
uöt8_t
 
m⁄th
, uöt8_à
day
) {

111  (
yór
 - 1980Ë<< 9 | 
m⁄th
 << 5 | 
day
;

112 
	}
}

118 
ölöe
 
uöt16_t
 
	$FAT_YEAR
(
uöt16_t
 
ÁtD©e
) {

119  1980 + (
ÁtD©e
 >> 9);

120 
	}
}

126 
ölöe
 
uöt8_t
 
	$FAT_MONTH
(
uöt16_t
 
ÁtD©e
) {

127  (
ÁtD©e
 >> 5) & 0XF;

128 
	}
}

134 
ölöe
 
uöt8_t
 
	$FAT_DAY
(
uöt16_t
 
ÁtD©e
) {

135  
ÁtD©e
 & 0X1F;

136 
	}
}

144 
ölöe
 
uöt16_t
 
	$FAT_TIME
(
uöt8_t
 
hour
, uöt8_à
möuã
, uöt8_à
£c⁄d
) {

145  
hour
 << 11 | 
möuã
 << 5 | 
£c⁄d
 >> 1;

146 
	}
}

152 
ölöe
 
uöt8_t
 
	$FAT_HOUR
(
uöt16_t
 
ÁtTime
) {

153  
ÁtTime
 >> 11;

154 
	}
}

160 
ölöe
 
uöt8_t
 
	$FAT_MINUTE
(
uöt16_t
 
ÁtTime
) {

161 (
ÁtTime
 >> 5) & 0X3F;

162 
	}
}

170 
ölöe
 
uöt8_t
 
	$FAT_SECOND
(
uöt16_t
 
ÁtTime
) {

171  2*(
ÁtTime
 & 0X1F);

172 
	}
}

174 
uöt16_t
 c⁄° 
	gFAT_DEFAULT_DATE
 = ((2000 - 1980) << 9) | (1 << 5) | 1;

176 
uöt16_t
 c⁄° 
	gFAT_DEFAULT_TIME
 = (1 << 11);

182 ˛as†
	cSdBa£Fûe
 {

183 
	mpublic
:

185 
	$SdBa£Fûe
(Ë: 
	`wrôeEº‹
(
Ál£
), 
	$ty≥_
(
FAT_FILE_TYPE_CLOSED
) {}

186 
	`SdBa£Fûe
(c⁄° * 
∑th
, 
uöt8_t
 
oÊag
);

187 ~
	$SdBa£Fûe
(Ë{if(
	`isO≥n
()Ë
	`˛o£
();
	}
}

193 
boﬁ
 
	gwrôeEº‹
;

199 
gëpos
(
Âos_t
* 
pos
);

203 
£ços
(
Âos_t
* 
pos
);

205 
boﬁ
 
˛o£
();

206 
boﬁ
 
c⁄tiguousR™ge
(
uöt32_t
* 
bgnBlock
, uöt32_t* 
ídBlock
);

207 
boﬁ
 
¸óãC⁄tiguous
(
SdBa£Fûe
* 
dúFûe
,

208 c⁄° * 
∑th
, 
uöt32_t
 
size
);

210 
uöt32_t
 
	$curClu°î
(Ëc⁄° { 
curClu°î_
;
	}
}

212 
uöt32_t
 
	$curPosôi⁄
(Ëc⁄° { 
curPosôi⁄_
;
	}
}

214 
SdBa£Fûe
* 
	$cwd
(Ë{ 
cwd_
;
	}
}

242 
d©eTimeCÆlback
(

243 (*
d©eTime
)(
uöt16_t
* 
d©e
, uöt16_t* 
time
)) {

244 
d©eTime_
 = 
d©eTime
;

245 
	}
}

247 
	$d©eTimeCÆlbackC™˚l
(Ë{
d©eTime_
 = 0;
	}
}

248 
boﬁ
 
dúE¡ry
(
dú_t
* 
dú
);

249 
dúName
(c⁄° 
dú_t
& 
dú
, * 
«me
);

250 
boﬁ
 
exi°s
(c⁄° * 
«me
);

251 
öt16_t
 
fgës
(* 
°r
, i¡16_à
num
, * 
dñim
 = 0);

253 
uöt32_t
 
	$fûeSize
(Ëc⁄° { 
fûeSize_
;
	}
}

255 
uöt32_t
 
	$fú°Clu°î
(Ëc⁄° { 
fú°Clu°î_
;
	}
}

256 
boﬁ
 
gëFûíame
(* 
«me
);

258 
boﬁ
 
	$isDú
(Ëc⁄° { 
ty≥_
 >
FAT_FILE_TYPE_MIN_DIR
;
	}
}

260 
boﬁ
 
	$isFûe
(Ëc⁄° { 
ty≥_
 =
FAT_FILE_TYPE_NORMAL
;
	}
}

262 
boﬁ
 
	$isO≥n
(Ëc⁄° { 
ty≥_
 !
FAT_FILE_TYPE_CLOSED
;
	}
}

264 
boﬁ
 
	$isSubDú
(Ëc⁄° { 
ty≥_
 =
FAT_FILE_TYPE_SUBDIR
;
	}
}

266 
boﬁ
 
	$isRoŸ
() const {

267  
ty≥_
 =
FAT_FILE_TYPE_ROOT_FIXED
 ||Åy≥_ =
FAT_FILE_TYPE_ROOT32
;

268 
	}
}

269 
ls
–
uöt8_t
 
Êags
 = 0, uöt8_à
ödít
 = 0);

270 
boﬁ
 
mkdú
(
SdBa£Fûe
* 
dú
, c⁄° * 
∑th
, boﬁ 
pFœg
 = 
åue
);

272 
boﬁ
 
	$makeDú
(
SdBa£Fûe
* 
dú
, c⁄° * 
∑th
) {

273  
	`mkdú
(
dú
, 
∑th
, 
Ál£
);

274 
	}
}

275 
boﬁ
 
›í
(
SdBa£Fûe
* 
dúFûe
, 
uöt16_t
 
ödex
, 
uöt8_t
 
oÊag
);

276 
boﬁ
 
›í
(
SdBa£Fûe
* 
dúFûe
, c⁄° * 
∑th
, 
uöt8_t
 
oÊag
);

277 
boﬁ
 
›í
(c⁄° * 
∑th
, 
uöt8_t
 
oÊag
 = 
O_READ
);

278 
boﬁ
 
›íNext
(
SdBa£Fûe
* 
dúFûe
, 
uöt8_t
 
oÊag
);

279 
boﬁ
 
›íRoŸ
(
SdVﬁume
* 
vﬁ
);

280 
≥ek
();

281 
¥ötF©D©e
(
uöt16_t
 
ÁtD©e
);

282 
¥ötF©Time
–
uöt16_t
 
ÁtTime
);

283 
boﬁ
 
¥ötName
();

284 
öt16_t
 
ªad
();

285 
öt16_t
 
ªad
(* 
buf
, 
uöt16_t
 
nbyã
);

286 
öt8_t
 
ªadDú
(
dú_t
* 
dú
, * 
l⁄gFûíame
);

287 
boﬁ
 
ªmove
(
SdBa£Fûe
* 
dúFûe
, c⁄° * 
∑th
);

288 
boﬁ
 
ªmove
();

290 
	$ªwöd
(Ë{
	`£ekSë
(0);
	}
}

291 
boﬁ
 
ª«me
(
SdBa£Fûe
* 
dúFûe
, c⁄° * 
√wP©h
);

292 
boﬁ
 
rmdú
();

294 
boﬁ
 
	$rmDú
(Ë{ 
	`rmdú
();
	}
}

295 
boﬁ
 
rmRfSèr
();

300 
boﬁ
 
	$£ekCur
(
öt32_t
 
off£t
) {

301  
	`£ekSë
(
curPosôi⁄_
 + 
off£t
);

302 
	}
}

307 
boﬁ
 
	$£ekEnd
(
öt32_t
 
off£t
 = 0Ë{ 
	`£ekSë
(
fûeSize_
 + off£t);
	}
}

308 
boﬁ
 
£ekSë
(
uöt32_t
 
pos
);

309 
boﬁ
 
sync
();

310 
boﬁ
 
time°amp
(
SdBa£Fûe
* 
fûe
);

311 
boﬁ
 
time°amp
(
uöt8_t
 
Êag
, 
uöt16_t
 
yór
, uöt8_à
m⁄th
, uöt8_à
day
,

312 
uöt8_t
 
hour
, uöt8_à
möuã
, uöt8_à
£c⁄d
);

318 
uöt8_t
 
	$ty≥
(Ëc⁄° { 
ty≥_
;
	}
}

319 
boﬁ
 
åunˇã
(
uöt32_t
 
size
);

321 
SdVﬁume
* 
	$vﬁume
(Ëc⁄° { 
vﬁ_
;
	}
}

322 
öt16_t
 
wrôe
(c⁄° * 
buf
, 
uöt16_t
 
nbyã
);

324 
	g¥iv©e
:

326 
‰õnd
 
˛ass
 
SdF©
;

328 
SdBa£Fûe
* 
	gcwd_
;

330 (*
d©eTime_
)(
uöt16_t
* 
d©e
, uöt16_t* 
time
);

333 
uöt8_t
 c⁄° 
F_OFLAG
 = (
O_ACCMODE
 | 
O_APPEND
 | 
O_SYNC
);

335 
uöt8_t
 c⁄° 
F_FILE_DIR_DIRTY
 = 0X80;

338 
uöt8_t
 
Êags_
;

339 
uöt8_t
 
f°©e_
;

340 
uöt8_t
 
ty≥_
;

341 
uöt32_t
 
curClu°î_
;

342 
uöt32_t
 
curPosôi⁄_
;

343 
uöt32_t
 
dúBlock_
;

344 
uöt8_t
 
dúIndex_
;

345 
uöt32_t
 
fûeSize_
;

346 
uöt32_t
 
fú°Clu°î_
;

347 
SdVﬁume
* 
vﬁ_
;

350 
boﬁ
 
	`›íP¨ít
(
SdBa£Fûe
* 
dú
);

352 
boﬁ
 
	`addClu°î
();

353 
boﬁ
 
	`addDúClu°î
();

354 
dú_t
* 
	`ˇcheDúE¡ry
(
uöt8_t
 
a˘i⁄
);

355 
öt8_t
 
	`lsPrötNext
–
uöt8_t
 
Êags
, uöt8_à
ödít
);

356 
boﬁ
 
	`make83Name
(c⁄° * 
°r
, 
uöt8_t
* 
«me
, c⁄° ** 
±r
);

357 
boﬁ
 
	`mkdú
(
SdBa£Fûe
* 
∑ª¡
, c⁄° 
uöt8_t
 
d«me
[11]);

358 
boﬁ
 
	`›í
(
SdBa£Fûe
* 
dúFûe
, c⁄° 
uöt8_t
 
d«me
[11], uöt8_à
oÊag
);

359 
boﬁ
 
	`›íCachedE¡ry
(
uöt8_t
 
ˇcheIndex
, uöt8_à
oÊags
);

360 
dú_t
* 
	`ªadDúCache
();

363 
	`¥ötDúName
–c⁄° 
dú_t
& 
dú
,

364 
uöt8_t
 
width
, 
boﬁ
 
¥ötSœsh
);

367 #i‡
ALLOW_DEPRECATED_FUNCTIONS
 && !
	$deföed
(
DOXYGEN
)

368 
public
:

375 
boﬁ
 
	$c⁄tiguousR™ge
(
uöt32_t
& 
bgnBlock
, uöt32_t& 
ídBlock
) {

376  
	`c⁄tiguousR™ge
(&
bgnBlock
, &
ídBlock
);

377 
	}
}

386 
boﬁ
 
	$¸óãC⁄tiguous
(
SdBa£Fûe
& 
dúFûe
,

387 c⁄° * 
∑th
, 
uöt32_t
 
size
) {

388  
	`¸óãC⁄tiguous
(&
dúFûe
, 
∑th
, 
size
);

389 
	}
}

395 
d©eTimeCÆlback
(

396 (*
d©eTime
)(
uöt16_t
& 
d©e
, uöt16_t& 
time
)) {

397 
ﬁdD©eTime_
 = 
d©eTime
;

398 
d©eTime_
 = 
d©eTime
 ? 
ﬁdToNew
 : 0;

399 
	}
}

404 
boﬁ
 
	$dúE¡ry
(
dú_t
& 
dú
Ë{ 
	`dúE¡ry
(&dú);
	}
}

412 
boﬁ
 
	$mkdú
(
SdBa£Fûe
& 
dú
, c⁄° * 
∑th
) {

413  
	`mkdú
(&
dú
, 
∑th
);

414 
	}
}

424 
boﬁ
 
	$›í
(
SdBa£Fûe
& 
dúFûe
,

425 c⁄° * 
∑th
, 
uöt8_t
 
oÊag
) {

426  
	`›í
(&
dúFûe
, 
∑th
, 
oÊag
);

427 
	}
}

434 
boﬁ
 
	$›í
(
SdBa£Fûe
& 
dúFûe
, c⁄° * 
∑th
) {

435  
	`›í
(
dúFûe
, 
∑th
, 
O_RDWR
);

436 
	}
}

446 
boﬁ
 
	$›í
(
SdBa£Fûe
& 
dúFûe
, 
uöt16_t
 
ödex
, 
uöt8_t
 
oÊag
) {

447  
	`›í
(&
dúFûe
, 
ödex
, 
oÊag
);

448 
	}
}

453 
boﬁ
 
	$›íRoŸ
(
SdVﬁume
& 
vﬁ
Ë{ 
	`›íRoŸ
(&vﬁ);
	}
}

458 
öt8_t
 
	$ªadDú
(
dú_t
& 
dú
, * 
l⁄gFûíame
Ë{ 
	`ªadDú
(&dú,Ü⁄gFûíame);
	}
}

465 
boﬁ
 
	$ªmove
(
SdBa£Fûe
& 
dúFûe
, c⁄° * 
∑th
) {

466  
	`ªmove
(&
dúFûe
, 
∑th
);

467 
	}
}

470 
	g¥iv©e
:

471 (*
ﬁdD©eTime_
)(
uöt16_t
& 
d©e
, uöt16_t& 
time
);

472 
	$ﬁdToNew
(
uöt16_t
* 
d©e
, uöt16_t* 
time
) {

473 
uöt16_t
 
d
;

474 
uöt16_t
 
t
;

475 
	`ﬁdD©eTime_
(
d
, 
t
);

476 *
d©e
 = 
d
;

477 *
time
 = 
t
;

478 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/SdFatConfig.h

24 
	~"M¨lö.h
"

25 #ifde‡
SDSUPPORT


27 #i‚de‡
SdF©C⁄fig_h


28 
	#SdF©C⁄fig_h


	)

29 
	~<°döt.h
>

38 
	#USE_MULTIPLE_CARDS
 0

	)

57 
	#ENDL_CALLS_FLUSH
 0

	)

62 
	#ALLOW_DEPRECATED_FUNCTIONS
 1

	)

68 
	#FAT12_SUPPORT
 0

	)

74 
	#SPI_SD_INIT_RATE
 5

	)

80 
	#SET_SPI_SS_HIGH
 1

	)

90 
	#MEGA_SOFT_SPI
 0

	)

95 
	#USE_SOFTWARE_SPI
 0

	)

98 
uöt8_t
 c⁄° 
	gSOFT_SPI_CS_PIN
 = 10;

100 
uöt8_t
 c⁄° 
	gSOFT_SPI_MOSI_PIN
 = 11;

102 
uöt8_t
 c⁄° 
	gSOFT_SPI_MISO_PIN
 = 12;

104 
uöt8_t
 c⁄° 
	gSOFT_SPI_SCK_PIN
 = 13;

110 
	#USE_CXA_PURE_VIRTUAL
 1

	)

115 
	#MAX_VFAT_ENTRIES
 (2)

	)

117 
	#FILENAME_LENGTH
 13

	)

119 
	#LONG_FILENAME_LENGTH
 (13*
MAX_VFAT_ENTRIES
+1)

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/SdFatStructs.h

20 
	~"M¨lö.h
"

21 #ifde‡
SDSUPPORT


23 #i‚de‡
SdF©Såu˘s_h


24 
	#SdF©Såu˘s_h


	)

26 
	#PACKED
 
	`__©åibuã__
((
__∑cked__
))

	)

37 
uöt8_t
 c⁄° 
	gBOOTSIG0
 = 0X55;

39 
uöt8_t
 c⁄° 
	gBOOTSIG1
 = 0XAA;

41 
uöt8_t
 c⁄° 
	gEXTENDED_BOOT_SIG
 = 0X29;

50 
	s∑πôi⁄TabÀ
 {

56 
uöt8_t
 
	mboŸ
;

61 
uöt8_t
 
	mbegöHód
;

66 
	mbegöSe˘‹
 : 6;

68 
	mbegöCylödîHigh
 : 2;

73 
uöt8_t
 
	mbegöCylödîLow
;

78 
uöt8_t
 
	mty≥
;

83 
uöt8_t
 
	mídHód
;

88 
	mídSe˘‹
 : 6;

90 
	mídCylödîHigh
 : 2;

95 
uöt8_t
 
	mídCylödîLow
;

97 
uöt32_t
 
	mfú°Se˘‹
;

99 
uöt32_t
 
	mtŸÆSe˘‹s
;

100 } 
	gPACKED
;

102 
∑πôi⁄TabÀ
 
	t∑π_t
;

111 
	sma°îBoŸRec‹d
 {

113 
uöt8_t
 
	mcodeAªa
[440];

115 
uöt32_t
 
	mdiskSig«tuª
;

117 
uöt16_t
 
	musuÆlyZîo
;

119 
∑π_t
 
	m∑π
[4];

121 
uöt8_t
 
	mmbrSig0
;

123 
uöt8_t
 
	mmbrSig1
;

124 } 
	gPACKED
;

126 
ma°îBoŸRec‹d
 
	tmbr_t
;

134 
	sÁt_boŸ
 {

140 
uöt8_t
 
	mjump
[3];

145 
	m€mId
[8];

151 
uöt16_t
 
	mbyãsPîSe˘‹
;

157 
uöt8_t
 
	m£˘‹sPîClu°î
;

162 
uöt16_t
 
	mª£rvedSe˘‹Cou¡
;

167 
uöt8_t
 
	mÁtCou¡
;

176 
uöt16_t
 
	mroŸDúE¡ryCou¡
;

186 
uöt16_t
 
	mtŸÆSe˘‹s16
;

193 
uöt8_t
 
	mmedüTy≥
;

199 
uöt16_t
 
	m£˘‹sPîF©16
;

201 
uöt16_t
 
	m£˘‹sPîTøck
;

203 
uöt16_t
 
	mhódCou¡
;

209 
uöt32_t
 
	mhidddíSe˘‹s
;

216 
uöt32_t
 
	mtŸÆSe˘‹s32
;

225 
uöt8_t
 
	mdriveNumbî
;

227 
uöt8_t
 
	mª£rved1
;

229 
uöt8_t
 
	mboŸSig«tuª
;

235 
uöt32_t
 
	mvﬁumeSîülNumbî
;

240 
	mvﬁumeLabñ
[11];

245 
	mfûeSy°emTy≥
[8];

247 
uöt8_t
 
	mboŸCode
[448];

249 
uöt8_t
 
	mboŸSe˘‹Sig0
;

251 
uöt8_t
 
	mboŸSe˘‹Sig1
;

252 } 
	gPACKED
;

254 
Át_boŸ
 
	tÁt_boŸ_t
;

262 
	sÁt32_boŸ
 {

268 
uöt8_t
 
	mjump
[3];

273 
	m€mId
[8];

279 
uöt16_t
 
	mbyãsPîSe˘‹
;

285 
uöt8_t
 
	m£˘‹sPîClu°î
;

290 
uöt16_t
 
	mª£rvedSe˘‹Cou¡
;

295 
uöt8_t
 
	mÁtCou¡
;

299 
uöt16_t
 
	mroŸDúE¡ryCou¡
;

303 
uöt16_t
 
	mtŸÆSe˘‹s16
;

310 
uöt8_t
 
	mmedüTy≥
;

315 
uöt16_t
 
	m£˘‹sPîF©16
;

317 
uöt16_t
 
	m£˘‹sPîTøck
;

319 
uöt16_t
 
	mhódCou¡
;

325 
uöt32_t
 
	mhidddíSe˘‹s
;

329 
uöt32_t
 
	mtŸÆSe˘‹s32
;

333 
uöt32_t
 
	m£˘‹sPîF©32
;

345 
uöt16_t
 
	mÁt32Fœgs
;

350 
uöt16_t
 
	mÁt32Vîsi⁄
;

355 
uöt32_t
 
	mÁt32RoŸClu°î
;

360 
uöt16_t
 
	mÁt32FSInfo
;

366 
uöt16_t
 
	mÁt32BackBoŸBlock
;

371 
uöt8_t
 
	mÁt32Re£rved
[12];

380 
uöt8_t
 
	mdriveNumbî
;

382 
uöt8_t
 
	mª£rved1
;

384 
uöt8_t
 
	mboŸSig«tuª
;

390 
uöt32_t
 
	mvﬁumeSîülNumbî
;

395 
	mvﬁumeLabñ
[11];

399 
	mfûeSy°emTy≥
[8];

401 
uöt8_t
 
	mboŸCode
[420];

403 
uöt8_t
 
	mboŸSe˘‹Sig0
;

405 
uöt8_t
 
	mboŸSe˘‹Sig1
;

406 } 
	gPACKED
;

408 
Át32_boŸ
 
	tÁt32_boŸ_t
;

411 
uöt32_t
 c⁄° 
	gFSINFO_LEAD_SIG
 = 0x41615252;

413 
uöt32_t
 c⁄° 
	gFSINFO_STRUCT_SIG
 = 0x61417272;

420 
	sÁt32_fsöfo
 {

422 
uöt32_t
 
	mÀadSig«tuª
;

424 
uöt8_t
 
	mª£rved1
[480];

426 
uöt32_t
 
	m°ru˘Sig«tuª
;

434 
uöt32_t
 
	m‰ìCou¡
;

441 
uöt32_t
 
	m√xtFªe
;

443 
uöt8_t
 
	mª£rved2
[12];

445 
uöt8_t
 
	mèûSig«tuª
[4];

446 } 
	gPACKED
;

448 
Át32_fsöfo
 
	tÁt32_fsöfo_t
;

452 
uöt16_t
 c⁄° 
	gFAT12EOC
 = 0XFFF;

454 
uöt16_t
 c⁄° 
	gFAT12EOC_MIN
 = 0XFF8;

456 
uöt16_t
 c⁄° 
	gFAT16EOC
 = 0XFFFF;

458 
uöt16_t
 c⁄° 
	gFAT16EOC_MIN
 = 0XFFF8;

460 
uöt32_t
 c⁄° 
	gFAT32EOC
 = 0X0FFFFFFF;

462 
uöt32_t
 c⁄° 
	gFAT32EOC_MIN
 = 0X0FFFFFF8;

464 
uöt32_t
 c⁄° 
	gFAT32MASK
 = 0X0FFFFFFF;

496 
	sdúe˘‹yE¡ry
 {

502 
uöt8_t
 
	m«me
[11];

509 
uöt8_t
 
	m©åibuãs
;

514 
uöt8_t
 
	mª£rvedNT
;

520 
uöt8_t
 
	m¸óti⁄TimeTíths
;

522 
uöt16_t
 
	m¸óti⁄Time
;

524 
uöt16_t
 
	m¸óti⁄D©e
;

530 
uöt16_t
 
	mœ°Ac˚ssD©e
;

535 
uöt16_t
 
	mfú°Clu°îHigh
;

537 
uöt16_t
 
	mœ°WrôeTime
;

539 
uöt16_t
 
	mœ°WrôeD©e
;

541 
uöt16_t
 
	mfú°Clu°îLow
;

543 
uöt32_t
 
	mfûeSize
;

544 } 
	gPACKED
;

555 
	sdúe˘‹yVFATE¡ry
 {

561 
uöt8_t
 
	m£quí˚Numbî
;

563 
uöt16_t
 
	m«me1
[5];

565 
uöt8_t
 
	m©åibuãs
;

567 
uöt8_t
 
	mª£rvedNT
;

569 
uöt8_t
 
	mchecksum
;

571 
uöt16_t
 
	m«me2
[6];

573 
uöt16_t
 
	mfú°Clu°îLow
;

575 
uöt16_t
 
	m«me3
[2];

576 } 
	gPACKED
;

581 
dúe˘‹yE¡ry
 
	tdú_t
;

583 
dúe˘‹yVFATE¡ry
 
	tvÁt_t
;

585 
uöt8_t
 c⁄° 
	gDIR_NAME_0XE5
 = 0X05;

587 
uöt8_t
 c⁄° 
	gDIR_NAME_DELETED
 = 0XE5;

589 
uöt8_t
 c⁄° 
	gDIR_NAME_FREE
 = 0X00;

591 
uöt8_t
 c⁄° 
	gDIR_ATT_READ_ONLY
 = 0X01;

593 
uöt8_t
 c⁄° 
	gDIR_ATT_HIDDEN
 = 0X02;

595 
uöt8_t
 c⁄° 
	gDIR_ATT_SYSTEM
 = 0X04;

597 
uöt8_t
 c⁄° 
	gDIR_ATT_VOLUME_ID
 = 0X08;

599 
uöt8_t
 c⁄° 
	gDIR_ATT_DIRECTORY
 = 0X10;

601 
uöt8_t
 c⁄° 
	gDIR_ATT_ARCHIVE
 = 0X20;

604 
uöt8_t
 c⁄° 
	gDIR_ATT_LONG_NAME
 = 0X0F;

606 
uöt8_t
 c⁄° 
	gDIR_ATT_LONG_NAME_MASK
 = 0X3F;

608 
uöt8_t
 c⁄° 
	gDIR_ATT_DEFINED_BITS
 = 0X3F;

614 
ölöe
 
uöt8_t
 
	$DIR_IS_LONG_NAME
(c⁄° 
dú_t
* 
dú
) {

615  (
dú
->
©åibuãs
 & 
DIR_ATT_LONG_NAME_MASK
Ë=
DIR_ATT_LONG_NAME
;

616 
	}
}

618 
uöt8_t
 c⁄° 
	gDIR_ATT_FILE_TYPE_MASK
 = (
DIR_ATT_VOLUME_ID
 | 
DIR_ATT_DIRECTORY
);

624 
ölöe
 
uöt8_t
 
	$DIR_IS_FILE
(c⁄° 
dú_t
* 
dú
) {

625  (
dú
->
©åibuãs
 & 
DIR_ATT_FILE_TYPE_MASK
) == 0;

626 
	}
}

632 
ölöe
 
uöt8_t
 
	$DIR_IS_SUBDIR
(c⁄° 
dú_t
* 
dú
) {

633  (
dú
->
©åibuãs
 & 
DIR_ATT_FILE_TYPE_MASK
Ë=
DIR_ATT_DIRECTORY
;

634 
	}
}

640 
ölöe
 
uöt8_t
 
	$DIR_IS_FILE_OR_SUBDIR
(c⁄° 
dú_t
* 
dú
) {

641  (
dú
->
©åibuãs
 & 
DIR_ATT_VOLUME_ID
) == 0;

642 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/SdFatUtil.cpp

20 
	~"M¨lö.h
"

22 #ifde‡
SDSUPPORT


23 
	~"SdF©Utû.h
"

29 
	gSdF©Utû
::
	$FªeRam
() {

31 
__bss_íd
;

32 * 
__brkvÆ
;

33 
‰ì_mem‹y
;

34 i‡(
ªöãΩªt_ˇ°
<>(
__brkvÆ
) == 0) {

36 
‰ì_mem‹y
 = 
ªöãΩªt_ˇ°
<>(&free_memory)

37 - 
ªöãΩªt_ˇ°
<>(&
__bss_íd
);

40 
‰ì_mem‹y
 = 
ªöãΩªt_ˇ°
<>(&free_memory)

41 - 
ªöãΩªt_ˇ°
<>(
__brkvÆ
);

43  
‰ì_mem‹y
;

45 
	}
}

52 
	gSdF©Utû
::
	$¥öt_P
–
PGM_P
 
°r
) {

53 
uöt8_t
 
c
; (¯
	`pgm_ªad_byã
(
°r
)); så++Ë
MYSERIAL
.
	`wrôe
(c);

54 
	}
}

61 
	gSdF©Utû
::
	$¥öén_P
–
PGM_P
 
°r
) {

62 
	`¥öt_P
–
°r
);

63 
MYSERIAL
.
	`¥öén
();

64 
	}
}

70 
	gSdF©Utû
::
	$SîülPröt_P
(
PGM_P
 
°r
) {

71 
	`¥öt_P
(
°r
);

72 
	}
}

78 
	gSdF©Utû
::
	$SîülPröén_P
(
PGM_P
 
°r
) {

79 
	`¥öén_P
–
°r
);

80 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/SdFatUtil.h

20 
	~"M¨lö.h
"

21 #ifde‡
SDSUPPORT


23 #i‚de‡
SdF©Utû_h


24 
	#SdF©Utû_h


	)

29 
	~"M¨lö.h
"

30 
	~"M¨löSîül.h
"

32 
	#PgmPröt
(
x
Ë
	`SîülPröt_P
(
	`PSTR
(x))

	)

34 
	#PgmPröén
(
x
Ë
	`SîülPröén_P
(
	`PSTR
(x))

	)

36 
«me•a˚
 
	gSdF©Utû
 {

37 
FªeRam
();

38 
¥öt_P
–
PGM_P
 
°r
);

39 
¥öén_P
–
PGM_P
 
°r
);

40 
SîülPröt_P
(
PGM_P
 
°r
);

41 
SîülPröén_P
(
PGM_P
 
°r
);

44 
usög
 
«me•a˚
 
	gSdF©Utû
;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/SdFile.cpp

20 
	~"M¨lö.h
"

22 #ifde‡
SDSUPPORT


23 
	~"SdFûe.h
"

31 
	gSdFûe
::
	$SdFûe
(c⁄° * 
∑th
, 
uöt8_t
 
oÊag
Ë: 
	$SdBa£Fûe
(
∑th
, 
oÊag
) {

32 
	}
}

49 
öt16_t
 
	gSdFûe
::
	$wrôe
(c⁄° * 
buf
, 
uöt16_t
 
nbyã
) {

50  
SdBa£Fûe
::
	`wrôe
(
buf
, 
nbyã
);

51 
	}
}

57 #i‡
ARDUINO
 >= 100

58 
size_t
 
	gSdFûe
::
	$wrôe
(
uöt8_t
 
b
)

60  
SdBa£Fûe
::
	`wrôe
(&
b
, 1);

61 
	}
}

63 
	gSdFûe
::
	$wrôe
(
uöt8_t
 
b
)

65 
SdBa£Fûe
::
	`wrôe
(&
b
, 1);

66 
	}
}

73 
	gSdFûe
::
	$wrôe
(c⁄° * 
°r
) {

74 
SdBa£Fûe
::
	`wrôe
(
°r
, 
	`°æí
(str));

75 
	}
}

81 
	gSdFûe
::
	$wrôe_P
(
PGM_P
 
°r
) {

82 
uöt8_t
 
c
; (¯
	`pgm_ªad_byã
(
°r
)); så++Ë
	`wrôe
(c);

83 
	}
}

89 
	gSdFûe
::
	$wrôñn_P
(
PGM_P
 
°r
) {

90 
	`wrôe_P
(
°r
);

91 
	`wrôe_P
(
	`PSTR
("\r\n"));

92 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/SdFile.h

24 
	~"M¨lö.h
"

26 #ifde‡
SDSUPPORT


27 
	~"SdBa£Fûe.h
"

28 
	~<Pröt.h
>

29 #i‚de‡
SdFûe_h


30 
	#SdFûe_h


	)

36 
˛ass
 
	gSdFûe
 : 
public
 
SdBa£Fûe
,Öubli¯
	gPröt
 {

37 
	gpublic
:

38 
SdFûe
() {}

39 
SdFûe
(c⁄° * 
«me
, 
uöt8_t
 
oÊag
);

40 #i‡
ARDUINO
 >= 100

41 
size_t
 
wrôe
(
uöt8_t
 
b
);

43 
wrôe
(
uöt8_t
 
b
);

46 
öt16_t
 
wrôe
(c⁄° * 
buf
, 
uöt16_t
 
nbyã
);

47 
wrôe
(c⁄° * 
°r
);

48 
wrôe_P
(
PGM_P
 
°r
);

49 
wrôñn_P
(
PGM_P
 
°r
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/SdInfo.h

20 
	~"M¨lö.h
"

21 #ifde‡
SDSUPPORT


23 #i‚de‡
SdInfo_h


24 
	#SdInfo_h


	)

25 
	~<°döt.h
>

39 
uöt8_t
 c⁄° 
	gCMD0
 = 0X00;

41 
uöt8_t
 c⁄° 
	gCMD8
 = 0X08;

43 
uöt8_t
 c⁄° 
	gCMD9
 = 0X09;

45 
uöt8_t
 c⁄° 
	gCMD10
 = 0X0A;

47 
uöt8_t
 c⁄° 
	gCMD12
 = 0X0C;

49 
uöt8_t
 c⁄° 
	gCMD13
 = 0X0D;

51 
uöt8_t
 c⁄° 
	gCMD17
 = 0X11;

53 
uöt8_t
 c⁄° 
	gCMD18
 = 0X12;

55 
uöt8_t
 c⁄° 
	gCMD24
 = 0X18;

57 
uöt8_t
 c⁄° 
	gCMD25
 = 0X19;

59 
uöt8_t
 c⁄° 
	gCMD32
 = 0X20;

62 
uöt8_t
 c⁄° 
	gCMD33
 = 0X21;

64 
uöt8_t
 c⁄° 
	gCMD38
 = 0X26;

66 
uöt8_t
 c⁄° 
	gCMD55
 = 0X37;

68 
uöt8_t
 c⁄° 
	gCMD58
 = 0X3A;

71 
uöt8_t
 c⁄° 
	gACMD23
 = 0X17;

74 
uöt8_t
 c⁄° 
	gACMD41
 = 0X29;

77 
uöt8_t
 c⁄° 
	gR1_READY_STATE
 = 0X00;

79 
uöt8_t
 c⁄° 
	gR1_IDLE_STATE
 = 0X01;

81 
uöt8_t
 c⁄° 
	gR1_ILLEGAL_COMMAND
 = 0X04;

83 
uöt8_t
 c⁄° 
	gDATA_START_BLOCK
 = 0XFE;

85 
uöt8_t
 c⁄° 
	gSTOP_TRAN_TOKEN
 = 0XFD;

87 
uöt8_t
 c⁄° 
	gWRITE_MULTIPLE_TOKEN
 = 0XFC;

89 
uöt8_t
 c⁄° 
	gDATA_RES_MASK
 = 0X1F;

91 
uöt8_t
 c⁄° 
	gDATA_RES_ACCEPTED
 = 0X05;

94 
	sCID
 {

97 
	mmid
;

100 
	moid
[2];

103 
	m≤m
[5];

106 
	m¥v_m
 : 4;

108 
	m¥v_n
 : 4;

111 
uöt32_t
 
	mp¢
;

114 
	mmdt_yór_high
 : 4;

116 
	mª£rved
 : 4;

119 
	mmdt_m⁄th
 : 4;

121 
	mmdt_yór_low
 :4;

124 
	mÆways1
 : 1;

126 
	m¸c
 : 7;

127 }
	tcid_t
;

130 
	sCSDV1
 {

132 
	mª£rved1
 : 6;

133 
	mcsd_vî
 : 2;

135 
	mèac
;

137 
	mnßc
;

139 
	må™_•ìd
;

141 
	mccc_high
;

143 
	mªad_bl_Àn
 : 4;

144 
	mccc_low
 : 4;

146 
	mc_size_high
 : 2;

147 
	mª£rved2
 : 2;

148 
	md§_imp
 : 1;

149 
	mªad_blk_mißlign
 :1;

150 
	mwrôe_blk_mißlign
 : 1;

151 
	mªad_bl_∑πül
 : 1;

153 
	mc_size_mid
;

155 
	mvdd_r_cuº_max
 : 3;

156 
	mvdd_r_cuº_mö
 : 3;

157 
	mc_size_low
 :2;

159 
	mc_size_mu…_high
 : 2;

160 
	mvdd_w_cur_max
 : 3;

161 
	mvdd_w_cuº_mö
 : 3;

163 
	m£˘‹_size_high
 : 6;

164 
	mîa£_blk_í
 : 1;

165 
	mc_size_mu…_low
 : 1;

167 
	mwp_gΩ_size
 : 7;

168 
	m£˘‹_size_low
 : 1;

170 
	mwrôe_bl_Àn_high
 : 2;

171 
	mr2w_Á˘‹
 : 3;

172 
	mª£rved3
 : 2;

173 
	mwp_gΩ_íabÀ
 : 1;

175 
	mª£rved4
 : 5;

176 
	mwrôe_∑πül
 : 1;

177 
	mwrôe_bl_Àn_low
 : 2;

179 
	mª£rved5
: 2;

180 
	mfûe_f‹m©
 : 2;

181 
	mtmp_wrôe_¥Ÿe˘
 : 1;

182 
	m≥rm_wrôe_¥Ÿe˘
 : 1;

183 
	mc›y
 : 1;

185 
	mfûe_f‹m©_gΩ
 : 1;

187 
	mÆways1
 : 1;

188 
	m¸c
 : 7;

189 }
	tcsd1_t
;

192 
	sCSDV2
 {

194 
	mª£rved1
 : 6;

195 
	mcsd_vî
 : 2;

198 
	mèac
;

201 
	mnßc
;

203 
	må™_•ìd
;

205 
	mccc_high
;

208 
	mªad_bl_Àn
 : 4;

209 
	mccc_low
 : 4;

212 
	mª£rved2
 : 4;

213 
	md§_imp
 : 1;

215 
	mªad_blk_mißlign
 :1;

217 
	mwrôe_blk_mißlign
 : 1;

219 
	mªad_bl_∑πül
 : 1;

222 
	mª£rved3
 : 2;

224 
	mc_size_high
 : 6;

227 
	mc_size_mid
;

230 
	mc_size_low
;

233 
	m£˘‹_size_high
 : 6;

235 
	mîa£_blk_í
 : 1;

237 
	mª£rved4
 : 1;

239 
	mwp_gΩ_size
 : 7;

241 
	m£˘‹_size_low
 : 1;

244 
	mwrôe_bl_Àn_high
 : 2;

246 
	mr2w_Á˘‹
 : 3;

248 
	mª£rved5
 : 2;

250 
	mwp_gΩ_íabÀ
 : 1;

252 
	mª£rved6
 : 5;

254 
	mwrôe_∑πül
 : 1;

256 
	mwrôe_bl_Àn_low
 : 2;

258 
	mª£rved7
: 2;

260 
	mfûe_f‹m©
 : 2;

261 
	mtmp_wrôe_¥Ÿe˘
 : 1;

262 
	m≥rm_wrôe_¥Ÿe˘
 : 1;

263 
	mc›y
 : 1;

265 
	mfûe_f‹m©_gΩ
 : 1;

268 
	mÆways1
 : 1;

270 
	m¸c
 : 7;

271 }
	tcsd2_t
;

274 
	ucsd_t
 {

275 
csd1_t
 
	mv1
;

276 
csd2_t
 
	mv2
;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/SdVolume.cpp

20 
	~"M¨lö.h
"

21 #ifde‡
SDSUPPORT


23 
	~"SdVﬁume.h
"

25 #i‡!
USE_MULTIPLE_CARDS


27 
uöt32_t
 
	gSdVﬁume
::
ˇcheBlockNumbî_
;

28 
ˇche_t
 
	gSdVﬁume
::
ˇcheBuf„r_
;

29 
Sd2C¨d
* 
	gSdVﬁume
::
sdC¨d_
;

30 
boﬁ
 
	gSdVﬁume
::
ˇcheDúty_
;

31 
uöt32_t
 
	gSdVﬁume
::
ˇcheMúr‹Block_
;

35 
boﬁ
 
	gSdVﬁume
::
	$ÆlocC⁄tiguous
(
uöt32_t
 
cou¡
, uöt32_t* 
curClu°î
) {

37 
uöt32_t
 
bgnClu°î
;

39 
uöt32_t
 
ídClu°î
;

41 
uöt32_t
 
ÁtEnd
 = 
˛u°îCou¡_
 + 1;

44 
boﬁ
 
£tSèπ
;

47 i‡(*
curClu°î
) {

49 
bgnClu°î
 = *
curClu°î
 + 1;

52 
£tSèπ
 = 
Ál£
;

55 
bgnClu°î
 = 
ÆlocSórchSèπ_
;

58 
£tSèπ
 = 
cou¡
 == 1;

61 
ídClu°î
 = 
bgnClu°î
;

64 
uöt32_t
 
n
 = 0;;Ç++, 
ídClu°î
++) {

66 i‡(
n
 >
˛u°îCou¡_
Ë
Áû
;

69 i‡(
ídClu°î
 > 
ÁtEnd
) {

70 
bgnClu°î
 = 
ídClu°î
 = 2;

72 
uöt32_t
 
f
;

73 i‡(!
	`ÁtGë
(
ídClu°î
, &
f
)Ë
Áû
;

75 i‡(
f
 != 0) {

77 
bgnClu°î
 = 
ídClu°î
 + 1;

78 } i‡((
ídClu°î
 - 
bgnClu°î
 + 1Ë=
cou¡
) {

84 i‡(!
	`ÁtPutEOC
(
ídClu°î
)Ë
Áû
;

87 
ídClu°î
 > 
bgnClu°î
) {

88 i‡(!
	`ÁtPut
(
ídClu°î
 - 1,ÉndClu°î)Ë
Áû
;

89 
ídClu°î
--;

91 i‡(*
curClu°î
 != 0) {

93 i‡(!
	`ÁtPut
(*
curClu°î
, 
bgnClu°î
)Ë
Áû
;

96 *
curClu°î
 = 
bgnClu°î
;

99 i‡(
£tSèπ
Ë
ÆlocSórchSèπ_
 = 
bgnClu°î
 + 1;

101  
åue
;

103 
Áû
:

104  
Ál£
;

105 
	}
}

107 
boﬁ
 
	gSdVﬁume
::
	$ˇcheFlush
() {

108 i‡(
ˇcheDúty_
) {

109 i‡(!
sdC¨d_
->
	`wrôeBlock
(
ˇcheBlockNumbî_
, 
ˇcheBuf„r_
.
d©a
)) {

110 
Áû
;

113 i‡(
ˇcheMúr‹Block_
) {

114 i‡(!
sdC¨d_
->
	`wrôeBlock
(
ˇcheMúr‹Block_
, 
ˇcheBuf„r_
.
d©a
)) {

115 
Áû
;

117 
ˇcheMúr‹Block_
 = 0;

119 
ˇcheDúty_
 = 0;

121  
åue
;

123 
Áû
:

124  
Ál£
;

125 
	}
}

127 
boﬁ
 
	gSdVﬁume
::
	$ˇcheRawBlock
(
uöt32_t
 
blockNumbî
, 
boﬁ
 
dúty
) {

128 i‡(
ˇcheBlockNumbî_
 !
blockNumbî
) {

129 i‡(!
	`ˇcheFlush
()Ë
Áû
;

130 i‡(!
sdC¨d_
->
	`ªadBlock
(
blockNumbî
, 
ˇcheBuf„r_
.
d©a
)Ë
Áû
;

131 
ˇcheBlockNumbî_
 = 
blockNumbî
;

133 i‡(
dúty
Ë
ˇcheDúty_
 = 
åue
;

134  
åue
;

136 
Áû
:

137  
Ál£
;

138 
	}
}

141 
boﬁ
 
	gSdVﬁume
::
	$chaöSize
(
uöt32_t
 
˛u°î
, uöt32_t* 
size
) {

142 
uöt32_t
 
s
 = 0;

144 i‡(!
	`ÁtGë
(
˛u°î
, &˛u°î)Ë
Áû
;

145 
s
 +512UL << 
˛u°îSizeShi·_
;

146 } !
	`isEOC
(
˛u°î
));

147 *
size
 = 
s
;

148  
åue
;

150 
Áû
:

151  
Ál£
;

152 
	}
}

155 
boﬁ
 
	gSdVﬁume
::
	$ÁtGë
(
uöt32_t
 
˛u°î
, uöt32_t* 
vÆue
) {

156 
uöt32_t
 
lba
;

157 i‡(
˛u°î
 > (
˛u°îCou¡_
 + 1)Ë
Áû
;

158 i‡(
FAT12_SUPPORT
 && 
ÁtTy≥_
 == 12) {

159 
uöt16_t
 
ödex
 = 
˛u°î
;

160 
ödex
 += index >> 1;

161 
lba
 = 
ÁtSèπBlock_
 + (
ödex
 >> 9);

162 i‡(!
	`ˇcheRawBlock
(
lba
, 
CACHE_FOR_READ
)Ë
Áû
;

163 
ödex
 &= 0X1FF;

164 
uöt16_t
 
tmp
 = 
ˇcheBuf„r_
.
d©a
[
ödex
];

165 
ödex
++;

166 i‡(
ödex
 == 512) {

167 i‡(!
	`ˇcheRawBlock
(
lba
 + 1, 
CACHE_FOR_READ
)Ë
Áû
;

168 
ödex
 = 0;

170 
tmp
 |
ˇcheBuf„r_
.
d©a
[
ödex
] << 8;

171 *
vÆue
 = 
˛u°î
 & 1 ? 
tmp
 >> 4 :Åmp & 0XFFF;

172  
åue
;

174 i‡(
ÁtTy≥_
 == 16) {

175 
lba
 = 
ÁtSèπBlock_
 + (
˛u°î
 >> 8);

176 } i‡(
ÁtTy≥_
 == 32) {

177 
lba
 = 
ÁtSèπBlock_
 + (
˛u°î
 >> 7);

179 
Áû
;

181 i‡(
lba
 !
ˇcheBlockNumbî_
) {

182 i‡(!
	`ˇcheRawBlock
(
lba
, 
CACHE_FOR_READ
)Ë
Áû
;

184 i‡(
ÁtTy≥_
 == 16) {

185 *
vÆue
 = 
ˇcheBuf„r_
.
Át16
[
˛u°î
 & 0XFF];

187 *
vÆue
 = 
ˇcheBuf„r_
.
Át32
[
˛u°î
 & 0X7F] & 
FAT32MASK
;

189  
åue
;

191 
Áû
:

192  
Ál£
;

193 
	}
}

196 
boﬁ
 
	gSdVﬁume
::
	$ÁtPut
(
uöt32_t
 
˛u°î
, uöt32_à
vÆue
) {

197 
uöt32_t
 
lba
;

199 i‡(
˛u°î
 < 2Ë
Áû
;

202 i‡(
˛u°î
 > (
˛u°îCou¡_
 + 1)Ë
Áû
;

204 i‡(
FAT12_SUPPORT
 && 
ÁtTy≥_
 == 12) {

205 
uöt16_t
 
ödex
 = 
˛u°î
;

206 
ödex
 += index >> 1;

207 
lba
 = 
ÁtSèπBlock_
 + (
ödex
 >> 9);

208 i‡(!
	`ˇcheRawBlock
(
lba
, 
CACHE_FOR_WRITE
)Ë
Áû
;

210 i‡(
ÁtCou¡_
 > 1Ë
ˇcheMúr‹Block_
 = 
lba
 + 
blocksPîF©_
;

211 
ödex
 &= 0X1FF;

212 
uöt8_t
 
tmp
 = 
vÆue
;

213 i‡(
˛u°î
 & 1) {

214 
tmp
 = (
ˇcheBuf„r_
.
d©a
[
ödex
] & 0XF) |Åmp << 4;

216 
ˇcheBuf„r_
.
d©a
[
ödex
] = 
tmp
;

217 
ödex
++;

218 i‡(
ödex
 == 512) {

219 
lba
++;

220 
ödex
 = 0;

221 i‡(!
	`ˇcheRawBlock
(
lba
, 
CACHE_FOR_WRITE
)Ë
Áû
;

223 i‡(
ÁtCou¡_
 > 1Ë
ˇcheMúr‹Block_
 = 
lba
 + 
blocksPîF©_
;

225 
tmp
 = 
vÆue
 >> 4;

226 i‡(!(
˛u°î
 & 1)) {

227 
tmp
 = ((
ˇcheBuf„r_
.
d©a
[
ödex
] & 0XF0)) |Åmp >> 4;

229 
ˇcheBuf„r_
.
d©a
[
ödex
] = 
tmp
;

230  
åue
;

232 i‡(
ÁtTy≥_
 == 16) {

233 
lba
 = 
ÁtSèπBlock_
 + (
˛u°î
 >> 8);

234 } i‡(
ÁtTy≥_
 == 32) {

235 
lba
 = 
ÁtSèπBlock_
 + (
˛u°î
 >> 7);

237 
Áû
;

239 i‡(!
	`ˇcheRawBlock
(
lba
, 
CACHE_FOR_WRITE
)Ë
Áû
;

241 i‡(
ÁtTy≥_
 == 16) {

242 
ˇcheBuf„r_
.
Át16
[
˛u°î
 & 0XFF] = 
vÆue
;

244 
ˇcheBuf„r_
.
Át32
[
˛u°î
 & 0X7F] = 
vÆue
;

247 i‡(
ÁtCou¡_
 > 1Ë
ˇcheMúr‹Block_
 = 
lba
 + 
blocksPîF©_
;

248  
åue
;

250 
Áû
:

251  
Ál£
;

252 
	}
}

255 
boﬁ
 
	gSdVﬁume
::
	$‰ìChaö
(
uöt32_t
 
˛u°î
) {

256 
uöt32_t
 
√xt
;

259 
ÆlocSórchSèπ_
 = 2;

262 i‡(!
	`ÁtGë
(
˛u°î
, &
√xt
)Ë
Áû
;

265 i‡(!
	`ÁtPut
(
˛u°î
, 0)Ë
Áû
;

267 
˛u°î
 = 
√xt
;

268 } !
	`isEOC
(
˛u°î
));

270  
åue
;

272 
Áû
:

273  
Ál£
;

274 
	}
}

280 
öt32_t
 
	gSdVﬁume
::
	$‰ìClu°îCou¡
() {

281 
uöt32_t
 
‰ì
 = 0;

282 
uöt16_t
 
n
;

283 
uöt32_t
 
todo
 = 
˛u°îCou¡_
 + 2;

285 i‡(
ÁtTy≥_
 == 16) {

286 
n
 = 256;

287 } i‡(
ÁtTy≥_
 == 32) {

288 
n
 = 128;

294 
uöt32_t
 
lba
 = 
ÁtSèπBlock_
; 
todo
;Åodÿ-
n
,Üba++) {

295 i‡(!
	`ˇcheRawBlock
(
lba
, 
CACHE_FOR_READ
))  -1;

296 i‡(
todo
 < 
n
)Ç =Åodo;

297 i‡(
ÁtTy≥_
 == 16) {

298 
uöt16_t
 
i
 = 0; i < 
n
; i++) {

299 i‡(
ˇcheBuf„r_
.
Át16
[
i
] =0Ë
‰ì
++;

302 
uöt16_t
 
i
 = 0; i < 
n
; i++) {

303 i‡(
ˇcheBuf„r_
.
Át32
[
i
] =0Ë
‰ì
++;

307  
‰ì
;

308 
	}
}

324 
boﬁ
 
	gSdVﬁume
::
	$öô
(
Sd2C¨d
* 
dev
, 
uöt8_t
 
∑π
) {

325 
uöt32_t
 
tŸÆBlocks
;

326 
uöt32_t
 
vﬁumeSèπBlock
 = 0;

327 
Át32_boŸ_t
* 
fbs
;

329 
sdC¨d_
 = 
dev
;

330 
ÁtTy≥_
 = 0;

331 
ÆlocSórchSèπ_
 = 2;

332 
ˇcheDúty_
 = 0;

333 
ˇcheMúr‹Block_
 = 0;

334 
ˇcheBlockNumbî_
 = 0XFFFFFFFF;

338 i‡(
∑π
) {

339 i‡(
∑π
 > 4)
Áû
;

340 i‡(!
	`ˇcheRawBlock
(
vﬁumeSèπBlock
, 
CACHE_FOR_READ
)Ë
Áû
;

341 
∑π_t
* 
p
 = &
ˇcheBuf„r_
.
mbr
.
∑π
[part-1];

342 i‡((
p
->
boŸ
 & 0X7F) !=0 ||

343 
p
->
tŸÆSe˘‹s
 < 100 ||

344 
p
->
fú°Se˘‹
 == 0) {

346 
Áû
;

348 
vﬁumeSèπBlock
 = 
p
->
fú°Se˘‹
;

350 i‡(!
	`ˇcheRawBlock
(
vﬁumeSèπBlock
, 
CACHE_FOR_READ
)Ë
Áû
;

351 
fbs
 = &
ˇcheBuf„r_
.
fbs32
;

352 i‡(
fbs
->
byãsPîSe˘‹
 != 512 ||

353 
fbs
->
ÁtCou¡
 == 0 ||

354 
fbs
->
ª£rvedSe˘‹Cou¡
 == 0 ||

355 
fbs
->
£˘‹sPîClu°î
 == 0) {

357 
Áû
;

359 
ÁtCou¡_
 = 
fbs
->
ÁtCou¡
;

360 
blocksPîClu°î_
 = 
fbs
->
£˘‹sPîClu°î
;

362 
˛u°îSizeShi·_
 = 0;

363 
blocksPîClu°î_
 !(1 << 
˛u°îSizeShi·_
)) {

365 i‡(
˛u°îSizeShi·_
++ > 7Ë
Áû
;

367 
blocksPîF©_
 = 
fbs
->
£˘‹sPîF©16
 ?

368 
fbs
->
£˘‹sPîF©16
 : fbs->
£˘‹sPîF©32
;

370 
ÁtSèπBlock_
 = 
vﬁumeSèπBlock
 + 
fbs
->
ª£rvedSe˘‹Cou¡
;

373 
roŸDúE¡ryCou¡_
 = 
fbs
->
roŸDúE¡ryCou¡
;

376 
roŸDúSèπ_
 = 
ÁtSèπBlock_
 + 
fbs
->
ÁtCou¡
 * 
blocksPîF©_
;

379 
d©aSèπBlock_
 = 
roŸDúSèπ_
 + ((32 * 
fbs
->
roŸDúE¡ryCou¡
 + 511)/512);

382 
tŸÆBlocks
 = 
fbs
->
tŸÆSe˘‹s16
 ?

383 
fbs
->
tŸÆSe˘‹s16
 : fbs->
tŸÆSe˘‹s32
;

385 
˛u°îCou¡_
 = 
tŸÆBlocks
 - (
d©aSèπBlock_
 - 
vﬁumeSèπBlock
);

388 
˛u°îCou¡_
 >>
˛u°îSizeShi·_
;

391 i‡(
˛u°îCou¡_
 < 4085) {

392 
ÁtTy≥_
 = 12;

393 i‡(!
FAT12_SUPPORT
Ë
Áû
;

394 } i‡(
˛u°îCou¡_
 < 65525) {

395 
ÁtTy≥_
 = 16;

397 
roŸDúSèπ_
 = 
fbs
->
Át32RoŸClu°î
;

398 
ÁtTy≥_
 = 32;

400  
åue
;

402 
Áû
:

403  
Ál£
;

404 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/SdVolume.h

20 
	~"M¨lö.h
"

21 #ifde‡
SDSUPPORT


22 #i‚de‡
SdVﬁume_h


23 
	#SdVﬁume_h


	)

28 
	~"SdF©C⁄fig.h
"

29 
	~"Sd2C¨d.h
"

30 
	~"SdF©Såu˘s.h
"

37 
	uˇche_t
 {

39 
uöt8_t
 
	md©a
[512];

41 
uöt16_t
 
	mÁt16
[256];

43 
uöt32_t
 
	mÁt32
[128];

45 
dú_t
 
	mdú
[16];

47 
mbr_t
 
	mmbr
;

49 
Át_boŸ_t
 
	mfbs
;

51 
Át32_boŸ_t
 
	mfbs32
;

53 
Át32_fsöfo_t
 
	mfsöfo
;

60 ˛as†
	cSdVﬁume
 {

61 
	mpublic
:

63 
	$SdVﬁume
(Ë: 
	$ÁtTy≥_
(0) {}

68 
ˇche_t
* 
	$ˇcheCÀ¨
() {

69 i‡(!
	`ˇcheFlush
())  0;

70 
ˇcheBlockNumbî_
 = 0XFFFFFFFF;

71  &
ˇcheBuf„r_
;

72 
	}
}

83 
boﬁ
 
	$öô
(
Sd2C¨d
* 
dev
Ë{  
	`öô
(dev, 1Ë? 
åue
 : inô(dev, 0);
	}
}

84 
boﬁ
 
öô
(
Sd2C¨d
* 
dev
, 
uöt8_t
 
∑π
);

88 
uöt8_t
 
	$blocksPîClu°î
(Ëc⁄° { 
blocksPîClu°î_
;
	}
}

90 
uöt32_t
 
	$blocksPîF©
(Ëc⁄° { 
blocksPîF©_
;
	}
}

92 
uöt32_t
 
	$˛u°îCou¡
(Ëc⁄° { 
˛u°îCou¡_
;
	}
}

94 
uöt8_t
 
	$˛u°îSizeShi·
(Ëc⁄° { 
˛u°îSizeShi·_
;
	}
}

96 
uöt32_t
 
	$d©aSèπBlock
(Ëc⁄° { 
d©aSèπBlock_
;
	}
}

98 
uöt8_t
 
	$ÁtCou¡
(Ëc⁄° { 
ÁtCou¡_
;
	}
}

100 
uöt32_t
 
	$ÁtSèπBlock
(Ëc⁄° { 
ÁtSèπBlock_
;
	}
}

102 
uöt8_t
 
	$ÁtTy≥
(Ëc⁄° { 
ÁtTy≥_
;
	}
}

103 
öt32_t
 
‰ìClu°îCou¡
();

105 
uöt32_t
 
	$roŸDúE¡ryCou¡
(Ëc⁄° { 
roŸDúE¡ryCou¡_
;
	}
}

108 
uöt32_t
 
	$roŸDúSèπ
(Ëc⁄° { 
roŸDúSèπ_
;
	}
}

112 
Sd2C¨d
* 
	$sdC¨d
(Ë{ 
sdC¨d_
;
	}
}

119 
boﬁ
 
	$dbgF©
(
uöt32_t
 
n
, uöt32_t* 
v
Ë{ 
	`ÁtGë
“, v);
	}
}

121 
	g¥iv©e
:

123 
‰õnd
 
˛ass
 
SdBa£Fûe
;

126 
boﬁ
 c⁄° 
	gCACHE_FOR_READ
 = 
Ál£
;

128 
boﬁ
 c⁄° 
	gCACHE_FOR_WRITE
 = 
åue
;

130 #i‡
USE_MULTIPLE_CARDS


131 
ˇche_t
 
	gˇcheBuf„r_
;

132 
uöt32_t
 
	gˇcheBlockNumbî_
;

133 
Sd2C¨d
* 
	gsdC¨d_
;

134 
boﬁ
 
	gˇcheDúty_
;

135 
uöt32_t
 
	gˇcheMúr‹Block_
;

137 
ˇche_t
 
	gˇcheBuf„r_
;

138 
uöt32_t
 
	gˇcheBlockNumbî_
;

139 
Sd2C¨d
* 
	gsdC¨d_
;

140 
boﬁ
 
	gˇcheDúty_
;

141 
uöt32_t
 
	gˇcheMúr‹Block_
;

143 
uöt32_t
 
	gÆlocSórchSèπ_
;

144 
uöt8_t
 
	gblocksPîClu°î_
;

145 
uöt32_t
 
	gblocksPîF©_
;

146 
uöt32_t
 
	g˛u°îCou¡_
;

147 
uöt8_t
 
	g˛u°îSizeShi·_
;

148 
uöt32_t
 
	gd©aSèπBlock_
;

149 
uöt8_t
 
	gÁtCou¡_
;

150 
uöt32_t
 
	gÁtSèπBlock_
;

151 
uöt8_t
 
	gÁtTy≥_
;

152 
uöt16_t
 
	groŸDúE¡ryCou¡_
;

153 
uöt32_t
 
	groŸDúSèπ_
;

155 
boﬁ
 
ÆlocC⁄tiguous
(
uöt32_t
 
cou¡
, uöt32_t* 
curClu°î
);

156 
uöt8_t
 
	$blockOfClu°î
(
uöt32_t
 
posôi⁄
) const {

157  (
posôi⁄
 >> 9Ë& (
blocksPîClu°î_
 - 1);
	}
}

158 
uöt32_t
 
	$˛u°îSèπBlock
(
uöt32_t
 
˛u°î
) const {

159  
d©aSèπBlock_
 + ((
˛u°î
 - 2Ë<< 
˛u°îSizeShi·_
);
	}
}

160 
uöt32_t
 
	$blockNumbî
(
uöt32_t
 
˛u°î
, uöt32_à
posôi⁄
) const {

161  
	`˛u°îSèπBlock
(
˛u°î
Ë+ 
	`blockOfClu°î
(
posôi⁄
);
	}
}

162 
ˇche_t
 *
	$ˇche
(Ë{ &
ˇcheBuf„r_
;
	}
}

163 
uöt32_t
 
	$ˇcheBlockNumbî
(Ë{ 
ˇcheBlockNumbî_
;
	}
}

164 #i‡
USE_MULTIPLE_CARDS


165 
boﬁ
 
ˇcheFlush
();

166 
boﬁ
 
ˇcheRawBlock
(
uöt32_t
 
blockNumbî
, boﬁ 
dúty
);

168 
boﬁ
 
ˇcheFlush
();

169 
boﬁ
 
ˇcheRawBlock
(
uöt32_t
 
blockNumbî
, boﬁ 
dúty
);

172 
	$ˇcheSëBlockNumbî
(
uöt32_t
 
blockNumbî
, 
boﬁ
 
dúty
) {

173 
ˇcheDúty_
 = 
dúty
;

174 
ˇcheBlockNumbî_
 = 
blockNumbî
;

175 
	}
}

176 
	$ˇcheSëDúty
(Ë{
ˇcheDúty_
 |
CACHE_FOR_WRITE
;
	}
}

177 
boﬁ
 
chaöSize
(
uöt32_t
 
begöClu°î
, uöt32_t* 
size
);

178 
boﬁ
 
ÁtGë
(
uöt32_t
 
˛u°î
, uöt32_t* 
vÆue
);

179 
boﬁ
 
ÁtPut
(
uöt32_t
 
˛u°î
, uöt32_à
vÆue
);

180 
boﬁ
 
	$ÁtPutEOC
(
uöt32_t
 
˛u°î
) {

181  
	`ÁtPut
(
˛u°î
, 0x0FFFFFFF);

182 
	}
}

183 
boﬁ
 
‰ìChaö
(
uöt32_t
 
˛u°î
);

184 
boﬁ
 
	$isEOC
(
uöt32_t
 
˛u°î
) const {

185 i‡(
FAT12_SUPPORT
 && 
ÁtTy≥_
 =12Ë 
˛u°î
 >
FAT12EOC_MIN
;

186 i‡(
ÁtTy≥_
 =16Ë 
˛u°î
 >
FAT16EOC_MIN
;

187  
˛u°î
 >
FAT32EOC_MIN
;

188 
	}
}

189 
boﬁ
 
	$ªadBlock
(
uöt32_t
 
block
, 
uöt8_t
* 
d°
) {

190  
sdC¨d_
->
	`ªadBlock
(
block
, 
d°
);
	}
}

191 
boﬁ
 
	$wrôeBlock
(
uöt32_t
 
block
, c⁄° 
uöt8_t
* 
d°
) {

192  
sdC¨d_
->
	`wrôeBlock
(
block
, 
d°
);

193 
	}
}

196 #i‡
ALLOW_DEPRECATED_FUNCTIONS
 && !
	$deföed
(
DOXYGEN
)

197 
public
:

202 
boﬁ
 
	$öô
(
Sd2C¨d
& 
dev
Ë{ 
	`öô
(&dev);
	}
}

208 
boﬁ
 
	$öô
(
Sd2C¨d
& 
dev
, 
uöt8_t
 
∑π
) {

209  
	`öô
(&
dev
, 
∑π
);

210 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/Servo.cpp

44 
	~"C⁄figuøti⁄.h
"

46 #ifde‡
NUM_SERVOS


47 
	~<avr/öãºu±.h
>

48 
	~<Arduöo.h
>

50 
	~"Sîvo.h
"

52 
	#usToTicks
(
_us
Ë(–
	`˛ockCy˛esPîMi¸o£c⁄d
()* _us) / 8)

53 
	#ticksToUs
(
_ticks
Ë(–()_tick†* 8)/ 
	`˛ockCy˛esPîMi¸o£c⁄d
() )

54 

	)

56 
	#TRIM_DURATION
 2

57 

	)

60 
£rvo_t
 
	g£rvos
[
MAX_SERVOS
];

61 vﬁ©ûê
öt8_t
 
	gCh™√l
[
_Nbr_16timîs
 ];

63 
uöt8_t
 
	gSîvoCou¡
 = 0;

67 
	#SERVO_INDEX_TO_TIMER
(
_£rvo_nbr
Ë((
timî16_Sequí˚_t
)(_£rvo_nb∏/ 
SERVOS_PER_TIMER
))

68 
	#SERVO_INDEX_TO_CHANNEL
(
_£rvo_nbr
Ë(_£rvo_nb∏% 
SERVOS_PER_TIMER
)

69 
	#SERVO_INDEX
(
_timî
,
_ch™√l
Ë((_timî*
SERVOS_PER_TIMER
) + _channel)

70 
	#SERVO
(
_timî
,
_ch™√l
Ë(
£rvos
[
	`SERVO_INDEX
(_timer,_channel)])

71 

	)

72 
	#SERVO_MIN
(Ë(
MIN_PULSE_WIDTH
 - 
this
->
mö
 * 4)

73 
	#SERVO_MAX
(Ë(
MAX_PULSE_WIDTH
 - 
this
->
max
 * 4)

74 

	)

77 
ölöe
 
	$h™dÀ_öãºu±s
(
timî16_Sequí˚_t
 
timî
, vﬁ©ûê
uöt16_t
 *
TCNTn
, vﬁ©ûêuöt16_t* 
OCRnA
)

79 if–
Ch™√l
[
timî
] < 0 )

80 *
TCNTn
 = 0;

82 if–
	`SERVO_INDEX
(
timî
,
Ch™√l
[timî]Ë< 
SîvoCou¡
 && 
	`SERVO
—imî,Ch™√l[timî]).
Pö
.
isA˘ive
 =
åue
 )

83 
	`digôÆWrôe
–
	`SERVO
(
timî
,
Ch™√l
[timî]).
Pö
.
nbr
,
LOW
);

86 
Ch™√l
[
timî
]++;

87 if–
	`SERVO_INDEX
(
timî
,
Ch™√l
[timî]Ë< 
SîvoCou¡
 && Ch™√l[timî] < 
SERVOS_PER_TIMER
) {

88 *
OCRnA
 = *
TCNTn
 + 
	`SERVO
(
timî
,
Ch™√l
[timî]).
ticks
;

89 if(
	`SERVO
(
timî
,
Ch™√l
[timî]).
Pö
.
isA˘ive
 =
åue
)

90 
	`digôÆWrôe
–
	`SERVO
(
timî
,
Ch™√l
[timî]).
Pö
.
nbr
,
HIGH
);

94 if–(()*
TCNTn
Ë+ 4 < 
	`usToTicks
(
REFRESH_INTERVAL
) )

95 *
OCRnA
 = ()
	`usToTicks
(
REFRESH_INTERVAL
);

97 *
OCRnA
 = *
TCNTn
 + 4;

98 
Ch™√l
[
timî
] = -1;

100 
	}
}

102 #i‚de‡
WIRING


104 #i‡
deföed
(
_u£Timî1
)

105 
	$SIGNAL
 (
TIMER1_COMPA_ve˘
)

107 
	`h™dÀ_öãºu±s
(
_timî1
, &
TCNT1
, &
OCR1A
);

108 
	}
}

111 #i‡
deföed
(
_u£Timî3
)

112 
	$SIGNAL
 (
TIMER3_COMPA_ve˘
)

114 
	`h™dÀ_öãºu±s
(
_timî3
, &
TCNT3
, &
OCR3A
);

115 
	}
}

118 #i‡
deföed
(
_u£Timî4
)

119 
	$SIGNAL
 (
TIMER4_COMPA_ve˘
)

121 
	`h™dÀ_öãºu±s
(
_timî4
, &
TCNT4
, &
OCR4A
);

122 
	}
}

125 #i‡
deföed
(
_u£Timî5
)

126 
	$SIGNAL
 (
TIMER5_COMPA_ve˘
)

128 
	`h™dÀ_öãºu±s
(
_timî5
, &
TCNT5
, &
OCR5A
);

129 
	}
}

132 #ñi‡
deföed
 
WIRING


134 #i‡
deföed
(
_u£Timî1
)

135 
	$Timî1Sîvi˚
()

137 
	`h™dÀ_öãºu±s
(
_timî1
, &
TCNT1
, &
OCR1A
);

138 
	}
}

140 #i‡
deföed
(
_u£Timî3
)

141 
	$Timî3Sîvi˚
()

143 
	`h™dÀ_öãºu±s
(
_timî3
, &
TCNT3
, &
OCR3A
);

144 
	}
}

149 
	$öôISR
(
timî16_Sequí˚_t
 
timî
)

151 #i‡
	`deföed
 (
_u£Timî1
)

152 if(
timî
 =
_timî1
) {

153 
TCCR1A
 = 0;

154 
TCCR1B
 = 
	`_BV
(
CS11
);

155 
TCNT1
 = 0;

156 #i‡
	`deföed
(
__AVR_ATmega8__
)|| deföed(
__AVR_ATmega128__
)

157 
TIFR
 |
	`_BV
(
OCF1A
);

158 
TIMSK
 |
	`_BV
(
OCIE1A
) ;

161 
TIFR1
 |
	`_BV
(
OCF1A
);

162 
TIMSK1
 |
	`_BV
(
OCIE1A
) ;

164 #i‡
	`deföed
(
WIRING
)

165 
	`timîAâach
(
TIMER1OUTCOMPAREA_INT
, 
Timî1Sîvi˚
);

170 #i‡
	`deföed
 (
_u£Timî3
)

171 if(
timî
 =
_timî3
) {

172 
TCCR3A
 = 0;

173 
TCCR3B
 = 
	`_BV
(
CS31
);

174 
TCNT3
 = 0;

175 #i‡
	`deföed
(
__AVR_ATmega128__
)

176 
TIFR
 |
	`_BV
(
OCF3A
);

177 
ETIMSK
 |
	`_BV
(
OCIE3A
);

179 
TIFR3
 = 
	`_BV
(
OCF3A
);

180 
TIMSK3
 = 
	`_BV
(
OCIE3A
) ;

182 #i‡
	`deföed
(
WIRING
)

183 
	`timîAâach
(
TIMER3OUTCOMPAREA_INT
, 
Timî3Sîvi˚
);

188 #i‡
	`deföed
 (
_u£Timî4
)

189 if(
timî
 =
_timî4
) {

190 
TCCR4A
 = 0;

191 
TCCR4B
 = 
	`_BV
(
CS41
);

192 
TCNT4
 = 0;

193 
TIFR4
 = 
	`_BV
(
OCF4A
);

194 
TIMSK4
 = 
	`_BV
(
OCIE4A
) ;

198 #i‡
	`deföed
 (
_u£Timî5
)

199 if(
timî
 =
_timî5
) {

200 
TCCR5A
 = 0;

201 
TCCR5B
 = 
	`_BV
(
CS51
);

202 
TCNT5
 = 0;

203 
TIFR5
 = 
	`_BV
(
OCF5A
);

204 
TIMSK5
 = 
	`_BV
(
OCIE5A
) ;

207 
	}
}

209 
	$föISR
(
timî16_Sequí˚_t
 
timî
)

212 #i‡
deföed
 
WIRING


213 if(
timî
 =
_timî1
) {

214 #i‡
	`deföed
(
__AVR_ATmega1281__
)||deföed(
__AVR_ATmega2561__
)

215 
TIMSK1
 &~
	`_BV
(
OCIE1A
) ;

217 
TIMSK
 &~
	`_BV
(
OCIE1A
) ;

219 
	`timîDëach
(
TIMER1OUTCOMPAREA_INT
);

221 if(
timî
 =
_timî3
) {

222 #i‡
	`deföed
(
__AVR_ATmega1281__
)||deföed(
__AVR_ATmega2561__
)

223 
TIMSK3
 &~
	`_BV
(
OCIE3A
);

225 
ETIMSK
 &~
	`_BV
(
OCIE3A
);

227 
	`timîDëach
(
TIMER3OUTCOMPAREA_INT
);

232 
	}
}

234 
boﬁón
 
	$isTimîA˘ive
(
timî16_Sequí˚_t
 
timî
)

237 
uöt8_t
 
ch™√l
=0; ch™√»< 
SERVOS_PER_TIMER
; channel++) {

238 if(
	`SERVO
(
timî
,
ch™√l
).
Pö
.
isA˘ive
 =
åue
)

239  
åue
;

241  
Ál£
;

242 
	}
}

247 
	gSîvo
::
	$Sîvo
()

249 if–
SîvoCou¡
 < 
MAX_SERVOS
) {

250 
this
->
£rvoIndex
 = 
SîvoCou¡
++;

251 
£rvos
[
this
->
£rvoIndex
].
ticks
 = 
	`usToTicks
(
DEFAULT_PULSE_WIDTH
);

254 
this
->
£rvoIndex
 = 
INVALID_SERVO
 ;

255 
	}
}

257 
uöt8_t
 
	gSîvo
::
	$©èch
(
pö
)

259  
this
->
	`©èch
(
pö
, 
MIN_PULSE_WIDTH
, 
MAX_PULSE_WIDTH
);

260 
	}
}

262 
uöt8_t
 
	gSîvo
::
	$©èch
(
pö
, 
mö
, 
max
)

264 if(
this
->
£rvoIndex
 < 
MAX_SERVOS
 ) {

265 #i‡
	`deföed
 (
ENABLE_AUTO_BED_LEVELING
Ë&& (
PROBE_SERVO_DEACTIVATION_DELAY
 > 0)

266 i‡(
pö
 > 0Ë
this
->pin =Öin; pin =Åhis->pin;

268 
	`pöMode
–
pö
, 
OUTPUT
) ;

269 
£rvos
[
this
->
£rvoIndex
].
Pö
.
nbr
 = 
pö
;

271 
this
->
mö
 = (
MIN_PULSE_WIDTH
 - min)/4;

272 
this
->
max
 = (
MAX_PULSE_WIDTH
 - max)/4;

274 
timî16_Sequí˚_t
 
timî
 = 
	`SERVO_INDEX_TO_TIMER
(
£rvoIndex
);

275 if(
	`isTimîA˘ive
(
timî
Ë=
Ál£
)

276 
	`öôISR
(
timî
);

277 
£rvos
[
this
->
£rvoIndex
].
Pö
.
isA˘ive
 = 
åue
;

279  
this
->
£rvoIndex
 ;

280 
	}
}

282 
	gSîvo
::
	$dëach
()

284 
£rvos
[
this
->
£rvoIndex
].
Pö
.
isA˘ive
 = 
Ál£
;

285 
timî16_Sequí˚_t
 
timî
 = 
	`SERVO_INDEX_TO_TIMER
(
£rvoIndex
);

286 if(
	`isTimîA˘ive
(
timî
Ë=
Ál£
) {

287 
	`föISR
(
timî
);

289 
	}
}

291 
	gSîvo
::
	$wrôe
(
vÆue
)

293 if(
vÆue
 < 
MIN_PULSE_WIDTH
)

295 if(
vÆue
 < 0) value = 0;

296 if(
vÆue
 > 180) value = 180;

297 
vÆue
 = 
	`m≠
(vÆue, 0, 180, 
	`SERVO_MIN
(), 
	`SERVO_MAX
());

299 
this
->
	`wrôeMi¸o£c⁄ds
(
vÆue
);

300 
	}
}

302 
	gSîvo
::
	$wrôeMi¸o£c⁄ds
(
vÆue
)

305 
byã
 
ch™√l
 = 
this
->
£rvoIndex
;

306 if–(
ch™√l
 < 
MAX_SERVOS
) )

308 if–
vÆue
 < 
	`SERVO_MIN
() )

309 
vÆue
 = 
	`SERVO_MIN
();

310 if–
vÆue
 > 
	`SERVO_MAX
() )

311 
vÆue
 = 
	`SERVO_MAX
();

313 
vÆue
 = vÆuê- 
TRIM_DURATION
;

314 
vÆue
 = 
	`usToTicks
(value);

316 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

317 
	`˛i
();

318 
£rvos
[
ch™√l
].
ticks
 = 
vÆue
;

319 
SREG
 = 
ﬁdSREG
;

321 
	}
}

323 
	gSîvo
::
	$ªad
()

325  
	`m≠
–
this
->
	`ªadMi¸o£c⁄ds
()+1, 
	`SERVO_MIN
(), 
	`SERVO_MAX
(), 0, 180);

326 
	}
}

328 
	gSîvo
::
	$ªadMi¸o£c⁄ds
()

330 
pul£width
;

331 if–
this
->
£rvoIndex
 !
INVALID_SERVO
 )

332 
pul£width
 = 
	`ticksToUs
(
£rvos
[
this
->
£rvoIndex
].
ticks
Ë+ 
TRIM_DURATION
 ;

334 
pul£width
 = 0;

336  
pul£width
;

337 
	}
}

339 
boﬁ
 
	gSîvo
::
	$©èched
()

341  
£rvos
[
this
->
£rvoIndex
].
Pö
.
isA˘ive
 ;

342 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/Servo.h

45 #i‚de‡
Sîvo_h


46 
	#Sîvo_h


	)

48 
	~<öây≥s.h
>

60 #i‡
deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega2560__
)

61 
	#_u£Timî5


	)

63 
	#_u£Timî3


	)

64 
	#_u£Timî4


	)

66 íum { 
	m_timî5
, 
	m_timî3
, 
	m_timî4
, 
	m_Nbr_16timîs
 } 
	ttimî16_Sequí˚_t
 ;

68 #ñi‡
deföed
(
__AVR_ATmega32U4__
)

70 
	#_u£Timî3


	)

72 íum { 
	m_timî3
, 
	m_Nbr_16timîs
 } 
	ttimî16_Sequí˚_t
 ;

74 #ñi‡
deföed
(
__AVR_AT90USB646__
Ë|| deföed(
__AVR_AT90USB1286__
)

75 
	#_u£Timî3


	)

78 íum { 
	m_timî3
, 
	m_Nbr_16timîs
 } 
	ttimî16_Sequí˚_t
 ;

80 #ñi‡
deföed
(
__AVR_ATmega128__
Ë||deföed(
__AVR_ATmega1281__
Ë|| deföed(
__AVR_ATmega1284P__
Ë||deföed(
__AVR_ATmega2561__
)

81 
	#_u£Timî3


	)

84 íum { 
	m_timî3
, 
	m_Nbr_16timîs
 } 
	ttimî16_Sequí˚_t
 ;

89 íum { 
	m_Nbr_16timîs
 } 
	ttimî16_Sequí˚_t
 ;

92 
	#Sîvo_VERSION
 2

93 

	)

94 
	#MIN_PULSE_WIDTH
 544

95 
	#MAX_PULSE_WIDTH
 2400

96 
	#DEFAULT_PULSE_WIDTH
 1500

97 
	#REFRESH_INTERVAL
 20000

98 

	)

99 
	#SERVOS_PER_TIMER
 12

100 
	#MAX_SERVOS
 (
_Nbr_16timîs
 * 
SERVOS_PER_TIMER
)

	)

102 
	#INVALID_SERVO
 255

103 

	)

105 
uöt8_t
 
	mnbr
 :6 ;

106 
uöt8_t
 
	misA˘ive
 :1 ;

107 } 
	tSîvoPö_t
 ;

110 
SîvoPö_t
 
	mPö
;

111 
	mticks
;

112 } 
	t£rvo_t
;

114 ˛as†
	cSîvo


116 
	mpublic
:

117 
Sîvo
();

118 
uöt8_t
 
©èch
(
pö
);

119 
uöt8_t
 
©èch
(
pö
, 
mö
, 
max
);

120 
dëach
();

121 
wrôe
(
vÆue
);

122 
wrôeMi¸o£c⁄ds
(
vÆue
);

123 
ªad
();

124 
ªadMi¸o£c⁄ds
();

125 
boﬁ
 
©èched
();

126 #i‡
deföed
 (
ENABLE_AUTO_BED_LEVELING
Ë&& (
PROBE_SERVO_DEACTIVATION_DELAY
 > 0)

127 
	mpö
;

129 
	m¥iv©e
:

130 
uöt8_t
 
£rvoIndex
;

131 
öt8_t
 
	mmö
;

132 
öt8_t
 
	mmax
;

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/boards.h

1 #i‚de‡
BOARDS_H


2 
	#BOARDS_H


	)

4 
	#BOARD_UNKNOWN
 -1

	)

6 
	#BOARD_GEN7_CUSTOM
 10

7 
	#BOARD_GEN7_12
 11

8 
	#BOARD_GEN7_13
 12

9 
	#BOARD_GEN7_14
 13

10 
	#BOARD_CHEAPTRONIC
 2

11 
	#BOARD_SETHI
 20

12 
	#BOARD_RAMPS_OLD
 3

13 
	#BOARD_RAMPS_13_EFB
 33

14 
	#BOARD_RAMPS_13_EEB
 34

15 
	#BOARD_RAMPS_13_EFF
 35

16 
	#BOARD_RAMPS_13_EEF
 36

17 
	#BOARD_DUEMILANOVE_328P
 4

18 
	#BOARD_GEN6
 5

19 
	#BOARD_GEN6_DELUXE
 51

20 
	#BOARD_SANGUINOLOLU_11
 6

21 
	#BOARD_SANGUINOLOLU_12
 62

22 
	#BOARD_MELZI
 63

23 
	#BOARD_STB_11
 64

24 
	#BOARD_AZTEEG_X1
 65

25 
	#BOARD_MELZI_1284
 66

26 
	#BOARD_AZTEEG_X3
 67

27 
	#BOARD_AZTEEG_X3_PRO
 68

28 
	#BOARD_ULTIMAKER
 7

29 
	#BOARD_ULTIMAKER_OLD
 71

30 
	#BOARD_ULTIMAIN_2
 72

31 
	#BOARD_3DRAG
 77

32 
	#BOARD_TEENSYLU
 8

33 
	#BOARD_RUMBA
 80

34 
	#BOARD_PRINTRBOARD
 81

35 
	#BOARD_BRAINWAVE
 82

36 
	#BOARD_SAV_MKI
 83

37 
	#BOARD_TEENSY2
 84

38 
	#BOARD_BRAINWAVE_PRO
 85

39 
	#BOARD_GEN3_PLUS
 9

40 
	#BOARD_GEN3_MONOLITHIC
 22

41 
	#BOARD_MEGATRONICS
 70

42 
	#BOARD_MEGATRONICS_2
 701

43 
	#BOARD_MEGATRONICS_1
 702

44 
	#BOARD_OMCA_A
 90

45 
	#BOARD_OMCA
 91

46 
	#BOARD_RAMBO
 301

47 
	#BOARD_ELEFU_3
 21

48 
	#BOARD_5DPRINT
 88

49 
	#BOARD_LEAPFROG
 999

50 

	)

51 
	#BOARD_99
 99

52 

	)

53 
	#MB
(
bﬂrd
Ë(
MOTHERBOARD
==
BOARD_
##bﬂrd)

	)

54 
	#IS_RAMPS
 (
	`MB
(
RAMPS_OLD
Ë|| MB(
RAMPS_13_EFB
Ë|| MB(
RAMPS_13_EEB
Ë|| MB(
RAMPS_13_EFF
Ë|| MB(
RAMPS_13_EEF
))

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/cardreader.cpp

1 
	~"M¨lö.h
"

2 
	~"ˇrdªadî.h
"

3 
	~"u…ølcd.h
"

4 
	~"°ï≥r.h
"

5 
	~"ãm≥øtuª.h
"

6 
	~"œnguage.h
"

8 #ifde‡
SDSUPPORT


12 
	gC¨dRódî
::
	$C¨dRódî
()

14 
fûesize
 = 0;

15 
sdpos
 = 0;

16 
sd¥ötög
 = 
Ál£
;

17 
ˇrdOK
 = 
Ál£
;

18 
ßvög
 = 
Ál£
;

19 
loggög
 = 
Ál£
;

20 
auto°¨t_©mûlis
=0;

21 
w‹kDúDïth
 = 0;

22 
fûe_subˇŒ_˘r
=0;

23 
	`mem£t
(
w‹kDúP¨íts
, 0, (workDirParents));

25 
auto°¨t_°û…ocheck
=
åue
;

26 
œ°ƒ
=0;

28 #i‡
SDPOWER
 > -1

29 
	`SET_OUTPUT
(
SDPOWER
);

30 
	`WRITE
(
SDPOWER
,
HIGH
);

33 
auto°¨t_©mûlis
=
	`mûlis
()+5000;

34 
	}
}

36 *
	$¸óãFûíame
(*
buf„r
,c⁄° 
dú_t
 &
p
)

38 *
pos
=
buf„r
;

39 
uöt8_t
 
i
 = 0; i < 11; i++)

41 i‡(
p
.
«me
[
i
] == ' ');

42 i‡(
i
 == 8)

44 *
pos
++='.';

46 *
pos
++=
p
.
«me
[
i
];

48 *
pos
++=0;

49  
buf„r
;

50 
	}
}

53 
	gC¨dRódî
::
	$lsDive
(c⁄° *
¥ïíd
, 
SdFûe
 
∑ª¡
, c⁄° * c⁄° 
m©ch
 )

55 
dú_t
 
p
;

56 
uöt8_t
 
˙t
=0;

58 
∑ª¡
.
	`ªadDú
(
p
, 
l⁄gFûíame
) > 0)

60 if–
	`DIR_IS_SUBDIR
(&
p
Ë&& 
lsA˘i⁄
!=
LS_Cou¡
 &&ÜsA˘i⁄!=
LS_GëFûíame
)

63 
∑th
[13*2];

64 
lfûíame
[13];

65 
	`¸óãFûíame
(
lfûíame
,
p
);

67 
∑th
[0]=0;

68 if(
	`°æí
(
¥ïíd
)==0)

70 
	`°rˇt
(
∑th
,"/");

72 
	`°rˇt
(
∑th
,
¥ïíd
);

73 
	`°rˇt
(
∑th
,
lfûíame
);

74 
	`°rˇt
(
∑th
,"/");

78 
SdFûe
 
dú
;

79 if(!
dú
.
	`›í
(
∑ª¡
,
lfûíame
, 
O_READ
))

81 if(
lsA˘i⁄
==
LS_SîülPröt
)

83 
SERIAL_ECHO_START
;

84 
	`SERIAL_ECHOLN
(
MSG_SD_CANT_OPEN_SUBDIR
);

85 
	`SERIAL_ECHOLN
(
lfûíame
);

88 
	`lsDive
(
∑th
,
dú
);

95 
≤0
 = 
p
.
«me
[0];

96 i‡(
≤0
 =
DIR_NAME_FREE
) ;

97 i‡(
≤0
 =
DIR_NAME_DELETED
 ||Ön0 == '.' ||Ön0 == '_') ;

98 
lf0
 = 
l⁄gFûíame
[0];

99 i‡(
lf0
 == '.' ||Üf0 == '_') ;

101 i‡(!
	`DIR_IS_FILE_OR_SUBDIR
(&
p
)) ;

102 
fûíameIsDú
=
	`DIR_IS_SUBDIR
(&
p
);

105 if(!
fûíameIsDú
)

107 if(
p
.
«me
[8]!='G') ;

108 if(
p
.
«me
[9]=='~') ;

111 
	`¸óãFûíame
(
fûíame
,
p
);

112 if(
lsA˘i⁄
==
LS_SîülPröt
)

114 
	`SERIAL_PROTOCOL
(
¥ïíd
);

115 
	`SERIAL_PROTOCOLLN
(
fûíame
);

117 if(
lsA˘i⁄
==
LS_Cou¡
)

119 
ƒFûes
++;

121 if(
lsA˘i⁄
==
LS_GëFûíame
)

123 i‡(
m©ch
 !
NULL
) {

124 i‡(
	`°rˇ£cmp
(
m©ch
, 
fûíame
) == 0) ;

126 i‡(
˙t
 =
ƒFûes
) ;

127 
˙t
++;

132 
	}
}

134 
	gC¨dRódî
::
	$ls
()

136 
lsA˘i⁄
=
LS_SîülPröt
;

137 if(
lsA˘i⁄
==
LS_Cou¡
)

138 
ƒFûes
=0;

140 
roŸ
.
	`ªwöd
();

141 
	`lsDive
("",
roŸ
);

142 
	}
}

145 
	gC¨dRódî
::
	$öôsd
()

147 
ˇrdOK
 = 
Ál£
;

148 if(
roŸ
.
	`isO≥n
())

149 
roŸ
.
	`˛o£
();

150 #ifde‡
SDSLOW


151 i‡(!
ˇrd
.
	`öô
(
SPI_HALF_SPEED
,
SDSS
)

152 #i‡
	`deföed
(
LCD_SDSS
Ë&& (LCD_SDSS !
SDSS
)

153 && !
ˇrd
.
	`öô
(
SPI_HALF_SPEED
,
LCD_SDSS
)

157 i‡(!
ˇrd
.
	`öô
(
SPI_FULL_SPEED
,
SDSS
)

158 #i‡
	`deföed
(
LCD_SDSS
Ë&& (LCD_SDSS !
SDSS
)

159 && !
ˇrd
.
	`öô
(
SPI_FULL_SPEED
,
LCD_SDSS
)

165 
SERIAL_ECHO_START
;

166 
	`SERIAL_ECHOLNPGM
(
MSG_SD_INIT_FAIL
);

168 i‡(!
vﬁume
.
	`öô
(&
ˇrd
))

170 
SERIAL_ERROR_START
;

171 
	`SERIAL_ERRORLNPGM
(
MSG_SD_VOL_INIT_FAIL
);

173 i‡(!
roŸ
.
	`›íRoŸ
(&
vﬁume
))

175 
SERIAL_ERROR_START
;

176 
	`SERIAL_ERRORLNPGM
(
MSG_SD_OPENROOT_FAIL
);

180 
ˇrdOK
 = 
åue
;

181 
SERIAL_ECHO_START
;

182 
	`SERIAL_ECHOLNPGM
(
MSG_SD_CARD_OK
);

184 
w‹kDú
=
roŸ
;

185 
curDú
=&
roŸ
;

193 
	}
}

195 
	gC¨dRódî
::
	$£åoŸ
()

201 
w‹kDú
=
roŸ
;

203 
curDú
=&
w‹kDú
;

204 
	}
}

205 
	gC¨dRódî
::
	$ªÀa£
()

207 
sd¥ötög
 = 
Ál£
;

208 
ˇrdOK
 = 
Ál£
;

209 
	}
}

211 
	gC¨dRódî
::
	$°¨tFûïröt
()

213 if(
ˇrdOK
)

215 
sd¥ötög
 = 
åue
;

217 
	}
}

219 
	gC¨dRódî
::
	$∑u£SDPröt
()

221 if(
sd¥ötög
)

223 
sd¥ötög
 = 
Ál£
;

225 
	}
}

228 
	gC¨dRódî
::
	$›íLogFûe
(* 
«me
)

230 
loggög
 = 
åue
;

231 
	`›íFûe
(
«me
, 
Ál£
);

232 
	}
}

234 
	gC¨dRódî
::
	$gëAbsFûíame
(*
t
)

236 
uöt8_t
 
˙t
=0;

237 *
t
='/';t++;
˙t
++;

238 
uöt8_t
 
i
=0;i<
w‹kDúDïth
;i++)

240 
w‹kDúP¨íts
[
i
].
	`gëFûíame
(
t
);

241 *
t
!=0 && 
˙t
< 
MAXPATHNAMELENGTH
)

242 {
t
++;
˙t
++;}

244 if(
˙t
<
MAXPATHNAMELENGTH
-13)

245 
fûe
.
	`gëFûíame
(
t
);

247 
t
[0]=0;

248 
	}
}

250 
	gC¨dRódî
::
	$›íFûe
(* 
«me
,
boﬁ
 
ªad
, boﬁ 
ª∂a˚_cuºít
 )

252 if(!
ˇrdOK
)

254 if(
fûe
.
	`isO≥n
())

256 if(!
ª∂a˚_cuºít
)

258 if(()
fûe_subˇŒ_˘r
>()
SD_PROCEDURE_DEPTH
-1)

260 
SERIAL_ERROR_START
;

261 
	`SERIAL_ERRORPGM
("tryingÅo call sub-gcode files withÅoo manyÜevels. MAXÜevel is:");

262 
	`SERIAL_ERRORLN
(
SD_PROCEDURE_DEPTH
);

263 
	`kûl
();

267 
SERIAL_ECHO_START
;

268 
	`SERIAL_ECHOPGM
("SUBROUTINE CALLÅarget:\"");

269 
	`SERIAL_ECHO
(
«me
);

270 
	`SERIAL_ECHOPGM
("\"Öarent:\"");

273 
	`gëAbsFûíame
(
fûíames
[
fûe_subˇŒ_˘r
]);

275 
	`SERIAL_ECHO
(
fûíames
[
fûe_subˇŒ_˘r
]);

276 
	`SERIAL_ECHOPGM
("\"Öos");

277 
	`SERIAL_ECHOLN
(
sdpos
);

278 
fûe•os
[
fûe_subˇŒ_˘r
]=
sdpos
;

279 
fûe_subˇŒ_˘r
++;

283 
SERIAL_ECHO_START
;

284 
	`SERIAL_ECHOPGM
("Now doing file: ");

285 
	`SERIAL_ECHOLN
(
«me
);

287 
fûe
.
	`˛o£
();

291 
fûe_subˇŒ_˘r
=0;

292 
SERIAL_ECHO_START
;

293 
	`SERIAL_ECHOPGM
("Now fresh file: ");

294 
	`SERIAL_ECHOLN
(
«me
);

296 
sd¥ötög
 = 
Ál£
;

299 
SdFûe
 
myDú
;

300 
curDú
=&
roŸ
;

301 *
‚ame
=
«me
;

303 *
dú«me_°¨t
,*
dú«me_íd
;

304 if(
«me
[0]=='/')

306 
dú«me_°¨t
=
	`°rchr
(
«me
,'/')+1;

307 
dú«me_°¨t
>0)

309 
dú«me_íd
=
	`°rchr
(
dú«me_°¨t
,'/');

312 if(
dú«me_íd
>0 && dú«me_íd>
dú«me_°¨t
)

314 
subdú«me
[13];

315 
	`°∫˝y
(
subdú«me
, 
dú«me_°¨t
, 
dú«me_íd
-dirname_start);

316 
subdú«me
[
dú«me_íd
-
dú«me_°¨t
]=0;

317 
	`SERIAL_ECHOLN
(
subdú«me
);

318 if(!
myDú
.
	`›í
(
curDú
,
subdú«me
,
O_READ
))

320 
	`SERIAL_PROTOCOLPGM
(
MSG_SD_OPEN_FILE_FAIL
);

321 
	`SERIAL_PROTOCOL
(
subdú«me
);

322 
	`SERIAL_PROTOCOLLNPGM
(".");

330 
curDú
=&
myDú
;

331 
dú«me_°¨t
=
dú«me_íd
+1;

335 
‚ame
=
dú«me_°¨t
;

345 
curDú
=&
w‹kDú
;

347 if(
ªad
)

349 i‡(
fûe
.
	`›í
(
curDú
, 
‚ame
, 
O_READ
))

351 
fûesize
 = 
fûe
.
	`fûeSize
();

352 
	`SERIAL_PROTOCOLPGM
(
MSG_SD_FILE_OPENED
);

353 
	`SERIAL_PROTOCOL
(
‚ame
);

354 
	`SERIAL_PROTOCOLPGM
(
MSG_SD_SIZE
);

355 
	`SERIAL_PROTOCOLLN
(
fûesize
);

356 
sdpos
 = 0;

358 
	`SERIAL_PROTOCOLLNPGM
(
MSG_SD_FILE_SELECTED
);

359 
	`gëfûíame
(0, 
‚ame
);

360 
	`lcd_£t°©us
(
l⁄gFûíame
[0] ?Ü⁄gFûíamê: 
‚ame
);

364 
	`SERIAL_PROTOCOLPGM
(
MSG_SD_OPEN_FILE_FAIL
);

365 
	`SERIAL_PROTOCOL
(
‚ame
);

366 
	`SERIAL_PROTOCOLLNPGM
(".");

371 i‡(!
fûe
.
	`›í
(
curDú
, 
‚ame
, 
O_CREAT
 | 
O_APPEND
 | 
O_WRITE
 | 
O_TRUNC
))

373 
	`SERIAL_PROTOCOLPGM
(
MSG_SD_OPEN_FILE_FAIL
);

374 
	`SERIAL_PROTOCOL
(
‚ame
);

375 
	`SERIAL_PROTOCOLLNPGM
(".");

379 
ßvög
 = 
åue
;

380 
	`SERIAL_PROTOCOLPGM
(
MSG_SD_WRITE_TO_FILE
);

381 
	`SERIAL_PROTOCOLLN
(
«me
);

382 
	`lcd_£t°©us
(
‚ame
);

386 
	}
}

388 
	gC¨dRódî
::
	$ªmoveFûe
(* 
«me
)

390 if(!
ˇrdOK
)

392 
fûe
.
	`˛o£
();

393 
sd¥ötög
 = 
Ál£
;

396 
SdFûe
 
myDú
;

397 
curDú
=&
roŸ
;

398 *
‚ame
=
«me
;

400 *
dú«me_°¨t
,*
dú«me_íd
;

401 if(
«me
[0]=='/')

403 
dú«me_°¨t
=
	`°rchr
(
«me
,'/')+1;

404 
dú«me_°¨t
>0)

406 
dú«me_íd
=
	`°rchr
(
dú«me_°¨t
,'/');

409 if(
dú«me_íd
>0 && dú«me_íd>
dú«me_°¨t
)

411 
subdú«me
[13];

412 
	`°∫˝y
(
subdú«me
, 
dú«me_°¨t
, 
dú«me_íd
-dirname_start);

413 
subdú«me
[
dú«me_íd
-
dú«me_°¨t
]=0;

414 
	`SERIAL_ECHOLN
(
subdú«me
);

415 if(!
myDú
.
	`›í
(
curDú
,
subdú«me
,
O_READ
))

417 
	`SERIAL_PROTOCOLPGM
("open failed, File: ");

418 
	`SERIAL_PROTOCOL
(
subdú«me
);

419 
	`SERIAL_PROTOCOLLNPGM
(".");

427 
curDú
=&
myDú
;

428 
dú«me_°¨t
=
dú«me_íd
+1;

432 
‚ame
=
dú«me_°¨t
;

442 
curDú
=&
w‹kDú
;

444 i‡(
fûe
.
	`ªmove
(
curDú
, 
‚ame
))

446 
	`SERIAL_PROTOCOLPGM
("File deleted:");

447 
	`SERIAL_PROTOCOLLN
(
‚ame
);

448 
sdpos
 = 0;

452 
	`SERIAL_PROTOCOLPGM
("Deletion failed, File: ");

453 
	`SERIAL_PROTOCOL
(
‚ame
);

454 
	`SERIAL_PROTOCOLLNPGM
(".");

457 
	}
}

459 
	gC¨dRódî
::
	$gëSètus
()

461 if(
ˇrdOK
){

462 
	`SERIAL_PROTOCOLPGM
(
MSG_SD_PRINTING_BYTE
);

463 
	`SERIAL_PROTOCOL
(
sdpos
);

464 
	`SERIAL_PROTOCOLPGM
("/");

465 
	`SERIAL_PROTOCOLLN
(
fûesize
);

468 
	`SERIAL_PROTOCOLLNPGM
(
MSG_SD_NOT_PRINTING
);

470 
	}
}

471 
	gC¨dRódî
::
	$wrôe_comm™d
(*
buf
)

473 * 
begö
 = 
buf
;

474 * 
≈os
 = 0;

475 * 
íd
 = 
buf
 + 
	`°æí
(buf) - 1;

477 
fûe
.
wrôeEº‹
 = 
Ál£
;

478 if((
≈os
 = 
	`°rchr
(
buf
, 'N')Ë!
NULL
)

480 
begö
 = 
	`°rchr
(
≈os
, ' ') + 1;

481 
íd
 = 
	`°rchr
(
≈os
, '*') - 1;

483 
íd
[1] = '\r';

484 
íd
[2] = '\n';

485 
íd
[3] = '\0';

486 
fûe
.
	`wrôe
(
begö
);

487 i‡(
fûe
.
wrôeEº‹
)

489 
SERIAL_ERROR_START
;

490 
	`SERIAL_ERRORLNPGM
(
MSG_SD_ERR_WRITE_TO_FILE
);

492 
	}
}

495 
	gC¨dRódî
::
	$checkauto°¨t
(
boﬁ
 
f‹˚
)

497 if(!
f‹˚
)

499 if(!
auto°¨t_°û…ocheck
)

501 if(
auto°¨t_©mûlis
<
	`mûlis
())

504 
auto°¨t_°û…ocheck
=
Ál£
;

505 if(!
ˇrdOK
)

507 
	`öôsd
();

508 if(!
ˇrdOK
)

512 
aut⁄ame
[30];

513 
	`•rötf_P
(
aut⁄ame
, 
	`PSTR
("auto%i.g"), 
œ°ƒ
);

514 
öt8_t
 
i
=0;i<(öt8_t)
	`°æí
(
aut⁄ame
);i++)

515 
aut⁄ame
[
i
]=
	`tﬁowî
(autoname[i]);

516 
dú_t
 
p
;

518 
roŸ
.
	`ªwöd
();

520 
boﬁ
 
found
=
Ál£
;

521 
roŸ
.
	`ªadDú
(
p
, 
NULL
) > 0)

523 
öt8_t
 
i
=0;i<(öt8_t)
	`°æí
((*)
p
.
«me
);i++)

524 
p
.
«me
[
i
]=
	`tﬁowî
(p.name[i]);

528 if(
p
.
«me
[9]!='~')

529 if(
	`°∫cmp
((*)
p
.
«me
,
aut⁄ame
,5)==0)

531 
cmd
[30];

533 
	`•rötf_P
(
cmd
, 
	`PSTR
("M23 %s"), 
aut⁄ame
);

534 
	`íquecomm™d
(
cmd
);

535 
	`íquecomm™d_P
(
	`PSTR
("M24"));

536 
found
=
åue
;

539 if(!
found
)

540 
œ°ƒ
=-1;

542 
œ°ƒ
++;

543 
	}
}

545 
	gC¨dRódî
::
	$˛o£fûe
(
boﬁ
 
°‹e_loˇti⁄
)

547 
fûe
.
	`sync
();

548 
fûe
.
	`˛o£
();

549 
ßvög
 = 
Ál£
;

550 
loggög
 = 
Ál£
;

552 if(
°‹e_loˇti⁄
)

560 
	}
}

562 
	gC¨dRódî
::
	$gëfûíame
(
uöt16_t
 
ƒ
, c⁄° * c⁄° 
m©ch
 )

564 
curDú
=&
w‹kDú
;

565 
lsA˘i⁄
=
LS_GëFûíame
;

566 
ƒFûes
=
ƒ
;

567 
curDú
->
	`ªwöd
();

568 
	`lsDive
("",*
curDú
,
m©ch
);

570 
	}
}

572 
uöt16_t
 
	gC¨dRódî
::
	$gëƒfûíames
()

574 
curDú
=&
w‹kDú
;

575 
lsA˘i⁄
=
LS_Cou¡
;

576 
ƒFûes
=0;

577 
curDú
->
	`ªwöd
();

578 
	`lsDive
("",*
curDú
);

580  
ƒFûes
;

581 
	}
}

583 
	gC¨dRódî
::
	$chdú
(c⁄° * 
ªÕ©h
)

585 
SdFûe
 
√wfûe
;

586 
SdFûe
 *
∑ª¡
=&
roŸ
;

588 if(
w‹kDú
.
	`isO≥n
())

589 
∑ª¡
=&
w‹kDú
;

591 if(!
√wfûe
.
	`›í
(*
∑ª¡
,
ªÕ©h
, 
O_READ
))

593 
SERIAL_ECHO_START
;

594 
	`SERIAL_ECHOPGM
(
MSG_SD_CANT_ENTER_SUBDIR
);

595 
	`SERIAL_ECHOLN
(
ªÕ©h
);

599 i‡(
w‹kDúDïth
 < 
MAX_DIR_DEPTH
) {

600 
d
 = ++
w‹kDúDïth
; d--;)

601 
w‹kDúP¨íts
[
d
+1] = workDirParents[d];

602 
w‹kDúP¨íts
[0]=*
∑ª¡
;

604 
w‹kDú
=
√wfûe
;

606 
	}
}

608 
	gC¨dRódî
::
	$updú
()

610 if(
w‹kDúDïth
 > 0)

612 --
w‹kDúDïth
;

613 
w‹kDú
 = 
w‹kDúP¨íts
[0];

614 
d
;

615 
d
 = 0; d < 
w‹kDúDïth
; d++)

616 
w‹kDúP¨íts
[
d
] = workDirParents[d+1];

618 
	}
}

621 
	gC¨dRódî
::
	$¥ötögHasFöished
()

623 
	`°_synchr⁄ize
();

624 if(
fûe_subˇŒ_˘r
>0)

626 
fûe
.
	`˛o£
();

627 
fûe_subˇŒ_˘r
--;

628 
	`›íFûe
(
fûíames
[
fûe_subˇŒ_˘r
],
åue
,true);

629 
	`£tIndex
(
fûe•os
[
fûe_subˇŒ_˘r
]);

630 
	`°¨tFûïröt
();

634 
	`quickSt›
();

635 
fûe
.
	`˛o£
();

636 
sd¥ötög
 = 
Ál£
;

637 if(
SD_FINISHED_STEPPERRELEASE
)

640 
	`íquecomm™d_P
(
	`PSTR
(
SD_FINISHED_RELEASECOMMAND
));

642 
	`autŸempShutdown
();

644 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/cardreader.h

1 #i‚de‡
CARDREADER_H


2 
	#CARDREADER_H


	)

4 #ifde‡
SDSUPPORT


6 
	#MAX_DIR_DEPTH
 10

	)

8 
	~"SdFûe.h
"

9 
	eLsA˘i⁄
 {
	mLS_SîülPröt
,
	mLS_Cou¡
,
	mLS_GëFûíame
};

10 ˛as†
	cC¨dRódî


12 
	mpublic
:

13 
C¨dRódî
();

15 
öôsd
();

16 
wrôe_comm™d
(*
buf
);

20 
checkauto°¨t
(
boﬁ
 
x
);

21 
›íFûe
(* 
«me
,
boﬁ
 
ªad
,boﬁ 
ª∂a˚_cuºít
=
åue
);

22 
›íLogFûe
(* 
«me
);

23 
ªmoveFûe
(* 
«me
);

24 
˛o£fûe
(
boﬁ
 
°‹e_loˇti⁄
=
Ál£
);

25 
ªÀa£
();

26 
°¨tFûïröt
();

27 
∑u£SDPröt
();

28 
gëSètus
();

29 
¥ötögHasFöished
();

31 
gëfûíame
(
uöt16_t
 
ƒ
, c⁄° * c⁄° 
m©ch
=
NULL
);

32 
uöt16_t
 
gëƒfûíames
();

34 
gëAbsFûíame
(*
t
);

37 
ls
();

38 
chdú
(c⁄° * 
ªÕ©h
);

39 
updú
();

40 
£åoŸ
();

43 
FORCE_INLINE
 
boﬁ
 
	$isFûeO≥n
(Ë{  
fûe
.
	`isO≥n
(); }

44 
FORCE_INLINE
 
boﬁ
 
	$eof
(Ë{  
sdpos
>=
fûesize
 ;
	}
};

45 
FORCE_INLINE
 
öt16_t
 
	$gë
(Ë{ 
sdpos
 = 
fûe
.
	`curPosôi⁄
(); (
öt16_t
)fûe.
	`ªad
();
	}
};

46 
FORCE_INLINE
 
	$£tIndex
(
ödex
Ë{
sdpos
 = index;
fûe
.
	`£ekSë
(ödex);
	}
};

47 
FORCE_INLINE
 
uöt8_t
 
	$≥r˚¡D⁄e
(){if(!
	`isFûeO≥n
()Ë 0; if(
fûesize
Ë 
sdpos
/((fûesize+99)/100);  0;
	}
};

48 
FORCE_INLINE
 * 
	$gëW‹kDúName
(){
w‹kDú
.
	`gëFûíame
(
fûíame
); fûíame;
	}
};

50 
	gpublic
:

51 
boﬁ
 
ßvög
;

52 
boﬁ
 
	gloggög
;

53 
boﬁ
 
	gsd¥ötög
 ;

54 
boﬁ
 
	gˇrdOK
 ;

55 
	gfûíame
[13];

56 
	gl⁄gFûíame
[
LONG_FILENAME_LENGTH
];

57 
boﬁ
 
	gfûíameIsDú
;

58 
	gœ°ƒ
;

59 
	g¥iv©e
:

60 
SdFûe
 
roŸ
,*
	gcurDú
,
	gw‹kDú
,
	gw‹kDúP¨íts
[
MAX_DIR_DEPTH
];

61 
uöt16_t
 
	gw‹kDúDïth
;

62 
Sd2C¨d
 
	gˇrd
;

63 
SdVﬁume
 
	gvﬁume
;

64 
SdFûe
 
	gfûe
;

65 
	#SD_PROCEDURE_DEPTH
 1

	)

66 
	#MAXPATHNAMELENGTH
 (13*
MAX_DIR_DEPTH
+MAX_DIR_DEPTH+1)

	)

67 
uöt8_t
 
	gfûe_subˇŒ_˘r
;

68 
uöt32_t
 
	gfûe•os
[
SD_PROCEDURE_DEPTH
];

69 
	gfûíames
[
SD_PROCEDURE_DEPTH
][
MAXPATHNAMELENGTH
];

70 
uöt32_t
 
	gfûesize
;

72 
	gauto°¨t_©mûlis
;

73 
uöt32_t
 
	gsdpos
 ;

75 
boﬁ
 
	gauto°¨t_°û…ocheck
;

77 
LsA˘i⁄
 
	glsA˘i⁄
;

78 
öt16_t
 
	gƒFûes
;

79 * 
	gdiveDúName
;

80 
lsDive
(c⁄° *
¥ïíd
, 
SdFûe
 
∑ª¡
, c⁄° * c⁄° 
m©ch
=
NULL
);

82 
C¨dRódî
 
ˇrd
;

83 
	#IS_SD_PRINTING
 (
ˇrd
.
sd¥ötög
)

	)

85 #i‡(
SDCARDDETECT
 > -1)

86 #ifde‡
SDCARDDETECTINVERTED


87 
	#IS_SD_INSERTED
 (
	`READ
(
SDCARDDETECT
)!=0)

	)

89 
	#IS_SD_INSERTED
 (
	`READ
(
SDCARDDETECT
)==0)

	)

93 
	#IS_SD_INSERTED
 
åue


	)

98 
	#IS_SD_PRINTING
 (
Ál£
)

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/digipot_mcp4451.cpp

1 
	~"C⁄figuøti⁄.h
"

3 #ifde‡
DIGIPOT_I2C


4 
	~"Såóm.h
"

5 
	~"utûôy/twi.h
"

6 
	~"Wúe.h
"

9 #i‡
MB
(5D
PRINT
)

10 
	#DIGIPOT_I2C_FACTOR
 117.96

	)

11 
	#DIGIPOT_I2C_MAX_CURRENT
 1.736

	)

13 
	#DIGIPOT_I2C_FACTOR
 106.7

	)

14 
	#DIGIPOT_I2C_MAX_CURRENT
 2.5

	)

17 
byã
 
	$cuºít_to_wùî
–
cuºít
 ){

18  
	`byã
(
	`˚û
(((
DIGIPOT_I2C_FACTOR
*
cuºít
))));

19 
	}
}

21 
	$i2c_£nd
(
byã
 
addr
, byã 
a
, byã 
b
)

23 
Wúe
.
	`begöTønsmissi⁄
(
addr
);

24 
Wúe
.
	`wrôe
(
a
);

25 
Wúe
.
	`wrôe
(
b
);

26 
Wúe
.
	`ídTønsmissi⁄
();

27 
	}
}

30 
	$digùŸ_i2c_£t_cuºít
–
ch™√l
, 
cuºít
 )

32 
cuºít
 = 
	`mö
–(Ë
	`max
–cuºít, 0.0‡), 
DIGIPOT_I2C_MAX_CURRENT
);

35 
byã
 
addr
= 0x2C;

36 if(
ch™√l
 >= 4) {

37 
addr
= 0x2E;

38 
ch™√l
-= 4;

42 
	`i2c_£nd
–
addr
, 0x40, 0xff );

43 
	`i2c_£nd
–
addr
, 0xA0, 0xff );

46 
byã
 
addªs£s
[4] = { 0x00, 0x10, 0x60, 0x70 };

47 
	`i2c_£nd
–
addr
, 
addªs£s
[
ch™√l
], 
	`cuºít_to_wùî
(
cuºít
) );

48 
	}
}

50 
	$digùŸ_i2c_öô
()

52 c⁄° 
digùŸ_mŸ‹_cuºít
[] = 
DIGIPOT_I2C_MOTOR_CURRENTS
;

53 
Wúe
.
	`begö
();

55 
i
=0;i<=(
digùŸ_mŸ‹_cuºít
)/();i++) {

56 
	`digùŸ_i2c_£t_cuºít
(
i
, 
digùŸ_mŸ‹_cuºít
[i]);

58 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/dogm_font_data_marlin.h

12 
	~<utûôy/u8g.h
>

13 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x9
[2300] 
U8G_SECTION
(".progmem.u8g_font_6x9") = {

171 
	~<utûôy/u8g.h
>

172 c⁄° 
u8g_‚çgm_uöt8_t
 
	gu8g_f⁄t_6x10_m¨lö
[2617] 
U8G_SECTION
(".progmem.u8g_font_6x10_marlin") = {

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/dogm_lcd_implementation.h

15 #i‚de‡
ULTRA_LCD_IMPLEMENTATION_DOGM_H


16 
	#ULTRA_LCD_IMPLEMENTATION_DOGM_H


	)

22 #ifde‡
ULTIPANEL


23 
	#BLEN_A
 0

	)

24 
	#BLEN_B
 1

	)

25 
	#BLEN_C
 2

	)

26 
	#EN_A
 (1<<
BLEN_A
)

	)

27 
	#EN_B
 (1<<
BLEN_B
)

	)

28 
	#EN_C
 (1<<
BLEN_C
)

	)

29 
	#í¸Ÿ0
 0

	)

30 
	#í¸Ÿ1
 2

	)

31 
	#í¸Ÿ2
 3

	)

32 
	#í¸Ÿ3
 1

	)

33 
	#LCD_CLICKED
 (
buâ⁄s
&
EN_C
)

	)

36 
	~<U8glib.h
>

37 
	~"DOGMbôm≠s.h
"

38 
	~"dogm_f⁄t_d©a_m¨lö.h
"

39 
	~"u…ølcd.h
"

40 
	~"u…ølcd_°7920_u8glib_ºd.h
"

54 
	#DOG_CHAR_WIDTH
 6

	)

55 
	#DOG_CHAR_HEIGHT
 12

	)

56 
	#DOG_CHAR_WIDTH_LARGE
 9

	)

57 
	#DOG_CHAR_HEIGHT_LARGE
 18

	)

59 
	#START_ROW
 0

	)

62 
	#LCD_STR_DEGREE
 "\xB0"

	)

63 
	#LCD_STR_REFRESH
 "\xF8"

	)

64 
	#LCD_STR_FOLDER
 "\xF9"

	)

65 
	#LCD_STR_ARROW_RIGHT
 "\xFA"

	)

66 
	#LCD_STR_UPLEVEL
 "\xFB"

	)

67 
	#LCD_STR_CLOCK
 "\xFC"

	)

68 
	#LCD_STR_FEEDRATE
 "\xFD"

	)

69 
	#LCD_STR_BEDTEMP
 "\xFE"

	)

70 
	#LCD_STR_THERMOMETER
 "\xFF"

	)

72 
	#FONT_STATUSMENU
 
u8g_f⁄t_6x9


	)

74 
	glcd_c⁄åa°
;

77 #ifde‡
U8GLIB_ST7920


79 
U8GLIB_ST7920_128X64_RRD
 
u8g
(0);

80 #ñi‡
deföed
(
MAKRPANEL
)

82 
U8GLIB_NHD_C12864
 
u8g
(
DOGLCD_CS
, 
DOGLCD_A0
);

85 
U8GLIB_DOGM128
 
u8g
(
DOGLCD_CS
, 
DOGLCD_A0
);

88 
	$lcd_im∂emíèti⁄_öô
()

90 #ifde‡
LCD_PIN_BL


91 
	`pöMode
(
LCD_PIN_BL
, 
OUTPUT
);

92 
	`digôÆWrôe
(
LCD_PIN_BL
, 
HIGH
);

95 
u8g
.
	`£tC⁄åa°
(
lcd_c⁄åa°
);

100 
u8g
.
	`fú°Page
();

102 
u8g
.
	`£tF⁄t
(
u8g_f⁄t_6x10_m¨lö
);

103 
u8g
.
	`£tCﬁ‹Index
(1);

104 
u8g
.
	`døwBox
 (0, 0, u8g.
	`gëWidth
(), u8g.
	`gëHeight
());

105 
u8g
.
	`£tCﬁ‹Index
(1);

106 }  
u8g
.
	`√xtPage
() );

108 #ifde‡
LCD_SCREEN_ROT_90


109 
u8g
.
	`£tRŸ90
();

112 #ifde‡
LCD_SCREEN_ROT_180


113 
u8g
.
	`£tRŸ180
();

116 #ifde‡
LCD_SCREEN_ROT_270


117 
u8g
.
	`£tRŸ270
();

121 
u8g
.
	`fú°Page
();

124 
u8g
.
	`døwBôm≠P
(0,0,
START_BMPBYTEWIDTH
,
START_BMPHEIGHT
,
°¨t_bmp
);

126 
u8g
.
	`£tF⁄t
(
u8g_f⁄t_6x10_m¨lö
);

127 
u8g
.
	`døwSå
(62,10,"MARLIN");

128 
u8g
.
	`£tF⁄t
(
u8g_f⁄t_5x8
);

129 
u8g
.
	`døwSå
(62,19,"V1.0.0 RC2-mm");

130 
u8g
.
	`£tF⁄t
(
u8g_f⁄t_6x10_m¨lö
);

131 
u8g
.
	`døwSå
(62,28,"by ErikZalm");

132 
u8g
.
	`døwSå
(62,41,"DOGM128 LCD");

133 
u8g
.
	`£tF⁄t
(
u8g_f⁄t_5x8
);

134 
u8g
.
	`døwSå
(62,48,"enhancements");

135 
u8g
.
	`£tF⁄t
(
u8g_f⁄t_5x8
);

136 
u8g
.
	`døwSå
(62,55,"by STB, MM");

137 
u8g
.
	`døwSå
(62,61,"uses u");

138 
u8g
.
	`døwSå90
(92,57,"8");

139 
u8g
.
	`døwSå
(100,61,"glib");

140 }  
u8g
.
	`√xtPage
() );

141 
	}
}

143 
	$lcd_im∂emíèti⁄_˛ór
()

155 
	}
}

158 
	$lcd_¥ötPGM
(c⁄° * 
°r
)

160 
c
;

161 (
c
 = 
	`pgm_ªad_byã
(
°r
++)) != '\0')

163 
u8g
.
	`¥öt
(
c
);

165 
	}
}

167 
	$_døw_hóãr_°©us
(
x
, 
hóãr
) {

168 
boﬁ
 
isBed
 = 
hóãr
 < 0;

169 
y
 = 17 + (
isBed
 ? 1 : 0);

170 
u8g
.
	`£tF⁄t
(
FONT_STATUSMENU
);

171 
u8g
.
	`£tPrötPos
(
x
,6);

172 
u8g
.
	`¥öt
(
	`ôo°r3
(((
hóãr
 >0 ? 
	`degT¨gëHŸíd
(hóãrË: 
	`degT¨gëBed
()) + 0.5)));

173 
	`lcd_¥ötPGM
(
	`PSTR
(
LCD_STR_DEGREE
 " "));

174 
u8g
.
	`£tPrötPos
(
x
,27);

175 
u8g
.
	`¥öt
(
	`ôo°r3
((
hóãr
 >0 ? 
	`degHŸíd
(hóãrË: 
	`degBed
()) + 0.5));

176 
	`lcd_¥ötPGM
(
	`PSTR
(
LCD_STR_DEGREE
 " "));

177 i‡(!
	`isHótögHŸíd
(0)) {

178 
u8g
.
	`døwBox
(
x
+7,
y
,2,2);

181 
u8g
.
	`£tCﬁ‹Index
(0);

182 
u8g
.
	`døwBox
(
x
+7,
y
,2,2);

183 
u8g
.
	`£tCﬁ‹Index
(1);

185 
	}
}

187 
	$lcd_im∂emíèti⁄_°©us_s¸ìn
()

190 
Án_rŸ
 = 0;

192 
u8g
.
	`£tCﬁ‹Index
(1);

195 
u8g
.
	`døwBôm≠P
(9,1,
STATUS_SCREENBYTEWIDTH
,
STATUS_SCREENHEIGHT
, (
blök
 % 2Ë&& 
ÁnS≥ed
 ? 
°©us_s¸ìn0_bmp
 : 
°©us_s¸ìn1_bmp
);

197 #ifde‡
SDSUPPORT


199 
u8g
.
	`døwBox
(42,42,8,7);

200 
u8g
.
	`døwBox
(50,44,2,5);

201 
u8g
.
	`døwFøme
(42,49,10,4);

202 
u8g
.
	`døwPixñ
(50,43);

204 
u8g
.
	`døwFøme
(54,49,73,4);

207 
u8g
.
	`£tF⁄t
(
FONT_STATUSMENU
);

209 i‡(
IS_SD_PRINTING
)

212 
u8g
.
	`døwBox
(55,50, ()–(71 * 
ˇrd
.
	`≥r˚¡D⁄e
())/100) ,2);

218 
u8g
.
	`£tPrötPos
(80,47);

219 if(
°¨âime
 != 0)

221 
uöt16_t
 
time
 = 
	`mûlis
()/60000 - 
°¨âime
/60000;

223 
u8g
.
	`¥öt
(
	`ôo°r2
(
time
/60));

224 
u8g
.
	`¥öt
(':');

225 
u8g
.
	`¥öt
(
	`ôo°r2
(
time
%60));

227 
	`lcd_¥ötPGM
(
	`PSTR
("--:--"));

232 
	`_døw_hóãr_°©us
(6, 0);

233 #i‡
EXTRUDERS
 > 1

234 
	`_døw_hóãr_°©us
(31, 1);

235 #i‡
EXTRUDERS
 > 2

236 
	`_døw_hóãr_°©us
(55, 2);

241 
	`_døw_hóãr_°©us
(81, -1);

244 
u8g
.
	`£tF⁄t
(
FONT_STATUSMENU
);

245 
u8g
.
	`£tPrötPos
(104,27);

246 #i‡
	`deföed
(
FAN_PIN
) && FAN_PIN > -1

247 
u8g
.
	`¥öt
(
	`ôo°r3
(((
ÁnS≥ed
*100)/256 + 1)));

248 
u8g
.
	`¥öt
("%");

250 
u8g
.
	`¥öt
("---");

255 
u8g
.
	`£tF⁄t
(
FONT_STATUSMENU
);

256 
u8g
.
	`døwBox
(0,29,128,10);

257 
u8g
.
	`£tCﬁ‹Index
(0);

258 
u8g
.
	`£tPrötPos
(2,37);

259 
u8g
.
	`¥öt
("X");

260 
u8g
.
	`døwPixñ
(8,33);

261 
u8g
.
	`døwPixñ
(8,35);

262 
u8g
.
	`£tPrötPos
(10,37);

263 
u8g
.
	`¥öt
(
	`·o°r31ns
(
cuºít_posôi⁄
[
X_AXIS
]));

264 
u8g
.
	`£tPrötPos
(43,37);

265 
	`lcd_¥ötPGM
(
	`PSTR
("Y"));

266 
u8g
.
	`døwPixñ
(49,33);

267 
u8g
.
	`døwPixñ
(49,35);

268 
u8g
.
	`£tPrötPos
(51,37);

269 
u8g
.
	`¥öt
(
	`·o°r31ns
(
cuºít_posôi⁄
[
Y_AXIS
]));

270 
u8g
.
	`£tPrötPos
(83,37);

271 
u8g
.
	`¥öt
("Z");

272 
u8g
.
	`døwPixñ
(89,33);

273 
u8g
.
	`døwPixñ
(89,35);

274 
u8g
.
	`£tPrötPos
(91,37);

275 
u8g
.
	`¥öt
(
	`·o°r31
(
cuºít_posôi⁄
[
Z_AXIS
]));

276 
u8g
.
	`£tCﬁ‹Index
(1);

279 
u8g
.
	`£tF⁄t
(
u8g_f⁄t_6x10_m¨lö
);

280 
u8g
.
	`£tPrötPos
(3,49);

281 
u8g
.
	`¥öt
(
LCD_STR_FEEDRATE
[0]);

282 
u8g
.
	`£tF⁄t
(
FONT_STATUSMENU
);

283 
u8g
.
	`£tPrötPos
(12,48);

284 
u8g
.
	`¥öt
(
	`ôo°r3
(
„edmu…ùly
));

285 
u8g
.
	`¥öt
('%');

288 
u8g
.
	`£tF⁄t
(
FONT_STATUSMENU
);

289 
u8g
.
	`£tPrötPos
(0,61);

290 #i‚de‡
FILAMENT_LCD_DISPLAY


291 
u8g
.
	`¥öt
(
lcd_°©us_mesßge
);

293 if(
mesßge_mûlis
+5000>
	`mûlis
()){

294 
u8g
.
	`¥öt
(
lcd_°©us_mesßge
);

298 
	`lcd_¥ötPGM
(
	`PSTR
("dia:"));

299 
u8g
.
	`¥öt
(
	`·o°r12ns
(
fûamít_width_mós
));

300 
	`lcd_¥ötPGM
(
	`PSTR
(" factor:"));

301 
u8g
.
	`¥öt
(
	`ôo°r3
(
exåudemu…ùly
));

302 
u8g
.
	`¥öt
('%');

306 
	}
}

308 
	$lcd_im∂emíèti⁄_døwmíu_gíîic
(
uöt8_t
 
row
, c⁄° * 
p°r
, 
¥e_ch¨
, 
po°_ch¨
)

310 
c
;

312 
uöt8_t
 
n
 = 
LCD_WIDTH
 - 1 - 2;

314 i‡((
¥e_ch¨
 ='>'Ë|| (¥e_ch¨ =
LCD_STR_UPLEVEL
[0] ))

316 
u8g
.
	`£tCﬁ‹Index
(1);

317 
u8g
.
	`døwBox
 (0, 
row
*
DOG_CHAR_HEIGHT
 + 3, 128, DOG_CHAR_HEIGHT);

318 
u8g
.
	`£tCﬁ‹Index
(0);

319 } 
u8g
.
	`£tCﬁ‹Index
(1);

321 
u8g
.
	`£tPrötPos
(0 * 
DOG_CHAR_WIDTH
, (
row
 + 1Ë* 
DOG_CHAR_HEIGHT
);

322 
u8g
.
	`¥öt
(
¥e_ch¨
 == '>' ? ' ' :Öre_char);

325  (
c
 = 
	`pgm_ªad_byã
(
p°r
)) != '\0' )

327 
u8g
.
	`¥öt
(
c
);

328 
p°r
++;

329 
n
--;

331 
n
--){

332 
u8g
.
	`¥öt
(' ');

335 
u8g
.
	`¥öt
(
po°_ch¨
);

336 
u8g
.
	`¥öt
(' ');

337 
u8g
.
	`£tCﬁ‹Index
(1);

338 
	}
}

340 
	$_døwmíu_£âög_edô_gíîic
(
uöt8_t
 
row
, c⁄° * 
p°r
, 
¥e_ch¨
, * 
d©a
, 
boﬁ
 
pgm
) {

341 
c
;

342 
uöt8_t
 
n
 = 
LCD_WIDTH
 - 1 - 2 - (
pgm
 ? 
	`°æí_P
(
d©a
Ë: 
	`°æí
(data));

344 
u8g
.
	`£tPrötPos
(0 * 
DOG_CHAR_WIDTH
, (
row
 + 1Ë* 
DOG_CHAR_HEIGHT
);

345 
u8g
.
	`¥öt
(
¥e_ch¨
);

347  (
c
 = 
	`pgm_ªad_byã
(
p°r
)) != '\0' ) {

348 
u8g
.
	`¥öt
(
c
);

349 
p°r
++;

350 
n
--;

353 
u8g
.
	`¥öt
(':');

355 
n
--Ë
u8g
.
	`¥öt
(' ');

357 i‡(
pgm
Ë{ 
	`lcd_¥ötPGM
(
d©a
); } { 
u8g
.
	`¥öt
(data); }

358 
	}
}

360 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
(
row
, 
p°r
, 
¥e_ch¨
, 
d©a
Ë
	`_døwmíu_£âög_edô_gíîic
‘ow,Ö°r,Öª_ch¨, d©a, 
Ál£
)

	)

361 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic_P
(
row
, 
p°r
, 
¥e_ch¨
, 
d©a
Ë
	`_døwmíu_£âög_edô_gíîic
‘ow,Ö°r,Öª_ch¨, d©a, 
åue
)

	)

363 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_öt3_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`ôo°r3
(*(d©a)))

	)

364 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_öt3
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`ôo°r3
(*(d©a)))

	)

365 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_Êﬂt3_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`·o°r3
(*(d©a)))

	)

366 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_Êﬂt3
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`·o°r3
(*(d©a)))

	)

367 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_Êﬂt32_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`·o°r32
(*(d©a)))

	)

368 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_Êﬂt32
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`·o°r32
(*(d©a)))

	)

369 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_Êﬂt5_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`·o°r5
(*(d©a)))

	)

370 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_Êﬂt5
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`·o°r5
(*(d©a)))

	)

371 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_Êﬂt52_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`·o°r52
(*(d©a)))

	)

372 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_Êﬂt52
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`·o°r52
(*(d©a)))

	)

373 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_Êﬂt51_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`·o°r51
(*(d©a)))

	)

374 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_Êﬂt51
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`·o°r51
(*(d©a)))

	)

375 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_l⁄g5_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`·o°r5
(*(d©a)))

	)

376 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_l⁄g5
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`·o°r5
(*(d©a)))

	)

377 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_boﬁ_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic_P
‘ow,Ö°r, '>', (*(d©a))?
	`PSTR
(
MSG_ON
):PSTR(
MSG_OFF
))

	)

378 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_boﬁ
(
row
, 
p°r
, 
p°r2
, 
d©a
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic_P
‘ow,Ö°r, ' ', (*(d©a))?
	`PSTR
(
MSG_ON
):PSTR(
MSG_OFF
))

	)

381 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_öt3_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`ôo°r3
(*(d©a)))

	)

382 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_öt3
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`ôo°r3
(*(d©a)))

	)

383 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_Êﬂt3_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`·o°r3
(*(d©a)))

	)

384 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_Êﬂt3
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`·o°r3
(*(d©a)))

	)

385 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_Êﬂt32_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`·o°r32
(*(d©a)))

	)

386 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_Êﬂt32
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`·o°r32
(*(d©a)))

	)

387 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_Êﬂt5_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`·o°r5
(*(d©a)))

	)

388 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_Êﬂt5
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`·o°r5
(*(d©a)))

	)

389 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_Êﬂt52_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`·o°r52
(*(d©a)))

	)

390 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_Êﬂt52
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`·o°r52
(*(d©a)))

	)

391 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_Êﬂt51_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`·o°r51
(*(d©a)))

	)

392 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_Êﬂt51
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`·o°r51
(*(d©a)))

	)

393 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_l⁄g5_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`·o°r5
(*(d©a)))

	)

394 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_l⁄g5
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`·o°r5
(*(d©a)))

	)

395 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_boﬁ_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic_P
‘ow,Ö°r, '>', (*(d©a))?
	`PSTR
(
MSG_ON
):PSTR(
MSG_OFF
))

	)

396 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_boﬁ
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic_P
‘ow,Ö°r, ' ', (*(d©a))?
	`PSTR
(
MSG_ON
):PSTR(
MSG_OFF
))

	)

398 
	$lcd_im∂emíèti⁄_døwedô
(c⁄° * 
p°r
, * 
vÆue
)

400 
u8g
.
	`£tPrötPos
(0 * 
DOG_CHAR_WIDTH_LARGE
, (u8g.
	`gëHeight
(Ë- 1 - 
DOG_CHAR_HEIGHT_LARGE
Ë- (1 * DOG_CHAR_HEIGHT_LARGEË- 
START_ROW
 );

401 
u8g
.
	`£tF⁄t
(
u8g_f⁄t_9x18
);

402 
	`lcd_¥ötPGM
(
p°r
);

403 
u8g
.
	`¥öt
(':');

404 
u8g
.
	`£tPrötPos
((14 - 
	`°æí
(
vÆue
)Ë* 
DOG_CHAR_WIDTH_LARGE
, (u8g.
	`gëHeight
(Ë- 1 - 
DOG_CHAR_HEIGHT_LARGE
Ë- (1 * DOG_CHAR_HEIGHT_LARGEË- 
START_ROW
 );

405 
u8g
.
	`¥öt
(
vÆue
);

406 
	}
}

408 
	$_døwmíu_sd
(
uöt8_t
 
row
, c⁄° * 
p°r
, c⁄° * 
fûíame
, * c⁄° 
l⁄gFûíame
, 
boﬁ
 
isDú
, boﬁ 
isSñe˘ed
) {

409 
c
;

410 
uöt8_t
 
n
 = 
LCD_WIDTH
 - 1;

412 i‡(
l⁄gFûíame
[0] != '\0') {

413 
fûíame
 = 
l⁄gFûíame
;

414 
l⁄gFûíame
[
n
] = '\0';

417 i‡(
isSñe˘ed
) {

418 
u8g
.
	`£tCﬁ‹Index
(1);

419 
u8g
.
	`døwBox
 (0, 
row
*
DOG_CHAR_HEIGHT
 + 3, 128, DOG_CHAR_HEIGHT);

420 
u8g
.
	`£tCﬁ‹Index
(0);

423 
u8g
.
	`£tPrötPos
(0 * 
DOG_CHAR_WIDTH
, (
row
 + 1Ë* 
DOG_CHAR_HEIGHT
);

424 
u8g
.
	`¥öt
(' ');

426 i‡(
isDú
Ë
u8g
.
	`¥öt
(
LCD_STR_FOLDER
[0]);

428 (
c
 = *
fûíame
) != '\0') {

429 
u8g
.
	`¥öt
(
c
);

430 
fûíame
++;

431 
n
--;

433 
n
--Ë
u8g
.
	`¥öt
(' ');

435 i‡(
isSñe˘ed
Ë
u8g
.
	`£tCﬁ‹Index
(1);

436 
	}
}

438 
	#lcd_im∂emíèti⁄_døwmíu_sdfûe_£À˘ed
(
row
, 
p°r
, 
fûíame
, 
l⁄gFûíame
Ë
	`_døwmíu_sd
‘ow,Ö°r, fûíame,Ü⁄gFûíame, 
Ál£
, 
åue
)

	)

439 
	#lcd_im∂emíèti⁄_døwmíu_sdfûe
(
row
, 
p°r
, 
fûíame
, 
l⁄gFûíame
Ë
	`_døwmíu_sd
‘ow,Ö°r, fûíame,Ü⁄gFûíame, 
Ál£
, fÆ£)

	)

440 
	#lcd_im∂emíèti⁄_døwmíu_sddúe˘‹y_£À˘ed
(
row
, 
p°r
, 
fûíame
, 
l⁄gFûíame
Ë
	`_døwmíu_sd
‘ow,Ö°r, fûíame,Ü⁄gFûíame, 
åue
,Årue)

	)

441 
	#lcd_im∂emíèti⁄_døwmíu_sddúe˘‹y
(
row
, 
p°r
, 
fûíame
, 
l⁄gFûíame
Ë
	`_døwmíu_sd
‘ow,Ö°r, fûíame,Ü⁄gFûíame, 
åue
, 
Ál£
)

	)

443 
	#lcd_im∂emíèti⁄_døwmíu_back_£À˘ed
(
row
, 
p°r
, 
d©a
Ë
	`lcd_im∂emíèti⁄_døwmíu_gíîic
‘ow,Ö°r, 
LCD_STR_UPLEVEL
[0], LCD_STR_UPLEVEL[0])

	)

444 
	#lcd_im∂emíèti⁄_døwmíu_back
(
row
, 
p°r
, 
d©a
Ë
	`lcd_im∂emíèti⁄_døwmíu_gíîic
‘ow,Ö°r, ' ', 
LCD_STR_UPLEVEL
[0])

	)

445 
	#lcd_im∂emíèti⁄_døwmíu_submíu_£À˘ed
(
row
, 
p°r
, 
d©a
Ë
	`lcd_im∂emíèti⁄_døwmíu_gíîic
‘ow,Ö°r, '>', 
LCD_STR_ARROW_RIGHT
[0])

	)

446 
	#lcd_im∂emíèti⁄_døwmíu_submíu
(
row
, 
p°r
, 
d©a
Ë
	`lcd_im∂emíèti⁄_døwmíu_gíîic
‘ow,Ö°r, ' ', 
LCD_STR_ARROW_RIGHT
[0])

	)

447 
	#lcd_im∂emíèti⁄_døwmíu_gcode_£À˘ed
(
row
, 
p°r
, 
gcode
Ë
	`lcd_im∂emíèti⁄_døwmíu_gíîic
‘ow,Ö°r, '>', ' ')

	)

448 
	#lcd_im∂emíèti⁄_døwmíu_gcode
(
row
, 
p°r
, 
gcode
Ë
	`lcd_im∂emíèti⁄_døwmíu_gíîic
‘ow,Ö°r, ' ', ' ')

	)

449 
	#lcd_im∂emíèti⁄_døwmíu_fun˘i⁄_£À˘ed
(
row
, 
p°r
, 
d©a
Ë
	`lcd_im∂emíèti⁄_døwmíu_gíîic
‘ow,Ö°r, '>', ' ')

	)

450 
	#lcd_im∂emíèti⁄_døwmíu_fun˘i⁄
(
row
, 
p°r
, 
d©a
Ë
	`lcd_im∂emíèti⁄_døwmíu_gíîic
‘ow,Ö°r, ' ', ' ')

	)

452 
	$lcd_im∂emíèti⁄_quick_„edback
()

455 #i‡
BEEPER
 > -1

456 
	`SET_OUTPUT
(
BEEPER
);

457 
öt8_t
 
i
=0;i<10;i++)

459 
	`WRITE
(
BEEPER
,
HIGH
);

460 
	`dñay
(3);

461 
	`WRITE
(
BEEPER
,
LOW
);

462 
	`dñay
(3);

465 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/example_configurations/SCARA/Configuration.h

1 #i‚de‡
CONFIGURATION_H


2 
	#CONFIGURATION_H


	)

4 
	~"bﬂrds.h
"

18 
	#SCARA


	)

19 
	#sˇø_£gmíts_≥r_£c⁄d
 200

21 
	#Lökage_1
 150

23 
	#Lökage_2
 150

24 

	)

27 
	#SCARA_off£t_x
 100

28 
	#SCARA_off£t_y
 -56

29 
	#SCARA_RAD2DEG
 57.2957795

30 

	)

31 
	#THETA_HOMING_OFFSET
 0

32 
	#PSI_HOMING_OFFSET
 0

33 

	)

35 
	#L1_2
 
	`sq
(
Lökage_1
)

36 
	#L2_2
 
	`sq
(
Lökage_2
)

37 

	)

45 
	#STRING_VERSION_CONFIG_H
 
__DATE__
 " " 
__TIME__


46 
	#STRING_CONFIG_H_AUTHOR
 "(none, default config)"

47 

	)

51 
	#SERIAL_PORT
 0

	)

55 
	#BAUDRATE
 250000

	)

62 #i‚de‡
MOTHERBOARD


63 
	#MOTHERBOARD
 
BOARD_RAMPS_13_EFB


	)

74 
	#EXTRUDERS
 1

	)

80 
	#POWER_SUPPLY
 1

	)

122 
	#TEMP_SENSOR_0
 1

	)

123 
	#TEMP_SENSOR_1
 0

	)

124 
	#TEMP_SENSOR_2
 0

	)

125 
	#TEMP_SENSOR_BED
 1

	)

129 
	#MAX_REDUNDANT_TEMP_SENSOR_DIFF
 10

	)

132 
	#TEMP_RESIDENCY_TIME
 3

133 
	#TEMP_HYSTERESIS
 2

134 
	#TEMP_WINDOW
 1

135 

	)

139 
	#HEATER_0_MINTEMP
 5

	)

140 
	#HEATER_1_MINTEMP
 5

	)

141 
	#HEATER_2_MINTEMP
 5

	)

142 
	#BED_MINTEMP
 5

	)

147 
	#HEATER_0_MAXTEMP
 275

	)

148 
	#HEATER_1_MAXTEMP
 275

	)

149 
	#HEATER_2_MAXTEMP
 275

	)

150 
	#BED_MAXTEMP
 150

	)

158 
	#EXTRUDER_WATTS
 (2*2/5.9)

159 
	#BED_WATTS
 (5.45*5.45/2.2)

160 

	)

163 
	#PIDTEMP


	)

164 
	#BANG_MAX
 255

165 
	#PID_MAX
 255

166 #ifde‡
PIDTEMP


	)

169 
	#PID_FUNCTIONAL_RANGE
 20

171 
	#PID_INTEGRAL_DRIVE_MAX
 255

172 
	#K1
 0.95

173 
	#PID_dT
 ((
OVERSAMPLENR
 * 8.0)/(
F_CPU
 / 64.0 / 256.0))

174 

	)

187 
	#DEFAULT_Kp
 24.5

	)

188 
	#DEFAULT_Ki
 1.72

	)

189 
	#DEFAULT_Kd
 87.73

	)

212 
	#PIDTEMPBED


	)

214 
	#BED_LIMIT_SWITCHING


	)

220 
	#MAX_BED_POWER
 255

221 

	)

222 #ifde‡
PIDTEMPBED


237 
	#DEFAULT_bedKp
 630.14

	)

238 
	#DEFAULT_bedKi
 121.71

	)

239 
	#DEFAULT_bedKd
 815.64

	)

250 
	#PREVENT_LENGTHY_EXTRUDE


	)

252 
	#EXTRUDE_MINTEMP
 150

	)

253 
	#EXTRUDE_MAXLENGTH
 (
X_MAX_LENGTH
+
Y_MAX_LENGTH
)

254 

	)

302 #i‚de‡
ENDSTOPPULLUPS


306 
	#ENDSTOPPULLUP_ZMAX


307 
	#ENDSTOPPULLUP_XMIN


308 
	#ENDSTOPPULLUP_YMIN


311 

	)

312 #ifde‡
ENDSTOPPULLUPS


313 
	#ENDSTOPPULLUP_XMAX


	)

314 
	#ENDSTOPPULLUP_YMAX


	)

315 
	#ENDSTOPPULLUP_ZMAX


	)

316 
	#ENDSTOPPULLUP_XMIN


	)

317 
	#ENDSTOPPULLUP_YMIN


	)

318 
	#ENDSTOPPULLUP_ZMIN


	)

322 c⁄° 
boﬁ
 
	gX_MIN_ENDSTOP_INVERTING
 = 
åue
;

323 c⁄° 
boﬁ
 
	gY_MIN_ENDSTOP_INVERTING
 = 
åue
;

324 c⁄° 
boﬁ
 
	gZ_MIN_ENDSTOP_INVERTING
 = 
åue
;

325 c⁄° 
boﬁ
 
	gX_MAX_ENDSTOP_INVERTING
 = 
åue
;

326 c⁄° 
boﬁ
 
	gY_MAX_ENDSTOP_INVERTING
 = 
åue
;

327 c⁄° 
boﬁ
 
	gZ_MAX_ENDSTOP_INVERTING
 = 
åue
;

332 #i‡
deföed
(
COREXY
Ë&& !deföed(
DISABLE_MAX_ENDSTOPS
)

333 
	#DISABLE_MAX_ENDSTOPS


	)

337 
	#X_ENABLE_ON
 0

	)

338 
	#Y_ENABLE_ON
 0

	)

339 
	#Z_ENABLE_ON
 0

	)

340 
	#E_ENABLE_ON
 0

341 

	)

343 
	#DISABLE_X
 
Ál£


	)

344 
	#DISABLE_Y
 
Ál£


	)

345 
	#DISABLE_Z
 
Ál£


	)

346 
	#DISABLE_E
 
Ál£


347 
	#DISABLE_INACTIVE_EXTRUDER
 
åue


348 

	)

349 
	#INVERT_X_DIR
 
Ál£


350 
	#INVERT_Y_DIR
 
Ál£


351 
	#INVERT_Z_DIR
 
åue


352 
	#INVERT_E0_DIR
 
Ál£


353 
	#INVERT_E1_DIR
 
Ál£


354 
	#INVERT_E2_DIR
 
Ál£


355 

	)

358 
	#X_HOME_DIR
 1

	)

359 
	#Y_HOME_DIR
 1

	)

360 
	#Z_HOME_DIR
 -1

	)

362 
	#mö_so·w¨e_íd°›s
 
åue


363 
	#max_so·w¨e_íd°›s
 
åue


364 

	)

366 
	#X_MAX_POS
 200

	)

367 
	#X_MIN_POS
 0

	)

368 
	#Y_MAX_POS
 200

	)

369 
	#Y_MIN_POS
 0

	)

370 
	#Z_MAX_POS
 225

	)

371 
	#Z_MIN_POS
 
MANUAL_Z_HOME_POS


	)

373 
	#X_MAX_LENGTH
 (
X_MAX_POS
 - 
X_MIN_POS
)

	)

374 
	#Y_MAX_LENGTH
 (
Y_MAX_POS
 - 
Y_MIN_POS
)

	)

375 
	#Z_MAX_LENGTH
 (
Z_MAX_POS
 - 
Z_MIN_POS
)

	)

380 #ifde‡
ENABLE_AUTO_BED_LEVELING


394 
	#AUTO_BED_LEVELING_GRID


	)

399 #ifde‡
AUTO_BED_LEVELING_GRID


402 
	#LEFT_PROBE_BED_POSITION
 15

	)

403 
	#RIGHT_PROBE_BED_POSITION
 170

	)

404 
	#BACK_PROBE_BED_POSITION
 180

	)

405 
	#FRONT_PROBE_BED_POSITION
 20

	)

409 
	#AUTO_BED_LEVELING_GRID_POINTS
 2

	)

416 
	#ABL_PROBE_PT_1_X
 15

	)

417 
	#ABL_PROBE_PT_1_Y
 180

	)

418 
	#ABL_PROBE_PT_2_X
 15

	)

419 
	#ABL_PROBE_PT_2_Y
 20

	)

420 
	#ABL_PROBE_PT_3_X
 170

	)

421 
	#ABL_PROBE_PT_3_Y
 20

	)

427 
	#X_PROBE_OFFSET_FROM_EXTRUDER
 -25

	)

428 
	#Y_PROBE_OFFSET_FROM_EXTRUDER
 -29

	)

429 
	#Z_PROBE_OFFSET_FROM_EXTRUDER
 -12.35

	)

434 
	#XY_TRAVEL_SPEED
 8000

435 

	)

436 
	#Z_RAISE_BEFORE_PROBING
 15

437 
	#Z_RAISE_BETWEEN_PROBINGS
 5

438 

	)

457 #ifde‡
Z_SAFE_HOMING


459 
	#Z_SAFE_HOMING_X_POINT
 (
X_MAX_LENGTH
/2)

460 
	#Z_SAFE_HOMING_Y_POINT
 (
Y_MAX_LENGTH
/2)

461 

	)

468 
	#MANUAL_HOME_POSITIONS


470 

	)

474 
	#MANUAL_X_HOME_POS
 -22.

	)

475 
	#MANUAL_Y_HOME_POS
 -52.

	)

476 
	#MANUAL_Z_HOME_POS
 0.1

477 

	)

480 
	#NUM_AXIS
 4

481 
	#HOMING_FEEDRATE
 {40*60, 40*60, 10*60, 0}

482 

	)

485 
	#DEFAULT_AXIS_STEPS_PER_UNIT
 {103.69,106.65,200/1.25,1000}

486 
	#DEFAULT_MAX_FEEDRATE
 {300, 300, 30, 25}

487 
	#DEFAULT_MAX_ACCELERATION
 {300,300,20,1000}

488 

	)

489 
	#DEFAULT_ACCELERATION
 400

490 
	#DEFAULT_RETRACT_ACCELERATION
 2000

491 

	)

499 
	#DEFAULT_XYJERK
 5

500 
	#DEFAULT_ZJERK
 0.4

501 
	#DEFAULT_EJERK
 3

502 

	)

509 #ifde‡
CUSTOM_M_CODES


510 
	#CUSTOM_M_CODE_SET_Z_PROBE_OFFSET
 851

	)

511 
	#Z_PROBE_OFFSET_RANGE_MIN
 -15

	)

512 
	#Z_PROBE_OFFSET_RANGE_MAX
 -5

	)

525 
	#EEPROM_CHITCHAT


	)

528 
	#PLA_PREHEAT_HOTEND_TEMP
 180

	)

529 
	#PLA_PREHEAT_HPB_TEMP
 70

	)

530 
	#PLA_PREHEAT_FAN_SPEED
 255

531 

	)

532 
	#ABS_PREHEAT_HOTEND_TEMP
 240

	)

533 
	#ABS_PREHEAT_HPB_TEMP
 100

	)

534 
	#ABS_PREHEAT_FAN_SPEED
 255

535 

	)

578 #i‡
deföed
 (
MAKRPANEL
)

579 
	#DOGLCD


	)

580 
	#SDSUPPORT


	)

581 
	#ULTIPANEL


	)

582 
	#NEWPANEL


	)

583 
	#DEFAULT_LCD_CONTRAST
 17

	)

586 #i‡
deföed
 (
REPRAP_DISCOUNT_FULL_GRAPHIC_SMART_CONTROLLER
)

587 
	#DOGLCD


	)

588 
	#U8GLIB_ST7920


	)

589 
	#REPRAP_DISCOUNT_SMART_CONTROLLER


	)

592 #i‡
deföed
(
ULTIMAKERCONTROLLER
Ë|| deföed(
REPRAP_DISCOUNT_SMART_CONTROLLER
Ë|| deföed(
G3D_PANEL
)

593 
	#ULTIPANEL


	)

594 
	#NEWPANEL


	)

597 #i‡
deföed
(
REPRAPWORLD_KEYPAD
)

598 
	#NEWPANEL


	)

599 
	#ULTIPANEL


	)

601 #i‡
deföed
(
RA_CONTROL_PANEL
)

602 
	#ULTIPANEL


	)

603 
	#NEWPANEL


	)

604 
	#LCD_I2C_TYPE_PCA8574


	)

605 
	#LCD_I2C_ADDRESS
 0x27

607 

	)

611 #ifde‡
LCD_I2C_SAINSMART_YWROBOT


614 
	#LCD_I2C_TYPE_PCF8575


	)

615 
	#LCD_I2C_ADDRESS
 0x27

616 
	#NEWPANEL


	)

617 
	#ULTIPANEL


	)

622 #ifde‡
LCD_I2C_PANELOLU2


628 
	#LCD_I2C_TYPE_MCP23017


	)

629 
	#LCD_I2C_ADDRESS
 0x20

630 
	#LCD_USE_I2C_BUZZER


631 
	#NEWPANEL


	)

632 
	#ULTIPANEL


	)

634 #i‚de‡
ENCODER_PULSES_PER_STEP


635 
	#ENCODER_PULSES_PER_STEP
 4

	)

638 #i‚de‡
ENCODER_STEPS_PER_MENU_ITEM


639 
	#ENCODER_STEPS_PER_MENU_ITEM
 1

	)

643 #ifde‡
LCD_USE_I2C_BUZZER


644 
	#LCD_FEEDBACK_FREQUENCY_HZ
 1000

	)

645 
	#LCD_FEEDBACK_FREQUENCY_DURATION_MS
 100

	)

652 #ifde‡
LCD_I2C_VIKI


657 
	#LCD_I2C_TYPE_MCP23017


	)

658 
	#LCD_I2C_ADDRESS
 0x20

659 
	#LCD_USE_I2C_BUZZER


660 
	#NEWPANEL


	)

661 
	#ULTIPANEL


	)

669 #ifde‡
SR_LCD


670 
	#SR_LCD_2W_NL


673 

	)

675 #ifde‡
ULTIPANEL


677 
	#SDSUPPORT


	)

678 
	#ULTRA_LCD


	)

679 #ifde‡
DOGLCD


680 
	#LCD_WIDTH
 20

	)

681 
	#LCD_HEIGHT
 5

	)

683 
	#LCD_WIDTH
 20

	)

684 
	#LCD_HEIGHT
 4

	)

687 #ifde‡
ULTRA_LCD


688 #ifde‡
DOGLCD


689 
	#LCD_WIDTH
 20

	)

690 
	#LCD_HEIGHT
 5

	)

692 
	#LCD_WIDTH
 16

	)

693 
	#LCD_HEIGHT
 2

	)

699 #ifde‡
DOGLCD


700 #i‚de‡
DEFAULT_LCD_CONTRAST


701 
	#DEFAULT_LCD_CONTRAST
 32

	)

722 
	#SOFT_PWM_SCALE
 0

	)

759 
	~"C⁄figuøti⁄_adv.h
"

760 
	~"thîmi°‹èbÀs.h
"

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/example_configurations/SCARA/Configuration_adv.h

1 #i‚de‡
CONFIGURATION_ADV_H


2 
	#CONFIGURATION_ADV_H


	)

8 #ifde‡
BED_LIMIT_SWITCHING


9 
	#BED_HYSTERESIS
 2

11 
	#BED_CHECK_INTERVAL
 3000

12 

	)

21 #ifde‡
PIDTEMP


24 
	#PID_ADD_EXTRUSION_RATE


	)

25 #ifde‡
PID_ADD_EXTRUSION_RATE


26 
	#DEFAULT_Kc
 (1)

29 

	)

38 
	#AUTOTEMP


	)

39 #ifde‡
AUTOTEMP


40 
	#AUTOTEMP_OLDWEIGHT
 0.98

	)

50 
	#EXTRUDER_RUNOUT_MINTEMP
 180

	)

51 
	#EXTRUDER_RUNOUT_SECONDS
 30.

	)

52 
	#EXTRUDER_RUNOUT_ESTEPS
 14.

53 
	#EXTRUDER_RUNOUT_SPEED
 180.

54 
	#EXTRUDER_RUNOUT_EXTRUDE
 100

	)

58 
	#TEMP_SENSOR_AD595_OFFSET
 0.0

	)

59 
	#TEMP_SENSOR_AD595_GAIN
 1.0

	)

64 
	#CONTROLLERFAN_PIN
 -1

65 
	#CONTROLLERFAN_SECS
 60

66 
	#CONTROLLERFAN_SPEED
 255

67 

	)

78 
	#EXTRUDER_0_AUTO_FAN_PIN
 -1

	)

79 
	#EXTRUDER_1_AUTO_FAN_PIN
 -1

	)

80 
	#EXTRUDER_2_AUTO_FAN_PIN
 -1

	)

81 
	#EXTRUDER_AUTO_FAN_TEMPERATURE
 50

	)

82 
	#EXTRUDER_AUTO_FAN_SPEED
 255

83 

	)

89 
	#ENDSTOPS_ONLY_FOR_HOMING


90 

	)

94 #ifde‡
MANUAL_HOME_POSITIONS


95 
	#X_HOME_POS
 
MANUAL_X_HOME_POS


	)

96 
	#Y_HOME_POS
 
MANUAL_Y_HOME_POS


	)

97 
	#Z_HOME_POS
 
MANUAL_Z_HOME_POS


	)

100 #i‡
X_HOME_DIR
 == -1

101 #ifde‡
BED_CENTER_AT_0_0


102 
	#X_HOME_POS
 
X_MAX_LENGTH
 * -0.5

	)

104 
	#X_HOME_POS
 
X_MIN_POS


	)

107 #ifde‡
BED_CENTER_AT_0_0


108 
	#X_HOME_POS
 
X_MAX_LENGTH
 * 0.5

	)

110 
	#X_HOME_POS
 
X_MAX_POS


	)

115 #i‡
Y_HOME_DIR
 == -1

116 #ifde‡
BED_CENTER_AT_0_0


117 
	#Y_HOME_POS
 
Y_MAX_LENGTH
 * -0.5

	)

119 
	#Y_HOME_POS
 
Y_MIN_POS


	)

122 #ifde‡
BED_CENTER_AT_0_0


123 
	#Y_HOME_POS
 
Y_MAX_LENGTH
 * 0.5

	)

125 
	#Y_HOME_POS
 
Y_MAX_POS


	)

130 #i‡
Z_HOME_DIR
 == -1

131 
	#Z_HOME_POS
 
Z_MIN_POS


	)

133 
	#Z_HOME_POS
 
Z_MAX_POS


	)

148 #ifde‡
Z_DUAL_STEPPER_DRIVERS


149 #unde‡
EXTRUDERS


150 
	#EXTRUDERS
 1

	)

157 
	#INVERT_Y2_VS_Y_DIR
 
åue


	)

159 #ifde‡
Y_DUAL_STEPPER_DRIVERS


160 #unde‡
EXTRUDERS


161 
	#EXTRUDERS
 1

	)

164 #i‡
deföed
 (
Z_DUAL_STEPPER_DRIVERS
Ë&& deföed (
Y_DUAL_STEPPER_DRIVERS
)

173 #ifde‡
DUAL_X_CARRIAGE


177 
	#X2_MIN_POS
 80

178 
	#X2_MAX_POS
 353

179 
	#X2_HOME_DIR
 1

180 
	#X2_HOME_POS
 
X2_MAX_POS


185 

	)

187 
	#X2_ENABLE_PIN
 29

	)

188 
	#X2_STEP_PIN
 25

	)

189 
	#X2_DIR_PIN
 23

	)

201 
	#DEFAULT_DUAL_X_CARRIAGE_MODE
 0

	)

204 
	#EXTRUDER1_Z_OFFSET
 0.0

205 

	)

207 
	#TOOLCHANGE_PARK_ZLIFT
 0.2

208 
	#TOOLCHANGE_UNPARK_ZLIFT
 1

209 

	)

211 
	#DEFAULT_DUPLICATION_X_OFFSET
 100

	)

216 
	#X_HOME_RETRACT_MM
 3

	)

217 
	#Y_HOME_RETRACT_MM
 3

	)

218 
	#Z_HOME_RETRACT_MM
 3

	)

220 #ifde‡
SCARA


221 
	#QUICK_HOME


223 

	)

224 
	#AXIS_RELATIVE_MODES
 {
Ál£
, fÆ£, fÆ£, fÆ£}

	)

226 
	#MAX_STEP_FREQUENCY
 40000

227 

	)

229 
	#INVERT_X_STEP_PIN
 
Ál£


	)

230 
	#INVERT_Y_STEP_PIN
 
Ál£


	)

231 
	#INVERT_Z_STEP_PIN
 
Ál£


	)

232 
	#INVERT_E_STEP_PIN
 
Ál£


	)

235 
	#DEFAULT_STEPPER_DEACTIVE_TIME
 240

	)

237 
	#DEFAULT_MINIMUMFEEDRATE
 0.0

238 
	#DEFAULT_MINTRAVELFEEDRATE
 0.0

	)

241 #ifde‡
ULTIPANEL


242 
	#MANUAL_FEEDRATE
 {50*60, 50*60, 10*60, 60}

244 

	)

246 #ifde‡
ULTIPANEL


247 
	#ULTIPANEL_FEEDMULTIPLY


	)

251 
	#DEFAULT_MINSEGMENTTIME
 20000

	)

255 #ifde‡
SCARA


256 #unde‡
SLOWDOWN


266 
	#MINIMUM_PLANNER_SPEED
 0.05

267 

	)

269 
	#MICROSTEP1
 
LOW
,
	)
LOW

270 
	#MICROSTEP2
 
HIGH
,
LOW


	)

271 
	#MICROSTEP4
 
LOW
,
HIGH


	)

272 
	#MICROSTEP8
 
HIGH
,
	)
HIGH

273 
	#MICROSTEP16
 
HIGH
,
	)
HIGH

276 
	#MICROSTEP_MODES
 {16,16,16,16,16}

277 

	)

279 
	#DIGIPOT_MOTOR_CURRENT
 {135,135,135,135,135}

280 

	)

284 
	#DIGIPOT_I2C_NUM_CHANNELS
 8

	)

286 
	#DIGIPOT_I2C_MOTOR_CURRENTS
 {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}

	)

293 
	#CHDK_DELAY
 50

294 

	)

295 
	#SD_FINISHED_STEPPERRELEASE
 
åue


296 
	#SD_FINISHED_RELEASECOMMAND
 "M84 X Y Z E"

297 

	)

298 
	#SDCARD_RATHERRECENTFIRST


302 

	)

306 #ifde‡
USE_WATCHDOG


320 #ifde‡
BABYSTEPPING


321 
	#BABYSTEP_XY


322 
	#BABYSTEP_INVERT_Z
 
Ál£


323 
	#BABYSTEP_Z_MULTIPLICATOR
 2

324 

	)

325 #ifde‡
COREXY


326 #îr‹ 
BABYSTEPPING
 
nŸ
 
im∂emíãd
 
COREXY
 
yë
.

329 #ifde‡
DELTA


330 #ifde‡
BABYSTEP_XY


331 #îr‹ 
BABYSTEPPING
 
⁄ly
 
im∂emíãd
 
Z
 
axis
 
⁄
 
dñèbŸs
.

335 #ifde‡
SCARA


336 #îr‹ 
BABYSTEPPING
 
nŸ
 
im∂emíãd
 
SCARA
 
yë
.

348 
	#ADVANCE


	)

350 #ifde‡
ADVANCE


351 
	#EXTRUDER_ADVANCE_K
 .0

	)

353 
	#D_FILAMENT
 1.75

	)

354 
	#STEPS_MM_E
 1000

	)

355 
	#EXTRUSION_AREA
 (0.25 * 
D_FILAMENT
 * D_FILAMENT * 3.14159)

	)

356 
	#STEPS_PER_CUBIC_MM_E
 (
axis_°ïs_≥r_unô
[
E_AXIS
]/ 
EXTRUSION_AREA
)

	)

361 
	#MM_PER_ARC_SEGMENT
 1

	)

362 
	#N_ARC_CORRECTION
 25

	)

364 c⁄° 
	gdr›£gmíts
=5;

370 
	#SDCARDDETECTINVERTED


	)

372 #ifde‡
ULTIPANEL


373 #unde‡
SDCARDDETECTINVERTED


378 #i‚de‡
POWER_SUPPLY


379 
	#POWER_SUPPLY
 1

	)

382 #i‡(
POWER_SUPPLY
 == 1)

383 
	#PS_ON_AWAKE
 
LOW


	)

384 
	#PS_ON_ASLEEP
 
HIGH


	)

387 #i‡(
POWER_SUPPLY
 == 2)

388 
	#PS_ON_AWAKE
 
HIGH


	)

389 
	#PS_ON_ASLEEP
 
LOW


	)

401 #i‡
deföed
 
SDSUPPORT


402 
	#BLOCK_BUFFER_SIZE
 16

403 #ñ£

	)

404 
	#BLOCK_BUFFER_SIZE
 16

406 

	)

409 
	#MAX_CMD_SIZE
 96

	)

410 
	#BUFSIZE
 4

	)

420 #ifde‡
FWRETRACT


421 
	#MIN_RETRACT
 0.1

422 
	#RETRACT_LENGTH
 3

423 
	#RETRACT_FEEDRATE
 35

424 
	#RETRACT_ZLIFT
 0

425 
	#RETRACT_RECOVER_LENGTH
 0

426 
	#RETRACT_RECOVER_FEEDRATE
 8

428 

	)

430 #ifde‡
ULTIPANEL


431 
	#FILAMENTCHANGEENABLE


	)

432 #ifde‡
FILAMENTCHANGEENABLE


433 
	#FILAMENTCHANGE_XPOS
 3

	)

434 
	#FILAMENTCHANGE_YPOS
 3

	)

435 
	#FILAMENTCHANGE_ZADD
 10

	)

436 
	#FILAMENTCHANGE_FIRSTRETRACT
 -2

	)

437 
	#FILAMENTCHANGE_FINALRETRACT
 -100

	)

441 #ifde‡
FILAMENTCHANGEENABLE


442 #ifde‡
EXTRUDER_RUNOUT_PREVENT


443 #îr‹ 
EXTRUDER_RUNOUT_PREVENT
 
cuºíéy
 
öcom∑tibÀ
 
wôh
 
FILAMENTCHANGE


450 #i‡
EXTRUDERS
 > 1 && 
deföed
 
TEMP_SENSOR_1_AS_REDUNDANT


454 #i‡
EXTRUDERS
 > 1 && 
deföed
 
HEATERS_PARALLEL


458 #i‡
TEMP_SENSOR_0
 > 0

459 
	#THERMISTORHEATER_0
 
TEMP_SENSOR_0


	)

460 
	#HEATER_0_USES_THERMISTOR


	)

462 #i‡
TEMP_SENSOR_1
 > 0

463 
	#THERMISTORHEATER_1
 
TEMP_SENSOR_1


	)

464 
	#HEATER_1_USES_THERMISTOR


	)

466 #i‡
TEMP_SENSOR_2
 > 0

467 
	#THERMISTORHEATER_2
 
TEMP_SENSOR_2


	)

468 
	#HEATER_2_USES_THERMISTOR


	)

470 #i‡
TEMP_SENSOR_BED
 > 0

471 
	#THERMISTORBED
 
TEMP_SENSOR_BED


	)

472 
	#BED_USES_THERMISTOR


	)

474 #i‡
TEMP_SENSOR_0
 == -1

475 
	#HEATER_0_USES_AD595


	)

477 #i‡
TEMP_SENSOR_1
 == -1

478 
	#HEATER_1_USES_AD595


	)

480 #i‡
TEMP_SENSOR_2
 == -1

481 
	#HEATER_2_USES_AD595


	)

483 #i‡
TEMP_SENSOR_BED
 == -1

484 
	#BED_USES_AD595


	)

486 #i‡
TEMP_SENSOR_0
 == -2

487 
	#HEATER_0_USES_MAX6675


	)

489 #i‡
TEMP_SENSOR_0
 == 0

490 #unde‡
HEATER_0_MINTEMP


491 #unde‡
HEATER_0_MAXTEMP


493 #i‡
TEMP_SENSOR_1
 == 0

494 #unde‡
HEATER_1_MINTEMP


495 #unde‡
HEATER_1_MAXTEMP


497 #i‡
TEMP_SENSOR_2
 == 0

498 #unde‡
HEATER_2_MINTEMP


499 #unde‡
HEATER_2_MAXTEMP


501 #i‡
TEMP_SENSOR_BED
 == 0

502 #unde‡
BED_MINTEMP


503 #unde‡
BED_MAXTEMP


	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/example_configurations/delta/Configuration.h

1 #i‚de‡
CONFIGURATION_H


2 
	#CONFIGURATION_H


	)

4 
	~"bﬂrds.h
"

20 
	#STRING_VERSION_CONFIG_H
 
__DATE__
 " " 
__TIME__


21 
	#STRING_CONFIG_H_AUTHOR
 "(none, default config)"

22 

	)

26 
	#SERIAL_PORT
 0

	)

29 
	#BAUDRATE
 250000

	)

36 #i‚de‡
MOTHERBOARD


37 
	#MOTHERBOARD
 
BOARD_RAMPS_13_EFB


	)

48 
	#EXTRUDERS
 1

	)

54 
	#POWER_SUPPLY
 1

	)

63 
	#DELTA


	)

68 
	#DELTA_SEGMENTS_PER_SECOND
 200

	)

73 
	#DELTA_DIAGONAL_ROD
 250.0

74 

	)

76 
	#DELTA_SMOOTH_ROD_OFFSET
 175.0

77 

	)

79 
	#DELTA_EFFECTOR_OFFSET
 33.0

80 

	)

82 
	#DELTA_CARRIAGE_OFFSET
 18.0

83 

	)

85 
	#DELTA_RADIUS
 (
DELTA_SMOOTH_ROD_OFFSET
-
DELTA_EFFECTOR_OFFSET
-
DELTA_CARRIAGE_OFFSET
)

	)

125 
	#TEMP_SENSOR_0
 -1

	)

126 
	#TEMP_SENSOR_1
 -1

	)

127 
	#TEMP_SENSOR_2
 0

	)

128 
	#TEMP_SENSOR_BED
 0

	)

132 
	#MAX_REDUNDANT_TEMP_SENSOR_DIFF
 10

	)

135 
	#TEMP_RESIDENCY_TIME
 10

136 
	#TEMP_HYSTERESIS
 3

137 
	#TEMP_WINDOW
 1

138 

	)

142 
	#HEATER_0_MINTEMP
 5

	)

143 
	#HEATER_1_MINTEMP
 5

	)

144 
	#HEATER_2_MINTEMP
 5

	)

145 
	#BED_MINTEMP
 5

	)

150 
	#HEATER_0_MAXTEMP
 275

	)

151 
	#HEATER_1_MAXTEMP
 275

	)

152 
	#HEATER_2_MAXTEMP
 275

	)

153 
	#BED_MAXTEMP
 150

	)

166 
	#PIDTEMP


	)

167 
	#BANG_MAX
 255

168 
	#PID_MAX
 255

169 #ifde‡
PIDTEMP


	)

172 
	#PID_FUNCTIONAL_RANGE
 10

174 
	#PID_INTEGRAL_DRIVE_MAX
 255

175 
	#K1
 0.95

176 
	#PID_dT
 ((
OVERSAMPLENR
 * 10.0)/(
F_CPU
 / 64.0 / 256.0))

177 

	)

180 
	#DEFAULT_Kp
 22.2

	)

181 
	#DEFAULT_Ki
 1.08

	)

182 
	#DEFAULT_Kd
 114

	)

213 
	#MAX_BED_POWER
 255

214 

	)

215 #ifde‡
PIDTEMPBED


218 
	#DEFAULT_bedKp
 10.00

	)

219 
	#DEFAULT_bedKi
 .023

	)

220 
	#DEFAULT_bedKd
 305.4

	)

235 
	#PREVENT_DANGEROUS_EXTRUDE


	)

237 
	#PREVENT_LENGTHY_EXTRUDE


	)

239 
	#EXTRUDE_MINTEMP
 170

	)

240 
	#EXTRUDE_MAXLENGTH
 (
X_MAX_LENGTH
+
Y_MAX_LENGTH
)

241 

	)

288 
	#ENDSTOPPULLUPS


289 

	)

290 #i‚de‡
ENDSTOPPULLUPS


300 #ifde‡
ENDSTOPPULLUPS


301 
	#ENDSTOPPULLUP_XMAX


	)

302 
	#ENDSTOPPULLUP_YMAX


	)

303 
	#ENDSTOPPULLUP_ZMAX


	)

304 
	#ENDSTOPPULLUP_XMIN


	)

305 
	#ENDSTOPPULLUP_YMIN


	)

306 
	#ENDSTOPPULLUP_ZMIN


	)

310 c⁄° 
boﬁ
 
	gX_MIN_ENDSTOP_INVERTING
 = 
åue
;

311 c⁄° 
boﬁ
 
	gY_MIN_ENDSTOP_INVERTING
 = 
åue
;

312 c⁄° 
boﬁ
 
	gZ_MIN_ENDSTOP_INVERTING
 = 
åue
;

313 c⁄° 
boﬁ
 
	gX_MAX_ENDSTOP_INVERTING
 = 
åue
;

314 c⁄° 
boﬁ
 
	gY_MAX_ENDSTOP_INVERTING
 = 
åue
;

315 c⁄° 
boﬁ
 
	gZ_MAX_ENDSTOP_INVERTING
 = 
åue
;

318 
	#DISABLE_MIN_ENDSTOPS


	)

320 #i‡
deföed
(
COREXY
Ë&& !deföed(
DISABLE_MAX_ENDSTOPS
)

321 
	#DISABLE_MAX_ENDSTOPS


	)

325 
	#X_ENABLE_ON
 0

	)

326 
	#Y_ENABLE_ON
 0

	)

327 
	#Z_ENABLE_ON
 0

	)

328 
	#E_ENABLE_ON
 0

329 

	)

331 
	#DISABLE_X
 
Ál£


	)

332 
	#DISABLE_Y
 
Ál£


	)

333 
	#DISABLE_Z
 
Ál£


	)

334 
	#DISABLE_E
 
Ál£


335 
	#DISABLE_INACTIVE_EXTRUDER
 
åue


336 

	)

337 
	#INVERT_X_DIR
 
Ál£


338 
	#INVERT_Y_DIR
 
Ál£


	)

339 
	#INVERT_Z_DIR
 
Ál£


	)

341 
	#INVERT_E0_DIR
 
Ál£


342 
	#INVERT_E1_DIR
 
Ál£


343 
	#INVERT_E2_DIR
 
Ál£


344 

	)

348 
	#X_HOME_DIR
 1

	)

349 
	#Y_HOME_DIR
 1

	)

350 
	#Z_HOME_DIR
 1

	)

352 
	#mö_so·w¨e_íd°›s
 
åue


353 
	#max_so·w¨e_íd°›s
 
åue


354 

	)

356 
	#X_MAX_POS
 90

	)

357 
	#X_MIN_POS
 -90

	)

358 
	#Y_MAX_POS
 90

	)

359 
	#Y_MIN_POS
 -90

	)

360 
	#Z_MAX_POS
 
MANUAL_Z_HOME_POS


	)

361 
	#Z_MIN_POS
 0

	)

363 
	#X_MAX_LENGTH
 (
X_MAX_POS
 - 
X_MIN_POS
)

	)

364 
	#Y_MAX_LENGTH
 (
Y_MAX_POS
 - 
Y_MIN_POS
)

	)

365 
	#Z_MAX_LENGTH
 (
Z_MAX_POS
 - 
Z_MIN_POS
)

	)

369 
	#Z_PROBE_REPEATABILITY_TEST


370 

	)

371 #ifde‡
ENABLE_AUTO_BED_LEVELING


385 
	#AUTO_BED_LEVELING_GRID


	)

390 #ifde‡
AUTO_BED_LEVELING_GRID


393 
	#LEFT_PROBE_BED_POSITION
 15

	)

394 
	#RIGHT_PROBE_BED_POSITION
 170

	)

395 
	#BACK_PROBE_BED_POSITION
 180

	)

396 
	#FRONT_PROBE_BED_POSITION
 20

	)

400 
	#AUTO_BED_LEVELING_GRID_POINTS
 2

	)

407 
	#ABL_PROBE_PT_1_X
 15

	)

408 
	#ABL_PROBE_PT_1_Y
 180

	)

409 
	#ABL_PROBE_PT_2_X
 15

	)

410 
	#ABL_PROBE_PT_2_Y
 20

	)

411 
	#ABL_PROBE_PT_3_X
 170

	)

412 
	#ABL_PROBE_PT_3_Y
 20

	)

418 
	#X_PROBE_OFFSET_FROM_EXTRUDER
 -25

	)

419 
	#Y_PROBE_OFFSET_FROM_EXTRUDER
 -29

	)

420 
	#Z_PROBE_OFFSET_FROM_EXTRUDER
 -12.35

	)

422 
	#Z_RAISE_BEFORE_HOMING
 4

424 

	)

425 
	#XY_TRAVEL_SPEED
 8000

426 

	)

427 
	#Z_RAISE_BEFORE_PROBING
 15

428 
	#Z_RAISE_BETWEEN_PROBINGS
 5

429 

	)

443 
	#Z_SAFE_HOMING


449 

	)

450 #ifde‡
Z_SAFE_HOMING


452 
	#Z_SAFE_HOMING_X_POINT
 (
X_MAX_LENGTH
/2)

453 
	#Z_SAFE_HOMING_Y_POINT
 (
Y_MAX_LENGTH
/2)

454 

	)

466 
	#MANUAL_HOME_POSITIONS


468 
	#MANUAL_X_HOME_POS
 0

	)

469 
	#MANUAL_Y_HOME_POS
 0

	)

470 
	#MANUAL_Z_HOME_POS
 250

471 

	)

473 
	#NUM_AXIS
 4

474 

	)

476 
	#HOMING_FEEDRATE
 {200*60, 200*60, 200*60, 0}

477 

	)

480 
	#DEFAULT_AXIS_STEPS_PER_UNIT
 {80, 80, 80, 760*1.1}

481 
	#DEFAULT_MAX_FEEDRATE
 {500, 500, 500, 25}

482 
	#DEFAULT_MAX_ACCELERATION
 {9000,9000,9000,10000}

483 

	)

484 
	#DEFAULT_ACCELERATION
 3000

485 
	#DEFAULT_RETRACT_ACCELERATION
 3000

486 

	)

494 
	#DEFAULT_XYJERK
 20.0

495 
	#DEFAULT_ZJERK
 20.0

496 
	#DEFAULT_EJERK
 5.0

497 

	)

503 
	#CUSTOM_M_CODES


	)

504 #ifde‡
CUSTOM_M_CODES


505 
	#CUSTOM_M_CODE_SET_Z_PROBE_OFFSET
 851

	)

506 
	#Z_PROBE_OFFSET_RANGE_MIN
 -15

	)

507 
	#Z_PROBE_OFFSET_RANGE_MAX
 -5

	)

523 
	#PLA_PREHEAT_HOTEND_TEMP
 180

	)

524 
	#PLA_PREHEAT_HPB_TEMP
 70

	)

525 
	#PLA_PREHEAT_FAN_SPEED
 255

526 

	)

527 
	#ABS_PREHEAT_HOTEND_TEMP
 240

	)

528 
	#ABS_PREHEAT_HPB_TEMP
 100

	)

529 
	#ABS_PREHEAT_FAN_SPEED
 255

530 

	)

573 #i‡
deföed
 (
MAKRPANEL
)

574 
	#DOGLCD


	)

575 
	#SDSUPPORT


	)

576 
	#ULTIPANEL


	)

577 
	#NEWPANEL


	)

578 
	#DEFAULT_LCD_CONTRAST
 17

	)

581 #i‡
deföed
 (
REPRAP_DISCOUNT_FULL_GRAPHIC_SMART_CONTROLLER
)

582 
	#DOGLCD


	)

583 
	#U8GLIB_ST7920


	)

584 
	#REPRAP_DISCOUNT_SMART_CONTROLLER


	)

587 #i‡
deföed
(
ULTIMAKERCONTROLLER
Ë|| deföed(
REPRAP_DISCOUNT_SMART_CONTROLLER
Ë|| deföed(
G3D_PANEL
)

588 
	#ULTIPANEL


	)

589 
	#NEWPANEL


	)

592 #i‡
deföed
(
REPRAPWORLD_KEYPAD
)

593 
	#NEWPANEL


	)

594 
	#ULTIPANEL


	)

596 #i‡
deföed
(
RA_CONTROL_PANEL
)

597 
	#ULTIPANEL


	)

598 
	#NEWPANEL


	)

599 
	#LCD_I2C_TYPE_PCA8574


	)

600 
	#LCD_I2C_ADDRESS
 0x27

602 

	)

606 #ifde‡
LCD_I2C_SAINSMART_YWROBOT


609 
	#LCD_I2C_TYPE_PCF8575


	)

610 
	#LCD_I2C_ADDRESS
 0x27

611 
	#NEWPANEL


	)

612 
	#ULTIPANEL


	)

617 #ifde‡
LCD_I2C_PANELOLU2


623 
	#LCD_I2C_TYPE_MCP23017


	)

624 
	#LCD_I2C_ADDRESS
 0x20

625 
	#LCD_USE_I2C_BUZZER


626 
	#NEWPANEL


	)

627 
	#ULTIPANEL


	)

629 #i‚de‡
ENCODER_PULSES_PER_STEP


630 
	#ENCODER_PULSES_PER_STEP
 4

	)

633 #i‚de‡
ENCODER_STEPS_PER_MENU_ITEM


634 
	#ENCODER_STEPS_PER_MENU_ITEM
 1

	)

638 #ifde‡
LCD_USE_I2C_BUZZER


639 
	#LCD_FEEDBACK_FREQUENCY_HZ
 1000

	)

640 
	#LCD_FEEDBACK_FREQUENCY_DURATION_MS
 100

	)

647 #ifde‡
LCD_I2C_VIKI


652 
	#LCD_I2C_TYPE_MCP23017


	)

653 
	#LCD_I2C_ADDRESS
 0x20

654 
	#LCD_USE_I2C_BUZZER


655 
	#NEWPANEL


	)

656 
	#ULTIPANEL


	)

664 #ifde‡
SR_LCD


665 
	#SR_LCD_2W_NL


668 

	)

670 #ifde‡
ULTIPANEL


672 
	#SDSUPPORT


	)

673 
	#ULTRA_LCD


	)

674 #ifde‡
DOGLCD


675 
	#LCD_WIDTH
 20

	)

676 
	#LCD_HEIGHT
 5

	)

678 
	#LCD_WIDTH
 20

	)

679 
	#LCD_HEIGHT
 4

	)

682 #ifde‡
ULTRA_LCD


683 #ifde‡
DOGLCD


684 
	#LCD_WIDTH
 20

	)

685 
	#LCD_HEIGHT
 5

	)

687 
	#LCD_WIDTH
 16

	)

688 
	#LCD_HEIGHT
 2

	)

694 #ifde‡
DOGLCD


695 #i‚de‡
DEFAULT_LCD_CONTRAST


696 
	#DEFAULT_LCD_CONTRAST
 32

	)

717 
	#SOFT_PWM_SCALE
 0

	)

765 
	#FILAMENT_SENSOR


	)

766 
	#FILAMENT_SENSOR_EXTRUDER_NUM
 0

767 
	#MEASUREMENT_DELAY_CM
 14

768 

	)

769 
	#DEFAULT_NOMINAL_FILAMENT_DIA
 3.0

770 
	#MEASURED_UPPER_LIMIT
 3.30

771 
	#MEASURED_LOWER_LIMIT
 1.90

772 
	#MAX_MEASUREMENT_DELAY
 20

773 

	)

775 
	#DEFAULT_MEASURED_FILAMENT_DIA
 
DEFAULT_NOMINAL_FILAMENT_DIA


776 

	)

783 
	~"C⁄figuøti⁄_adv.h
"

784 
	~"thîmi°‹èbÀs.h
"

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/example_configurations/delta/Configuration_adv.h

1 #i‚de‡
CONFIGURATION_ADV_H


2 
	#CONFIGURATION_ADV_H


	)

8 #ifde‡
BED_LIMIT_SWITCHING


9 
	#BED_HYSTERESIS
 2

11 
	#BED_CHECK_INTERVAL
 5000

12 

	)

21 #ifde‡
PIDTEMP


24 
	#PID_ADD_EXTRUSION_RATE


	)

25 #ifde‡
PID_ADD_EXTRUSION_RATE


26 
	#DEFAULT_Kc
 (1)

29 

	)

38 
	#AUTOTEMP


	)

39 #ifde‡
AUTOTEMP


40 
	#AUTOTEMP_OLDWEIGHT
 0.98

	)

50 
	#EXTRUDER_RUNOUT_MINTEMP
 190

	)

51 
	#EXTRUDER_RUNOUT_SECONDS
 30.

	)

52 
	#EXTRUDER_RUNOUT_ESTEPS
 14.

53 
	#EXTRUDER_RUNOUT_SPEED
 1500.

54 
	#EXTRUDER_RUNOUT_EXTRUDE
 100

	)

58 
	#TEMP_SENSOR_AD595_OFFSET
 0.0

	)

59 
	#TEMP_SENSOR_AD595_GAIN
 1.0

	)

64 
	#CONTROLLERFAN_PIN
 -1

65 
	#CONTROLLERFAN_SECS
 60

66 
	#CONTROLLERFAN_SPEED
 255

67 

	)

78 
	#EXTRUDER_0_AUTO_FAN_PIN
 -1

	)

79 
	#EXTRUDER_1_AUTO_FAN_PIN
 -1

	)

80 
	#EXTRUDER_2_AUTO_FAN_PIN
 -1

	)

81 
	#EXTRUDER_AUTO_FAN_TEMPERATURE
 50

	)

82 
	#EXTRUDER_AUTO_FAN_SPEED
 255

83 

	)

89 
	#ENDSTOPS_ONLY_FOR_HOMING


90 

	)

94 #ifde‡
MANUAL_HOME_POSITIONS


95 
	#X_HOME_POS
 
MANUAL_X_HOME_POS


	)

96 
	#Y_HOME_POS
 
MANUAL_Y_HOME_POS


	)

97 
	#Z_HOME_POS
 
MANUAL_Z_HOME_POS


	)

100 #i‡
X_HOME_DIR
 == -1

101 #ifde‡
BED_CENTER_AT_0_0


102 
	#X_HOME_POS
 
X_MAX_LENGTH
 * -0.5

	)

104 
	#X_HOME_POS
 
X_MIN_POS


	)

107 #ifde‡
BED_CENTER_AT_0_0


108 
	#X_HOME_POS
 
X_MAX_LENGTH
 * 0.5

	)

110 
	#X_HOME_POS
 
X_MAX_POS


	)

115 #i‡
Y_HOME_DIR
 == -1

116 #ifde‡
BED_CENTER_AT_0_0


117 
	#Y_HOME_POS
 
Y_MAX_LENGTH
 * -0.5

	)

119 
	#Y_HOME_POS
 
Y_MIN_POS


	)

122 #ifde‡
BED_CENTER_AT_0_0


123 
	#Y_HOME_POS
 
Y_MAX_LENGTH
 * 0.5

	)

125 
	#Y_HOME_POS
 
Y_MAX_POS


	)

130 #i‡
Z_HOME_DIR
 == -1

131 
	#Z_HOME_POS
 
Z_MIN_POS


	)

133 
	#Z_HOME_POS
 
Z_MAX_POS


	)

148 #ifde‡
Z_DUAL_STEPPER_DRIVERS


149 #unde‡
EXTRUDERS


150 
	#EXTRUDERS
 1

	)

157 
	#INVERT_Y2_VS_Y_DIR
 
åue


	)

159 #ifde‡
Y_DUAL_STEPPER_DRIVERS


160 #unde‡
EXTRUDERS


161 
	#EXTRUDERS
 1

	)

164 #i‡
deföed
 (
Z_DUAL_STEPPER_DRIVERS
Ë&& deföed (
Y_DUAL_STEPPER_DRIVERS
)

173 #ifde‡
DUAL_X_CARRIAGE


177 
	#X2_MIN_POS
 80

178 
	#X2_MAX_POS
 353

179 
	#X2_HOME_DIR
 1

180 
	#X2_HOME_POS
 
X2_MAX_POS


185 

	)

187 
	#X2_ENABLE_PIN
 29

	)

188 
	#X2_STEP_PIN
 25

	)

189 
	#X2_DIR_PIN
 23

	)

201 
	#DEFAULT_DUAL_X_CARRIAGE_MODE
 0

	)

204 
	#EXTRUDER1_Z_OFFSET
 0.0

205 

	)

207 
	#TOOLCHANGE_PARK_ZLIFT
 0.2

208 
	#TOOLCHANGE_UNPARK_ZLIFT
 1

209 

	)

211 
	#DEFAULT_DUPLICATION_X_OFFSET
 100

	)

216 
	#X_HOME_RETRACT_MM
 5

	)

217 
	#Y_HOME_RETRACT_MM
 5

	)

218 
	#Z_HOME_RETRACT_MM
 5

219 

	)

222 
	#AXIS_RELATIVE_MODES
 {
Ál£
, fÆ£, fÆ£, fÆ£}

	)

224 
	#MAX_STEP_FREQUENCY
 40000

225 

	)

227 
	#INVERT_X_STEP_PIN
 
Ál£


	)

228 
	#INVERT_Y_STEP_PIN
 
Ál£


	)

229 
	#INVERT_Z_STEP_PIN
 
Ál£


	)

230 
	#INVERT_E_STEP_PIN
 
Ál£


	)

233 
	#DEFAULT_STEPPER_DEACTIVE_TIME
 60

	)

235 
	#DEFAULT_MINIMUMFEEDRATE
 0.0

236 
	#DEFAULT_MINTRAVELFEEDRATE
 0.0

	)

239 #ifde‡
ULTIPANEL


240 
	#MANUAL_FEEDRATE
 {50*60, 50*60, 4*60, 60}

242 

	)

244 
	#DEFAULT_MINSEGMENTTIME
 20000

	)

258 
	#MINIMUM_PLANNER_SPEED
 0.05

259 

	)

261 
	#MICROSTEP1
 
LOW
,
	)
LOW

262 
	#MICROSTEP2
 
HIGH
,
LOW


	)

263 
	#MICROSTEP4
 
LOW
,
HIGH


	)

264 
	#MICROSTEP8
 
HIGH
,
	)
HIGH

265 
	#MICROSTEP16
 
HIGH
,
	)
HIGH

268 
	#MICROSTEP_MODES
 {16,16,16,16,16}

269 

	)

271 
	#DIGIPOT_MOTOR_CURRENT
 {135,135,135,135,135}

272 

	)

276 
	#DIGIPOT_I2C_NUM_CHANNELS
 8

	)

278 
	#DIGIPOT_I2C_MOTOR_CURRENTS
 {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}

	)

285 
	#CHDK_DELAY
 50

286 

	)

287 
	#SD_FINISHED_STEPPERRELEASE
 
åue


288 
	#SD_FINISHED_RELEASECOMMAND
 "M84 X Y Z E"

289 

	)

290 
	#SDCARD_RATHERRECENTFIRST


294 

	)

298 #ifde‡
USE_WATCHDOG


312 #ifde‡
BABYSTEPPING


313 
	#BABYSTEP_XY


314 
	#BABYSTEP_INVERT_Z
 
Ál£


315 
	#BABYSTEP_Z_MULTIPLICATOR
 2

316 

	)

317 #ifde‡
COREXY


318 #îr‹ 
BABYSTEPPING
 
nŸ
 
im∂emíãd
 
COREXY
 
yë
.

321 #ifde‡
DELTA


322 #ifde‡
BABYSTEP_XY


323 #îr‹ 
BABYSTEPPING
 
⁄ly
 
im∂emíãd
 
Z
 
axis
 
⁄
 
dñèbŸs
.

337 #ifde‡
ADVANCE


338 
	#EXTRUDER_ADVANCE_K
 .0

	)

340 
	#D_FILAMENT
 2.85

	)

341 
	#STEPS_MM_E
 836

	)

342 
	#EXTRUSION_AREA
 (0.25 * 
D_FILAMENT
 * D_FILAMENT * 3.14159)

	)

343 
	#STEPS_PER_CUBIC_MM_E
 (
axis_°ïs_≥r_unô
[
E_AXIS
]/ 
EXTRUSION_AREA
)

	)

348 
	#MM_PER_ARC_SEGMENT
 1

	)

349 
	#N_ARC_CORRECTION
 25

	)

351 c⁄° 
	gdr›£gmíts
=5;

357 
	#SDCARDDETECTINVERTED


	)

359 #ifde‡
ULTIPANEL


360 #unde‡
SDCARDDETECTINVERTED


365 #i‚de‡
POWER_SUPPLY


366 
	#POWER_SUPPLY
 1

	)

369 #i‡(
POWER_SUPPLY
 == 1)

370 
	#PS_ON_AWAKE
 
LOW


	)

371 
	#PS_ON_ASLEEP
 
HIGH


	)

374 #i‡(
POWER_SUPPLY
 == 2)

375 
	#PS_ON_AWAKE
 
HIGH


	)

376 
	#PS_ON_ASLEEP
 
LOW


	)

388 #i‡
deföed
 
SDSUPPORT


389 
	#BLOCK_BUFFER_SIZE
 16

390 #ñ£

	)

391 
	#BLOCK_BUFFER_SIZE
 16

393 

	)

396 
	#MAX_CMD_SIZE
 96

	)

397 
	#BUFSIZE
 4

	)

407 #ifde‡
FWRETRACT


408 
	#MIN_RETRACT
 0.1

409 
	#RETRACT_LENGTH
 3

410 
	#RETRACT_LENGTH_SWAP
 13

411 
	#RETRACT_FEEDRATE
 45

412 
	#RETRACT_ZLIFT
 0

413 
	#RETRACT_RECOVER_LENGTH
 0

414 
	#RETRACT_RECOVER_LENGTH_SWAP
 0

415 
	#RETRACT_RECOVER_FEEDRATE
 8

417 

	)

419 #ifde‡
ULTIPANEL


420 
	#FILAMENTCHANGEENABLE


	)

421 #ifde‡
FILAMENTCHANGEENABLE


422 
	#FILAMENTCHANGE_XPOS
 3

	)

423 
	#FILAMENTCHANGE_YPOS
 3

	)

424 
	#FILAMENTCHANGE_ZADD
 10

	)

425 
	#FILAMENTCHANGE_FIRSTRETRACT
 -2

	)

426 
	#FILAMENTCHANGE_FINALRETRACT
 -100

	)

430 #ifde‡
FILAMENTCHANGEENABLE


431 #ifde‡
EXTRUDER_RUNOUT_PREVENT


432 #îr‹ 
EXTRUDER_RUNOUT_PREVENT
 
cuºíéy
 
öcom∑tibÀ
 
wôh
 
FILAMENTCHANGE


439 #i‡
EXTRUDERS
 > 1 && 
deföed
 
TEMP_SENSOR_1_AS_REDUNDANT


443 #i‡
EXTRUDERS
 > 1 && 
deföed
 
HEATERS_PARALLEL


447 #i‡
TEMP_SENSOR_0
 > 0

448 
	#THERMISTORHEATER_0
 
TEMP_SENSOR_0


	)

449 
	#HEATER_0_USES_THERMISTOR


	)

451 #i‡
TEMP_SENSOR_1
 > 0

452 
	#THERMISTORHEATER_1
 
TEMP_SENSOR_1


	)

453 
	#HEATER_1_USES_THERMISTOR


	)

455 #i‡
TEMP_SENSOR_2
 > 0

456 
	#THERMISTORHEATER_2
 
TEMP_SENSOR_2


	)

457 
	#HEATER_2_USES_THERMISTOR


	)

459 #i‡
TEMP_SENSOR_BED
 > 0

460 
	#THERMISTORBED
 
TEMP_SENSOR_BED


	)

461 
	#BED_USES_THERMISTOR


	)

463 #i‡
TEMP_SENSOR_0
 == -1

464 
	#HEATER_0_USES_AD595


	)

466 #i‡
TEMP_SENSOR_1
 == -1

467 
	#HEATER_1_USES_AD595


	)

469 #i‡
TEMP_SENSOR_2
 == -1

470 
	#HEATER_2_USES_AD595


	)

472 #i‡
TEMP_SENSOR_BED
 == -1

473 
	#BED_USES_AD595


	)

475 #i‡
TEMP_SENSOR_0
 == -2

476 
	#HEATER_0_USES_MAX6675


	)

478 #i‡
TEMP_SENSOR_0
 == 0

479 #unde‡
HEATER_0_MINTEMP


480 #unde‡
HEATER_0_MAXTEMP


482 #i‡
TEMP_SENSOR_1
 == 0

483 #unde‡
HEATER_1_MINTEMP


484 #unde‡
HEATER_1_MAXTEMP


486 #i‡
TEMP_SENSOR_2
 == 0

487 #unde‡
HEATER_2_MINTEMP


488 #unde‡
HEATER_2_MAXTEMP


490 #i‡
TEMP_SENSOR_BED
 == 0

491 #unde‡
BED_MINTEMP


492 #unde‡
BED_MAXTEMP


	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/example_configurations/makibox/Configuration.h

1 #i‚de‡
CONFIGURATION_H


2 
	#CONFIGURATION_H


	)

4 
	~"bﬂrds.h
"

20 
	#STRING_VERSION_CONFIG_H
 
__DATE__
 " " 
__TIME__


21 
	#STRING_CONFIG_H_AUTHOR
 "(none, default config)"

22 

	)

26 
	#SERIAL_PORT
 0

	)

30 
	#BAUDRATE
 250000

	)

37 #i‚de‡
MOTHERBOARD


38 
	#MOTHERBOARD
 
BOARD_5DPRINT


	)

49 
	#EXTRUDERS
 1

	)

55 
	#POWER_SUPPLY
 1

	)

97 
	#TEMP_SENSOR_0
 1

	)

98 
	#TEMP_SENSOR_1
 0

	)

99 
	#TEMP_SENSOR_2
 0

	)

100 
	#TEMP_SENSOR_BED
 12

	)

104 
	#MAX_REDUNDANT_TEMP_SENSOR_DIFF
 10

	)

107 
	#TEMP_RESIDENCY_TIME
 10

108 
	#TEMP_HYSTERESIS
 3

109 
	#TEMP_WINDOW
 1

110 

	)

114 
	#HEATER_0_MINTEMP
 5

	)

115 
	#HEATER_1_MINTEMP
 5

	)

116 
	#HEATER_2_MINTEMP
 5

	)

117 
	#BED_MINTEMP
 5

	)

122 
	#HEATER_0_MAXTEMP
 275

	)

123 
	#HEATER_1_MAXTEMP
 275

	)

124 
	#HEATER_2_MAXTEMP
 275

	)

125 
	#BED_MAXTEMP
 150

	)

138 
	#PIDTEMP


	)

139 
	#BANG_MAX
 255

140 
	#PID_MAX
 255

141 #ifde‡
PIDTEMP


	)

144 
	#PID_FUNCTIONAL_RANGE
 10

146 
	#PID_INTEGRAL_DRIVE_MAX
 255

147 
	#K1
 0.95

148 
	#PID_dT
 ((
OVERSAMPLENR
 * 8.0)/(
F_CPU
 / 64.0 / 256.0))

149 

	)

152 
	#DEFAULT_Kp
 22.2

	)

153 
	#DEFAULT_Ki
 1.08

	)

154 
	#DEFAULT_Kd
 114

	)

185 
	#MAX_BED_POWER
 175

189 

	)

190 #ifde‡
PIDTEMPBED


193 
	#DEFAULT_bedKp
 10.00

	)

194 
	#DEFAULT_bedKi
 .023

	)

195 
	#DEFAULT_bedKd
 305.4

	)

210 
	#PREVENT_DANGEROUS_EXTRUDE


	)

212 
	#PREVENT_LENGTHY_EXTRUDE


	)

214 
	#EXTRUDE_MINTEMP
 170

	)

215 
	#EXTRUDE_MAXLENGTH
 (
X_MAX_LENGTH
+
Y_MAX_LENGTH
)

216 

	)

225 
	#ENDSTOPPULLUPS


226 

	)

227 #i‚de‡
ENDSTOPPULLUPS


237 #ifde‡
ENDSTOPPULLUPS


238 
	#ENDSTOPPULLUP_XMAX


	)

239 
	#ENDSTOPPULLUP_YMAX


	)

240 
	#ENDSTOPPULLUP_ZMAX


	)

241 
	#ENDSTOPPULLUP_XMIN


	)

242 
	#ENDSTOPPULLUP_YMIN


	)

243 
	#ENDSTOPPULLUP_ZMIN


	)

247 c⁄° 
boﬁ
 
	gX_MIN_ENDSTOP_INVERTING
 = 
Ál£
;

248 c⁄° 
boﬁ
 
	gY_MIN_ENDSTOP_INVERTING
 = 
Ál£
;

249 c⁄° 
boﬁ
 
	gZ_MIN_ENDSTOP_INVERTING
 = 
Ál£
;

250 c⁄° 
boﬁ
 
	gX_MAX_ENDSTOP_INVERTING
 = 
åue
;

251 c⁄° 
boﬁ
 
	gY_MAX_ENDSTOP_INVERTING
 = 
åue
;

252 c⁄° 
boﬁ
 
	gZ_MAX_ENDSTOP_INVERTING
 = 
åue
;

257 #i‡
deföed
(
COREXY
Ë&& !deföed(
DISABLE_MAX_ENDSTOPS
)

258 
	#DISABLE_MAX_ENDSTOPS


	)

262 
	#X_ENABLE_ON
 0

	)

263 
	#Y_ENABLE_ON
 0

	)

264 
	#Z_ENABLE_ON
 0

	)

265 
	#E_ENABLE_ON
 0

266 

	)

268 
	#DISABLE_X
 
Ál£


	)

269 
	#DISABLE_Y
 
Ál£


	)

270 
	#DISABLE_Z
 
Ál£


	)

271 
	#DISABLE_E
 
Ál£


272 

	)

273 
	#INVERT_X_DIR
 
Ál£


274 
	#INVERT_Y_DIR
 
Ál£


275 
	#INVERT_Z_DIR
 
Ál£


276 
	#INVERT_E0_DIR
 
åue


277 
	#INVERT_E1_DIR
 
Ál£


278 
	#INVERT_E2_DIR
 
Ál£


279 

	)

282 
	#X_HOME_DIR
 -1

	)

283 
	#Y_HOME_DIR
 -1

	)

284 
	#Z_HOME_DIR
 -1

	)

286 
	#mö_so·w¨e_íd°›s
 
åue


287 
	#max_so·w¨e_íd°›s
 
åue


288 

	)

290 
	#X_MAX_POS
 110

	)

291 
	#X_MIN_POS
 0

	)

292 
	#Y_MAX_POS
 150

	)

293 
	#Y_MIN_POS
 0

	)

294 
	#Z_MAX_POS
 86

	)

295 
	#Z_MIN_POS
 0

	)

297 
	#X_MAX_LENGTH
 (
X_MAX_POS
 - 
X_MIN_POS
)

	)

298 
	#Y_MAX_LENGTH
 (
Y_MAX_POS
 - 
Y_MIN_POS
)

	)

299 
	#Z_MAX_LENGTH
 (
Z_MAX_POS
 - 
Z_MIN_POS
)

	)

304 #ifde‡
ENABLE_AUTO_BED_LEVELING


318 
	#AUTO_BED_LEVELING_GRID


	)

323 #ifde‡
AUTO_BED_LEVELING_GRID


326 
	#LEFT_PROBE_BED_POSITION
 15

	)

327 
	#RIGHT_PROBE_BED_POSITION
 170

	)

328 
	#BACK_PROBE_BED_POSITION
 180

	)

329 
	#FRONT_PROBE_BED_POSITION
 20

	)

333 
	#AUTO_BED_LEVELING_GRID_POINTS
 2

	)

340 
	#ABL_PROBE_PT_1_X
 15

	)

341 
	#ABL_PROBE_PT_1_Y
 180

	)

342 
	#ABL_PROBE_PT_2_X
 15

	)

343 
	#ABL_PROBE_PT_2_Y
 20

	)

344 
	#ABL_PROBE_PT_3_X
 170

	)

345 
	#ABL_PROBE_PT_3_Y
 20

	)

351 
	#X_PROBE_OFFSET_FROM_EXTRUDER
 -25

	)

352 
	#Y_PROBE_OFFSET_FROM_EXTRUDER
 -29

	)

353 
	#Z_PROBE_OFFSET_FROM_EXTRUDER
 -12.35

	)

355 
	#Z_RAISE_BEFORE_HOMING
 4

357 

	)

358 
	#XY_TRAVEL_SPEED
 8000

359 

	)

360 
	#Z_RAISE_BEFORE_PROBING
 15

361 
	#Z_RAISE_BETWEEN_PROBINGS
 5

362 

	)

374 
	#Z_SAFE_HOMING


380 

	)

381 #ifde‡
Z_SAFE_HOMING


383 
	#Z_SAFE_HOMING_X_POINT
 (
X_MAX_LENGTH
/2)

384 
	#Z_SAFE_HOMING_Y_POINT
 (
Y_MAX_LENGTH
/2)

385 

	)

397 
	#MANUAL_X_HOME_POS
 0

	)

398 
	#MANUAL_Y_HOME_POS
 0

	)

399 
	#MANUAL_Z_HOME_POS
 0

	)

403 
	#NUM_AXIS
 4

404 
	#HOMING_FEEDRATE
 {1500, 1500, 120, 0}

405 

	)

408 
	#DEFAULT_AXIS_STEPS_PER_UNIT
 {400, 400, 400, 163}

409 
	#DEFAULT_MAX_FEEDRATE
 {60, 60, 20, 45}

410 
	#DEFAULT_MAX_ACCELERATION
 {2000,2000,30,10000}

411 

	)

412 
	#DEFAULT_ACCELERATION
 3000

413 
	#DEFAULT_RETRACT_ACCELERATION
 3000

414 

	)

422 
	#DEFAULT_XYJERK
 20.0

423 
	#DEFAULT_ZJERK
 0.4

424 
	#DEFAULT_EJERK
 5.0

425 

	)

431 
	#CUSTOM_M_CODES


	)

432 #ifde‡
CUSTOM_M_CODES


433 
	#CUSTOM_M_CODE_SET_Z_PROBE_OFFSET
 851

	)

434 
	#Z_PROBE_OFFSET_RANGE_MIN
 -15

	)

435 
	#Z_PROBE_OFFSET_RANGE_MAX
 -5

	)

445 
	#EEPROM_SETTINGS


	)

451 
	#PLA_PREHEAT_HOTEND_TEMP
 180

	)

452 
	#PLA_PREHEAT_HPB_TEMP
 70

	)

453 
	#PLA_PREHEAT_FAN_SPEED
 255

454 

	)

455 
	#ABS_PREHEAT_HOTEND_TEMP
 240

	)

456 
	#ABS_PREHEAT_HPB_TEMP
 100

	)

457 
	#ABS_PREHEAT_FAN_SPEED
 255

458 

	)

462 
	#SDSUPPORT


463 
	#SDSLOW


470 

	)

500 #i‡
deföed
 (
MAKRPANEL
)

501 
	#DOGLCD


	)

502 
	#SDSUPPORT


	)

503 
	#ULTIPANEL


	)

504 
	#NEWPANEL


	)

505 
	#DEFAULT_LCD_CONTRAST
 17

	)

508 #i‡
deföed
 (
REPRAP_DISCOUNT_FULL_GRAPHIC_SMART_CONTROLLER
)

509 
	#DOGLCD


	)

510 
	#U8GLIB_ST7920


	)

511 
	#REPRAP_DISCOUNT_SMART_CONTROLLER


	)

514 #i‡
deföed
(
ULTIMAKERCONTROLLER
Ë|| deföed(
REPRAP_DISCOUNT_SMART_CONTROLLER
Ë|| deföed(
G3D_PANEL
)

515 
	#ULTIPANEL


	)

516 
	#NEWPANEL


	)

519 #i‡
deföed
(
REPRAPWORLD_KEYPAD
)

520 
	#NEWPANEL


	)

521 
	#ULTIPANEL


	)

523 #i‡
deföed
(
RA_CONTROL_PANEL
)

524 
	#ULTIPANEL


	)

525 
	#NEWPANEL


	)

526 
	#LCD_I2C_TYPE_PCA8574


	)

527 
	#LCD_I2C_ADDRESS
 0x27

529 

	)

533 #ifde‡
LCD_I2C_SAINSMART_YWROBOT


536 
	#LCD_I2C_TYPE_PCF8575


	)

537 
	#LCD_I2C_ADDRESS
 0x27

538 
	#NEWPANEL


	)

539 
	#ULTIPANEL


	)

544 #ifde‡
LCD_I2C_PANELOLU2


550 
	#LCD_I2C_TYPE_MCP23017


	)

551 
	#LCD_I2C_ADDRESS
 0x20

552 
	#LCD_USE_I2C_BUZZER


553 
	#NEWPANEL


	)

554 
	#ULTIPANEL


	)

556 #i‚de‡
ENCODER_PULSES_PER_STEP


557 
	#ENCODER_PULSES_PER_STEP
 4

	)

560 #i‚de‡
ENCODER_STEPS_PER_MENU_ITEM


561 
	#ENCODER_STEPS_PER_MENU_ITEM
 1

	)

565 #ifde‡
LCD_USE_I2C_BUZZER


566 
	#LCD_FEEDBACK_FREQUENCY_HZ
 1000

	)

567 
	#LCD_FEEDBACK_FREQUENCY_DURATION_MS
 100

	)

574 #ifde‡
LCD_I2C_VIKI


579 
	#LCD_I2C_TYPE_MCP23017


	)

580 
	#LCD_I2C_ADDRESS
 0x20

581 
	#LCD_USE_I2C_BUZZER


582 
	#NEWPANEL


	)

583 
	#ULTIPANEL


	)

591 #ifde‡
SR_LCD


592 
	#SR_LCD_2W_NL


595 

	)

597 #ifde‡
ULTIPANEL


599 
	#SDSUPPORT


	)

600 
	#ULTRA_LCD


	)

601 #ifde‡
DOGLCD


602 
	#LCD_WIDTH
 20

	)

603 
	#LCD_HEIGHT
 5

	)

605 
	#LCD_WIDTH
 20

	)

606 
	#LCD_HEIGHT
 4

	)

609 #ifde‡
ULTRA_LCD


610 #ifde‡
DOGLCD


611 
	#LCD_WIDTH
 20

	)

612 
	#LCD_HEIGHT
 5

	)

614 
	#LCD_WIDTH
 16

	)

615 
	#LCD_HEIGHT
 2

	)

621 #ifde‡
DOGLCD


622 #i‚de‡
DEFAULT_LCD_CONTRAST


623 
	#DEFAULT_LCD_CONTRAST
 32

	)

644 
	#SOFT_PWM_SCALE
 0

	)

679 
	#DIGIPOT_I2C


	)

684 
	~"C⁄figuøti⁄_adv.h
"

685 
	~"thîmi°‹èbÀs.h
"

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/example_configurations/makibox/Configuration_adv.h

1 #i‚de‡
CONFIGURATION_ADV_H


2 
	#CONFIGURATION_ADV_H


	)

8 #ifde‡
BED_LIMIT_SWITCHING


9 
	#BED_HYSTERESIS
 2

11 
	#BED_CHECK_INTERVAL
 5000

12 

	)

21 #ifde‡
PIDTEMP


24 
	#PID_ADD_EXTRUSION_RATE


	)

25 #ifde‡
PID_ADD_EXTRUSION_RATE


26 
	#DEFAULT_Kc
 (1)

29 

	)

38 
	#AUTOTEMP


	)

39 #ifde‡
AUTOTEMP


40 
	#AUTOTEMP_OLDWEIGHT
 0.98

	)

50 
	#EXTRUDER_RUNOUT_MINTEMP
 190

	)

51 
	#EXTRUDER_RUNOUT_SECONDS
 30.

	)

52 
	#EXTRUDER_RUNOUT_ESTEPS
 14.

53 
	#EXTRUDER_RUNOUT_SPEED
 1500.

54 
	#EXTRUDER_RUNOUT_EXTRUDE
 100

	)

58 
	#TEMP_SENSOR_AD595_OFFSET
 0.0

	)

59 
	#TEMP_SENSOR_AD595_GAIN
 1.0

	)

64 
	#CONTROLLERFAN_PIN
 -1

65 
	#CONTROLLERFAN_SECS
 60

66 
	#CONTROLLERFAN_SPEED
 255

67 

	)

78 
	#EXTRUDER_0_AUTO_FAN_PIN
 -1

	)

79 
	#EXTRUDER_1_AUTO_FAN_PIN
 -1

	)

80 
	#EXTRUDER_2_AUTO_FAN_PIN
 -1

	)

81 
	#EXTRUDER_AUTO_FAN_TEMPERATURE
 50

	)

82 
	#EXTRUDER_AUTO_FAN_SPEED
 255

83 

	)

89 
	#ENDSTOPS_ONLY_FOR_HOMING


90 

	)

94 #ifde‡
MANUAL_HOME_POSITIONS


95 
	#X_HOME_POS
 
MANUAL_X_HOME_POS


	)

96 
	#Y_HOME_POS
 
MANUAL_Y_HOME_POS


	)

97 
	#Z_HOME_POS
 
MANUAL_Z_HOME_POS


	)

100 #i‡
X_HOME_DIR
 == -1

101 #ifde‡
BED_CENTER_AT_0_0


102 
	#X_HOME_POS
 
X_MAX_LENGTH
 * -0.5

	)

104 
	#X_HOME_POS
 
X_MIN_POS


	)

107 #ifde‡
BED_CENTER_AT_0_0


108 
	#X_HOME_POS
 
X_MAX_LENGTH
 * 0.5

	)

110 
	#X_HOME_POS
 
X_MAX_POS


	)

115 #i‡
Y_HOME_DIR
 == -1

116 #ifde‡
BED_CENTER_AT_0_0


117 
	#Y_HOME_POS
 
Y_MAX_LENGTH
 * -0.5

	)

119 
	#Y_HOME_POS
 
Y_MIN_POS


	)

122 #ifde‡
BED_CENTER_AT_0_0


123 
	#Y_HOME_POS
 
Y_MAX_LENGTH
 * 0.5

	)

125 
	#Y_HOME_POS
 
Y_MAX_POS


	)

130 #i‡
Z_HOME_DIR
 == -1

131 
	#Z_HOME_POS
 
Z_MIN_POS


	)

133 
	#Z_HOME_POS
 
Z_MAX_POS


	)

148 #ifde‡
Z_DUAL_STEPPER_DRIVERS


149 #unde‡
EXTRUDERS


150 
	#EXTRUDERS
 1

	)

157 
	#INVERT_Y2_VS_Y_DIR
 
åue


	)

159 #ifde‡
Y_DUAL_STEPPER_DRIVERS


160 #unde‡
EXTRUDERS


161 
	#EXTRUDERS
 1

	)

164 #i‡
deföed
 (
Z_DUAL_STEPPER_DRIVERS
Ë&& deföed (
Y_DUAL_STEPPER_DRIVERS
)

173 #ifde‡
DUAL_X_CARRIAGE


177 
	#X2_MIN_POS
 80

178 
	#X2_MAX_POS
 353

179 
	#X2_HOME_DIR
 1

180 
	#X2_HOME_POS
 
X2_MAX_POS


185 

	)

187 
	#X2_ENABLE_PIN
 29

	)

188 
	#X2_STEP_PIN
 25

	)

189 
	#X2_DIR_PIN
 23

	)

201 
	#DEFAULT_DUAL_X_CARRIAGE_MODE
 0

	)

204 
	#EXTRUDER1_Z_OFFSET
 0.0

205 

	)

207 
	#TOOLCHANGE_PARK_ZLIFT
 0.2

208 
	#TOOLCHANGE_UNPARK_ZLIFT
 1

209 

	)

211 
	#DEFAULT_DUPLICATION_X_OFFSET
 100

	)

216 
	#X_HOME_RETRACT_MM
 5

	)

217 
	#Y_HOME_RETRACT_MM
 5

	)

218 
	#Z_HOME_RETRACT_MM
 2

	)

221 
	#AXIS_RELATIVE_MODES
 {
Ál£
, fÆ£, fÆ£, fÆ£}

	)

223 
	#MAX_STEP_FREQUENCY
 40000

224 

	)

226 
	#INVERT_X_STEP_PIN
 
Ál£


	)

227 
	#INVERT_Y_STEP_PIN
 
Ál£


	)

228 
	#INVERT_Z_STEP_PIN
 
Ál£


	)

229 
	#INVERT_E_STEP_PIN
 
Ál£


	)

232 
	#DEFAULT_STEPPER_DEACTIVE_TIME
 60

	)

234 
	#DEFAULT_MINIMUMFEEDRATE
 0.0

235 
	#DEFAULT_MINTRAVELFEEDRATE
 0.0

	)

238 #ifde‡
ULTIPANEL


239 
	#MANUAL_FEEDRATE
 {50*60, 50*60, 4*60, 60}

241 

	)

243 #ifde‡
ULTIPANEL


244 
	#ULTIPANEL_FEEDMULTIPLY


	)

248 
	#DEFAULT_MINSEGMENTTIME
 20000

	)

251 
	#SLOWDOWN


	)

261 
	#MINIMUM_PLANNER_SPEED
 0.05

262 

	)

264 
	#MICROSTEP1
 
LOW
,
	)
LOW

265 
	#MICROSTEP2
 
HIGH
,
LOW


	)

266 
	#MICROSTEP4
 
LOW
,
HIGH


	)

267 
	#MICROSTEP8
 
HIGH
,
	)
HIGH

268 
	#MICROSTEP16
 
HIGH
,
	)
HIGH

271 
	#MICROSTEP_MODES
 {16,16,16,16,16}

272 

	)

274 
	#DIGIPOT_MOTOR_CURRENT
 {135,135,135,135,135}

275 

	)

279 
	#DIGIPOT_I2C_NUM_CHANNELS
 4

	)

282 
	#DIGIPOT_I2C_MOTOR_CURRENTS
 {1.7, 1.7, 1.7, 1.7}

	)

289 
	#CHDK_DELAY
 50

290 

	)

291 
	#SD_FINISHED_STEPPERRELEASE
 
åue


292 
	#SD_FINISHED_RELEASECOMMAND
 "M84 X Y Z E"

293 

	)

294 
	#SDCARD_RATHERRECENTFIRST


298 

	)

302 #ifde‡
USE_WATCHDOG


316 #ifde‡
BABYSTEPPING


317 
	#BABYSTEP_XY


318 
	#BABYSTEP_INVERT_Z
 
Ál£


319 
	#BABYSTEP_Z_MULTIPLICATOR
 2

320 

	)

321 #ifde‡
COREXY


322 #îr‹ 
BABYSTEPPING
 
nŸ
 
im∂emíãd
 
COREXY
 
yë
.

325 #ifde‡
DELTA


326 #ifde‡
BABYSTEP_XY


327 #îr‹ 
BABYSTEPPING
 
⁄ly
 
im∂emíãd
 
Z
 
axis
 
⁄
 
dñèbŸs
.

341 #ifde‡
ADVANCE


342 
	#EXTRUDER_ADVANCE_K
 .0

	)

344 
	#D_FILAMENT
 2.85

	)

345 
	#STEPS_MM_E
 836

	)

346 
	#EXTRUSION_AREA
 (0.25 * 
D_FILAMENT
 * D_FILAMENT * 3.14159)

	)

347 
	#STEPS_PER_CUBIC_MM_E
 (
axis_°ïs_≥r_unô
[
E_AXIS
]/ 
EXTRUSION_AREA
)

	)

352 
	#MM_PER_ARC_SEGMENT
 1

	)

353 
	#N_ARC_CORRECTION
 25

	)

355 c⁄° 
	gdr›£gmíts
=5;

363 #ifde‡
ULTIPANEL


364 #unde‡
SDCARDDETECTINVERTED


369 #i‚de‡
POWER_SUPPLY


370 
	#POWER_SUPPLY
 1

	)

373 #i‡(
POWER_SUPPLY
 == 1)

374 
	#PS_ON_AWAKE
 
LOW


	)

375 
	#PS_ON_ASLEEP
 
HIGH


	)

378 #i‡(
POWER_SUPPLY
 == 2)

379 
	#PS_ON_AWAKE
 
HIGH


	)

380 
	#PS_ON_ASLEEP
 
LOW


	)

392 #i‡
deföed
 
SDSUPPORT


393 
	#BLOCK_BUFFER_SIZE
 16

394 #ñ£

	)

395 
	#BLOCK_BUFFER_SIZE
 16

397 

	)

400 
	#MAX_CMD_SIZE
 96

	)

401 
	#BUFSIZE
 4

	)

411 #ifde‡
FWRETRACT


412 
	#MIN_RETRACT
 0.1

413 
	#RETRACT_LENGTH
 3

414 
	#RETRACT_FEEDRATE
 45

415 
	#RETRACT_ZLIFT
 0

416 
	#RETRACT_RECOVER_LENGTH
 0

417 
	#RETRACT_RECOVER_FEEDRATE
 8

419 

	)

421 #ifde‡
ULTIPANEL


422 
	#FILAMENTCHANGEENABLE


	)

423 #ifde‡
FILAMENTCHANGEENABLE


424 
	#FILAMENTCHANGE_XPOS
 3

	)

425 
	#FILAMENTCHANGE_YPOS
 3

	)

426 
	#FILAMENTCHANGE_ZADD
 10

	)

427 
	#FILAMENTCHANGE_FIRSTRETRACT
 -2

	)

428 
	#FILAMENTCHANGE_FINALRETRACT
 -100

	)

432 #ifde‡
FILAMENTCHANGEENABLE


433 #ifde‡
EXTRUDER_RUNOUT_PREVENT


434 #îr‹ 
EXTRUDER_RUNOUT_PREVENT
 
cuºíéy
 
öcom∑tibÀ
 
wôh
 
FILAMENTCHANGE


441 #i‡
EXTRUDERS
 > 1 && 
deföed
 
TEMP_SENSOR_1_AS_REDUNDANT


445 #i‡
EXTRUDERS
 > 1 && 
deföed
 
HEATERS_PARALLEL


449 #i‡
TEMP_SENSOR_0
 > 0

450 
	#THERMISTORHEATER_0
 
TEMP_SENSOR_0


	)

451 
	#HEATER_0_USES_THERMISTOR


	)

453 #i‡
TEMP_SENSOR_1
 > 0

454 
	#THERMISTORHEATER_1
 
TEMP_SENSOR_1


	)

455 
	#HEATER_1_USES_THERMISTOR


	)

457 #i‡
TEMP_SENSOR_2
 > 0

458 
	#THERMISTORHEATER_2
 
TEMP_SENSOR_2


	)

459 
	#HEATER_2_USES_THERMISTOR


	)

461 #i‡
TEMP_SENSOR_BED
 > 0

462 
	#THERMISTORBED
 
TEMP_SENSOR_BED


	)

463 
	#BED_USES_THERMISTOR


	)

465 #i‡
TEMP_SENSOR_0
 == -1

466 
	#HEATER_0_USES_AD595


	)

468 #i‡
TEMP_SENSOR_1
 == -1

469 
	#HEATER_1_USES_AD595


	)

471 #i‡
TEMP_SENSOR_2
 == -1

472 
	#HEATER_2_USES_AD595


	)

474 #i‡
TEMP_SENSOR_BED
 == -1

475 
	#BED_USES_AD595


	)

477 #i‡
TEMP_SENSOR_0
 == -2

478 
	#HEATER_0_USES_MAX6675


	)

480 #i‡
TEMP_SENSOR_0
 == 0

481 #unde‡
HEATER_0_MINTEMP


482 #unde‡
HEATER_0_MAXTEMP


484 #i‡
TEMP_SENSOR_1
 == 0

485 #unde‡
HEATER_1_MINTEMP


486 #unde‡
HEATER_1_MAXTEMP


488 #i‡
TEMP_SENSOR_2
 == 0

489 #unde‡
HEATER_2_MINTEMP


490 #unde‡
HEATER_2_MAXTEMP


492 #i‡
TEMP_SENSOR_BED
 == 0

493 #unde‡
BED_MINTEMP


494 #unde‡
BED_MAXTEMP


	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/example_configurations/tvrrug/Round2/Configuration.h

1 #i‚de‡
CONFIGURATION_H


2 
	#CONFIGURATION_H


	)

4 
	~"bﬂrds.h
"

27 
	#STRING_VERSION_CONFIG_H
 
__DATE__
 " " 
__TIME__


28 
	#STRING_CONFIG_H_AUTHOR
 "(none, default config)"

29 

	)

33 
	#SERIAL_PORT
 0

	)

36 
	#BAUDRATE
 250000

	)

43 #i‚de‡
MOTHERBOARD


44 
	#MOTHERBOARD
 
BOARD_OMCA


	)

55 
	#EXTRUDERS
 1

	)

61 
	#POWER_SUPPLY
 1

	)

104 
	#TEMP_SENSOR_0
 5

	)

105 
	#TEMP_SENSOR_1
 0

	)

106 
	#TEMP_SENSOR_2
 0

	)

107 
	#TEMP_SENSOR_BED
 5

	)

111 
	#MAX_REDUNDANT_TEMP_SENSOR_DIFF
 10

	)

114 
	#TEMP_RESIDENCY_TIME
 10

115 
	#TEMP_HYSTERESIS
 3

116 
	#TEMP_WINDOW
 1

117 

	)

121 
	#HEATER_0_MINTEMP
 5

	)

122 
	#HEATER_1_MINTEMP
 5

	)

123 
	#HEATER_2_MINTEMP
 5

	)

124 
	#BED_MINTEMP
 5

	)

129 
	#HEATER_0_MAXTEMP
 275

	)

130 
	#HEATER_1_MAXTEMP
 275

	)

131 
	#HEATER_2_MAXTEMP
 275

	)

132 
	#BED_MAXTEMP
 150

	)

134 
	#CONFIG_STEPPERS_TOSHIBA
 1

	)

147 
	#PIDTEMP


	)

148 
	#BANG_MAX
 255

149 
	#PID_MAX
 255

150 #ifde‡
PIDTEMP


	)

153 
	#PID_FUNCTIONAL_RANGE
 10

155 
	#PID_INTEGRAL_DRIVE_MAX
 255

156 
	#K1
 0.95

157 
	#PID_dT
 ((
OVERSAMPLENR
 * 10.0)/(
F_CPU
 / 64.0 / 256.0))

158 

	)

161 
	#DEFAULT_Kp
 25.05

	)

162 
	#DEFAULT_Ki
 2.30

	)

163 
	#DEFAULT_Kd
 68.15

	)

199 
	#MAX_BED_POWER
 255

200 

	)

201 #ifde‡
PIDTEMPBED


204 
	#DEFAULT_bedKp
 10.00

	)

205 
	#DEFAULT_bedKi
 .023

	)

206 
	#DEFAULT_bedKd
 305.4

	)

221 
	#PREVENT_DANGEROUS_EXTRUDE


	)

223 
	#PREVENT_LENGTHY_EXTRUDE


	)

225 
	#EXTRUDE_MINTEMP
 170

	)

226 
	#EXTRUDE_MAXLENGTH
 (
X_MAX_LENGTH
+
Y_MAX_LENGTH
)

227 

	)

274 
	#ENDSTOPPULLUPS


275 

	)

276 #i‚de‡
ENDSTOPPULLUPS


286 #ifde‡
ENDSTOPPULLUPS


287 
	#ENDSTOPPULLUP_XMAX


	)

288 
	#ENDSTOPPULLUP_YMAX


	)

289 
	#ENDSTOPPULLUP_ZMAX


	)

290 
	#ENDSTOPPULLUP_XMIN


	)

291 
	#ENDSTOPPULLUP_YMIN


	)

292 
	#ENDSTOPPULLUP_ZMIN


	)

296 c⁄° 
boﬁ
 
	gX_MIN_ENDSTOP_INVERTING
 = 
åue
;

297 c⁄° 
boﬁ
 
	gY_MIN_ENDSTOP_INVERTING
 = 
åue
;

298 c⁄° 
boﬁ
 
	gZ_MIN_ENDSTOP_INVERTING
 = 
åue
;

299 c⁄° 
boﬁ
 
	gX_MAX_ENDSTOP_INVERTING
 = 
åue
;

300 c⁄° 
boﬁ
 
	gY_MAX_ENDSTOP_INVERTING
 = 
åue
;

301 c⁄° 
boﬁ
 
	gZ_MAX_ENDSTOP_INVERTING
 = 
åue
;

306 #i‡
deföed
(
COREXY
Ë&& !deföed(
DISABLE_MAX_ENDSTOPS
)

307 
	#DISABLE_MAX_ENDSTOPS


	)

311 
	#X_ENABLE_ON
 1

	)

312 
	#Y_ENABLE_ON
 1

	)

313 
	#Z_ENABLE_ON
 1

	)

314 
	#E_ENABLE_ON
 1

315 

	)

317 
	#DISABLE_X
 
Ál£


	)

318 
	#DISABLE_Y
 
Ál£


	)

319 
	#DISABLE_Z
 
Ál£


	)

320 
	#DISABLE_E
 
Ál£


321 
	#DISABLE_INACTIVE_EXTRUDER
 
åue


322 

	)

323 
	#INVERT_X_DIR
 
Ál£


324 
	#INVERT_Y_DIR
 
åue


325 
	#INVERT_Z_DIR
 
Ál£


326 
	#INVERT_E0_DIR
 
Ál£


327 
	#INVERT_E1_DIR
 
Ál£


328 
	#INVERT_E2_DIR
 
Ál£


329 

	)

332 
	#X_HOME_DIR
 -1

	)

333 
	#Y_HOME_DIR
 -1

	)

334 
	#Z_HOME_DIR
 -1

	)

336 
	#mö_so·w¨e_íd°›s
 
åue


337 
	#max_so·w¨e_íd°›s
 
åue


338 

	)

340 
	#X_MAX_POS
 205

	)

341 
	#X_MIN_POS
 0

	)

342 
	#Y_MAX_POS
 205

	)

343 
	#Y_MIN_POS
 0

	)

344 
	#Z_MAX_POS
 120

	)

345 
	#Z_MIN_POS
 0

	)

347 
	#X_MAX_LENGTH
 (
X_MAX_POS
 - 
X_MIN_POS
)

	)

348 
	#Y_MAX_LENGTH
 (
Y_MAX_POS
 - 
Y_MIN_POS
)

	)

349 
	#Z_MAX_LENGTH
 (
Z_MAX_POS
 - 
Z_MIN_POS
)

	)

353 
	#Z_PROBE_REPEATABILITY_TEST


354 

	)

355 #ifde‡
ENABLE_AUTO_BED_LEVELING


369 
	#AUTO_BED_LEVELING_GRID


	)

374 #ifde‡
AUTO_BED_LEVELING_GRID


377 
	#LEFT_PROBE_BED_POSITION
 15

	)

378 
	#RIGHT_PROBE_BED_POSITION
 170

	)

379 
	#BACK_PROBE_BED_POSITION
 180

	)

380 
	#FRONT_PROBE_BED_POSITION
 20

	)

384 
	#AUTO_BED_LEVELING_GRID_POINTS
 2

	)

391 
	#ABL_PROBE_PT_1_X
 15

	)

392 
	#ABL_PROBE_PT_1_Y
 180

	)

393 
	#ABL_PROBE_PT_2_X
 15

	)

394 
	#ABL_PROBE_PT_2_Y
 20

	)

395 
	#ABL_PROBE_PT_3_X
 170

	)

396 
	#ABL_PROBE_PT_3_Y
 20

	)

402 
	#X_PROBE_OFFSET_FROM_EXTRUDER
 -25

	)

403 
	#Y_PROBE_OFFSET_FROM_EXTRUDER
 -29

	)

404 
	#Z_PROBE_OFFSET_FROM_EXTRUDER
 -12.35

	)

406 
	#Z_RAISE_BEFORE_HOMING
 4

408 

	)

409 
	#XY_TRAVEL_SPEED
 8000

410 

	)

411 
	#Z_RAISE_BEFORE_PROBING
 15

412 
	#Z_RAISE_BETWEEN_PROBINGS
 5

413 

	)

427 
	#Z_SAFE_HOMING


433 

	)

434 #ifde‡
Z_SAFE_HOMING


436 
	#Z_SAFE_HOMING_X_POINT
 (
X_MAX_LENGTH
/2)

437 
	#Z_SAFE_HOMING_Y_POINT
 (
Y_MAX_LENGTH
/2)

438 

	)

450 
	#MANUAL_X_HOME_POS
 0

	)

451 
	#MANUAL_Y_HOME_POS
 0

	)

452 
	#MANUAL_Z_HOME_POS
 0

	)

456 
	#NUM_AXIS
 4

457 
	#HOMING_FEEDRATE
 {50*60, 50*60, 4*60, 0}

458 

	)

465 
	#DEFAULT_AXIS_STEPS_PER_UNIT
 {71.1, 71.1, 2560, 600}

466 

	)

470 
	#DEFAULT_MAX_FEEDRATE
 {500, 500, 5, 45}

471 
	#DEFAULT_MAX_ACCELERATION
 {9000,9000,100,10000}

472 

	)

474 
	#DEFAULT_ACCELERATION
 500

476 
	#DEFAULT_RETRACT_ACCELERATION
 3000

477 

	)

485 
	#DEFAULT_XYJERK
 20.0

486 
	#DEFAULT_ZJERK
 0.4

487 
	#DEFAULT_EJERK
 5.0

488 

	)

494 
	#CUSTOM_M_CODES


	)

495 #ifde‡
CUSTOM_M_CODES


496 
	#CUSTOM_M_CODE_SET_Z_PROBE_OFFSET
 851

	)

497 
	#Z_PROBE_OFFSET_RANGE_MIN
 -15

	)

498 
	#Z_PROBE_OFFSET_RANGE_MAX
 -5

	)

514 
	#PLA_PREHEAT_HOTEND_TEMP
 180

	)

515 
	#PLA_PREHEAT_HPB_TEMP
 70

	)

516 
	#PLA_PREHEAT_FAN_SPEED
 255

517 

	)

518 
	#ABS_PREHEAT_HOTEND_TEMP
 240

	)

519 
	#ABS_PREHEAT_HPB_TEMP
 100

	)

520 
	#ABS_PREHEAT_FAN_SPEED
 255

521 

	)

564 #i‡
deföed
 (
MAKRPANEL
)

565 
	#DOGLCD


	)

566 
	#SDSUPPORT


	)

567 
	#ULTIPANEL


	)

568 
	#NEWPANEL


	)

569 
	#DEFAULT_LCD_CONTRAST
 17

	)

572 #i‡
deföed
 (
REPRAP_DISCOUNT_FULL_GRAPHIC_SMART_CONTROLLER
)

573 
	#DOGLCD


	)

574 
	#U8GLIB_ST7920


	)

575 
	#REPRAP_DISCOUNT_SMART_CONTROLLER


	)

578 #i‡
deföed
(
ULTIMAKERCONTROLLER
Ë|| deföed(
REPRAP_DISCOUNT_SMART_CONTROLLER
Ë|| deföed(
G3D_PANEL
)

579 
	#ULTIPANEL


	)

580 
	#NEWPANEL


	)

583 #i‡
deföed
(
REPRAPWORLD_KEYPAD
)

584 
	#NEWPANEL


	)

585 
	#ULTIPANEL


	)

587 #i‡
deföed
(
RA_CONTROL_PANEL
)

588 
	#ULTIPANEL


	)

589 
	#NEWPANEL


	)

590 
	#LCD_I2C_TYPE_PCA8574


	)

591 
	#LCD_I2C_ADDRESS
 0x27

593 

	)

597 #ifde‡
LCD_I2C_SAINSMART_YWROBOT


600 
	#LCD_I2C_TYPE_PCF8575


	)

601 
	#LCD_I2C_ADDRESS
 0x27

602 
	#NEWPANEL


	)

603 
	#ULTIPANEL


	)

608 #ifde‡
LCD_I2C_PANELOLU2


614 
	#LCD_I2C_TYPE_MCP23017


	)

615 
	#LCD_I2C_ADDRESS
 0x20

616 
	#LCD_USE_I2C_BUZZER


617 
	#NEWPANEL


	)

618 
	#ULTIPANEL


	)

620 #i‚de‡
ENCODER_PULSES_PER_STEP


621 
	#ENCODER_PULSES_PER_STEP
 4

	)

624 #i‚de‡
ENCODER_STEPS_PER_MENU_ITEM


625 
	#ENCODER_STEPS_PER_MENU_ITEM
 1

	)

629 #ifde‡
LCD_USE_I2C_BUZZER


630 
	#LCD_FEEDBACK_FREQUENCY_HZ
 1000

	)

631 
	#LCD_FEEDBACK_FREQUENCY_DURATION_MS
 100

	)

638 #ifde‡
LCD_I2C_VIKI


643 
	#LCD_I2C_TYPE_MCP23017


	)

644 
	#LCD_I2C_ADDRESS
 0x20

645 
	#LCD_USE_I2C_BUZZER


646 
	#NEWPANEL


	)

647 
	#ULTIPANEL


	)

655 #ifde‡
SR_LCD


656 
	#SR_LCD_2W_NL


659 

	)

661 #ifde‡
ULTIPANEL


663 
	#SDSUPPORT


	)

664 
	#ULTRA_LCD


	)

665 #ifde‡
DOGLCD


666 
	#LCD_WIDTH
 20

	)

667 
	#LCD_HEIGHT
 5

	)

669 
	#LCD_WIDTH
 20

	)

670 
	#LCD_HEIGHT
 4

	)

673 #ifde‡
ULTRA_LCD


674 #ifde‡
DOGLCD


675 
	#LCD_WIDTH
 20

	)

676 
	#LCD_HEIGHT
 5

	)

678 
	#LCD_WIDTH
 16

	)

679 
	#LCD_HEIGHT
 2

	)

685 #ifde‡
DOGLCD


686 #i‚de‡
DEFAULT_LCD_CONTRAST


687 
	#DEFAULT_LCD_CONTRAST
 32

	)

708 
	#SOFT_PWM_SCALE
 0

	)

759 
	#FILAMENT_SENSOR_EXTRUDER_NUM
 0

760 
	#MEASUREMENT_DELAY_CM
 14

761 

	)

762 
	#DEFAULT_NOMINAL_FILAMENT_DIA
 3.0

763 
	#MEASURED_UPPER_LIMIT
 3.30

764 
	#MEASURED_LOWER_LIMIT
 1.90

765 
	#MAX_MEASUREMENT_DELAY
 20

766 

	)

768 
	#DEFAULT_MEASURED_FILAMENT_DIA
 
DEFAULT_NOMINAL_FILAMENT_DIA


769 

	)

776 
	~"C⁄figuøti⁄_adv.h
"

777 
	~"thîmi°‹èbÀs.h
"

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/example_configurations/tvrrug/Round2/Configuration_adv.h

1 #i‚de‡
CONFIGURATION_ADV_H


2 
	#CONFIGURATION_ADV_H


	)

8 #ifde‡
BED_LIMIT_SWITCHING


9 
	#BED_HYSTERESIS
 2

11 
	#BED_CHECK_INTERVAL
 5000

12 

	)

21 #ifde‡
PIDTEMP


24 
	#PID_ADD_EXTRUSION_RATE


	)

25 #ifde‡
PID_ADD_EXTRUSION_RATE


26 
	#DEFAULT_Kc
 (1)

29 

	)

38 
	#AUTOTEMP


	)

39 #ifde‡
AUTOTEMP


40 
	#AUTOTEMP_OLDWEIGHT
 0.98

	)

50 
	#EXTRUDER_RUNOUT_MINTEMP
 190

	)

51 
	#EXTRUDER_RUNOUT_SECONDS
 30.

	)

52 
	#EXTRUDER_RUNOUT_ESTEPS
 14.

53 
	#EXTRUDER_RUNOUT_SPEED
 1500.

54 
	#EXTRUDER_RUNOUT_EXTRUDE
 100

	)

58 
	#TEMP_SENSOR_AD595_OFFSET
 0.0

	)

59 
	#TEMP_SENSOR_AD595_GAIN
 1.0

	)

64 
	#CONTROLLERFAN_PIN
 23

65 
	#CONTROLLERFAN_SECS
 60

66 
	#CONTROLLERFAN_SPEED
 255

67 

	)

78 
	#EXTRUDER_0_AUTO_FAN_PIN
 -1

	)

79 
	#EXTRUDER_1_AUTO_FAN_PIN
 -1

	)

80 
	#EXTRUDER_2_AUTO_FAN_PIN
 -1

	)

81 
	#EXTRUDER_AUTO_FAN_TEMPERATURE
 50

	)

82 
	#EXTRUDER_AUTO_FAN_SPEED
 255

83 

	)

89 
	#ENDSTOPS_ONLY_FOR_HOMING


90 

	)

94 #ifde‡
MANUAL_HOME_POSITIONS


95 
	#X_HOME_POS
 
MANUAL_X_HOME_POS


	)

96 
	#Y_HOME_POS
 
MANUAL_Y_HOME_POS


	)

97 
	#Z_HOME_POS
 
MANUAL_Z_HOME_POS


	)

100 #i‡
X_HOME_DIR
 == -1

101 #ifde‡
BED_CENTER_AT_0_0


102 
	#X_HOME_POS
 
X_MAX_LENGTH
 * -0.5

	)

104 
	#X_HOME_POS
 
X_MIN_POS


	)

107 #ifde‡
BED_CENTER_AT_0_0


108 
	#X_HOME_POS
 
X_MAX_LENGTH
 * 0.5

	)

110 
	#X_HOME_POS
 
X_MAX_POS


	)

115 #i‡
Y_HOME_DIR
 == -1

116 #ifde‡
BED_CENTER_AT_0_0


117 
	#Y_HOME_POS
 
Y_MAX_LENGTH
 * -0.5

	)

119 
	#Y_HOME_POS
 
Y_MIN_POS


	)

122 #ifde‡
BED_CENTER_AT_0_0


123 
	#Y_HOME_POS
 
Y_MAX_LENGTH
 * 0.5

	)

125 
	#Y_HOME_POS
 
Y_MAX_POS


	)

130 #i‡
Z_HOME_DIR
 == -1

131 
	#Z_HOME_POS
 
Z_MIN_POS


	)

133 
	#Z_HOME_POS
 
Z_MAX_POS


	)

148 #ifde‡
Z_DUAL_STEPPER_DRIVERS


149 #unde‡
EXTRUDERS


150 
	#EXTRUDERS
 1

	)

157 
	#INVERT_Y2_VS_Y_DIR
 
åue


	)

159 #ifde‡
Y_DUAL_STEPPER_DRIVERS


160 #unde‡
EXTRUDERS


161 
	#EXTRUDERS
 1

	)

164 #i‡
deföed
 (
Z_DUAL_STEPPER_DRIVERS
Ë&& deföed (
Y_DUAL_STEPPER_DRIVERS
)

173 #ifde‡
DUAL_X_CARRIAGE


177 
	#X2_MIN_POS
 80

178 
	#X2_MAX_POS
 353

179 
	#X2_HOME_DIR
 1

180 
	#X2_HOME_POS
 
X2_MAX_POS


185 

	)

187 
	#X2_ENABLE_PIN
 29

	)

188 
	#X2_STEP_PIN
 25

	)

189 
	#X2_DIR_PIN
 23

	)

201 
	#DEFAULT_DUAL_X_CARRIAGE_MODE
 0

	)

204 
	#EXTRUDER1_Z_OFFSET
 0.0

205 

	)

207 
	#TOOLCHANGE_PARK_ZLIFT
 0.2

208 
	#TOOLCHANGE_UNPARK_ZLIFT
 1

209 

	)

211 
	#DEFAULT_DUPLICATION_X_OFFSET
 100

	)

216 
	#X_HOME_RETRACT_MM
 5

	)

217 
	#Y_HOME_RETRACT_MM
 5

	)

218 
	#Z_HOME_RETRACT_MM
 1

	)

221 
	#AXIS_RELATIVE_MODES
 {
Ál£
, fÆ£, fÆ£, fÆ£}

	)

222 #ifde‡
CONFIG_STEPPERS_TOSHIBA


223 
	#MAX_STEP_FREQUENCY
 10000

224 #ñ£

	)

225 
	#MAX_STEP_FREQUENCY
 40000

228 
	#INVERT_X_STEP_PIN
 
Ál£


	)

229 
	#INVERT_Y_STEP_PIN
 
Ál£


	)

230 
	#INVERT_Z_STEP_PIN
 
Ál£


	)

231 
	#INVERT_E_STEP_PIN
 
Ál£


	)

234 
	#DEFAULT_STEPPER_DEACTIVE_TIME
 60

	)

236 
	#DEFAULT_MINIMUMFEEDRATE
 0.0

237 
	#DEFAULT_MINTRAVELFEEDRATE
 0.0

	)

240 #ifde‡
ULTIPANEL


241 
	#MANUAL_FEEDRATE
 {50*60, 50*60, 4*60, 60}

243 

	)

245 #ifde‡
ULTIPANEL


246 
	#ULTIPANEL_FEEDMULTIPLY


	)

250 
	#DEFAULT_MINSEGMENTTIME
 20000

	)

253 
	#SLOWDOWN


	)

263 
	#MINIMUM_PLANNER_SPEED
 0.05

264 

	)

266 
	#MICROSTEP1
 
LOW
,
	)
LOW

267 
	#MICROSTEP2
 
HIGH
,
LOW


	)

268 
	#MICROSTEP4
 
LOW
,
HIGH


	)

269 
	#MICROSTEP8
 
HIGH
,
	)
HIGH

270 
	#MICROSTEP16
 
HIGH
,
	)
HIGH

273 
	#MICROSTEP_MODES
 {16,16,16,16,16}

274 

	)

276 
	#DIGIPOT_MOTOR_CURRENT
 {135,135,135,135,135}

277 

	)

281 
	#DIGIPOT_I2C_NUM_CHANNELS
 8

	)

283 
	#DIGIPOT_I2C_MOTOR_CURRENTS
 {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}

	)

290 
	#CHDK_DELAY
 50

291 

	)

292 
	#SD_FINISHED_STEPPERRELEASE
 
åue


293 
	#SD_FINISHED_RELEASECOMMAND
 "M84 X Y Z E"

294 

	)

295 
	#SDCARD_RATHERRECENTFIRST


299 

	)

303 #ifde‡
USE_WATCHDOG


317 #ifde‡
BABYSTEPPING


318 
	#BABYSTEP_XY


319 
	#BABYSTEP_INVERT_Z
 
Ál£


320 
	#BABYSTEP_Z_MULTIPLICATOR
 2

321 

	)

322 #ifde‡
COREXY


323 #îr‹ 
BABYSTEPPING
 
nŸ
 
im∂emíãd
 
COREXY
 
yë
.

326 #ifde‡
DELTA


327 #ifde‡
BABYSTEP_XY


328 #îr‹ 
BABYSTEPPING
 
⁄ly
 
im∂emíãd
 
Z
 
axis
 
⁄
 
dñèbŸs
.

342 #ifde‡
ADVANCE


343 
	#EXTRUDER_ADVANCE_K
 .0

	)

345 
	#D_FILAMENT
 2.85

	)

346 
	#STEPS_MM_E
 836

	)

347 
	#EXTRUTION_AREA
 (0.25 * 
D_FILAMENT
 * D_FILAMENT * 3.14159)

	)

348 
	#STEPS_PER_CUBIC_MM_E
 (
axis_°ïs_≥r_unô
[
E_AXIS
]/ 
EXTRUTION_AREA
)

	)

353 
	#MM_PER_ARC_SEGMENT
 1

	)

354 
	#N_ARC_CORRECTION
 25

	)

356 c⁄° 
	gdr›£gmíts
=5;

362 
	#SDCARDDETECTINVERTED


	)

364 #ifde‡
ULTIPANEL


365 #unde‡
SDCARDDETECTINVERTED


370 #i‚de‡
POWER_SUPPLY


371 
	#POWER_SUPPLY
 1

	)

374 #i‡(
POWER_SUPPLY
 == 1)

375 
	#PS_ON_AWAKE
 
LOW


	)

376 
	#PS_ON_ASLEEP
 
HIGH


	)

379 #i‡(
POWER_SUPPLY
 == 2)

380 
	#PS_ON_AWAKE
 
HIGH


	)

381 
	#PS_ON_ASLEEP
 
LOW


	)

393 #i‡
deföed
 
SDSUPPORT


394 
	#BLOCK_BUFFER_SIZE
 16

395 #ñ£

	)

396 
	#BLOCK_BUFFER_SIZE
 16

398 

	)

401 
	#MAX_CMD_SIZE
 96

	)

402 
	#BUFSIZE
 4

	)

412 #ifde‡
FWRETRACT


413 
	#MIN_RETRACT
 0.1

414 
	#RETRACT_LENGTH
 3

415 
	#RETRACT_LENGTH_SWAP
 13

416 
	#RETRACT_FEEDRATE
 45

417 
	#RETRACT_ZLIFT
 0

418 
	#RETRACT_RECOVER_LENGTH
 0

419 
	#RETRACT_RECOVER_LENGTH_SWAP
 0

420 
	#RETRACT_RECOVER_FEEDRATE
 8

422 

	)

424 #ifde‡
ULTIPANEL


425 
	#FILAMENTCHANGEENABLE


	)

426 #ifde‡
FILAMENTCHANGEENABLE


427 
	#FILAMENTCHANGE_XPOS
 3

	)

428 
	#FILAMENTCHANGE_YPOS
 3

	)

429 
	#FILAMENTCHANGE_ZADD
 10

	)

430 
	#FILAMENTCHANGE_FIRSTRETRACT
 -2

	)

431 
	#FILAMENTCHANGE_FINALRETRACT
 -100

	)

435 #ifde‡
FILAMENTCHANGEENABLE


436 #ifde‡
EXTRUDER_RUNOUT_PREVENT


437 #îr‹ 
EXTRUDER_RUNOUT_PREVENT
 
cuºíéy
 
öcom∑tibÀ
 
wôh
 
FILAMENTCHANGE


444 #i‡
EXTRUDERS
 > 1 && 
deföed
 
TEMP_SENSOR_1_AS_REDUNDANT


448 #i‡
EXTRUDERS
 > 1 && 
deföed
 
HEATERS_PARALLEL


452 #i‡
TEMP_SENSOR_0
 > 0

453 
	#THERMISTORHEATER_0
 
TEMP_SENSOR_0


	)

454 
	#HEATER_0_USES_THERMISTOR


	)

456 #i‡
TEMP_SENSOR_1
 > 0

457 
	#THERMISTORHEATER_1
 
TEMP_SENSOR_1


	)

458 
	#HEATER_1_USES_THERMISTOR


	)

460 #i‡
TEMP_SENSOR_2
 > 0

461 
	#THERMISTORHEATER_2
 
TEMP_SENSOR_2


	)

462 
	#HEATER_2_USES_THERMISTOR


	)

464 #i‡
TEMP_SENSOR_BED
 > 0

465 
	#THERMISTORBED
 
TEMP_SENSOR_BED


	)

466 
	#BED_USES_THERMISTOR


	)

468 #i‡
TEMP_SENSOR_0
 == -1

469 
	#HEATER_0_USES_AD595


	)

471 #i‡
TEMP_SENSOR_1
 == -1

472 
	#HEATER_1_USES_AD595


	)

474 #i‡
TEMP_SENSOR_2
 == -1

475 
	#HEATER_2_USES_AD595


	)

477 #i‡
TEMP_SENSOR_BED
 == -1

478 
	#BED_USES_AD595


	)

480 #i‡
TEMP_SENSOR_0
 == -2

481 
	#HEATER_0_USES_MAX6675


	)

483 #i‡
TEMP_SENSOR_0
 == 0

484 #unde‡
HEATER_0_MINTEMP


485 #unde‡
HEATER_0_MAXTEMP


487 #i‡
TEMP_SENSOR_1
 == 0

488 #unde‡
HEATER_1_MINTEMP


489 #unde‡
HEATER_1_MAXTEMP


491 #i‡
TEMP_SENSOR_2
 == 0

492 #unde‡
HEATER_2_MINTEMP


493 #unde‡
HEATER_2_MAXTEMP


495 #i‡
TEMP_SENSOR_BED
 == 0

496 #unde‡
BED_MINTEMP


497 #unde‡
BED_MAXTEMP


	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/fastio.h

6 #i‚def 
_FASTIO_ARDUINO_H


7 
	#_FASTIO_ARDUINO_H


	)

9 
	~<avr/io.h
>

15 #i‚de‡
MASK


17 
	#MASK
(
PIN
Ë(1 << PIN)

	)

26 
	#_READ
(
IO
Ë((
boﬁ
)(
DIO
 ## IO ## 
_RPORT
 & 
	`MASK
(DIO ## IO ## 
_PIN
)))

	)

30 
	#_WRITE_NC
(
IO
, 
v
Ëdÿ{ i‡(vË{
DIO
 ## IO ## 
_WPORT
 |
	`MASK
(DIO ## IO ## 
_PIN
); } {DIO ## IO ## _WPORT &~MASK(DIO ## IO ## _PIN); }; } 0)

	)

32 
	#_WRITE_C
(
IO
, 
v
) do { if (v) { \

33 
CRITICAL_SECTION_START
; \

34 {
DIO
 ## 
IO
 ## 
_WPORT
 |
	`MASK
(DIO ## IO ## 
_PIN
); }\

35 
CRITICAL_SECTION_END
; \

38 
CRITICAL_SECTION_START
; \

39 {
DIO
 ## 
IO
 ## 
_WPORT
 &~
	`MASK
(DIO ## IO ## 
_PIN
); }\

40 
CRITICAL_SECTION_END
; \

43 0)

	)

45 
	#_WRITE
(
IO
, 
v
Ëdÿ{ i‡(&(
DIO
 ## IO ## 
_RPORT
Ë>(
uöt8_t
 *)0x100Ë{
	`_WRITE_C
(IO, v); } {
	`_WRITE_NC
(IO, v); }; } 0)

	)

48 
	#_TOGGLE
(
IO
Ëdÿ{
DIO
 ## IO ## 
_RPORT
 = 
	`MASK
(DIO ## IO ## 
_PIN
); } 0)

	)

51 
	#_SET_INPUT
(
IO
Ëdÿ{
DIO
 ## IO ## 
_DDR
 &~
	`MASK
(DIO ## IO ## 
_PIN
); } 0)

	)

53 
	#_SET_OUTPUT
(
IO
Ëdÿ{
DIO
 ## IO ## 
_DDR
 |
	`MASK
(DIO ## IO ## 
_PIN
); } 0)

	)

56 
	#_GET_INPUT
(
IO
Ë((
DIO
 ## IO ## 
_DDR
 & 
	`MASK
(DIO ## IO ## 
_PIN
)Ë=0)

	)

58 
	#_GET_OUTPUT
(
IO
Ë((
DIO
 ## IO ## 
_DDR
 & 
	`MASK
(DIO ## IO ## 
_PIN
)Ë!0)

	)

61 
	#_GET_TIMER
(
IO
Ë((
DIO
 ## IO ## 
_PWM
)

	)

66 
	#READ
(
IO
Ë
	`_READ
(IO)

	)

68 
	#WRITE
(
IO
, 
v
Ë
	`_WRITE
(IO, v)

	)

71 
	#TOGGLE
(
IO
Ë
	`_TOGGLE
(IO)

	)

74 
	#SET_INPUT
(
IO
Ë
	`_SET_INPUT
(IO)

	)

76 
	#SET_OUTPUT
(
IO
Ë
	`_SET_OUTPUT
(IO)

	)

79 
	#GET_INPUT
(
IO
Ë
	`_GET_INPUT
(IO)

	)

81 
	#GET_OUTPUT
(
IO
Ë
	`_GET_OUTPUT
(IO)

	)

84 
	#GET_TIMER
(
IO
Ë
	`_GET_TIMER
(IO)

	)

92 #i‡
deföed
 (
__AVR_ATmega168__
Ë|| deföed (
__AVR_ATmega328__
Ë|| deföed (
__AVR_ATmega328P__
)

94 
	#RXD
 
DIO0


	)

95 
	#TXD
 
DIO1


	)

98 
	#SCK
 
DIO13


	)

99 
	#MISO
 
DIO12


	)

100 
	#MOSI
 
DIO11


	)

101 
	#SS
 
DIO10


	)

104 
	#SCL
 
AIO5


	)

105 
	#SDA
 
AIO4


	)

108 
	#OC0A
 
DIO6


	)

109 
	#OC0B
 
DIO5


	)

110 
	#OC1A
 
DIO9


	)

111 
	#OC1B
 
DIO10


	)

112 
	#OC2A
 
DIO11


	)

113 
	#OC2B
 
DIO3


	)

115 
	#DEBUG_LED
 
AIO5


	)

121 
	#DIO0_PIN
 
PIND0


	)

122 
	#DIO0_RPORT
 
PIND


	)

123 
	#DIO0_WPORT
 
PORTD


	)

124 
	#DIO0_DDR
 
DDRD


	)

125 
	#DIO0_PWM
 
NULL


	)

127 
	#DIO1_PIN
 
PIND1


	)

128 
	#DIO1_RPORT
 
PIND


	)

129 
	#DIO1_WPORT
 
PORTD


	)

130 
	#DIO1_DDR
 
DDRD


	)

131 
	#DIO1_PWM
 
NULL


	)

133 
	#DIO2_PIN
 
PIND2


	)

134 
	#DIO2_RPORT
 
PIND


	)

135 
	#DIO2_WPORT
 
PORTD


	)

136 
	#DIO2_DDR
 
DDRD


	)

137 
	#DIO2_PWM
 
NULL


	)

139 
	#DIO3_PIN
 
PIND3


	)

140 
	#DIO3_RPORT
 
PIND


	)

141 
	#DIO3_WPORT
 
PORTD


	)

142 
	#DIO3_DDR
 
DDRD


	)

143 
	#DIO3_PWM
 &
OCR2B


	)

145 
	#DIO4_PIN
 
PIND4


	)

146 
	#DIO4_RPORT
 
PIND


	)

147 
	#DIO4_WPORT
 
PORTD


	)

148 
	#DIO4_DDR
 
DDRD


	)

149 
	#DIO4_PWM
 
NULL


	)

151 
	#DIO5_PIN
 
PIND5


	)

152 
	#DIO5_RPORT
 
PIND


	)

153 
	#DIO5_WPORT
 
PORTD


	)

154 
	#DIO5_DDR
 
DDRD


	)

155 
	#DIO5_PWM
 &
OCR0B


	)

157 
	#DIO6_PIN
 
PIND6


	)

158 
	#DIO6_RPORT
 
PIND


	)

159 
	#DIO6_WPORT
 
PORTD


	)

160 
	#DIO6_DDR
 
DDRD


	)

161 
	#DIO6_PWM
 &
OCR0A


	)

163 
	#DIO7_PIN
 
PIND7


	)

164 
	#DIO7_RPORT
 
PIND


	)

165 
	#DIO7_WPORT
 
PORTD


	)

166 
	#DIO7_DDR
 
DDRD


	)

167 
	#DIO7_PWM
 
NULL


	)

169 
	#DIO8_PIN
 
PINB0


	)

170 
	#DIO8_RPORT
 
PINB


	)

171 
	#DIO8_WPORT
 
PORTB


	)

172 
	#DIO8_DDR
 
DDRB


	)

173 
	#DIO8_PWM
 
NULL


	)

175 
	#DIO9_PIN
 
PINB1


	)

176 
	#DIO9_RPORT
 
PINB


	)

177 
	#DIO9_WPORT
 
PORTB


	)

178 
	#DIO9_DDR
 
DDRB


	)

179 
	#DIO9_PWM
 
NULL


	)

181 
	#DIO10_PIN
 
PINB2


	)

182 
	#DIO10_RPORT
 
PINB


	)

183 
	#DIO10_WPORT
 
PORTB


	)

184 
	#DIO10_DDR
 
DDRB


	)

185 
	#DIO10_PWM
 
NULL


	)

187 
	#DIO11_PIN
 
PINB3


	)

188 
	#DIO11_RPORT
 
PINB


	)

189 
	#DIO11_WPORT
 
PORTB


	)

190 
	#DIO11_DDR
 
DDRB


	)

191 
	#DIO11_PWM
 &
OCR2A


	)

193 
	#DIO12_PIN
 
PINB4


	)

194 
	#DIO12_RPORT
 
PINB


	)

195 
	#DIO12_WPORT
 
PORTB


	)

196 
	#DIO12_DDR
 
DDRB


	)

197 
	#DIO12_PWM
 
NULL


	)

199 
	#DIO13_PIN
 
PINB5


	)

200 
	#DIO13_RPORT
 
PINB


	)

201 
	#DIO13_WPORT
 
PORTB


	)

202 
	#DIO13_DDR
 
DDRB


	)

203 
	#DIO13_PWM
 
NULL


	)

206 
	#DIO14_PIN
 
PINC0


	)

207 
	#DIO14_RPORT
 
PINC


	)

208 
	#DIO14_WPORT
 
PORTC


	)

209 
	#DIO14_DDR
 
DDRC


	)

210 
	#DIO14_PWM
 
NULL


	)

212 
	#DIO15_PIN
 
PINC1


	)

213 
	#DIO15_RPORT
 
PINC


	)

214 
	#DIO15_WPORT
 
PORTC


	)

215 
	#DIO15_DDR
 
DDRC


	)

216 
	#DIO15_PWM
 
NULL


	)

218 
	#DIO16_PIN
 
PINC2


	)

219 
	#DIO16_RPORT
 
PINC


	)

220 
	#DIO16_WPORT
 
PORTC


	)

221 
	#DIO16_DDR
 
DDRC


	)

222 
	#DIO16_PWM
 
NULL


	)

224 
	#DIO17_PIN
 
PINC3


	)

225 
	#DIO17_RPORT
 
PINC


	)

226 
	#DIO17_WPORT
 
PORTC


	)

227 
	#DIO17_DDR
 
DDRC


	)

228 
	#DIO17_PWM
 
NULL


	)

230 
	#DIO18_PIN
 
PINC4


	)

231 
	#DIO18_RPORT
 
PINC


	)

232 
	#DIO18_WPORT
 
PORTC


	)

233 
	#DIO18_DDR
 
DDRC


	)

234 
	#DIO18_PWM
 
NULL


	)

236 
	#DIO19_PIN
 
PINC5


	)

237 
	#DIO19_RPORT
 
PINC


	)

238 
	#DIO19_WPORT
 
PORTC


	)

239 
	#DIO19_DDR
 
DDRC


	)

240 
	#DIO19_PWM
 
NULL


	)

242 
	#DIO20_PIN
 
PINC6


	)

243 
	#DIO20_RPORT
 
PINC


	)

244 
	#DIO20_WPORT
 
PORTC


	)

245 
	#DIO20_DDR
 
DDRC


	)

246 
	#DIO20_PWM
 
NULL


	)

248 
	#DIO21_PIN
 
PINC7


	)

249 
	#DIO21_RPORT
 
PINC


	)

250 
	#DIO21_WPORT
 
PORTC


	)

251 
	#DIO21_DDR
 
DDRC


	)

252 
	#DIO21_PWM
 
NULL


	)

256 #unde‡
PB0


257 
	#PB0_PIN
 
PINB0


	)

258 
	#PB0_RPORT
 
PINB


	)

259 
	#PB0_WPORT
 
PORTB


	)

260 
	#PB0_DDR
 
DDRB


	)

261 
	#PB0_PWM
 
NULL


	)

263 #unde‡
PB1


264 
	#PB1_PIN
 
PINB1


	)

265 
	#PB1_RPORT
 
PINB


	)

266 
	#PB1_WPORT
 
PORTB


	)

267 
	#PB1_DDR
 
DDRB


	)

268 
	#PB1_PWM
 
NULL


	)

270 #unde‡
PB2


271 
	#PB2_PIN
 
PINB2


	)

272 
	#PB2_RPORT
 
PINB


	)

273 
	#PB2_WPORT
 
PORTB


	)

274 
	#PB2_DDR
 
DDRB


	)

275 
	#PB2_PWM
 
NULL


	)

277 #unde‡
PB3


278 
	#PB3_PIN
 
PINB3


	)

279 
	#PB3_RPORT
 
PINB


	)

280 
	#PB3_WPORT
 
PORTB


	)

281 
	#PB3_DDR
 
DDRB


	)

282 
	#PB3_PWM
 &
OCR2A


	)

284 #unde‡
PB4


285 
	#PB4_PIN
 
PINB4


	)

286 
	#PB4_RPORT
 
PINB


	)

287 
	#PB4_WPORT
 
PORTB


	)

288 
	#PB4_DDR
 
DDRB


	)

289 
	#PB4_PWM
 
NULL


	)

291 #unde‡
PB5


292 
	#PB5_PIN
 
PINB5


	)

293 
	#PB5_RPORT
 
PINB


	)

294 
	#PB5_WPORT
 
PORTB


	)

295 
	#PB5_DDR
 
DDRB


	)

296 
	#PB5_PWM
 
NULL


	)

298 #unde‡
PB6


299 
	#PB6_PIN
 
PINB6


	)

300 
	#PB6_RPORT
 
PINB


	)

301 
	#PB6_WPORT
 
PORTB


	)

302 
	#PB6_DDR
 
DDRB


	)

303 
	#PB6_PWM
 
NULL


	)

305 #unde‡
PB7


306 
	#PB7_PIN
 
PINB7


	)

307 
	#PB7_RPORT
 
PINB


	)

308 
	#PB7_WPORT
 
PORTB


	)

309 
	#PB7_DDR
 
DDRB


	)

310 
	#PB7_PWM
 
NULL


	)

313 #unde‡
PC0


314 
	#PC0_PIN
 
PINC0


	)

315 
	#PC0_RPORT
 
PINC


	)

316 
	#PC0_WPORT
 
PORTC


	)

317 
	#PC0_DDR
 
DDRC


	)

318 
	#PC0_PWM
 
NULL


	)

320 #unde‡
PC1


321 
	#PC1_PIN
 
PINC1


	)

322 
	#PC1_RPORT
 
PINC


	)

323 
	#PC1_WPORT
 
PORTC


	)

324 
	#PC1_DDR
 
DDRC


	)

325 
	#PC1_PWM
 
NULL


	)

327 #unde‡
PC2


328 
	#PC2_PIN
 
PINC2


	)

329 
	#PC2_RPORT
 
PINC


	)

330 
	#PC2_WPORT
 
PORTC


	)

331 
	#PC2_DDR
 
DDRC


	)

332 
	#PC2_PWM
 
NULL


	)

334 #unde‡
PC3


335 
	#PC3_PIN
 
PINC3


	)

336 
	#PC3_RPORT
 
PINC


	)

337 
	#PC3_WPORT
 
PORTC


	)

338 
	#PC3_DDR
 
DDRC


	)

339 
	#PC3_PWM
 
NULL


	)

341 #unde‡
PC4


342 
	#PC4_PIN
 
PINC4


	)

343 
	#PC4_RPORT
 
PINC


	)

344 
	#PC4_WPORT
 
PORTC


	)

345 
	#PC4_DDR
 
DDRC


	)

346 
	#PC4_PWM
 
NULL


	)

348 #unde‡
PC5


349 
	#PC5_PIN
 
PINC5


	)

350 
	#PC5_RPORT
 
PINC


	)

351 
	#PC5_WPORT
 
PORTC


	)

352 
	#PC5_DDR
 
DDRC


	)

353 
	#PC5_PWM
 
NULL


	)

355 #unde‡
PC6


356 
	#PC6_PIN
 
PINC6


	)

357 
	#PC6_RPORT
 
PINC


	)

358 
	#PC6_WPORT
 
PORTC


	)

359 
	#PC6_DDR
 
DDRC


	)

360 
	#PC6_PWM
 
NULL


	)

362 #unde‡
PC7


363 
	#PC7_PIN
 
PINC7


	)

364 
	#PC7_RPORT
 
PINC


	)

365 
	#PC7_WPORT
 
PORTC


	)

366 
	#PC7_DDR
 
DDRC


	)

367 
	#PC7_PWM
 
NULL


	)

370 #unde‡
PD0


371 
	#PD0_PIN
 
PIND0


	)

372 
	#PD0_RPORT
 
PIND


	)

373 
	#PD0_WPORT
 
PORTD


	)

374 
	#PD0_DDR
 
DDRD


	)

375 
	#PD0_PWM
 
NULL


	)

377 #unde‡
PD1


378 
	#PD1_PIN
 
PIND1


	)

379 
	#PD1_RPORT
 
PIND


	)

380 
	#PD1_WPORT
 
PORTD


	)

381 
	#PD1_DDR
 
DDRD


	)

382 
	#PD1_PWM
 
NULL


	)

384 #unde‡
PD2


385 
	#PD2_PIN
 
PIND2


	)

386 
	#PD2_RPORT
 
PIND


	)

387 
	#PD2_WPORT
 
PORTD


	)

388 
	#PD2_DDR
 
DDRD


	)

389 
	#PD2_PWM
 
NULL


	)

391 #unde‡
PD3


392 
	#PD3_PIN
 
PIND3


	)

393 
	#PD3_RPORT
 
PIND


	)

394 
	#PD3_WPORT
 
PORTD


	)

395 
	#PD3_DDR
 
DDRD


	)

396 
	#PD3_PWM
 &
OCR2B


	)

398 #unde‡
PD4


399 
	#PD4_PIN
 
PIND4


	)

400 
	#PD4_RPORT
 
PIND


	)

401 
	#PD4_WPORT
 
PORTD


	)

402 
	#PD4_DDR
 
DDRD


	)

403 
	#PD4_PWM
 
NULL


	)

405 #unde‡
PD5


406 
	#PD5_PIN
 
PIND5


	)

407 
	#PD5_RPORT
 
PIND


	)

408 
	#PD5_WPORT
 
PORTD


	)

409 
	#PD5_DDR
 
DDRD


	)

410 
	#PD5_PWM
 &
OCR0B


	)

412 #unde‡
PD6


413 
	#PD6_PIN
 
PIND6


	)

414 
	#PD6_RPORT
 
PIND


	)

415 
	#PD6_WPORT
 
PORTD


	)

416 
	#PD6_DDR
 
DDRD


	)

417 
	#PD6_PWM
 &
OCR0A


	)

419 #unde‡
PD7


420 
	#PD7_PIN
 
PIND7


	)

421 
	#PD7_RPORT
 
PIND


	)

422 
	#PD7_WPORT
 
PORTD


	)

423 
	#PD7_DDR
 
DDRD


	)

424 
	#PD7_PWM
 
NULL


	)

427 #i‡
deföed
 (
__AVR_ATmega644__
Ë|| deföed (
__AVR_ATmega644P__
Ë|| deföed (
__AVR_ATmega644PA__
Ë|| deföed (
__AVR_ATmega1284P__
)

429 
	#RXD
 
DIO8


	)

430 
	#TXD
 
DIO9


	)

431 
	#RXD0
 
DIO8


	)

432 
	#TXD0
 
DIO9


	)

434 
	#RXD1
 
DIO10


	)

435 
	#TXD1
 
DIO11


	)

438 
	#SCK
 
DIO7


	)

439 
	#MISO
 
DIO6


	)

440 
	#MOSI
 
DIO5


	)

441 
	#SS
 
DIO4


	)

444 
	#SCL
 
DIO16


	)

445 
	#SDA
 
DIO17


	)

448 
	#OC0A
 
DIO3


	)

449 
	#OC0B
 
DIO4


	)

450 
	#OC1A
 
DIO13


	)

451 
	#OC1B
 
DIO12


	)

452 
	#OC2A
 
DIO15


	)

453 
	#OC2B
 
DIO14


	)

455 
	#DEBUG_LED
 
DIO0


	)

460 
	#DIO0_PIN
 
PINB0


	)

461 
	#DIO0_RPORT
 
PINB


	)

462 
	#DIO0_WPORT
 
PORTB


	)

463 
	#DIO0_DDR
 
DDRB


	)

464 
	#DIO0_PWM
 
NULL


	)

466 
	#DIO1_PIN
 
PINB1


	)

467 
	#DIO1_RPORT
 
PINB


	)

468 
	#DIO1_WPORT
 
PORTB


	)

469 
	#DIO1_DDR
 
DDRB


	)

470 
	#DIO1_PWM
 
NULL


	)

472 
	#DIO2_PIN
 
PINB2


	)

473 
	#DIO2_RPORT
 
PINB


	)

474 
	#DIO2_WPORT
 
PORTB


	)

475 
	#DIO2_DDR
 
DDRB


	)

476 
	#DIO2_PWM
 
NULL


	)

478 
	#DIO3_PIN
 
PINB3


	)

479 
	#DIO3_RPORT
 
PINB


	)

480 
	#DIO3_WPORT
 
PORTB


	)

481 
	#DIO3_DDR
 
DDRB


	)

482 
	#DIO3_PWM
 
OCR0A


	)

484 
	#DIO4_PIN
 
PINB4


	)

485 
	#DIO4_RPORT
 
PINB


	)

486 
	#DIO4_WPORT
 
PORTB


	)

487 
	#DIO4_DDR
 
DDRB


	)

488 
	#DIO4_PWM
 
OCR0B


	)

490 
	#DIO5_PIN
 
PINB5


	)

491 
	#DIO5_RPORT
 
PINB


	)

492 
	#DIO5_WPORT
 
PORTB


	)

493 
	#DIO5_DDR
 
DDRB


	)

494 
	#DIO5_PWM
 
NULL


	)

496 
	#DIO6_PIN
 
PINB6


	)

497 
	#DIO6_RPORT
 
PINB


	)

498 
	#DIO6_WPORT
 
PORTB


	)

499 
	#DIO6_DDR
 
DDRB


	)

500 
	#DIO6_PWM
 
NULL


	)

502 
	#DIO7_PIN
 
PINB7


	)

503 
	#DIO7_RPORT
 
PINB


	)

504 
	#DIO7_WPORT
 
PORTB


	)

505 
	#DIO7_DDR
 
DDRB


	)

506 
	#DIO7_PWM
 
NULL


	)

508 
	#DIO8_PIN
 
PIND0


	)

509 
	#DIO8_RPORT
 
PIND


	)

510 
	#DIO8_WPORT
 
PORTD


	)

511 
	#DIO8_DDR
 
DDRD


	)

512 
	#DIO8_PWM
 
NULL


	)

514 
	#DIO9_PIN
 
PIND1


	)

515 
	#DIO9_RPORT
 
PIND


	)

516 
	#DIO9_WPORT
 
PORTD


	)

517 
	#DIO9_DDR
 
DDRD


	)

518 
	#DIO9_PWM
 
NULL


	)

520 
	#DIO10_PIN
 
PIND2


	)

521 
	#DIO10_RPORT
 
PIND


	)

522 
	#DIO10_WPORT
 
PORTD


	)

523 
	#DIO10_DDR
 
DDRD


	)

524 
	#DIO10_PWM
 
NULL


	)

526 
	#DIO11_PIN
 
PIND3


	)

527 
	#DIO11_RPORT
 
PIND


	)

528 
	#DIO11_WPORT
 
PORTD


	)

529 
	#DIO11_DDR
 
DDRD


	)

530 
	#DIO11_PWM
 
NULL


	)

532 
	#DIO12_PIN
 
PIND4


	)

533 
	#DIO12_RPORT
 
PIND


	)

534 
	#DIO12_WPORT
 
PORTD


	)

535 
	#DIO12_DDR
 
DDRD


	)

536 
	#DIO12_PWM
 
OCR1B


	)

538 
	#DIO13_PIN
 
PIND5


	)

539 
	#DIO13_RPORT
 
PIND


	)

540 
	#DIO13_WPORT
 
PORTD


	)

541 
	#DIO13_DDR
 
DDRD


	)

542 
	#DIO13_PWM
 
OCR1A


	)

544 
	#DIO14_PIN
 
PIND6


	)

545 
	#DIO14_RPORT
 
PIND


	)

546 
	#DIO14_WPORT
 
PORTD


	)

547 
	#DIO14_DDR
 
DDRD


	)

548 
	#DIO14_PWM
 
OCR2B


	)

550 
	#DIO15_PIN
 
PIND7


	)

551 
	#DIO15_RPORT
 
PIND


	)

552 
	#DIO15_WPORT
 
PORTD


	)

553 
	#DIO15_DDR
 
DDRD


	)

554 
	#DIO15_PWM
 
OCR2A


	)

556 
	#DIO16_PIN
 
PINC0


	)

557 
	#DIO16_RPORT
 
PINC


	)

558 
	#DIO16_WPORT
 
PORTC


	)

559 
	#DIO16_DDR
 
DDRC


	)

560 
	#DIO16_PWM
 
NULL


	)

562 
	#DIO17_PIN
 
PINC1


	)

563 
	#DIO17_RPORT
 
PINC


	)

564 
	#DIO17_WPORT
 
PORTC


	)

565 
	#DIO17_DDR
 
DDRC


	)

566 
	#DIO17_PWM
 
NULL


	)

568 
	#DIO18_PIN
 
PINC2


	)

569 
	#DIO18_RPORT
 
PINC


	)

570 
	#DIO18_WPORT
 
PORTC


	)

571 
	#DIO18_DDR
 
DDRC


	)

572 
	#DIO18_PWM
 
NULL


	)

574 
	#DIO19_PIN
 
PINC3


	)

575 
	#DIO19_RPORT
 
PINC


	)

576 
	#DIO19_WPORT
 
PORTC


	)

577 
	#DIO19_DDR
 
DDRC


	)

578 
	#DIO19_PWM
 
NULL


	)

580 
	#DIO20_PIN
 
PINC4


	)

581 
	#DIO20_RPORT
 
PINC


	)

582 
	#DIO20_WPORT
 
PORTC


	)

583 
	#DIO20_DDR
 
DDRC


	)

584 
	#DIO20_PWM
 
NULL


	)

586 
	#DIO21_PIN
 
PINC5


	)

587 
	#DIO21_RPORT
 
PINC


	)

588 
	#DIO21_WPORT
 
PORTC


	)

589 
	#DIO21_DDR
 
DDRC


	)

590 
	#DIO21_PWM
 
NULL


	)

592 
	#DIO22_PIN
 
PINC6


	)

593 
	#DIO22_RPORT
 
PINC


	)

594 
	#DIO22_WPORT
 
PORTC


	)

595 
	#DIO22_DDR
 
DDRC


	)

596 
	#DIO22_PWM
 
NULL


	)

598 
	#DIO23_PIN
 
PINC7


	)

599 
	#DIO23_RPORT
 
PINC


	)

600 
	#DIO23_WPORT
 
PORTC


	)

601 
	#DIO23_DDR
 
DDRC


	)

602 
	#DIO23_PWM
 
NULL


	)

604 
	#DIO24_PIN
 
PINA7


	)

605 
	#DIO24_RPORT
 
PINA


	)

606 
	#DIO24_WPORT
 
PORTA


	)

607 
	#DIO24_DDR
 
DDRA


	)

608 
	#DIO24_PWM
 
NULL


	)

610 
	#DIO25_PIN
 
PINA6


	)

611 
	#DIO25_RPORT
 
PINA


	)

612 
	#DIO25_WPORT
 
PORTA


	)

613 
	#DIO25_DDR
 
DDRA


	)

614 
	#DIO25_PWM
 
NULL


	)

616 
	#DIO26_PIN
 
PINA5


	)

617 
	#DIO26_RPORT
 
PINA


	)

618 
	#DIO26_WPORT
 
PORTA


	)

619 
	#DIO26_DDR
 
DDRA


	)

620 
	#DIO26_PWM
 
NULL


	)

622 
	#DIO27_PIN
 
PINA4


	)

623 
	#DIO27_RPORT
 
PINA


	)

624 
	#DIO27_WPORT
 
PORTA


	)

625 
	#DIO27_DDR
 
DDRA


	)

626 
	#DIO27_PWM
 
NULL


	)

628 
	#DIO28_PIN
 
PINA3


	)

629 
	#DIO28_RPORT
 
PINA


	)

630 
	#DIO28_WPORT
 
PORTA


	)

631 
	#DIO28_DDR
 
DDRA


	)

632 
	#DIO28_PWM
 
NULL


	)

634 
	#DIO29_PIN
 
PINA2


	)

635 
	#DIO29_RPORT
 
PINA


	)

636 
	#DIO29_WPORT
 
PORTA


	)

637 
	#DIO29_DDR
 
DDRA


	)

638 
	#DIO29_PWM
 
NULL


	)

640 
	#DIO30_PIN
 
PINA1


	)

641 
	#DIO30_RPORT
 
PINA


	)

642 
	#DIO30_WPORT
 
PORTA


	)

643 
	#DIO30_DDR
 
DDRA


	)

644 
	#DIO30_PWM
 
NULL


	)

646 
	#DIO31_PIN
 
PINA0


	)

647 
	#DIO31_RPORT
 
PINA


	)

648 
	#DIO31_WPORT
 
PORTA


	)

649 
	#DIO31_DDR
 
DDRA


	)

650 
	#DIO31_PWM
 
NULL


	)

652 
	#AIO0_PIN
 
PINA0


	)

653 
	#AIO0_RPORT
 
PINA


	)

654 
	#AIO0_WPORT
 
PORTA


	)

655 
	#AIO0_DDR
 
DDRA


	)

656 
	#AIO0_PWM
 
NULL


	)

658 
	#AIO1_PIN
 
PINA1


	)

659 
	#AIO1_RPORT
 
PINA


	)

660 
	#AIO1_WPORT
 
PORTA


	)

661 
	#AIO1_DDR
 
DDRA


	)

662 
	#AIO1_PWM
 
NULL


	)

664 
	#AIO2_PIN
 
PINA2


	)

665 
	#AIO2_RPORT
 
PINA


	)

666 
	#AIO2_WPORT
 
PORTA


	)

667 
	#AIO2_DDR
 
DDRA


	)

668 
	#AIO2_PWM
 
NULL


	)

670 
	#AIO3_PIN
 
PINA3


	)

671 
	#AIO3_RPORT
 
PINA


	)

672 
	#AIO3_WPORT
 
PORTA


	)

673 
	#AIO3_DDR
 
DDRA


	)

674 
	#AIO3_PWM
 
NULL


	)

676 
	#AIO4_PIN
 
PINA4


	)

677 
	#AIO4_RPORT
 
PINA


	)

678 
	#AIO4_WPORT
 
PORTA


	)

679 
	#AIO4_DDR
 
DDRA


	)

680 
	#AIO4_PWM
 
NULL


	)

682 
	#AIO5_PIN
 
PINA5


	)

683 
	#AIO5_RPORT
 
PINA


	)

684 
	#AIO5_WPORT
 
PORTA


	)

685 
	#AIO5_DDR
 
DDRA


	)

686 
	#AIO5_PWM
 
NULL


	)

688 
	#AIO6_PIN
 
PINA6


	)

689 
	#AIO6_RPORT
 
PINA


	)

690 
	#AIO6_WPORT
 
PORTA


	)

691 
	#AIO6_DDR
 
DDRA


	)

692 
	#AIO6_PWM
 
NULL


	)

694 
	#AIO7_PIN
 
PINA7


	)

695 
	#AIO7_RPORT
 
PINA


	)

696 
	#AIO7_WPORT
 
PORTA


	)

697 
	#AIO7_DDR
 
DDRA


	)

698 
	#AIO7_PWM
 
NULL


	)

702 #unde‡
PA0


703 
	#PA0_PIN
 
PINA0


	)

704 
	#PA0_RPORT
 
PINA


	)

705 
	#PA0_WPORT
 
PORTA


	)

706 
	#PA0_DDR
 
DDRA


	)

707 
	#PA0_PWM
 
NULL


	)

709 #unde‡
PA1


710 
	#PA1_PIN
 
PINA1


	)

711 
	#PA1_RPORT
 
PINA


	)

712 
	#PA1_WPORT
 
PORTA


	)

713 
	#PA1_DDR
 
DDRA


	)

714 
	#PA1_PWM
 
NULL


	)

716 #unde‡
PA2


717 
	#PA2_PIN
 
PINA2


	)

718 
	#PA2_RPORT
 
PINA


	)

719 
	#PA2_WPORT
 
PORTA


	)

720 
	#PA2_DDR
 
DDRA


	)

721 
	#PA2_PWM
 
NULL


	)

723 #unde‡
PA3


724 
	#PA3_PIN
 
PINA3


	)

725 
	#PA3_RPORT
 
PINA


	)

726 
	#PA3_WPORT
 
PORTA


	)

727 
	#PA3_DDR
 
DDRA


	)

728 
	#PA3_PWM
 
NULL


	)

730 #unde‡
PA4


731 
	#PA4_PIN
 
PINA4


	)

732 
	#PA4_RPORT
 
PINA


	)

733 
	#PA4_WPORT
 
PORTA


	)

734 
	#PA4_DDR
 
DDRA


	)

735 
	#PA4_PWM
 
NULL


	)

737 #unde‡
PA5


738 
	#PA5_PIN
 
PINA5


	)

739 
	#PA5_RPORT
 
PINA


	)

740 
	#PA5_WPORT
 
PORTA


	)

741 
	#PA5_DDR
 
DDRA


	)

742 
	#PA5_PWM
 
NULL


	)

744 #unde‡
PA6


745 
	#PA6_PIN
 
PINA6


	)

746 
	#PA6_RPORT
 
PINA


	)

747 
	#PA6_WPORT
 
PORTA


	)

748 
	#PA6_DDR
 
DDRA


	)

749 
	#PA6_PWM
 
NULL


	)

751 #unde‡
PA7


752 
	#PA7_PIN
 
PINA7


	)

753 
	#PA7_RPORT
 
PINA


	)

754 
	#PA7_WPORT
 
PORTA


	)

755 
	#PA7_DDR
 
DDRA


	)

756 
	#PA7_PWM
 
NULL


	)

759 #unde‡
PB0


760 
	#PB0_PIN
 
PINB0


	)

761 
	#PB0_RPORT
 
PINB


	)

762 
	#PB0_WPORT
 
PORTB


	)

763 
	#PB0_DDR
 
DDRB


	)

764 
	#PB0_PWM
 
NULL


	)

766 #unde‡
PB1


767 
	#PB1_PIN
 
PINB1


	)

768 
	#PB1_RPORT
 
PINB


	)

769 
	#PB1_WPORT
 
PORTB


	)

770 
	#PB1_DDR
 
DDRB


	)

771 
	#PB1_PWM
 
NULL


	)

773 #unde‡
PB2


774 
	#PB2_PIN
 
PINB2


	)

775 
	#PB2_RPORT
 
PINB


	)

776 
	#PB2_WPORT
 
PORTB


	)

777 
	#PB2_DDR
 
DDRB


	)

778 
	#PB2_PWM
 
NULL


	)

780 #unde‡
PB3


781 
	#PB3_PIN
 
PINB3


	)

782 
	#PB3_RPORT
 
PINB


	)

783 
	#PB3_WPORT
 
PORTB


	)

784 
	#PB3_DDR
 
DDRB


	)

785 
	#PB3_PWM
 
OCR0A


	)

787 #unde‡
PB4


788 
	#PB4_PIN
 
PINB4


	)

789 
	#PB4_RPORT
 
PINB


	)

790 
	#PB4_WPORT
 
PORTB


	)

791 
	#PB4_DDR
 
DDRB


	)

792 
	#PB4_PWM
 
OCR0B


	)

794 #unde‡
PB5


795 
	#PB5_PIN
 
PINB5


	)

796 
	#PB5_RPORT
 
PINB


	)

797 
	#PB5_WPORT
 
PORTB


	)

798 
	#PB5_DDR
 
DDRB


	)

799 
	#PB5_PWM
 
NULL


	)

801 #unde‡
PB6


802 
	#PB6_PIN
 
PINB6


	)

803 
	#PB6_RPORT
 
PINB


	)

804 
	#PB6_WPORT
 
PORTB


	)

805 
	#PB6_DDR
 
DDRB


	)

806 
	#PB6_PWM
 
NULL


	)

808 #unde‡
PB7


809 
	#PB7_PIN
 
PINB7


	)

810 
	#PB7_RPORT
 
PINB


	)

811 
	#PB7_WPORT
 
PORTB


	)

812 
	#PB7_DDR
 
DDRB


	)

813 
	#PB7_PWM
 
NULL


	)

816 #unde‡
PC0


817 
	#PC0_PIN
 
PINC0


	)

818 
	#PC0_RPORT
 
PINC


	)

819 
	#PC0_WPORT
 
PORTC


	)

820 
	#PC0_DDR
 
DDRC


	)

821 
	#PC0_PWM
 
NULL


	)

823 #unde‡
PC1


824 
	#PC1_PIN
 
PINC1


	)

825 
	#PC1_RPORT
 
PINC


	)

826 
	#PC1_WPORT
 
PORTC


	)

827 
	#PC1_DDR
 
DDRC


	)

828 
	#PC1_PWM
 
NULL


	)

830 #unde‡
PC2


831 
	#PC2_PIN
 
PINC2


	)

832 
	#PC2_RPORT
 
PINC


	)

833 
	#PC2_WPORT
 
PORTC


	)

834 
	#PC2_DDR
 
DDRC


	)

835 
	#PC2_PWM
 
NULL


	)

837 #unde‡
PC3


838 
	#PC3_PIN
 
PINC3


	)

839 
	#PC3_RPORT
 
PINC


	)

840 
	#PC3_WPORT
 
PORTC


	)

841 
	#PC3_DDR
 
DDRC


	)

842 
	#PC3_PWM
 
NULL


	)

844 #unde‡
PC4


845 
	#PC4_PIN
 
PINC4


	)

846 
	#PC4_RPORT
 
PINC


	)

847 
	#PC4_WPORT
 
PORTC


	)

848 
	#PC4_DDR
 
DDRC


	)

849 
	#PC4_PWM
 
NULL


	)

851 #unde‡
PC5


852 
	#PC5_PIN
 
PINC5


	)

853 
	#PC5_RPORT
 
PINC


	)

854 
	#PC5_WPORT
 
PORTC


	)

855 
	#PC5_DDR
 
DDRC


	)

856 
	#PC5_PWM
 
NULL


	)

858 #unde‡
PC6


859 
	#PC6_PIN
 
PINC6


	)

860 
	#PC6_RPORT
 
PINC


	)

861 
	#PC6_WPORT
 
PORTC


	)

862 
	#PC6_DDR
 
DDRC


	)

863 
	#PC6_PWM
 
NULL


	)

865 #unde‡
PC7


866 
	#PC7_PIN
 
PINC7


	)

867 
	#PC7_RPORT
 
PINC


	)

868 
	#PC7_WPORT
 
PORTC


	)

869 
	#PC7_DDR
 
DDRC


	)

870 
	#PC7_PWM
 
NULL


	)

873 #unde‡
PD0


874 
	#PD0_PIN
 
PIND0


	)

875 
	#PD0_RPORT
 
PIND


	)

876 
	#PD0_WPORT
 
PORTD


	)

877 
	#PD0_DDR
 
DDRD


	)

878 
	#PD0_PWM
 
NULL


	)

880 #unde‡
PD1


881 
	#PD1_PIN
 
PIND1


	)

882 
	#PD1_RPORT
 
PIND


	)

883 
	#PD1_WPORT
 
PORTD


	)

884 
	#PD1_DDR
 
DDRD


	)

885 
	#PD1_PWM
 
NULL


	)

887 #unde‡
PD2


888 
	#PD2_PIN
 
PIND2


	)

889 
	#PD2_RPORT
 
PIND


	)

890 
	#PD2_WPORT
 
PORTD


	)

891 
	#PD2_DDR
 
DDRD


	)

892 
	#PD2_PWM
 
NULL


	)

894 #unde‡
PD3


895 
	#PD3_PIN
 
PIND3


	)

896 
	#PD3_RPORT
 
PIND


	)

897 
	#PD3_WPORT
 
PORTD


	)

898 
	#PD3_DDR
 
DDRD


	)

899 
	#PD3_PWM
 
NULL


	)

901 #unde‡
PD4


902 
	#PD4_PIN
 
PIND4


	)

903 
	#PD4_RPORT
 
PIND


	)

904 
	#PD4_WPORT
 
PORTD


	)

905 
	#PD4_DDR
 
DDRD


	)

906 
	#PD4_PWM
 
NULL


	)

908 #unde‡
PD5


909 
	#PD5_PIN
 
PIND5


	)

910 
	#PD5_RPORT
 
PIND


	)

911 
	#PD5_WPORT
 
PORTD


	)

912 
	#PD5_DDR
 
DDRD


	)

913 
	#PD5_PWM
 
NULL


	)

915 #unde‡
PD6


916 
	#PD6_PIN
 
PIND6


	)

917 
	#PD6_RPORT
 
PIND


	)

918 
	#PD6_WPORT
 
PORTD


	)

919 
	#PD6_DDR
 
DDRD


	)

920 
	#PD6_PWM
 
OCR2B


	)

922 #unde‡
PD7


923 
	#PD7_PIN
 
PIND7


	)

924 
	#PD7_RPORT
 
PIND


	)

925 
	#PD7_WPORT
 
PORTD


	)

926 
	#PD7_DDR
 
DDRD


	)

927 
	#PD7_PWM
 
OCR2A


	)

930 #i‡
deföed
 (
__AVR_ATmega1280__
Ë|| deföed (
__AVR_ATmega2560__
)

932 
	#RXD
 
DIO0


	)

933 
	#TXD
 
DIO1


	)

936 
	#SCK
 
DIO52


	)

937 
	#MISO
 
DIO50


	)

938 
	#MOSI
 
DIO51


	)

939 
	#SS
 
DIO53


	)

942 
	#SCL
 
DIO21


	)

943 
	#SDA
 
DIO20


	)

946 
	#OC0A
 
DIO13


	)

947 
	#OC0B
 
DIO4


	)

948 
	#OC1A
 
DIO11


	)

949 
	#OC1B
 
DIO12


	)

950 
	#OC2A
 
DIO10


	)

951 
	#OC2B
 
DIO9


	)

952 
	#OC3A
 
DIO5


	)

953 
	#OC3B
 
DIO2


	)

954 
	#OC3C
 
DIO3


	)

955 
	#OC4A
 
DIO6


	)

956 
	#OC4B
 
DIO7


	)

957 
	#OC4C
 
DIO8


	)

958 
	#OC5A
 
DIO46


	)

959 
	#OC5B
 
DIO45


	)

960 
	#OC5C
 
DIO44


	)

963 
	#DEBUG_LED
 
DIO21


	)

968 
	#DIO0_PIN
 
PINE0


	)

969 
	#DIO0_RPORT
 
PINE


	)

970 
	#DIO0_WPORT
 
PORTE


	)

971 
	#DIO0_DDR
 
DDRE


	)

972 
	#DIO0_PWM
 
NULL


	)

974 
	#DIO1_PIN
 
PINE1


	)

975 
	#DIO1_RPORT
 
PINE


	)

976 
	#DIO1_WPORT
 
PORTE


	)

977 
	#DIO1_DDR
 
DDRE


	)

978 
	#DIO1_PWM
 
NULL


	)

980 
	#DIO2_PIN
 
PINE4


	)

981 
	#DIO2_RPORT
 
PINE


	)

982 
	#DIO2_WPORT
 
PORTE


	)

983 
	#DIO2_DDR
 
DDRE


	)

984 
	#DIO2_PWM
 &
OCR3BL


	)

986 
	#DIO3_PIN
 
PINE5


	)

987 
	#DIO3_RPORT
 
PINE


	)

988 
	#DIO3_WPORT
 
PORTE


	)

989 
	#DIO3_DDR
 
DDRE


	)

990 
	#DIO3_PWM
 &
OCR3CL


	)

992 
	#DIO4_PIN
 
PING5


	)

993 
	#DIO4_RPORT
 
PING


	)

994 
	#DIO4_WPORT
 
PORTG


	)

995 
	#DIO4_DDR
 
DDRG


	)

996 
	#DIO4_PWM
 &
OCR0B


	)

998 
	#DIO5_PIN
 
PINE3


	)

999 
	#DIO5_RPORT
 
PINE


	)

1000 
	#DIO5_WPORT
 
PORTE


	)

1001 
	#DIO5_DDR
 
DDRE


	)

1002 
	#DIO5_PWM
 &
OCR3AL


	)

1004 
	#DIO6_PIN
 
PINH3


	)

1005 
	#DIO6_RPORT
 
PINH


	)

1006 
	#DIO6_WPORT
 
PORTH


	)

1007 
	#DIO6_DDR
 
DDRH


	)

1008 
	#DIO6_PWM
 &
OCR4AL


	)

1010 
	#DIO7_PIN
 
PINH4


	)

1011 
	#DIO7_RPORT
 
PINH


	)

1012 
	#DIO7_WPORT
 
PORTH


	)

1013 
	#DIO7_DDR
 
DDRH


	)

1014 
	#DIO7_PWM
 &
OCR4BL


	)

1016 
	#DIO8_PIN
 
PINH5


	)

1017 
	#DIO8_RPORT
 
PINH


	)

1018 
	#DIO8_WPORT
 
PORTH


	)

1019 
	#DIO8_DDR
 
DDRH


	)

1020 
	#DIO8_PWM
 &
OCR4CL


	)

1022 
	#DIO9_PIN
 
PINH6


	)

1023 
	#DIO9_RPORT
 
PINH


	)

1024 
	#DIO9_WPORT
 
PORTH


	)

1025 
	#DIO9_DDR
 
DDRH


	)

1026 
	#DIO9_PWM
 &
OCR2B


	)

1028 
	#DIO10_PIN
 
PINB4


	)

1029 
	#DIO10_RPORT
 
PINB


	)

1030 
	#DIO10_WPORT
 
PORTB


	)

1031 
	#DIO10_DDR
 
DDRB


	)

1032 
	#DIO10_PWM
 &
OCR2A


	)

1034 
	#DIO11_PIN
 
PINB5


	)

1035 
	#DIO11_RPORT
 
PINB


	)

1036 
	#DIO11_WPORT
 
PORTB


	)

1037 
	#DIO11_DDR
 
DDRB


	)

1038 
	#DIO11_PWM
 
NULL


	)

1040 
	#DIO12_PIN
 
PINB6


	)

1041 
	#DIO12_RPORT
 
PINB


	)

1042 
	#DIO12_WPORT
 
PORTB


	)

1043 
	#DIO12_DDR
 
DDRB


	)

1044 
	#DIO12_PWM
 
NULL


	)

1046 
	#DIO13_PIN
 
PINB7


	)

1047 
	#DIO13_RPORT
 
PINB


	)

1048 
	#DIO13_WPORT
 
PORTB


	)

1049 
	#DIO13_DDR
 
DDRB


	)

1050 
	#DIO13_PWM
 &
OCR0A


	)

1052 
	#DIO14_PIN
 
PINJ1


	)

1053 
	#DIO14_RPORT
 
PINJ


	)

1054 
	#DIO14_WPORT
 
PORTJ


	)

1055 
	#DIO14_DDR
 
DDRJ


	)

1056 
	#DIO14_PWM
 
NULL


	)

1058 
	#DIO15_PIN
 
PINJ0


	)

1059 
	#DIO15_RPORT
 
PINJ


	)

1060 
	#DIO15_WPORT
 
PORTJ


	)

1061 
	#DIO15_DDR
 
DDRJ


	)

1062 
	#DIO15_PWM
 
NULL


	)

1064 
	#DIO16_PIN
 
PINH1


	)

1065 
	#DIO16_RPORT
 
PINH


	)

1066 
	#DIO16_WPORT
 
PORTH


	)

1067 
	#DIO16_DDR
 
DDRH


	)

1068 
	#DIO16_PWM
 
NULL


	)

1070 
	#DIO17_PIN
 
PINH0


	)

1071 
	#DIO17_RPORT
 
PINH


	)

1072 
	#DIO17_WPORT
 
PORTH


	)

1073 
	#DIO17_DDR
 
DDRH


	)

1074 
	#DIO17_PWM
 
NULL


	)

1076 
	#DIO18_PIN
 
PIND3


	)

1077 
	#DIO18_RPORT
 
PIND


	)

1078 
	#DIO18_WPORT
 
PORTD


	)

1079 
	#DIO18_DDR
 
DDRD


	)

1080 
	#DIO18_PWM
 
NULL


	)

1082 
	#DIO19_PIN
 
PIND2


	)

1083 
	#DIO19_RPORT
 
PIND


	)

1084 
	#DIO19_WPORT
 
PORTD


	)

1085 
	#DIO19_DDR
 
DDRD


	)

1086 
	#DIO19_PWM
 
NULL


	)

1088 
	#DIO20_PIN
 
PIND1


	)

1089 
	#DIO20_RPORT
 
PIND


	)

1090 
	#DIO20_WPORT
 
PORTD


	)

1091 
	#DIO20_DDR
 
DDRD


	)

1092 
	#DIO20_PWM
 
NULL


	)

1094 
	#DIO21_PIN
 
PIND0


	)

1095 
	#DIO21_RPORT
 
PIND


	)

1096 
	#DIO21_WPORT
 
PORTD


	)

1097 
	#DIO21_DDR
 
DDRD


	)

1098 
	#DIO21_PWM
 
NULL


	)

1100 
	#DIO22_PIN
 
PINA0


	)

1101 
	#DIO22_RPORT
 
PINA


	)

1102 
	#DIO22_WPORT
 
PORTA


	)

1103 
	#DIO22_DDR
 
DDRA


	)

1104 
	#DIO22_PWM
 
NULL


	)

1106 
	#DIO23_PIN
 
PINA1


	)

1107 
	#DIO23_RPORT
 
PINA


	)

1108 
	#DIO23_WPORT
 
PORTA


	)

1109 
	#DIO23_DDR
 
DDRA


	)

1110 
	#DIO23_PWM
 
NULL


	)

1112 
	#DIO24_PIN
 
PINA2


	)

1113 
	#DIO24_RPORT
 
PINA


	)

1114 
	#DIO24_WPORT
 
PORTA


	)

1115 
	#DIO24_DDR
 
DDRA


	)

1116 
	#DIO24_PWM
 
NULL


	)

1118 
	#DIO25_PIN
 
PINA3


	)

1119 
	#DIO25_RPORT
 
PINA


	)

1120 
	#DIO25_WPORT
 
PORTA


	)

1121 
	#DIO25_DDR
 
DDRA


	)

1122 
	#DIO25_PWM
 
NULL


	)

1124 
	#DIO26_PIN
 
PINA4


	)

1125 
	#DIO26_RPORT
 
PINA


	)

1126 
	#DIO26_WPORT
 
PORTA


	)

1127 
	#DIO26_DDR
 
DDRA


	)

1128 
	#DIO26_PWM
 
NULL


	)

1130 
	#DIO27_PIN
 
PINA5


	)

1131 
	#DIO27_RPORT
 
PINA


	)

1132 
	#DIO27_WPORT
 
PORTA


	)

1133 
	#DIO27_DDR
 
DDRA


	)

1134 
	#DIO27_PWM
 
NULL


	)

1136 
	#DIO28_PIN
 
PINA6


	)

1137 
	#DIO28_RPORT
 
PINA


	)

1138 
	#DIO28_WPORT
 
PORTA


	)

1139 
	#DIO28_DDR
 
DDRA


	)

1140 
	#DIO28_PWM
 
NULL


	)

1142 
	#DIO29_PIN
 
PINA7


	)

1143 
	#DIO29_RPORT
 
PINA


	)

1144 
	#DIO29_WPORT
 
PORTA


	)

1145 
	#DIO29_DDR
 
DDRA


	)

1146 
	#DIO29_PWM
 
NULL


	)

1148 
	#DIO30_PIN
 
PINC7


	)

1149 
	#DIO30_RPORT
 
PINC


	)

1150 
	#DIO30_WPORT
 
PORTC


	)

1151 
	#DIO30_DDR
 
DDRC


	)

1152 
	#DIO30_PWM
 
NULL


	)

1154 
	#DIO31_PIN
 
PINC6


	)

1155 
	#DIO31_RPORT
 
PINC


	)

1156 
	#DIO31_WPORT
 
PORTC


	)

1157 
	#DIO31_DDR
 
DDRC


	)

1158 
	#DIO31_PWM
 
NULL


	)

1160 
	#DIO32_PIN
 
PINC5


	)

1161 
	#DIO32_RPORT
 
PINC


	)

1162 
	#DIO32_WPORT
 
PORTC


	)

1163 
	#DIO32_DDR
 
DDRC


	)

1164 
	#DIO32_PWM
 
NULL


	)

1166 
	#DIO33_PIN
 
PINC4


	)

1167 
	#DIO33_RPORT
 
PINC


	)

1168 
	#DIO33_WPORT
 
PORTC


	)

1169 
	#DIO33_DDR
 
DDRC


	)

1170 
	#DIO33_PWM
 
NULL


	)

1172 
	#DIO34_PIN
 
PINC3


	)

1173 
	#DIO34_RPORT
 
PINC


	)

1174 
	#DIO34_WPORT
 
PORTC


	)

1175 
	#DIO34_DDR
 
DDRC


	)

1176 
	#DIO34_PWM
 
NULL


	)

1178 
	#DIO35_PIN
 
PINC2


	)

1179 
	#DIO35_RPORT
 
PINC


	)

1180 
	#DIO35_WPORT
 
PORTC


	)

1181 
	#DIO35_DDR
 
DDRC


	)

1182 
	#DIO35_PWM
 
NULL


	)

1184 
	#DIO36_PIN
 
PINC1


	)

1185 
	#DIO36_RPORT
 
PINC


	)

1186 
	#DIO36_WPORT
 
PORTC


	)

1187 
	#DIO36_DDR
 
DDRC


	)

1188 
	#DIO36_PWM
 
NULL


	)

1190 
	#DIO37_PIN
 
PINC0


	)

1191 
	#DIO37_RPORT
 
PINC


	)

1192 
	#DIO37_WPORT
 
PORTC


	)

1193 
	#DIO37_DDR
 
DDRC


	)

1194 
	#DIO37_PWM
 
NULL


	)

1196 
	#DIO38_PIN
 
PIND7


	)

1197 
	#DIO38_RPORT
 
PIND


	)

1198 
	#DIO38_WPORT
 
PORTD


	)

1199 
	#DIO38_DDR
 
DDRD


	)

1200 
	#DIO38_PWM
 
NULL


	)

1202 
	#DIO39_PIN
 
PING2


	)

1203 
	#DIO39_RPORT
 
PING


	)

1204 
	#DIO39_WPORT
 
PORTG


	)

1205 
	#DIO39_DDR
 
DDRG


	)

1206 
	#DIO39_PWM
 
NULL


	)

1208 
	#DIO40_PIN
 
PING1


	)

1209 
	#DIO40_RPORT
 
PING


	)

1210 
	#DIO40_WPORT
 
PORTG


	)

1211 
	#DIO40_DDR
 
DDRG


	)

1212 
	#DIO40_PWM
 
NULL


	)

1214 
	#DIO41_PIN
 
PING0


	)

1215 
	#DIO41_RPORT
 
PING


	)

1216 
	#DIO41_WPORT
 
PORTG


	)

1217 
	#DIO41_DDR
 
DDRG


	)

1218 
	#DIO41_PWM
 
NULL


	)

1220 
	#DIO42_PIN
 
PINL7


	)

1221 
	#DIO42_RPORT
 
PINL


	)

1222 
	#DIO42_WPORT
 
PORTL


	)

1223 
	#DIO42_DDR
 
DDRL


	)

1224 
	#DIO42_PWM
 
NULL


	)

1226 
	#DIO43_PIN
 
PINL6


	)

1227 
	#DIO43_RPORT
 
PINL


	)

1228 
	#DIO43_WPORT
 
PORTL


	)

1229 
	#DIO43_DDR
 
DDRL


	)

1230 
	#DIO43_PWM
 
NULL


	)

1232 
	#DIO44_PIN
 
PINL5


	)

1233 
	#DIO44_RPORT
 
PINL


	)

1234 
	#DIO44_WPORT
 
PORTL


	)

1235 
	#DIO44_DDR
 
DDRL


	)

1236 
	#DIO44_PWM
 &
OCR5CL


	)

1238 
	#DIO45_PIN
 
PINL4


	)

1239 
	#DIO45_RPORT
 
PINL


	)

1240 
	#DIO45_WPORT
 
PORTL


	)

1241 
	#DIO45_DDR
 
DDRL


	)

1242 
	#DIO45_PWM
 &
OCR5BL


	)

1244 
	#DIO46_PIN
 
PINL3


	)

1245 
	#DIO46_RPORT
 
PINL


	)

1246 
	#DIO46_WPORT
 
PORTL


	)

1247 
	#DIO46_DDR
 
DDRL


	)

1248 
	#DIO46_PWM
 &
OCR5AL


	)

1250 
	#DIO47_PIN
 
PINL2


	)

1251 
	#DIO47_RPORT
 
PINL


	)

1252 
	#DIO47_WPORT
 
PORTL


	)

1253 
	#DIO47_DDR
 
DDRL


	)

1254 
	#DIO47_PWM
 
NULL


	)

1256 
	#DIO48_PIN
 
PINL1


	)

1257 
	#DIO48_RPORT
 
PINL


	)

1258 
	#DIO48_WPORT
 
PORTL


	)

1259 
	#DIO48_DDR
 
DDRL


	)

1260 
	#DIO48_PWM
 
NULL


	)

1262 
	#DIO49_PIN
 
PINL0


	)

1263 
	#DIO49_RPORT
 
PINL


	)

1264 
	#DIO49_WPORT
 
PORTL


	)

1265 
	#DIO49_DDR
 
DDRL


	)

1266 
	#DIO49_PWM
 
NULL


	)

1268 
	#DIO50_PIN
 
PINB3


	)

1269 
	#DIO50_RPORT
 
PINB


	)

1270 
	#DIO50_WPORT
 
PORTB


	)

1271 
	#DIO50_DDR
 
DDRB


	)

1272 
	#DIO50_PWM
 
NULL


	)

1274 
	#DIO51_PIN
 
PINB2


	)

1275 
	#DIO51_RPORT
 
PINB


	)

1276 
	#DIO51_WPORT
 
PORTB


	)

1277 
	#DIO51_DDR
 
DDRB


	)

1278 
	#DIO51_PWM
 
NULL


	)

1280 
	#DIO52_PIN
 
PINB1


	)

1281 
	#DIO52_RPORT
 
PINB


	)

1282 
	#DIO52_WPORT
 
PORTB


	)

1283 
	#DIO52_DDR
 
DDRB


	)

1284 
	#DIO52_PWM
 
NULL


	)

1286 
	#DIO53_PIN
 
PINB0


	)

1287 
	#DIO53_RPORT
 
PINB


	)

1288 
	#DIO53_WPORT
 
PORTB


	)

1289 
	#DIO53_DDR
 
DDRB


	)

1290 
	#DIO53_PWM
 
NULL


	)

1292 
	#DIO54_PIN
 
PINF0


	)

1293 
	#DIO54_RPORT
 
PINF


	)

1294 
	#DIO54_WPORT
 
PORTF


	)

1295 
	#DIO54_DDR
 
DDRF


	)

1296 
	#DIO54_PWM
 
NULL


	)

1298 
	#DIO55_PIN
 
PINF1


	)

1299 
	#DIO55_RPORT
 
PINF


	)

1300 
	#DIO55_WPORT
 
PORTF


	)

1301 
	#DIO55_DDR
 
DDRF


	)

1302 
	#DIO55_PWM
 
NULL


	)

1304 
	#DIO56_PIN
 
PINF2


	)

1305 
	#DIO56_RPORT
 
PINF


	)

1306 
	#DIO56_WPORT
 
PORTF


	)

1307 
	#DIO56_DDR
 
DDRF


	)

1308 
	#DIO56_PWM
 
NULL


	)

1310 
	#DIO57_PIN
 
PINF3


	)

1311 
	#DIO57_RPORT
 
PINF


	)

1312 
	#DIO57_WPORT
 
PORTF


	)

1313 
	#DIO57_DDR
 
DDRF


	)

1314 
	#DIO57_PWM
 
NULL


	)

1316 
	#DIO58_PIN
 
PINF4


	)

1317 
	#DIO58_RPORT
 
PINF


	)

1318 
	#DIO58_WPORT
 
PORTF


	)

1319 
	#DIO58_DDR
 
DDRF


	)

1320 
	#DIO58_PWM
 
NULL


	)

1322 
	#DIO59_PIN
 
PINF5


	)

1323 
	#DIO59_RPORT
 
PINF


	)

1324 
	#DIO59_WPORT
 
PORTF


	)

1325 
	#DIO59_DDR
 
DDRF


	)

1326 
	#DIO59_PWM
 
NULL


	)

1328 
	#DIO60_PIN
 
PINF6


	)

1329 
	#DIO60_RPORT
 
PINF


	)

1330 
	#DIO60_WPORT
 
PORTF


	)

1331 
	#DIO60_DDR
 
DDRF


	)

1332 
	#DIO60_PWM
 
NULL


	)

1334 
	#DIO61_PIN
 
PINF7


	)

1335 
	#DIO61_RPORT
 
PINF


	)

1336 
	#DIO61_WPORT
 
PORTF


	)

1337 
	#DIO61_DDR
 
DDRF


	)

1338 
	#DIO61_PWM
 
NULL


	)

1340 
	#DIO62_PIN
 
PINK0


	)

1341 
	#DIO62_RPORT
 
PINK


	)

1342 
	#DIO62_WPORT
 
PORTK


	)

1343 
	#DIO62_DDR
 
DDRK


	)

1344 
	#DIO62_PWM
 
NULL


	)

1346 
	#DIO63_PIN
 
PINK1


	)

1347 
	#DIO63_RPORT
 
PINK


	)

1348 
	#DIO63_WPORT
 
PORTK


	)

1349 
	#DIO63_DDR
 
DDRK


	)

1350 
	#DIO63_PWM
 
NULL


	)

1352 
	#DIO64_PIN
 
PINK2


	)

1353 
	#DIO64_RPORT
 
PINK


	)

1354 
	#DIO64_WPORT
 
PORTK


	)

1355 
	#DIO64_DDR
 
DDRK


	)

1356 
	#DIO64_PWM
 
NULL


	)

1358 
	#DIO65_PIN
 
PINK3


	)

1359 
	#DIO65_RPORT
 
PINK


	)

1360 
	#DIO65_WPORT
 
PORTK


	)

1361 
	#DIO65_DDR
 
DDRK


	)

1362 
	#DIO65_PWM
 
NULL


	)

1364 
	#DIO66_PIN
 
PINK4


	)

1365 
	#DIO66_RPORT
 
PINK


	)

1366 
	#DIO66_WPORT
 
PORTK


	)

1367 
	#DIO66_DDR
 
DDRK


	)

1368 
	#DIO66_PWM
 
NULL


	)

1370 
	#DIO67_PIN
 
PINK5


	)

1371 
	#DIO67_RPORT
 
PINK


	)

1372 
	#DIO67_WPORT
 
PORTK


	)

1373 
	#DIO67_DDR
 
DDRK


	)

1374 
	#DIO67_PWM
 
NULL


	)

1376 
	#DIO68_PIN
 
PINK6


	)

1377 
	#DIO68_RPORT
 
PINK


	)

1378 
	#DIO68_WPORT
 
PORTK


	)

1379 
	#DIO68_DDR
 
DDRK


	)

1380 
	#DIO68_PWM
 
NULL


	)

1382 
	#DIO69_PIN
 
PINK7


	)

1383 
	#DIO69_RPORT
 
PINK


	)

1384 
	#DIO69_WPORT
 
PORTK


	)

1385 
	#DIO69_DDR
 
DDRK


	)

1386 
	#DIO69_PWM
 
NULL


	)

1388 
	#DIO70_PIN
 
PING4


	)

1389 
	#DIO70_RPORT
 
PING


	)

1390 
	#DIO70_WPORT
 
PORTG


	)

1391 
	#DIO70_DDR
 
DDRG


	)

1392 
	#DIO70_PWM
 
NULL


	)

1394 
	#DIO71_PIN
 
PING3


	)

1395 
	#DIO71_RPORT
 
PING


	)

1396 
	#DIO71_WPORT
 
PORTG


	)

1397 
	#DIO71_DDR
 
DDRG


	)

1398 
	#DIO71_PWM
 
NULL


	)

1400 
	#DIO72_PIN
 
PINJ2


	)

1401 
	#DIO72_RPORT
 
PINJ


	)

1402 
	#DIO72_WPORT
 
PORTJ


	)

1403 
	#DIO72_DDR
 
DDRJ


	)

1404 
	#DIO72_PWM
 
NULL


	)

1406 
	#DIO73_PIN
 
PINJ3


	)

1407 
	#DIO73_RPORT
 
PINJ


	)

1408 
	#DIO73_WPORT
 
PORTJ


	)

1409 
	#DIO73_DDR
 
DDRJ


	)

1410 
	#DIO73_PWM
 
NULL


	)

1412 
	#DIO74_PIN
 
PINJ7


	)

1413 
	#DIO74_RPORT
 
PINJ


	)

1414 
	#DIO74_WPORT
 
PORTJ


	)

1415 
	#DIO74_DDR
 
DDRJ


	)

1416 
	#DIO74_PWM
 
NULL


	)

1418 
	#DIO75_PIN
 
PINJ4


	)

1419 
	#DIO75_RPORT
 
PINJ


	)

1420 
	#DIO75_WPORT
 
PORTJ


	)

1421 
	#DIO75_DDR
 
DDRJ


	)

1422 
	#DIO75_PWM
 
NULL


	)

1424 
	#DIO76_PIN
 
PINJ5


	)

1425 
	#DIO76_RPORT
 
PINJ


	)

1426 
	#DIO76_WPORT
 
PORTJ


	)

1427 
	#DIO76_DDR
 
DDRJ


	)

1428 
	#DIO76_PWM
 
NULL


	)

1430 
	#DIO77_PIN
 
PINJ6


	)

1431 
	#DIO77_RPORT
 
PINJ


	)

1432 
	#DIO77_WPORT
 
PORTJ


	)

1433 
	#DIO77_DDR
 
DDRJ


	)

1434 
	#DIO77_PWM
 
NULL


	)

1436 
	#DIO78_PIN
 
PINE2


	)

1437 
	#DIO78_RPORT
 
PINE


	)

1438 
	#DIO78_WPORT
 
PORTE


	)

1439 
	#DIO78_DDR
 
DDRE


	)

1440 
	#DIO78_PWM
 
NULL


	)

1442 
	#DIO79_PIN
 
PINE6


	)

1443 
	#DIO79_RPORT
 
PINE


	)

1444 
	#DIO79_WPORT
 
PORTE


	)

1445 
	#DIO79_DDR
 
DDRE


	)

1446 
	#DIO79_PWM
 
NULL


	)

1448 
	#DIO80_PIN
 
PINE7


	)

1449 
	#DIO80_RPORT
 
PINE


	)

1450 
	#DIO80_WPORT
 
PORTE


	)

1451 
	#DIO80_DDR
 
DDRE


	)

1452 
	#DIO80_PWM
 
NULL


	)

1454 
	#DIO81_PIN
 
PIND4


	)

1455 
	#DIO81_RPORT
 
PIND


	)

1456 
	#DIO81_WPORT
 
PORTD


	)

1457 
	#DIO81_DDR
 
DDRD


	)

1458 
	#DIO81_PWM
 
NULL


	)

1460 
	#DIO82_PIN
 
PIND5


	)

1461 
	#DIO82_RPORT
 
PIND


	)

1462 
	#DIO82_WPORT
 
PORTD


	)

1463 
	#DIO82_DDR
 
DDRD


	)

1464 
	#DIO82_PWM
 
NULL


	)

1466 
	#DIO83_PIN
 
PIND6


	)

1467 
	#DIO83_RPORT
 
PIND


	)

1468 
	#DIO83_WPORT
 
PORTD


	)

1469 
	#DIO83_DDR
 
DDRD


	)

1470 
	#DIO83_PWM
 
NULL


	)

1472 
	#DIO84_PIN
 
PINH2


	)

1473 
	#DIO84_RPORT
 
PINH


	)

1474 
	#DIO84_WPORT
 
PORTH


	)

1475 
	#DIO84_DDR
 
DDRH


	)

1476 
	#DIO84_PWM
 
NULL


	)

1478 
	#DIO85_PIN
 
PINH7


	)

1479 
	#DIO85_RPORT
 
PINH


	)

1480 
	#DIO85_WPORT
 
PORTH


	)

1481 
	#DIO85_DDR
 
DDRH


	)

1482 
	#DIO85_PWM
 
NULL


	)

1484 #unde‡
PA0


1485 
	#PA0_PIN
 
PINA0


	)

1486 
	#PA0_RPORT
 
PINA


	)

1487 
	#PA0_WPORT
 
PORTA


	)

1488 
	#PA0_DDR
 
DDRA


	)

1489 
	#PA0_PWM
 
NULL


	)

1490 #unde‡
PA1


1491 
	#PA1_PIN
 
PINA1


	)

1492 
	#PA1_RPORT
 
PINA


	)

1493 
	#PA1_WPORT
 
PORTA


	)

1494 
	#PA1_DDR
 
DDRA


	)

1495 
	#PA1_PWM
 
NULL


	)

1496 #unde‡
PA2


1497 
	#PA2_PIN
 
PINA2


	)

1498 
	#PA2_RPORT
 
PINA


	)

1499 
	#PA2_WPORT
 
PORTA


	)

1500 
	#PA2_DDR
 
DDRA


	)

1501 
	#PA2_PWM
 
NULL


	)

1502 #unde‡
PA3


1503 
	#PA3_PIN
 
PINA3


	)

1504 
	#PA3_RPORT
 
PINA


	)

1505 
	#PA3_WPORT
 
PORTA


	)

1506 
	#PA3_DDR
 
DDRA


	)

1507 
	#PA3_PWM
 
NULL


	)

1508 #unde‡
PA4


1509 
	#PA4_PIN
 
PINA4


	)

1510 
	#PA4_RPORT
 
PINA


	)

1511 
	#PA4_WPORT
 
PORTA


	)

1512 
	#PA4_DDR
 
DDRA


	)

1513 
	#PA4_PWM
 
NULL


	)

1514 #unde‡
PA5


1515 
	#PA5_PIN
 
PINA5


	)

1516 
	#PA5_RPORT
 
PINA


	)

1517 
	#PA5_WPORT
 
PORTA


	)

1518 
	#PA5_DDR
 
DDRA


	)

1519 
	#PA5_PWM
 
NULL


	)

1520 #unde‡
PA6


1521 
	#PA6_PIN
 
PINA6


	)

1522 
	#PA6_RPORT
 
PINA


	)

1523 
	#PA6_WPORT
 
PORTA


	)

1524 
	#PA6_DDR
 
DDRA


	)

1525 
	#PA6_PWM
 
NULL


	)

1526 #unde‡
PA7


1527 
	#PA7_PIN
 
PINA7


	)

1528 
	#PA7_RPORT
 
PINA


	)

1529 
	#PA7_WPORT
 
PORTA


	)

1530 
	#PA7_DDR
 
DDRA


	)

1531 
	#PA7_PWM
 
NULL


	)

1533 #unde‡
PB0


1534 
	#PB0_PIN
 
PINB0


	)

1535 
	#PB0_RPORT
 
PINB


	)

1536 
	#PB0_WPORT
 
PORTB


	)

1537 
	#PB0_DDR
 
DDRB


	)

1538 
	#PB0_PWM
 
NULL


	)

1539 #unde‡
PB1


1540 
	#PB1_PIN
 
PINB1


	)

1541 
	#PB1_RPORT
 
PINB


	)

1542 
	#PB1_WPORT
 
PORTB


	)

1543 
	#PB1_DDR
 
DDRB


	)

1544 
	#PB1_PWM
 
NULL


	)

1545 #unde‡
PB2


1546 
	#PB2_PIN
 
PINB2


	)

1547 
	#PB2_RPORT
 
PINB


	)

1548 
	#PB2_WPORT
 
PORTB


	)

1549 
	#PB2_DDR
 
DDRB


	)

1550 
	#PB2_PWM
 
NULL


	)

1551 #unde‡
PB3


1552 
	#PB3_PIN
 
PINB3


	)

1553 
	#PB3_RPORT
 
PINB


	)

1554 
	#PB3_WPORT
 
PORTB


	)

1555 
	#PB3_DDR
 
DDRB


	)

1556 
	#PB3_PWM
 
NULL


	)

1557 #unde‡
PB4


1558 
	#PB4_PIN
 
PINB4


	)

1559 
	#PB4_RPORT
 
PINB


	)

1560 
	#PB4_WPORT
 
PORTB


	)

1561 
	#PB4_DDR
 
DDRB


	)

1562 
	#PB4_PWM
 &
OCR2A


	)

1563 #unde‡
PB5


1564 
	#PB5_PIN
 
PINB5


	)

1565 
	#PB5_RPORT
 
PINB


	)

1566 
	#PB5_WPORT
 
PORTB


	)

1567 
	#PB5_DDR
 
DDRB


	)

1568 
	#PB5_PWM
 
NULL


	)

1569 #unde‡
PB6


1570 
	#PB6_PIN
 
PINB6


	)

1571 
	#PB6_RPORT
 
PINB


	)

1572 
	#PB6_WPORT
 
PORTB


	)

1573 
	#PB6_DDR
 
DDRB


	)

1574 
	#PB6_PWM
 
NULL


	)

1575 #unde‡
PB7


1576 
	#PB7_PIN
 
PINB7


	)

1577 
	#PB7_RPORT
 
PINB


	)

1578 
	#PB7_WPORT
 
PORTB


	)

1579 
	#PB7_DDR
 
DDRB


	)

1580 
	#PB7_PWM
 &
OCR0A


	)

1582 #unde‡
PC0


1583 
	#PC0_PIN
 
PINC0


	)

1584 
	#PC0_RPORT
 
PINC


	)

1585 
	#PC0_WPORT
 
PORTC


	)

1586 
	#PC0_DDR
 
DDRC


	)

1587 
	#PC0_PWM
 
NULL


	)

1588 #unde‡
PC1


1589 
	#PC1_PIN
 
PINC1


	)

1590 
	#PC1_RPORT
 
PINC


	)

1591 
	#PC1_WPORT
 
PORTC


	)

1592 
	#PC1_DDR
 
DDRC


	)

1593 
	#PC1_PWM
 
NULL


	)

1594 #unde‡
PC2


1595 
	#PC2_PIN
 
PINC2


	)

1596 
	#PC2_RPORT
 
PINC


	)

1597 
	#PC2_WPORT
 
PORTC


	)

1598 
	#PC2_DDR
 
DDRC


	)

1599 
	#PC2_PWM
 
NULL


	)

1600 #unde‡
PC3


1601 
	#PC3_PIN
 
PINC3


	)

1602 
	#PC3_RPORT
 
PINC


	)

1603 
	#PC3_WPORT
 
PORTC


	)

1604 
	#PC3_DDR
 
DDRC


	)

1605 
	#PC3_PWM
 
NULL


	)

1606 #unde‡
PC4


1607 
	#PC4_PIN
 
PINC4


	)

1608 
	#PC4_RPORT
 
PINC


	)

1609 
	#PC4_WPORT
 
PORTC


	)

1610 
	#PC4_DDR
 
DDRC


	)

1611 
	#PC4_PWM
 
NULL


	)

1612 #unde‡
PC5


1613 
	#PC5_PIN
 
PINC5


	)

1614 
	#PC5_RPORT
 
PINC


	)

1615 
	#PC5_WPORT
 
PORTC


	)

1616 
	#PC5_DDR
 
DDRC


	)

1617 
	#PC5_PWM
 
NULL


	)

1618 #unde‡
PC6


1619 
	#PC6_PIN
 
PINC6


	)

1620 
	#PC6_RPORT
 
PINC


	)

1621 
	#PC6_WPORT
 
PORTC


	)

1622 
	#PC6_DDR
 
DDRC


	)

1623 
	#PC6_PWM
 
NULL


	)

1624 #unde‡
PC7


1625 
	#PC7_PIN
 
PINC7


	)

1626 
	#PC7_RPORT
 
PINC


	)

1627 
	#PC7_WPORT
 
PORTC


	)

1628 
	#PC7_DDR
 
DDRC


	)

1629 
	#PC7_PWM
 
NULL


	)

1631 #unde‡
PD0


1632 
	#PD0_PIN
 
PIND0


	)

1633 
	#PD0_RPORT
 
PIND


	)

1634 
	#PD0_WPORT
 
PORTD


	)

1635 
	#PD0_DDR
 
DDRD


	)

1636 
	#PD0_PWM
 
NULL


	)

1637 #unde‡
PD1


1638 
	#PD1_PIN
 
PIND1


	)

1639 
	#PD1_RPORT
 
PIND


	)

1640 
	#PD1_WPORT
 
PORTD


	)

1641 
	#PD1_DDR
 
DDRD


	)

1642 
	#PD1_PWM
 
NULL


	)

1643 #unde‡
PD2


1644 
	#PD2_PIN
 
PIND2


	)

1645 
	#PD2_RPORT
 
PIND


	)

1646 
	#PD2_WPORT
 
PORTD


	)

1647 
	#PD2_DDR
 
DDRD


	)

1648 
	#PD2_PWM
 
NULL


	)

1649 #unde‡
PD3


1650 
	#PD3_PIN
 
PIND3


	)

1651 
	#PD3_RPORT
 
PIND


	)

1652 
	#PD3_WPORT
 
PORTD


	)

1653 
	#PD3_DDR
 
DDRD


	)

1654 
	#PD3_PWM
 
NULL


	)

1655 #unde‡
PD4


1656 
	#PD4_PIN
 
PIND4


	)

1657 
	#PD4_RPORT
 
PIND


	)

1658 
	#PD4_WPORT
 
PORTD


	)

1659 
	#PD4_DDR
 
DDRD


	)

1660 
	#PD4_PWM
 
NULL


	)

1661 #unde‡
PD5


1662 
	#PD5_PIN
 
PIND5


	)

1663 
	#PD5_RPORT
 
PIND


	)

1664 
	#PD5_WPORT
 
PORTD


	)

1665 
	#PD5_DDR
 
DDRD


	)

1666 
	#PD5_PWM
 
NULL


	)

1667 #unde‡
PD6


1668 
	#PD6_PIN
 
PIND6


	)

1669 
	#PD6_RPORT
 
PIND


	)

1670 
	#PD6_WPORT
 
PORTD


	)

1671 
	#PD6_DDR
 
DDRD


	)

1672 
	#PD6_PWM
 
NULL


	)

1673 #unde‡
PD7


1674 
	#PD7_PIN
 
PIND7


	)

1675 
	#PD7_RPORT
 
PIND


	)

1676 
	#PD7_WPORT
 
PORTD


	)

1677 
	#PD7_DDR
 
DDRD


	)

1678 
	#PD7_PWM
 
NULL


	)

1680 #unde‡
PE0


1681 
	#PE0_PIN
 
PINE0


	)

1682 
	#PE0_RPORT
 
PINE


	)

1683 
	#PE0_WPORT
 
PORTE


	)

1684 
	#PE0_DDR
 
DDRE


	)

1685 
	#PE0_PWM
 
NULL


	)

1686 #unde‡
PE1


1687 
	#PE1_PIN
 
PINE1


	)

1688 
	#PE1_RPORT
 
PINE


	)

1689 
	#PE1_WPORT
 
PORTE


	)

1690 
	#PE1_DDR
 
DDRE


	)

1691 
	#PE1_PWM
 
NULL


	)

1692 #unde‡
PE2


1693 
	#PE2_PIN
 
PINE2


	)

1694 
	#PE2_RPORT
 
PINE


	)

1695 
	#PE2_WPORT
 
PORTE


	)

1696 
	#PE2_DDR
 
DDRE


	)

1697 
	#PE2_PWM
 
NULL


	)

1698 #unde‡
PE3


1699 
	#PE3_PIN
 
PINE3


	)

1700 
	#PE3_RPORT
 
PINE


	)

1701 
	#PE3_WPORT
 
PORTE


	)

1702 
	#PE3_DDR
 
DDRE


	)

1703 
	#PE3_PWM
 &
OCR3AL


	)

1704 #unde‡
PE4


1705 
	#PE4_PIN
 
PINE4


	)

1706 
	#PE4_RPORT
 
PINE


	)

1707 
	#PE4_WPORT
 
PORTE


	)

1708 
	#PE4_DDR
 
DDRE


	)

1709 
	#PE4_PWM
 &
OCR3BL


	)

1710 #unde‡
PE5


1711 
	#PE5_PIN
 
PINE5


	)

1712 
	#PE5_RPORT
 
PINE


	)

1713 
	#PE5_WPORT
 
PORTE


	)

1714 
	#PE5_DDR
 
DDRE


	)

1715 
	#PE5_PWM
 &
OCR3CL


	)

1716 #unde‡
PE6


1717 
	#PE6_PIN
 
PINE6


	)

1718 
	#PE6_RPORT
 
PINE


	)

1719 
	#PE6_WPORT
 
PORTE


	)

1720 
	#PE6_DDR
 
DDRE


	)

1721 
	#PE6_PWM
 
NULL


	)

1722 #unde‡
PE7


1723 
	#PE7_PIN
 
PINE7


	)

1724 
	#PE7_RPORT
 
PINE


	)

1725 
	#PE7_WPORT
 
PORTE


	)

1726 
	#PE7_DDR
 
DDRE


	)

1727 
	#PE7_PWM
 
NULL


	)

1729 #unde‡
PF0


1730 
	#PF0_PIN
 
PINF0


	)

1731 
	#PF0_RPORT
 
PINF


	)

1732 
	#PF0_WPORT
 
PORTF


	)

1733 
	#PF0_DDR
 
DDRF


	)

1734 
	#PF0_PWM
 
NULL


	)

1735 #unde‡
PF1


1736 
	#PF1_PIN
 
PINF1


	)

1737 
	#PF1_RPORT
 
PINF


	)

1738 
	#PF1_WPORT
 
PORTF


	)

1739 
	#PF1_DDR
 
DDRF


	)

1740 
	#PF1_PWM
 
NULL


	)

1741 #unde‡
PF2


1742 
	#PF2_PIN
 
PINF2


	)

1743 
	#PF2_RPORT
 
PINF


	)

1744 
	#PF2_WPORT
 
PORTF


	)

1745 
	#PF2_DDR
 
DDRF


	)

1746 
	#PF2_PWM
 
NULL


	)

1747 #unde‡
PF3


1748 
	#PF3_PIN
 
PINF3


	)

1749 
	#PF3_RPORT
 
PINF


	)

1750 
	#PF3_WPORT
 
PORTF


	)

1751 
	#PF3_DDR
 
DDRF


	)

1752 
	#PF3_PWM
 
NULL


	)

1753 #unde‡
PF4


1754 
	#PF4_PIN
 
PINF4


	)

1755 
	#PF4_RPORT
 
PINF


	)

1756 
	#PF4_WPORT
 
PORTF


	)

1757 
	#PF4_DDR
 
DDRF


	)

1758 
	#PF4_PWM
 
NULL


	)

1759 #unde‡
PF5


1760 
	#PF5_PIN
 
PINF5


	)

1761 
	#PF5_RPORT
 
PINF


	)

1762 
	#PF5_WPORT
 
PORTF


	)

1763 
	#PF5_DDR
 
DDRF


	)

1764 
	#PF5_PWM
 
NULL


	)

1765 #unde‡
PF6


1766 
	#PF6_PIN
 
PINF6


	)

1767 
	#PF6_RPORT
 
PINF


	)

1768 
	#PF6_WPORT
 
PORTF


	)

1769 
	#PF6_DDR
 
DDRF


	)

1770 
	#PF6_PWM
 
NULL


	)

1771 #unde‡
PF7


1772 
	#PF7_PIN
 
PINF7


	)

1773 
	#PF7_RPORT
 
PINF


	)

1774 
	#PF7_WPORT
 
PORTF


	)

1775 
	#PF7_DDR
 
DDRF


	)

1776 
	#PF7_PWM
 
NULL


	)

1778 #unde‡
PG0


1779 
	#PG0_PIN
 
PING0


	)

1780 
	#PG0_RPORT
 
PING


	)

1781 
	#PG0_WPORT
 
PORTG


	)

1782 
	#PG0_DDR
 
DDRG


	)

1783 
	#PG0_PWM
 
NULL


	)

1784 #unde‡
PG1


1785 
	#PG1_PIN
 
PING1


	)

1786 
	#PG1_RPORT
 
PING


	)

1787 
	#PG1_WPORT
 
PORTG


	)

1788 
	#PG1_DDR
 
DDRG


	)

1789 
	#PG1_PWM
 
NULL


	)

1790 #unde‡
PG2


1791 
	#PG2_PIN
 
PING2


	)

1792 
	#PG2_RPORT
 
PING


	)

1793 
	#PG2_WPORT
 
PORTG


	)

1794 
	#PG2_DDR
 
DDRG


	)

1795 
	#PG2_PWM
 
NULL


	)

1796 #unde‡
PG3


1797 
	#PG3_PIN
 
PING3


	)

1798 
	#PG3_RPORT
 
PING


	)

1799 
	#PG3_WPORT
 
PORTG


	)

1800 
	#PG3_DDR
 
DDRG


	)

1801 
	#PG3_PWM
 
NULL


	)

1802 #unde‡
PG4


1803 
	#PG4_PIN
 
PING4


	)

1804 
	#PG4_RPORT
 
PING


	)

1805 
	#PG4_WPORT
 
PORTG


	)

1806 
	#PG4_DDR
 
DDRG


	)

1807 
	#PG4_PWM
 
NULL


	)

1808 #unde‡
PG5


1809 
	#PG5_PIN
 
PING5


	)

1810 
	#PG5_RPORT
 
PING


	)

1811 
	#PG5_WPORT
 
PORTG


	)

1812 
	#PG5_DDR
 
DDRG


	)

1813 
	#PG5_PWM
 &
OCR0B


	)

1814 #unde‡
PG6


1815 
	#PG6_PIN
 
PING6


	)

1816 
	#PG6_RPORT
 
PING


	)

1817 
	#PG6_WPORT
 
PORTG


	)

1818 
	#PG6_DDR
 
DDRG


	)

1819 
	#PG6_PWM
 
NULL


	)

1820 #unde‡
PG7


1821 
	#PG7_PIN
 
PING7


	)

1822 
	#PG7_RPORT
 
PING


	)

1823 
	#PG7_WPORT
 
PORTG


	)

1824 
	#PG7_DDR
 
DDRG


	)

1825 
	#PG7_PWM
 
NULL


	)

1827 #unde‡
PH0


1828 
	#PH0_PIN
 
PINH0


	)

1829 
	#PH0_RPORT
 
PINH


	)

1830 
	#PH0_WPORT
 
PORTH


	)

1831 
	#PH0_DDR
 
DDRH


	)

1832 
	#PH0_PWM
 
NULL


	)

1833 #unde‡
PH1


1834 
	#PH1_PIN
 
PINH1


	)

1835 
	#PH1_RPORT
 
PINH


	)

1836 
	#PH1_WPORT
 
PORTH


	)

1837 
	#PH1_DDR
 
DDRH


	)

1838 
	#PH1_PWM
 
NULL


	)

1839 #unde‡
PH2


1840 
	#PH2_PIN
 
PINH2


	)

1841 
	#PH2_RPORT
 
PINH


	)

1842 
	#PH2_WPORT
 
PORTH


	)

1843 
	#PH2_DDR
 
DDRH


	)

1844 
	#PH2_PWM
 
NULL


	)

1845 #unde‡
PH3


1846 
	#PH3_PIN
 
PINH3


	)

1847 
	#PH3_RPORT
 
PINH


	)

1848 
	#PH3_WPORT
 
PORTH


	)

1849 
	#PH3_DDR
 
DDRH


	)

1850 
	#PH3_PWM
 &
OCR4AL


	)

1851 #unde‡
PH4


1852 
	#PH4_PIN
 
PINH4


	)

1853 
	#PH4_RPORT
 
PINH


	)

1854 
	#PH4_WPORT
 
PORTH


	)

1855 
	#PH4_DDR
 
DDRH


	)

1856 
	#PH4_PWM
 &
OCR4BL


	)

1857 #unde‡
PH5


1858 
	#PH5_PIN
 
PINH5


	)

1859 
	#PH5_RPORT
 
PINH


	)

1860 
	#PH5_WPORT
 
PORTH


	)

1861 
	#PH5_DDR
 
DDRH


	)

1862 
	#PH5_PWM
 &
OCR4CL


	)

1863 #unde‡
PH6


1864 
	#PH6_PIN
 
PINH6


	)

1865 
	#PH6_RPORT
 
PINH


	)

1866 
	#PH6_WPORT
 
PORTH


	)

1867 
	#PH6_DDR
 
DDRH


	)

1868 
	#PH6_PWM
 &
OCR2B


	)

1869 #unde‡
PH7


1870 
	#PH7_PIN
 
PINH7


	)

1871 
	#PH7_RPORT
 
PINH


	)

1872 
	#PH7_WPORT
 
PORTH


	)

1873 
	#PH7_DDR
 
DDRH


	)

1874 
	#PH7_PWM
 
NULL


	)

1876 #unde‡
PJ0


1877 
	#PJ0_PIN
 
PINJ0


	)

1878 
	#PJ0_RPORT
 
PINJ


	)

1879 
	#PJ0_WPORT
 
PORTJ


	)

1880 
	#PJ0_DDR
 
DDRJ


	)

1881 
	#PJ0_PWM
 
NULL


	)

1882 #unde‡
PJ1


1883 
	#PJ1_PIN
 
PINJ1


	)

1884 
	#PJ1_RPORT
 
PINJ


	)

1885 
	#PJ1_WPORT
 
PORTJ


	)

1886 
	#PJ1_DDR
 
DDRJ


	)

1887 
	#PJ1_PWM
 
NULL


	)

1888 #unde‡
PJ2


1889 
	#PJ2_PIN
 
PINJ2


	)

1890 
	#PJ2_RPORT
 
PINJ


	)

1891 
	#PJ2_WPORT
 
PORTJ


	)

1892 
	#PJ2_DDR
 
DDRJ


	)

1893 
	#PJ2_PWM
 
NULL


	)

1894 #unde‡
PJ3


1895 
	#PJ3_PIN
 
PINJ3


	)

1896 
	#PJ3_RPORT
 
PINJ


	)

1897 
	#PJ3_WPORT
 
PORTJ


	)

1898 
	#PJ3_DDR
 
DDRJ


	)

1899 
	#PJ3_PWM
 
NULL


	)

1900 #unde‡
PJ4


1901 
	#PJ4_PIN
 
PINJ4


	)

1902 
	#PJ4_RPORT
 
PINJ


	)

1903 
	#PJ4_WPORT
 
PORTJ


	)

1904 
	#PJ4_DDR
 
DDRJ


	)

1905 
	#PJ4_PWM
 
NULL


	)

1906 #unde‡
PJ5


1907 
	#PJ5_PIN
 
PINJ5


	)

1908 
	#PJ5_RPORT
 
PINJ


	)

1909 
	#PJ5_WPORT
 
PORTJ


	)

1910 
	#PJ5_DDR
 
DDRJ


	)

1911 
	#PJ5_PWM
 
NULL


	)

1912 #unde‡
PJ6


1913 
	#PJ6_PIN
 
PINJ6


	)

1914 
	#PJ6_RPORT
 
PINJ


	)

1915 
	#PJ6_WPORT
 
PORTJ


	)

1916 
	#PJ6_DDR
 
DDRJ


	)

1917 
	#PJ6_PWM
 
NULL


	)

1918 #unde‡
PJ7


1919 
	#PJ7_PIN
 
PINJ7


	)

1920 
	#PJ7_RPORT
 
PINJ


	)

1921 
	#PJ7_WPORT
 
PORTJ


	)

1922 
	#PJ7_DDR
 
DDRJ


	)

1923 
	#PJ7_PWM
 
NULL


	)

1925 #unde‡
PK0


1926 
	#PK0_PIN
 
PINK0


	)

1927 
	#PK0_RPORT
 
PINK


	)

1928 
	#PK0_WPORT
 
PORTK


	)

1929 
	#PK0_DDR
 
DDRK


	)

1930 
	#PK0_PWM
 
NULL


	)

1931 #unde‡
PK1


1932 
	#PK1_PIN
 
PINK1


	)

1933 
	#PK1_RPORT
 
PINK


	)

1934 
	#PK1_WPORT
 
PORTK


	)

1935 
	#PK1_DDR
 
DDRK


	)

1936 
	#PK1_PWM
 
NULL


	)

1937 #unde‡
PK2


1938 
	#PK2_PIN
 
PINK2


	)

1939 
	#PK2_RPORT
 
PINK


	)

1940 
	#PK2_WPORT
 
PORTK


	)

1941 
	#PK2_DDR
 
DDRK


	)

1942 
	#PK2_PWM
 
NULL


	)

1943 #unde‡
PK3


1944 
	#PK3_PIN
 
PINK3


	)

1945 
	#PK3_RPORT
 
PINK


	)

1946 
	#PK3_WPORT
 
PORTK


	)

1947 
	#PK3_DDR
 
DDRK


	)

1948 
	#PK3_PWM
 
NULL


	)

1949 #unde‡
PK4


1950 
	#PK4_PIN
 
PINK4


	)

1951 
	#PK4_RPORT
 
PINK


	)

1952 
	#PK4_WPORT
 
PORTK


	)

1953 
	#PK4_DDR
 
DDRK


	)

1954 
	#PK4_PWM
 
NULL


	)

1955 #unde‡
PK5


1956 
	#PK5_PIN
 
PINK5


	)

1957 
	#PK5_RPORT
 
PINK


	)

1958 
	#PK5_WPORT
 
PORTK


	)

1959 
	#PK5_DDR
 
DDRK


	)

1960 
	#PK5_PWM
 
NULL


	)

1961 #unde‡
PK6


1962 
	#PK6_PIN
 
PINK6


	)

1963 
	#PK6_RPORT
 
PINK


	)

1964 
	#PK6_WPORT
 
PORTK


	)

1965 
	#PK6_DDR
 
DDRK


	)

1966 
	#PK6_PWM
 
NULL


	)

1967 #unde‡
PK7


1968 
	#PK7_PIN
 
PINK7


	)

1969 
	#PK7_RPORT
 
PINK


	)

1970 
	#PK7_WPORT
 
PORTK


	)

1971 
	#PK7_DDR
 
DDRK


	)

1972 
	#PK7_PWM
 
NULL


	)

1974 #unde‡
PL0


1975 
	#PL0_PIN
 
PINL0


	)

1976 
	#PL0_RPORT
 
PINL


	)

1977 
	#PL0_WPORT
 
PORTL


	)

1978 
	#PL0_DDR
 
DDRL


	)

1979 
	#PL0_PWM
 
NULL


	)

1980 #unde‡
PL1


1981 
	#PL1_PIN
 
PINL1


	)

1982 
	#PL1_RPORT
 
PINL


	)

1983 
	#PL1_WPORT
 
PORTL


	)

1984 
	#PL1_DDR
 
DDRL


	)

1985 
	#PL1_PWM
 
NULL


	)

1986 #unde‡
PL2


1987 
	#PL2_PIN
 
PINL2


	)

1988 
	#PL2_RPORT
 
PINL


	)

1989 
	#PL2_WPORT
 
PORTL


	)

1990 
	#PL2_DDR
 
DDRL


	)

1991 
	#PL2_PWM
 
NULL


	)

1992 #unde‡
PL3


1993 
	#PL3_PIN
 
PINL3


	)

1994 
	#PL3_RPORT
 
PINL


	)

1995 
	#PL3_WPORT
 
PORTL


	)

1996 
	#PL3_DDR
 
DDRL


	)

1997 
	#PL3_PWM
 &
OCR5AL


	)

1998 #unde‡
PL4


1999 
	#PL4_PIN
 
PINL4


	)

2000 
	#PL4_RPORT
 
PINL


	)

2001 
	#PL4_WPORT
 
PORTL


	)

2002 
	#PL4_DDR
 
DDRL


	)

2003 
	#PL4_PWM
 &
OCR5BL


	)

2004 #unde‡
PL5


2005 
	#PL5_PIN
 
PINL5


	)

2006 
	#PL5_RPORT
 
PINL


	)

2007 
	#PL5_WPORT
 
PORTL


	)

2008 
	#PL5_DDR
 
DDRL


	)

2009 
	#PL5_PWM
 &
OCR5CL


	)

2010 #unde‡
PL6


2011 
	#PL6_PIN
 
PINL6


	)

2012 
	#PL6_RPORT
 
PINL


	)

2013 
	#PL6_WPORT
 
PORTL


	)

2014 
	#PL6_DDR
 
DDRL


	)

2015 
	#PL6_PWM
 
NULL


	)

2016 #unde‡
PL7


2017 
	#PL7_PIN
 
PINL7


	)

2018 
	#PL7_RPORT
 
PINL


	)

2019 
	#PL7_WPORT
 
PORTL


	)

2020 
	#PL7_DDR
 
DDRL


	)

2021 
	#PL7_PWM
 
NULL


	)

2025 #i‡
deföed
 (
__AVR_AT90USB1287__
Ë|| deföed (
__AVR_AT90USB1286__
Ë|| deföed (
__AVR_AT90USB646__
Ë|| deföed(
__AVR_AT90USB647__
)

2027 
	#SCK
 
DIO9


	)

2028 
	#MISO
 
DIO11


	)

2029 
	#MOSI
 
DIO10


	)

2030 
	#SS
 
DIO8


	)

2033 
	#DEBUG_LED
 
DIO31


	)

2040 #i‚de‡
AT90USBxx_TEENSYPP_ASSIGNMENTS


2042 
	#DIO0_PIN
 
PINA0


	)

2043 
	#DIO0_RPORT
 
PINA


	)

2044 
	#DIO0_WPORT
 
PORTA


	)

2045 
	#DIO0_PWM
 
NULL


	)

2046 
	#DIO0_DDR
 
DDRA


	)

2048 
	#DIO1_PIN
 
PINA1


	)

2049 
	#DIO1_RPORT
 
PINA


	)

2050 
	#DIO1_WPORT
 
PORTA


	)

2051 
	#DIO1_PWM
 
NULL


	)

2052 
	#DIO1_DDR
 
DDRA


	)

2054 
	#DIO2_PIN
 
PINA2


	)

2055 
	#DIO2_RPORT
 
PINA


	)

2056 
	#DIO2_WPORT
 
PORTA


	)

2057 
	#DIO2_PWM
 
NULL


	)

2058 
	#DIO2_DDR
 
DDRA


	)

2060 
	#DIO3_PIN
 
PINA3


	)

2061 
	#DIO3_RPORT
 
PINA


	)

2062 
	#DIO3_WPORT
 
PORTA


	)

2063 
	#DIO3_PWM
 
NULL


	)

2064 
	#DIO3_DDR
 
DDRA


	)

2066 
	#DIO4_PIN
 
PINA4


	)

2067 
	#DIO4_RPORT
 
PINA


	)

2068 
	#DIO4_WPORT
 
PORTA


	)

2069 
	#DIO4_PWM
 
NULL


	)

2070 
	#DIO4_DDR
 
DDRA


	)

2072 
	#DIO5_PIN
 
PINA5


	)

2073 
	#DIO5_RPORT
 
PINA


	)

2074 
	#DIO5_WPORT
 
PORTA


	)

2075 
	#DIO5_PWM
 
NULL


	)

2076 
	#DIO5_DDR
 
DDRA


	)

2078 
	#DIO6_PIN
 
PINA6


	)

2079 
	#DIO6_RPORT
 
PINA


	)

2080 
	#DIO6_WPORT
 
PORTA


	)

2081 
	#DIO6_PWM
 
NULL


	)

2082 
	#DIO6_DDR
 
DDRA


	)

2084 
	#DIO7_PIN
 
PINA7


	)

2085 
	#DIO7_RPORT
 
PINA


	)

2086 
	#DIO7_WPORT
 
PORTA


	)

2087 
	#DIO7_PWM
 
NULL


	)

2088 
	#DIO7_DDR
 
DDRA


	)

2090 
	#DIO8_PIN
 
PINB0


	)

2091 
	#DIO8_RPORT
 
PINB


	)

2092 
	#DIO8_WPORT
 
PORTB


	)

2093 
	#DIO8_PWM
 
NULL


	)

2094 
	#DIO8_DDR
 
DDRB


	)

2096 
	#DIO9_PIN
 
PINB1


	)

2097 
	#DIO9_RPORT
 
PINB


	)

2098 
	#DIO9_WPORT
 
PORTB


	)

2099 
	#DIO9_PWM
 
NULL


	)

2100 
	#DIO9_DDR
 
DDRB


	)

2102 
	#DIO10_PIN
 
PINB2


	)

2103 
	#DIO10_RPORT
 
PINB


	)

2104 
	#DIO10_WPORT
 
PORTB


	)

2105 
	#DIO10_PWM
 
NULL


	)

2106 
	#DIO10_DDR
 
DDRB


	)

2108 
	#DIO11_PIN
 
PINB3


	)

2109 
	#DIO11_RPORT
 
PINB


	)

2110 
	#DIO11_WPORT
 
PORTB


	)

2111 
	#DIO11_PWM
 
NULL


	)

2112 
	#DIO11_DDR
 
DDRB


	)

2114 
	#DIO12_PIN
 
PINB4


	)

2115 
	#DIO12_RPORT
 
PINB


	)

2116 
	#DIO12_WPORT
 
PORTB


	)

2117 
	#DIO12_PWM
 
NULL


	)

2118 
	#DIO12_DDR
 
DDRB


	)

2120 
	#DIO13_PIN
 
PINB5


	)

2121 
	#DIO13_RPORT
 
PINB


	)

2122 
	#DIO13_WPORT
 
PORTB


	)

2123 
	#DIO13_PWM
 
NULL


	)

2124 
	#DIO13_DDR
 
DDRB


	)

2126 
	#DIO14_PIN
 
PINB6


	)

2127 
	#DIO14_RPORT
 
PINB


	)

2128 
	#DIO14_WPORT
 
PORTB


	)

2129 
	#DIO14_PWM
 
NULL


	)

2130 
	#DIO14_DDR
 
DDRB


	)

2132 
	#DIO15_PIN
 
PINB7


	)

2133 
	#DIO15_RPORT
 
PINB


	)

2134 
	#DIO15_WPORT
 
PORTB


	)

2135 
	#DIO15_PWM
 
NULL


	)

2136 
	#DIO15_DDR
 
DDRB


	)

2138 
	#DIO16_PIN
 
PINC0


	)

2139 
	#DIO16_RPORT
 
PINC


	)

2140 
	#DIO16_WPORT
 
PORTC


	)

2141 
	#DIO16_PWM
 
NULL


	)

2142 
	#DIO16_DDR
 
DDRC


	)

2144 
	#DIO17_PIN
 
PINC1


	)

2145 
	#DIO17_RPORT
 
PINC


	)

2146 
	#DIO17_WPORT
 
PORTC


	)

2147 
	#DIO17_PWM
 
NULL


	)

2148 
	#DIO17_DDR
 
DDRC


	)

2150 
	#DIO18_PIN
 
PINC2


	)

2151 
	#DIO18_RPORT
 
PINC


	)

2152 
	#DIO18_WPORT
 
PORTC


	)

2153 
	#DIO18_PWM
 
NULL


	)

2154 
	#DIO18_DDR
 
DDRC


	)

2156 
	#DIO19_PIN
 
PINC3


	)

2157 
	#DIO19_RPORT
 
PINC


	)

2158 
	#DIO19_WPORT
 
PORTC


	)

2159 
	#DIO19_PWM
 
NULL


	)

2160 
	#DIO19_DDR
 
DDRC


	)

2162 
	#DIO20_PIN
 
PINC4


	)

2163 
	#DIO20_RPORT
 
PINC


	)

2164 
	#DIO20_WPORT
 
PORTC


	)

2165 
	#DIO20_PWM
 
NULL


	)

2166 
	#DIO20_DDR
 
DDRC


	)

2168 
	#DIO21_PIN
 
PINC5


	)

2169 
	#DIO21_RPORT
 
PINC


	)

2170 
	#DIO21_WPORT
 
PORTC


	)

2171 
	#DIO21_PWM
 
NULL


	)

2172 
	#DIO21_DDR
 
DDRC


	)

2174 
	#DIO22_PIN
 
PINC6


	)

2175 
	#DIO22_RPORT
 
PINC


	)

2176 
	#DIO22_WPORT
 
PORTC


	)

2177 
	#DIO22_PWM
 
NULL


	)

2178 
	#DIO22_DDR
 
DDRC


	)

2180 
	#DIO23_PIN
 
PINC7


	)

2181 
	#DIO23_RPORT
 
PINC


	)

2182 
	#DIO23_WPORT
 
PORTC


	)

2183 
	#DIO23_PWM
 
NULL


	)

2184 
	#DIO23_DDR
 
DDRC


	)

2186 
	#DIO24_PIN
 
PIND0


	)

2187 
	#DIO24_RPORT
 
PIND


	)

2188 
	#DIO24_WPORT
 
PORTD


	)

2189 
	#DIO24_PWM
 
NULL


	)

2190 
	#DIO24_DDR
 
DDRD


	)

2192 
	#DIO25_PIN
 
PIND1


	)

2193 
	#DIO25_RPORT
 
PIND


	)

2194 
	#DIO25_WPORT
 
PORTD


	)

2195 
	#DIO25_PWM
 
NULL


	)

2196 
	#DIO25_DDR
 
DDRD


	)

2198 
	#DIO26_PIN
 
PIND2


	)

2199 
	#DIO26_RPORT
 
PIND


	)

2200 
	#DIO26_WPORT
 
PORTD


	)

2201 
	#DIO26_PWM
 
NULL


	)

2202 
	#DIO26_DDR
 
DDRD


	)

2204 
	#DIO27_PIN
 
PIND3


	)

2205 
	#DIO27_RPORT
 
PIND


	)

2206 
	#DIO27_WPORT
 
PORTD


	)

2207 
	#DIO27_PWM
 
NULL


	)

2208 
	#DIO27_DDR
 
DDRD


	)

2210 
	#DIO28_PIN
 
PIND4


	)

2211 
	#DIO28_RPORT
 
PIND


	)

2212 
	#DIO28_WPORT
 
PORTD


	)

2213 
	#DIO28_PWM
 
NULL


	)

2214 
	#DIO28_DDR
 
DDRD


	)

2216 
	#DIO29_PIN
 
PIND5


	)

2217 
	#DIO29_RPORT
 
PIND


	)

2218 
	#DIO29_WPORT
 
PORTD


	)

2219 
	#DIO29_PWM
 
NULL


	)

2220 
	#DIO29_DDR
 
DDRD


	)

2222 
	#DIO30_PIN
 
PIND6


	)

2223 
	#DIO30_RPORT
 
PIND


	)

2224 
	#DIO30_WPORT
 
PORTD


	)

2225 
	#DIO30_PWM
 
NULL


	)

2226 
	#DIO30_DDR
 
DDRD


	)

2228 
	#DIO31_PIN
 
PIND7


	)

2229 
	#DIO31_RPORT
 
PIND


	)

2230 
	#DIO31_WPORT
 
PORTD


	)

2231 
	#DIO31_PWM
 
NULL


	)

2232 
	#DIO31_DDR
 
DDRD


	)

2235 
	#DIO32_PIN
 
PINE0


	)

2236 
	#DIO32_RPORT
 
PINE


	)

2237 
	#DIO32_WPORT
 
PORTE


	)

2238 
	#DIO32_PWM
 
NULL


	)

2239 
	#DIO32_DDR
 
DDRE


	)

2241 
	#DIO33_PIN
 
PINE1


	)

2242 
	#DIO33_RPORT
 
PINE


	)

2243 
	#DIO33_WPORT
 
PORTE


	)

2244 
	#DIO33_PWM
 
NULL


	)

2245 
	#DIO33_DDR
 
DDRE


	)

2247 
	#DIO34_PIN
 
PINE2


	)

2248 
	#DIO34_RPORT
 
PINE


	)

2249 
	#DIO34_WPORT
 
PORTE


	)

2250 
	#DIO34_PWM
 
NULL


	)

2251 
	#DIO34_DDR
 
DDRE


	)

2253 
	#DIO35_PIN
 
PINE3


	)

2254 
	#DIO35_RPORT
 
PINE


	)

2255 
	#DIO35_WPORT
 
PORTE


	)

2256 
	#DIO35_PWM
 
NULL


	)

2257 
	#DIO35_DDR
 
DDRE


	)

2259 
	#DIO36_PIN
 
PINE4


	)

2260 
	#DIO36_RPORT
 
PINE


	)

2261 
	#DIO36_WPORT
 
PORTE


	)

2262 
	#DIO36_PWM
 
NULL


	)

2263 
	#DIO36_DDR
 
DDRE


	)

2265 
	#DIO37_PIN
 
PINE5


	)

2266 
	#DIO37_RPORT
 
PINE


	)

2267 
	#DIO37_WPORT
 
PORTE


	)

2268 
	#DIO37_PWM
 
NULL


	)

2269 
	#DIO37_DDR
 
DDRE


	)

2271 
	#DIO38_PIN
 
PINE6


	)

2272 
	#DIO38_RPORT
 
PINE


	)

2273 
	#DIO38_WPORT
 
PORTE


	)

2274 
	#DIO38_PWM
 
NULL


	)

2275 
	#DIO38_DDR
 
DDRE


	)

2277 
	#DIO39_PIN
 
PINE7


	)

2278 
	#DIO39_RPORT
 
PINE


	)

2279 
	#DIO39_WPORT
 
PORTE


	)

2280 
	#DIO39_PWM
 
NULL


	)

2281 
	#DIO39_DDR
 
DDRE


	)

2283 
	#AIO0_PIN
 
PINF0


	)

2284 
	#AIO0_RPORT
 
PINF


	)

2285 
	#AIO0_WPORT
 
PORTF


	)

2286 
	#AIO0_PWM
 
NULL


	)

2287 
	#AIO0_DDR
 
DDRF


	)

2289 
	#AIO1_PIN
 
PINF1


	)

2290 
	#AIO1_RPORT
 
PINF


	)

2291 
	#AIO1_WPORT
 
PORTF


	)

2292 
	#AIO1_PWM
 
NULL


	)

2293 
	#AIO1_DDR
 
DDRF


	)

2295 
	#AIO2_PIN
 
PINF2


	)

2296 
	#AIO2_RPORT
 
PINF


	)

2297 
	#AIO2_WPORT
 
PORTF


	)

2298 
	#AIO2_PWM
 
NULL


	)

2299 
	#AIO2_DDR
 
DDRF


	)

2301 
	#AIO3_PIN
 
PINF3


	)

2302 
	#AIO3_RPORT
 
PINF


	)

2303 
	#AIO3_WPORT
 
PORTF


	)

2304 
	#AIO3_PWM
 
NULL


	)

2305 
	#AIO3_DDR
 
DDRF


	)

2307 
	#AIO4_PIN
 
PINF4


	)

2308 
	#AIO4_RPORT
 
PINF


	)

2309 
	#AIO4_WPORT
 
PORTF


	)

2310 
	#AIO4_PWM
 
NULL


	)

2311 
	#AIO4_DDR
 
DDRF


	)

2313 
	#AIO5_PIN
 
PINF5


	)

2314 
	#AIO5_RPORT
 
PINF


	)

2315 
	#AIO5_WPORT
 
PORTF


	)

2316 
	#AIO5_PWM
 
NULL


	)

2317 
	#AIO5_DDR
 
DDRF


	)

2319 
	#AIO6_PIN
 
PINF6


	)

2320 
	#AIO6_RPORT
 
PINF


	)

2321 
	#AIO6_WPORT
 
PORTF


	)

2322 
	#AIO6_PWM
 
NULL


	)

2323 
	#AIO6_DDR
 
DDRF


	)

2325 
	#AIO7_PIN
 
PINF7


	)

2326 
	#AIO7_RPORT
 
PINF


	)

2327 
	#AIO7_WPORT
 
PORTF


	)

2328 
	#AIO7_PWM
 
NULL


	)

2329 
	#AIO7_DDR
 
DDRF


	)

2331 
	#DIO40_PIN
 
PINF0


	)

2332 
	#DIO40_RPORT
 
PINF


	)

2333 
	#DIO40_WPORT
 
PORTF


	)

2334 
	#DIO40_PWM
 
NULL


	)

2335 
	#DIO40_DDR
 
DDRF


	)

2337 
	#DIO41_PIN
 
PINF1


	)

2338 
	#DIO41_RPORT
 
PINF


	)

2339 
	#DIO41_WPORT
 
PORTF


	)

2340 
	#DIO41_PWM
 
NULL


	)

2341 
	#DIO41_DDR
 
DDRF


	)

2343 
	#DIO42_PIN
 
PINF2


	)

2344 
	#DIO42_RPORT
 
PINF


	)

2345 
	#DIO42_WPORT
 
PORTF


	)

2346 
	#DIO42_PWM
 
NULL


	)

2347 
	#DIO42_DDR
 
DDRF


	)

2349 
	#DIO43_PIN
 
PINF3


	)

2350 
	#DIO43_RPORT
 
PINF


	)

2351 
	#DIO43_WPORT
 
PORTF


	)

2352 
	#DIO43_PWM
 
NULL


	)

2353 
	#DIO43_DDR
 
DDRF


	)

2355 
	#DIO44_PIN
 
PINF4


	)

2356 
	#DIO44_RPORT
 
PINF


	)

2357 
	#DIO44_WPORT
 
PORTF


	)

2358 
	#DIO44_PWM
 
NULL


	)

2359 
	#DIO44_DDR
 
DDRF


	)

2361 
	#DIO45_PIN
 
PINF5


	)

2362 
	#DIO45_RPORT
 
PINF


	)

2363 
	#DIO45_WPORT
 
PORTF


	)

2364 
	#DIO45_PWM
 
NULL


	)

2365 
	#DIO45_DDR
 
DDRF


	)

2367 
	#DIO46_PIN
 
PINF6


	)

2368 
	#DIO46_RPORT
 
PINF


	)

2369 
	#DIO46_WPORT
 
PORTF


	)

2370 
	#DIO46_PWM
 
NULL


	)

2371 
	#DIO46_DDR
 
DDRF


	)

2373 
	#DIO47_PIN
 
PINF7


	)

2374 
	#DIO47_RPORT
 
PINF


	)

2375 
	#DIO47_WPORT
 
PORTF


	)

2376 
	#DIO47_PWM
 
NULL


	)

2377 
	#DIO47_DDR
 
DDRF


	)

2381 #unde‡
PA0


2382 
	#PA0_PIN
 
PINA0


	)

2383 
	#PA0_RPORT
 
PINA


	)

2384 
	#PA0_WPORT
 
PORTA


	)

2385 
	#PA0_PWM
 
NULL


	)

2386 
	#PA0_DDR
 
DDRA


	)

2387 #unde‡
PA1


2388 
	#PA1_PIN
 
PINA1


	)

2389 
	#PA1_RPORT
 
PINA


	)

2390 
	#PA1_WPORT
 
PORTA


	)

2391 
	#PA1_PWM
 
NULL


	)

2392 
	#PA1_DDR
 
DDRA


	)

2393 #unde‡
PA2


2394 
	#PA2_PIN
 
PINA2


	)

2395 
	#PA2_RPORT
 
PINA


	)

2396 
	#PA2_WPORT
 
PORTA


	)

2397 
	#PA2_PWM
 
NULL


	)

2398 
	#PA2_DDR
 
DDRA


	)

2399 #unde‡
PA3


2400 
	#PA3_PIN
 
PINA3


	)

2401 
	#PA3_RPORT
 
PINA


	)

2402 
	#PA3_WPORT
 
PORTA


	)

2403 
	#PA3_PWM
 
NULL


	)

2404 
	#PA3_DDR
 
DDRA


	)

2405 #unde‡
PA4


2406 
	#PA4_PIN
 
PINA4


	)

2407 
	#PA4_RPORT
 
PINA


	)

2408 
	#PA4_WPORT
 
PORTA


	)

2409 
	#PA4_PWM
 
NULL


	)

2410 
	#PA4_DDR
 
DDRA


	)

2411 #unde‡
PA5


2412 
	#PA5_PIN
 
PINA5


	)

2413 
	#PA5_RPORT
 
PINA


	)

2414 
	#PA5_WPORT
 
PORTA


	)

2415 
	#PA5_PWM
 
NULL


	)

2416 
	#PA5_DDR
 
DDRA


	)

2417 #unde‡
PA6


2418 
	#PA6_PIN
 
PINA6


	)

2419 
	#PA6_RPORT
 
PINA


	)

2420 
	#PA6_WPORT
 
PORTA


	)

2421 
	#PA6_PWM
 
NULL


	)

2422 
	#PA6_DDR
 
DDRA


	)

2423 #unde‡
PA7


2424 
	#PA7_PIN
 
PINA7


	)

2425 
	#PA7_RPORT
 
PINA


	)

2426 
	#PA7_WPORT
 
PORTA


	)

2427 
	#PA7_PWM
 
NULL


	)

2428 
	#PA7_DDR
 
DDRA


	)

2430 #unde‡
PB0


2431 
	#PB0_PIN
 
PINB0


	)

2432 
	#PB0_RPORT
 
PINB


	)

2433 
	#PB0_WPORT
 
PORTB


	)

2434 
	#PB0_PWM
 
NULL


	)

2435 
	#PB0_DDR
 
DDRB


	)

2436 #unde‡
PB1


2437 
	#PB1_PIN
 
PINB1


	)

2438 
	#PB1_RPORT
 
PINB


	)

2439 
	#PB1_WPORT
 
PORTB


	)

2440 
	#PB1_PWM
 
NULL


	)

2441 
	#PB1_DDR
 
DDRB


	)

2442 #unde‡
PB2


2443 
	#PB2_PIN
 
PINB2


	)

2444 
	#PB2_RPORT
 
PINB


	)

2445 
	#PB2_WPORT
 
PORTB


	)

2446 
	#PB2_PWM
 
NULL


	)

2447 
	#PB2_DDR
 
DDRB


	)

2448 #unde‡
PB3


2449 
	#PB3_PIN
 
PINB3


	)

2450 
	#PB3_RPORT
 
PINB


	)

2451 
	#PB3_WPORT
 
PORTB


	)

2452 
	#PB3_PWM
 
NULL


	)

2453 
	#PB3_DDR
 
DDRB


	)

2454 #unde‡
PB4


2455 
	#PB4_PIN
 
PINB4


	)

2456 
	#PB4_RPORT
 
PINB


	)

2457 
	#PB4_WPORT
 
PORTB


	)

2458 
	#PB4_PWM
 
NULL


	)

2459 
	#PB4_DDR
 
DDRB


	)

2460 #unde‡
PB5


2461 
	#PB5_PIN
 
PINB5


	)

2462 
	#PB5_RPORT
 
PINB


	)

2463 
	#PB5_WPORT
 
PORTB


	)

2464 
	#PB5_PWM
 
NULL


	)

2465 
	#PB5_DDR
 
DDRB


	)

2466 #unde‡
PB6


2467 
	#PB6_PIN
 
PINB6


	)

2468 
	#PB6_RPORT
 
PINB


	)

2469 
	#PB6_WPORT
 
PORTB


	)

2470 
	#PB6_PWM
 
NULL


	)

2471 
	#PB6_DDR
 
DDRB


	)

2472 #unde‡
PB7


2473 
	#PB7_PIN
 
PINB7


	)

2474 
	#PB7_RPORT
 
PINB


	)

2475 
	#PB7_WPORT
 
PORTB


	)

2476 
	#PB7_PWM
 
NULL


	)

2477 
	#PB7_DDR
 
DDRB


	)

2479 #unde‡
PC0


2480 
	#PC0_PIN
 
PINC0


	)

2481 
	#PC0_RPORT
 
PINC


	)

2482 
	#PC0_WPORT
 
PORTC


	)

2483 
	#PC0_PWM
 
NULL


	)

2484 
	#PC0_DDR
 
DDRC


	)

2485 #unde‡
PC1


2486 
	#PC1_PIN
 
PINC1


	)

2487 
	#PC1_RPORT
 
PINC


	)

2488 
	#PC1_WPORT
 
PORTC


	)

2489 
	#PC1_PWM
 
NULL


	)

2490 
	#PC1_DDR
 
DDRC


	)

2491 #unde‡
PC2


2492 
	#PC2_PIN
 
PINC2


	)

2493 
	#PC2_RPORT
 
PINC


	)

2494 
	#PC2_WPORT
 
PORTC


	)

2495 
	#PC2_PWM
 
NULL


	)

2496 
	#PC2_DDR
 
DDRC


	)

2497 #unde‡
PC3


2498 
	#PC3_PIN
 
PINC3


	)

2499 
	#PC3_RPORT
 
PINC


	)

2500 
	#PC3_WPORT
 
PORTC


	)

2501 
	#PC3_PWM
 
NULL


	)

2502 
	#PC3_DDR
 
DDRC


	)

2503 #unde‡
PC4


2504 
	#PC4_PIN
 
PINC4


	)

2505 
	#PC4_RPORT
 
PINC


	)

2506 
	#PC4_WPORT
 
PORTC


	)

2507 
	#PC4_PWM
 
NULL


	)

2508 
	#PC4_DDR
 
DDRC


	)

2509 #unde‡
PC5


2510 
	#PC5_PIN
 
PINC5


	)

2511 
	#PC5_RPORT
 
PINC


	)

2512 
	#PC5_WPORT
 
PORTC


	)

2513 
	#PC5_PWM
 
NULL


	)

2514 
	#PC5_DDR
 
DDRC


	)

2515 #unde‡
PC6


2516 
	#PC6_PIN
 
PINC6


	)

2517 
	#PC6_RPORT
 
PINC


	)

2518 
	#PC6_WPORT
 
PORTC


	)

2519 
	#PC6_PWM
 
NULL


	)

2520 
	#PC6_DDR
 
DDRC


	)

2521 #unde‡
PC7


2522 
	#PC7_PIN
 
PINC7


	)

2523 
	#PC7_RPORT
 
PINC


	)

2524 
	#PC7_WPORT
 
PORTC


	)

2525 
	#PC7_PWM
 
NULL


	)

2526 
	#PC7_DDR
 
DDRC


	)

2528 #unde‡
PD0


2529 
	#PD0_PIN
 
PIND0


	)

2530 
	#PD0_RPORT
 
PIND


	)

2531 
	#PD0_WPORT
 
PORTD


	)

2532 
	#PD0_PWM
 
NULL


	)

2533 
	#PD0_DDR
 
DDRD


	)

2534 #unde‡
PD1


2535 
	#PD1_PIN
 
PIND1


	)

2536 
	#PD1_RPORT
 
PIND


	)

2537 
	#PD1_WPORT
 
PORTD


	)

2538 
	#PD1_PWM
 
NULL


	)

2539 
	#PD1_DDR
 
DDRD


	)

2540 #unde‡
PD2


2541 
	#PD2_PIN
 
PIND2


	)

2542 
	#PD2_RPORT
 
PIND


	)

2543 
	#PD2_WPORT
 
PORTD


	)

2544 
	#PD2_PWM
 
NULL


	)

2545 
	#PD2_DDR
 
DDRD


	)

2546 #unde‡
PD3


2547 
	#PD3_PIN
 
PIND3


	)

2548 
	#PD3_RPORT
 
PIND


	)

2549 
	#PD3_WPORT
 
PORTD


	)

2550 
	#PD3_PWM
 
NULL


	)

2551 
	#PD3_DDR
 
DDRD


	)

2552 #unde‡
PD4


2553 
	#PD4_PIN
 
PIND4


	)

2554 
	#PD4_RPORT
 
PIND


	)

2555 
	#PD4_WPORT
 
PORTD


	)

2556 
	#PD4_PWM
 
NULL


	)

2557 
	#PD4_DDR
 
DDRD


	)

2558 #unde‡
PD5


2559 
	#PD5_PIN
 
PIND5


	)

2560 
	#PD5_RPORT
 
PIND


	)

2561 
	#PD5_WPORT
 
PORTD


	)

2562 
	#PD5_PWM
 
NULL


	)

2563 
	#PD5_DDR
 
DDRD


	)

2564 #unde‡
PD6


2565 
	#PD6_PIN
 
PIND6


	)

2566 
	#PD6_RPORT
 
PIND


	)

2567 
	#PD6_WPORT
 
PORTD


	)

2568 
	#PD6_PWM
 
NULL


	)

2569 
	#PD6_DDR
 
DDRD


	)

2570 #unde‡
PD7


2571 
	#PD7_PIN
 
PIND7


	)

2572 
	#PD7_RPORT
 
PIND


	)

2573 
	#PD7_WPORT
 
PORTD


	)

2574 
	#PD7_PWM
 
NULL


	)

2575 
	#PD7_DDR
 
DDRD


	)

2577 #unde‡
PE0


2578 
	#PE0_PIN
 
PINE0


	)

2579 
	#PE0_RPORT
 
PINE


	)

2580 
	#PE0_WPORT
 
PORTE


	)

2581 
	#PE0_PWM
 
NULL


	)

2582 
	#PE0_DDR
 
DDRE


	)

2583 #unde‡
PE1


2584 
	#PE1_PIN
 
PINE1


	)

2585 
	#PE1_RPORT
 
PINE


	)

2586 
	#PE1_WPORT
 
PORTE


	)

2587 
	#PE1_PWM
 
NULL


	)

2588 
	#PE1_DDR
 
DDRE


	)

2589 #unde‡
PE2


2590 
	#PE2_PIN
 
PINE2


	)

2591 
	#PE2_RPORT
 
PINE


	)

2592 
	#PE2_WPORT
 
PORTE


	)

2593 
	#PE2_PWM
 
NULL


	)

2594 
	#PE2_DDR
 
DDRE


	)

2595 #unde‡
PE3


2596 
	#PE3_PIN
 
PINE3


	)

2597 
	#PE3_RPORT
 
PINE


	)

2598 
	#PE3_WPORT
 
PORTE


	)

2599 
	#PE3_PWM
 
NULL


	)

2600 
	#PE3_DDR
 
DDRE


	)

2601 #unde‡
PE4


2602 
	#PE4_PIN
 
PINE4


	)

2603 
	#PE4_RPORT
 
PINE


	)

2604 
	#PE4_WPORT
 
PORTE


	)

2605 
	#PE4_PWM
 
NULL


	)

2606 
	#PE4_DDR
 
DDRE


	)

2607 #unde‡
PE5


2608 
	#PE5_PIN
 
PINE5


	)

2609 
	#PE5_RPORT
 
PINE


	)

2610 
	#PE5_WPORT
 
PORTE


	)

2611 
	#PE5_PWM
 
NULL


	)

2612 
	#PE5_DDR
 
DDRE


	)

2613 #unde‡
PE6


2614 
	#PE6_PIN
 
PINE6


	)

2615 
	#PE6_RPORT
 
PINE


	)

2616 
	#PE6_WPORT
 
PORTE


	)

2617 
	#PE6_PWM
 
NULL


	)

2618 
	#PE6_DDR
 
DDRE


	)

2619 #unde‡
PE7


2620 
	#PE7_PIN
 
PINE7


	)

2621 
	#PE7_RPORT
 
PINE


	)

2622 
	#PE7_WPORT
 
PORTE


	)

2623 
	#PE7_PWM
 
NULL


	)

2624 
	#PE7_DDR
 
DDRE


	)

2626 #unde‡
PF0


2627 
	#PF0_PIN
 
PINF0


	)

2628 
	#PF0_RPORT
 
PINF


	)

2629 
	#PF0_WPORT
 
PORTF


	)

2630 
	#PF0_PWM
 
NULL


	)

2631 
	#PF0_DDR
 
DDRF


	)

2632 #unde‡
PF1


2633 
	#PF1_PIN
 
PINF1


	)

2634 
	#PF1_RPORT
 
PINF


	)

2635 
	#PF1_WPORT
 
PORTF


	)

2636 
	#PF1_PWM
 
NULL


	)

2637 
	#PF1_DDR
 
DDRF


	)

2638 #unde‡
PF2


2639 
	#PF2_PIN
 
PINF2


	)

2640 
	#PF2_RPORT
 
PINF


	)

2641 
	#PF2_WPORT
 
PORTF


	)

2642 
	#PF2_PWM
 
NULL


	)

2643 
	#PF2_DDR
 
DDRF


	)

2644 #unde‡
PF3


2645 
	#PF3_PIN
 
PINF3


	)

2646 
	#PF3_RPORT
 
PINF


	)

2647 
	#PF3_WPORT
 
PORTF


	)

2648 
	#PF3_PWM
 
NULL


	)

2649 
	#PF3_DDR
 
DDRF


	)

2650 #unde‡
PF4


2651 
	#PF4_PIN
 
PINF4


	)

2652 
	#PF4_RPORT
 
PINF


	)

2653 
	#PF4_WPORT
 
PORTF


	)

2654 
	#PF4_PWM
 
NULL


	)

2655 
	#PF4_DDR
 
DDRF


	)

2656 #unde‡
PF5


2657 
	#PF5_PIN
 
PINF5


	)

2658 
	#PF5_RPORT
 
PINF


	)

2659 
	#PF5_WPORT
 
PORTF


	)

2660 
	#PF5_PWM
 
NULL


	)

2661 
	#PF5_DDR
 
DDRF


	)

2662 #unde‡
PF6


2663 
	#PF6_PIN
 
PINF6


	)

2664 
	#PF6_RPORT
 
PINF


	)

2665 
	#PF6_WPORT
 
PORTF


	)

2666 
	#PF6_PWM
 
NULL


	)

2667 
	#PF6_DDR
 
DDRF


	)

2668 #unde‡
PF7


2669 
	#PF7_PIN
 
PINF7


	)

2670 
	#PF7_RPORT
 
PINF


	)

2671 
	#PF7_WPORT
 
PORTF


	)

2672 
	#PF7_PWM
 
NULL


	)

2673 
	#PF7_DDR
 
DDRF


	)

2686 
	#DIO0_PIN
 
PIND0


	)

2687 
	#DIO0_RPORT
 
PIND


	)

2688 
	#DIO0_WPORT
 
PORTD


	)

2689 
	#DIO0_PWM
 
NULL


	)

2690 
	#DIO0_DDR
 
DDRD


	)

2692 
	#DIO1_PIN
 
PIND1


	)

2693 
	#DIO1_RPORT
 
PIND


	)

2694 
	#DIO1_WPORT
 
PORTD


	)

2695 
	#DIO1_PWM
 
NULL


	)

2696 
	#DIO1_DDR
 
DDRD


	)

2698 
	#DIO2_PIN
 
PIND2


	)

2699 
	#DIO2_RPORT
 
PIND


	)

2700 
	#DIO2_WPORT
 
PORTD


	)

2701 
	#DIO2_PWM
 
NULL


	)

2702 
	#DIO2_DDR
 
DDRD


	)

2704 
	#DIO3_PIN
 
PIND3


	)

2705 
	#DIO3_RPORT
 
PIND


	)

2706 
	#DIO3_WPORT
 
PORTD


	)

2707 
	#DIO3_PWM
 
NULL


	)

2708 
	#DIO3_DDR
 
DDRD


	)

2710 
	#DIO4_PIN
 
PIND4


	)

2711 
	#DIO4_RPORT
 
PIND


	)

2712 
	#DIO4_WPORT
 
PORTD


	)

2713 
	#DIO4_PWM
 
NULL


	)

2714 
	#DIO4_DDR
 
DDRD


	)

2716 
	#DIO5_PIN
 
PIND5


	)

2717 
	#DIO5_RPORT
 
PIND


	)

2718 
	#DIO5_WPORT
 
PORTD


	)

2719 
	#DIO5_PWM
 
NULL


	)

2720 
	#DIO5_DDR
 
DDRD


	)

2722 
	#DIO6_PIN
 
PIND6


	)

2723 
	#DIO6_RPORT
 
PIND


	)

2724 
	#DIO6_WPORT
 
PORTD


	)

2725 
	#DIO6_PWM
 
NULL


	)

2726 
	#DIO6_DDR
 
DDRD


	)

2728 
	#DIO7_PIN
 
PIND7


	)

2729 
	#DIO7_RPORT
 
PIND


	)

2730 
	#DIO7_WPORT
 
PORTD


	)

2731 
	#DIO7_PWM
 
NULL


	)

2732 
	#DIO7_DDR
 
DDRD


	)

2734 
	#DIO8_PIN
 
PINE0


	)

2735 
	#DIO8_RPORT
 
PINE


	)

2736 
	#DIO8_WPORT
 
PORTE


	)

2737 
	#DIO8_PWM
 
NULL


	)

2738 
	#DIO8_DDR
 
DDRE


	)

2740 
	#DIO9_PIN
 
PINE1


	)

2741 
	#DIO9_RPORT
 
PINE


	)

2742 
	#DIO9_WPORT
 
PORTE


	)

2743 
	#DIO9_PWM
 
NULL


	)

2744 
	#DIO9_DDR
 
DDRE


	)

2746 
	#DIO10_PIN
 
PINC0


	)

2747 
	#DIO10_RPORT
 
PINC


	)

2748 
	#DIO10_WPORT
 
PORTC


	)

2749 
	#DIO10_PWM
 
NULL


	)

2750 
	#DIO10_DDR
 
DDRC


	)

2752 
	#DIO11_PIN
 
PINC1


	)

2753 
	#DIO11_RPORT
 
PINC


	)

2754 
	#DIO11_WPORT
 
PORTC


	)

2755 
	#DIO11_PWM
 
NULL


	)

2756 
	#DIO11_DDR
 
DDRC


	)

2758 
	#DIO12_PIN
 
PINC2


	)

2759 
	#DIO12_RPORT
 
PINC


	)

2760 
	#DIO12_WPORT
 
PORTC


	)

2761 
	#DIO12_PWM
 
NULL


	)

2762 
	#DIO12_DDR
 
DDRC


	)

2764 
	#DIO13_PIN
 
PINC3


	)

2765 
	#DIO13_RPORT
 
PINC


	)

2766 
	#DIO13_WPORT
 
PORTC


	)

2767 
	#DIO13_PWM
 
NULL


	)

2768 
	#DIO13_DDR
 
DDRC


	)

2770 
	#DIO14_PIN
 
PINC4


	)

2771 
	#DIO14_RPORT
 
PINC


	)

2772 
	#DIO14_WPORT
 
PORTC


	)

2773 
	#DIO14_PWM
 
NULL


	)

2774 
	#DIO14_DDR
 
DDRC


	)

2776 
	#DIO15_PIN
 
PINC5


	)

2777 
	#DIO15_RPORT
 
PINC


	)

2778 
	#DIO15_WPORT
 
PORTC


	)

2779 
	#DIO15_PWM
 
NULL


	)

2780 
	#DIO15_DDR
 
DDRC


	)

2782 
	#DIO16_PIN
 
PINC6


	)

2783 
	#DIO16_RPORT
 
PINC


	)

2784 
	#DIO16_WPORT
 
PORTC


	)

2785 
	#DIO16_PWM
 
NULL


	)

2786 
	#DIO16_DDR
 
DDRC


	)

2788 
	#DIO17_PIN
 
PINC7


	)

2789 
	#DIO17_RPORT
 
PINC


	)

2790 
	#DIO17_WPORT
 
PORTC


	)

2791 
	#DIO17_PWM
 
NULL


	)

2792 
	#DIO17_DDR
 
DDRC


	)

2794 
	#DIO18_PIN
 
PINE6


	)

2795 
	#DIO18_RPORT
 
PINE


	)

2796 
	#DIO18_WPORT
 
PORTE


	)

2797 
	#DIO18_PWM
 
NULL


	)

2798 
	#DIO18_DDR
 
DDRE


	)

2800 
	#DIO19_PIN
 
PINE7


	)

2801 
	#DIO19_RPORT
 
PINE


	)

2802 
	#DIO19_WPORT
 
PORTE


	)

2803 
	#DIO19_PWM
 
NULL


	)

2804 
	#DIO19_DDR
 
DDRE


	)

2806 
	#DIO20_PIN
 
PINB0


	)

2807 
	#DIO20_RPORT
 
PINB


	)

2808 
	#DIO20_WPORT
 
PORTB


	)

2809 
	#DIO20_PWM
 
NULL


	)

2810 
	#DIO20_DDR
 
DDRB


	)

2812 
	#DIO21_PIN
 
PINB1


	)

2813 
	#DIO21_RPORT
 
PINB


	)

2814 
	#DIO21_WPORT
 
PORTB


	)

2815 
	#DIO21_PWM
 
NULL


	)

2816 
	#DIO21_DDR
 
DDRB


	)

2818 
	#DIO22_PIN
 
PINB2


	)

2819 
	#DIO22_RPORT
 
PINB


	)

2820 
	#DIO22_WPORT
 
PORTB


	)

2821 
	#DIO22_PWM
 
NULL


	)

2822 
	#DIO22_DDR
 
DDRB


	)

2824 
	#DIO23_PIN
 
PINB3


	)

2825 
	#DIO23_RPORT
 
PINB


	)

2826 
	#DIO23_WPORT
 
PORTB


	)

2827 
	#DIO23_PWM
 
NULL


	)

2828 
	#DIO23_DDR
 
DDRB


	)

2830 
	#DIO24_PIN
 
PINB4


	)

2831 
	#DIO24_RPORT
 
PINB


	)

2832 
	#DIO24_WPORT
 
PORTB


	)

2833 
	#DIO24_PWM
 
NULL


	)

2834 
	#DIO24_DDR
 
DDRB


	)

2836 
	#DIO25_PIN
 
PINB5


	)

2837 
	#DIO25_RPORT
 
PINB


	)

2838 
	#DIO25_WPORT
 
PORTB


	)

2839 
	#DIO25_PWM
 
NULL


	)

2840 
	#DIO25_DDR
 
DDRB


	)

2842 
	#DIO26_PIN
 
PINB6


	)

2843 
	#DIO26_RPORT
 
PINB


	)

2844 
	#DIO26_WPORT
 
PORTB


	)

2845 
	#DIO26_PWM
 
NULL


	)

2846 
	#DIO26_DDR
 
DDRB


	)

2848 
	#DIO27_PIN
 
PINB7


	)

2849 
	#DIO27_RPORT
 
PINB


	)

2850 
	#DIO27_WPORT
 
PORTB


	)

2851 
	#DIO27_PWM
 
NULL


	)

2852 
	#DIO27_DDR
 
DDRB


	)

2854 
	#DIO28_PIN
 
PINA0


	)

2855 
	#DIO28_RPORT
 
PINA


	)

2856 
	#DIO28_WPORT
 
PORTA


	)

2857 
	#DIO28_PWM
 
NULL


	)

2858 
	#DIO28_DDR
 
DDRA


	)

2860 
	#DIO29_PIN
 
PINA1


	)

2861 
	#DIO29_RPORT
 
PINA


	)

2862 
	#DIO29_WPORT
 
PORTA


	)

2863 
	#DIO29_PWM
 
NULL


	)

2864 
	#DIO29_DDR
 
DDRA


	)

2866 
	#DIO30_PIN
 
PINA2


	)

2867 
	#DIO30_RPORT
 
PINA


	)

2868 
	#DIO30_WPORT
 
PORTA


	)

2869 
	#DIO30_PWM
 
NULL


	)

2870 
	#DIO30_DDR
 
DDRA


	)

2872 
	#DIO31_PIN
 
PINA3


	)

2873 
	#DIO31_RPORT
 
PINA


	)

2874 
	#DIO31_WPORT
 
PORTA


	)

2875 
	#DIO31_PWM
 
NULL


	)

2876 
	#DIO31_DDR
 
DDRA


	)

2878 
	#DIO32_PIN
 
PINA4


	)

2879 
	#DIO32_RPORT
 
PINA


	)

2880 
	#DIO32_WPORT
 
PORTA


	)

2881 
	#DIO32_PWM
 
NULL


	)

2882 
	#DIO32_DDR
 
DDRA


	)

2884 
	#DIO33_PIN
 
PINA5


	)

2885 
	#DIO33_RPORT
 
PINA


	)

2886 
	#DIO33_WPORT
 
PORTA


	)

2887 
	#DIO33_PWM
 
NULL


	)

2888 
	#DIO33_DDR
 
DDRA


	)

2890 
	#DIO34_PIN
 
PINA6


	)

2891 
	#DIO34_RPORT
 
PINA


	)

2892 
	#DIO34_WPORT
 
PORTA


	)

2893 
	#DIO34_PWM
 
NULL


	)

2894 
	#DIO34_DDR
 
DDRA


	)

2896 
	#DIO35_PIN
 
PINA7


	)

2897 
	#DIO35_RPORT
 
PINA


	)

2898 
	#DIO35_WPORT
 
PORTA


	)

2899 
	#DIO35_PWM
 
NULL


	)

2900 
	#DIO35_DDR
 
DDRA


	)

2902 
	#DIO36_PIN
 
PINE4


	)

2903 
	#DIO36_RPORT
 
PINE


	)

2904 
	#DIO36_WPORT
 
PORTE


	)

2905 
	#DIO36_PWM
 
NULL


	)

2906 
	#DIO36_DDR
 
DDRE


	)

2908 
	#DIO37_PIN
 
PINE5


	)

2909 
	#DIO37_RPORT
 
PINE


	)

2910 
	#DIO37_WPORT
 
PORTE


	)

2911 
	#DIO37_PWM
 
NULL


	)

2912 
	#DIO37_DDR
 
DDRE


	)

2914 
	#DIO38_PIN
 
PINF0


	)

2915 
	#DIO38_RPORT
 
PINF


	)

2916 
	#DIO38_WPORT
 
PORTF


	)

2917 
	#DIO38_PWM
 
NULL


	)

2918 
	#DIO38_DDR
 
DDRF


	)

2920 
	#DIO39_PIN
 
PINF1


	)

2921 
	#DIO39_RPORT
 
PINF


	)

2922 
	#DIO39_WPORT
 
PORTF


	)

2923 
	#DIO39_PWM
 
NULL


	)

2924 
	#DIO39_DDR
 
DDRF


	)

2926 
	#DIO40_PIN
 
PINF2


	)

2927 
	#DIO40_RPORT
 
PINF


	)

2928 
	#DIO40_WPORT
 
PORTF


	)

2929 
	#DIO40_PWM
 
NULL


	)

2930 
	#DIO40_DDR
 
DDRF


	)

2932 
	#DIO41_PIN
 
PINF3


	)

2933 
	#DIO41_RPORT
 
PINF


	)

2934 
	#DIO41_WPORT
 
PORTF


	)

2935 
	#DIO41_PWM
 
NULL


	)

2936 
	#DIO41_DDR
 
DDRF


	)

2938 
	#DIO42_PIN
 
PINF4


	)

2939 
	#DIO42_RPORT
 
PINF


	)

2940 
	#DIO42_WPORT
 
PORTF


	)

2941 
	#DIO42_PWM
 
NULL


	)

2942 
	#DIO42_DDR
 
DDRF


	)

2944 
	#DIO43_PIN
 
PINF5


	)

2945 
	#DIO43_RPORT
 
PINF


	)

2946 
	#DIO43_WPORT
 
PORTF


	)

2947 
	#DIO43_PWM
 
NULL


	)

2948 
	#DIO43_DDR
 
DDRF


	)

2950 
	#DIO44_PIN
 
PINF6


	)

2951 
	#DIO44_RPORT
 
PINF


	)

2952 
	#DIO44_WPORT
 
PORTF


	)

2953 
	#DIO44_PWM
 
NULL


	)

2954 
	#DIO44_DDR
 
DDRF


	)

2956 
	#DIO45_PIN
 
PINF7


	)

2957 
	#DIO45_RPORT
 
PINF


	)

2958 
	#DIO45_WPORT
 
PORTF


	)

2959 
	#DIO45_PWM
 
NULL


	)

2960 
	#DIO45_DDR
 
DDRF


	)

2962 
	#AIO0_PIN
 
PINF0


	)

2963 
	#AIO0_RPORT
 
PINF


	)

2964 
	#AIO0_WPORT
 
PORTF


	)

2965 
	#AIO0_PWM
 
NULL


	)

2966 
	#AIO0_DDR
 
DDRF


	)

2968 
	#AIO1_PIN
 
PINF1


	)

2969 
	#AIO1_RPORT
 
PINF


	)

2970 
	#AIO1_WPORT
 
PORTF


	)

2971 
	#AIO1_PWM
 
NULL


	)

2972 
	#AIO1_DDR
 
DDRF


	)

2974 
	#AIO2_PIN
 
PINF2


	)

2975 
	#AIO2_RPORT
 
PINF


	)

2976 
	#AIO2_WPORT
 
PORTF


	)

2977 
	#AIO2_PWM
 
NULL


	)

2978 
	#AIO2_DDR
 
DDRF


	)

2980 
	#AIO3_PIN
 
PINF3


	)

2981 
	#AIO3_RPORT
 
PINF


	)

2982 
	#AIO3_WPORT
 
PORTF


	)

2983 
	#AIO3_PWM
 
NULL


	)

2984 
	#AIO3_DDR
 
DDRF


	)

2986 
	#AIO4_PIN
 
PINF4


	)

2987 
	#AIO4_RPORT
 
PINF


	)

2988 
	#AIO4_WPORT
 
PORTF


	)

2989 
	#AIO4_PWM
 
NULL


	)

2990 
	#AIO4_DDR
 
DDRF


	)

2992 
	#AIO5_PIN
 
PINF5


	)

2993 
	#AIO5_RPORT
 
PINF


	)

2994 
	#AIO5_WPORT
 
PORTF


	)

2995 
	#AIO5_PWM
 
NULL


	)

2996 
	#AIO5_DDR
 
DDRF


	)

2998 
	#AIO6_PIN
 
PINF6


	)

2999 
	#AIO6_RPORT
 
PINF


	)

3000 
	#AIO6_WPORT
 
PORTF


	)

3001 
	#AIO6_PWM
 
NULL


	)

3002 
	#AIO6_DDR
 
DDRF


	)

3004 
	#AIO7_PIN
 
PINF7


	)

3005 
	#AIO7_RPORT
 
PINF


	)

3006 
	#AIO7_WPORT
 
PORTF


	)

3007 
	#AIO7_PWM
 
NULL


	)

3008 
	#AIO7_DDR
 
DDRF


	)

3012 
	#DIO46_PIN
 
PINE2


	)

3013 
	#DIO46_RPORT
 
PINE


	)

3014 
	#DIO46_WPORT
 
PORTE


	)

3015 
	#DIO46_PWM
 
NULL


	)

3016 
	#DIO46_DDR
 
DDRE


	)

3018 
	#DIO47_PIN
 
PINE3


	)

3019 
	#DIO47_RPORT
 
PINE


	)

3020 
	#DIO47_WPORT
 
PORTE


	)

3021 
	#DIO47_PWM
 
NULL


	)

3022 
	#DIO47_DDR
 
DDRE


	)

3025 #unde‡
PA0


3026 
	#PA0_PIN
 
PINA0


	)

3027 
	#PA0_RPORT
 
PINA


	)

3028 
	#PA0_WPORT
 
PORTA


	)

3029 
	#PA0_PWM
 
NULL


	)

3030 
	#PA0_DDR
 
DDRA


	)

3031 #unde‡
PA1


3032 
	#PA1_PIN
 
PINA1


	)

3033 
	#PA1_RPORT
 
PINA


	)

3034 
	#PA1_WPORT
 
PORTA


	)

3035 
	#PA1_PWM
 
NULL


	)

3036 
	#PA1_DDR
 
DDRA


	)

3037 #unde‡
PA2


3038 
	#PA2_PIN
 
PINA2


	)

3039 
	#PA2_RPORT
 
PINA


	)

3040 
	#PA2_WPORT
 
PORTA


	)

3041 
	#PA2_PWM
 
NULL


	)

3042 
	#PA2_DDR
 
DDRA


	)

3043 #unde‡
PA3


3044 
	#PA3_PIN
 
PINA3


	)

3045 
	#PA3_RPORT
 
PINA


	)

3046 
	#PA3_WPORT
 
PORTA


	)

3047 
	#PA3_PWM
 
NULL


	)

3048 
	#PA3_DDR
 
DDRA


	)

3049 #unde‡
PA4


3050 
	#PA4_PIN
 
PINA4


	)

3051 
	#PA4_RPORT
 
PINA


	)

3052 
	#PA4_WPORT
 
PORTA


	)

3053 
	#PA4_PWM
 
NULL


	)

3054 
	#PA4_DDR
 
DDRA


	)

3055 #unde‡
PA5


3056 
	#PA5_PIN
 
PINA5


	)

3057 
	#PA5_RPORT
 
PINA


	)

3058 
	#PA5_WPORT
 
PORTA


	)

3059 
	#PA5_PWM
 
NULL


	)

3060 
	#PA5_DDR
 
DDRA


	)

3061 #unde‡
PA6


3062 
	#PA6_PIN
 
PINA6


	)

3063 
	#PA6_RPORT
 
PINA


	)

3064 
	#PA6_WPORT
 
PORTA


	)

3065 
	#PA6_PWM
 
NULL


	)

3066 
	#PA6_DDR
 
DDRA


	)

3067 #unde‡
PA7


3068 
	#PA7_PIN
 
PINA7


	)

3069 
	#PA7_RPORT
 
PINA


	)

3070 
	#PA7_WPORT
 
PORTA


	)

3071 
	#PA7_PWM
 
NULL


	)

3072 
	#PA7_DDR
 
DDRA


	)

3074 #unde‡
PB0


3075 
	#PB0_PIN
 
PINB0


	)

3076 
	#PB0_RPORT
 
PINB


	)

3077 
	#PB0_WPORT
 
PORTB


	)

3078 
	#PB0_PWM
 
NULL


	)

3079 
	#PB0_DDR
 
DDRB


	)

3080 #unde‡
PB1


3081 
	#PB1_PIN
 
PINB1


	)

3082 
	#PB1_RPORT
 
PINB


	)

3083 
	#PB1_WPORT
 
PORTB


	)

3084 
	#PB1_PWM
 
NULL


	)

3085 
	#PB1_DDR
 
DDRB


	)

3086 #unde‡
PB2


3087 
	#PB2_PIN
 
PINB2


	)

3088 
	#PB2_RPORT
 
PINB


	)

3089 
	#PB2_WPORT
 
PORTB


	)

3090 
	#PB2_PWM
 
NULL


	)

3091 
	#PB2_DDR
 
DDRB


	)

3092 #unde‡
PB3


3093 
	#PB3_PIN
 
PINB3


	)

3094 
	#PB3_RPORT
 
PINB


	)

3095 
	#PB3_WPORT
 
PORTB


	)

3096 
	#PB3_PWM
 
NULL


	)

3097 
	#PB3_DDR
 
DDRB


	)

3098 #unde‡
PB4


3099 
	#PB4_PIN
 
PINB4


	)

3100 
	#PB4_RPORT
 
PINB


	)

3101 
	#PB4_WPORT
 
PORTB


	)

3102 
	#PB4_PWM
 
NULL


	)

3103 
	#PB4_DDR
 
DDRB


	)

3104 #unde‡
PB5


3105 
	#PB5_PIN
 
PINB5


	)

3106 
	#PB5_RPORT
 
PINB


	)

3107 
	#PB5_WPORT
 
PORTB


	)

3108 
	#PB5_PWM
 
NULL


	)

3109 
	#PB5_DDR
 
DDRB


	)

3110 #unde‡
PB6


3111 
	#PB6_PIN
 
PINB6


	)

3112 
	#PB6_RPORT
 
PINB


	)

3113 
	#PB6_WPORT
 
PORTB


	)

3114 
	#PB6_PWM
 
NULL


	)

3115 
	#PB6_DDR
 
DDRB


	)

3116 #unde‡
PB7


3117 
	#PB7_PIN
 
PINB7


	)

3118 
	#PB7_RPORT
 
PINB


	)

3119 
	#PB7_WPORT
 
PORTB


	)

3120 
	#PB7_PWM
 
NULL


	)

3121 
	#PB7_DDR
 
DDRB


	)

3123 #unde‡
PC0


3124 
	#PC0_PIN
 
PINC0


	)

3125 
	#PC0_RPORT
 
PINC


	)

3126 
	#PC0_WPORT
 
PORTC


	)

3127 
	#PC0_PWM
 
NULL


	)

3128 
	#PC0_DDR
 
DDRC


	)

3129 #unde‡
PC1


3130 
	#PC1_PIN
 
PINC1


	)

3131 
	#PC1_RPORT
 
PINC


	)

3132 
	#PC1_WPORT
 
PORTC


	)

3133 
	#PC1_PWM
 
NULL


	)

3134 
	#PC1_DDR
 
DDRC


	)

3135 #unde‡
PC2


3136 
	#PC2_PIN
 
PINC2


	)

3137 
	#PC2_RPORT
 
PINC


	)

3138 
	#PC2_WPORT
 
PORTC


	)

3139 
	#PC2_PWM
 
NULL


	)

3140 
	#PC2_DDR
 
DDRC


	)

3141 #unde‡
PC3


3142 
	#PC3_PIN
 
PINC3


	)

3143 
	#PC3_RPORT
 
PINC


	)

3144 
	#PC3_WPORT
 
PORTC


	)

3145 
	#PC3_PWM
 
NULL


	)

3146 
	#PC3_DDR
 
DDRC


	)

3147 #unde‡
PC4


3148 
	#PC4_PIN
 
PINC4


	)

3149 
	#PC4_RPORT
 
PINC


	)

3150 
	#PC4_WPORT
 
PORTC


	)

3151 
	#PC4_PWM
 
NULL


	)

3152 
	#PC4_DDR
 
DDRC


	)

3153 #unde‡
PC5


3154 
	#PC5_PIN
 
PINC5


	)

3155 
	#PC5_RPORT
 
PINC


	)

3156 
	#PC5_WPORT
 
PORTC


	)

3157 
	#PC5_PWM
 
NULL


	)

3158 
	#PC5_DDR
 
DDRC


	)

3159 #unde‡
PC6


3160 
	#PC6_PIN
 
PINC6


	)

3161 
	#PC6_RPORT
 
PINC


	)

3162 
	#PC6_WPORT
 
PORTC


	)

3163 
	#PC6_PWM
 
NULL


	)

3164 
	#PC6_DDR
 
DDRC


	)

3165 #unde‡
PC7


3166 
	#PC7_PIN
 
PINC7


	)

3167 
	#PC7_RPORT
 
PINC


	)

3168 
	#PC7_WPORT
 
PORTC


	)

3169 
	#PC7_PWM
 
NULL


	)

3170 
	#PC7_DDR
 
DDRC


	)

3172 #unde‡
PD0


3173 
	#PD0_PIN
 
PIND0


	)

3174 
	#PD0_RPORT
 
PIND


	)

3175 
	#PD0_WPORT
 
PORTD


	)

3176 
	#PD0_PWM
 
NULL


	)

3177 
	#PD0_DDR
 
DDRD


	)

3178 #unde‡
PD1


3179 
	#PD1_PIN
 
PIND1


	)

3180 
	#PD1_RPORT
 
PIND


	)

3181 
	#PD1_WPORT
 
PORTD


	)

3182 
	#PD1_PWM
 
NULL


	)

3183 
	#PD1_DDR
 
DDRD


	)

3184 #unde‡
PD2


3185 
	#PD2_PIN
 
PIND2


	)

3186 
	#PD2_RPORT
 
PIND


	)

3187 
	#PD2_WPORT
 
PORTD


	)

3188 
	#PD2_PWM
 
NULL


	)

3189 
	#PD2_DDR
 
DDRD


	)

3190 #unde‡
PD3


3191 
	#PD3_PIN
 
PIND3


	)

3192 
	#PD3_RPORT
 
PIND


	)

3193 
	#PD3_WPORT
 
PORTD


	)

3194 
	#PD3_PWM
 
NULL


	)

3195 
	#PD3_DDR
 
DDRD


	)

3196 #unde‡
PD4


3197 
	#PD4_PIN
 
PIND4


	)

3198 
	#PD4_RPORT
 
PIND


	)

3199 
	#PD4_WPORT
 
PORTD


	)

3200 
	#PD4_PWM
 
NULL


	)

3201 
	#PD4_DDR
 
DDRD


	)

3202 #unde‡
PD5


3203 
	#PD5_PIN
 
PIND5


	)

3204 
	#PD5_RPORT
 
PIND


	)

3205 
	#PD5_WPORT
 
PORTD


	)

3206 
	#PD5_PWM
 
NULL


	)

3207 
	#PD5_DDR
 
DDRD


	)

3208 #unde‡
PD6


3209 
	#PD6_PIN
 
PIND6


	)

3210 
	#PD6_RPORT
 
PIND


	)

3211 
	#PD6_WPORT
 
PORTD


	)

3212 
	#PD6_PWM
 
NULL


	)

3213 
	#PD6_DDR
 
DDRD


	)

3214 #unde‡
PD7


3215 
	#PD7_PIN
 
PIND7


	)

3216 
	#PD7_RPORT
 
PIND


	)

3217 
	#PD7_WPORT
 
PORTD


	)

3218 
	#PD7_PWM
 
NULL


	)

3219 
	#PD7_DDR
 
DDRD


	)

3221 #unde‡
PE0


3222 
	#PE0_PIN
 
PINE0


	)

3223 
	#PE0_RPORT
 
PINE


	)

3224 
	#PE0_WPORT
 
PORTE


	)

3225 
	#PE0_PWM
 
NULL


	)

3226 
	#PE0_DDR
 
DDRE


	)

3227 #unde‡
PE1


3228 
	#PE1_PIN
 
PINE1


	)

3229 
	#PE1_RPORT
 
PINE


	)

3230 
	#PE1_WPORT
 
PORTE


	)

3231 
	#PE1_PWM
 
NULL


	)

3232 
	#PE1_DDR
 
DDRE


	)

3233 #unde‡
PE2


3234 
	#PE2_PIN
 
PINE2


	)

3235 
	#PE2_RPORT
 
PINE


	)

3236 
	#PE2_WPORT
 
PORTE


	)

3237 
	#PE2_PWM
 
NULL


	)

3238 
	#PE2_DDR
 
DDRE


	)

3239 #unde‡
PE3


3240 
	#PE3_PIN
 
PINE3


	)

3241 
	#PE3_RPORT
 
PINE


	)

3242 
	#PE3_WPORT
 
PORTE


	)

3243 
	#PE3_PWM
 
NULL


	)

3244 
	#PE3_DDR
 
DDRE


	)

3245 #unde‡
PE4


3246 
	#PE4_PIN
 
PINE4


	)

3247 
	#PE4_RPORT
 
PINE


	)

3248 
	#PE4_WPORT
 
PORTE


	)

3249 
	#PE4_PWM
 
NULL


	)

3250 
	#PE4_DDR
 
DDRE


	)

3251 #unde‡
PE5


3252 
	#PE5_PIN
 
PINE5


	)

3253 
	#PE5_RPORT
 
PINE


	)

3254 
	#PE5_WPORT
 
PORTE


	)

3255 
	#PE5_PWM
 
NULL


	)

3256 
	#PE5_DDR
 
DDRE


	)

3257 #unde‡
PE6


3258 
	#PE6_PIN
 
PINE6


	)

3259 
	#PE6_RPORT
 
PINE


	)

3260 
	#PE6_WPORT
 
PORTE


	)

3261 
	#PE6_PWM
 
NULL


	)

3262 
	#PE6_DDR
 
DDRE


	)

3263 #unde‡
PE7


3264 
	#PE7_PIN
 
PINE7


	)

3265 
	#PE7_RPORT
 
PINE


	)

3266 
	#PE7_WPORT
 
PORTE


	)

3267 
	#PE7_PWM
 
NULL


	)

3268 
	#PE7_DDR
 
DDRE


	)

3270 #unde‡
PF0


3271 
	#PF0_PIN
 
PINF0


	)

3272 
	#PF0_RPORT
 
PINF


	)

3273 
	#PF0_WPORT
 
PORTF


	)

3274 
	#PF0_PWM
 
NULL


	)

3275 
	#PF0_DDR
 
DDRF


	)

3276 #unde‡
PF1


3277 
	#PF1_PIN
 
PINF1


	)

3278 
	#PF1_RPORT
 
PINF


	)

3279 
	#PF1_WPORT
 
PORTF


	)

3280 
	#PF1_PWM
 
NULL


	)

3281 
	#PF1_DDR
 
DDRF


	)

3282 #unde‡
PF2


3283 
	#PF2_PIN
 
PINF2


	)

3284 
	#PF2_RPORT
 
PINF


	)

3285 
	#PF2_WPORT
 
PORTF


	)

3286 
	#PF2_PWM
 
NULL


	)

3287 
	#PF2_DDR
 
DDRF


	)

3288 #unde‡
PF3


3289 
	#PF3_PIN
 
PINF3


	)

3290 
	#PF3_RPORT
 
PINF


	)

3291 
	#PF3_WPORT
 
PORTF


	)

3292 
	#PF3_PWM
 
NULL


	)

3293 
	#PF3_DDR
 
DDRF


	)

3294 #unde‡
PF4


3295 
	#PF4_PIN
 
PINF4


	)

3296 
	#PF4_RPORT
 
PINF


	)

3297 
	#PF4_WPORT
 
PORTF


	)

3298 
	#PF4_PWM
 
NULL


	)

3299 
	#PF4_DDR
 
DDRF


	)

3300 #unde‡
PF5


3301 
	#PF5_PIN
 
PINF5


	)

3302 
	#PF5_RPORT
 
PINF


	)

3303 
	#PF5_WPORT
 
PORTF


	)

3304 
	#PF5_PWM
 
NULL


	)

3305 
	#PF5_DDR
 
DDRF


	)

3306 #unde‡
PF6


3307 
	#PF6_PIN
 
PINF6


	)

3308 
	#PF6_RPORT
 
PINF


	)

3309 
	#PF6_WPORT
 
PORTF


	)

3310 
	#PF6_PWM
 
NULL


	)

3311 
	#PF6_DDR
 
DDRF


	)

3312 #unde‡
PF7


3313 
	#PF7_PIN
 
PINF7


	)

3314 
	#PF7_RPORT
 
PINF


	)

3315 
	#PF7_WPORT
 
PORTF


	)

3316 
	#PF7_PWM
 
NULL


	)

3317 
	#PF7_DDR
 
DDRF


	)

3323 #i‡
deföed
 (
__AVR_ATmega1281__
Ë|| deföed (
__AVR_ATmega2561__
)

3325 
	#RXD
 
DIO0


	)

3326 
	#TXD
 
DIO1


	)

3329 
	#SCK
 
DIO10


	)

3330 
	#MISO
 
DIO12


	)

3331 
	#MOSI
 
DIO11


	)

3332 
	#SS
 
DIO16


	)

3335 
	#SCL
 
DIO17


	)

3336 
	#SDA
 
DIO18


	)

3339 
	#OC0A
 
DIO9


	)

3340 
	#OC0B
 
DIO4


	)

3341 
	#OC1A
 
DIO7


	)

3342 
	#OC1B
 
DIO8


	)

3343 
	#OC2A
 
DIO6


	)

3344 
	#OC3A
 
DIO5


	)

3345 
	#OC3B
 
DIO2


	)

3346 
	#OC3C
 
DIO3


	)

3350 
	#DEBUG_LED
 
DIO46


	)

3355 
	#DIO0_PIN
 
PINE0


	)

3356 
	#DIO0_RPORT
 
PINE


	)

3357 
	#DIO0_WPORT
 
PORTE


	)

3358 
	#DIO0_DDR
 
DDRE


	)

3359 
	#DIO0_PWM
 
NULL


	)

3361 
	#DIO1_PIN
 
PINE1


	)

3362 
	#DIO1_RPORT
 
PINE


	)

3363 
	#DIO1_WPORT
 
PORTE


	)

3364 
	#DIO1_DDR
 
DDRE


	)

3365 
	#DIO1_PWM
 
NULL


	)

3367 
	#DIO2_PIN
 
PINE4


	)

3368 
	#DIO2_RPORT
 
PINE


	)

3369 
	#DIO2_WPORT
 
PORTE


	)

3370 
	#DIO2_DDR
 
DDRE


	)

3371 
	#DIO2_PWM
 &
OCR3BL


	)

3373 
	#DIO3_PIN
 
PINE5


	)

3374 
	#DIO3_RPORT
 
PINE


	)

3375 
	#DIO3_WPORT
 
PORTE


	)

3376 
	#DIO3_DDR
 
DDRE


	)

3377 
	#DIO3_PWM
 &
OCR3CL


	)

3379 
	#DIO4_PIN
 
PING5


	)

3380 
	#DIO4_RPORT
 
PING


	)

3381 
	#DIO4_WPORT
 
PORTG


	)

3382 
	#DIO4_DDR
 
DDRG


	)

3383 
	#DIO4_PWM
 &
OCR0B


	)

3385 
	#DIO5_PIN
 
PINE3


	)

3386 
	#DIO5_RPORT
 
PINE


	)

3387 
	#DIO5_WPORT
 
PORTE


	)

3388 
	#DIO5_DDR
 
DDRE


	)

3389 
	#DIO5_PWM
 &
OCR3AL


	)

3391 
	#DIO6_PIN
 
PINB4


	)

3392 
	#DIO6_RPORT
 
PINB


	)

3393 
	#DIO6_WPORT
 
PORTB


	)

3394 
	#DIO6_DDR
 
DDRB


	)

3395 
	#DIO6_PWM
 &
OCR2AL


	)

3397 
	#DIO7_PIN
 
PINB5


	)

3398 
	#DIO7_RPORT
 
PINB


	)

3399 
	#DIO7_WPORT
 
PORTB


	)

3400 
	#DIO7_DDR
 
DDRB


	)

3401 
	#DIO7_PWM
 &
OCR1AL


	)

3403 
	#DIO8_PIN
 
PINB6


	)

3404 
	#DIO8_RPORT
 
PINB


	)

3405 
	#DIO8_WPORT
 
PORTB


	)

3406 
	#DIO8_DDR
 
DDRB


	)

3407 
	#DIO8_PWM
 &
OCR1BL


	)

3409 
	#DIO9_PIN
 
PINB7


	)

3410 
	#DIO9_RPORT
 
PINB


	)

3411 
	#DIO9_WPORT
 
PORTB


	)

3412 
	#DIO9_DDR
 
DDRB


	)

3413 
	#DIO9_PWM
 &
OCR0AL


	)

3415 
	#DIO10_PIN
 
PINB1


	)

3416 
	#DIO10_RPORT
 
PINB


	)

3417 
	#DIO10_WPORT
 
PORTB


	)

3418 
	#DIO10_DDR
 
DDRB


	)

3419 
	#DIO10_PWM
 
NULL


	)

3421 
	#DIO11_PIN
 
PINB2


	)

3422 
	#DIO11_RPORT
 
PINB


	)

3423 
	#DIO11_WPORT
 
PORTB


	)

3424 
	#DIO11_DDR
 
DDRB


	)

3425 
	#DIO11_PWM
 
NULL


	)

3427 
	#DIO12_PIN
 
PINB3


	)

3428 
	#DIO12_RPORT
 
PINB


	)

3429 
	#DIO12_WPORT
 
PORTB


	)

3430 
	#DIO12_DDR
 
DDRB


	)

3431 
	#DIO12_PWM
 
NULL


	)

3433 
	#DIO13_PIN
 
PINE2


	)

3434 
	#DIO13_RPORT
 
PINE


	)

3435 
	#DIO13_WPORT
 
PORTE


	)

3436 
	#DIO13_DDR
 
DDRE


	)

3437 
	#DIO13_PWM
 
NULL


	)

3439 
	#DIO14_PIN
 
PINE6


	)

3440 
	#DIO14_RPORT
 
PINE


	)

3441 
	#DIO14_WPORT
 
PORTE


	)

3442 
	#DIO14_DDR
 
DDRE


	)

3443 
	#DIO14_PWM
 
NULL


	)

3445 
	#DIO15_PIN
 
PINE7


	)

3446 
	#DIO15_RPORT
 
PINE


	)

3447 
	#DIO15_WPORT
 
PORTE


	)

3448 
	#DIO15_DDR
 
DDRE


	)

3449 
	#DIO15_PWM
 
NULL


	)

3451 
	#DIO16_PIN
 
PINB0


	)

3452 
	#DIO16_RPORT
 
PINB


	)

3453 
	#DIO16_WPORT
 
PORTB


	)

3454 
	#DIO16_DDR
 
DDRB


	)

3455 
	#DIO16_PWM
 
NULL


	)

3457 
	#DIO17_PIN
 
PIND0


	)

3458 
	#DIO17_RPORT
 
PIND


	)

3459 
	#DIO17_WPORT
 
PORTD


	)

3460 
	#DIO17_DDR
 
DDRD


	)

3461 
	#DIO17_PWM
 
NULL


	)

3463 
	#DIO18_PIN
 
PIND1


	)

3464 
	#DIO18_RPORT
 
PIND


	)

3465 
	#DIO18_WPORT
 
PORTD


	)

3466 
	#DIO18_DDR
 
DDRD


	)

3467 
	#DIO18_PWM
 
NULL


	)

3469 
	#DIO19_PIN
 
PIND2


	)

3470 
	#DIO19_RPORT
 
PIND


	)

3471 
	#DIO19_WPORT
 
PORTD


	)

3472 
	#DIO19_DDR
 
DDRD


	)

3473 
	#DIO19_PWM
 
NULL


	)

3475 
	#DIO20_PIN
 
PIND3


	)

3476 
	#DIO20_RPORT
 
PIND


	)

3477 
	#DIO20_WPORT
 
PORTD


	)

3478 
	#DIO20_DDR
 
DDRD


	)

3479 
	#DIO20_PWM
 
NULL


	)

3481 
	#DIO21_PIN
 
PIND4


	)

3482 
	#DIO21_RPORT
 
PIND


	)

3483 
	#DIO21_WPORT
 
PORTD


	)

3484 
	#DIO21_DDR
 
DDRD


	)

3485 
	#DIO21_PWM
 
NULL


	)

3487 
	#DIO22_PIN
 
PIND5


	)

3488 
	#DIO22_RPORT
 
PIND


	)

3489 
	#DIO22_WPORT
 
PORTD


	)

3490 
	#DIO22_DDR
 
DDRD


	)

3491 
	#DIO22_PWM
 
NULL


	)

3493 
	#DIO23_PIN
 
PIND6


	)

3494 
	#DIO23_RPORT
 
PIND


	)

3495 
	#DIO23_WPORT
 
PORTD


	)

3496 
	#DIO23_DDR
 
DDRD


	)

3497 
	#DIO23_PWM
 
NULL


	)

3499 
	#DIO24_PIN
 
PIND7


	)

3500 
	#DIO24_RPORT
 
PIND


	)

3501 
	#DIO24_WPORT
 
PORTD


	)

3502 
	#DIO24_DDR
 
DDRD


	)

3503 
	#DIO24_PWM
 
NULL


	)

3505 
	#DIO25_PIN
 
PING0


	)

3506 
	#DIO25_RPORT
 
PING


	)

3507 
	#DIO25_WPORT
 
PORTG


	)

3508 
	#DIO25_DDR
 
DDRG


	)

3509 
	#DIO25_PWM
 
NULL


	)

3511 
	#DIO26_PIN
 
PING1


	)

3512 
	#DIO26_RPORT
 
PING


	)

3513 
	#DIO26_WPORT
 
PORTG


	)

3514 
	#DIO26_DDR
 
DDRG


	)

3515 
	#DIO26_PWM
 
NULL


	)

3517 
	#DIO27_PIN
 
PING2


	)

3518 
	#DIO27_RPORT
 
PING


	)

3519 
	#DIO27_WPORT
 
PORTG


	)

3520 
	#DIO27_DDR
 
DDRG


	)

3521 
	#DIO27_PWM
 
NULL


	)

3523 
	#DIO28_PIN
 
PING3


	)

3524 
	#DIO28_RPORT
 
PING


	)

3525 
	#DIO28_WPORT
 
PORTG


	)

3526 
	#DIO28_DDR
 
DDRG


	)

3527 
	#DIO28_PWM
 
NULL


	)

3529 
	#DIO29_PIN
 
PING4


	)

3530 
	#DIO29_RPORT
 
PING


	)

3531 
	#DIO29_WPORT
 
PORTG


	)

3532 
	#DIO29_DDR
 
DDRG


	)

3533 
	#DIO29_PWM
 
NULL


	)

3535 
	#DIO30_PIN
 
PINC0


	)

3536 
	#DIO30_RPORT
 
PINC


	)

3537 
	#DIO30_WPORT
 
PORTC


	)

3538 
	#DIO30_DDR
 
DDRC


	)

3539 
	#DIO30_PWM
 
NULL


	)

3541 
	#DIO31_PIN
 
PINC1


	)

3542 
	#DIO31_RPORT
 
PINC


	)

3543 
	#DIO31_WPORT
 
PORTC


	)

3544 
	#DIO31_DDR
 
DDRC


	)

3545 
	#DIO31_PWM
 
NULL


	)

3547 
	#DIO32_PIN
 
PINC2


	)

3548 
	#DIO32_RPORT
 
PINC


	)

3549 
	#DIO32_WPORT
 
PORTC


	)

3550 
	#DIO32_DDR
 
DDRC


	)

3551 
	#DIO32_PWM
 
NULL


	)

3553 
	#DIO33_PIN
 
PINC3


	)

3554 
	#DIO33_RPORT
 
PINC


	)

3555 
	#DIO33_WPORT
 
PORTC


	)

3556 
	#DIO33_DDR
 
DDRC


	)

3557 
	#DIO33_PWM
 
NULL


	)

3559 
	#DIO34_PIN
 
PINC4


	)

3560 
	#DIO34_RPORT
 
PINC


	)

3561 
	#DIO34_WPORT
 
PORTC


	)

3562 
	#DIO34_DDR
 
DDRC


	)

3563 
	#DIO34_PWM
 
NULL


	)

3565 
	#DIO35_PIN
 
PINC5


	)

3566 
	#DIO35_RPORT
 
PINC


	)

3567 
	#DIO35_WPORT
 
PORTC


	)

3568 
	#DIO35_DDR
 
DDRC


	)

3569 
	#DIO35_PWM
 
NULL


	)

3571 
	#DIO36_PIN
 
PINC6


	)

3572 
	#DIO36_RPORT
 
PINC


	)

3573 
	#DIO36_WPORT
 
PORTC


	)

3574 
	#DIO36_DDR
 
DDRC


	)

3575 
	#DIO36_PWM
 
NULL


	)

3577 
	#DIO37_PIN
 
PINC7


	)

3578 
	#DIO37_RPORT
 
PINC


	)

3579 
	#DIO37_WPORT
 
PORTC


	)

3580 
	#DIO37_DDR
 
DDRC


	)

3581 
	#DIO37_PWM
 
NULL


	)

3583 
	#DIO38_PIN
 
PINA0


	)

3584 
	#DIO38_RPORT
 
PINA


	)

3585 
	#DIO38_WPORT
 
PORTA


	)

3586 
	#DIO38_DDR
 
DDRA


	)

3587 
	#DIO38_PWM
 
NULL


	)

3589 
	#DIO39_PIN
 
PINA1


	)

3590 
	#DIO39_RPORT
 
PINA


	)

3591 
	#DIO39_WPORT
 
PORTA


	)

3592 
	#DIO39_DDR
 
DDRA


	)

3593 
	#DIO39_PWM
 
NULL


	)

3595 
	#DIO40_PIN
 
PINA2


	)

3596 
	#DIO40_RPORT
 
PINA


	)

3597 
	#DIO40_WPORT
 
PORTA


	)

3598 
	#DIO40_DDR
 
DDRA


	)

3599 
	#DIO40_PWM
 
NULL


	)

3601 
	#DIO41_PIN
 
PINA3


	)

3602 
	#DIO41_RPORT
 
PINA


	)

3603 
	#DIO41_WPORT
 
PORTA


	)

3604 
	#DIO41_DDR
 
DDRA


	)

3605 
	#DIO41_PWM
 
NULL


	)

3607 
	#DIO42_PIN
 
PINA4


	)

3608 
	#DIO42_RPORT
 
PINA


	)

3609 
	#DIO42_WPORT
 
PORTA


	)

3610 
	#DIO42_DDR
 
DDRA


	)

3611 
	#DIO42_PWM
 
NULL


	)

3613 
	#DIO43_PIN
 
PINA5


	)

3614 
	#DIO43_RPORT
 
PINA


	)

3615 
	#DIO43_WPORT
 
PORTA


	)

3616 
	#DIO43_DDR
 
DDRA


	)

3617 
	#DIO43_PWM
 
NULL


	)

3619 
	#DIO44_PIN
 
PINA6


	)

3620 
	#DIO44_RPORT
 
PINA


	)

3621 
	#DIO44_WPORT
 
PORTA


	)

3622 
	#DIO44_DDR
 
DDRA


	)

3623 
	#DIO44_PWM
 
NULL


	)

3625 
	#DIO45_PIN
 
PINA7


	)

3626 
	#DIO45_RPORT
 
PINA


	)

3627 
	#DIO45_WPORT
 
PORTA


	)

3628 
	#DIO45_DDR
 
DDRA


	)

3629 
	#DIO45_PWM
 
NULL


	)

3631 
	#DIO46_PIN
 
PINF0


	)

3632 
	#DIO46_RPORT
 
PINF


	)

3633 
	#DIO46_WPORT
 
PORTF


	)

3634 
	#DIO46_DDR
 
DDRF


	)

3635 
	#DIO46_PWM
 
NULL


	)

3637 
	#DIO47_PIN
 
PINF1


	)

3638 
	#DIO47_RPORT
 
PINF


	)

3639 
	#DIO47_WPORT
 
PORTF


	)

3640 
	#DIO47_DDR
 
DDRF


	)

3641 
	#DIO47_PWM
 
NULL


	)

3643 
	#DIO48_PIN
 
PINF2


	)

3644 
	#DIO48_RPORT
 
PINF


	)

3645 
	#DIO48_WPORT
 
PORTF


	)

3646 
	#DIO48_DDR
 
DDRF


	)

3647 
	#DIO48_PWM
 
NULL


	)

3649 
	#DIO49_PIN
 
PINF3


	)

3650 
	#DIO49_RPORT
 
PINF


	)

3651 
	#DIO49_WPORT
 
PORTF


	)

3652 
	#DIO49_DDR
 
DDRF


	)

3653 
	#DIO49_PWM
 
NULL


	)

3655 
	#DIO50_PIN
 
PINF4


	)

3656 
	#DIO50_RPORT
 
PINF


	)

3657 
	#DIO50_WPORT
 
PORTF


	)

3658 
	#DIO50_DDR
 
DDRF


	)

3659 
	#DIO50_PWM
 
NULL


	)

3661 
	#DIO51_PIN
 
PINF5


	)

3662 
	#DIO51_RPORT
 
PINF


	)

3663 
	#DIO51_WPORT
 
PORTF


	)

3664 
	#DIO51_DDR
 
DDRF


	)

3665 
	#DIO51_PWM
 
NULL


	)

3667 
	#DIO52_PIN
 
PINF6


	)

3668 
	#DIO52_RPORT
 
PINF


	)

3669 
	#DIO52_WPORT
 
PORTF


	)

3670 
	#DIO52_DDR
 
DDRF


	)

3671 
	#DIO52_PWM
 
NULL


	)

3673 
	#DIO53_PIN
 
PINF7


	)

3674 
	#DIO53_RPORT
 
PINF


	)

3675 
	#DIO53_WPORT
 
PORTF


	)

3676 
	#DIO53_DDR
 
DDRF


	)

3677 
	#DIO53_PWM
 
NULL


	)

3682 #unde‡
PA0


3683 
	#PA0_PIN
 
PINA0


	)

3684 
	#PA0_RPORT
 
PINA


	)

3685 
	#PA0_WPORT
 
PORTA


	)

3686 
	#PA0_DDR
 
DDRA


	)

3687 
	#PA0_PWM
 
NULL


	)

3688 #unde‡
PA1


3689 
	#PA1_PIN
 
PINA1


	)

3690 
	#PA1_RPORT
 
PINA


	)

3691 
	#PA1_WPORT
 
PORTA


	)

3692 
	#PA1_DDR
 
DDRA


	)

3693 
	#PA1_PWM
 
NULL


	)

3694 #unde‡
PA2


3695 
	#PA2_PIN
 
PINA2


	)

3696 
	#PA2_RPORT
 
PINA


	)

3697 
	#PA2_WPORT
 
PORTA


	)

3698 
	#PA2_DDR
 
DDRA


	)

3699 
	#PA2_PWM
 
NULL


	)

3700 #unde‡
PA3


3701 
	#PA3_PIN
 
PINA3


	)

3702 
	#PA3_RPORT
 
PINA


	)

3703 
	#PA3_WPORT
 
PORTA


	)

3704 
	#PA3_DDR
 
DDRA


	)

3705 
	#PA3_PWM
 
NULL


	)

3706 #unde‡
PA4


3707 
	#PA4_PIN
 
PINA4


	)

3708 
	#PA4_RPORT
 
PINA


	)

3709 
	#PA4_WPORT
 
PORTA


	)

3710 
	#PA4_DDR
 
DDRA


	)

3711 
	#PA4_PWM
 
NULL


	)

3712 #unde‡
PA5


3713 
	#PA5_PIN
 
PINA5


	)

3714 
	#PA5_RPORT
 
PINA


	)

3715 
	#PA5_WPORT
 
PORTA


	)

3716 
	#PA5_DDR
 
DDRA


	)

3717 
	#PA5_PWM
 
NULL


	)

3718 #unde‡
PA6


3719 
	#PA6_PIN
 
PINA6


	)

3720 
	#PA6_RPORT
 
PINA


	)

3721 
	#PA6_WPORT
 
PORTA


	)

3722 
	#PA6_DDR
 
DDRA


	)

3723 
	#PA6_PWM
 
NULL


	)

3724 #unde‡
PA7


3725 
	#PA7_PIN
 
PINA7


	)

3726 
	#PA7_RPORT
 
PINA


	)

3727 
	#PA7_WPORT
 
PORTA


	)

3728 
	#PA7_DDR
 
DDRA


	)

3729 
	#PA7_PWM
 
NULL


	)

3731 #unde‡
PB0


3732 
	#PB0_PIN
 
PINB0


	)

3733 
	#PB0_RPORT
 
PINB


	)

3734 
	#PB0_WPORT
 
PORTB


	)

3735 
	#PB0_DDR
 
DDRB


	)

3736 
	#PB0_PWM
 
NULL


	)

3737 #unde‡
PB1


3738 
	#PB1_PIN
 
PINB1


	)

3739 
	#PB1_RPORT
 
PINB


	)

3740 
	#PB1_WPORT
 
PORTB


	)

3741 
	#PB1_DDR
 
DDRB


	)

3742 
	#PB1_PWM
 
NULL


	)

3743 #unde‡
PB2


3744 
	#PB2_PIN
 
PINB2


	)

3745 
	#PB2_RPORT
 
PINB


	)

3746 
	#PB2_WPORT
 
PORTB


	)

3747 
	#PB2_DDR
 
DDRB


	)

3748 
	#PB2_PWM
 
NULL


	)

3749 #unde‡
PB3


3750 
	#PB3_PIN
 
PINB3


	)

3751 
	#PB3_RPORT
 
PINB


	)

3752 
	#PB3_WPORT
 
PORTB


	)

3753 
	#PB3_DDR
 
DDRB


	)

3754 
	#PB3_PWM
 
NULL


	)

3755 #unde‡
PB4


3756 
	#PB4_PIN
 
PINB4


	)

3757 
	#PB4_RPORT
 
PINB


	)

3758 
	#PB4_WPORT
 
PORTB


	)

3759 
	#PB4_DDR
 
DDRB


	)

3760 
	#PB4_PWM
 &
OCR2A


	)

3761 #unde‡
PB5


3762 
	#PB5_PIN
 
PINB5


	)

3763 
	#PB5_RPORT
 
PINB


	)

3764 
	#PB5_WPORT
 
PORTB


	)

3765 
	#PB5_DDR
 
DDRB


	)

3766 
	#PB5_PWM
 
NULL


	)

3767 #unde‡
PB6


3768 
	#PB6_PIN
 
PINB6


	)

3769 
	#PB6_RPORT
 
PINB


	)

3770 
	#PB6_WPORT
 
PORTB


	)

3771 
	#PB6_DDR
 
DDRB


	)

3772 
	#PB6_PWM
 
NULL


	)

3773 #unde‡
PB7


3774 
	#PB7_PIN
 
PINB7


	)

3775 
	#PB7_RPORT
 
PINB


	)

3776 
	#PB7_WPORT
 
PORTB


	)

3777 
	#PB7_DDR
 
DDRB


	)

3778 
	#PB7_PWM
 &
OCR0A


	)

3780 #unde‡
PC0


3781 
	#PC0_PIN
 
PINC0


	)

3782 
	#PC0_RPORT
 
PINC


	)

3783 
	#PC0_WPORT
 
PORTC


	)

3784 
	#PC0_DDR
 
DDRC


	)

3785 
	#PC0_PWM
 
NULL


	)

3786 #unde‡
PC1


3787 
	#PC1_PIN
 
PINC1


	)

3788 
	#PC1_RPORT
 
PINC


	)

3789 
	#PC1_WPORT
 
PORTC


	)

3790 
	#PC1_DDR
 
DDRC


	)

3791 
	#PC1_PWM
 
NULL


	)

3792 #unde‡
PC2


3793 
	#PC2_PIN
 
PINC2


	)

3794 
	#PC2_RPORT
 
PINC


	)

3795 
	#PC2_WPORT
 
PORTC


	)

3796 
	#PC2_DDR
 
DDRC


	)

3797 
	#PC2_PWM
 
NULL


	)

3798 #unde‡
PC3


3799 
	#PC3_PIN
 
PINC3


	)

3800 
	#PC3_RPORT
 
PINC


	)

3801 
	#PC3_WPORT
 
PORTC


	)

3802 
	#PC3_DDR
 
DDRC


	)

3803 
	#PC3_PWM
 
NULL


	)

3804 #unde‡
PC4


3805 
	#PC4_PIN
 
PINC4


	)

3806 
	#PC4_RPORT
 
PINC


	)

3807 
	#PC4_WPORT
 
PORTC


	)

3808 
	#PC4_DDR
 
DDRC


	)

3809 
	#PC4_PWM
 
NULL


	)

3810 #unde‡
PC5


3811 
	#PC5_PIN
 
PINC5


	)

3812 
	#PC5_RPORT
 
PINC


	)

3813 
	#PC5_WPORT
 
PORTC


	)

3814 
	#PC5_DDR
 
DDRC


	)

3815 
	#PC5_PWM
 
NULL


	)

3816 #unde‡
PC6


3817 
	#PC6_PIN
 
PINC6


	)

3818 
	#PC6_RPORT
 
PINC


	)

3819 
	#PC6_WPORT
 
PORTC


	)

3820 
	#PC6_DDR
 
DDRC


	)

3821 
	#PC6_PWM
 
NULL


	)

3822 #unde‡
PC7


3823 
	#PC7_PIN
 
PINC7


	)

3824 
	#PC7_RPORT
 
PINC


	)

3825 
	#PC7_WPORT
 
PORTC


	)

3826 
	#PC7_DDR
 
DDRC


	)

3827 
	#PC7_PWM
 
NULL


	)

3829 #unde‡
PD0


3830 
	#PD0_PIN
 
PIND0


	)

3831 
	#PD0_RPORT
 
PIND


	)

3832 
	#PD0_WPORT
 
PORTD


	)

3833 
	#PD0_DDR
 
DDRD


	)

3834 
	#PD0_PWM
 
NULL


	)

3835 #unde‡
PD1


3836 
	#PD1_PIN
 
PIND1


	)

3837 
	#PD1_RPORT
 
PIND


	)

3838 
	#PD1_WPORT
 
PORTD


	)

3839 
	#PD1_DDR
 
DDRD


	)

3840 
	#PD1_PWM
 
NULL


	)

3841 #unde‡
PD2


3842 
	#PD2_PIN
 
PIND2


	)

3843 
	#PD2_RPORT
 
PIND


	)

3844 
	#PD2_WPORT
 
PORTD


	)

3845 
	#PD2_DDR
 
DDRD


	)

3846 
	#PD2_PWM
 
NULL


	)

3847 #unde‡
PD3


3848 
	#PD3_PIN
 
PIND3


	)

3849 
	#PD3_RPORT
 
PIND


	)

3850 
	#PD3_WPORT
 
PORTD


	)

3851 
	#PD3_DDR
 
DDRD


	)

3852 
	#PD3_PWM
 
NULL


	)

3853 #unde‡
PD4


3854 
	#PD4_PIN
 
PIND4


	)

3855 
	#PD4_RPORT
 
PIND


	)

3856 
	#PD4_WPORT
 
PORTD


	)

3857 
	#PD4_DDR
 
DDRD


	)

3858 
	#PD4_PWM
 
NULL


	)

3859 #unde‡
PD5


3860 
	#PD5_PIN
 
PIND5


	)

3861 
	#PD5_RPORT
 
PIND


	)

3862 
	#PD5_WPORT
 
PORTD


	)

3863 
	#PD5_DDR
 
DDRD


	)

3864 
	#PD5_PWM
 
NULL


	)

3865 #unde‡
PD6


3866 
	#PD6_PIN
 
PIND6


	)

3867 
	#PD6_RPORT
 
PIND


	)

3868 
	#PD6_WPORT
 
PORTD


	)

3869 
	#PD6_DDR
 
DDRD


	)

3870 
	#PD6_PWM
 
NULL


	)

3871 #unde‡
PD7


3872 
	#PD7_PIN
 
PIND7


	)

3873 
	#PD7_RPORT
 
PIND


	)

3874 
	#PD7_WPORT
 
PORTD


	)

3875 
	#PD7_DDR
 
DDRD


	)

3876 
	#PD7_PWM
 
NULL


	)

3878 #unde‡
PE0


3879 
	#PE0_PIN
 
PINE0


	)

3880 
	#PE0_RPORT
 
PINE


	)

3881 
	#PE0_WPORT
 
PORTE


	)

3882 
	#PE0_DDR
 
DDRE


	)

3883 
	#PE0_PWM
 
NULL


	)

3884 #unde‡
PE1


3885 
	#PE1_PIN
 
PINE1


	)

3886 
	#PE1_RPORT
 
PINE


	)

3887 
	#PE1_WPORT
 
PORTE


	)

3888 
	#PE1_DDR
 
DDRE


	)

3889 
	#PE1_PWM
 
NULL


	)

3890 #unde‡
PE2


3891 
	#PE2_PIN
 
PINE2


	)

3892 
	#PE2_RPORT
 
PINE


	)

3893 
	#PE2_WPORT
 
PORTE


	)

3894 
	#PE2_DDR
 
DDRE


	)

3895 
	#PE2_PWM
 
NULL


	)

3896 #unde‡
PE3


3897 
	#PE3_PIN
 
PINE3


	)

3898 
	#PE3_RPORT
 
PINE


	)

3899 
	#PE3_WPORT
 
PORTE


	)

3900 
	#PE3_DDR
 
DDRE


	)

3901 
	#PE3_PWM
 &
OCR3AL


	)

3902 #unde‡
PE4


3903 
	#PE4_PIN
 
PINE4


	)

3904 
	#PE4_RPORT
 
PINE


	)

3905 
	#PE4_WPORT
 
PORTE


	)

3906 
	#PE4_DDR
 
DDRE


	)

3907 
	#PE4_PWM
 &
OCR3BL


	)

3908 #unde‡
PE5


3909 
	#PE5_PIN
 
PINE5


	)

3910 
	#PE5_RPORT
 
PINE


	)

3911 
	#PE5_WPORT
 
PORTE


	)

3912 
	#PE5_DDR
 
DDRE


	)

3913 
	#PE5_PWM
 &
OCR3CL


	)

3914 #unde‡
PE6


3915 
	#PE6_PIN
 
PINE6


	)

3916 
	#PE6_RPORT
 
PINE


	)

3917 
	#PE6_WPORT
 
PORTE


	)

3918 
	#PE6_DDR
 
DDRE


	)

3919 
	#PE6_PWM
 
NULL


	)

3920 #unde‡
PE7


3921 
	#PE7_PIN
 
PINE7


	)

3922 
	#PE7_RPORT
 
PINE


	)

3923 
	#PE7_WPORT
 
PORTE


	)

3924 
	#PE7_DDR
 
DDRE


	)

3925 
	#PE7_PWM
 
NULL


	)

3927 #unde‡
PF0


3928 
	#PF0_PIN
 
PINF0


	)

3929 
	#PF0_RPORT
 
PINF


	)

3930 
	#PF0_WPORT
 
PORTF


	)

3931 
	#PF0_DDR
 
DDRF


	)

3932 
	#PF0_PWM
 
NULL


	)

3933 #unde‡
PF1


3934 
	#PF1_PIN
 
PINF1


	)

3935 
	#PF1_RPORT
 
PINF


	)

3936 
	#PF1_WPORT
 
PORTF


	)

3937 
	#PF1_DDR
 
DDRF


	)

3938 
	#PF1_PWM
 
NULL


	)

3939 #unde‡
PF2


3940 
	#PF2_PIN
 
PINF2


	)

3941 
	#PF2_RPORT
 
PINF


	)

3942 
	#PF2_WPORT
 
PORTF


	)

3943 
	#PF2_DDR
 
DDRF


	)

3944 
	#PF2_PWM
 
NULL


	)

3945 #unde‡
PF3


3946 
	#PF3_PIN
 
PINF3


	)

3947 
	#PF3_RPORT
 
PINF


	)

3948 
	#PF3_WPORT
 
PORTF


	)

3949 
	#PF3_DDR
 
DDRF


	)

3950 
	#PF3_PWM
 
NULL


	)

3951 #unde‡
PF4


3952 
	#PF4_PIN
 
PINF4


	)

3953 
	#PF4_RPORT
 
PINF


	)

3954 
	#PF4_WPORT
 
PORTF


	)

3955 
	#PF4_DDR
 
DDRF


	)

3956 
	#PF4_PWM
 
NULL


	)

3957 #unde‡
PF5


3958 
	#PF5_PIN
 
PINF5


	)

3959 
	#PF5_RPORT
 
PINF


	)

3960 
	#PF5_WPORT
 
PORTF


	)

3961 
	#PF5_DDR
 
DDRF


	)

3962 
	#PF5_PWM
 
NULL


	)

3963 #unde‡
PF6


3964 
	#PF6_PIN
 
PINF6


	)

3965 
	#PF6_RPORT
 
PINF


	)

3966 
	#PF6_WPORT
 
PORTF


	)

3967 
	#PF6_DDR
 
DDRF


	)

3968 
	#PF6_PWM
 
NULL


	)

3969 #unde‡
PF7


3970 
	#PF7_PIN
 
PINF7


	)

3971 
	#PF7_RPORT
 
PINF


	)

3972 
	#PF7_WPORT
 
PORTF


	)

3973 
	#PF7_DDR
 
DDRF


	)

3974 
	#PF7_PWM
 
NULL


	)

3976 #unde‡
PG0


3977 
	#PG0_PIN
 
PING0


	)

3978 
	#PG0_RPORT
 
PING


	)

3979 
	#PG0_WPORT
 
PORTG


	)

3980 
	#PG0_DDR
 
DDRG


	)

3981 
	#PG0_PWM
 
NULL


	)

3982 #unde‡
PG1


3983 
	#PG1_PIN
 
PING1


	)

3984 
	#PG1_RPORT
 
PING


	)

3985 
	#PG1_WPORT
 
PORTG


	)

3986 
	#PG1_DDR
 
DDRG


	)

3987 
	#PG1_PWM
 
NULL


	)

3988 #unde‡
PG2


3989 
	#PG2_PIN
 
PING2


	)

3990 
	#PG2_RPORT
 
PING


	)

3991 
	#PG2_WPORT
 
PORTG


	)

3992 
	#PG2_DDR
 
DDRG


	)

3993 
	#PG2_PWM
 
NULL


	)

3994 #unde‡
PG3


3995 
	#PG3_PIN
 
PING3


	)

3996 
	#PG3_RPORT
 
PING


	)

3997 
	#PG3_WPORT
 
PORTG


	)

3998 
	#PG3_DDR
 
DDRG


	)

3999 
	#PG3_PWM
 
NULL


	)

4000 #unde‡
PG4


4001 
	#PG4_PIN
 
PING4


	)

4002 
	#PG4_RPORT
 
PING


	)

4003 
	#PG4_WPORT
 
PORTG


	)

4004 
	#PG4_DDR
 
DDRG


	)

4005 
	#PG4_PWM
 
NULL


	)

4006 #unde‡
PG5


4007 
	#PG5_PIN
 
PING5


	)

4008 
	#PG5_RPORT
 
PING


	)

4009 
	#PG5_WPORT
 
PORTG


	)

4010 
	#PG5_DDR
 
DDRG


	)

4011 
	#PG5_PWM
 &
OCR0B


	)

4016 #i‚def 
DIO0_PIN


4017 #îr‹ 
pös
 
this
 
chù
 
nŸ
 
deföed
 
ö
 
¨duöo
.
h
! 
If
 
you
 
wrôe
 
™
 
≠¥›rüã
 
pö
 
deföôi⁄
 
™d
 
have
Åhi†
fúmw¨e
 
w‹k
 
⁄
 
your
 chù, 
∂ó£
 
submô
 
a
 
puŒ
 
ªque°


	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language.h

1 #i‚de‡
LANGUAGE_H


2 
	#LANGUAGE_H


	)

24 #i‚de‡
LANGUAGE_CHOICE


25 
	#LANGUAGE_CHOICE
 
í


27 

	)

28 #i‡
LANGUAGE_CHOICE
 >= 1

32 
	#PROTOCOL_VERSION
 "1.0"

	)

34 #i‡
MB
(
ULTIMAKER
)|| MB(
ULTIMAKER_OLD
)|| MB(
ULTIMAIN_2
)

35 
	#MACHINE_NAME
 "U…imakî"

	)

36 
	#FIRMWARE_URL
 "hâp://fúmw¨e.u…imakî.com"

	)

37 #ñi‡
MB
(
RUMBA
)

38 
	#MACHINE_NAME
 "Rumba"

	)

39 
	#FIRMWARE_URL
 "hâps://gôhub.com/ErikZÆm/M¨lö/"

	)

40 #ñi‡
MB
(3D
RAG
)

41 
	#MACHINE_NAME
 "3Døg"

	)

42 
	#FIRMWARE_URL
 "hâp://3d¥öt.ñëå⁄iˇö.ô/"

	)

43 #ñi‡
MB
(5D
PRINT
)

44 
	#MACHINE_NAME
 "Makibox"

	)

45 
	#FIRMWARE_URL
 "hâps://gôhub.com/ErikZÆm/M¨lö/"

	)

47 #ifde‡
CUSTOM_MENDEL_NAME


48 
	#MACHINE_NAME
 
CUSTOM_MENDEL_NAME


	)

50 
	#MACHINE_NAME
 "Mídñ"

	)

54 
	#FIRMWARE_URL
 "hâps://gôhub.com/ErikZÆm/M¨lö/"

	)

58 #i‚de‡
MACHINE_UUID


59 
	#MACHINE_UUID
 "00000000-0000-0000-0000-000000000000"

	)

63 
	#STRINGIFY_
(
n
Ë#n

	)

64 
	#STRINGIFY
(
n
Ë
	`STRINGIFY_
“)

	)

72 
	#MSG_MARLIN
 "M¨lö"

	)

76 
	#MSG_Enqueög
 "íqueög \""

	)

77 
	#MSG_POWERUP
 "PowîUp"

	)

78 
	#MSG_EXTERNAL_RESET
 " Exã∫Æ Re£t"

	)

79 
	#MSG_BROWNOUT_RESET
 " Brow¿ouàRe£t"

	)

80 
	#MSG_WATCHDOG_RESET
 " W©chdog Re£t"

	)

81 
	#MSG_SOFTWARE_RESET
 " So·w¨êRe£t"

	)

82 
	#MSG_AUTHOR
 " | Auth‹: "

	)

83 
	#MSG_CONFIGURATION_VER
 " La° Upd©ed: "

	)

84 
	#MSG_FREE_MEMORY
 " FªêMem‹y: "

	)

85 
	#MSG_PLANNER_BUFFER_BYTES
 " Pœ¬îBuf„rByãs: "

	)

86 
	#MSG_OK
 "ok"

	)

87 
	#MSG_FILE_SAVED
 "D⁄êßvög fûe."

	)

88 
	#MSG_ERR_LINE_NO
 "LöêNumbî i†nŸ La° LöêNumbî+1, La° Löe: "

	)

89 
	#MSG_ERR_CHECKSUM_MISMATCH
 "checksum mism©ch, La° Löe: "

	)

90 
	#MSG_ERR_NO_CHECKSUM
 "NÿChecksum wôhÜöênumbî, La° Löe: "

	)

91 
	#MSG_ERR_NO_LINENUMBER_WITH_CHECKSUM
 "NÿLöêNumbî wôh checksum, La° Löe: "

	)

92 
	#MSG_FILE_PRINTED
 "D⁄ê¥ötög fûe"

	)

93 
	#MSG_BEGIN_FILE_LIST
 "Begö fûêli°"

	)

94 
	#MSG_END_FILE_LIST
 "End fûêli°"

	)

95 
	#MSG_M104_INVALID_EXTRUDER
 "M104 InvÆidÉxåudî "

	)

96 
	#MSG_M105_INVALID_EXTRUDER
 "M105 InvÆidÉxåudî "

	)

97 
	#MSG_M200_INVALID_EXTRUDER
 "M200 InvÆidÉxåudî "

	)

98 
	#MSG_M218_INVALID_EXTRUDER
 "M218 InvÆidÉxåudî "

	)

99 
	#MSG_M221_INVALID_EXTRUDER
 "M221 InvÆidÉxåudî "

	)

100 
	#MSG_ERR_NO_THERMISTORS
 "Nÿthîmi°‹†-Çÿãm≥øtuª"

	)

101 
	#MSG_M109_INVALID_EXTRUDER
 "M109 InvÆidÉxåudî "

	)

102 
	#MSG_HEATING
 "Hótög..."

	)

103 
	#MSG_HEATING_COMPLETE
 "Hótög d⁄e."

	)

104 
	#MSG_BED_HEATING
 "Bed Hótög."

	)

105 
	#MSG_BED_DONE
 "Bed d⁄e."

	)

106 
	#MSG_M115_REPORT
 "FIRMWARE_NAME:M¨lö V1; S¥öãr/grb»mashu∞f‹ gí6 FIRMWARE_URL:" 
FIRMWARE_URL
 " PROTOCOL_VERSION:" 
PROTOCOL_VERSION
 " MACHINE_TYPE:" 
MACHINE_NAME
 " EXTRUDER_COUNT:" 
	`STRINGIFY
(
EXTRUDERS
Ë" UUID:" 
MACHINE_UUID
 "\n"

	)

107 
	#MSG_COUNT_X
 " Cou¡ X: "

	)

108 
	#MSG_ERR_KILLED
 "Pröã∏hÆãd. kûl(ËˇŒed!"

	)

109 
	#MSG_ERR_STOPPED
 "Pröã∏°›≥d duêtÿîr‹s. FixÅhêîr‹ánd u£ M999Åÿª°¨t. (Tem≥øtuª i†ª£t. Së iàa·îÑe°¨tög)"

	)

110 
	#MSG_RESEND
 "Re£nd: "

	)

111 
	#MSG_UNKNOWN_COMMAND
 "Unknow¿comm™d: \""

	)

112 
	#MSG_ACTIVE_EXTRUDER
 "A˘ivêExåudî: "

	)

113 
	#MSG_INVALID_EXTRUDER
 "InvÆidÉxåudî"

	)

114 
	#MSG_X_MIN
 "x_mö: "

	)

115 
	#MSG_X_MAX
 "x_max: "

	)

116 
	#MSG_Y_MIN
 "y_mö: "

	)

117 
	#MSG_Y_MAX
 "y_max: "

	)

118 
	#MSG_Z_MIN
 "z_mö: "

	)

119 
	#MSG_Z_MAX
 "z_max: "

	)

120 
	#MSG_M119_REPORT
 "Rï‹tögÉnd°› sètus"

	)

121 
	#MSG_ENDSTOP_HIT
 "TRIGGERED"

	)

122 
	#MSG_ENDSTOP_OPEN
 "›í"

	)

123 
	#MSG_HOTEND_OFFSET
 "HŸíd off£ts:"

	)

125 
	#MSG_SD_CANT_OPEN_SUBDIR
 "C™nŸ o≥¿subdú"

	)

126 
	#MSG_SD_INIT_FAIL
 "SD inô faû"

	)

127 
	#MSG_SD_VOL_INIT_FAIL
 "vﬁume.öô faûed"

	)

128 
	#MSG_SD_OPENROOT_FAIL
 "›íRoŸ faûed"

	)

129 
	#MSG_SD_CARD_OK
 "SD c¨d ok"

	)

130 
	#MSG_SD_WORKDIR_FAIL
 "w‹kDú o≥¿Áûed"

	)

131 
	#MSG_SD_OPEN_FILE_FAIL
 "›í faûed, Fûe: "

	)

132 
	#MSG_SD_FILE_OPENED
 "Fûê›íed: "

	)

133 
	#MSG_SD_SIZE
 " Size: "

	)

134 
	#MSG_SD_FILE_SELECTED
 "Fûê£À˘ed"

	)

135 
	#MSG_SD_WRITE_TO_FILE
 "WrôögÅÿfûe: "

	)

136 
	#MSG_SD_PRINTING_BYTE
 "SDÖrötög byã "

	)

137 
	#MSG_SD_NOT_PRINTING
 "NŸ SDÖrötög"

	)

138 
	#MSG_SD_ERR_WRITE_TO_FILE
 "îr‹ wrôögÅÿfûe"

	)

139 
	#MSG_SD_CANT_ENTER_SUBDIR
 "C™nŸÉ¡î subdú: "

	)

141 
	#MSG_STEPPER_TOO_HIGH
 "Sã¥©êtoÿhigh: "

	)

142 
	#MSG_ENDSTOPS_HIT
 "íd°›†hô: "

	)

143 
	#MSG_ERR_COLD_EXTRUDE_STOP
 " cﬁdÉxåusi⁄Öªvíãd"

	)

144 
	#MSG_ERR_LONG_EXTRUDE_STOP
 "Åoÿl⁄gÉxåusi⁄Öªvíãd"

	)

145 
	#MSG_BABYSTEPPING_X
 "Baby°ïpög X"

	)

146 
	#MSG_BABYSTEPPING_Y
 "Baby°ïpög Y"

	)

147 
	#MSG_BABYSTEPPING_Z
 "Baby°ïpög Z"

	)

148 
	#MSG_SERIAL_ERROR_MENU_STRUCTURE
 "Eº‹ i¿míu såu˘uª"

	)

152 #i‡ 
LANGUAGE_CHOICE
 =
í


153 
	~"œnguage_í.h
"

154 #ñi‡
LANGUAGE_CHOICE
 =
∂


155 
	~"œnguage_∂.h
"

156 #ñi‡
LANGUAGE_CHOICE
 =
‰


157 
	~"œnguage_‰.h
"

158 #ñi‡
LANGUAGE_CHOICE
 =
de


159 
	~"œnguage_de.h
"

160 #ñi‡
LANGUAGE_CHOICE
 =
es


161 
	~"œnguage_es.h
"

162 #ñi‡
LANGUAGE_CHOICE
 =
ru


163 
	~"œnguage_ru.h
"

164 #ñi‡
LANGUAGE_CHOICE
 =
ô


165 
	~"œnguage_ô.h
"

166 #ñi‡
LANGUAGE_CHOICE
 =
±


167 
	~"œnguage_±.h
"

168 #ñi‡
LANGUAGE_CHOICE
 =
fi


169 
	~"œnguage_fi.h
"

170 #ñi‡
LANGUAGE_CHOICE
 =
™


171 
	~"œnguage_™.h
"

172 #ñi‡
LANGUAGE_CHOICE
 =
∆


173 
	~"œnguage_∆.h
"

174 #ñi‡
LANGUAGE_CHOICE
 =
ˇ


175 
	~"œnguage_ˇ.h
"

176 #ñi‡
LANGUAGE_CHOICE
 =
eu


177 
	~"œnguage_eu.h
"

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language_an.h

8 #i‚de‡
LANGUAGE_AN_H


9 
	#LANGUAGE_AN_H


	)

11 
	#WELCOME_MSG
 
MACHINE_NAME
 "Ö¨ada."

	)

12 
	#MSG_SD_INSERTED
 "T¨chë®cﬁoˇda"

	)

13 
	#MSG_SD_REMOVED
 "T¨chë®ªtúada"

	)

14 
	#MSG_MAIN
 "MíuÖªncùÆ"

	)

15 
	#MSG_AUTOSTART
 " Auto°¨t"

	)

16 
	#MSG_DISABLE_STEPPERS
 "Am‹è∏mŸ‹s"

	)

17 
	#MSG_AUTO_HOME
 "Lev¨áÜ'‹ichí"

	)

18 
	#MSG_SET_HOME_OFFSETS
 "Së homêoff£ts"

	)

19 
	#MSG_SET_ORIGIN
 "E°ablú zîo"

	)

20 
	#MSG_PREHEAT_PLA
 "PªˇÀ¡¨ PLA"

	)

21 
	#MSG_PREHEAT_PLA0
 "PªˇÀ¡¨ PLA0"

	)

22 
	#MSG_PREHEAT_PLA1
 "PªˇÀ¡¨ PLA1"

	)

23 
	#MSG_PREHEAT_PLA2
 "PªˇÀ¡¨ PLA2"

	)

24 
	#MSG_PREHEAT_PLA012
 "PªˇÀ¡¨ PLAá"

	)

25 
	#MSG_PREHEAT_PLA_BEDONLY
 "Pªc. PLA Ba£"

	)

26 
	#MSG_PREHEAT_PLA_SETTINGS
 "Achu°¨Åem. PLA"

	)

27 
	#MSG_PREHEAT_ABS
 "PªˇÀ¡¨ ABS"

	)

28 
	#MSG_PREHEAT_ABS0
 "PªˇÀ¡¨ ABS0"

	)

29 
	#MSG_PREHEAT_ABS1
 "PªˇÀ¡¨ ABS1"

	)

30 
	#MSG_PREHEAT_ABS2
 "PªˇÀ¡¨ ABS2"

	)

31 
	#MSG_PREHEAT_ABS012
 "PªˇÀ¡¨ ABSá"

	)

32 
	#MSG_PREHEAT_ABS_BEDONLY
 "Pªc. ABS Ba£"

	)

33 
	#MSG_PREHEAT_ABS_SETTINGS
 "Achu°¨Åem. ABS"

	)

34 
	#MSG_COOLDOWN
 "En‰ür"

	)

35 
	#MSG_SWITCH_PS_ON
 "Encheg¨ Fuít"

	)

36 
	#MSG_SWITCH_PS_OFF
 "De£ncheg¨ Fuít"

	)

37 
	#MSG_EXTRUDE
 "Exåuú"

	)

38 
	#MSG_RETRACT
 "Rëøî"

	)

39 
	#MSG_MOVE_AXIS
 "Movî Eixes"

	)

40 
	#MSG_MOVE_X
 "MovêX"

	)

41 
	#MSG_MOVE_Y
 "MovêY"

	)

42 
	#MSG_MOVE_Z
 "MovêZ"

	)

43 
	#MSG_MOVE_E
 "Exåudî"

	)

44 
	#MSG_MOVE_E1
 "Exåudî2"

	)

45 
	#MSG_MOVE_E2
 "Exåudî3"

	)

46 
	#MSG_MOVE_01MM
 "Movê0.1mm"

	)

47 
	#MSG_MOVE_1MM
 "Movê1mm"

	)

48 
	#MSG_MOVE_10MM
 "Movê10mm"

	)

49 
	#MSG_SPEED
 "Vñocid©"

	)

50 
	#MSG_NOZZLE
 "NozzÀ"

	)

51 
	#MSG_NOZZLE1
 "NozzÀ2"

	)

52 
	#MSG_NOZZLE2
 "NozzÀ3"

	)

53 
	#MSG_BED
 "Ba£"

	)

54 
	#MSG_FAN_SPEED
 "Ix‹üd‹"

	)

55 
	#MSG_FLOW
 "Fluxo"

	)

56 
	#MSG_FLOW0
 "Fluxÿ0"

	)

57 
	#MSG_FLOW1
 "Fluxÿ1"

	)

58 
	#MSG_FLOW2
 "Fluxÿ2"

	)

59 
	#MSG_CONTROL
 "C⁄åﬁ"

	)

60 
	#MSG_MIN
 "\002 Mö"

	)

61 
	#MSG_MAX
 "\002 Max"

	)

62 
	#MSG_FACTOR
 "\002 Fa˘"

	)

63 
	#MSG_AUTOTEMP
 "AutŸemp"

	)

64 
	#MSG_ON
 "On"

	)

65 
	#MSG_OFF
 "Off"

	)

66 
	#MSG_PID_P
 "PID-P"

	)

67 
	#MSG_PID_I
 "PID-I"

	)

68 
	#MSG_PID_D
 "PID-D"

	)

69 
	#MSG_PID_C
 "PID-C"

	)

70 
	#MSG_ACC
 "A˚l"

	)

71 
	#MSG_VXY_JERK
 "Vxy-jîk"

	)

72 
	#MSG_VZ_JERK
 "Vz-jîk"

	)

73 
	#MSG_VE_JERK
 "Ves-jîk"

	)

74 
	#MSG_VMAX
 "Vmax"

	)

75 
	#MSG_X
 "x"

	)

76 
	#MSG_Y
 "y"

	)

77 
	#MSG_Z
 "z"

	)

78 
	#MSG_E
 "y"

	)

79 
	#MSG_VMIN
 "Vmö"

	)

80 
	#MSG_VTRAV_MIN
 "VTøv mö"

	)

81 
	#MSG_AMAX
 "Amax"

	)

82 
	#MSG_A_RETRACT
 "A-ªåac."

	)

83 
	#MSG_XSTEPS
 "XÅøngos/mm"

	)

84 
	#MSG_YSTEPS
 "YÅøngos/mm"

	)

85 
	#MSG_ZSTEPS
 "ZÅøngos/mm"

	)

86 
	#MSG_ESTEPS
 "EÅøngos/mm"

	)

87 
	#MSG_TEMPERATURE
 "Tem≥øtuø"

	)

88 
	#MSG_MOTION
 "Movimõ¡o"

	)

89 
	#MSG_CONTRAST
 "C⁄åa°"

	)

90 
	#MSG_STORE_EPROM
 "Alz¨ Mem‹ü"

	)

91 
	#MSG_LOAD_EPROM
 "C¨g¨ Mem‹ü"

	)

92 
	#MSG_RESTORE_FAILSAFE
 "Re°. d'emîchí."

	)

93 
	#MSG_REFRESH
 "T‹«∏®ˇrg¨"

	)

94 
	#MSG_WATCH
 "M⁄ô‹iz¨"

	)

95 
	#MSG_PREPARE
 "Pª∑ør"

	)

96 
	#MSG_TUNE
 "Achu°¨"

	)

97 
	#MSG_PAUSE_PRINT
 "Pauß∏im¥esi⁄"

	)

98 
	#MSG_RESUME_PRINT
 "C⁄tö. im¥esi⁄"

	)

99 
	#MSG_STOP_PRINT
 "Dëíî Im¥esi⁄"

	)

100 
	#MSG_CARD_MENU
 "Míu dêSD"

	)

101 
	#MSG_NO_CARD
 "Nÿòhaòèrchëa"

	)

102 
	#MSG_DWELL
 "Rïoso..."

	)

103 
	#MSG_USERWAIT
 "A•î™. ordöes"

	)

104 
	#MSG_RESUMING
 "C⁄tö. im¥esi⁄"

	)

105 
	#MSG_PRINT_ABORTED
 "Pröàab‹ãd"

	)

106 
	#MSG_NO_MOVE
 "Sö movimõ¡o"

	)

107 
	#MSG_KILLED
 "ATURADA D'EMERCH."

	)

108 
	#MSG_STOPPED
 "ATURADA."

	)

109 
	#MSG_CONTROL_RETRACT
 "Rëøî mm"

	)

110 
	#MSG_CONTROL_RETRACT_SWAP
 "Sw≠ Rëøî mm"

	)

111 
	#MSG_CONTROL_RETRACTF
 "Rëøî F"

	)

112 
	#MSG_CONTROL_RETRACT_ZLIFT
 "Dev™è∏mm"

	)

113 
	#MSG_CONTROL_RETRACT_RECOVER
 "DesRë +mm"

	)

114 
	#MSG_CONTROL_RETRACT_RECOVER_SWAP
 "Sw≠ DesRë +mm"

	)

115 
	#MSG_CONTROL_RETRACT_RECOVERF
 "DesRë F"

	)

116 
	#MSG_AUTORETRACT
 "AutoRër."

	)

117 
	#MSG_FILAMENTCHANGE
 "Cambór"

	)

118 
	#MSG_INIT_SDCARD
 "En˚èn.Å¨chëa"

	)

119 
	#MSG_CNG_SDCARD
 "Cambü∏èrchëa"

	)

120 
	#MSG_ZPROBE_OUT
 "ZÖrobêout. bed"

	)

121 
	#MSG_POSITION_UNKNOWN
 "HomêX/Y bef‹êZ"

	)

122 
	#MSG_ZPROBE_ZOFFSET
 "Z Off£t"

	)

123 
	#MSG_BABYSTEP_X
 "Baby°ï X"

	)

124 
	#MSG_BABYSTEP_Y
 "Baby°ï Y"

	)

125 
	#MSG_BABYSTEP_Z
 "Baby°ï Z"

	)

126 
	#MSG_ENDSTOP_ABORT
 "End°›áb‹t"

	)

128 
	#MSG_RECTRACT
 "Rëøî"

	)

129 
	#MSG_RECTRACT_WIDE
 "Rëøî"

	)

130 
	#MSG_TEMPERATURE_WIDE
 "Tem≥øtuø"

	)

131 
	#MSG_TEMPERATURE_RTN
 "Tem≥øtuø"

	)

132 
	#MSG_MAIN_WIDE
 "Míu PªncùÆ"

	)

133 
	#MSG_MOTION_WIDE
 "Movimõ¡o"

	)

134 
	#MSG_PREPARE_ALT
 "Pª∑ør"

	)

135 
	#MSG_CONTROL_ARROW
 "C⁄åﬁ \x7E"

	)

136 
	#MSG_RETRACT_ARROW
 "Rëøî \x7E"

	)

137 
	#MSG_STEPPER_RELEASED
 "Deßc›œda."

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language_ca.h

8 #i‚de‡
LANGUAGE_CA_H


9 
	#LANGUAGE_CA_H


	)

11 
	#WELCOME_MSG
 
MACHINE_NAME
 "Öª∑øda."

	)

12 
	#MSG_SD_INSERTED
 "SD dëe˘ada."

	)

13 
	#MSG_SD_REMOVED
 "SDÉxpulßda."

	)

14 
	#MSG_MAIN
 "MíuÖröcùÆ"

	)

15 
	#MSG_AUTOSTART
 "Inicòautom©ic"

	)

16 
	#MSG_DISABLE_STEPPERS
 "A∑g¨ mŸ‹s"

	)

17 
	#MSG_AUTO_HOME
 "HomêglobÆ"

	)

18 
	#MSG_SET_HOME_OFFSETS
 "Së homêoff£ts"

	)

19 
	#MSG_SET_ORIGIN
 "E°ablú origí"

	)

20 
	#MSG_PREHEAT_PLA
 "PªesˇlÁ∏PLA"

	)

21 
	#MSG_PREHEAT_PLA0
 "PªesˇlÁ∏PLA 1"

	)

22 
	#MSG_PREHEAT_PLA1
 "PªesˇlÁ∏PLA 2"

	)

23 
	#MSG_PREHEAT_PLA2
 "PªesˇlÁ∏PLA 3"

	)

24 
	#MSG_PREHEAT_PLA012
 "Pªesc.ÅŸ PLA"

	)

25 
	#MSG_PREHEAT_PLA_BEDONLY
 "Pªesc.Ülô PLA"

	)

26 
	#MSG_PREHEAT_PLA_SETTINGS
 "C⁄figuøci√≥ PLA"

	)

27 
	#MSG_PREHEAT_ABS
 "PªesˇlÁ∏ABS"

	)

28 
	#MSG_PREHEAT_ABS0
 "PªesˇlÁ∏ABS 1"

	)

29 
	#MSG_PREHEAT_ABS1
 "PªesˇlÁ∏ABS 2"

	)

30 
	#MSG_PREHEAT_ABS2
 "PªesˇlÁ∏ABS 3"

	)

31 
	#MSG_PREHEAT_ABS012
 "Pªesc.ÅŸ ABS"

	)

32 
	#MSG_PREHEAT_ABS_BEDONLY
 "Pªesc.Ülô ABS"

	)

33 
	#MSG_PREHEAT_ABS_SETTINGS
 "C⁄figuøci√≥ ABS"

	)

34 
	#MSG_COOLDOWN
 "Re‰ed¨"

	)

35 
	#MSG_SWITCH_PS_ON
 "SwôchÖowî on"

	)

36 
	#MSG_SWITCH_PS_OFF
 "SwôchÖowî off"

	)

37 
	#MSG_EXTRUDE
 "Exåuú"

	)

38 
	#MSG_RETRACT
 "Re‰ed¨"

	)

39 
	#MSG_MOVE_AXIS
 "MouªÉixos"

	)

40 
	#MSG_MOVE_X
 "Mouª X"

	)

41 
	#MSG_MOVE_Y
 "Mouª Y"

	)

42 
	#MSG_MOVE_Z
 "Mouª Z"

	)

43 
	#MSG_MOVE_E
 "Exåus‹"

	)

44 
	#MSG_MOVE_E1
 "Exåudî2"

	)

45 
	#MSG_MOVE_E2
 "Exåudî3"

	)

46 
	#MSG_MOVE_01MM
 "Mouª 0.1mm"

	)

47 
	#MSG_MOVE_1MM
 "Mouª 1mm"

	)

48 
	#MSG_MOVE_10MM
 "Mouª 10mm"

	)

49 
	#MSG_SPEED
 "Vñocô©"

	)

50 
	#MSG_NOZZLE
 "NozzÀ"

	)

51 
	#MSG_NOZZLE1
 "NozzÀ2"

	)

52 
	#MSG_NOZZLE2
 "NozzÀ3"

	)

53 
	#MSG_BED
 "Llô"

	)

54 
	#MSG_FAN_SPEED
 "Vñ. Vítûad‹"

	)

55 
	#MSG_FLOW
 "Fluxe"

	)

56 
	#MSG_FLOW0
 "Fluxê0"

	)

57 
	#MSG_FLOW1
 "Fluxê1"

	)

58 
	#MSG_FLOW2
 "Fluxê2"

	)

59 
	#MSG_CONTROL
 "C⁄åﬁ"

	)

60 
	#MSG_MIN
 " \002 Mö"

	)

61 
	#MSG_MAX
 " \002 Max"

	)

62 
	#MSG_FACTOR
 " \002 Fa˘"

	)

63 
	#MSG_AUTOTEMP
 "AutŸemp"

	)

64 
	#MSG_ON
 "O¿"

	)

65 
	#MSG_OFF
 "Off"

	)

66 
	#MSG_PID_P
 "PID-P"

	)

67 
	#MSG_PID_I
 "PID-I"

	)

68 
	#MSG_PID_D
 "PID-D"

	)

69 
	#MSG_PID_C
 "PID-C"

	)

70 
	#MSG_ACC
 "Ac˚l"

	)

71 
	#MSG_VXY_JERK
 "Vxy-jîk"

	)

72 
	#MSG_VZ_JERK
 "Vz-jîk"

	)

73 
	#MSG_VE_JERK
 "Ve-jîk"

	)

74 
	#MSG_VMAX
 "Vmax "

	)

75 
	#MSG_X
 "x"

	)

76 
	#MSG_Y
 "y"

	)

77 
	#MSG_Z
 "z"

	)

78 
	#MSG_E
 "e"

	)

79 
	#MSG_VMIN
 "Vmö"

	)

80 
	#MSG_VTRAV_MIN
 "VTøv mö"

	)

81 
	#MSG_AMAX
 "Amax "

	)

82 
	#MSG_A_RETRACT
 "A-ªåa˘"

	)

83 
	#MSG_XSTEPS
 "X∑ssos/mm"

	)

84 
	#MSG_YSTEPS
 "Y∑ssos/mm"

	)

85 
	#MSG_ZSTEPS
 "Z∑ssos/mm"

	)

86 
	#MSG_ESTEPS
 "E∑ssos/mm"

	)

87 
	#MSG_TEMPERATURE
 "Tem≥øtuø"

	)

88 
	#MSG_MOTION
 "Movimít"

	)

89 
	#MSG_CONTRAST
 "C⁄åa° dêLCD"

	)

90 
	#MSG_STORE_EPROM
 "Deß∏®mem‹ü"

	)

91 
	#MSG_LOAD_EPROM
 "C¨ªg¨ dêmem."

	)

92 
	#MSG_RESTORE_FAILSAFE
 "Re°.Émîgícü"

	)

93 
	#MSG_REFRESH
 "Re‰esˇr"

	)

94 
	#MSG_WATCH
 "P™èŒ®Info."

	)

95 
	#MSG_PREPARE
 "Pª∑ør"

	)

96 
	#MSG_TUNE
 "CÆibør"

	)

97 
	#MSG_PAUSE_PRINT
 "Pauß imp."

	)

98 
	#MSG_RESUME_PRINT
 "Rïªndª imp."

	)

99 
	#MSG_STOP_PRINT
 "P¨¨ i≈."

	)

100 
	#MSG_CARD_MENU
 "Im¥imú dêSD"

	)

101 
	#MSG_NO_CARD
 "-Sí£Å¨gë®SD"

	)

102 
	#MSG_DWELL
 "Rïos..."

	)

103 
	#MSG_USERWAIT
 "E•î™àusu¨i.."

	)

104 
	#MSG_RESUMING
 "Rïª√¡ imp."

	)

105 
	#MSG_PRINT_ABORTED
 "Pröàab‹ãd"

	)

106 
	#MSG_NO_MOVE
 "Sí£ movimít."

	)

107 
	#MSG_KILLED
 "PARADA DE EMERG. "

	)

108 
	#MSG_STOPPED
 "ATURAT. "

	)

109 
	#MSG_CONTROL_RETRACT
 "Rëªuª mm"

	)

110 
	#MSG_CONTROL_RETRACT_SWAP
 "Sw≠ Rëªuª mm"

	)

111 
	#MSG_CONTROL_RETRACTF
 "Rëªuª F"

	)

112 
	#MSG_CONTROL_RETRACT_ZLIFT
 "Aixeˇ∏mm"

	)

113 
	#MSG_CONTROL_RETRACT_RECOVER
 "DesRë +mm"

	)

114 
	#MSG_CONTROL_RETRACT_RECOVER_SWAP
 "Sw≠ DesRë +mm"

	)

115 
	#MSG_CONTROL_RETRACT_RECOVERF
 "DesRë F"

	)

116 
	#MSG_AUTORETRACT
 "AutoRër."

	)

117 
	#MSG_FILAMENTCHANGE
 "C™vü∏fûamít"

	)

118 
	#MSG_INIT_SDCARD
 "Inicü¡ SD"

	)

119 
	#MSG_CNG_SDCARD
 "C™vü∏SD"

	)

120 
	#MSG_ZPROBE_OUT
 "ZÖrobêout. bed"

	)

121 
	#MSG_POSITION_UNKNOWN
 "HomêX/Yáb™†Z"

	)

122 
	#MSG_ZPROBE_ZOFFSET
 "Z Off£t"

	)

123 
	#MSG_BABYSTEP_X
 "Baby°ï X"

	)

124 
	#MSG_BABYSTEP_Y
 "Baby°ï Y"

	)

125 
	#MSG_BABYSTEP_Z
 "Baby°ï Z"

	)

126 
	#MSG_ENDSTOP_ABORT
 "End°›áb‹t"

	)

128 
	#MSG_RECTRACT
 "Rëªuª"

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language_de.h

8 #i‚de‡
LANGUAGE_DE_H


9 
	#LANGUAGE_DE_H


	)

11 
	#WELCOME_MSG
 
MACHINE_NAME
 " Bîeô."

	)

12 
	#MSG_SD_INSERTED
 "SDK¨ãÉrk™¡"

	)

13 
	#MSG_SD_REMOVED
 "SDK¨ãÉ¡„∫t"

	)

14 
	#MSG_MAIN
 "Hau±mí√º"

	)

15 
	#MSG_AUTOSTART
 "Auto°¨t"

	)

16 
	#MSG_DISABLE_STEPPERS
 "SãµîábschÆt."

	)

17 
	#MSG_AUTO_HOME
 "AutÿNuŒpunkt"

	)

18 
	#MSG_SET_HOME_OFFSETS
 "Së homêoff£ts"

	)

19 
	#MSG_SET_ORIGIN
 "SëzêNuŒpunkt"

	)

20 
	#MSG_PREHEAT_PLA
 "V‹w√§rmí PLA"

	)

21 
	#MSG_PREHEAT_PLA0
 "V‹w√§rmí PLA 1"

	)

22 
	#MSG_PREHEAT_PLA1
 "V‹w√§rmí PLA 2"

	)

23 
	#MSG_PREHEAT_PLA2
 "V‹w√§rmí PLA 3"

	)

24 
	#MSG_PREHEAT_PLA012
 "V‹w. PLA AŒe"

	)

25 
	#MSG_PREHEAT_PLA_BEDONLY
 "V‹w. PLA Bët"

	)

26 
	#MSG_PREHEAT_PLA_SETTINGS
 "V‹w√§rm. PLA Eö."

	)

27 
	#MSG_PREHEAT_ABS
 "V‹w√§rmí ABS"

	)

28 
	#MSG_PREHEAT_ABS0
 "V‹w√§rmí ABS 1"

	)

29 
	#MSG_PREHEAT_ABS1
 "V‹w√§rmí ABS 2"

	)

30 
	#MSG_PREHEAT_ABS2
 "V‹w√§rmí ABS 3"

	)

31 
	#MSG_PREHEAT_ABS012
 "V‹w. ABS AŒe"

	)

32 
	#MSG_PREHEAT_ABS_BEDONLY
 "V‹w. ABS Bët"

	)

33 
	#MSG_PREHEAT_ABS_SETTINGS
 "V‹w√§rm. ABS Eö."

	)

34 
	#MSG_COOLDOWN
 "Abk√ºhÀn"

	)

35 
	#MSG_SWITCH_PS_ON
 "Swôch Powî On"

	)

36 
	#MSG_SWITCH_PS_OFF
 "Swôch Powî Off"

	)

37 
	#MSG_EXTRUDE
 "Exåude"

	)

38 
	#MSG_RETRACT
 "Rëø˘"

	)

39 
	#MSG_MOVE_AXIS
 "Ach£¿bewegí"

	)

40 
	#MSG_MOVE_X
 "X bewegí"

	)

41 
	#MSG_MOVE_Y
 "Y bewegí"

	)

42 
	#MSG_MOVE_Z
 "Z bewegí"

	)

43 
	#MSG_MOVE_E
 "Exåudî"

	)

44 
	#MSG_MOVE_E1
 "Exåudî2"

	)

45 
	#MSG_MOVE_E2
 "Exåudî3"

	)

46 
	#MSG_MOVE_01MM
 "0.1mm bewegí"

	)

47 
	#MSG_MOVE_1MM
 "1mm bewegí"

	)

48 
	#MSG_MOVE_10MM
 "10mm bewegí"

	)

49 
	#MSG_SPEED
 "Geschw"

	)

50 
	#MSG_NOZZLE
 "D√º£"

	)

51 
	#MSG_NOZZLE1
 "D√º£2"

	)

52 
	#MSG_NOZZLE2
 "D√º£3"

	)

53 
	#MSG_BED
 "Bët"

	)

54 
	#MSG_FAN_SPEED
 "L√º·îgeschw."

	)

55 
	#MSG_FLOW
 "Fluss"

	)

56 
	#MSG_FLOW0
 "Flus†0"

	)

57 
	#MSG_FLOW1
 "Flus†1"

	)

58 
	#MSG_FLOW2
 "Flus†2"

	)

59 
	#MSG_CONTROL
 "Eö°ñlungí"

	)

60 
	#MSG_MIN
 "\002 Mö"

	)

61 
	#MSG_MAX
 "\002 Max"

	)

62 
	#MSG_FACTOR
 "\002 Fakt‹"

	)

63 
	#MSG_AUTOTEMP
 "AutoTemp"

	)

64 
	#MSG_ON
 "Eö"

	)

65 
	#MSG_OFF
 "Aus"

	)

66 
	#MSG_PID_P
 "PID-P"

	)

67 
	#MSG_PID_I
 "PID-I"

	)

68 
	#MSG_PID_D
 "PID-D"

	)

69 
	#MSG_PID_C
 "PID-C"

	)

70 
	#MSG_ACC
 "Acc"

	)

71 
	#MSG_VXY_JERK
 "Vxy-jîk"

	)

72 
	#MSG_VZ_JERK
 "Vz-jîk"

	)

73 
	#MSG_VE_JERK
 "Ve-jîk"

	)

74 
	#MSG_VMAX
 "Vmax "

	)

75 
	#MSG_X
 "x"

	)

76 
	#MSG_Y
 "y"

	)

77 
	#MSG_Z
 "z"

	)

78 
	#MSG_E
 "e"

	)

79 
	#MSG_VMIN
 "Vmö"

	)

80 
	#MSG_VTRAV_MIN
 "VTøv mö"

	)

81 
	#MSG_AMAX
 "Amax "

	)

82 
	#MSG_A_RETRACT
 "A-Rëø˘"

	)

83 
	#MSG_XSTEPS
 "X°ïs/mm"

	)

84 
	#MSG_YSTEPS
 "Y°ïs/mm"

	)

85 
	#MSG_ZSTEPS
 "Z°ïs/mm"

	)

86 
	#MSG_ESTEPS
 "E°ïs/mm"

	)

87 
	#MSG_TEMPERATURE
 "Tem≥øtur"

	)

88 
	#MSG_MOTION
 "Bewegung"

	)

89 
	#MSG_CONTRAST
 "LCD c⁄åa°"

	)

90 
	#MSG_STORE_EPROM
 "EPROM s≥ichîn"

	)

91 
	#MSG_LOAD_EPROM
 "EPROMÜadí"

	)

92 
	#MSG_RESTORE_FAILSAFE
 "Sènd¨dk⁄fig."

	)

93 
	#MSG_REFRESH
 "AktuÆisõªn"

	)

94 
	#MSG_WATCH
 "Beobachãn"

	)

95 
	#MSG_PREPARE
 "V‹bîeôung"

	)

96 
	#MSG_TUNE
 "Ju°õrung"

	)

97 
	#MSG_PAUSE_PRINT
 "DruckánhÆãn"

	)

98 
	#MSG_RESUME_PRINT
 "Druck f‹t£tz"

	)

99 
	#MSG_STOP_PRINT
 "Druck st›≥n"

	)

100 
	#MSG_CARD_MENU
 "SDK¨ã¿Mí√º"

	)

101 
	#MSG_NO_CARD
 "KeöêSDK¨ã"

	)

102 
	#MSG_DWELL
 "W¨ãn..."

	)

103 
	#MSG_USERWAIT
 "W¨ãáu‡Nutzî"

	)

104 
	#MSG_RESUMING
 "Druck f‹t£tzung"

	)

105 
	#MSG_PRINT_ABORTED
 "Pröàab‹ãd"

	)

106 
	#MSG_NO_MOVE
 "Keö Zug."

	)

107 
	#MSG_KILLED
 "KILLED"

	)

108 
	#MSG_STOPPED
 "GESTOPPT"

	)

109 
	#MSG_CONTROL_RETRACT
 "Rëø˘ mm"

	)

110 
	#MSG_CONTROL_RETRACT_SWAP
 "Wechs. Rëø˘ mm"

	)

111 
	#MSG_CONTROL_RETRACTF
 "Rëø˘ V"

	)

112 
	#MSG_CONTROL_RETRACT_ZLIFT
 "H› mm"

	)

113 
	#MSG_CONTROL_RETRACT_RECOVER
 "UnRë +mm"

	)

114 
	#MSG_CONTROL_RETRACT_RECOVER_SWAP
 "Wechs. UnRë +mm"

	)

115 
	#MSG_CONTROL_RETRACT_RECOVERF
 "UnRë V"

	)

116 
	#MSG_AUTORETRACT
 "AutoRër."

	)

117 
	#MSG_FILAMENTCHANGE
 "Fûamíàwech£ "

	)

118 
	#MSG_INIT_SDCARD
 "Inô. SD-C¨d"

	)

119 
	#MSG_CNG_SDCARD
 "Ch™gêSD-C¨d"

	)

120 
	#MSG_ZPROBE_OUT
 "ZÖrobêout. bed"

	)

121 
	#MSG_POSITION_UNKNOWN
 "HomêX/Y bef‹êZ"

	)

122 
	#MSG_ZPROBE_ZOFFSET
 "Z Off£t"

	)

123 
	#MSG_BABYSTEP_X
 "Baby°ï X"

	)

124 
	#MSG_BABYSTEP_Y
 "Baby°ï Y"

	)

125 
	#MSG_BABYSTEP_Z
 "Baby°ï Z"

	)

126 
	#MSG_ENDSTOP_ABORT
 "End°›áb‹t"

	)

128 
	#MSG_STEPPER_RELEASED
 "Sãµî fªi"

	)

129 
	#MSG_RECTRACT_WIDE
 "Re˘ø˘"

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language_en.h

8 #i‚de‡
LANGUAGE_EN_H


9 
	#LANGUAGE_EN_H


	)

11 
	#WELCOME_MSG
 
MACHINE_NAME
 "Ñódy."

	)

12 
	#MSG_SD_INSERTED
 "C¨d in£πed"

	)

13 
	#MSG_SD_REMOVED
 "C¨dÑemoved"

	)

14 
	#MSG_MAIN
 "Maö"

	)

15 
	#MSG_AUTOSTART
 "Auto°¨t"

	)

16 
	#MSG_DISABLE_STEPPERS
 "DißbÀ sãµîs"

	)

17 
	#MSG_AUTO_HOME
 "Autÿhome"

	)

18 
	#MSG_SET_HOME_OFFSETS
 "Së homêoff£ts"

	)

19 
	#MSG_SET_ORIGIN
 "Së origö"

	)

20 
	#MSG_PREHEAT_PLA
 "PªhóàPLA"

	)

21 
	#MSG_PREHEAT_PLA0
 "PªhóàPLA 1"

	)

22 
	#MSG_PREHEAT_PLA1
 "PªhóàPLA 2"

	)

23 
	#MSG_PREHEAT_PLA2
 "PªhóàPLA 3"

	)

24 
	#MSG_PREHEAT_PLA012
 "PªhóàPLA AŒ"

	)

25 
	#MSG_PREHEAT_PLA_BEDONLY
 "PªhóàPLA Bed"

	)

26 
	#MSG_PREHEAT_PLA_SETTINGS
 "PªhóàPLA c⁄f"

	)

27 
	#MSG_PREHEAT_ABS
 "PªhóàABS"

	)

28 
	#MSG_PREHEAT_ABS0
 "PªhóàABS 1"

	)

29 
	#MSG_PREHEAT_ABS1
 "PªhóàABS 2"

	)

30 
	#MSG_PREHEAT_ABS2
 "PªhóàABS 3"

	)

31 
	#MSG_PREHEAT_ABS012
 "PªhóàABS AŒ"

	)

32 
	#MSG_PREHEAT_ABS_BEDONLY
 "PªhóàABS Bed"

	)

33 
	#MSG_PREHEAT_ABS_SETTINGS
 "PªhóàABS c⁄f"

	)

34 
	#MSG_COOLDOWN
 "Coﬁdown"

	)

35 
	#MSG_SWITCH_PS_ON
 "SwôchÖowî on"

	)

36 
	#MSG_SWITCH_PS_OFF
 "SwôchÖowî off"

	)

37 
	#MSG_EXTRUDE
 "Exåude"

	)

38 
	#MSG_RETRACT
 "Rëø˘"

	)

39 
	#MSG_MOVE_AXIS
 "Movêaxis"

	)

40 
	#MSG_MOVE_X
 "MovêX"

	)

41 
	#MSG_MOVE_Y
 "MovêY"

	)

42 
	#MSG_MOVE_Z
 "MovêZ"

	)

43 
	#MSG_MOVE_E
 "Exåudî"

	)

44 
	#MSG_MOVE_E1
 "Exåudî2"

	)

45 
	#MSG_MOVE_E2
 "Exåudî3"

	)

46 
	#MSG_MOVE_01MM
 "Movê0.1mm"

	)

47 
	#MSG_MOVE_1MM
 "Movê1mm"

	)

48 
	#MSG_MOVE_10MM
 "Movê10mm"

	)

49 
	#MSG_SPEED
 "S≥ed"

	)

50 
	#MSG_NOZZLE
 "NozzÀ"

	)

51 
	#MSG_NOZZLE1
 "NozzÀ2"

	)

52 
	#MSG_NOZZLE2
 "NozzÀ3"

	)

53 
	#MSG_BED
 "Bed"

	)

54 
	#MSG_FAN_SPEED
 "F™ s≥ed"

	)

55 
	#MSG_FLOW
 "Flow"

	)

56 
	#MSG_FLOW0
 "Flow 0"

	)

57 
	#MSG_FLOW1
 "Flow 1"

	)

58 
	#MSG_FLOW2
 "Flow 2"

	)

59 
	#MSG_CONTROL
 "C⁄åﬁ"

	)

60 
	#MSG_MIN
 " \002 Mö"

	)

61 
	#MSG_MAX
 " \002 Max"

	)

62 
	#MSG_FACTOR
 " \002 Fa˘"

	)

63 
	#MSG_AUTOTEMP
 "AutŸemp"

	)

64 
	#MSG_ON
 "O¿"

	)

65 
	#MSG_OFF
 "Off"

	)

66 
	#MSG_PID_P
 "PID-P"

	)

67 
	#MSG_PID_I
 "PID-I"

	)

68 
	#MSG_PID_D
 "PID-D"

	)

69 
	#MSG_PID_C
 "PID-C"

	)

70 
	#MSG_ACC
 "Ac˚l"

	)

71 
	#MSG_VXY_JERK
 "Vxy-jîk"

	)

72 
	#MSG_VZ_JERK
 "Vz-jîk"

	)

73 
	#MSG_VE_JERK
 "Ve-jîk"

	)

74 
	#MSG_VMAX
 "Vmax "

	)

75 
	#MSG_X
 "x"

	)

76 
	#MSG_Y
 "y"

	)

77 
	#MSG_Z
 "z"

	)

78 
	#MSG_E
 "e"

	)

79 
	#MSG_VMIN
 "Vmö"

	)

80 
	#MSG_VTRAV_MIN
 "VTøv mö"

	)

81 
	#MSG_AMAX
 "Amax "

	)

82 
	#MSG_A_RETRACT
 "A-ªåa˘"

	)

83 
	#MSG_XSTEPS
 "X°ïs/mm"

	)

84 
	#MSG_YSTEPS
 "Y°ïs/mm"

	)

85 
	#MSG_ZSTEPS
 "Z°ïs/mm"

	)

86 
	#MSG_ESTEPS
 "E°ïs/mm"

	)

87 
	#MSG_TEMPERATURE
 "Tem≥øtuª"

	)

88 
	#MSG_MOTION
 "MŸi⁄"

	)

89 
	#MSG_CONTRAST
 "LCD c⁄åa°"

	)

90 
	#MSG_STORE_EPROM
 "St‹êmem‹y"

	)

91 
	#MSG_LOAD_EPROM
 "Lﬂd mem‹y"

	)

92 
	#MSG_RESTORE_FAILSAFE
 "Re°‹êÁûß„"

	)

93 
	#MSG_REFRESH
 "Re‰esh"

	)

94 
	#MSG_WATCH
 "Infÿs¸ìn"

	)

95 
	#MSG_PREPARE
 "Pª∑ª"

	)

96 
	#MSG_TUNE
 "Tu√"

	)

97 
	#MSG_PAUSE_PRINT
 "Pau£Öröt"

	)

98 
	#MSG_RESUME_PRINT
 "Resumê¥öt"

	)

99 
	#MSG_STOP_PRINT
 "St›Öröt"

	)

100 
	#MSG_CARD_MENU
 "Pröà‰om SD"

	)

101 
	#MSG_NO_CARD
 "NÿSD c¨d"

	)

102 
	#MSG_DWELL
 "SÀï..."

	)

103 
	#MSG_USERWAIT
 "Waô f‹ u£r..."

	)

104 
	#MSG_RESUMING
 "ResumögÖröt"

	)

105 
	#MSG_PRINT_ABORTED
 "Pröàab‹ãd"

	)

106 
	#MSG_NO_MOVE
 "Nÿmove."

	)

107 
	#MSG_KILLED
 "KILLED. "

	)

108 
	#MSG_STOPPED
 "STOPPED. "

	)

109 
	#MSG_CONTROL_RETRACT
 "Rëø˘ mm"

	)

110 
	#MSG_CONTROL_RETRACT_SWAP
 "Sw≠ Re.mm"

	)

111 
	#MSG_CONTROL_RETRACTF
 "Rëø˘ V"

	)

112 
	#MSG_CONTROL_RETRACT_ZLIFT
 "H› mm"

	)

113 
	#MSG_CONTROL_RETRACT_RECOVER
 "UnRë +mm"

	)

114 
	#MSG_CONTROL_RETRACT_RECOVER_SWAP
 "S UnRë+mm"

	)

115 
	#MSG_CONTROL_RETRACT_RECOVERF
 "UnRë V"

	)

116 
	#MSG_AUTORETRACT
 "AutoRër."

	)

117 
	#MSG_FILAMENTCHANGE
 "Ch™gêfûamít"

	)

118 
	#MSG_INIT_SDCARD
 "Inô. SD c¨d"

	)

119 
	#MSG_CNG_SDCARD
 "Ch™gêSD c¨d"

	)

120 
	#MSG_ZPROBE_OUT
 "ZÖrobêout. bed"

	)

121 
	#MSG_POSITION_UNKNOWN
 "HomêX/Y bef‹êZ"

	)

122 
	#MSG_ZPROBE_ZOFFSET
 "Z Off£t"

	)

123 
	#MSG_BABYSTEP_X
 "Baby°ï X"

	)

124 
	#MSG_BABYSTEP_Y
 "Baby°ï Y"

	)

125 
	#MSG_BABYSTEP_Z
 "Baby°ï Z"

	)

126 
	#MSG_ENDSTOP_ABORT
 "End°›áb‹t"

	)

128 
	#MSG_RECTRACT
 "Re˘ø˘"

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language_es.h

8 #i‚de‡
LANGUAGE_ES_H


9 
	#LANGUAGE_ES_H


	)

11 
	#WELCOME_MSG
 
MACHINE_NAME
 "Üi°a."

	)

12 
	#MSG_SD_INSERTED
 "T¨jë®cﬁoˇda"

	)

13 
	#MSG_SD_REMOVED
 "T¨jë®ªtúada"

	)

14 
	#MSG_MAIN
 "MíuÖröcùÆ"

	)

15 
	#MSG_AUTOSTART
 " Auto°¨t"

	)

16 
	#MSG_DISABLE_STEPPERS
 "A∑g¨ mŸ‹es"

	)

17 
	#MSG_AUTO_HOME
 "LÀv¨á»‹igí"

	)

18 
	#MSG_SET_HOME_OFFSETS
 "Aju°¨ off£ts"

	)

19 
	#MSG_SET_ORIGIN
 "E°abÀ˚∏˚ro"

	)

20 
	#MSG_PREHEAT_PLA
 "PªˇÀ¡¨ PLA"

	)

21 
	#MSG_PREHEAT_PLA0
 "PªˇÀ¡¨ PLA 1"

	)

22 
	#MSG_PREHEAT_PLA1
 "PªˇÀ¡¨ PLA 2"

	)

23 
	#MSG_PREHEAT_PLA2
 "PªˇÀ¡¨ PLA 3"

	)

24 
	#MSG_PREHEAT_PLA012
 "Pªˇl. PLA Todo"

	)

25 
	#MSG_PREHEAT_PLA_BEDONLY
 "Pªˇl. PLA Ba£"

	)

26 
	#MSG_PREHEAT_PLA_SETTINGS
 "Aju°¨Åemp. PLA"

	)

27 
	#MSG_PREHEAT_ABS
 "PªˇÀ¡¨ ABS"

	)

28 
	#MSG_PREHEAT_ABS0
 "PªˇÀ¡¨ ABS 1"

	)

29 
	#MSG_PREHEAT_ABS1
 "PªˇÀ¡¨ ABS 2"

	)

30 
	#MSG_PREHEAT_ABS2
 "PªˇÀ¡¨ ABS 3"

	)

31 
	#MSG_PREHEAT_ABS012
 "Pªˇl. ABS Todo"

	)

32 
	#MSG_PREHEAT_ABS_BEDONLY
 "Pªˇl. ABS Ba£"

	)

33 
	#MSG_PREHEAT_ABS_SETTINGS
 "Aju°¨Åemp. ABS"

	)

34 
	#MSG_COOLDOWN
 "En‰ür"

	)

35 
	#MSG_SWITCH_PS_ON
 "En˚ndî"

	)

36 
	#MSG_SWITCH_PS_OFF
 "A∑g¨"

	)

37 
	#MSG_EXTRUDE
 "Exåuú"

	)

38 
	#MSG_RETRACT
 "Rëøî"

	)

39 
	#MSG_MOVE_AXIS
 "MovîÉjes"

	)

40 
	#MSG_MOVE_X
 "Movî X"

	)

41 
	#MSG_MOVE_Y
 "Movî Y"

	)

42 
	#MSG_MOVE_Z
 "Movî Z"

	)

43 
	#MSG_MOVE_E
 "Exåus‹"

	)

44 
	#MSG_MOVE_E1
 "Exåus‹2"

	)

45 
	#MSG_MOVE_E2
 "Exåus‹3"

	)

46 
	#MSG_MOVE_01MM
 "Movî 0.1mm"

	)

47 
	#MSG_MOVE_1MM
 "Movî 1mm"

	)

48 
	#MSG_MOVE_10MM
 "Movî 10mm"

	)

49 
	#MSG_SPEED
 "Vñocidad"

	)

50 
	#MSG_NOZZLE
 "NozzÀ"

	)

51 
	#MSG_NOZZLE1
 "NozzÀ2"

	)

52 
	#MSG_NOZZLE2
 "NozzÀ3"

	)

53 
	#MSG_BED
 "Ba£"

	)

54 
	#MSG_FAN_SPEED
 "Vítûad‹"

	)

55 
	#MSG_FLOW
 "Flujo"

	)

56 
	#MSG_FLOW0
 "Flujÿ0"

	)

57 
	#MSG_FLOW1
 "Flujÿ1"

	)

58 
	#MSG_FLOW2
 "Flujÿ2"

	)

59 
	#MSG_CONTROL
 "C⁄åﬁ"

	)

60 
	#MSG_MIN
 "\002 Mö"

	)

61 
	#MSG_MAX
 "\002 Max"

	)

62 
	#MSG_FACTOR
 "\002 Fa˘"

	)

63 
	#MSG_AUTOTEMP
 "AutŸemp"

	)

64 
	#MSG_ON
 "On"

	)

65 
	#MSG_OFF
 "Off"

	)

66 
	#MSG_PID_P
 "PID-P"

	)

67 
	#MSG_PID_I
 "PID-I"

	)

68 
	#MSG_PID_D
 "PID-D"

	)

69 
	#MSG_PID_C
 "PID-C"

	)

70 
	#MSG_ACC
 "A˚l"

	)

71 
	#MSG_VXY_JERK
 "Vxy-jîk"

	)

72 
	#MSG_VZ_JERK
 "Vz-jîk"

	)

73 
	#MSG_VE_JERK
 "Ve-jîk"

	)

74 
	#MSG_VMAX
 "Vmax"

	)

75 
	#MSG_X
 "x"

	)

76 
	#MSG_Y
 "y"

	)

77 
	#MSG_Z
 "z"

	)

78 
	#MSG_E
 "e"

	)

79 
	#MSG_VMIN
 "Vmö"

	)

80 
	#MSG_VTRAV_MIN
 "Vvaciÿmö"

	)

81 
	#MSG_AMAX
 "Amax"

	)

82 
	#MSG_A_RETRACT
 "A-ªåac."

	)

83 
	#MSG_XSTEPS
 "XÖasos/mm"

	)

84 
	#MSG_YSTEPS
 "YÖasos/mm"

	)

85 
	#MSG_ZSTEPS
 "ZÖasos/mm"

	)

86 
	#MSG_ESTEPS
 "EÖasos/mm"

	)

87 
	#MSG_TEMPERATURE
 "Tem≥øtuø"

	)

88 
	#MSG_MOTION
 "Movimõ¡o"

	)

89 
	#MSG_CONTRAST
 "C⁄åa°e"

	)

90 
	#MSG_STORE_EPROM
 "Gu¨d¨ mem‹ü"

	)

91 
	#MSG_LOAD_EPROM
 "C¨g¨ mem‹ü"

	)

92 
	#MSG_RESTORE_FAILSAFE
 "Re°. dêemîgí."

	)

93 
	#MSG_REFRESH
 "Vﬁvîá c¨g¨"

	)

94 
	#MSG_WATCH
 "M⁄ô‹iz¨"

	)

95 
	#MSG_PREPARE
 "Pª∑ør"

	)

96 
	#MSG_TUNE
 "Aju°¨"

	)

97 
	#MSG_PAUSE_PRINT
 "Pauß∏im¥esi⁄"

	)

98 
	#MSG_RESUME_PRINT
 "Rónud¨ im¥es."

	)

99 
	#MSG_STOP_PRINT
 "Dëíî im¥esi⁄"

	)

100 
	#MSG_CARD_MENU
 "Míu dêSD"

	)

101 
	#MSG_NO_CARD
 "NÿhayÅ¨jë®SD"

	)

102 
	#MSG_DWELL
 "Rïoso..."

	)

103 
	#MSG_USERWAIT
 "E•î™dÿ‹díes"

	)

104 
	#MSG_RESUMING
 "Resumõndÿim¥e."

	)

105 
	#MSG_PRINT_ABORTED
 "Pröàab‹ãd"

	)

106 
	#MSG_NO_MOVE
 "Sö movimõ¡o"

	)

107 
	#MSG_KILLED
 "PARADA DE EMERG."

	)

108 
	#MSG_STOPPED
 "PARADA"

	)

109 
	#MSG_CONTROL_RETRACT
 "Rëøî mm"

	)

110 
	#MSG_CONTROL_RETRACT_SWAP
 "I¡îc. Rëøî mm"

	)

111 
	#MSG_CONTROL_RETRACTF
 "Rëøî V"

	)

112 
	#MSG_CONTROL_RETRACT_ZLIFT
 "Lev™è∏mm"

	)

113 
	#MSG_CONTROL_RETRACT_RECOVER
 "DesRë +mm"

	)

114 
	#MSG_CONTROL_RETRACT_RECOVER_SWAP
 "I¡îc. DesRë +mm"

	)

115 
	#MSG_CONTROL_RETRACT_RECOVERF
 "DesRë V"

	)

116 
	#MSG_AUTORETRACT
 "AutoRër."

	)

117 
	#MSG_FILAMENTCHANGE
 "Cambü∏fûamíto"

	)

118 
	#MSG_INIT_SDCARD
 "Inicündÿèrjëa"

	)

119 
	#MSG_CNG_SDCARD
 "Cambü∏èrjëa"

	)

120 
	#MSG_ZPROBE_OUT
 "s⁄d®Z fuîa"

	)

121 
	#MSG_POSITION_UNKNOWN
 "Reöicü∏X/Y y Z"

	)

122 
	#MSG_ZPROBE_ZOFFSET
 "Off£àZ"

	)

123 
	#MSG_BABYSTEP_X
 "Baby°ï X"

	)

124 
	#MSG_BABYSTEP_Y
 "Baby°ï Y"

	)

125 
	#MSG_BABYSTEP_Z
 "Baby°ï Z"

	)

126 
	#MSG_ENDSTOP_ABORT
 "End°›áb‹t"

	)

128 
	#MSG_RECTRACT
 "Rëøî"

	)

129 
	#MSG_RECTRACT_WIDE
 "Rëøî"

	)

130 
	#MSG_TEMPERATURE_WIDE
 "Tem≥øtuø"

	)

131 
	#MSG_TEMPERATURE_RTN
 "Tem≥øtuø"

	)

132 
	#MSG_MAIN_WIDE
 "MíuÖröcùÆ"

	)

133 
	#MSG_MOTION_WIDE
 "Movimõ¡o"

	)

134 
	#MSG_PREPARE_ALT
 "Pª∑ør"

	)

135 
	#MSG_CONTROL_ARROW
 "C⁄åﬁ \x7E"

	)

136 
	#MSG_RETRACT_ARROW
 "Rëøî \x7E"

	)

137 
	#MSG_STEPPER_RELEASED
 "Deßc›œda."

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language_eu.h

8 #i‚de‡
LANGUAGE_EU_H


9 
	#LANGUAGE_EU_H


	)

11 
	#WELCOME_MSG
 
MACHINE_NAME
 "Öª°."

	)

12 
	#MSG_SD_INSERTED
 "Tx¨ãœ s¨tuè"

	)

13 
	#MSG_SD_REMOVED
 "Tx¨ãœ kíduè"

	)

14 
	#MSG_MAIN
 "MíuÇagusü"

	)

15 
	#MSG_AUTOSTART
 "Autÿhasõø"

	)

16 
	#MSG_DISABLE_STEPPERS
 "ItzÆòmŸ‹ók"

	)

17 
	#MSG_AUTO_HOME
 "Hasõøø jﬂn"

	)

18 
	#MSG_SET_HOME_OFFSETS
 "Së homêoff£ts"

	)

19 
	#MSG_SET_ORIGIN
 "Hasõø ipöi"

	)

20 
	#MSG_PREHEAT_PLA
 "AuºebîŸu PLA"

	)

21 
	#MSG_PREHEAT_PLA0
 "AuºebîŸu PLA1"

	)

22 
	#MSG_PREHEAT_PLA1
 "AuºebîŸu PLA2"

	)

23 
	#MSG_PREHEAT_PLA2
 "AuºebîŸu PLA3"

	)

24 
	#MSG_PREHEAT_PLA012
 "BîŸu PLA Guztü"

	)

25 
	#MSG_PREHEAT_PLA_BEDONLY
 "BîŸu PLA Ohó"

	)

26 
	#MSG_PREHEAT_PLA_SETTINGS
 "BîŸu PLA K⁄fig"

	)

27 
	#MSG_PREHEAT_ABS
 "AuºebîŸu ABS"

	)

28 
	#MSG_PREHEAT_ABS0
 "AuºebîŸu ABS 1"

	)

29 
	#MSG_PREHEAT_ABS1
 "AuºebîŸu ABS 2"

	)

30 
	#MSG_PREHEAT_ABS2
 "AuºebîŸu ABS 3"

	)

31 
	#MSG_PREHEAT_ABS012
 "BîŸu ABS Guztü"

	)

32 
	#MSG_PREHEAT_ABS_BEDONLY
 "BîŸu ABS Ohó"

	)

33 
	#MSG_PREHEAT_ABS_SETTINGS
 "BîŸu ABS K⁄fig"

	)

34 
	#MSG_COOLDOWN
 "Hoztu"

	)

35 
	#MSG_SWITCH_PS_ON
 "E√rgüÖiztu"

	)

36 
	#MSG_SWITCH_PS_OFF
 "E√rgü itzÆi"

	)

37 
	#MSG_EXTRUDE
 "E°ruôu"

	)

38 
	#MSG_RETRACT
 "Atzî®îagö"

	)

39 
	#MSG_MOVE_AXIS
 "Ard©zak mugôu"

	)

40 
	#MSG_MOVE_X
 "Mugôu X"

	)

41 
	#MSG_MOVE_Y
 "Mugôu Y"

	)

42 
	#MSG_MOVE_Z
 "Mugôu Z"

	)

43 
	#MSG_MOVE_E
 "E°rus‹ó"

	)

44 
	#MSG_MOVE_E1
 "E°rus‹ó2"

	)

45 
	#MSG_MOVE_E2
 "E°rus‹ó3"

	)

46 
	#MSG_MOVE_01MM
 "Mugôu 0.1mm"

	)

47 
	#MSG_MOVE_1MM
 "Mugôu 1mm"

	)

48 
	#MSG_MOVE_10MM
 "Mugôu 10mm"

	)

49 
	#MSG_SPEED
 "Abüduø"

	)

50 
	#MSG_NOZZLE
 "Pôa"

	)

51 
	#MSG_NOZZLE1
 "Pôa2"

	)

52 
	#MSG_NOZZLE2
 "Pôa3"

	)

53 
	#MSG_BED
 "Ohó"

	)

54 
	#MSG_FAN_SPEED
 "Haizagaûua"

	)

55 
	#MSG_FLOW
 "Fluxua"

	)

56 
	#MSG_FLOW0
 "Fluxu®0"

	)

57 
	#MSG_FLOW1
 "Fluxu®1"

	)

58 
	#MSG_FLOW2
 "Fluxu®2"

	)

59 
	#MSG_CONTROL
 "K⁄åﬁa"

	)

60 
	#MSG_MIN
 " \002 Mö"

	)

61 
	#MSG_MAX
 " \002 Max"

	)

62 
	#MSG_FACTOR
 " \002 Fakt‹ó"

	)

63 
	#MSG_AUTOTEMP
 "Autÿã≈î©uø"

	)

64 
	#MSG_ON
 "O¿"

	)

65 
	#MSG_OFF
 "Off"

	)

66 
	#MSG_PID_P
 "PID-P"

	)

67 
	#MSG_PID_I
 "PID-I"

	)

68 
	#MSG_PID_D
 "PID-D"

	)

69 
	#MSG_PID_C
 "PID-C"

	)

70 
	#MSG_ACC
 "Azñîaziﬂ"

	)

71 
	#MSG_VXY_JERK
 "Vxy-a°ödua"

	)

72 
	#MSG_VZ_JERK
 "Vz-a°ödua"

	)

73 
	#MSG_VE_JERK
 "Ve-a°ödua"

	)

74 
	#MSG_VMAX
 "Vmax "

	)

75 
	#MSG_X
 "x"

	)

76 
	#MSG_Y
 "y"

	)

77 
	#MSG_Z
 "z"

	)

78 
	#MSG_E
 "e"

	)

79 
	#MSG_VMIN
 "Vmö"

	)

80 
	#MSG_VTRAV_MIN
 "VTøv mö"

	)

81 
	#MSG_AMAX
 "Amax "

	)

82 
	#MSG_A_RETRACT
 "A-ªåakt"

	)

83 
	#MSG_XSTEPS
 "XÖausﬂk/mm"

	)

84 
	#MSG_YSTEPS
 "YÖausﬂk/mm"

	)

85 
	#MSG_ZSTEPS
 "ZÖausﬂk/mm"

	)

86 
	#MSG_ESTEPS
 "EÖausﬂk/mm"

	)

87 
	#MSG_TEMPERATURE
 "Tí≥øtuø"

	)

88 
	#MSG_MOTION
 "Mugimídua"

	)

89 
	#MSG_CONTRAST
 "LCD k⁄åa°ó"

	)

90 
	#MSG_STORE_EPROM
 "G‹dêmem‹ü"

	)

91 
	#MSG_LOAD_EPROM
 "K¨g©u mem‹ü"

	)

92 
	#MSG_RESTORE_FAILSAFE
 "L¨ri. bîriz."

	)

93 
	#MSG_REFRESH
 "Bîriz k¨g©u"

	)

94 
	#MSG_WATCH
 "P™èû®öfo"

	)

95 
	#MSG_PREPARE
 "Pª°©u"

	)

96 
	#MSG_TUNE
 "Doôu"

	)

97 
	#MSG_PAUSE_PRINT
 "Paußtu i≈rimak."

	)

98 
	#MSG_RESUME_PRINT
 "J¨øôu i≈rima."

	)

99 
	#MSG_STOP_PRINT
 "Gñdôu i≈rima."

	)

100 
	#MSG_CARD_MENU
 "SD-tik i≈rim©u"

	)

101 
	#MSG_NO_CARD
 "Ez dagÿtx¨ãlik"

	)

102 
	#MSG_DWELL
 "Lÿegö..."

	)

103 
	#MSG_USERWAIT
 "Agöduak zaö..."

	)

104 
	#MSG_RESUMING
 "J¨øôzí i≈ri."

	)

105 
	#MSG_PRINT_ABORTED
 "Pröàab‹ãd"

	)

106 
	#MSG_NO_MOVE
 "Mugimídu gabe"

	)

107 
	#MSG_KILLED
 "LARRIALDI GELDIA"

	)

108 
	#MSG_STOPPED
 "GELDITUTA. "

	)

109 
	#MSG_CONTROL_RETRACT
 "Atzî®egö mm"

	)

110 
	#MSG_CONTROL_RETRACT_SWAP
 "Sw≠ Atzî®egö mm"

	)

111 
	#MSG_CONTROL_RETRACTF
 "Atzî®egö V"

	)

112 
	#MSG_CONTROL_RETRACT_ZLIFT
 "Igÿmm"

	)

113 
	#MSG_CONTROL_RETRACT_RECOVER
 "Atzî®egö +mm"

	)

114 
	#MSG_CONTROL_RETRACT_RECOVER_SWAP
 "Sw≠ Atzî®egö +mm"

	)

115 
	#MSG_CONTROL_RETRACT_RECOVERF
 "Atzî®egö V"

	)

116 
	#MSG_AUTORETRACT
 "Atzî®egö"

	)

117 
	#MSG_FILAMENTCHANGE
 "Ald©u fûamít."

	)

118 
	#MSG_INIT_SDCARD
 "HasõøtuÅx¨ãœ"

	)

119 
	#MSG_CNG_SDCARD
 "Ald©uÅx¨ãœ"

	)

120 
	#MSG_ZPROBE_OUT
 "Z ohêhasõø"

	)

121 
	#MSG_POSITION_UNKNOWN
 "Posiziÿezezagu«"

	)

122 
	#MSG_ZPROBE_ZOFFSET
 "Z k⁄≥¡ßtu"

	)

123 
	#MSG_BABYSTEP_X
 "Baby°ï X"

	)

124 
	#MSG_BABYSTEP_Y
 "Baby°ï Y"

	)

125 
	#MSG_BABYSTEP_Z
 "Baby°ï Z"

	)

126 
	#MSG_ENDSTOP_ABORT
 "End°› deu£zèt"

	)

128 
	#MSG_RECTRACT
 "Atzî®îagö"

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language_fi.h

8 #i‚de‡
LANGUAGE_FI_H


9 
	#LANGUAGE_FI_H


	)

11 
	#WELCOME_MSG
 
MACHINE_NAME
 " vÆmis."

	)

12 
	#MSG_SD_INSERTED
 "K‹âòa£ãâu"

	)

13 
	#MSG_SD_REMOVED
 "K‹âòpoi°ëtu"

	)

14 
	#MSG_MAIN
 "PÆØ"

	)

15 
	#MSG_AUTOSTART
 "AutomØâi"

	)

16 
	#MSG_DISABLE_STEPPERS
 "V≠auè moŸt‹ô"

	)

17 
	#MSG_AUTO_HOME
 "Aj®ª„ªnssiö"

	)

18 
	#MSG_SET_HOME_OFFSETS
 "Së homêoff£ts"

	)

19 
	#MSG_SET_ORIGIN
 "A£è origo"

	)

20 
	#MSG_PREHEAT_PLA
 "Esûammô®PLA"

	)

21 
	#MSG_PREHEAT_PLA0
 "Esûammô®PLA 1"

	)

22 
	#MSG_PREHEAT_PLA1
 "Esûammô®PLA 2"

	)

23 
	#MSG_PREHEAT_PLA2
 "Esûammô®PLA 3"

	)

24 
	#MSG_PREHEAT_PLA012
 "Esûa. PLA Kaikki"

	)

25 
	#MSG_PREHEAT_PLA_BEDONLY
 "Esûa. PLA Alu°a"

	)

26 
	#MSG_PREHEAT_PLA_SETTINGS
 "Esûamm. PLA k⁄f"

	)

27 
	#MSG_PREHEAT_ABS
 "Esûammô®ABS"

	)

28 
	#MSG_PREHEAT_ABS0
 "Esûammô®ABS 1"

	)

29 
	#MSG_PREHEAT_ABS1
 "Esûammô®ABS 2"

	)

30 
	#MSG_PREHEAT_ABS2
 "Esûammô®ABS 3"

	)

31 
	#MSG_PREHEAT_ABS012
 "Esûa. ABS Kaikki"

	)

32 
	#MSG_PREHEAT_ABS_BEDONLY
 "Esûa. ABS Alu°a"

	)

33 
	#MSG_PREHEAT_ABS_SETTINGS
 "Esûamm. ABS k⁄f"

	)

34 
	#MSG_COOLDOWN
 "JØhdyè"

	)

35 
	#MSG_SWITCH_PS_ON
 "VúèÖØŒe"

	)

36 
	#MSG_SWITCH_PS_OFF
 "VúèÖois"

	)

37 
	#MSG_EXTRUDE
 "PursŸa"

	)

38 
	#MSG_RETRACT
 "Ved®èkaisö"

	)

39 
	#MSG_MOVE_AXIS
 "Liikuèák£Àôa"

	)

40 
	#MSG_MOVE_X
 "MovêX"

	)

41 
	#MSG_MOVE_Y
 "MovêY"

	)

42 
	#MSG_MOVE_Z
 "MovêZ"

	)

43 
	#MSG_MOVE_E
 "Exåudî"

	)

44 
	#MSG_MOVE_E1
 "Exåudî2"

	)

45 
	#MSG_MOVE_E2
 "Exåudî3"

	)

46 
	#MSG_MOVE_01MM
 "Movê0.1mm"

	)

47 
	#MSG_MOVE_1MM
 "Movê1mm"

	)

48 
	#MSG_MOVE_10MM
 "Movê10mm"

	)

49 
	#MSG_SPEED
 "N›eus"

	)

50 
	#MSG_NOZZLE
 "Suutö"

	)

51 
	#MSG_NOZZLE1
 "Suutö2"

	)

52 
	#MSG_NOZZLE2
 "Suutö3"

	)

53 
	#MSG_BED
 "Alu°a"

	)

54 
	#MSG_FAN_SPEED
 "Tuul.Ç›eus"

	)

55 
	#MSG_FLOW
 "Vúèus"

	)

56 
	#MSG_FLOW0
 "Vúèu†0"

	)

57 
	#MSG_FLOW1
 "Vúèu†1"

	)

58 
	#MSG_FLOW2
 "Vúèu†2"

	)

59 
	#MSG_CONTROL
 "K⁄åﬁli"

	)

60 
	#MSG_MIN
 " \002 Mö"

	)

61 
	#MSG_MAX
 " \002 Max"

	)

62 
	#MSG_FACTOR
 " \002 Kîr"

	)

63 
	#MSG_AUTOTEMP
 "AutŸemp"

	)

64 
	#MSG_ON
 "O¿"

	)

65 
	#MSG_OFF
 "Off"

	)

66 
	#MSG_PID_P
 "PID-P"

	)

67 
	#MSG_PID_I
 "PID-I"

	)

68 
	#MSG_PID_D
 "PID-D"

	)

69 
	#MSG_PID_C
 "PID-C"

	)

70 
	#MSG_ACC
 "Kiihtyv"

	)

71 
	#MSG_VXY_JERK
 "Vxy-jîk"

	)

72 
	#MSG_VZ_JERK
 "Vz-jîk"

	)

73 
	#MSG_VE_JERK
 "Ve-jîk"

	)

74 
	#MSG_VMAX
 "Vmax "

	)

75 
	#MSG_X
 "x"

	)

76 
	#MSG_Y
 "y"

	)

77 
	#MSG_Z
 "z"

	)

78 
	#MSG_E
 "e"

	)

79 
	#MSG_VMIN
 "Vmö"

	)

80 
	#MSG_VTRAV_MIN
 "VLiikêmö"

	)

81 
	#MSG_AMAX
 "Amax "

	)

82 
	#MSG_A_RETRACT
 "A-≥ruuè"

	)

83 
	#MSG_XSTEPS
 "X°ïs/mm"

	)

84 
	#MSG_YSTEPS
 "Y°ïs/mm"

	)

85 
	#MSG_ZSTEPS
 "Z°ïs/mm"

	)

86 
	#MSG_ESTEPS
 "E°ïs/mm"

	)

87 
	#MSG_TEMPERATURE
 "LampŸûa"

	)

88 
	#MSG_MOTION
 "Liike"

	)

89 
	#MSG_CONTRAST
 "LCD c⁄åa°"

	)

90 
	#MSG_STORE_EPROM
 "TÆÀ¬®mui°iö"

	)

91 
	#MSG_LOAD_EPROM
 "L©Ø mui°i°a"

	)

92 
	#MSG_RESTORE_FAILSAFE
 "PÆauè oÀtus"

	)

93 
	#MSG_REFRESH
 "Paivôa"

	)

94 
	#MSG_WATCH
 "Seuøa"

	)

95 
	#MSG_PREPARE
 "VÆmi°ñe"

	)

96 
	#MSG_TUNE
 "SØda"

	)

97 
	#MSG_PAUSE_PRINT
 "KeskeyèÅulo°us"

	)

98 
	#MSG_RESUME_PRINT
 "J©k®tulo°u°a"

	)

99 
	#MSG_STOP_PRINT
 "PyßyèÅulo°us"

	)

100 
	#MSG_CARD_MENU
 "K‹âivÆikko"

	)

101 
	#MSG_NO_CARD
 "Eòk‹âü"

	)

102 
	#MSG_DWELL
 "Nukkumasß..."

	)

103 
	#MSG_USERWAIT
 "OdŸë. vÆöèa"

	)

104 
	#MSG_RESUMING
 "J©ke.Åulo°u°a"

	)

105 
	#MSG_PRINT_ABORTED
 "Pröàab‹ãd"

	)

106 
	#MSG_NO_MOVE
 "Eòliikëè."

	)

107 
	#MSG_KILLED
 "KILLED. "

	)

108 
	#MSG_STOPPED
 "STOPPED. "

	)

109 
	#MSG_CONTROL_RETRACT
 "Ved®mm"

	)

110 
	#MSG_CONTROL_RETRACT_SWAP
 "Va. Ved®mm"

	)

111 
	#MSG_CONTROL_RETRACTF
 "Ved®V"

	)

112 
	#MSG_CONTROL_RETRACT_ZLIFT
 "Z mm"

	)

113 
	#MSG_CONTROL_RETRACT_RECOVER
 "UnRë +mm"

	)

114 
	#MSG_CONTROL_RETRACT_RECOVER_SWAP
 "Va. UnRë +mm"

	)

115 
	#MSG_CONTROL_RETRACT_RECOVERF
 "UnRë V"

	)

116 
	#MSG_AUTORETRACT
 "AutoVëo."

	)

117 
	#MSG_FILAMENTCHANGE
 "Ch™gêfûamít"

	)

118 
	#MSG_INIT_SDCARD
 "Inô. SD-C¨d"

	)

119 
	#MSG_CNG_SDCARD
 "Ch™gêSD-C¨d"

	)

120 
	#MSG_ZPROBE_OUT
 "ZÖrobêout. bed"

	)

121 
	#MSG_POSITION_UNKNOWN
 "HomêX/Y bef‹êZ"

	)

122 
	#MSG_ZPROBE_ZOFFSET
 "Z Off£t"

	)

123 
	#MSG_BABYSTEP_X
 "Baby°ï X"

	)

124 
	#MSG_BABYSTEP_Y
 "Baby°ï Y"

	)

125 
	#MSG_BABYSTEP_Z
 "Baby°ï Z"

	)

126 
	#MSG_ENDSTOP_ABORT
 "End°›áb‹t"

	)

128 
	#MSG_RECTRACT
 "Ved®èkaisö"

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language_fr.h

8 #i‚de‡
LANGUAGE_FR_H


9 
	#LANGUAGE_FR_H


	)

11 
	#WELCOME_MSG
 
MACHINE_NAME
 "Öªã."

	)

12 
	#MSG_SD_INSERTED
 "C¨ã in£ªe"

	)

13 
	#MSG_SD_REMOVED
 "C¨ãÑëúì"

	)

14 
	#MSG_MAIN
 "MíuÖröcùÆ"

	)

15 
	#MSG_AUTOSTART
 "Dem¨øgêauto"

	)

16 
	#MSG_DISABLE_STEPPERS
 "Aºëî mŸeurs"

	)

17 
	#MSG_AUTO_HOME
 "Homêauto."

	)

18 
	#MSG_SET_HOME_OFFSETS
 "Së homêoff£ts"

	)

19 
	#MSG_SET_ORIGIN
 "RegÀ∏‹igöe"

	)

20 
	#MSG_PREHEAT_PLA
 "PªchaufÁgêPLA"

	)

21 
	#MSG_PREHEAT_PLA0
 "Pªchauff. PLA 1"

	)

22 
	#MSG_PREHEAT_PLA1
 "Pªchauff. PLA 2"

	)

23 
	#MSG_PREHEAT_PLA2
 "Pªchauff. PLA 3"

	)

24 
	#MSG_PREHEAT_PLA012
 "Pªch. PLA Tout"

	)

25 
	#MSG_PREHEAT_PLA_BEDONLY
 "Pªch. PLA Pœãau"

	)

26 
	#MSG_PREHEAT_PLA_SETTINGS
 "Regl.Öªch. PLA"

	)

27 
	#MSG_PREHEAT_ABS
 "PªchaufÁgêABS"

	)

28 
	#MSG_PREHEAT_ABS0
 "Pªchauff. ABS 1"

	)

29 
	#MSG_PREHEAT_ABS1
 "Pªchauff. ABS 2"

	)

30 
	#MSG_PREHEAT_ABS2
 "Pªchauff. ABS 3"

	)

31 
	#MSG_PREHEAT_ABS012
 "Pªch. ABS Tout"

	)

32 
	#MSG_PREHEAT_ABS_BEDONLY
 "Pªch. ABS Pœãau"

	)

33 
	#MSG_PREHEAT_ABS_SETTINGS
 "Regl.Öªch. ABS"

	)

34 
	#MSG_COOLDOWN
 "Re‰oidú"

	)

35 
	#MSG_SWITCH_PS_ON
 "AŒumîálim."

	)

36 
	#MSG_SWITCH_PS_OFF
 "Eãödªálim."

	)

37 
	#MSG_EXTRUDE
 "Exåusi⁄"

	)

38 
	#MSG_RETRACT
 "Rëø˘i⁄"

	)

39 
	#MSG_MOVE_AXIS
 "Dïœ˚∏u¿axe"

	)

40 
	#MSG_MOVE_X
 "MovêX"

	)

41 
	#MSG_MOVE_Y
 "MovêY"

	)

42 
	#MSG_MOVE_Z
 "MovêZ"

	)

43 
	#MSG_MOVE_E
 "Exåudî"

	)

44 
	#MSG_MOVE_E1
 "Exåudî2"

	)

45 
	#MSG_MOVE_E2
 "Exåudî3"

	)

46 
	#MSG_MOVE_01MM
 "Movê0.1mm"

	)

47 
	#MSG_MOVE_1MM
 "Movê1mm"

	)

48 
	#MSG_MOVE_10MM
 "Movê10mm"

	)

49 
	#MSG_SPEED
 " Vôes£"

	)

50 
	#MSG_NOZZLE
 "Bu£"

	)

51 
	#MSG_NOZZLE1
 "Bu£2"

	)

52 
	#MSG_NOZZLE2
 "Bu£3"

	)

53 
	#MSG_BED
 "Pœãau"

	)

54 
	#MSG_FAN_SPEED
 "Vôe. vítû©eur"

	)

55 
	#MSG_FLOW
 "Flux"

	)

56 
	#MSG_FLOW0
 "Flux 0"

	)

57 
	#MSG_FLOW1
 "Flux 1"

	)

58 
	#MSG_FLOW2
 "Flux 2"

	)

59 
	#MSG_CONTROL
 "C⁄åﬁî"

	)

60 
	#MSG_MIN
 " \002 Mö"

	)

61 
	#MSG_MAX
 " \002 Max"

	)

62 
	#MSG_FACTOR
 " \002 Fa˘eur"

	)

63 
	#MSG_AUTOTEMP
 "Temp. Auto."

	)

64 
	#MSG_ON
 "M¨chê"

	)

65 
	#MSG_OFF
 "Aºë"

	)

66 
	#MSG_PID_P
 "PID-P"

	)

67 
	#MSG_PID_I
 "PID-I"

	)

68 
	#MSG_PID_D
 "PID-D"

	)

69 
	#MSG_PID_C
 "PID-C"

	)

70 
	#MSG_ACC
 "Ac˚l"

	)

71 
	#MSG_VXY_JERK
 "Vxy-jîk"

	)

72 
	#MSG_VZ_JERK
 "Vz-jîk"

	)

73 
	#MSG_VE_JERK
 "Ve-jîk"

	)

74 
	#MSG_VMAX
 "Vmax"

	)

75 
	#MSG_X
 "x"

	)

76 
	#MSG_Y
 "y"

	)

77 
	#MSG_Z
 "z"

	)

78 
	#MSG_E
 "e"

	)

79 
	#MSG_VMIN
 "Vmö"

	)

80 
	#MSG_VTRAV_MIN
 "Vdï»mö"

	)

81 
	#MSG_AMAX
 "Amax "

	)

82 
	#MSG_A_RETRACT
 "A-ªåa˘"

	)

83 
	#MSG_XSTEPS
 "X∑s/mm"

	)

84 
	#MSG_YSTEPS
 "Y∑s/mm"

	)

85 
	#MSG_ZSTEPS
 "Z∑s/mm"

	)

86 
	#MSG_ESTEPS
 "E∑s/mm"

	)

87 
	#MSG_TEMPERATURE
 "Tem≥øtuª"

	)

88 
	#MSG_MOTION
 "Mouvemít"

	)

89 
	#MSG_CONTRAST
 "C⁄åa°êLCD"

	)

90 
	#MSG_STORE_EPROM
 "Sauvî c⁄fig"

	)

91 
	#MSG_LOAD_EPROM
 "Lúêc⁄fig"

	)

92 
	#MSG_RESTORE_FAILSAFE
 "Re°auª∏deÁuts"

	)

93 
	#MSG_REFRESH
 "A˘uÆi£r"

	)

94 
	#MSG_WATCH
 "SurveûÀr"

	)

95 
	#MSG_PREPARE
 "Pª∑ªr"

	)

96 
	#MSG_TUNE
 "RegÀr"

	)

97 
	#MSG_PAUSE_PRINT
 "I¡îrom¥êim¥."

	)

98 
	#MSG_RESUME_PRINT
 "Rïªndª im¥."

	)

99 
	#MSG_STOP_PRINT
 "Aºëî im¥."

	)

100 
	#MSG_CARD_MENU
 "Im¥. dïui†SD"

	)

101 
	#MSG_NO_CARD
 "Pa†dêˇπe"

	)

102 
	#MSG_DWELL
 "Rïos..."

	)

103 
	#MSG_USERWAIT
 "Aâí. dêl'utû."

	)

104 
	#MSG_RESUMING
 "Rïri. dêl'im¥."

	)

105 
	#MSG_PRINT_ABORTED
 "Pröàab‹ãd"

	)

106 
	#MSG_NO_MOVE
 "Aucu¿mouvemít."

	)

107 
	#MSG_KILLED
 "MORT."

	)

108 
	#MSG_STOPPED
 "STOPPE."

	)

109 
	#MSG_CONTROL_RETRACT
 "Rëø˘i⁄ mm"

	)

110 
	#MSG_CONTROL_RETRACT_SWAP
 "Ech. Rër. mm"

	)

111 
	#MSG_CONTROL_RETRACTF
 "Rëø˘i⁄ V"

	)

112 
	#MSG_CONTROL_RETRACT_ZLIFT
 "H› mm"

	)

113 
	#MSG_CONTROL_RETRACT_RECOVER
 "UnRë +mm"

	)

114 
	#MSG_CONTROL_RETRACT_RECOVER_SWAP
 "Ech. UnRë +mm"

	)

115 
	#MSG_CONTROL_RETRACT_RECOVERF
 "UnRë V"

	)

116 
	#MSG_AUTORETRACT
 "Rëø˘. Auto."

	)

117 
	#MSG_FILAMENTCHANGE
 "Ch™gî fûamít"

	)

118 
	#MSG_INIT_SDCARD
 "Inô.Ü®ˇπêSD"

	)

119 
	#MSG_CNG_SDCARD
 "Ch™gî dêˇπe"

	)

120 
	#MSG_ZPROBE_OUT
 "Z s⁄dêexã.Üô"

	)

121 
	#MSG_POSITION_UNKNOWN
 "Rev. d™†XYáv.Z"

	)

122 
	#MSG_ZPROBE_ZOFFSET
 "Off£àZ"

	)

123 
	#MSG_BABYSTEP_X
 "Baby°ï X"

	)

124 
	#MSG_BABYSTEP_Y
 "Baby°ï Y"

	)

125 
	#MSG_BABYSTEP_Z
 "Baby°ï Z"

	)

126 
	#MSG_ENDSTOP_ABORT
 "Buãêab™d⁄"

	)

128 
	#MSG_RECTRACT
 "Re˘ø˘"

	)

129 
	#MSG_STEPPER_RELEASED
 "RELACHE."

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language_it.h

8 #i‚de‡
LANGUAGE_IT_H


9 
	#LANGUAGE_IT_H


	)

11 
	#WELCOME_MSG
 
MACHINE_NAME
 "Ör⁄to."

	)

12 
	#MSG_SD_INSERTED
 "SD C¨d in£rôa"

	)

13 
	#MSG_SD_REMOVED
 "SD C¨dÑimosß"

	)

14 
	#MSG_MAIN
 "MíuÖröcùÆe"

	)

15 
	#MSG_AUTOSTART
 "Auto°¨t"

	)

16 
	#MSG_DISABLE_STEPPERS
 "Dißbûô®MŸ‹i"

	)

17 
	#MSG_AUTO_HOME
 "AutÿHome"

	)

18 
	#MSG_SET_HOME_OFFSETS
 "Së homêoff£ts"

	)

19 
	#MSG_SET_ORIGIN
 "Impo°®Origöe"

	)

20 
	#MSG_PREHEAT_PLA
 "Pªrisˇld®PLA"

	)

21 
	#MSG_PREHEAT_PLA0
 "Pªrisˇld®PLA 1"

	)

22 
	#MSG_PREHEAT_PLA1
 "Pªrisˇld®PLA 2"

	)

23 
	#MSG_PREHEAT_PLA2
 "Pªrisˇld®PLA 3"

	)

24 
	#MSG_PREHEAT_PLA012
 "Pªris. PLA Tuâo"

	)

25 
	#MSG_PREHEAT_PLA_BEDONLY
 "Pªri. PLA Püâo"

	)

26 
	#MSG_PREHEAT_PLA_SETTINGS
 "Pªris. PLA C⁄f"

	)

27 
	#MSG_PREHEAT_ABS
 "Pªrisˇld®ABS"

	)

28 
	#MSG_PREHEAT_ABS0
 "Pªrisˇld®ABS 1"

	)

29 
	#MSG_PREHEAT_ABS1
 "Pªrisˇld®ABS 2"

	)

30 
	#MSG_PREHEAT_ABS2
 "Pªrisˇld®ABS 3"

	)

31 
	#MSG_PREHEAT_ABS012
 "Pªris. ABS Tuâo"

	)

32 
	#MSG_PREHEAT_ABS_BEDONLY
 "Pªri. ABS Püâo"

	)

33 
	#MSG_PREHEAT_ABS_SETTINGS
 "Pªris. ABS C⁄f"

	)

34 
	#MSG_COOLDOWN
 "Raf‰edda"

	)

35 
	#MSG_SWITCH_PS_ON
 "Swôch Powî On"

	)

36 
	#MSG_SWITCH_PS_OFF
 "Swôch Powî Off"

	)

37 
	#MSG_EXTRUDE
 "E°rudi"

	)

38 
	#MSG_RETRACT
 "Rôøi"

	)

39 
	#MSG_MOVE_AXIS
 "MuovòAs£"

	)

40 
	#MSG_MOVE_X
 "MovêX"

	)

41 
	#MSG_MOVE_Y
 "MovêY"

	)

42 
	#MSG_MOVE_Z
 "MovêZ"

	)

43 
	#MSG_MOVE_E
 "Exåudî"

	)

44 
	#MSG_MOVE_E1
 "Exåudî2"

	)

45 
	#MSG_MOVE_E2
 "Exåudî3"

	)

46 
	#MSG_MOVE_01MM
 "Movê0.1mm"

	)

47 
	#MSG_MOVE_1MM
 "Movê1mm"

	)

48 
	#MSG_MOVE_10MM
 "Movê10mm"

	)

49 
	#MSG_SPEED
 "Vñcô√†"

	)

50 
	#MSG_NOZZLE
 "Ugñlo"

	)

51 
	#MSG_NOZZLE1
 "Ugñlo2"

	)

52 
	#MSG_NOZZLE2
 "Ugñlo3"

	)

53 
	#MSG_BED
 "Püâo"

	)

54 
	#MSG_FAN_SPEED
 "Vítﬁa"

	)

55 
	#MSG_FLOW
 "Flusso"

	)

56 
	#MSG_FLOW0
 "Flussÿ0"

	)

57 
	#MSG_FLOW1
 "Flussÿ1"

	)

58 
	#MSG_FLOW2
 "Flussÿ2"

	)

59 
	#MSG_CONTROL
 "C⁄åﬁlo"

	)

60 
	#MSG_MIN
 " \002 Mö:"

	)

61 
	#MSG_MAX
 " \002 Max:"

	)

62 
	#MSG_FACTOR
 " \002 Fa˘:"

	)

63 
	#MSG_AUTOTEMP
 "AutŸemp"

	)

64 
	#MSG_ON
 "O¿"

	)

65 
	#MSG_OFF
 "Off"

	)

66 
	#MSG_PID_P
 "PID-P"

	)

67 
	#MSG_PID_I
 "PID-I"

	)

68 
	#MSG_PID_D
 "PID-D"

	)

69 
	#MSG_PID_C
 "PID-C"

	)

70 
	#MSG_ACC
 "Ac˚l"

	)

71 
	#MSG_VXY_JERK
 "Vxy-jîk"

	)

72 
	#MSG_VZ_JERK
 "Vz-jîk"

	)

73 
	#MSG_VE_JERK
 "Ve-jîk"

	)

74 
	#MSG_VMAX
 "Vmax"

	)

75 
	#MSG_X
 "x"

	)

76 
	#MSG_Y
 "y"

	)

77 
	#MSG_Z
 "z"

	)

78 
	#MSG_E
 "e"

	)

79 
	#MSG_VMIN
 "Vmö"

	)

80 
	#MSG_VTRAV_MIN
 "VTøv mö"

	)

81 
	#MSG_AMAX
 "Amax"

	)

82 
	#MSG_A_RETRACT
 "A-ªåa˘"

	)

83 
	#MSG_XSTEPS
 "X∑ssi/mm"

	)

84 
	#MSG_YSTEPS
 "Y∑ssi/mm"

	)

85 
	#MSG_ZSTEPS
 "Z∑ssi/mm"

	)

86 
	#MSG_ESTEPS
 "E∑ssi/mm"

	)

87 
	#MSG_TEMPERATURE
 "Tem≥øtuø"

	)

88 
	#MSG_MOTION
 "Movimíto"

	)

89 
	#MSG_CONTRAST
 "LCD c⁄åa°"

	)

90 
	#MSG_STORE_EPROM
 "SÆv®ö EEPROM"

	)

91 
	#MSG_LOAD_EPROM
 "C¨iˇ d®EEPROM"

	)

92 
	#MSG_RESTORE_FAILSAFE
 "Impo°az. deÁu…"

	)

93 
	#MSG_REFRESH
 "Aggi‹«"

	)

94 
	#MSG_WATCH
 "Gu¨da"

	)

95 
	#MSG_PREPARE
 "Pª∑ø"

	)

96 
	#MSG_TUNE
 "Ad©è"

	)

97 
	#MSG_PAUSE_PRINT
 "Pauß"

	)

98 
	#MSG_RESUME_PRINT
 "RùªndòSèm∑"

	)

99 
	#MSG_STOP_PRINT
 "Aºe°®Sèm∑"

	)

100 
	#MSG_CARD_MENU
 "SD C¨d Míu"

	)

101 
	#MSG_NO_CARD
 "NÿSD C¨d"

	)

102 
	#MSG_DWELL
 "So•ísi⁄e..."

	)

103 
	#MSG_USERWAIT
 "AâídòUã¡e..."

	)

104 
	#MSG_RESUMING
 "RùªndòSèm∑"

	)

105 
	#MSG_PRINT_ABORTED
 "Pröàab‹ãd"

	)

106 
	#MSG_NO_MOVE
 "Nessu¿Movimíto."

	)

107 
	#MSG_KILLED
 "UCCISO. "

	)

108 
	#MSG_STOPPED
 "ARRESTATO. "

	)

109 
	#MSG_CONTROL_RETRACT
 "Rôøòmm"

	)

110 
	#MSG_CONTROL_RETRACT_SWAP
 "Sˇmb. Rôøòmm"

	)

111 
	#MSG_CONTROL_RETRACTF
 "Rôøò V"

	)

112 
	#MSG_CONTROL_RETRACT_ZLIFT
 "SÆè mm"

	)

113 
	#MSG_CONTROL_RETRACT_RECOVER
 "UnRë +mm"

	)

114 
	#MSG_CONTROL_RETRACT_RECOVER_SWAP
 "Sˇmb. UnRë +mm"

	)

115 
	#MSG_CONTROL_RETRACT_RECOVERF
 "UnRë V"

	)

116 
	#MSG_AUTORETRACT
 "AutoAºëømíto"

	)

117 
	#MSG_FILAMENTCHANGE
 "Cambü fûamíto"

	)

118 
	#MSG_INIT_SDCARD
 "Iniz. SD-C¨d"

	)

119 
	#MSG_CNG_SDCARD
 "Cambü SD-C¨d"

	)

120 
	#MSG_ZPROBE_OUT
 "ZÖrobêout. bed"

	)

121 
	#MSG_POSITION_UNKNOWN
 "HomêX/Y bef‹êZ"

	)

122 
	#MSG_ZPROBE_ZOFFSET
 "Z Off£t"

	)

123 
	#MSG_BABYSTEP_X
 "Baby°ï X"

	)

124 
	#MSG_BABYSTEP_Y
 "Baby°ï Y"

	)

125 
	#MSG_BABYSTEP_Z
 "Baby°ï Z"

	)

126 
	#MSG_ENDSTOP_ABORT
 "End°›áb‹t"

	)

128 
	#MSG_RECTRACT
 "Rôøi"

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language_nl.h

8 #i‚de‡
LANGUAGE_NL_H


9 
	#LANGUAGE_NL_H


	)

11 
	#WELCOME_MSG
 
MACHINE_NAME
 " gîìd."

	)

12 
	#MSG_SD_INSERTED
 "KØπ inge°okí"

	)

13 
	#MSG_SD_REMOVED
 "KØπ vîwijdîd"

	)

14 
	#MSG_MAIN
 "Maö"

	)

15 
	#MSG_AUTOSTART
 "Auto°¨t"

	)

16 
	#MSG_DISABLE_STEPPERS
 "MŸ‹í uô"

	)

17 
	#MSG_AUTO_HOME
 "Autÿhome"

	)

18 
	#MSG_SET_HOME_OFFSETS
 "Së homêoff£ts"

	)

19 
	#MSG_SET_ORIGIN
 "NuÕu¡ in°ñÀn"

	)

20 
	#MSG_PREHEAT_PLA
 "PLA vo‹vîw¨mí"

	)

21 
	#MSG_PREHEAT_PLA0
 "PLA vo‹vîw. 0"

	)

22 
	#MSG_PREHEAT_PLA1
 "PLA vo‹vîw. 1"

	)

23 
	#MSG_PREHEAT_PLA2
 "PLA vo‹vîw. 2"

	)

24 
	#MSG_PREHEAT_PLA012
 "PLA vo‹vîw.á™"

	)

25 
	#MSG_PREHEAT_PLA_BEDONLY
 "PLA vo‹vîw. Bed"

	)

26 
	#MSG_PREHEAT_PLA_SETTINGS
 "PLA vîw. c⁄f"

	)

27 
	#MSG_PREHEAT_ABS
 "ABS vo‹vîw¨mí"

	)

28 
	#MSG_PREHEAT_ABS0
 "ABS vo‹vîw. 0"

	)

29 
	#MSG_PREHEAT_ABS1
 "ABS vo‹vîw. 1"

	)

30 
	#MSG_PREHEAT_ABS2
 "ABS vo‹vîw. 2"

	)

31 
	#MSG_PREHEAT_ABS012
 "ABS vo‹vîw.á™"

	)

32 
	#MSG_PREHEAT_ABS_BEDONLY
 "ABS vo‹vîw. Bed"

	)

33 
	#MSG_PREHEAT_ABS_SETTINGS
 "ABS vîw. c⁄f"

	)

34 
	#MSG_COOLDOWN
 "Afk€Àn"

	)

35 
	#MSG_SWITCH_PS_ON
 "Såoomá™"

	)

36 
	#MSG_SWITCH_PS_OFF
 "Såoom uô"

	)

37 
	#MSG_EXTRUDE
 "Exåude"

	)

38 
	#MSG_RETRACT
 "Rëø˘"

	)

39 
	#MSG_MOVE_AXIS
 "A†vî∂Øt£n"

	)

40 
	#MSG_MOVE_X
 "Vî∂Øt†X"

	)

41 
	#MSG_MOVE_Y
 "Vî∂Øt†Y"

	)

42 
	#MSG_MOVE_Z
 "Vî∂Øt†Z"

	)

43 
	#MSG_MOVE_E
 "Exåudî"

	)

44 
	#MSG_MOVE_E1
 "Exåudî2"

	)

45 
	#MSG_MOVE_E2
 "Exåudî3"

	)

46 
	#MSG_MOVE_01MM
 "Vî∂Øt†0.1mm"

	)

47 
	#MSG_MOVE_1MM
 "Vî∂Øt†1mm"

	)

48 
	#MSG_MOVE_10MM
 "Vî∂Øt†10mm"

	)

49 
	#MSG_SPEED
 "S√lheid"

	)

50 
	#MSG_NOZZLE
 "NozzÀ"

	)

51 
	#MSG_NOZZLE1
 "NozzÀ2"

	)

52 
	#MSG_NOZZLE2
 "NozzÀ3"

	)

53 
	#MSG_BED
 "Bed"

	)

54 
	#MSG_FAN_SPEED
 "F™ s√lheid"

	)

55 
	#MSG_FLOW
 "Flow"

	)

56 
	#MSG_FLOW0
 "Flow 0"

	)

57 
	#MSG_FLOW1
 "Flow 1"

	)

58 
	#MSG_FLOW2
 "Flow 2"

	)

59 
	#MSG_CONTROL
 "C⁄åﬁ"

	)

60 
	#MSG_MIN
 " \002 Mö"

	)

61 
	#MSG_MAX
 " \002 Max"

	)

62 
	#MSG_FACTOR
 " \002 Fa˘"

	)

63 
	#MSG_AUTOTEMP
 "AutŸemp"

	)

64 
	#MSG_ON
 "A™ "

	)

65 
	#MSG_OFF
 "Uô"

	)

66 
	#MSG_PID_P
 "PID-P"

	)

67 
	#MSG_PID_I
 "PID-I"

	)

68 
	#MSG_PID_D
 "PID-D"

	)

69 
	#MSG_PID_C
 "PID-C"

	)

70 
	#MSG_ACC
 "Vî¢"

	)

71 
	#MSG_VXY_JERK
 "Vxy-jîk"

	)

72 
	#MSG_VZ_JERK
 "Vz-jîk"

	)

73 
	#MSG_VE_JERK
 "Ve-jîk"

	)

74 
	#MSG_VMAX
 "Vmax "

	)

75 
	#MSG_X
 "x"

	)

76 
	#MSG_Y
 "y"

	)

77 
	#MSG_Z
 "z"

	)

78 
	#MSG_E
 "e"

	)

79 
	#MSG_VMIN
 "Vmö"

	)

80 
	#MSG_VTRAV_MIN
 "VTøv mö"

	)

81 
	#MSG_AMAX
 "Amax "

	)

82 
	#MSG_A_RETRACT
 "A-ªåa˘"

	)

83 
	#MSG_XSTEPS
 "X°ïs/mm"

	)

84 
	#MSG_YSTEPS
 "Y°ïs/mm"

	)

85 
	#MSG_ZSTEPS
 "Z°ïs/mm"

	)

86 
	#MSG_ESTEPS
 "E°ïs/mm"

	)

87 
	#MSG_TEMPERATURE
 "Tem≥øtuur"

	)

88 
	#MSG_MOTION
 "Bewegög"

	)

89 
	#MSG_CONTRAST
 "LCD c⁄åa°"

	)

90 
	#MSG_STORE_EPROM
 "Geheugí op¶Øn"

	)

91 
	#MSG_LOAD_EPROM
 "GeheugíÜadí"

	)

92 
	#MSG_RESTORE_FAILSAFE
 "Nood°›Ñe£t"

	)

93 
	#MSG_REFRESH
 "Vîvîs"

	)

94 
	#MSG_WATCH
 "Infÿschîm"

	)

95 
	#MSG_PREPARE
 "Vo‹bîeidí"

	)

96 
	#MSG_TUNE
 "Af°ñÀn"

	)

97 
	#MSG_PAUSE_PRINT
 "Pröà∑uzîí"

	)

98 
	#MSG_RESUME_PRINT
 "Pröàhîv©ãn"

	)

99 
	#MSG_STOP_PRINT
 "Pröà°›≥n"

	)

100 
	#MSG_CARD_MENU
 "Pröàv™ SD"

	)

101 
	#MSG_NO_CARD
 "Gì¿SD kØπ"

	)

102 
	#MSG_DWELL
 "Sœ≥n..."

	)

103 
	#MSG_USERWAIT
 "Wachãn..."

	)

104 
	#MSG_RESUMING
 "Pröàhîv©ãn"

	)

105 
	#MSG_PRINT_ABORTED
 "Pröàab‹ãd"

	)

106 
	#MSG_NO_MOVE
 "Gì¿bewegög."

	)

107 
	#MSG_KILLED
 "AFGEBROKEN. "

	)

108 
	#MSG_STOPPED
 "GESTOPT. "

	)

109 
	#MSG_CONTROL_RETRACT
 "Rëø˘ mm"

	)

110 
	#MSG_CONTROL_RETRACT_SWAP
 "Ruû Rëø˘ mm"

	)

111 
	#MSG_CONTROL_RETRACTF
 "Rëø˘ F"

	)

112 
	#MSG_CONTROL_RETRACT_ZLIFT
 "H› mm"

	)

113 
	#MSG_CONTROL_RETRACT_RECOVER
 "UnRë +mm"

	)

114 
	#MSG_CONTROL_RETRACT_RECOVER_SWAP
 "Ruû UnRë +mm"

	)

115 
	#MSG_CONTROL_RETRACT_RECOVERF
 "UnRë F"

	)

116 
	#MSG_AUTORETRACT
 "AutoRër."

	)

117 
	#MSG_FILAMENTCHANGE
 "Vîv. Fûamít"

	)

118 
	#MSG_INIT_SDCARD
 "Inô. SD kØπ"

	)

119 
	#MSG_CNG_SDCARD
 "Vîv. SD c¨d"

	)

120 
	#MSG_ZPROBE_OUT
 "ZÖrobêuô. bed"

	)

121 
	#MSG_POSITION_UNKNOWN
 "HomêX/Y vo‹ Z"

	)

122 
	#MSG_ZPROBE_ZOFFSET
 "Z Off£t"

	)

123 
	#MSG_BABYSTEP_X
 "Baby°≠ X"

	)

124 
	#MSG_BABYSTEP_Y
 "Baby°≠ Y"

	)

125 
	#MSG_BABYSTEP_Z
 "Baby°≠ Z"

	)

126 
	#MSG_ENDSTOP_ABORT
 "End°›áfbr."

	)

128 
	#MSG_RECTRACT
 "Tîugåekkí"

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language_pl.h

8 #i‚de‡
LANGUAGE_PL_H


9 
	#LANGUAGE_PL_H


	)

11 
	#WELCOME_MSG
 
MACHINE_NAME
 " gŸowy."

	)

12 
	#MSG_SD_INSERTED
 "K¨è wloz⁄a"

	)

13 
	#MSG_SD_REMOVED
 "K¨è usunõè"

	)

14 
	#MSG_MAIN
 "Míu glow√"

	)

15 
	#MSG_AUTOSTART
 "Auto°¨t"

	)

16 
	#MSG_DISABLE_STEPPERS
 "Wyœcz sûniki"

	)

17 
	#MSG_AUTO_HOME
 "Auto.Öoz. zîowa"

	)

18 
	#MSG_SET_HOME_OFFSETS
 "Së homêoff£ts"

	)

19 
	#MSG_SET_ORIGIN
 "U°awÖunkàzîo"

	)

20 
	#MSG_PREHEAT_PLA
 "Rozgrzej PLA"

	)

21 
	#MSG_PREHEAT_PLA0
 "Rozgrzej PLA 1"

	)

22 
	#MSG_PREHEAT_PLA1
 "Rozgrzej PLA 2"

	)

23 
	#MSG_PREHEAT_PLA2
 "Rozgrzej PLA 3"

	)

24 
	#MSG_PREHEAT_PLA012
 "Roz. PLA Wszy°ko"

	)

25 
	#MSG_PREHEAT_PLA_BEDONLY
 "Rozgrzej PLA Loze"

	)

26 
	#MSG_PREHEAT_PLA_SETTINGS
 "U°aw.Ñozg. PLA"

	)

27 
	#MSG_PREHEAT_ABS
 "Rozgrzej ABS"

	)

28 
	#MSG_PREHEAT_ABS0
 "Rozgrzej ABS 1"

	)

29 
	#MSG_PREHEAT_ABS1
 "Rozgrzej ABS 2"

	)

30 
	#MSG_PREHEAT_ABS2
 "Rozgrzej ABS 3"

	)

31 
	#MSG_PREHEAT_ABS012
 "Roz. ABS Wszy°ko"

	)

32 
	#MSG_PREHEAT_ABS_BEDONLY
 "Rozgrzej ABS Loze"

	)

33 
	#MSG_PREHEAT_ABS_SETTINGS
 "U°aw.Ñozg. ABS"

	)

34 
	#MSG_COOLDOWN
 "Chlodzíõ"

	)

35 
	#MSG_SWITCH_PS_ON
 "Wœcz zasûacz"

	)

36 
	#MSG_SWITCH_PS_OFF
 "Wyœcz zasûacz"

	)

37 
	#MSG_EXTRUDE
 "Ek°ruzja"

	)

38 
	#MSG_RETRACT
 "CoÁnõ"

	)

39 
	#MSG_MOVE_AXIS
 "Ruch osi"

	)

40 
	#MSG_MOVE_X
 "Przesu¿w X"

	)

41 
	#MSG_MOVE_Y
 "Przesu¿w Y"

	)

42 
	#MSG_MOVE_Z
 "Przesu¿w Z"

	)

43 
	#MSG_MOVE_E
 "Ek°ruzj®(o†E)"

	)

44 
	#MSG_MOVE_E1
 "Exåudî2"

	)

45 
	#MSG_MOVE_E2
 "Exåudî3"

	)

46 
	#MSG_MOVE_01MM
 "Przesuwaj cÿ.1mm"

	)

47 
	#MSG_MOVE_1MM
 "Przesuwaj cÿ1mm"

	)

48 
	#MSG_MOVE_10MM
 "Przesuwaj cÿ10mm"

	)

49 
	#MSG_SPEED
 "Pªdkosc"

	)

50 
	#MSG_NOZZLE
 "Dysza"

	)

51 
	#MSG_NOZZLE1
 "Dysz®2"

	)

52 
	#MSG_NOZZLE2
 "Dysz®3"

	)

53 
	#MSG_BED
 "Loze"

	)

54 
	#MSG_FAN_SPEED
 "ObrŸy wüåaka"

	)

55 
	#MSG_FLOW
 "Przïlyw"

	)

56 
	#MSG_FLOW0
 "Przïlyw 0"

	)

57 
	#MSG_FLOW1
 "Przïlyw 1"

	)

58 
	#MSG_FLOW2
 "Przïlyw 2"

	)

59 
	#MSG_CONTROL
 "U°awõnü"

	)

60 
	#MSG_MIN
 " \002 Mö"

	)

61 
	#MSG_MAX
 " \002 Max"

	)

62 
	#MSG_FACTOR
 " \002 Mnoznik"

	)

63 
	#MSG_AUTOTEMP
 "Auto.Åem≥øtuø"

	)

64 
	#MSG_ON
 "Wl. "

	)

65 
	#MSG_OFF
 "Wyl."

	)

66 
	#MSG_PID_P
 "PID-P"

	)

67 
	#MSG_PID_I
 "PID-I"

	)

68 
	#MSG_PID_D
 "PID-D"

	)

69 
	#MSG_PID_C
 "PID-C"

	)

70 
	#MSG_ACC
 "Przy•õszíõ"

	)

71 
	#MSG_VXY_JERK
 "Zryw Vxy"

	)

72 
	#MSG_VZ_JERK
 "Zryw Vz"

	)

73 
	#MSG_VE_JERK
 "Zryw Ve"

	)

74 
	#MSG_VMAX
 "Vmax"

	)

75 
	#MSG_X
 "x"

	)

76 
	#MSG_Y
 "y"

	)

77 
	#MSG_Z
 "z"

	)

78 
	#MSG_E
 "e"

	)

79 
	#MSG_VMIN
 "Vmö"

	)

80 
	#MSG_VTRAV_MIN
 "Vskok mö"

	)

81 
	#MSG_AMAX
 "Amax"

	)

82 
	#MSG_A_RETRACT
 "A-wycoÁnõ"

	)

83 
	#MSG_XSTEPS
 "krokiX/mm"

	)

84 
	#MSG_YSTEPS
 "krokiY/mm"

	)

85 
	#MSG_ZSTEPS
 "krokiZ/mm"

	)

86 
	#MSG_ESTEPS
 "krokiE/mm"

	)

87 
	#MSG_TEMPERATURE
 "Tem≥øtuø"

	)

88 
	#MSG_MOTION
 "Ruch"

	)

89 
	#MSG_CONTRAST
 "K⁄åa° LCD"

	)

90 
	#MSG_STORE_EPROM
 "Z≠isz wÖamõci"

	)

91 
	#MSG_LOAD_EPROM
 "Wczyèj zÖamõci"

	)

92 
	#MSG_RESTORE_FAILSAFE
 "U°aw. fabrycz√"

	)

93 
	#MSG_REFRESH
 "\004Odswõz"

	)

94 
	#MSG_WATCH
 "Ekø¿glowny"

	)

95 
	#MSG_PREPARE
 "PrzygŸuj"

	)

96 
	#MSG_TUNE
 "Såojíõ"

	)

97 
	#MSG_PAUSE_PRINT
 "Pauza"

	)

98 
	#MSG_RESUME_PRINT
 "Wznowõnõ"

	)

99 
	#MSG_STOP_PRINT
 "St›"

	)

100 
	#MSG_CARD_MENU
 "Míu k¨ty SD"

	)

101 
	#MSG_NO_CARD
 "Bøk k¨ty"

	)

102 
	#MSG_DWELL
 "U•ij..."

	)

103 
	#MSG_USERWAIT
 "Oczekiw™õ..."

	)

104 
	#MSG_RESUMING
 "Wz«wünõ druku"

	)

105 
	#MSG_PRINT_ABORTED
 "Pröàab‹ãd"

	)

106 
	#MSG_NO_MOVE
 "BøkÑuchu"

	)

107 
	#MSG_KILLED
 "Ubôy. "

	)

108 
	#MSG_STOPPED
 "Z©rzym™y. "

	)

109 
	#MSG_CONTROL_RETRACT
 "WycoÁj mm"

	)

110 
	#MSG_CONTROL_RETRACT_SWAP
 "Z Wycof. mm"

	)

111 
	#MSG_CONTROL_RETRACTF
 "WycoÁj V"

	)

112 
	#MSG_CONTROL_RETRACT_ZLIFT
 "Skok Z mm:"

	)

113 
	#MSG_CONTROL_RETRACT_RECOVER
 "Cof. wycof. +mm"

	)

114 
	#MSG_CONTROL_RETRACT_RECOVER_SWAP
 "Z Cof. wyc. +mm"

	)

115 
	#MSG_CONTROL_RETRACT_RECOVERF
 "Cof. wycof. V"

	)

116 
	#MSG_AUTORETRACT
 "Auto. wycoÁnõ"

	)

117 
	#MSG_FILAMENTCHANGE
 "Zmõ¿fûamít"

	)

118 
	#MSG_INIT_SDCARD
 "InicjÆ. k¨ty SD"

	)

119 
	#MSG_CNG_SDCARD
 "Zmü« k¨ty SD"

	)

120 
	#MSG_ZPROBE_OUT
 "S⁄d®Z z®lozem"

	)

121 
	#MSG_POSITION_UNKNOWN
 "Wro¯w XYÖrzed Z"

	)

122 
	#MSG_ZPROBE_ZOFFSET
 "Off£àZ"

	)

123 
	#MSG_BABYSTEP_X
 "Baby°ï X"

	)

124 
	#MSG_BABYSTEP_Y
 "Baby°ï Y"

	)

125 
	#MSG_BABYSTEP_Z
 "Baby°ï Z"

	)

126 
	#MSG_ENDSTOP_ABORT
 "Bœd wyl. kønc."

	)

128 
	#MSG_RECTRACT
 "WycoÁnõ"

	)

129 
	#MSG_STEPPER_RELEASED
 "Zwﬁni⁄y."

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language_pt.h

8 #i‚de‡
LANGUAGE_PT_H


9 
	#LANGUAGE_PT_H


	)

11 
	#WELCOME_MSG
 
MACHINE_NAME
 "Ör⁄to."

	)

12 
	#MSG_SD_INSERTED
 "C¨èÿö£rido"

	)

13 
	#MSG_SD_REMOVED
 "C¨èÿªmovido"

	)

14 
	#MSG_MAIN
 " MíuÖröcùÆ \003"

	)

15 
	#MSG_AUTOSTART
 "Auto°¨t"

	)

16 
	#MSG_DISABLE_STEPPERS
 " A∑g¨ mŸ‹es"

	)

17 
	#MSG_AUTO_HOME
 "I∏∑ø origí"

	)

18 
	#MSG_SET_HOME_OFFSETS
 "Së homêoff£ts"

	)

19 
	#MSG_SET_ORIGIN
 "E°abñe˚∏‹ig."

	)

20 
	#MSG_PREHEAT_PLA
 "Pª-aque˚∏PLA"

	)

21 
	#MSG_PREHEAT_PLA0
 "Öª-aque˚∏PLA 1"

	)

22 
	#MSG_PREHEAT_PLA1
 "Öª-aque˚∏PLA 2"

	)

23 
	#MSG_PREHEAT_PLA2
 "Öª-aque˚∏PLA 3"

	)

24 
	#MSG_PREHEAT_PLA012
 "Öª-aq. PLA Tudo"

	)

25 
	#MSG_PREHEAT_PLA_BEDONLY
 "Öª-aq. PLA \002Ba£"

	)

26 
	#MSG_PREHEAT_PLA_SETTINGS
 "PLA sëtög"

	)

27 
	#MSG_PREHEAT_ABS
 "Pª-aque˚∏ABS"

	)

28 
	#MSG_PREHEAT_ABS0
 "Öª-aque˚∏ABS 1"

	)

29 
	#MSG_PREHEAT_ABS1
 "Öª-aque˚∏ABS 2"

	)

30 
	#MSG_PREHEAT_ABS2
 "Öª-aque˚∏ABS 3"

	)

31 
	#MSG_PREHEAT_ABS012
 "Öª-aq. ABS Tudo"

	)

32 
	#MSG_PREHEAT_ABS_BEDONLY
 "Öª-aq. ABS \002Ba£"

	)

33 
	#MSG_PREHEAT_ABS_SETTINGS
 "ABS sëtög"

	)

34 
	#MSG_COOLDOWN
 "Es‰ür"

	)

35 
	#MSG_SWITCH_PS_ON
 "Swôch Powî On"

	)

36 
	#MSG_SWITCH_PS_OFF
 "Swôch Powî Off"

	)

37 
	#MSG_EXTRUDE
 "Exåud¨"

	)

38 
	#MSG_RETRACT
 "Rëøú"

	)

39 
	#MSG_MOVE_AXIS
 "MovîÉixÿ \x7E"

	)

40 
	#MSG_MOVE_X
 "MovêX"

	)

41 
	#MSG_MOVE_Y
 "MovêY"

	)

42 
	#MSG_MOVE_Z
 "MovêZ"

	)

43 
	#MSG_MOVE_E
 "Exåudî"

	)

44 
	#MSG_MOVE_E1
 "Exåudî2"

	)

45 
	#MSG_MOVE_E2
 "Exåudî3"

	)

46 
	#MSG_MOVE_01MM
 "Movê0.1mm"

	)

47 
	#MSG_MOVE_1MM
 "Movê1mm"

	)

48 
	#MSG_MOVE_10MM
 "Movê10mm"

	)

49 
	#MSG_SPEED
 "Vñocidade:"

	)

50 
	#MSG_NOZZLE
 "\002NozzÀ:"

	)

51 
	#MSG_NOZZLE1
 "\002NozzÀ2:"

	)

52 
	#MSG_NOZZLE2
 "\002NozzÀ3:"

	)

53 
	#MSG_BED
 "\002Ba£:"

	)

54 
	#MSG_FAN_SPEED
 "Vñocidadêvíto."

	)

55 
	#MSG_FLOW
 "Fluxo:"

	)

56 
	#MSG_FLOW0
 "Fluxo0:"

	)

57 
	#MSG_FLOW1
 "Fluxo1:"

	)

58 
	#MSG_FLOW2
 "Fluxo2:"

	)

59 
	#MSG_CONTROL
 "C⁄åﬁê\003"

	)

60 
	#MSG_MIN
 "\002 Mö:"

	)

61 
	#MSG_MAX
 "\002 Max:"

	)

62 
	#MSG_FACTOR
 "\002 Fa˘:"

	)

63 
	#MSG_AUTOTEMP
 "AutŸemp:"

	)

64 
	#MSG_ON
 "O¿"

	)

65 
	#MSG_OFF
 "Off"

	)

66 
	#MSG_PID_P
 "PID-P: "

	)

67 
	#MSG_PID_I
 "PID-I: "

	)

68 
	#MSG_PID_D
 "PID-D: "

	)

69 
	#MSG_PID_C
 "PID-C: "

	)

70 
	#MSG_ACC
 "Acc:"

	)

71 
	#MSG_VXY_JERK
 "Vxy-jîk: "

	)

72 
	#MSG_VZ_JERK
 "Vz-jîk"

	)

73 
	#MSG_VE_JERK
 "Ve-jîk"

	)

74 
	#MSG_VMAX
 " Vmax "

	)

75 
	#MSG_X
 "x:"

	)

76 
	#MSG_Y
 "y:"

	)

77 
	#MSG_Z
 "z:"

	)

78 
	#MSG_E
 "e:"

	)

79 
	#MSG_VMIN
 "Vmö:"

	)

80 
	#MSG_VTRAV_MIN
 "VTøv mö:"

	)

81 
	#MSG_AMAX
 "Amax "

	)

82 
	#MSG_A_RETRACT
 "A-ªåa˘:"

	)

83 
	#MSG_XSTEPS
 "X∑sso/mm:"

	)

84 
	#MSG_YSTEPS
 "Y∑sso/mm:"

	)

85 
	#MSG_ZSTEPS
 "Z∑sso/mm:"

	)

86 
	#MSG_ESTEPS
 "E∑sso/mm:"

	)

87 
	#MSG_TEMPERATURE
 "Tem≥øtuø"

	)

88 
	#MSG_MOTION
 "Movimíto"

	)

89 
	#MSG_CONTRAST
 "C⁄åa°"

	)

90 
	#MSG_STORE_EPROM
 "Gu¨d¨ mem‹ü"

	)

91 
	#MSG_LOAD_EPROM
 "C¨ªg¨ mem‹ü"

	)

92 
	#MSG_RESTORE_FAILSAFE
 "Re°. dêemîgí."

	)

93 
	#MSG_REFRESH
 "\004Reˇºeg¨"

	)

94 
	#MSG_WATCH
 "M⁄ô‹¨ \003"

	)

95 
	#MSG_PREPARE
 "Pª∑ø∏\x7E"

	)

96 
	#MSG_TUNE
 "Tu√ \x7E"

	)

97 
	#MSG_PAUSE_PRINT
 "Pauß∏im¥esßo"

	)

98 
	#MSG_RESUME_PRINT
 "Resumú im¥esßo"

	)

99 
	#MSG_STOP_PRINT
 "P¨¨ im¥esßo"

	)

100 
	#MSG_CARD_MENU
 "Míu c¨èÿSD"

	)

101 
	#MSG_NO_CARD
 "Sem c¨èÿSD"

	)

102 
	#MSG_DWELL
 "Rïouso..."

	)

103 
	#MSG_USERWAIT
 "E•î™dÿ‹dem"

	)

104 
	#MSG_RESUMING
 "ResumögÖröt"

	)

105 
	#MSG_PRINT_ABORTED
 "Pröàab‹ãd"

	)

106 
	#MSG_NO_MOVE
 "Sem movimíto"

	)

107 
	#MSG_KILLED
 "PARADA DE EMERG."

	)

108 
	#MSG_STOPPED
 "PARADA. "

	)

109 
	#MSG_CONTROL_RETRACT
 " Rëøú mm:"

	)

110 
	#MSG_CONTROL_RETRACT_SWAP
 "Troˇ Rëøú mm:"

	)

111 
	#MSG_CONTROL_RETRACTF
 " Rëøú V:"

	)

112 
	#MSG_CONTROL_RETRACT_ZLIFT
 " Lev™è∏mm:"

	)

113 
	#MSG_CONTROL_RETRACT_RECOVER
 " DesRë +mm:"

	)

114 
	#MSG_CONTROL_RETRACT_RECOVER_SWAP
 "Troˇ DesRë +mm:"

	)

115 
	#MSG_CONTROL_RETRACT_RECOVERF
 " DesRë V:"

	)

116 
	#MSG_AUTORETRACT
 " AutoRër.:"

	)

117 
	#MSG_FILAMENTCHANGE
 "Ch™gêfûamít"

	)

118 
	#MSG_INIT_SDCARD
 "Inô. SD-C¨d"

	)

119 
	#MSG_CNG_SDCARD
 "Ch™gêSD-C¨d"

	)

120 
	#MSG_ZPROBE_OUT
 "S⁄. f‹®d®meß"

	)

121 
	#MSG_POSITION_UNKNOWN
 "XYá¡e†dêZ"

	)

122 
	#MSG_ZPROBE_ZOFFSET
 "Z Off£t"

	)

123 
	#MSG_BABYSTEP_X
 "Baby°ï X"

	)

124 
	#MSG_BABYSTEP_Y
 "Baby°ï Y"

	)

125 
	#MSG_BABYSTEP_Z
 "Baby°ï Z"

	)

126 
	#MSG_ENDSTOP_ABORT
 "End°›áb‹t"

	)

128 
	#MSG_RECTRACT
 "Rëøú"

	)

129 
	#MSG_MAIN_WIDE
 "Míu PröcùÆ \003"

	)

130 
	#MSG_PREPARE_ALT
 "Pª∑ø∏\003"

	)

131 
	#MSG_CONTROL_ARROW
 "C⁄åﬁê\x7E"

	)

132 
	#MSG_RETRACT_ARROW
 "Rëøú \x7E"

	)

133 
	#MSG_STEPPER_RELEASED
 "L™ˇdo."

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language_ru.h

8 #i‚de‡
LANGUAGE_RU_H


9 
	#LANGUAGE_RU_H


	)

11 
	#WELCOME_MSG
 
MACHINE_NAME
 "–ì–æ—Ç–æ–≤."

	)

12 
	#MSG_SD_INSERTED
 "–ö–∞—Ä—Ç–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞"

	)

13 
	#MSG_SD_REMOVED
 "–ö–∞—Ä—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∞"

	)

14 
	#MSG_MAIN
 "–ú–µ–Ω—é \003"

	)

15 
	#MSG_AUTOSTART
 "–ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç"

	)

16 
	#MSG_DISABLE_STEPPERS
 "–í—ã–∫–ª. –¥–≤–∏–≥–∞—Ç–µ–ª–∏"

	)

17 
	#MSG_AUTO_HOME
 "–ü–∞—Ä–∫–æ–≤–∫–∞"

	)

18 
	#MSG_SET_HOME_OFFSETS
 "Së homêoff£ts"

	)

19 
	#MSG_SET_ORIGIN
 "–ó–∞–ø–æ–º–Ω–∏—Ç—å –Ω–æ–ª—å"

	)

20 
	#MSG_PREHEAT_PLA
 "–ü—Ä–µ–¥–Ω–∞–≥—Ä–µ–≤ PLA"

	)

21 
	#MSG_PREHEAT_PLA0
 "–ü—Ä–µ–¥–Ω–∞–≥—Ä–µ–≤ PLA0"

	)

22 
	#MSG_PREHEAT_PLA1
 "–ü—Ä–µ–¥–Ω–∞–≥—Ä–µ–≤ PLA1"

	)

23 
	#MSG_PREHEAT_PLA2
 "–ü—Ä–µ–¥–Ω–∞–≥—Ä–µ–≤ PLA2"

	)

24 
	#MSG_PREHEAT_PLA012
 "–ü—Ä–µ–¥–Ω–∞–≥. PLA –≤—Å–µ"

	)

25 
	#MSG_PREHEAT_PLA_BEDONLY
 "–ü—Ä–µ–¥. PLA –ö—Ä–æ–≤–∞—Ç—å"

	)

26 
	#MSG_PREHEAT_PLA_SETTINGS
 "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ PLA"

	)

27 
	#MSG_PREHEAT_ABS
 "–ü—Ä–µ–¥–Ω–∞–≥—Ä–µ–≤ ABS"

	)

28 
	#MSG_PREHEAT_ABS0
 "–ü—Ä–µ–¥–Ω–∞–≥—Ä–µ–≤ ABS0"

	)

29 
	#MSG_PREHEAT_ABS1
 "–ü—Ä–µ–¥–Ω–∞–≥—Ä–µ–≤ ABS1"

	)

30 
	#MSG_PREHEAT_ABS2
 "–ü—Ä–µ–¥–Ω–∞–≥—Ä–µ–≤ ABS2"

	)

31 
	#MSG_PREHEAT_ABS012
 "–ü—Ä–µ–¥–Ω–∞–≥. ABS –≤—Å–µ "

	)

32 
	#MSG_PREHEAT_ABS_BEDONLY
 "–ü—Ä–µ–¥. ABS –ö—Ä–æ–≤–∞—Ç—å"

	)

33 
	#MSG_PREHEAT_ABS_SETTINGS
 "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ABS"

	)

34 
	#MSG_COOLDOWN
 "–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ"

	)

35 
	#MSG_SWITCH_PS_ON
 "Swôch Powî On"

	)

36 
	#MSG_SWITCH_PS_OFF
 "Swôch Powî Off"

	)

37 
	#MSG_EXTRUDE
 "–≠–∫—Å—Ç—Ä—É–∑–∏—è"

	)

38 
	#MSG_RETRACT
 "–û—Ç–∫–∞—Ç"

	)

39 
	#MSG_MOVE_AXIS
 "–î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –æ—Å—è–º"

	)

40 
	#MSG_MOVE_X
 "MovêX"

	)

41 
	#MSG_MOVE_Y
 "MovêY"

	)

42 
	#MSG_MOVE_Z
 "MovêZ"

	)

43 
	#MSG_MOVE_E
 "Exåudî"

	)

44 
	#MSG_MOVE_E1
 "Exåudî2"

	)

45 
	#MSG_MOVE_E2
 "Exåudî3"

	)

46 
	#MSG_MOVE_01MM
 "Movê0.1mm"

	)

47 
	#MSG_MOVE_1MM
 "Movê1mm"

	)

48 
	#MSG_MOVE_10MM
 "Movê10mm"

	)

49 
	#MSG_SPEED
 "–°–∫–æ—Ä–æ—Å—Ç—å:"

	)

50 
	#MSG_NOZZLE
 "\002 –§–∏–ª—å–µ—Ä–∞:"

	)

51 
	#MSG_NOZZLE1
 "\002 –§–∏–ª—å–µ—Ä–∞2:"

	)

52 
	#MSG_NOZZLE2
 "\002 –§–∏–ª—å–µ—Ä–∞3:"

	)

53 
	#MSG_BED
 "\002 –ö—Ä–æ–≤–∞—Ç—å:"

	)

54 
	#MSG_FAN_SPEED
 "–ö—É–ª–ª–µ—Ä:"

	)

55 
	#MSG_FLOW
 "–ü–æ—Ç–æ–∫:"

	)

56 
	#MSG_FLOW0
 " –ü–æ—Ç–æ–∫0:"

	)

57 
	#MSG_FLOW1
 " –ü–æ—Ç–æ–∫1:"

	)

58 
	#MSG_FLOW2
 " –ü–æ—Ç–æ–∫2:"

	)

59 
	#MSG_CONTROL
 "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ \003"

	)

60 
	#MSG_MIN
 "\002 –ú–∏–Ω–∏–º—É–º:"

	)

61 
	#MSG_MAX
 "\002 –ú–∞–∫—Å–∏–º—É–º:"

	)

62 
	#MSG_FACTOR
 "\002 –§–∞–∫—Ç–æ—Ä:"

	)

63 
	#MSG_AUTOTEMP
 "AutŸemp:"

	)

64 
	#MSG_ON
 "–í–∫–ª. "

	)

65 
	#MSG_OFF
 "–í—ã–∫–ª. "

	)

66 
	#MSG_PID_P
 "PID-P: "

	)

67 
	#MSG_PID_I
 "PID-I: "

	)

68 
	#MSG_PID_D
 "PID-D: "

	)

69 
	#MSG_PID_C
 "PID-C: "

	)

70 
	#MSG_ACC
 "Acc:"

	)

71 
	#MSG_VXY_JERK
 "Vxy-jîk: "

	)

72 
	#MSG_VZ_JERK
 "Vz-jîk"

	)

73 
	#MSG_VE_JERK
 "Ve-jîk"

	)

74 
	#MSG_VMAX
 "Vmax "

	)

75 
	#MSG_X
 "x:"

	)

76 
	#MSG_Y
 "y:"

	)

77 
	#MSG_Z
 "z:"

	)

78 
	#MSG_E
 "e:"

	)

79 
	#MSG_VMIN
 "Vmö:"

	)

80 
	#MSG_VTRAV_MIN
 "VTøv mö:"

	)

81 
	#MSG_AMAX
 "Amax "

	)

82 
	#MSG_A_RETRACT
 "A-ªåa˘:"

	)

83 
	#MSG_XSTEPS
 "X —à–∞–≥/mm:"

	)

84 
	#MSG_YSTEPS
 "Y —à–∞–≥/mm:"

	)

85 
	#MSG_ZSTEPS
 "Z —à–∞–≥/mm:"

	)

86 
	#MSG_ESTEPS
 "E —à–∞–≥/mm:"

	)

87 
	#MSG_TEMPERATURE
 "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ \x7E"

	)

88 
	#MSG_MOTION
 "–°–∫–æ—Ä–æ—Å—Ç–∏ \x7E"

	)

89 
	#MSG_CONTRAST
 "LCD c⁄åa°"

	)

90 
	#MSG_STORE_EPROM
 "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ EPROM"

	)

91 
	#MSG_LOAD_EPROM
 "–ó–∞–≥—Ä—É–∑. –∏–∑ EPROM"

	)

92 
	#MSG_RESTORE_FAILSAFE
 "–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"

	)

93 
	#MSG_REFRESH
 "\004–û–±–Ω–æ–≤–∏—Ç—å"

	)

94 
	#MSG_WATCH
 "–û–±–∑–æ—Ä \003"

	)

95 
	#MSG_PREPARE
 "–î–µ–π—Å—Ç–≤–∏—è \x7E"

	)

96 
	#MSG_TUNE
 "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ \x7E"

	)

97 
	#MSG_PAUSE_PRINT
 "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–µ—á–∞—Ç—å"

	)

98 
	#MSG_RESUME_PRINT
 "–≤–æ–∑–æ–±–Ω. –ø–µ—á–∞—Ç—å"

	)

99 
	#MSG_STOP_PRINT
 "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—á–∞—Ç—å"

	)

100 
	#MSG_CARD_MENU
 "–ú–µ–Ω—é –∫–∞—Ä—Ç—ã \x7E"

	)

101 
	#MSG_NO_CARD
 "–ù–µ—Ç –∫–∞—Ä—Ç—ã"

	)

102 
	#MSG_DWELL
 "–°–æ–Ω..."

	)

103 
	#MSG_USERWAIT
 "–û–∂–∏–¥–∞–Ω–∏–∏–µ"

	)

104 
	#MSG_RESUMING
 "ResumögÖröt"

	)

105 
	#MSG_PRINT_ABORTED
 "Pröàab‹ãd"

	)

106 
	#MSG_NO_MOVE
 "–ù–µ—Ç –¥–≤–∏–∂–µ–Ω–∏—è."

	)

107 
	#MSG_KILLED
 "–£–ë–ò–¢–û."

	)

108 
	#MSG_STOPPED
 "–û–°–¢–ê–ù–û–í–õ–ï–ù–û."

	)

109 
	#MSG_CONTROL_RETRACT
 "–û—Ç–∫–∞—Ç mm:"

	)

110 
	#MSG_CONTROL_RETRACT_SWAP
 "—Å–≤–æ–ø –û—Ç–∫–∞—Ç mm:"

	)

111 
	#MSG_CONTROL_RETRACTF
 "–û—Ç–∫–∞—Ç V:"

	)

112 
	#MSG_CONTROL_RETRACT_ZLIFT
 "–ü—Ä—ã–∂–æ–∫ mm:"

	)

113 
	#MSG_CONTROL_RETRACT_RECOVER
 "–í–æ–∑–≤—Ä–∞—Ç +mm:"

	)

114 
	#MSG_CONTROL_RETRACT_RECOVER_SWAP
 "—Å–≤–æ–ø –í–æ–∑–≤—Ä–∞—Ç +mm:"

	)

115 
	#MSG_CONTROL_RETRACT_RECOVERF
 "–í–æ–∑–≤—Ä–∞—Ç V:"

	)

116 
	#MSG_AUTORETRACT
 "–ê–≤—Ç–æ–û—Ç–∫–∞—Ç:"

	)

117 
	#MSG_FILAMENTCHANGE
 "Ch™gêfûamít"

	)

118 
	#MSG_INIT_SDCARD
 "Inô. SD-C¨d"

	)

119 
	#MSG_CNG_SDCARD
 "Ch™gêSD-C¨d"

	)

120 
	#MSG_ZPROBE_OUT
 "ZÖrobêout. bed"

	)

121 
	#MSG_POSITION_UNKNOWN
 "HomêX/Y bef‹êZ"

	)

122 
	#MSG_ZPROBE_ZOFFSET
 "Z Off£t"

	)

123 
	#MSG_BABYSTEP_X
 "Baby°ï X"

	)

124 
	#MSG_BABYSTEP_Y
 "Baby°ï Y"

	)

125 
	#MSG_BABYSTEP_Z
 "Baby°ï Z"

	)

126 
	#MSG_ENDSTOP_ABORT
 "End°›áb‹t"

	)

128 
	#MSG_RECTRACT
 "–û—Ç–∫–∞—Ç –ø–æ–¥–∞—á–∏ \x7E"

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/motion_control.cpp

22 
	~"M¨lö.h
"

23 
	~"°ï≥r.h
"

24 
	~"∂™√r.h
"

28 
	$mc_¨c
(*
posôi⁄
, *
èrgë
, *
off£t
, 
uöt8_t
 
axis_0
, uöt8_à
axis_1
,

29 
uöt8_t
 
axis_löór
, 
„ed_øã
, 
ødius
, uöt8_à
is˛ockwi£
, uöt8_à
exåudî
)

33 
˚¡î_axis0
 = 
posôi⁄
[
axis_0
] + 
off£t
[axis_0];

34 
˚¡î_axis1
 = 
posôi⁄
[
axis_1
] + 
off£t
[axis_1];

35 
löór_åavñ
 = 
èrgë
[
axis_löór
] - 
posôi⁄
[axis_linear];

36 
exåudî_åavñ
 = 
èrgë
[
E_AXIS
] - 
posôi⁄
[E_AXIS];

37 
r_axis0
 = -
off£t
[
axis_0
];

38 
r_axis1
 = -
off£t
[
axis_1
];

39 
π_axis0
 = 
èrgë
[
axis_0
] - 
˚¡î_axis0
;

40 
π_axis1
 = 
èrgë
[
axis_1
] - 
˚¡î_axis1
;

43 
™guœr_åavñ
 = 
	`©™2
(
r_axis0
*
π_axis1
-
r_axis1
*
π_axis0
,Ñ_axis0*rt_axis0+r_axis1*rt_axis1);

44 i‡(
™guœr_åavñ
 < 0Ë{ánguœr_åavñ +2*
M_PI
; }

45 i‡(
is˛ockwi£
Ë{ 
™guœr_åavñ
 -2*
M_PI
; }

49 i‡(
posôi⁄
[
axis_0
] =
èrgë
[axis_0] &&Öosôi⁄[
axis_1
] =èrgë[axis_1] && 
™guœr_åavñ
 == 0)

51 
™guœr_åavñ
 +2*
M_PI
;

55 
mûlimëîs_of_åavñ
 = 
	`hypŸ
(
™guœr_åavñ
*
ødius
, 
	`Ábs
(
löór_åavñ
));

56 i‡(
mûlimëîs_of_åavñ
 < 0.001) { ; }

57 
uöt16_t
 
£gmíts
 = 
	`Êo‹
(
mûlimëîs_of_åavñ
/
MM_PER_ARC_SEGMENT
);

58 if(
£gmíts
 == 0) segments = 1;

66 
thëa_≥r_£gmít
 = 
™guœr_åavñ
/
£gmíts
;

67 
löór_≥r_£gmít
 = 
löór_åavñ
/
£gmíts
;

68 
exåudî_≥r_£gmít
 = 
exåudî_åavñ
/
£gmíts
;

96 
cos_T
 = 1-0.5*
thëa_≥r_£gmít
*theta_per_segment;

97 
sö_T
 = 
thëa_≥r_£gmít
;

99 
¨c_èrgë
[4];

100 
sö_Ti
;

101 
cos_Ti
;

102 
r_axisi
;

103 
uöt16_t
 
i
;

104 
öt8_t
 
cou¡
 = 0;

107 
¨c_èrgë
[
axis_löór
] = 
posôi⁄
[axis_linear];

110 
¨c_èrgë
[
E_AXIS
] = 
posôi⁄
[E_AXIS];

112 
i
 = 1; i<
£gmíts
; i++) {

114 i‡(
cou¡
 < 
N_ARC_CORRECTION
) {

116 
r_axisi
 = 
r_axis0
*
sö_T
 + 
r_axis1
*
cos_T
;

117 
r_axis0
 =Ñ_axis0*
cos_T
 - 
r_axis1
*
sö_T
;

118 
r_axis1
 = 
r_axisi
;

119 
cou¡
++;

123 
cos_Ti
 = 
	`cos
(
i
*
thëa_≥r_£gmít
);

124 
sö_Ti
 = 
	`sö
(
i
*
thëa_≥r_£gmít
);

125 
r_axis0
 = -
off£t
[
axis_0
]*
cos_Ti
 + off£t[
axis_1
]*
sö_Ti
;

126 
r_axis1
 = -
off£t
[
axis_0
]*
sö_Ti
 - off£t[
axis_1
]*
cos_Ti
;

127 
cou¡
 = 0;

131 
¨c_èrgë
[
axis_0
] = 
˚¡î_axis0
 + 
r_axis0
;

132 
¨c_èrgë
[
axis_1
] = 
˚¡î_axis1
 + 
r_axis1
;

133 
¨c_èrgë
[
axis_löór
] +
löór_≥r_£gmít
;

134 
¨c_èrgë
[
E_AXIS
] +
exåudî_≥r_£gmít
;

136 
	`˛amp_to_so·w¨e_íd°›s
(
¨c_èrgë
);

137 
	`∂™_buf„r_löe
(
¨c_èrgë
[
X_AXIS
],árc_èrgë[
Y_AXIS
],árc_èrgë[
Z_AXIS
],árc_èrgë[
E_AXIS
], 
„ed_øã
, 
exåudî
);

141 
	`∂™_buf„r_löe
(
èrgë
[
X_AXIS
],Å¨gë[
Y_AXIS
],Å¨gë[
Z_AXIS
],Å¨gë[
E_AXIS
], 
„ed_øã
, 
exåudî
);

144 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/motion_control.h

22 #i‚de‡
mŸi⁄_c⁄åﬁ_h


23 
	#mŸi⁄_c⁄åﬁ_h


	)

29 
mc_¨c
(*
posôi⁄
, *
èrgë
, *
off£t
, 
axis_0
, 
axis_1
,

30 
axis_löór
, 
„ed_øã
, 
ødius
, 
is˛ockwi£
, 
uöt8_t
 
exåudî
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/pins.h

1 #i‚de‡
PINS_H


2 
	#PINS_H


	)

4 
	~"bﬂrds.h
"

6 #i‡!
MB
(5D
PRINT
)

7 
	#X_MS1_PIN
 -1

	)

8 
	#X_MS2_PIN
 -1

	)

9 
	#Y_MS1_PIN
 -1

	)

10 
	#Y_MS2_PIN
 -1

	)

11 
	#Z_MS1_PIN
 -1

	)

12 
	#Z_MS2_PIN
 -1

	)

13 
	#E0_MS1_PIN
 -1

	)

14 
	#E0_MS2_PIN
 -1

	)

15 
	#E1_MS1_PIN
 -1

	)

16 
	#E1_MS2_PIN
 -1

	)

17 
	#DIGIPOTSS_PIN
 -1

	)

25 #i‡
MB
(5D
PRINT
)

27 
	#KNOWN_BOARD
 1

	)

28 
	#AT90USB
 1286

29 

	)

30 #i‚de‡
__AVR_AT90USB1286__


31 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'Tìnsy++ 2.0' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

34 
	#LARGE_FLASH
 
åue


	)

36 
	#X_STEP_PIN
 0

	)

37 
	#X_DIR_PIN
 1

	)

38 
	#X_ENABLE_PIN
 23

	)

39 
	#X_STOP_PIN
 37

	)

41 
	#Y_STEP_PIN
 2

	)

42 
	#Y_DIR_PIN
 3

	)

43 
	#Y_ENABLE_PIN
 19

	)

44 
	#Y_STOP_PIN
 36

	)

46 
	#Z_STEP_PIN
 4

	)

47 
	#Z_DIR_PIN
 5

	)

48 
	#Z_ENABLE_PIN
 18

	)

49 
	#Z_STOP_PIN
 39

	)

51 
	#E0_STEP_PIN
 6

	)

52 
	#E0_DIR_PIN
 7

	)

53 
	#E0_ENABLE_PIN
 17

	)

55 
	#HEATER_0_PIN
 21

56 
	#HEATER_1_PIN
 -1

	)

57 
	#HEATER_2_PIN
 -1

	)

58 
	#HEATER_BED_PIN
 20

61 
	#FAN_PIN
 16

62 

	)

63 
	#TEMP_0_PIN
 1

64 
	#TEMP_BED_PIN
 0

65 

	)

66 
	#TEMP_1_PIN
 -1

	)

67 
	#TEMP_2_PIN
 -1

	)

69 
	#SDPOWER
 -1

	)

70 
	#LED_PIN
 -1

	)

71 
	#PS_ON_PIN
 -1

	)

72 
	#KILL_PIN
 -1

	)

73 
	#ALARM_PIN
 -1

	)

76 
	#SDSS
 20

	)

78 #i‚de‡
SDSUPPORT


80 
	#SCK_PIN
 9

	)

81 
	#MISO_PIN
 11

	)

82 
	#MOSI_PIN
 10

	)

88 
	#X_MS1_PIN
 25

	)

89 
	#X_MS2_PIN
 26

	)

90 
	#Y_MS1_PIN
 9

	)

91 
	#Y_MS2_PIN
 8

	)

92 
	#Z_MS1_PIN
 7

	)

93 
	#Z_MS2_PIN
 6

	)

94 
	#E0_MS1_PIN
 5

	)

95 
	#E0_MS2_PIN
 4

	)

103 #i‡
MB
(
LEAPFROG
)

104 
	#KNOWN_BOARD
 1

	)

106 #i‚de‡
__AVR_ATmega1280__


107 #i‚de‡
__AVR_ATmega2560__


108 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'ArduöÿMega' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

112 
	#X_STEP_PIN
 28

	)

113 
	#X_DIR_PIN
 63

	)

114 
	#X_ENABLE_PIN
 29

	)

115 
	#X_MIN_PIN
 47

	)

116 
	#X_MAX_PIN
 -1

117 

	)

118 
	#Y_STEP_PIN
 14

119 
	#Y_DIR_PIN
 15

120 
	#Y_ENABLE_PIN
 39

	)

121 
	#Y_MIN_PIN
 48

	)

122 
	#Y_MAX_PIN
 -1

123 

	)

124 
	#Z_STEP_PIN
 31

125 
	#Z_DIR_PIN
 32

126 
	#Z_ENABLE_PIN
 30

127 
	#Z_MIN_PIN
 49

	)

128 
	#Z_MAX_PIN
 -1

	)

130 
	#E0_STEP_PIN
 34

131 
	#E0_DIR_PIN
 35

132 
	#E0_ENABLE_PIN
 33

133 

	)

134 
	#E1_STEP_PIN
 37

135 
	#E1_DIR_PIN
 40

136 
	#E1_ENABLE_PIN
 36

137 

	)

138 
	#Y2_STEP_PIN
 37

	)

139 
	#Y2_DIR_PIN
 40

	)

140 
	#Y2_ENABLE_PIN
 36

	)

142 
	#Z2_STEP_PIN
 37

	)

143 
	#Z2_DIR_PIN
 40

	)

144 
	#Z2_ENABLE_PIN
 36

	)

146 
	#SDPOWER
 -1

	)

147 
	#SDSS
 11

	)

148 
	#SDCARDDETECT
 -1

149 
	#LED_PIN
 13

	)

150 
	#FAN_PIN
 7

	)

151 
	#PS_ON_PIN
 -1

	)

152 
	#KILL_PIN
 -1

	)

153 
	#SOL1_PIN
 16

	)

154 
	#SOL2_PIN
 17

	)

156 
	#HEATER_0_PIN
 9

	)

157 
	#HEATER_1_PIN
 8

158 
	#HEATER_2_PIN
 11

159 
	#TEMP_0_PIN
 13

160 
	#TEMP_1_PIN
 15

161 
	#TEMP_2_PIN
 -1

162 
	#HEATER_BED_PIN
 10

163 
	#TEMP_BED_PIN
 14

164 

	)

174 #i‡
MB
(99)

175 
	#KNOWN_BOARD
 1

	)

177 
	#X_STEP_PIN
 2

	)

178 
	#X_DIR_PIN
 3

	)

179 
	#X_ENABLE_PIN
 -1

	)

180 
	#X_STOP_PIN
 16

	)

182 
	#Y_STEP_PIN
 5

	)

183 
	#Y_DIR_PIN
 6

	)

184 
	#Y_ENABLE_PIN
 -1

	)

185 
	#Y_STOP_PIN
 67

	)

187 
	#Z_STEP_PIN
 62

	)

188 
	#Z_DIR_PIN
 63

	)

189 
	#Z_ENABLE_PIN
 -1

	)

190 
	#Z_STOP_PIN
 59

	)

192 
	#E0_STEP_PIN
 65

	)

193 
	#E0_DIR_PIN
 66

	)

194 
	#E0_ENABLE_PIN
 -1

	)

196 
	#SDPOWER
 -1

	)

197 
	#SDSS
 53

	)

198 
	#LED_PIN
 -1

	)

199 
	#FAN_PIN
 -1

	)

200 
	#PS_ON_PIN
 9

	)

201 
	#KILL_PIN
 -1

	)

203 
	#HEATER_0_PIN
 13

	)

204 
	#HEATER_1_PIN
 -1

	)

205 
	#HEATER_2_PIN
 -1

	)

206 
	#TEMP_0_PIN
 6

207 
	#TEMP_1_PIN
 -1

208 
	#TEMP_2_PIN
 -1

209 
	#HEATER_BED_PIN
 4

	)

210 
	#TEMP_BED_PIN
 10

	)

219 #i‡
MB
(
SETHI
)

220 
	#KNOWN_BOARD


	)

222 #i‡!
deföed
(
__AVR_ATmega644P__
Ë&& !deföed(
__AVR_ATmega644__
Ë&& !deföed(
__AVR_ATmega1284P__
)

223 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'Sëhò3D' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

227 #i‚de‡
GEN7_VERSION


228 
	#GEN7_VERSION
 12

230 

	)

232 
	#X_STEP_PIN
 19

	)

233 
	#X_DIR_PIN
 18

	)

234 
	#X_ENABLE_PIN
 24

	)

235 
	#X_STOP_PIN
 2

	)

238 
	#Y_STEP_PIN
 23

	)

239 
	#Y_DIR_PIN
 22

	)

240 
	#Y_ENABLE_PIN
 24

	)

241 
	#Y_STOP_PIN
 0

	)

244 
	#Z_STEP_PIN
 26

	)

245 
	#Z_DIR_PIN
 25

	)

246 
	#Z_ENABLE_PIN
 24

	)

247 
	#Z_MIN_PIN
 1

	)

248 
	#Z_MAX_PIN
 0

	)

251 
	#E0_STEP_PIN
 28

	)

252 
	#E0_DIR_PIN
 27

	)

253 
	#E0_ENABLE_PIN
 24

	)

255 
	#TEMP_0_PIN
 1

	)

256 
	#TEMP_1_PIN
 -1

	)

257 
	#TEMP_2_PIN
 -1

	)

258 
	#TEMP_BED_PIN
 2

	)

260 
	#HEATER_0_PIN
 4

	)

261 
	#HEATER_1_PIN
 -1

	)

262 
	#HEATER_2_PIN
 -1

	)

263 
	#HEATER_BED_PIN
 3

	)

265 
	#KILL_PIN
 -1

	)

267 
	#SDPOWER
 -1

	)

268 
	#SDSS
 -1

269 
	#LED_PIN
 -1

	)

271 #i‡(
GEN7_VERSION
 >= 13)

273 
	#FAN_PIN
 -1

	)

275 
	#FAN_PIN
 31

	)

277 
	#PS_ON_PIN
 15

	)

281 
	#BOGUS_TEMPERATURE_FAILSAFE_OVERRIDE


	)

284 
	#DEBUG_PIN
 0

	)

287 
	#TX_ENABLE_PIN
 12

	)

288 
	#RX_ENABLE_PIN
 13

	)

298 #i‡
MB
(
GEN7_13
)

299 
	#MOTHERBOARD
 
BOARD_GEN7_12


	)

300 
	#GEN7_VERSION
 13

302 

	)

303 #i‡
MB
(
GEN7_12
)

304 
	#KNOWN_BOARD


	)

306 #i‡!
deföed
(
__AVR_ATmega644P__
Ë&& !deföed(
__AVR_ATmega644__
Ë&& !deföed(
__AVR_ATmega1284P__
)

307 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'Gí7' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

311 #i‚de‡
GEN7_VERSION


312 
	#GEN7_VERSION
 12

314 

	)

316 
	#X_STEP_PIN
 19

	)

317 
	#X_DIR_PIN
 18

	)

318 
	#X_ENABLE_PIN
 24

	)

319 
	#X_STOP_PIN
 7

	)

322 
	#Y_STEP_PIN
 23

	)

323 
	#Y_DIR_PIN
 22

	)

324 
	#Y_ENABLE_PIN
 24

	)

325 
	#Y_STOP_PIN
 5

	)

328 
	#Z_STEP_PIN
 26

	)

329 
	#Z_DIR_PIN
 25

	)

330 
	#Z_ENABLE_PIN
 24

	)

331 
	#Z_MIN_PIN
 1

	)

332 
	#Z_MAX_PIN
 0

	)

335 
	#E0_STEP_PIN
 28

	)

336 
	#E0_DIR_PIN
 27

	)

337 
	#E0_ENABLE_PIN
 24

	)

339 
	#TEMP_0_PIN
 1

	)

340 
	#TEMP_1_PIN
 -1

	)

341 
	#TEMP_2_PIN
 -1

	)

342 
	#TEMP_BED_PIN
 2

	)

344 
	#HEATER_0_PIN
 4

	)

345 
	#HEATER_1_PIN
 -1

	)

346 
	#HEATER_2_PIN
 -1

	)

347 
	#HEATER_BED_PIN
 3

	)

349 
	#KILL_PIN
 -1

	)

351 
	#SDPOWER
 -1

	)

352 
	#SDSS
 -1

353 
	#LED_PIN
 -1

	)

355 #i‡(
GEN7_VERSION
 >= 13)

357 
	#FAN_PIN
 -1

	)

359 
	#FAN_PIN
 31

	)

361 
	#PS_ON_PIN
 15

	)

365 
	#BOGUS_TEMPERATURE_FAILSAFE_OVERRIDE


	)

368 
	#DEBUG_PIN
 0

	)

371 
	#TX_ENABLE_PIN
 12

	)

372 
	#RX_ENABLE_PIN
 13

	)

381 #i‡
MB
(
GEN7_14
)

382 
	#GEN7_VERSION
 14

384 

	)

385 #i‡
MB
(
GEN7_14
)

386 
	#KNOWN_BOARD


	)

388 #i‡!
deföed
(
__AVR_ATmega644P__
Ë&& !deföed(
__AVR_ATmega644__
Ë&& !deföed(
__AVR_ATmega1284P__
)

389 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'Gí7' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

393 #i‚de‡
GEN7_VERSION


394 
	#GEN7_VERSION
 14

396 

	)

398 
	#X_STEP_PIN
 29

	)

399 
	#X_DIR_PIN
 28

	)

400 
	#X_ENABLE_PIN
 25

	)

401 
	#X_STOP_PIN
 0

	)

404 
	#Y_STEP_PIN
 27

	)

405 
	#Y_DIR_PIN
 26

	)

406 
	#Y_ENABLE_PIN
 25

	)

407 
	#Y_STOP_PIN
 1

	)

410 
	#Z_STEP_PIN
 23

	)

411 
	#Z_DIR_PIN
 22

	)

412 
	#Z_ENABLE_PIN
 25

	)

413 
	#Z_STOP_PIN
 2

	)

416 
	#E0_STEP_PIN
 19

	)

417 
	#E0_DIR_PIN
 18

	)

418 
	#E0_ENABLE_PIN
 25

	)

420 
	#TEMP_0_PIN
 1

	)

421 
	#TEMP_1_PIN
 -1

	)

422 
	#TEMP_2_PIN
 -1

	)

423 
	#TEMP_BED_PIN
 0

	)

425 
	#HEATER_0_PIN
 4

	)

426 
	#HEATER_1_PIN
 -1

	)

427 
	#HEATER_2_PIN
 -1

	)

428 
	#HEATER_BED_PIN
 3

	)

430 
	#KILL_PIN
 -1

	)

432 
	#SDPOWER
 -1

	)

433 
	#SDSS
 -1

434 
	#LED_PIN
 -1

	)

436 
	#FAN_PIN
 -1

	)

438 
	#PS_ON_PIN
 15

	)

441 
	#DEBUG_PIN
 0

	)

444 
	#TX_ENABLE_PIN
 12

	)

445 
	#RX_ENABLE_PIN
 13

	)

455 #i‡
MB
(
GEN7_CUSTOM
)

456 
	#KNOWN_BOARD


	)

458 #i‡!
deföed
(
__AVR_ATmega644P__
Ë&& !deföed(
__AVR_ATmega644__
Ë&& !deföed(
__AVR_ATmega1284P__
)

459 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'Gí7' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

463 
	#X_STEP_PIN
 21

464 
	#X_DIR_PIN
 20

465 
	#X_ENABLE_PIN
 24

	)

466 
	#X_STOP_PIN
 0

	)

469 
	#Y_STEP_PIN
 23

	)

470 
	#Y_DIR_PIN
 22

	)

471 
	#Y_ENABLE_PIN
 24

	)

472 
	#Y_STOP_PIN
 1

	)

475 
	#Z_STEP_PIN
 26

	)

476 
	#Z_DIR_PIN
 25

	)

477 
	#Z_ENABLE_PIN
 24

	)

478 
	#Z_STOP_PIN
 2

	)

481 
	#E0_STEP_PIN
 28

	)

482 
	#E0_DIR_PIN
 27

	)

483 
	#E0_ENABLE_PIN
 24

	)

485 
	#TEMP_0_PIN
 2

	)

486 
	#TEMP_1_PIN
 -1

	)

487 
	#TEMP_2_PIN
 -1

	)

488 
	#TEMP_BED_PIN
 1

489 

	)

490 
	#HEATER_0_PIN
 4

	)

491 
	#HEATER_1_PIN
 -1

	)

492 
	#HEATER_2_PIN
 -1

	)

493 
	#HEATER_BED_PIN
 3

494 

	)

495 
	#SDPOWER
 -1

	)

496 
	#SDSS
 31

497 
	#LED_PIN
 -1

	)

499 
	#FAN_PIN
 -1

	)

500 
	#PS_ON_PIN
 19

	)

503 
	#DEBUG_PIN
 -1

	)

509 
	#BEEPER
 -1

	)

510 
	#SDCARDDETECT
 -1

	)

511 
	#SUICIDE_PIN
 -1

512 

	)

513 
	#KILL_PIN
 -1

	)

515 
	#LCD_PINS_RS
 18

	)

516 
	#LCD_PINS_ENABLE
 17

	)

517 
	#LCD_PINS_D4
 16

	)

518 
	#LCD_PINS_D5
 15

	)

519 
	#LCD_PINS_D6
 13

	)

520 
	#LCD_PINS_D7
 14

	)

523 
	#BTN_EN1
 11

	)

524 
	#BTN_EN2
 10

	)

525 
	#BTN_ENC
 12

526 

	)

533 #i‡
IS_RAMPS
 || 
MB
(3D
RAG
Ë|| MB(
AZTEEG_X3
Ë|| MB(
AZTEEG_X3_PRO
)

534 
	#KNOWN_BOARD
 1

	)

537 #i‚de‡
__AVR_ATmega1280__


538 #i‚de‡
__AVR_ATmega2560__


539 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'ArduöÿMega' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

549 #i‡(
IS_RAMPS
 && !
MB
(
RAMPS_OLD
)Ë|| MB(3D
RAG
Ë|| MB(
AZTEEG_X3
Ë|| MB(
AZTEEG_X3_PRO
)

551 
	#LARGE_FLASH
 
åue


	)

553 #i‡
MB
(3D
RAG
)

554 
	#X_STEP_PIN
 54

	)

555 
	#X_DIR_PIN
 55

	)

556 
	#X_ENABLE_PIN
 38

	)

557 
	#X_MIN_PIN
 3

	)

558 
	#X_MAX_PIN
 -1

559 

	)

560 
	#Y_STEP_PIN
 60

	)

561 
	#Y_DIR_PIN
 61

	)

562 
	#Y_ENABLE_PIN
 56

	)

563 
	#Y_MIN_PIN
 14

	)

564 
	#Y_MAX_PIN
 -1

565 

	)

566 
	#Z_STEP_PIN
 46

	)

567 
	#Z_DIR_PIN
 48

	)

568 
	#Z_ENABLE_PIN
 63

	)

569 
	#Z_MIN_PIN
 18

	)

570 
	#Z_MAX_PIN
 -1

	)

572 
	#Y2_STEP_PIN
 36

	)

573 
	#Y2_DIR_PIN
 34

	)

574 
	#Y2_ENABLE_PIN
 30

	)

576 
	#Z2_STEP_PIN
 36

	)

577 
	#Z2_DIR_PIN
 34

	)

578 
	#Z2_ENABLE_PIN
 30

	)

580 
	#E0_STEP_PIN
 26

	)

581 
	#E0_DIR_PIN
 28

	)

582 
	#E0_ENABLE_PIN
 24

	)

584 
	#E1_STEP_PIN
 36

	)

585 
	#E1_DIR_PIN
 34

	)

586 
	#E1_ENABLE_PIN
 30

	)

588 
	#SDPOWER
 -1

	)

589 
	#SDSS
 25

590 
	#LED_PIN
 13

	)

592 
	#BEEPER
 33

	)

596 
	#X_STEP_PIN
 54

	)

597 
	#X_DIR_PIN
 55

	)

598 
	#X_ENABLE_PIN
 38

	)

599 
	#X_MIN_PIN
 -1

600 
	#X_MAX_PIN
 2

	)

602 
	#Y_STEP_PIN
 60

	)

603 
	#Y_DIR_PIN
 61

	)

604 
	#Y_ENABLE_PIN
 56

	)

605 
	#Y_MIN_PIN
 -1

606 
	#Y_MAX_PIN
 15

	)

608 
	#Z_STEP_PIN
 46

	)

609 
	#Z_DIR_PIN
 48

	)

610 
	#Z_ENABLE_PIN
 62

	)

611 
	#Z_MIN_PIN
 18

612 
	#Z_MAX_PIN
 19

	)

614 
	#Y2_STEP_PIN
 36

	)

615 
	#Y2_DIR_PIN
 34

	)

616 
	#Y2_ENABLE_PIN
 30

	)

618 
	#Z2_STEP_PIN
 36

	)

619 
	#Z2_DIR_PIN
 34

	)

620 
	#Z2_ENABLE_PIN
 30

	)

622 
	#E0_STEP_PIN
 26

	)

623 
	#E0_DIR_PIN
 28

	)

624 
	#E0_ENABLE_PIN
 24

	)

626 
	#E1_STEP_PIN
 36

	)

627 
	#E1_DIR_PIN
 34

	)

628 
	#E1_ENABLE_PIN
 30

	)

630 #i‡
MB
(
RAMPS_13_EEB
)

631 #ifde‡
FILAMENT_SENSOR


634 
	#FILWIDTH_PIN
 5

	)

639 #i‡
MB
(
AZTEEG_X3_PRO
)

640 
	#E2_STEP_PIN
 23

	)

641 
	#E2_DIR_PIN
 25

	)

642 
	#E2_ENABLE_PIN
 40

	)

644 
	#E3_STEP_PIN
 27

	)

645 
	#E3_DIR_PIN
 29

	)

646 
	#E3_ENABLE_PIN
 41

	)

648 
	#E4_STEP_PIN
 43

	)

649 
	#E4_DIR_PIN
 37

	)

650 
	#E4_ENABLE_PIN
 42

	)

653 
	#SDPOWER
 -1

	)

654 
	#SDSS
 53

	)

655 
	#LED_PIN
 13

	)

658 #i‡
MB
(
RAMPS_13_EFB
Ë|| MB(
RAMPS_13_EFF
Ë|| MB(
AZTEEG_X3
Ë|| MB(
AZTEEG_X3_PRO
)

659 
	#FAN_PIN
 9

660 #ñ£

	)

661 
	#FAN_PIN
 4

663 

	)

664 #i‡
MB
(3D
RAG
Ë|| MB(
RAMPS_13_EEF
)

665 
	#FAN_PIN
 8

	)

668 #i‡
MB
(
RAMPS_13_EFF
)

669 
	#CONTROLLERFAN_PIN
 -1

671 

	)

672 
	#PS_ON_PIN
 12

	)

674 #i‡
deföed
(
REPRAP_DISCOUNT_SMART_CONTROLLER
Ë|| deföed(
G3D_PANEL
)

675 
	#KILL_PIN
 41

	)

677 
	#KILL_PIN
 -1

	)

680 #i‡
MB
(
RAMPS_13_EFF
)

681 
	#HEATER_0_PIN
 8

	)

683 
	#HEATER_0_PIN
 10

685 

	)

686 #i‡
MB
(
RAMPS_13_EFB
Ë|| MB(
AZTEEG_X3
)

687 
	#HEATER_1_PIN
 -1

	)

689 
	#HEATER_1_PIN
 9

691 

	)

693 #i‡
MB
(3D
RAG
)

694 
	#HEATER_0_PIN
 10

	)

695 
	#HEATER_1_PIN
 12

	)

696 
	#HEATER_2_PIN
 6

	)

697 #ñi‡
MB
(
AZTEEG_X3_PRO
)

698 
	#HEATER_2_PIN
 16

	)

699 
	#HEATER_3_PIN
 17

	)

700 
	#HEATER_4_PIN
 4

	)

701 
	#HEATER_5_PIN
 5

	)

702 
	#HEATER_6_PIN
 6

	)

703 
	#HEATER_7_PIN
 11

	)

705 
	#HEATER_2_PIN
 -1

	)

708 
	#TEMP_0_PIN
 13

709 
	#TEMP_1_PIN
 15

710 #i‡
	`MB
(
AZTEEG_X3_PRO
)

	)

711 
	#TEMP_2_PIN
 12

712 
	#TEMP_3_PIN
 11

713 
	#TEMP_4_PIN
 10

714 
	#TC1
 4

715 
	#TC2
 5

716 #ñ£

	)

717 
	#TEMP_2_PIN
 -1

719 

	)

720 #i‡
MB
(
RAMPS_13_EFF
Ë|| MB(
RAMPS_13_EEF
)

721 
	#HEATER_BED_PIN
 -1

722 #ñ£

	)

723 #i‡
MB
(3D
RAG
)

724 
	#HEATER_BED_PIN
 9

725 #ñ£

	)

726 
	#HEATER_BED_PIN
 8

729 

	)

730 
	#TEMP_BED_PIN
 14

731 

	)

732 #ifde‡
NUM_SERVOS


733 
	#SERVO0_PIN
 11

	)

735 #i‡
NUM_SERVOS
 > 1

736 
	#SERVO1_PIN
 6

	)

739 #i‡
NUM_SERVOS
 > 2

740 
	#SERVO2_PIN
 5

	)

743 #i‡
NUM_SERVOS
 > 3

744 
	#SERVO3_PIN
 4

	)

748 #i‡
MB
(
AZTEEG_X3_PRO
)

749 
	#BEEPER
 33

	)

752 #ifde‡
TEMP_STAT_LEDS


753 #i‡
MB
(
AZTEEG_X3
)

754 
	#STAT_LED_RED
 6

	)

755 
	#STAT_LED_BLUE
 11

	)

759 #ifde‡
ULTRA_LCD


761 #ifde‡
NEWPANEL


762 
	#LCD_PINS_RS
 16

	)

763 
	#LCD_PINS_ENABLE
 17

	)

764 
	#LCD_PINS_D4
 23

	)

765 
	#LCD_PINS_D5
 25

	)

766 
	#LCD_PINS_D6
 27

	)

767 
	#LCD_PINS_D7
 29

	)

769 #ifde‡
REPRAP_DISCOUNT_SMART_CONTROLLER


770 
	#BEEPER
 37

	)

772 
	#BTN_EN1
 31

	)

773 
	#BTN_EN2
 33

	)

774 
	#BTN_ENC
 35

	)

776 
	#SDCARDDETECT
 49

	)

777 #ñi‡
deföed
(
LCD_I2C_PANELOLU2
)

778 
	#BTN_EN1
 47

779 
	#BTN_EN2
 43

	)

780 
	#BTN_ENC
 32

	)

781 
	#LCD_SDSS
 53

	)

782 
	#SDCARDDETECT
 -1

	)

783 
	#KILL_PIN
 41

	)

784 #ñi‡
deföed
(
LCD_I2C_VIKI
)

785 
	#BTN_EN1
 22

786 
	#BTN_EN2
 7

	)

787 
	#BTN_ENC
 -1

	)

788 
	#LCD_SDSS
 53

	)

789 
	#SDCARDDETECT
 49

	)

792 
	#BEEPER
 33

793 

	)

795 #ifde‡
REPRAPWORLD_KEYPAD


796 
	#BTN_EN1
 64

797 
	#BTN_EN2
 59

798 
	#BTN_ENC
 63

799 
	#SHIFT_OUT
 40

800 
	#SHIFT_CLK
 44

801 
	#SHIFT_LD
 42

802 #ñ£

	)

803 
	#BTN_EN1
 37

	)

804 
	#BTN_EN2
 35

	)

805 
	#BTN_ENC
 31

807 

	)

808 #ifde‡
G3D_PANEL


809 
	#SDCARDDETECT
 49

	)

811 
	#SDCARDDETECT
 -1

813 

	)

816 #i‡
MB
(3D
RAG
)

817 
	#BEEPER
 -1

	)

819 
	#LCD_PINS_RS
 27

	)

820 
	#LCD_PINS_ENABLE
 29

	)

821 
	#LCD_PINS_D4
 37

	)

822 
	#LCD_PINS_D5
 35

	)

823 
	#LCD_PINS_D6
 33

	)

824 
	#LCD_PINS_D7
 31

	)

827 
	#BTN_EN1
 16

	)

828 
	#BTN_EN2
 17

	)

829 
	#BTN_ENC
 23

830 

	)

834 
	#BEEPER
 33

835 

	)

843 
	#LCD_PINS_RS
 16

	)

844 
	#LCD_PINS_ENABLE
 17

	)

845 
	#LCD_PINS_D4
 23

	)

846 
	#LCD_PINS_D5
 25

	)

847 
	#LCD_PINS_D6
 27

	)

848 
	#LCD_PINS_D7
 29

	)

854 
	#X_STEP_PIN
 26

	)

855 
	#X_DIR_PIN
 28

	)

856 
	#X_ENABLE_PIN
 24

	)

857 
	#X_MIN_PIN
 3

	)

858 
	#X_MAX_PIN
 -1

859 

	)

860 
	#Y_STEP_PIN
 38

	)

861 
	#Y_DIR_PIN
 40

	)

862 
	#Y_ENABLE_PIN
 36

	)

863 
	#Y_MIN_PIN
 16

	)

864 
	#Y_MAX_PIN
 -1

865 

	)

866 
	#Z_STEP_PIN
 44

	)

867 
	#Z_DIR_PIN
 46

	)

868 
	#Z_ENABLE_PIN
 42

	)

869 
	#Z_MIN_PIN
 18

	)

870 
	#Z_MAX_PIN
 -1

871 

	)

872 
	#E0_STEP_PIN
 32

	)

873 
	#E0_DIR_PIN
 34

	)

874 
	#E0_ENABLE_PIN
 30

	)

876 
	#SDPOWER
 48

	)

877 
	#SDSS
 53

	)

878 
	#LED_PIN
 13

	)

879 
	#PS_ON_PIN
 -1

	)

880 
	#KILL_PIN
 -1

	)

882 #ifde‡
RAMPS_V_1_0


883 
	#HEATER_0_PIN
 12

884 
	#HEATER_BED_PIN
 -1

885 
	#FAN_PIN
 11

886 #ñ£ // RAMPS_V_1_1 o∏RAMPS_V_1_2

	)

887 
	#HEATER_0_PIN
 10

888 
	#HEATER_BED_PIN
 8

889 
	#FAN_PIN
 9

891 
	#HEATER_1_PIN
 -1

	)

892 
	#HEATER_2_PIN
 -1

	)

893 
	#TEMP_0_PIN
 2

894 
	#TEMP_1_PIN
 -1

	)

895 
	#TEMP_2_PIN
 -1

	)

896 
	#TEMP_BED_PIN
 1

897 

	)

902 #i‚de‡
SDSUPPORT


904 
	#SCK_PIN
 52

	)

905 
	#MISO_PIN
 50

	)

906 
	#MOSI_PIN
 51

	)

907 
	#MAX6675_SS
 53

	)

909 
	#MAX6675_SS
 49

	)

918 #i‡
MB
(
DUEMILANOVE_328P
)

919 
	#KNOWN_BOARD
 1

	)

921 #i‚de‡
__AVR_ATmega328P__


922 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'ArduöÿDuemû™ovêw/ ATMega328' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

925 
	#X_STEP_PIN
 19

	)

926 
	#X_DIR_PIN
 18

	)

927 
	#X_ENABLE_PIN
 -1

	)

928 
	#X_STOP_PIN
 17

	)

930 
	#Y_STEP_PIN
 10

	)

931 
	#Y_DIR_PIN
 7

	)

932 
	#Y_ENABLE_PIN
 -1

	)

933 
	#Y_STOP_PIN
 8

	)

935 
	#Z_STEP_PIN
 13

	)

936 
	#Z_DIR_PIN
 3

	)

937 
	#Z_ENABLE_PIN
 2

	)

938 
	#Z_STOP_PIN
 4

	)

940 
	#E0_STEP_PIN
 11

	)

941 
	#E0_DIR_PIN
 12

	)

942 
	#E0_ENABLE_PIN
 -1

	)

944 
	#SDPOWER
 -1

	)

945 
	#SDSS
 -1

	)

946 
	#LED_PIN
 -1

	)

947 
	#FAN_PIN
 5

	)

948 
	#PS_ON_PIN
 -1

	)

949 
	#KILL_PIN
 -1

	)

951 
	#HEATER_0_PIN
 6

	)

952 
	#HEATER_1_PIN
 -1

	)

953 
	#HEATER_2_PIN
 -1

	)

954 
	#TEMP_0_PIN
 0

955 
	#TEMP_1_PIN
 -1

	)

956 
	#TEMP_2_PIN
 -1

	)

957 
	#HEATER_BED_PIN
 -1

	)

958 
	#TEMP_BED_PIN
 -1

	)

966 #i‡
MB
(
ELEFU_3
)

967 
	#KNOWN_BOARD
 1

	)

969 #i‚de‡
__AVR_ATmega2560__


970 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'ArduöÿMega' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

974 
	#X_STEP_PIN
 49

	)

975 
	#X_DIR_PIN
 13

	)

976 
	#X_ENABLE_PIN
 48

	)

977 
	#X_MIN_PIN
 35

	)

978 
	#X_MAX_PIN
 -1

979 

	)

980 
	#Y_STEP_PIN
 11

	)

981 
	#Y_DIR_PIN
 9

	)

982 
	#Y_ENABLE_PIN
 12

	)

983 
	#Y_MIN_PIN
 33

	)

984 
	#Y_MAX_PIN
 -1

985 

	)

986 
	#Z_STEP_PIN
 7

	)

987 
	#Z_DIR_PIN
 6

	)

988 
	#Z_ENABLE_PIN
 8

	)

989 
	#Z_MIN_PIN
 31

	)

990 
	#Z_MAX_PIN
 -1

991 

	)

992 
	#E2_STEP_PIN
 43

	)

993 
	#E2_DIR_PIN
 47

	)

994 
	#E2_ENABLE_PIN
 42

	)

996 
	#E1_STEP_PIN
 18

	)

997 
	#E1_DIR_PIN
 19

	)

998 
	#E1_ENABLE_PIN
 38

	)

1000 
	#E0_STEP_PIN
 40

	)

1001 
	#E0_DIR_PIN
 41

	)

1002 
	#E0_ENABLE_PIN
 37

	)

1004 
	#SDPOWER
 -1

	)

1005 
	#LED_PIN
 -1

1006 

	)

1007 
	#FAN_PIN
 16

1008 

	)

1009 
	#PS_ON_PIN
 10

1010 
	#SLEEP_WAKE_PIN
 26

1011 

	)

1012 
	#HEATER_0_PIN
 45

1013 
	#HEATER_1_PIN
 46

1014 
	#HEATER_2_PIN
 17

1015 
	#HEATER_BED_PIN
 44

1016 
	#TEMP_0_PIN
 3

1017 
	#TEMP_1_PIN
 2

1018 
	#TEMP_2_PIN
 1

1019 
	#TEMP_BED_PIN
 0

1020 

	)

1021 
	#BEEPER
 36

	)

1023 
	#KILL_PIN
 -1

	)

1027 
	#PHOTOGRAPH_PIN
 29

	)

1029 #ifde‡
RA_CONTROL_PANEL


1031 
	#SDSS
 53

	)

1032 
	#SDCARDDETECT
 28

	)

1034 
	#BTN_EN1
 14

	)

1035 
	#BTN_EN2
 39

	)

1036 
	#BTN_ENC
 15

1037 

	)

1038 
	#BLEN_C
 2

	)

1039 
	#BLEN_B
 1

	)

1040 
	#BLEN_A
 0

	)

1043 
	#í¸Ÿ0
 0

	)

1044 
	#í¸Ÿ1
 2

	)

1045 
	#í¸Ÿ2
 3

	)

1046 
	#í¸Ÿ3
 1

	)

1050 #ifde‡
RA_DISCO


1052 
	#TLC_CLOCK_PIN
 25

	)

1053 
	#TLC_BLANK_PIN
 23

	)

1054 
	#TLC_XLAT_PIN
 22

	)

1055 
	#TLC_DATA_PIN
 24

	)

1059 
	#TLC_CLOCK_BIT
 3

1060 
	#TLC_CLOCK_PORT
 &
PORTA


1061 

	)

1062 
	#TLC_BLANK_BIT
 1

1063 
	#TLC_BLANK_PORT
 &
PORTA


1064 

	)

1065 
	#TLC_DATA_BIT
 2

1066 
	#TLC_DATA_PORT
 &
PORTA


1067 

	)

1068 
	#TLC_XLAT_BIT
 0

1069 
	#TLC_XLAT_PORT
 &
PORTA


1070 

	)

1074 
	#NUM_TLCS
 2

	)

1079 
	#TRANS_ARRAY
 {0, 1, 2, 3, 4, 5, 6, 7, 15, 14, 13, 12, 11, 10, 9, 8}

1082 

	)

1091 #i‡
MB
(
GEN6
Ë|| MB(
GEN6_DELUXE
)

1092 
	#KNOWN_BOARD
 1

	)

1094 #i‚de‡
__AVR_ATmega644P__


1095 #i‚de‡
__AVR_ATmega1284P__


1096 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'S™guöo' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

1101 
	#X_STEP_PIN
 15

	)

1102 
	#X_DIR_PIN
 18

	)

1103 
	#X_ENABLE_PIN
 19

	)

1104 
	#X_STOP_PIN
 20

	)

1107 
	#Y_STEP_PIN
 23

	)

1108 
	#Y_DIR_PIN
 22

	)

1109 
	#Y_ENABLE_PIN
 24

	)

1110 
	#Y_STOP_PIN
 25

	)

1113 
	#Z_STEP_PIN
 27

	)

1114 
	#Z_DIR_PIN
 28

	)

1115 
	#Z_ENABLE_PIN
 29

	)

1116 
	#Z_STOP_PIN
 30

	)

1119 
	#E0_STEP_PIN
 4

1120 
	#E0_DIR_PIN
 2

1121 
	#E0_ENABLE_PIN
 3

1122 
	#TEMP_0_PIN
 5

1123 
	#TEMP_1_PIN
 -1

1124 

	)

1126 
	#TEMP_2_PIN
 -1

1127 
	#HEATER_0_PIN
 14

1128 
	#HEATER_1_PIN
 -1

	)

1129 
	#HEATER_2_PIN
 -1

	)

1130 #i‡
MB
(
GEN6
)

1131 
	#HEATER_BED_PIN
 -1

1132 
	#TEMP_BED_PIN
 -1

1133 #ñ£

	)

1134 
	#HEATER_BED_PIN
 1

1135 
	#TEMP_BED_PIN
 0

1137 
	#SDPOWER
 -1

	)

1138 
	#SDSS
 17

	)

1139 
	#LED_PIN
 -1

1140 
	#FAN_PIN
 -1

1141 
	#PS_ON_PIN
 -1

1142 
	#KILL_PIN
 -1

1144 

	)

1145 
	#DEBUG_PIN
 0

	)

1148 
	#TX_ENABLE_PIN
 12

	)

1149 
	#RX_ENABLE_PIN
 13

	)

1157 #i‡
MB
(
STB_11
)

1158 
	#STB


	)

1160 #i‡
MB
(
MELZI
Ë|| MB(
MELZI_1284
)

1161 
	#MELZI


	)

1163 #i‡
MB
(
AZTEEG_X1
)

1164 
	#AZTEEG_X1


	)

1166 #i‡
MB
(
SANGUINOLOLU_12
Ë|| MB(
MELZI
Ë|| MB(
STB_11
Ë|| MB(
AZTEEG_X1
Ë|| MB(
MELZI_1284
)

1167 #unde‡
MOTHERBOARD


1168 
	#MOTHERBOARD
 
BOARD_SANGUINOLOLU_11


	)

1169 
	#SANGUINOLOLU_V_1_2


	)

1171 #i‡
deföed
(
__AVR_ATmega1284P__
)

1172 
	#LARGE_FLASH
 
åue


	)

1176 #i‡
MB
(
SANGUINOLOLU_11
)

1177 
	#KNOWN_BOARD
 1

	)

1178 #i‚de‡
__AVR_ATmega644P__


1179 #i‚de‡
__AVR_ATmega1284P__


1180 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'S™guöo' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

1184 
	#X_STEP_PIN
 15

	)

1185 
	#X_DIR_PIN
 21

	)

1186 
	#X_STOP_PIN
 18

	)

1188 
	#Y_STEP_PIN
 22

	)

1189 
	#Y_DIR_PIN
 23

	)

1190 
	#Y_STOP_PIN
 19

	)

1192 
	#Z_STEP_PIN
 3

	)

1193 
	#Z_DIR_PIN
 2

	)

1194 
	#Z_STOP_PIN
 20

	)

1196 
	#E0_STEP_PIN
 1

	)

1197 
	#E0_DIR_PIN
 0

	)

1199 
	#LED_PIN
 -1

	)

1201 
	#FAN_PIN
 -1

	)

1202 #i‡
FAN_PIN
 == 12 || FAN_PIN ==13

1203 
	#FAN_SOFT_PWM


	)

1206 #ifde‡
MELZI


1207 
	#LED_PIN
 27

	)

1208 
	#FAN_PIN
 4

1210 

	)

1211 #ifde‡
STB


1212 
	#FAN_PIN
 4

	)

1214 
	#LCD_PIN_BL
 17

1216 

	)

1217 #ifde‡
AZTEEG_X1


1218 
	#FAN_PIN
 4

	)

1221 #ifde‡
NUM_SERVOS


1222 
	#SERVO0_PIN
 -1

	)

1224 #i‡
NUM_SERVOS
 > 1

1225 
	#SERVO1_PIN
 -1

	)

1228 #i‡
NUM_SERVOS
 > 2

1229 
	#SERVO2_PIN
 -1

	)

1232 #i‡
NUM_SERVOS
 > 3

1233 
	#SERVO3_PIN
 -1

	)

1237 
	#PS_ON_PIN
 -1

	)

1238 
	#KILL_PIN
 -1

	)

1240 
	#HEATER_0_PIN
 13

1241 
	#HEATER_1_PIN
 -1

	)

1242 
	#HEATER_2_PIN
 -1

	)

1244 #ifde‡
SANGUINOLOLU_V_1_2


1246 
	#HEATER_BED_PIN
 12

1247 
	#X_ENABLE_PIN
 14

	)

1248 
	#Y_ENABLE_PIN
 14

	)

1249 
	#Z_ENABLE_PIN
 26

	)

1250 
	#E0_ENABLE_PIN
 14

	)

1252 #ifde‡
LCD_I2C_PANELOLU2


1253 
	#FAN_PIN
 4

1255 

	)

1258 
	#HEATER_BED_PIN
 14

1259 
	#X_ENABLE_PIN
 -1

	)

1260 
	#Y_ENABLE_PIN
 -1

	)

1261 
	#Z_ENABLE_PIN
 -1

	)

1262 
	#E0_ENABLE_PIN
 -1

	)

1266 
	#TEMP_0_PIN
 7

1267 
	#TEMP_1_PIN
 -1

	)

1268 
	#TEMP_2_PIN
 -1

	)

1269 
	#TEMP_BED_PIN
 6

1270 
	#SDPOWER
 -1

	)

1271 
	#SDSS
 31

	)

1276 #ifde‡
ULTRA_LCD


1277 #ifde‡
NEWPANEL


1279 
	#BEEPER
 -1

	)

1281 #ifde‡
DOGLCD


1283 
	#DOGLCD_A0
 30

	)

1284 
	#DOGLCD_CS
 29

	)

1286 
	#LCD_CONTRAST
 1

	)

1290 
	#LCD_SCREEN_ROT_180


	)

1293 
	#LCD_PINS_RS
 4

	)

1294 
	#LCD_PINS_ENABLE
 17

	)

1295 
	#LCD_PINS_D4
 30

	)

1296 
	#LCD_PINS_D5
 29

	)

1297 
	#LCD_PINS_D6
 28

	)

1298 
	#LCD_PINS_D7
 27

	)

1301 
	#BTN_EN1
 11

	)

1302 
	#BTN_EN2
 10

	)

1303 #ifde‡
LCD_I2C_PANELOLU2


1304 #ifde‡
MELZI


1305 
	#BTN_ENC
 29

1306 
	#LCD_SDSS
 30

1307 #ñ£

	)

1308 
	#BTN_ENC
 30

1310 #ñ£

	)

1311 
	#BTN_ENC
 16

1314 
	#SDCARDDETECT
 -1

	)

1319 #ifde‡
MAKRPANEL


1320 
	#BEEPER
 29

	)

1322 
	#DOGLCD_A0
 30

	)

1323 
	#DOGLCD_CS
 17

	)

1324 
	#LCD_PIN_BL
 28

1326 
	#LCD_CONTRAST
 1

	)

1328 
	#LCD_SCREEN_ROT_0


	)

1333 
	#BTN_EN1
 11

	)

1334 
	#BTN_EN2
 10

	)

1335 
	#BTN_ENC
 16

1337 
	#SDCARDDETECT
 -1

	)

1347 #i‡
MB
(
ULTIMAKER
)

1348 
	#KNOWN_BOARD


	)

1350 #i‚de‡
__AVR_ATmega1280__


1351 #i‚de‡
__AVR_ATmega2560__


1352 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'ArduöÿMega' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

1356 
	#LARGE_FLASH
 
åue


	)

1358 
	#X_STEP_PIN
 25

	)

1359 
	#X_DIR_PIN
 23

	)

1360 
	#X_MIN_PIN
 22

	)

1361 
	#X_MAX_PIN
 24

	)

1362 
	#X_ENABLE_PIN
 27

	)

1364 
	#Y_STEP_PIN
 31

	)

1365 
	#Y_DIR_PIN
 33

	)

1366 
	#Y_MIN_PIN
 26

	)

1367 
	#Y_MAX_PIN
 28

	)

1368 
	#Y_ENABLE_PIN
 29

	)

1370 
	#Z_STEP_PIN
 37

	)

1371 
	#Z_DIR_PIN
 39

	)

1372 
	#Z_MIN_PIN
 30

	)

1373 
	#Z_MAX_PIN
 32

	)

1374 
	#Z_ENABLE_PIN
 35

	)

1376 
	#HEATER_BED_PIN
 4

	)

1377 
	#TEMP_BED_PIN
 10

	)

1379 
	#HEATER_0_PIN
 2

	)

1380 
	#TEMP_0_PIN
 8

	)

1382 
	#HEATER_1_PIN
 3

	)

1383 
	#TEMP_1_PIN
 9

	)

1385 
	#HEATER_2_PIN
 -1

	)

1386 
	#TEMP_2_PIN
 -1

	)

1388 
	#E0_STEP_PIN
 43

	)

1389 
	#E0_DIR_PIN
 45

	)

1390 
	#E0_ENABLE_PIN
 41

	)

1392 
	#E1_STEP_PIN
 49

	)

1393 
	#E1_DIR_PIN
 47

	)

1394 
	#E1_ENABLE_PIN
 48

	)

1396 
	#SDPOWER
 -1

	)

1397 
	#SDSS
 53

	)

1398 
	#LED_PIN
 13

	)

1399 
	#FAN_PIN
 7

	)

1400 
	#PS_ON_PIN
 12

	)

1401 
	#KILL_PIN
 -1

	)

1402 
	#SUICIDE_PIN
 54

1403 

	)

1404 #ifde‡
ULTRA_LCD


1406 #ifde‡
NEWPANEL


1408 
	#BEEPER
 18

	)

1410 
	#LCD_PINS_RS
 20

	)

1411 
	#LCD_PINS_ENABLE
 17

	)

1412 
	#LCD_PINS_D4
 16

	)

1413 
	#LCD_PINS_D5
 21

	)

1414 
	#LCD_PINS_D6
 5

	)

1415 
	#LCD_PINS_D7
 6

	)

1418 
	#BTN_EN1
 40

	)

1419 
	#BTN_EN2
 42

	)

1420 
	#BTN_ENC
 19

1421 

	)

1422 
	#SDCARDDETECT
 38

	)

1426 
	#BEEPER
 18

	)

1429 
	#SHIFT_CLK
 38

	)

1430 
	#SHIFT_LD
 42

	)

1431 
	#SHIFT_OUT
 40

	)

1432 
	#SHIFT_EN
 17

	)

1434 
	#LCD_PINS_RS
 16

	)

1435 
	#LCD_PINS_ENABLE
 5

	)

1436 
	#LCD_PINS_D4
 6

	)

1437 
	#LCD_PINS_D5
 21

	)

1438 
	#LCD_PINS_D6
 20

	)

1439 
	#LCD_PINS_D7
 19

	)

1441 
	#SDCARDDETECT
 -1

	)

1447 #i‡
MB
(
ULTIMAKER_OLD
)

1448 
	#KNOWN_BOARD


	)

1453 #i‚de‡
__AVR_ATmega1280__


1454 #i‚de‡
__AVR_ATmega2560__


1455 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'ArduöÿMega' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

1459 
	#LARGE_FLASH
 
åue


	)

1461 
	#X_STEP_PIN
 25

	)

1462 
	#X_DIR_PIN
 23

	)

1463 
	#X_MIN_PIN
 15

	)

1464 
	#X_MAX_PIN
 14

	)

1465 
	#X_ENABLE_PIN
 27

	)

1467 
	#Y_STEP_PIN
 31

	)

1468 
	#Y_DIR_PIN
 33

	)

1469 
	#Y_MIN_PIN
 17

	)

1470 
	#Y_MAX_PIN
 16

	)

1471 
	#Y_ENABLE_PIN
 29

	)

1473 
	#Z_STEP_PIN
 37

	)

1474 
	#Z_DIR_PIN
 39

	)

1475 
	#Z_MIN_PIN
 19

	)

1476 
	#Z_MAX_PIN
 18

	)

1477 
	#Z_ENABLE_PIN
 35

	)

1479 
	#HEATER_BED_PIN
 -1

	)

1480 
	#TEMP_BED_PIN
 -1

	)

1482 
	#HEATER_0_PIN
 2

	)

1483 
	#TEMP_0_PIN
 8

	)

1485 
	#HEATER_1_PIN
 1

	)

1486 
	#TEMP_1_PIN
 1

	)

1488 
	#HEATER_2_PIN
 -1

	)

1489 
	#TEMP_2_PIN
 -1

	)

1491 
	#E0_STEP_PIN
 43

	)

1492 
	#E0_DIR_PIN
 45

	)

1493 
	#E0_ENABLE_PIN
 41

	)

1495 
	#E1_STEP_PIN
 -1

	)

1496 
	#E1_DIR_PIN
 -1

	)

1497 
	#E1_ENABLE_PIN
 -1

	)

1499 
	#SDPOWER
 -1

	)

1500 
	#SDSS
 -1

	)

1501 
	#LED_PIN
 -1

	)

1502 
	#FAN_PIN
 -1

	)

1503 
	#PS_ON_PIN
 -1

	)

1504 
	#KILL_PIN
 -1

	)

1505 
	#SUICIDE_PIN
 -1

1506 

	)

1507 
	#LCD_PINS_RS
 24

	)

1508 
	#LCD_PINS_ENABLE
 22

	)

1509 
	#LCD_PINS_D4
 36

	)

1510 
	#LCD_PINS_D5
 34

	)

1511 
	#LCD_PINS_D6
 32

	)

1512 
	#LCD_PINS_D7
 30

	)

1516 #i‡
MB
(
ULTIMAIN_2
)

1517 
	#KNOWN_BOARD


	)

1522 #i‚de‡
__AVR_ATmega2560__


1523 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'ArduöÿMeg®2560' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

1526 
	#X_STEP_PIN
 25

	)

1527 
	#X_DIR_PIN
 23

	)

1528 
	#X_STOP_PIN
 22

	)

1529 
	#X_ENABLE_PIN
 27

	)

1531 
	#Y_STEP_PIN
 32

	)

1532 
	#Y_DIR_PIN
 33

	)

1533 
	#Y_STOP_PIN
 26

	)

1534 
	#Y_ENABLE_PIN
 31

	)

1536 
	#Z_STEP_PIN
 35

	)

1537 
	#Z_DIR_PIN
 36

	)

1538 
	#Z_STOP_PIN
 29

	)

1539 
	#Z_ENABLE_PIN
 34

	)

1541 
	#HEATER_BED_PIN
 4

	)

1542 
	#TEMP_BED_PIN
 10

	)

1544 
	#HEATER_0_PIN
 2

	)

1545 
	#TEMP_0_PIN
 8

	)

1547 
	#HEATER_1_PIN
 3

	)

1548 
	#TEMP_1_PIN
 9

	)

1550 
	#HEATER_2_PIN
 -1

	)

1551 
	#TEMP_2_PIN
 -1

	)

1553 
	#E0_STEP_PIN
 42

	)

1554 
	#E0_DIR_PIN
 43

	)

1555 
	#E0_ENABLE_PIN
 37

	)

1557 
	#E1_STEP_PIN
 49

	)

1558 
	#E1_DIR_PIN
 47

	)

1559 
	#E1_ENABLE_PIN
 48

	)

1561 
	#SDPOWER
 -1

	)

1562 
	#SDSS
 53

	)

1563 
	#LED_PIN
 8

	)

1564 
	#FAN_PIN
 7

	)

1565 
	#PS_ON_PIN
 -1

	)

1566 
	#KILL_PIN
 -1

	)

1567 
	#SUICIDE_PIN
 -1

1568 
	#SAFETY_TRIGGERED_PIN
 28

1569 
	#MAIN_VOLTAGE_MEASURE_PIN
 14

1570 

	)

1571 
	#MOTOR_CURRENT_PWM_XY_PIN
 44

	)

1572 
	#MOTOR_CURRENT_PWM_Z_PIN
 45

	)

1573 
	#MOTOR_CURRENT_PWM_E_PIN
 46

	)

1575 
	#MOTOR_CURRENT_PWM_RANGE
 2000

	)

1576 
	#DEFAULT_PWM_MOTOR_CURRENT
 {1300, 1300, 1250}

	)

1579 
	#BEEPER
 18

	)

1581 
	#LCD_PINS_RS
 20

	)

1582 
	#LCD_PINS_ENABLE
 15

	)

1583 
	#LCD_PINS_D4
 14

	)

1584 
	#LCD_PINS_D5
 21

	)

1585 
	#LCD_PINS_D6
 5

	)

1586 
	#LCD_PINS_D7
 6

	)

1589 
	#BTN_EN1
 40

	)

1590 
	#BTN_EN2
 41

	)

1591 
	#BTN_ENC
 19

1592 

	)

1593 
	#BLEN_C
 2

	)

1594 
	#BLEN_B
 1

	)

1595 
	#BLEN_A
 0

	)

1597 
	#SDCARDDETECT
 39

	)

1605 #i‡
MB
(
RUMBA
)

1606 
	#KNOWN_BOARD
 1

	)

1608 #i‚de‡
__AVR_ATmega2560__


1609 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'ArduöÿMega' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

1612 
	#X_STEP_PIN
 17

	)

1613 
	#X_DIR_PIN
 16

	)

1614 
	#X_ENABLE_PIN
 48

	)

1615 
	#X_MIN_PIN
 37

	)

1616 
	#X_MAX_PIN
 36

	)

1618 
	#Y_STEP_PIN
 54

	)

1619 
	#Y_DIR_PIN
 47

	)

1620 
	#Y_ENABLE_PIN
 55

	)

1621 
	#Y_MIN_PIN
 35

	)

1622 
	#Y_MAX_PIN
 34

	)

1624 
	#Z_STEP_PIN
 57

	)

1625 
	#Z_DIR_PIN
 56

	)

1626 
	#Z_ENABLE_PIN
 62

	)

1627 
	#Z_MIN_PIN
 33

	)

1628 
	#Z_MAX_PIN
 32

	)

1630 
	#E0_STEP_PIN
 23

	)

1631 
	#E0_DIR_PIN
 22

	)

1632 
	#E0_ENABLE_PIN
 24

	)

1634 
	#E1_STEP_PIN
 26

	)

1635 
	#E1_DIR_PIN
 25

	)

1636 
	#E1_ENABLE_PIN
 27

	)

1638 
	#E2_STEP_PIN
 29

	)

1639 
	#E2_DIR_PIN
 28

	)

1640 
	#E2_ENABLE_PIN
 39

	)

1642 
	#LED_PIN
 13

	)

1644 
	#FAN_PIN
 7

	)

1647 
	#PS_ON_PIN
 45

	)

1648 
	#KILL_PIN
 46

	)

1650 #i‡(
TEMP_SENSOR_0
==0)

1651 
	#TEMP_0_PIN
 -1

	)

1652 
	#HEATER_0_PIN
 -1

	)

1654 
	#HEATER_0_PIN
 2

1655 #i‡(
TEMP_SENSOR_0
==-1)

	)

1656 
	#TEMP_0_PIN
 6

1657 #ñ£

	)

1658 
	#TEMP_0_PIN
 15

1661 

	)

1662 #i‡(
TEMP_SENSOR_1
==0)

1663 
	#TEMP_1_PIN
 -1

	)

1664 
	#HEATER_1_PIN
 -1

	)

1666 
	#HEATER_1_PIN
 3

1667 #i‡(
TEMP_SENSOR_1
==-1)

	)

1668 
	#TEMP_1_PIN
 5

1669 #ñ£

	)

1670 
	#TEMP_1_PIN
 14

1673 

	)

1674 #i‡(
TEMP_SENSOR_2
==0)

1675 
	#TEMP_2_PIN
 -1

	)

1676 
	#HEATER_2_PIN
 -1

	)

1678 
	#HEATER_2_PIN
 6

1679 #i‡(
TEMP_SENSOR_2
==-1)

	)

1680 
	#TEMP_2_PIN
 7

1681 #ñ£

	)

1682 
	#TEMP_2_PIN
 13

1685 

	)

1689 #i‡(
TEMP_SENSOR_BED
==0)

1690 
	#TEMP_BED_PIN
 -1

	)

1691 
	#HEATER_BED_PIN
 -1

	)

1693 
	#HEATER_BED_PIN
 9

1694 #i‡(
TEMP_SENSOR_BED
==-1)

	)

1695 
	#TEMP_BED_PIN
 7

1696 #ñ£

	)

1697 
	#TEMP_BED_PIN
 11

1700 

	)

1701 
	#SDPOWER
 -1

	)

1702 
	#SDSS
 53

	)

1703 
	#SDCARDDETECT
 49

	)

1704 
	#BEEPER
 44

	)

1705 
	#LCD_PINS_RS
 19

	)

1706 
	#LCD_PINS_ENABLE
 42

	)

1707 
	#LCD_PINS_D4
 18

	)

1708 
	#LCD_PINS_D5
 38

	)

1709 
	#LCD_PINS_D6
 41

	)

1710 
	#LCD_PINS_D7
 40

	)

1711 
	#BTN_EN1
 11

	)

1712 
	#BTN_EN2
 12

	)

1713 
	#BTN_ENC
 43

	)

1724 #i‡
MB
(
TEENSYLU
Ë|| MB(
PRINTRBOARD
)

1725 
	#KNOWN_BOARD
 1

	)

1726 
	#AT90USB
 1286

1727 

	)

1728 #i‚de‡
__AVR_AT90USB1286__


1729 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'Tìnsy++ 2.0' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

1732 #ifde‡
AT90USBxx_TEENSYPP_ASSIGNMENTS


1733 #îr‹ 
The£
 
Tìnsylu
/
Pröåbﬂrd
 
assignmíts
 
dïíd
 
⁄
 
åadôi⁄Æ
 
M¨lö
ássignmíts, 
nŸ
 
AT90USBxx_TEENSYPP_ASSIGNMENTS
 
ö
 
Á°io
.
h


1736 
	#LARGE_FLASH
 
åue


	)

1738 
	#X_STEP_PIN
 0

	)

1739 
	#X_DIR_PIN
 1

	)

1740 
	#X_ENABLE_PIN
 39

	)

1742 
	#Y_STEP_PIN
 2

	)

1743 
	#Y_DIR_PIN
 3

	)

1744 
	#Y_ENABLE_PIN
 38

	)

1746 
	#Z_STEP_PIN
 4

	)

1747 
	#Z_DIR_PIN
 5

	)

1748 
	#Z_ENABLE_PIN
 23

	)

1750 
	#E0_STEP_PIN
 6

	)

1751 
	#E0_DIR_PIN
 7

	)

1752 
	#E0_ENABLE_PIN
 19

	)

1754 
	#HEATER_0_PIN
 21

1755 
	#HEATER_1_PIN
 -1

	)

1756 
	#HEATER_2_PIN
 -1

	)

1757 
	#HEATER_BED_PIN
 20

1758 
	#FAN_PIN
 22

1761 

	)

1762 #i‡
MB
(
TEENSYLU
)

1763 
	#X_STOP_PIN
 13

	)

1764 
	#Y_STOP_PIN
 14

	)

1765 
	#Z_STOP_PIN
 15

	)

1766 
	#TEMP_0_PIN
 7

1767 
	#TEMP_BED_PIN
 6

1768 #ñ£ // Pröåbﬂrd

	)

1769 
	#X_STOP_PIN
 35

	)

1770 
	#Y_STOP_PIN
 8

	)

1771 
	#Z_STOP_PIN
 36

	)

1772 
	#TEMP_0_PIN
 1

1773 
	#TEMP_BED_PIN
 0

1774 #ifde‡
FILAMENT_SENSOR


	)

1775 
	#FILWIDTH_PIN
 2

	)

1779 
	#TEMP_1_PIN
 -1

	)

1780 
	#TEMP_2_PIN
 -1

	)

1782 
	#SDPOWER
 -1

	)

1783 
	#SDSS
 8

	)

1784 
	#LED_PIN
 -1

	)

1785 
	#PS_ON_PIN
 -1

	)

1786 
	#KILL_PIN
 -1

	)

1787 
	#ALARM_PIN
 -1

	)

1789 #i‚de‡
SDSUPPORT


1791 
	#SCK_PIN
 9

	)

1792 
	#MISO_PIN
 11

	)

1793 
	#MOSI_PIN
 10

	)

1803 #i‡
MB
(
BRAINWAVE
)

1804 
	#KNOWN_BOARD
 1

	)

1805 
	#AT90USB
 646

1806 

	)

1807 #i‚de‡
__AVR_AT90USB646__


1808 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'Bøöwave' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

1811 
	#X_STEP_PIN
 27

	)

1812 
	#X_DIR_PIN
 29

	)

1813 
	#X_ENABLE_PIN
 28

	)

1814 
	#X_STOP_PIN
 7

	)

1815 
	#X_ATT_PIN
 26

	)

1817 
	#Y_STEP_PIN
 31

	)

1818 
	#Y_DIR_PIN
 33

	)

1819 
	#Y_ENABLE_PIN
 32

	)

1820 
	#Y_STOP_PIN
 6

	)

1821 
	#Y_ATT_PIN
 30

	)

1823 
	#Z_STEP_PIN
 17

	)

1824 
	#Z_DIR_PIN
 19

	)

1825 
	#Z_ENABLE_PIN
 18

	)

1826 
	#Z_STOP_PIN
 5

	)

1827 
	#Z_ATT_PIN
 16

	)

1829 
	#E0_STEP_PIN
 21

	)

1830 
	#E0_DIR_PIN
 23

	)

1831 
	#E0_ENABLE_PIN
 22

	)

1832 
	#E0_ATT_PIN
 20

	)

1834 
	#HEATER_0_PIN
 4

1835 
	#HEATER_1_PIN
 -1

	)

1836 
	#HEATER_2_PIN
 -1

	)

1837 
	#HEATER_BED_PIN
 38

1838 
	#FAN_PIN
 3

1839 

	)

1840 
	#TEMP_0_PIN
 7

1841 
	#TEMP_1_PIN
 -1

	)

1842 
	#TEMP_2_PIN
 -1

	)

1843 
	#TEMP_BED_PIN
 6

1844 

	)

1845 
	#SDPOWER
 -1

	)

1846 
	#SDSS
 -1

	)

1847 
	#LED_PIN
 39

	)

1848 
	#PS_ON_PIN
 -1

	)

1849 
	#KILL_PIN
 -1

	)

1850 
	#ALARM_PIN
 -1

	)

1852 #i‚de‡
SDSUPPORT


1854 
	#SCK_PIN
 9

	)

1855 
	#MISO_PIN
 11

	)

1856 
	#MOSI_PIN
 10

	)

1870 #i‡
MB
(
SAV_MKI
)

1871 
	#KNOWN_BOARD
 1

	)

1872 
	#AT90USB
 1286

1873 

	)

1874 #i‚de‡
__AVR_AT90USB1286__


1875 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'Tìnsy++ 2.0' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

1878 
	#LARGE_FLASH
 
åue


	)

1881 
	#X_STEP_PIN
 0

	)

1882 
	#X_DIR_PIN
 1

	)

1883 
	#X_ENABLE_PIN
 39

	)

1885 
	#Y_STEP_PIN
 2

	)

1886 
	#Y_DIR_PIN
 3

	)

1887 
	#Y_ENABLE_PIN
 38

	)

1889 
	#Z_STEP_PIN
 4

	)

1890 
	#Z_DIR_PIN
 5

	)

1891 
	#Z_ENABLE_PIN
 23

	)

1893 
	#E0_STEP_PIN
 6

	)

1894 
	#E0_DIR_PIN
 7

	)

1895 
	#E0_ENABLE_PIN
 19

	)

1897 
	#HEATER_0_PIN
 21

1898 
	#HEATER_1_PIN
 -1

	)

1899 
	#HEATER_2_PIN
 -1

	)

1900 
	#HEATER_BED_PIN
 20

1901 
	#FAN_PIN
 16

1903 

	)

1904 
	#X_STOP_PIN
 13

	)

1905 
	#Y_STOP_PIN
 14

	)

1906 
	#Z_STOP_PIN
 15

	)

1907 
	#TEMP_0_PIN
 7

1908 
	#TEMP_BED_PIN
 6

1909 

	)

1910 
	#TEMP_1_PIN
 -1

	)

1911 
	#TEMP_2_PIN
 -1

	)

1913 
	#SDPOWER
 -1

	)

1914 
	#SDSS
 20

1915 
	#LED_PIN
 -1

	)

1916 
	#PS_ON_PIN
 -1

	)

1917 
	#KILL_PIN
 -1

	)

1918 
	#ALARM_PIN
 -1

	)

1919 
	#SDCARDDETECT
 -1

	)

1922 #i‚de‡
SDSUPPORT


1924 
	#SCK_PIN
 9

	)

1925 
	#MISO_PIN
 11

	)

1926 
	#MOSI_PIN
 10

	)

1929 
	#BEEPER
 -1

	)

1930 
	#LCD_PINS_RS
 -1

	)

1931 
	#LCD_PINS_ENABLE
 -1

	)

1932 
	#LCD_PINS_D4
 -1

	)

1933 
	#LCD_PINS_D5
 -1

	)

1934 
	#LCD_PINS_D6
 -1

	)

1935 
	#LCD_PINS_D7
 -1

	)

1936 
	#BTN_EN1
 -1

	)

1937 
	#BTN_EN2
 -1

	)

1938 
	#BTN_ENC
 -1

	)

1941 
	#SR_DATA_PIN
 0

	)

1942 
	#SR_CLK_PIN
 1

	)

1954 #i‡
MB
(
TEENSY2
)

1955 
	#KNOWN_BOARD
 1

	)

1956 
	#AT90USB
 1286

1957 

	)

1958 #i‚de‡
__AVR_AT90USB1286__


1959 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'Tìnsy++ 2.0' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

1962 
	#LARGE_FLASH
 
åue


	)

2002 #i‚de‡
AT90USBxx_TEENSYPP_ASSIGNMENTS


2003 
Uncommít
 #deföê
	#AT90USBxx_TEENSYPP_ASSIGNMENTS
 
ö
 
Á°io
.
h
 
this
 
c⁄fig


	)

2007 
	#X_STEP_PIN
 28

2008 
	#X_DIR_PIN
 29

2009 
	#X_ENABLE_PIN
 26

	)

2011 
	#Y_STEP_PIN
 30

2012 
	#Y_DIR_PIN
 31

2013 
	#Y_ENABLE_PIN
 26

2014 

	)

2015 
	#Z_STEP_PIN
 32

2016 
	#Z_DIR_PIN
 33

2017 
	#Z_ENABLE_PIN
 26

2018 

	)

2019 
	#E0_STEP_PIN
 34

2020 
	#E0_DIR_PIN
 35

2021 
	#E0_ENABLE_PIN
 26

2022 

	)

2023 
	#HEATER_0_PIN
 15

2024 
	#HEATER_1_PIN
 -1

	)

2025 
	#HEATER_2_PIN
 -1

	)

2026 
	#HEATER_BED_PIN
 14

2027 
	#FAN_PIN
 16

2028 

	)

2029 
	#X_STOP_PIN
 2

	)

2030 
	#Y_STOP_PIN
 3

	)

2031 
	#Z_STOP_PIN
 4

	)

2033 
	#TEMP_0_PIN
 7

2034 
	#TEMP_BED_PIN
 6

2035 
	#TEMP_1_PIN
 -1

	)

2036 
	#TEMP_2_PIN
 -1

	)

2038 
	#SDPOWER
 -1

	)

2039 
	#SDCARDDETECT
 -1

	)

2040 
	#SDSS
 20

2041 
	#LED_PIN
 6

	)

2042 
	#PS_ON_PIN
 27

	)

2043 
	#KILL_PIN
 -1

	)

2044 
	#ALARM_PIN
 -1

	)

2046 #i‚de‡
SDSUPPORT


2048 
	#SCK_PIN
 21

2049 
	#MISO_PIN
 23

2050 
	#MOSI_PIN
 22

2052 

	)

2053 #ifde‡
ULTIPANEL


2054 
	#LCD_PINS_RS
 8

	)

2055 
	#LCD_PINS_ENABLE
 9

	)

2056 
	#LCD_PINS_D4
 10

	)

2057 
	#LCD_PINS_D5
 11

	)

2058 
	#LCD_PINS_D6
 12

	)

2059 
	#LCD_PINS_D7
 13

	)

2060 
	#BTN_EN1
 38

	)

2061 
	#BTN_EN2
 39

	)

2062 
	#BTN_ENC
 40

	)

2073 #i‡
MB
(
BRAINWAVE_PRO
)

2074 
	#KNOWN_BOARD
 1

	)

2075 
	#AT90USB
 1286

2076 

	)

2077 #i‚de‡
__AVR_AT90USB1286__


2078 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'Bøöwavê2' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

2081 
	#X_STEP_PIN
 5

	)

2082 
	#X_DIR_PIN
 4

	)

2083 
	#X_ENABLE_PIN
 17

2084 
	#X_STOP_PIN
 35

	)

2086 
	#Y_STEP_PIN
 3

	)

2087 
	#Y_DIR_PIN
 2

	)

2088 
	#Y_ENABLE_PIN
 32

	)

2089 
	#Y_STOP_PIN
 38

	)

2091 
	#Z_STEP_PIN
 1

	)

2092 
	#Z_DIR_PIN
 0

	)

2093 
	#Z_ENABLE_PIN
 37

	)

2094 
	#Z_MAX_PIN
 36

	)

2095 
	#Z_MIN_PIN
 23

2096 

	)

2097 
	#E0_STEP_PIN
 7

	)

2098 
	#E0_DIR_PIN
 6

	)

2099 
	#E0_ENABLE_PIN
 19

	)

2100 
	#E_STOP_PIN
 23

	)

2102 
	#HEATER_0_PIN
 21

2103 
	#HEATER_1_PIN
 -1

	)

2104 
	#HEATER_2_PIN
 -1

	)

2105 
	#HEATER_BED_PIN
 20

2106 
	#FAN_PIN
 22

2107 

	)

2108 
	#TEMP_0_PIN
 2

2109 
	#TEMP_1_PIN
 -1

	)

2110 
	#TEMP_2_PIN
 -1

	)

2111 
	#TEMP_BED_PIN
 0

2112 

	)

2113 
	#SDPOWER
 -1

	)

2114 
	#SDSS
 8

2115 
	#LED_PIN
 39

	)

2116 
	#PS_ON_PIN
 -1

	)

2117 
	#KILL_PIN
 -1

	)

2118 
	#ALARM_PIN
 -1

	)

2119 
	#SDCARDDETECT
 18

	)

2121 
	#BTN_EN1
 13

2122 
	#BTN_EN2
 14

2123 
	#BTN_ENC
 15

2124 

	)

2125 #i‚de‡
SDSUPPORT


2127 
	#SCK_PIN
 9

	)

2128 
	#MISO_PIN
 11

	)

2129 
	#MOSI_PIN
 10

	)

2139 #i‡
MB
(
GEN3_PLUS
)

2140 
	#MOTHERBOARD
 
BOARD_SANGUINOLOLU_11


	)

2141 
	#KNOWN_BOARD
 1

	)

2142 #i‚de‡
__AVR_ATmega644P__


2143 #i‚de‡
__AVR_ATmega1284P__


2144 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'S™guöo' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

2148 
	#X_STEP_PIN
 15

	)

2149 
	#X_DIR_PIN
 18

	)

2150 
	#X_STOP_PIN
 20

	)

2152 
	#Y_STEP_PIN
 23

	)

2153 
	#Y_DIR_PIN
 22

	)

2154 
	#Y_STOP_PIN
 25

	)

2156 
	#Z_STEP_PIN
 27

	)

2157 
	#Z_DIR_PIN
 28

	)

2158 
	#Z_STOP_PIN
 30

	)

2160 
	#E0_STEP_PIN
 17

	)

2161 
	#E0_DIR_PIN
 21

	)

2163 
	#LED_PIN
 -1

	)

2165 
	#FAN_PIN
 -1

	)

2167 
	#PS_ON_PIN
 14

	)

2168 
	#KILL_PIN
 -1

	)

2170 
	#HEATER_0_PIN
 12

2171 

	)

2172 
	#HEATER_BED_PIN
 16

2173 
	#X_ENABLE_PIN
 19

	)

2174 
	#Y_ENABLE_PIN
 24

	)

2175 
	#Z_ENABLE_PIN
 29

	)

2176 
	#E0_ENABLE_PIN
 13

	)

2178 
	#TEMP_0_PIN
 0

2179 
	#TEMP_1_PIN
 -1

	)

2180 
	#TEMP_2_PIN
 -1

	)

2181 
	#TEMP_BED_PIN
 5

2182 
	#SDPOWER
 -1

	)

2183 
	#SDSS
 4

	)

2184 
	#HEATER_2_PIN
 -1

	)

2192 #i‡
MB
(
GEN3_MONOLITHIC
)

2193 
	#KNOWN_BOARD
 1

	)

2195 #i‚de‡
__AVR_ATmega644P__


2196 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'S™guöo' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

2199 
	#DEBUG_PIN
 0

	)

2202 
	#X_STEP_PIN
 15

	)

2203 
	#X_DIR_PIN
 18

	)

2204 
	#X_MIN_PIN
 20

	)

2206 
	#X_ENABLE_PIN
 24

2207 
	#X_MAX_PIN
 -1

	)

2210 
	#Y_STEP_PIN
 23

	)

2211 
	#Y_DIR_PIN
 22

	)

2212 
	#Y_MIN_PIN
 25

	)

2214 
	#Y_ENABLE_PIN
 24

2215 
	#Y_MAX_PIN
 -1

	)

2218 
	#Z_STEP_PIN
 27

	)

2219 
	#Z_DIR_PIN
 28

	)

2220 
	#Z_MIN_PIN
 30

	)

2222 
	#Z_ENABLE_PIN
 29

	)

2223 
	#Z_MAX_PIN
 -1

	)

2226 
	#E0_STEP_PIN
 12

	)

2227 
	#E0_DIR_PIN
 17

	)

2228 
	#E0_ENABLE_PIN
 3

	)

2230 
	#HEATER_0_PIN
 16

	)

2231 
	#TEMP_0_PIN
 0

	)

2233 
	#FAN_PIN
 -1

	)

2236 
	#HEATER_BED_PIN
 -1

	)

2237 
	#TEMP_BED_PIN
 -1

	)

2240 
	#SDSS
 -1

	)

2241 
	#SDPOWER
 -1

	)

2242 
	#LED_PIN
 -1

	)

2245 
	#PS_ON_PIN
 14

2246 

	)

2248 
	#KILL_PIN
 -1

	)

2249 
	#TEMP_1_PIN
 -1

	)

2250 
	#TEMP_2_PIN
 -1

	)

2251 
	#HEATER_2_PIN
 -1

	)

2284 #i‡
MB
(
OMCA_A
)

2285 
	#KNOWN_BOARD
 1

	)

2287 #i‚de‡
__AVR_ATmega644__


2288 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'S™guöoA' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

2291 
	#X_STEP_PIN
 21

	)

2292 
	#X_DIR_PIN
 20

	)

2293 
	#X_ENABLE_PIN
 24

	)

2294 
	#X_STOP_PIN
 0

	)

2296 
	#Y_STEP_PIN
 23

	)

2297 
	#Y_DIR_PIN
 22

	)

2298 
	#Y_ENABLE_PIN
 24

	)

2299 
	#Y_STOP_PIN
 1

	)

2301 
	#Z_STEP_PIN
 26

	)

2302 
	#Z_DIR_PIN
 25

	)

2303 
	#Z_ENABLE_PIN
 24

	)

2304 
	#Z_STOP_PIN
 2

	)

2306 
	#E0_STEP_PIN
 28

	)

2307 
	#E0_DIR_PIN
 27

	)

2308 
	#E0_ENABLE_PIN
 24

	)

2310 
	#E1_STEP_PIN
 -1

2311 
	#E1_DIR_PIN
 -1

2312 
	#E1_ENABLE_PIN
 24

	)

2314 
	#E2_STEP_PIN
 -1

2315 
	#E2_DIR_PIN
 -1

2316 
	#E2_ENABLE_PIN
 24

	)

2318 
	#SDPOWER
 -1

	)

2319 
	#SDSS
 11

	)

2320 
	#SDCARDDETECT
 -1

2321 
	#LED_PIN
 -1

	)

2322 
	#FAN_PIN
 3

	)

2323 
	#PS_ON_PIN
 -1

	)

2324 
	#KILL_PIN
 -1

	)

2326 
	#HEATER_0_PIN
 4

	)

2327 
	#HEATER_1_PIN
 -1

2328 
	#HEATER_2_PIN
 -1

2329 
	#TEMP_0_PIN
 0

2330 
	#TEMP_1_PIN
 -1

2331 
	#TEMP_2_PIN
 -1

2332 
	#HEATER_BED_PIN
 -1

2333 
	#TEMP_BED_PIN
 -1

2334 

	)

2338 #i‡
MB
(
OMCA
)

2339 
	#KNOWN_BOARD
 1

	)

2341 #i‡!
deföed
(
__AVR_ATmega644P__
Ë&& !deföed(
__AVR_ATmega644__
)

2342 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'S™guöo' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
. (
FöÆ
 
OMCA
 
bﬂrd
)

2345 
	#X_STEP_PIN
 26

	)

2346 
	#X_DIR_PIN
 25

	)

2347 
	#X_ENABLE_PIN
 10

	)

2348 
	#X_STOP_PIN
 0

	)

2350 
	#Y_STEP_PIN
 28

	)

2351 
	#Y_DIR_PIN
 27

	)

2352 
	#Y_ENABLE_PIN
 10

	)

2353 
	#Y_STOP_PIN
 1

	)

2355 
	#Z_STEP_PIN
 23

	)

2356 
	#Z_DIR_PIN
 22

	)

2357 
	#Z_ENABLE_PIN
 10

	)

2358 
	#Z_STOP_PIN
 2

	)

2360 
	#E0_STEP_PIN
 24

	)

2361 
	#E0_DIR_PIN
 21

	)

2362 
	#E0_ENABLE_PIN
 10

	)

2365 
	#__FS
 20

	)

2366 
	#__FD
 19

	)

2367 
	#__GS
 18

	)

2368 
	#__GD
 13

	)

2370 
	#UNUSED_PWM
 14

	)

2372 
	#E1_STEP_PIN
 -1

2373 
	#E1_DIR_PIN
 -1

2374 
	#E1_ENABLE_PIN
 -1

2375 

	)

2376 
	#E2_STEP_PIN
 -1

2377 
	#E2_DIR_PIN
 -1

2378 
	#E2_ENABLE_PIN
 -1

2379 

	)

2380 
	#SDPOWER
 -1

	)

2381 
	#SDSS
 11

	)

2382 
	#SDCARDDETECT
 -1

2383 
	#LED_PIN
 -1

	)

2384 
	#FAN_PIN
 14

	)

2385 
	#PS_ON_PIN
 -1

	)

2386 
	#KILL_PIN
 -1

	)

2388 
	#HEATER_0_PIN
 3

	)

2389 
	#HEATER_1_PIN
 -1

	)

2390 
	#HEATER_2_PIN
 -1

	)

2391 
	#HEATER_1_PIN
 -1

	)

2392 
	#HEATER_2_PIN
 -1

	)

2393 
	#TEMP_0_PIN
 0

2394 
	#TEMP_1_PIN
 1

2395 
	#TEMP_2_PIN
 -1

2396 
	#HEATER_BED_PIN
 4

	)

2397 
	#TEMP_BED_PIN
 2

2398 

	)

2399 
	#I2C_SCL
 16

	)

2400 
	#I2C_SDA
 17

	)

2407 #i‡
MB
(
RAMBO
)

2408 
	#KNOWN_BOARD


	)

2409 #i‚de‡
__AVR_ATmega2560__


2410 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'ArduöÿMeg®2560' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

2413 
	#LARGE_FLASH
 
åue


	)

2415 
	#X_STEP_PIN
 37

	)

2416 
	#X_DIR_PIN
 48

	)

2417 
	#X_MIN_PIN
 12

	)

2418 
	#X_MAX_PIN
 24

	)

2419 
	#X_ENABLE_PIN
 29

	)

2420 
	#X_MS1_PIN
 40

	)

2421 
	#X_MS2_PIN
 41

	)

2423 
	#Y_STEP_PIN
 36

	)

2424 
	#Y_DIR_PIN
 49

	)

2425 
	#Y_MIN_PIN
 11

	)

2426 
	#Y_MAX_PIN
 23

	)

2427 
	#Y_ENABLE_PIN
 28

	)

2428 
	#Y_MS1_PIN
 69

	)

2429 
	#Y_MS2_PIN
 39

	)

2431 
	#Z_STEP_PIN
 35

	)

2432 
	#Z_DIR_PIN
 47

	)

2433 
	#Z_MIN_PIN
 10

	)

2434 
	#Z_MAX_PIN
 30

	)

2435 
	#Z_ENABLE_PIN
 27

	)

2436 
	#Z_MS1_PIN
 68

	)

2437 
	#Z_MS2_PIN
 67

	)

2439 
	#HEATER_BED_PIN
 3

	)

2440 
	#TEMP_BED_PIN
 2

	)

2442 
	#HEATER_0_PIN
 9

	)

2443 
	#TEMP_0_PIN
 0

	)

2445 
	#HEATER_1_PIN
 7

	)

2446 
	#TEMP_1_PIN
 1

	)

2448 #ifde‡
BARICUDA


2449 
	#HEATER_2_PIN
 6

	)

2451 
	#HEATER_2_PIN
 -1

	)

2453 
	#TEMP_2_PIN
 -1

	)

2455 
	#E0_STEP_PIN
 34

	)

2456 
	#E0_DIR_PIN
 43

	)

2457 
	#E0_ENABLE_PIN
 26

	)

2458 
	#E0_MS1_PIN
 65

	)

2459 
	#E0_MS2_PIN
 66

	)

2461 
	#E1_STEP_PIN
 33

	)

2462 
	#E1_DIR_PIN
 42

	)

2463 
	#E1_ENABLE_PIN
 25

	)

2464 
	#E1_MS1_PIN
 63

	)

2465 
	#E1_MS2_PIN
 64

	)

2467 
	#DIGIPOTSS_PIN
 38

	)

2468 
	#DIGIPOT_CHANNELS
 {4,5,3,0,1}

2469 

	)

2470 
	#SDPOWER
 -1

	)

2471 
	#SDSS
 53

	)

2472 
	#LED_PIN
 13

	)

2473 
	#FAN_PIN
 8

	)

2474 
	#PS_ON_PIN
 4

	)

2475 
	#KILL_PIN
 -1

2476 
	#SUICIDE_PIN
 -1

2477 

	)

2478 #ifde‡
ULTRA_LCD


2479 
	#KILL_PIN
 80

	)

2480 #ifde‡
NEWPANEL


2482 
	#BEEPER
 79

2483 
	#LCD_PINS_RS
 70

	)

2484 
	#LCD_PINS_ENABLE
 71

	)

2485 
	#LCD_PINS_D4
 72

	)

2486 
	#LCD_PINS_D5
 73

	)

2487 
	#LCD_PINS_D6
 74

	)

2488 
	#LCD_PINS_D7
 75

	)

2491 
	#BTN_EN1
 76

	)

2492 
	#BTN_EN2
 77

	)

2493 
	#BTN_ENC
 78

2494 

	)

2495 
	#BLEN_C
 2

	)

2496 
	#BLEN_B
 1

	)

2497 
	#BLEN_A
 0

	)

2499 
	#SDCARDDETECT
 81

2500 

	)

2502 
	#í¸Ÿ0
 0

	)

2503 
	#í¸Ÿ1
 2

	)

2504 
	#í¸Ÿ2
 3

	)

2505 
	#í¸Ÿ3
 1

	)

2508 
	#BEEPER
 33 
No
 
Bì≥r
 
added


	)

2516 
	#LCD_PINS_RS
 75

	)

2517 
	#LCD_PINS_ENABLE
 17

	)

2518 
	#LCD_PINS_D4
 23

	)

2519 
	#LCD_PINS_D5
 25

	)

2520 
	#LCD_PINS_D6
 27

	)

2521 
	#LCD_PINS_D7
 29

	)

2524 
	#í¸Ÿ0
 0

	)

2525 
	#í¸Ÿ1
 2

	)

2526 
	#í¸Ÿ2
 3

	)

2527 
	#í¸Ÿ3
 1

	)

2531 
	#BL_LE
 7

	)

2532 
	#BL_UP
 6

	)

2533 
	#BL_MI
 5

	)

2534 
	#BL_DW
 4

	)

2535 
	#BL_RI
 3

	)

2536 
	#BL_ST
 2

	)

2537 
	#BLEN_B
 1

	)

2538 
	#BLEN_A
 0

	)

2542 #ifde‡
FILAMENT_SENSOR


2544 
	#FILWIDTH_PIN
 3

	)

2553 #i‡
MB
(
MEGATRONICS
)

2554 
	#KNOWN_BOARD
 1

	)

2557 #i‚de‡
__AVR_ATmega2560__


2558 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'ArduöÿMega' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

2562 
	#LARGE_FLASH
 
åue


	)

2564 
	#X_STEP_PIN
 26

	)

2565 
	#X_DIR_PIN
 28

	)

2566 
	#X_ENABLE_PIN
 24

	)

2567 
	#X_MIN_PIN
 41

	)

2568 
	#X_MAX_PIN
 37

	)

2570 
	#Y_STEP_PIN
 60

2571 
	#Y_DIR_PIN
 61

2572 
	#Y_ENABLE_PIN
 22

	)

2573 
	#Y_MIN_PIN
 14

	)

2574 
	#Y_MAX_PIN
 15

	)

2576 
	#Z_STEP_PIN
 54

2577 
	#Z_DIR_PIN
 55

2578 
	#Z_ENABLE_PIN
 56

2579 
	#Z_MIN_PIN
 18

	)

2580 
	#Z_MAX_PIN
 19

	)

2582 
	#E0_STEP_PIN
 31

	)

2583 
	#E0_DIR_PIN
 32

	)

2584 
	#E0_ENABLE_PIN
 38

	)

2586 
	#E1_STEP_PIN
 34

	)

2587 
	#E1_DIR_PIN
 36

	)

2588 
	#E1_ENABLE_PIN
 30

	)

2590 
	#SDPOWER
 -1

	)

2591 
	#SDSS
 53

	)

2592 
	#LED_PIN
 13

	)

2595 
	#FAN_PIN
 7

2596 
	#PS_ON_PIN
 12

	)

2597 
	#KILL_PIN
 -1

	)

2599 
	#HEATER_0_PIN
 9

2600 
	#HEATER_1_PIN
 8

2601 
	#HEATER_2_PIN
 -1

	)

2603 #i‡
TEMP_SENSOR_0
 == -1

2604 
	#TEMP_0_PIN
 8

2605 #ñ£

	)

2606 
	#TEMP_0_PIN
 13

2607 

	)

2610 
	#TEMP_1_PIN
 15

2611 
	#TEMP_2_PIN
 -1

2612 
	#HEATER_BED_PIN
 10

2613 
	#TEMP_BED_PIN
 14

2614 

	)

2615 
	#BEEPER
 33

2616 

	)

2618 #ifde‡
ULTRA_LCD


2620 #ifde‡
NEWPANEL


2623 
	#LCD_PINS_RS
 16

	)

2624 
	#LCD_PINS_ENABLE
 17

	)

2625 
	#LCD_PINS_D4
 23

	)

2626 
	#LCD_PINS_D5
 25

	)

2627 
	#LCD_PINS_D6
 27

	)

2628 
	#LCD_PINS_D7
 29

	)

2631 
	#BTN_EN1
 59

	)

2632 
	#BTN_EN2
 64

	)

2633 
	#BTN_ENC
 43

2634 

	)

2635 
	#BLEN_C
 2

	)

2636 
	#BLEN_B
 1

	)

2637 
	#BLEN_A
 0

	)

2639 
	#SDCARDDETECT
 -1

2640 

	)

2642 
	#í¸Ÿ0
 0

	)

2643 
	#í¸Ÿ1
 2

	)

2644 
	#í¸Ÿ2
 3

	)

2645 
	#í¸Ÿ3
 1

	)

2655 #i‡
MB
(
MEGATRONICS_2
)

2656 
	#KNOWN_BOARD
 1

	)

2659 #i‚de‡
__AVR_ATmega2560__


2660 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'ArduöÿMega' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

2663 
	#LARGE_FLASH
 
åue


	)

2665 
	#X_STEP_PIN
 26

	)

2666 
	#X_DIR_PIN
 27

	)

2667 
	#X_ENABLE_PIN
 25

	)

2668 
	#X_MIN_PIN
 37

	)

2669 
	#X_MAX_PIN
 40

2670 

	)

2671 
	#Y_STEP_PIN
 4

2672 
	#Y_DIR_PIN
 54

2673 
	#Y_ENABLE_PIN
 5

	)

2674 
	#Y_MIN_PIN
 41

	)

2675 
	#Y_MAX_PIN
 38

2676 

	)

2677 
	#Z_STEP_PIN
 56

2678 
	#Z_DIR_PIN
 60

2679 
	#Z_ENABLE_PIN
 55

2680 
	#Z_MIN_PIN
 18

	)

2681 
	#Z_MAX_PIN
 19

	)

2683 
	#E0_STEP_PIN
 35

	)

2684 
	#E0_DIR_PIN
 36

	)

2685 
	#E0_ENABLE_PIN
 34

	)

2687 
	#E1_STEP_PIN
 29

	)

2688 
	#E1_DIR_PIN
 39

	)

2689 
	#E1_ENABLE_PIN
 28

	)

2691 
	#E2_STEP_PIN
 23

	)

2692 
	#E2_DIR_PIN
 24

	)

2693 
	#E2_ENABLE_PIN
 22

	)

2695 
	#SDPOWER
 -1

	)

2696 
	#SDSS
 53

	)

2697 
	#LED_PIN
 13

	)

2699 
	#FAN_PIN
 7

	)

2700 
	#FAN2_PIN
 6

	)

2701 
	#PS_ON_PIN
 12

	)

2702 
	#KILL_PIN
 -1

	)

2704 
	#HEATER_0_PIN
 9

2705 
	#HEATER_1_PIN
 8

2706 
	#HEATER_2_PIN
 -1

	)

2708 #i‡
TEMP_SENSOR_0
 == -1

2709 
	#TEMP_0_PIN
 4

2710 #ñ£

	)

2711 
	#TEMP_0_PIN
 13

2713 

	)

2715 #i‡
TEMP_SENSOR_1
 == -1

2716 
	#TEMP_1_PIN
 8

2717 #ñ£

	)

2718 
	#TEMP_1_PIN
 15

2720 

	)

2721 
	#TEMP_2_PIN
 -1

2722 

	)

2723 
	#HEATER_BED_PIN
 10

2724 

	)

2725 #i‡
TEMP_SENSOR_BED
 == -1

2726 
	#TEMP_BED_PIN
 8

2727 #ñ£

	)

2728 
	#TEMP_BED_PIN
 14

2730 

	)

2731 
	#BEEPER
 64

	)

2734 
	#LCD_PINS_RS
 14

	)

2735 
	#LCD_PINS_ENABLE
 15

	)

2736 
	#LCD_PINS_D4
 30

	)

2737 
	#LCD_PINS_D5
 31

	)

2738 
	#LCD_PINS_D6
 32

	)

2739 
	#LCD_PINS_D7
 33

	)

2743 
	#BTN_EN1
 61

	)

2744 
	#BTN_EN2
 59

	)

2745 
	#BTN_ENC
 43

2746 

	)

2747 
	#BLEN_C
 2

	)

2748 
	#BLEN_B
 1

	)

2749 
	#BLEN_A
 0

	)

2751 
	#SDCARDDETECT
 -1

2752 

	)

2754 
	#í¸Ÿ0
 0

	)

2755 
	#í¸Ÿ1
 2

	)

2756 
	#í¸Ÿ2
 3

	)

2757 
	#í¸Ÿ3
 1

	)

2766 #i‡
MB
(
MEGATRONICS_1
)

2767 
	#KNOWN_BOARD
 1

	)

2770 #i‚de‡
__AVR_ATmega1281__


2771 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'Möôr⁄ic†' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

2774 
	#LARGE_FLASH
 
åue


	)

2776 
	#X_STEP_PIN
 48

	)

2777 
	#X_DIR_PIN
 47

	)

2778 
	#X_ENABLE_PIN
 49

	)

2779 
	#X_MIN_PIN
 5

	)

2780 
	#X_MAX_PIN
 -1

2781 

	)

2782 
	#Y_STEP_PIN
 39

2783 
	#Y_DIR_PIN
 40

2784 
	#Y_ENABLE_PIN
 38

	)

2785 
	#Y_MIN_PIN
 2

	)

2786 
	#Y_MAX_PIN
 -1

2787 

	)

2788 
	#Z_STEP_PIN
 42

2789 
	#Z_DIR_PIN
 43

2790 
	#Z_ENABLE_PIN
 41

2791 
	#Z_MIN_PIN
 6

	)

2792 
	#Z_MAX_PIN
 -1

	)

2794 
	#E0_STEP_PIN
 45

	)

2795 
	#E0_DIR_PIN
 44

	)

2796 
	#E0_ENABLE_PIN
 27

	)

2798 
	#E1_STEP_PIN
 36

	)

2799 
	#E1_DIR_PIN
 35

	)

2800 
	#E1_ENABLE_PIN
 37

	)

2802 
	#E2_STEP_PIN
 -1

	)

2803 
	#E2_DIR_PIN
 -1

	)

2804 
	#E2_ENABLE_PIN
 -1

	)

2806 
	#SDPOWER
 -1

	)

2807 
	#SDSS
 16

	)

2808 
	#LED_PIN
 46

	)

2810 
	#FAN_PIN
 9

	)

2811 
	#FAN2_PIN
 -1

	)

2812 
	#PS_ON_PIN
 -1

	)

2813 
	#KILL_PIN
 -1

	)

2815 
	#HEATER_0_PIN
 7

2816 
	#HEATER_1_PIN
 8

2817 
	#HEATER_2_PIN
 -1

	)

2820 
	#TEMP_0_PIN
 7

2821 
	#TEMP_1_PIN
 6

2822 
	#TEMP_2_PIN
 -1

2823 

	)

2824 
	#HEATER_BED_PIN
 3

2825 
	#TEMP_BED_PIN
 6

2826 

	)

2827 
	#BEEPER
 -1

	)

2830 
	#LCD_PINS_RS
 -1

	)

2831 
	#LCD_PINS_ENABLE
 -1

	)

2832 
	#LCD_PINS_D4
 -1

	)

2833 
	#LCD_PINS_D5
 -1

	)

2834 
	#LCD_PINS_D6
 -1

	)

2835 
	#LCD_PINS_D7
 -1

	)

2839 
	#BTN_EN1
 -1

	)

2840 
	#BTN_EN2
 -1

	)

2841 
	#BTN_ENC
 -1

2842 

	)

2843 
	#BLEN_C
 2

	)

2844 
	#BLEN_B
 1

	)

2845 
	#BLEN_A
 0

	)

2847 
	#SDCARDDETECT
 -1

2848 

	)

2850 
	#í¸Ÿ0
 0

	)

2851 
	#í¸Ÿ1
 2

	)

2852 
	#í¸Ÿ2
 3

	)

2853 
	#í¸Ÿ3
 1

	)

2861 #i‡
MB
(
CHEAPTRONIC
)

2862 
	#KNOWN_BOARD
 1

	)

2864 #i‚de‡
__AVR_ATmega2560__


2865 #îr‹ 
O›s
! 
Make
 
suª
 
you
 
have
 'ArduöÿMega' 
£À˘ed
 
‰om
 
the
 'Toﬁ†-> Bﬂrds' 
míu
.

2868 
	#LARGE_FLASH
 
åue


	)

2871 
	#X_STEP_PIN
 14

	)

2872 
	#X_DIR_PIN
 15

	)

2873 
	#X_ENABLE_PIN
 24

	)

2876 
	#X_MIN_PIN
 3

	)

2877 
	#X_MAX_PIN
 -1

	)

2880 
	#Y_STEP_PIN
 35

	)

2881 
	#Y_DIR_PIN
 36

	)

2882 
	#Y_ENABLE_PIN
 31

	)

2885 
	#Y_MIN_PIN
 2

	)

2886 
	#Y_MAX_PIN
 -1

	)

2889 
	#Z_STEP_PIN
 40

	)

2890 
	#Z_DIR_PIN
 41

	)

2891 
	#Z_ENABLE_PIN
 37

	)

2894 
	#Z_MIN_PIN
 5

	)

2895 
	#Z_MAX_PIN
 -1

	)

2898 
	#E0_STEP_PIN
 26

	)

2899 
	#E0_DIR_PIN
 28

	)

2900 
	#E0_ENABLE_PIN
 25

	)

2903 
	#E1_STEP_PIN
 33

	)

2904 
	#E1_DIR_PIN
 34

	)

2905 
	#E1_ENABLE_PIN
 30

	)

2907 
	#SDPOWER
 -1

	)

2908 
	#SDSS
 -1

	)

2909 
	#LED_PIN
 -1

	)

2912 
	#FAN_PIN
 -1

	)

2914 
	#PS_ON_PIN
 -1

	)

2915 
	#KILL_PIN
 -1

	)

2917 
	#HEATER_0_PIN
 19

2918 
	#HEATER_1_PIN
 23

2920 
	#HEATER_BED_PIN
 22

	)

2922 
	#HEATER_2_PIN
 -1

	)

2925 
	#TEMP_0_PIN
 15

	)

2926 
	#TEMP_1_PIN
 14

	)

2927 
	#TEMP_2_PIN
 -1

	)

2928 
	#TEMP_BED_PIN
 13

	)

2931 
	#LCD_PINS_RS
 -1

	)

2932 
	#LCD_PINS_ENABLE
 -1

	)

2933 
	#LCD_PINS_D4
 -1

	)

2934 
	#LCD_PINS_D5
 -1

	)

2935 
	#LCD_PINS_D6
 -1

	)

2936 
	#LCD_PINS_D7
 -1

	)

2939 
	#BTN_EN1
 -1

	)

2940 
	#BTN_EN2
 -1

	)

2941 
	#BTN_ENC
 -1

	)

2943 
	#BLEN_C
 2

	)

2944 
	#BLEN_B
 1

	)

2945 
	#BLEN_A
 0

	)

2948 
	#SDCARDDETECT
 -1

	)

2951 
	#í¸Ÿ0
 0

	)

2952 
	#í¸Ÿ1
 2

	)

2953 
	#í¸Ÿ2
 3

	)

2954 
	#í¸Ÿ3
 1

	)

2960 #i‚de‡
KNOWN_BOARD


2961 #îr‹ 
Unknown
 
MOTHERBOARD
 
vÆue
 
ö
 
c⁄figuøti⁄
.
h


2965 
	#_E0_PINS
 
E0_STEP_PIN
, 
E0_DIR_PIN
, 
E0_ENABLE_PIN
, 
HEATER_0_PIN
,

	)

2966 #i‡
EXTRUDERS
 > 1

2967 
	#_E1_PINS
 
E1_STEP_PIN
, 
E1_DIR_PIN
, 
E1_ENABLE_PIN
, 
HEATER_1_PIN
,

	)

2969 
	#_E1_PINS


	)

2971 #i‡
EXTRUDERS
 > 2

2972 
	#_E2_PINS
 
E2_STEP_PIN
, 
E2_DIR_PIN
, 
E2_ENABLE_PIN
, 
HEATER_2_PIN
,

	)

2974 
	#_E2_PINS


	)

2977 #ifde‡
X_STOP_PIN


2978 #i‡
X_HOME_DIR
 < 0

2979 
	#X_MIN_PIN
 
X_STOP_PIN


	)

2980 
	#X_MAX_PIN
 -1

	)

2982 
	#X_MIN_PIN
 -1

	)

2983 
	#X_MAX_PIN
 
X_STOP_PIN


	)

2987 #ifde‡
Y_STOP_PIN


2988 #i‡
Y_HOME_DIR
 < 0

2989 
	#Y_MIN_PIN
 
Y_STOP_PIN


	)

2990 
	#Y_MAX_PIN
 -1

	)

2992 
	#Y_MIN_PIN
 -1

	)

2993 
	#Y_MAX_PIN
 
Y_STOP_PIN


	)

2997 #ifde‡
Z_STOP_PIN


2998 #i‡
Z_HOME_DIR
 < 0

2999 
	#Z_MIN_PIN
 
Z_STOP_PIN


	)

3000 
	#Z_MAX_PIN
 -1

	)

3002 
	#Z_MIN_PIN
 -1

	)

3003 
	#Z_MAX_PIN
 
Z_STOP_PIN


	)

3007 #ifde‡
DISABLE_MAX_ENDSTOPS


3008 
	#X_MAX_PIN
 -1

	)

3009 
	#Y_MAX_PIN
 -1

	)

3010 
	#Z_MAX_PIN
 -1

	)

3013 #ifde‡
DISABLE_MIN_ENDSTOPS


3014 
	#X_MIN_PIN
 -1

	)

3015 
	#Y_MIN_PIN
 -1

	)

3016 
	#Z_MIN_PIN
 -1

	)

3019 
	#SENSITIVE_PINS
 {0, 1, 
X_STEP_PIN
, 
X_DIR_PIN
, 
X_ENABLE_PIN
, 
X_MIN_PIN
, 
X_MAX_PIN
, 
Y_STEP_PIN
, 
Y_DIR_PIN
, 
Y_ENABLE_PIN
, 
Y_MIN_PIN
, 
Y_MAX_PIN
, 
Z_STEP_PIN
, 
Z_DIR_PIN
, 
Z_ENABLE_PIN
, 
Z_MIN_PIN
, 
Z_MAX_PIN
, 
PS_ON_PIN
, \

3020 
HEATER_BED_PIN
, 
FAN_PIN
, \

3021 
_E0_PINS
 
_E1_PINS
 
_E2_PINS
 \

3022 
	`™ÆogI≈utToDigôÆPö
(
TEMP_0_PIN
),á«logI≈utToDigôÆPö(
TEMP_1_PIN
),á«logI≈utToDigôÆPö(
TEMP_2_PIN
),á«logI≈utToDigôÆPö(
TEMP_BED_PIN
Ë}

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/planner.cpp

54 
	~"M¨lö.h
"

55 
	~"∂™√r.h
"

56 
	~"°ï≥r.h
"

57 
	~"ãm≥øtuª.h
"

58 
	~"u…ølcd.h
"

59 
	~"œnguage.h
"

65 
	gmö£gmíâime
;

66 
	gmax_„edøã
[
NUM_AXIS
];

67 
	gaxis_°ïs_≥r_unô
[
NUM_AXIS
];

68 
	gmax_ac˚Àøti⁄_unôs_≥r_sq_£c⁄d
[
NUM_AXIS
];

69 
	gmöimum„edøã
;

70 
	gac˚Àøti⁄
;

71 
	gªåa˘_ac˚Àøti⁄
;

72 
	gmax_xy_jîk
;

73 
	gmax_z_jîk
;

74 
	gmax_e_jîk
;

75 
	gmöåavñ„edøã
;

76 
	gaxis_°ïs_≥r_sqr_£c⁄d
[
NUM_AXIS
];

78 #ifde‡
ENABLE_AUTO_BED_LEVELING


80 
m©rix_3x3
 
	g∂™_bed_Àvñ_m©rix
 = {

88 
	gposôi⁄
[
NUM_AXIS
];

89 
	g¥evious_•ìd
[
NUM_AXIS
];

90 
	g¥evious_nomöÆ_•ìd
;

92 #ifde‡
AUTOTEMP


93 
	gautŸemp_max
=250;

94 
	gautŸemp_mö
=210;

95 
	gautŸemp_Á˘‹
=0.1;

96 
boﬁ
 
	gautŸemp_íabÀd
=
Ál£
;

99 
	gg_uc_exåudî_œ°_move
[3] = {0,0,0};

104 
block_t
 
	gblock_buf„r
[
BLOCK_BUFFER_SIZE
];

105 vﬁ©ûê
	gblock_buf„r_hód
;

106 vﬁ©ûê
	gblock_buf„r_èû
;

111 #ifde‡
PREVENT_DANGEROUS_EXTRUDE


112 
	gexåude_mö_ãmp
=
EXTRUDE_MINTEMP
;

114 #ifde‡
XY_FREQUENCY_LIMIT


115 
	#MAX_FREQ_TIME
 (1000000.0/
XY_FREQUENCY_LIMIT
)

	)

117 
	gﬁd_dúe˘i⁄_bôs
 = 0;

118 
	gx_£gmít_time
[3]={
MAX_FREQ_TIME
 + 1,0,0};

119 
	gy_£gmít_time
[3]={
MAX_FREQ_TIME
 + 1,0,0};

122 #ifde‡
FILAMENT_SENSOR


123 
	gmós_ßm∂e
;

128 
öt8_t
 
	$√xt_block_ödex
(
öt8_t
 
block_ödex
) {

129 
block_ödex
++;

130 i‡(
block_ödex
 =
BLOCK_BUFFER_SIZE
) {

131 
block_ödex
 = 0;

133 (
block_ödex
);

134 
	}
}

138 
öt8_t
 
	$¥ev_block_ödex
(
öt8_t
 
block_ödex
) {

139 i‡(
block_ödex
 == 0) {

140 
block_ödex
 = 
BLOCK_BUFFER_SIZE
;

142 
block_ödex
--;

143 (
block_ödex
);

144 
	}
}

152 
FORCE_INLINE
 
	$e°im©e_ac˚Àøti⁄_di°™˚
(
öôül_øã
, 
èrgë_øã
, 
ac˚Àøti⁄
)

154 i‡(
ac˚Àøti⁄
!=0) {

155 ((
èrgë_øã
*èrgë_øã-
öôül_øã
*initial_rate)/

156 (2.0*
ac˚Àøti⁄
));

161 
	}
}

168 
FORCE_INLINE
 
	$öãr£˘i⁄_di°™˚
(
öôül_øã
, 
föÆ_øã
, 
ac˚Àøti⁄
, 
di°™˚
)

170 i‡(
ac˚Àøti⁄
!=0) {

171 ((2.0*
ac˚Àøti⁄
*
di°™˚
-
öôül_øã
*öôül_øã+
föÆ_øã
*final_rate)/

172 (4.0*
ac˚Àøti⁄
) );

177 
	}
}

181 
	$ˇlcuœã_å≠ezoid_f‹_block
(
block_t
 *
block
, 
íåy_Á˘‹
, 
exô_Á˘‹
) {

182 
öôül_øã
 = 
	`˚û
(
block
->
nomöÆ_øã
*
íåy_Á˘‹
);

183 
föÆ_øã
 = 
	`˚û
(
block
->
nomöÆ_øã
*
exô_Á˘‹
);

186 if(
öôül_øã
 <120) {

187 
öôül_øã
=120;

189 if(
föÆ_øã
 < 120) {

190 
föÆ_øã
=120;

193 
ac˚Àøti⁄
 = 
block
->
ac˚Àøti⁄_°
;

194 
öt32_t
 
ac˚Àøã_°ïs
 =

195 
	`˚û
(
	`e°im©e_ac˚Àøti⁄_di°™˚
(
öôül_øã
, 
block
->
nomöÆ_øã
, 
ac˚Àøti⁄
));

196 
öt32_t
 
de˚Àøã_°ïs
 =

197 
	`Êo‹
(
	`e°im©e_ac˚Àøti⁄_di°™˚
(
block
->
nomöÆ_øã
, 
föÆ_øã
, -
ac˚Àøti⁄
));

200 
öt32_t
 
∂©óu_°ïs
 = 
block
->
°ï_evít_cou¡
-
ac˚Àøã_°ïs
-
de˚Àøã_°ïs
;

205 i‡(
∂©óu_°ïs
 < 0) {

206 
ac˚Àøã_°ïs
 = 
	`˚û
(
	`öãr£˘i⁄_di°™˚
(
öôül_øã
, 
föÆ_øã
, 
ac˚Àøti⁄
, 
block
->
°ï_evít_cou¡
));

207 
ac˚Àøã_°ïs
 = 
	`max
(accelerate_steps,0);

208 
ac˚Àøã_°ïs
 = 
	`mö
((
uöt32_t
Ôc˚Àøã_°ïs,
block
->
°ï_evít_cou¡
);

209 
∂©óu_°ïs
 = 0;

212 #ifde‡
ADVANCE


213 vﬁ©ûê
öôül_adv™˚
 = 
block
->
adv™˚
*
íåy_Á˘‹
*entry_factor;

214 vﬁ©ûê
föÆ_adv™˚
 = 
block
->
adv™˚
*
exô_Á˘‹
*exit_factor;

219 
CRITICAL_SECTION_START
;

220 if(
block
->
busy
 =
Ál£
) {

221 
block
->
ac˚Àøã_u¡û
 = 
ac˚Àøã_°ïs
;

222 
block
->
de˚Àøã_a·î
 = 
ac˚Àøã_°ïs
+
∂©óu_°ïs
;

223 
block
->
öôül_øã
 = initial_rate;

224 
block
->
föÆ_øã
 = final_rate;

225 #ifde‡
ADVANCE


226 
block
->
öôül_adv™˚
 = initial_advance;

227 
block
->
föÆ_adv™˚
 = final_advance;

230 
CRITICAL_SECTION_END
;

231 
	}
}

235 
FORCE_INLINE
 
	$max_ÆlowabÀ_•ìd
(
ac˚Àøti⁄
, 
èrgë_vñocôy
, 
di°™˚
) {

236  
	`sqπ
(
èrgë_vñocôy
*èrgë_vñocôy-2*
ac˚Àøti⁄
*
di°™˚
);

237 
	}
}

249 
	$∂™√r_ªvî£_∑ss_kî√l
(
block_t
 *
¥evious
, block_à*
cuºít
, block_à*
√xt
) {

250 if(!
cuºít
) {

254 i‡(
√xt
) {

258 i‡(
cuºít
->
íåy_•ìd
 !cuºít->
max_íåy_•ìd
) {

262 i‡((!
cuºít
->
nomöÆ_Àngth_Êag
Ë&& (cuºít->
max_íåy_•ìd
 > 
√xt
->
íåy_•ìd
)) {

263 
cuºít
->
íåy_•ìd
 = 
	`mö
–cuºít->
max_íåy_•ìd
,

264 
	`max_ÆlowabÀ_•ìd
(-
cuºít
->
ac˚Àøti⁄
,
√xt
->
íåy_•ìd
,cuºít->
mûlimëîs
));

267 
cuºít
->
íåy_•ìd
 = cuºít->
max_íåy_•ìd
;

269 
cuºít
->
ªˇlcuœã_Êag
 = 
åue
;

273 
	}
}

277 
	$∂™√r_ªvî£_∑ss
() {

278 
uöt8_t
 
block_ödex
 = 
block_buf„r_hód
;

281 
CRITICAL_SECTION_START
;

282 
èû
 = 
block_buf„r_èû
;

283 
CRITICAL_SECTION_END


285 if(((
block_buf„r_hód
-
èû
 + 
BLOCK_BUFFER_SIZE
) & (BLOCK_BUFFER_SIZE - 1)) > 3) {

286 
block_ödex
 = (
block_buf„r_hód
 - 3Ë& (
BLOCK_BUFFER_SIZE
 - 1);

287 
block_t
 *
block
[3] = {

288 
NULL
, NULL, NULL };

289 
block_ödex
 !
èû
) {

290 
block_ödex
 = 
	`¥ev_block_ödex
(block_index);

291 
block
[2]= block[1];

292 
block
[1]= block[0];

293 
block
[0] = &
block_buf„r
[
block_ödex
];

294 
	`∂™√r_ªvî£_∑ss_kî√l
(
block
[0], block[1], block[2]);

297 
	}
}

300 
	$∂™√r_f‹w¨d_∑ss_kî√l
(
block_t
 *
¥evious
, block_à*
cuºít
, block_à*
√xt
) {

301 if(!
¥evious
) {

309 i‡(!
¥evious
->
nomöÆ_Àngth_Êag
) {

310 i‡(
¥evious
->
íåy_•ìd
 < 
cuºít
->entry_speed) {

311 
íåy_•ìd
 = 
	`mö
–
cuºít
->entry_speed,

312 
	`max_ÆlowabÀ_•ìd
(-
¥evious
->
ac˚Àøti⁄
,¥evious->
íåy_•ìd
,¥evious->
mûlimëîs
) );

315 i‡(
cuºít
->
íåy_•ìd
 !=Éntry_speed) {

316 
cuºít
->
íåy_•ìd
 =Éntry_speed;

317 
cuºít
->
ªˇlcuœã_Êag
 = 
åue
;

321 
	}
}

325 
	$∂™√r_f‹w¨d_∑ss
() {

326 
uöt8_t
 
block_ödex
 = 
block_buf„r_èû
;

327 
block_t
 *
block
[3] = {

328 
NULL
, NULL, NULL };

330 
block_ödex
 !
block_buf„r_hód
) {

331 
block
[0] = block[1];

332 
block
[1] = block[2];

333 
block
[2] = &
block_buf„r
[
block_ödex
];

334 
	`∂™√r_f‹w¨d_∑ss_kî√l
(
block
[0],block[1],block[2]);

335 
block_ödex
 = 
	`√xt_block_ödex
(block_index);

337 
	`∂™√r_f‹w¨d_∑ss_kî√l
(
block
[1], block[2], 
NULL
);

338 
	}
}

343 
	$∂™√r_ªˇlcuœã_å≠ezoids
() {

344 
öt8_t
 
block_ödex
 = 
block_buf„r_èû
;

345 
block_t
 *
cuºít
;

346 
block_t
 *
√xt
 = 
NULL
;

348 
block_ödex
 !
block_buf„r_hód
) {

349 
cuºít
 = 
√xt
;

350 
√xt
 = &
block_buf„r
[
block_ödex
];

351 i‡(
cuºít
) {

353 i‡(
cuºít
->
ªˇlcuœã_Êag
 || 
√xt
->recalculate_flag) {

355 
	`ˇlcuœã_å≠ezoid_f‹_block
(
cuºít
, cuºít->
íåy_•ìd
/cuºít->
nomöÆ_•ìd
,

356 
√xt
->
íåy_•ìd
/
cuºít
->
nomöÆ_•ìd
);

357 
cuºít
->
ªˇlcuœã_Êag
 = 
Ál£
;

360 
block_ödex
 = 
	`√xt_block_ödex
( block_index );

363 if(
√xt
 !
NULL
) {

364 
	`ˇlcuœã_å≠ezoid_f‹_block
(
√xt
,Çext->
íåy_•ìd
/√xt->
nomöÆ_•ìd
,

365 
MINIMUM_PLANNER_SPEED
/
√xt
->
nomöÆ_•ìd
);

366 
√xt
->
ªˇlcuœã_Êag
 = 
Ál£
;

368 
	}
}

387 
	$∂™√r_ªˇlcuœã
() {

388 
	`∂™√r_ªvî£_∑ss
();

389 
	`∂™√r_f‹w¨d_∑ss
();

390 
	`∂™√r_ªˇlcuœã_å≠ezoids
();

391 
	}
}

393 
	$∂™_öô
() {

394 
block_buf„r_hód
 = 0;

395 
block_buf„r_èû
 = 0;

396 
	`mem£t
(
posôi⁄
, 0, (position));

397 
¥evious_•ìd
[0] = 0.0;

398 
¥evious_•ìd
[1] = 0.0;

399 
¥evious_•ìd
[2] = 0.0;

400 
¥evious_•ìd
[3] = 0.0;

401 
¥evious_nomöÆ_•ìd
 = 0.0;

402 
	}
}

407 #ifde‡
AUTOTEMP


408 
	$gëHighES≥ed
()

410 
ﬁdt
=0;

411 if(!
autŸemp_íabÀd
){

414 if(
	`degT¨gëHŸíd0
()+2<
autŸemp_mö
) {

418 
high
=0.0;

419 
uöt8_t
 
block_ödex
 = 
block_buf„r_èû
;

421 
block_ödex
 !
block_buf„r_hód
) {

422 if((
block_buf„r
[
block_ödex
].
°ïs_x
 != 0) ||

423 (
block_buf„r
[
block_ödex
].
°ïs_y
 != 0) ||

424 (
block_buf„r
[
block_ödex
].
°ïs_z
 != 0)) {

425 
£
=((
block_buf„r
[
block_ödex
].
°ïs_e
)/(block_buf„r[block_ödex].
°ï_evít_cou¡
))*block_buf„r[block_ödex].
nomöÆ_•ìd
;

427 if(
£
>
high
)

429 
high
=
£
;

432 
block_ödex
 = (block_ödex+1Ë& (
BLOCK_BUFFER_SIZE
 - 1);

435 
g
=
autŸemp_mö
+
high
*
autŸemp_Á˘‹
;

436 
t
=
g
;

437 if(
t
<
autŸemp_mö
)

438 
t
=
autŸemp_mö
;

439 if(
t
>
autŸemp_max
)

440 
t
=
autŸemp_max
;

441 if(
ﬁdt
>
t
)

443 
t
=
AUTOTEMP_OLDWEIGHT
*
ﬁdt
+(1-AUTOTEMP_OLDWEIGHT)*t;

445 
ﬁdt
=
t
;

446 
	`£tT¨gëHŸíd0
(
t
);

447 
	}
}

450 
	$check_axes_a˘ivôy
()

452 
x_a˘ive
 = 0;

453 
y_a˘ive
 = 0;

454 
z_a˘ive
 = 0;

455 
e_a˘ive
 = 0;

456 
èû_Án_•ìd
 = 
ÁnS≥ed
;

457 #ifde‡
BARICUDA


458 
èû_vÆve_¥essuª
 = 
VÆvePªssuª
;

459 
èû_e_to_p_¥essuª
 = 
EtoPPªssuª
;

461 
block_t
 *
block
;

463 if(
block_buf„r_èû
 !
block_buf„r_hód
)

465 
uöt8_t
 
block_ödex
 = 
block_buf„r_èû
;

466 
èû_Án_•ìd
 = 
block_buf„r
[
block_ödex
].
Án_•ìd
;

467 #ifde‡
BARICUDA


468 
èû_vÆve_¥essuª
 = 
block_buf„r
[
block_ödex
].
vÆve_¥essuª
;

469 
èû_e_to_p_¥essuª
 = 
block_buf„r
[
block_ödex
].
e_to_p_¥essuª
;

471 
block_ödex
 !
block_buf„r_hód
)

473 
block
 = &
block_buf„r
[
block_ödex
];

474 if(
block
->
°ïs_x
 !0Ë
x_a˘ive
++;

475 if(
block
->
°ïs_y
 !0Ë
y_a˘ive
++;

476 if(
block
->
°ïs_z
 !0Ë
z_a˘ive
++;

477 if(
block
->
°ïs_e
 !0Ë
e_a˘ive
++;

478 
block_ödex
 = (block_ödex+1Ë& (
BLOCK_BUFFER_SIZE
 - 1);

481 if((
DISABLE_X
Ë&& (
x_a˘ive
 =0)Ë
	`dißbÀ_x
();

482 if((
DISABLE_Y
Ë&& (
y_a˘ive
 =0)Ë
	`dißbÀ_y
();

483 if((
DISABLE_Z
Ë&& (
z_a˘ive
 =0)Ë
	`dißbÀ_z
();

484 if((
DISABLE_E
Ë&& (
e_a˘ive
 == 0))

486 
	`dißbÀ_e0
();

487 
	`dißbÀ_e1
();

488 
	`dißbÀ_e2
();

490 #i‡
	`deföed
(
FAN_PIN
) && FAN_PIN > -1

491 #ifde‡
FAN_KICKSTART_TIME


492 
Án_kick_íd
;

493 i‡(
èû_Án_•ìd
) {

494 i‡(
Án_kick_íd
 == 0) {

496 
Án_kick_íd
 = 
	`mûlis
(Ë+ 
FAN_KICKSTART_TIME
;

497 
èû_Án_•ìd
 = 255;

498 } i‡(
Án_kick_íd
 > 
	`mûlis
())

500 
èû_Án_•ìd
 = 255;

502 
Án_kick_íd
 = 0;

505 #ifde‡
FAN_SOFT_PWM


506 
ÁnS≥edSo·Pwm
 = 
èû_Án_•ìd
;

508 
	`™ÆogWrôe
(
FAN_PIN
,
èû_Án_•ìd
);

511 #ifde‡
AUTOTEMP


512 
	`gëHighES≥ed
();

515 #ifde‡
BARICUDA


516 #i‡
	`deföed
(
HEATER_1_PIN
) && HEATER_1_PIN > -1

517 
	`™ÆogWrôe
(
HEATER_1_PIN
,
èû_vÆve_¥essuª
);

520 #i‡
	`deföed
(
HEATER_2_PIN
) && HEATER_2_PIN > -1

521 
	`™ÆogWrôe
(
HEATER_2_PIN
,
èû_e_to_p_¥essuª
);

524 
	}
}

527 
	gjun˘i⁄_devüti⁄
 = 0.1;

531 #ifde‡
ENABLE_AUTO_BED_LEVELING


532 
	$∂™_buf„r_löe
(
x
, 
y
, 
z
, c⁄° &
e
, 
„ed_øã
, c⁄° 
uöt8_t
 &
exåudî
)

534 
	$∂™_buf„r_löe
(c⁄° &
x
, c⁄° &
y
, c⁄° &
z
, c⁄° &
e
, 
„ed_øã
, c⁄° 
uöt8_t
 &
exåudî
)

538 
√xt_buf„r_hód
 = 
	`√xt_block_ödex
(
block_buf„r_hód
);

542 
block_buf„r_èû
 =
√xt_buf„r_hód
)

544 
	`m™age_hóãr
();

545 
	`m™age_öa˘ivôy
();

546 
	`lcd_upd©e
();

549 #ifde‡
ENABLE_AUTO_BED_LEVELING


550 
	`≠∂y_rŸ©i⁄_xyz
(
∂™_bed_Àvñ_m©rix
, 
x
, 
y
, 
z
);

556 
èrgë
[4];

557 
èrgë
[
X_AXIS
] = 
	`Ãound
(
x
*
axis_°ïs_≥r_unô
[X_AXIS]);

558 
èrgë
[
Y_AXIS
] = 
	`Ãound
(
y
*
axis_°ïs_≥r_unô
[Y_AXIS]);

559 
èrgë
[
Z_AXIS
] = 
	`Ãound
(
z
*
axis_°ïs_≥r_unô
[Z_AXIS]);

560 
èrgë
[
E_AXIS
] = 
	`Ãound
(
e
*
axis_°ïs_≥r_unô
[E_AXIS]);

562 #ifde‡
PREVENT_DANGEROUS_EXTRUDE


563 if(
èrgë
[
E_AXIS
]!=
posôi⁄
[E_AXIS])

565 if(
	`degHŸíd
(
a˘ive_exåudî
)<
exåude_mö_ãmp
)

567 
posôi⁄
[
E_AXIS
]=
èrgë
[E_AXIS];

568 
SERIAL_ECHO_START
;

569 
	`SERIAL_ECHOLNPGM
(
MSG_ERR_COLD_EXTRUDE_STOP
);

572 #ifde‡
PREVENT_LENGTHY_EXTRUDE


573 if(
	`œbs
(
èrgë
[
E_AXIS
]-
posôi⁄
[E_AXIS])>
axis_°ïs_≥r_unô
[E_AXIS]*
EXTRUDE_MAXLENGTH
)

575 
posôi⁄
[
E_AXIS
]=
èrgë
[E_AXIS];

576 
SERIAL_ECHO_START
;

577 
	`SERIAL_ECHOLNPGM
(
MSG_ERR_LONG_EXTRUDE_STOP
);

584 
block_t
 *
block
 = &
block_buf„r
[
block_buf„r_hód
];

587 
block
->
busy
 = 
Ál£
;

590 #i‚de‡
COREXY


592 
block
->
°ïs_x
 = 
	`œbs
(
èrgë
[
X_AXIS
]-
posôi⁄
[X_AXIS]);

593 
block
->
°ïs_y
 = 
	`œbs
(
èrgë
[
Y_AXIS
]-
posôi⁄
[Y_AXIS]);

597 
block
->
°ïs_x
 = 
	`œbs
((
èrgë
[
X_AXIS
]-
posôi⁄
[X_AXIS]Ë+ (èrgë[
Y_AXIS
]-position[Y_AXIS]));

598 
block
->
°ïs_y
 = 
	`œbs
((
èrgë
[
X_AXIS
]-
posôi⁄
[X_AXIS]Ë- (èrgë[
Y_AXIS
]-position[Y_AXIS]));

600 
block
->
°ïs_z
 = 
	`œbs
(
èrgë
[
Z_AXIS
]-
posôi⁄
[Z_AXIS]);

601 
block
->
°ïs_e
 = 
	`œbs
(
èrgë
[
E_AXIS
]-
posôi⁄
[E_AXIS]);

602 
block
->
°ïs_e
 *
vﬁumëric_mu…ùlõr
[
a˘ive_exåudî
];

603 
block
->
°ïs_e
 *
exåudemu…ùly
;

604 
block
->
°ïs_e
 /= 100;

605 
block
->
°ï_evít_cou¡
 = 
	`max
(block->
°ïs_x
, max(block->
°ïs_y
, max(block->
°ïs_z
, block->
°ïs_e
)));

608 i‡(
block
->
°ï_evít_cou¡
 <
dr›£gmíts
)

613 
block
->
Án_•ìd
 = 
ÁnS≥ed
;

614 #ifde‡
BARICUDA


615 
block
->
vÆve_¥essuª
 = 
VÆvePªssuª
;

616 
block
->
e_to_p_¥essuª
 = 
EtoPPªssuª
;

620 
block
->
dúe˘i⁄_bôs
 = 0;

621 #i‚de‡
COREXY


622 i‡(
èrgë
[
X_AXIS
] < 
posôi⁄
[X_AXIS])

624 
block
->
dúe˘i⁄_bôs
 |(1<<
X_AXIS
);

626 i‡(
èrgë
[
Y_AXIS
] < 
posôi⁄
[Y_AXIS])

628 
block
->
dúe˘i⁄_bôs
 |(1<<
Y_AXIS
);

631 i‡((
èrgë
[
X_AXIS
]-
posôi⁄
[X_AXIS]Ë+ (èrgë[
Y_AXIS
]-position[Y_AXIS]) < 0)

633 
block
->
dúe˘i⁄_bôs
 |(1<<
X_AXIS
);

635 i‡((
èrgë
[
X_AXIS
]-
posôi⁄
[X_AXIS]Ë- (èrgë[
Y_AXIS
]-position[Y_AXIS]) < 0)

637 
block
->
dúe˘i⁄_bôs
 |(1<<
Y_AXIS
);

640 i‡(
èrgë
[
Z_AXIS
] < 
posôi⁄
[Z_AXIS])

642 
block
->
dúe˘i⁄_bôs
 |(1<<
Z_AXIS
);

644 i‡(
èrgë
[
E_AXIS
] < 
posôi⁄
[E_AXIS])

646 
block
->
dúe˘i⁄_bôs
 |(1<<
E_AXIS
);

649 
block
->
a˘ive_exåudî
 = 
exåudî
;

652 #ifde‡
COREXY


653 if((
block
->
°ïs_x
 !0Ë|| (block->
°ïs_y
 != 0))

655 
	`íabÀ_x
();

656 
	`íabÀ_y
();

659 if(
block
->
°ïs_x
 !0Ë
	`íabÀ_x
();

660 if(
block
->
°ïs_y
 !0Ë
	`íabÀ_y
();

662 #i‚de‡
Z_LATE_ENABLE


663 if(
block
->
°ïs_z
 !0Ë
	`íabÀ_z
();

667 if(
block
->
°ïs_e
 != 0)

669 i‡(
DISABLE_INACTIVE_EXTRUDER
)

672 if(
g_uc_exåudî_œ°_move
[0] > 0) g_uc_extruder_last_move[0]--;

673 if(
g_uc_exåudî_œ°_move
[1] > 0) g_uc_extruder_last_move[1]--;

674 if(
g_uc_exåudî_œ°_move
[2] > 0) g_uc_extruder_last_move[2]--;

676 
exåudî
)

679 
	`íabÀ_e0
();

680 
g_uc_exåudî_œ°_move
[0] = 
BLOCK_BUFFER_SIZE
*2;

682 if(
g_uc_exåudî_œ°_move
[1] =0Ë
	`dißbÀ_e1
();

683 if(
g_uc_exåudî_œ°_move
[2] =0Ë
	`dißbÀ_e2
();

686 
	`íabÀ_e1
();

687 
g_uc_exåudî_œ°_move
[1] = 
BLOCK_BUFFER_SIZE
*2;

689 if(
g_uc_exåudî_œ°_move
[0] =0Ë
	`dißbÀ_e0
();

690 if(
g_uc_exåudî_œ°_move
[2] =0Ë
	`dißbÀ_e2
();

693 
	`íabÀ_e2
();

694 
g_uc_exåudî_œ°_move
[2] = 
BLOCK_BUFFER_SIZE
*2;

696 if(
g_uc_exåudî_œ°_move
[0] =0Ë
	`dißbÀ_e0
();

697 if(
g_uc_exåudî_œ°_move
[1] =0Ë
	`dißbÀ_e1
();

703 
	`íabÀ_e0
();

704 
	`íabÀ_e1
();

705 
	`íabÀ_e2
();

709 i‡(
block
->
°ïs_e
 == 0)

711 if(
„ed_øã
<
möåavñ„edøã
) feed_rate=mintravelfeedrate;

715 if(
„ed_øã
<
möimum„edøã
) feed_rate=minimumfeedrate;

718 
dñè_mm
[4];

719 #i‚de‡
COREXY


720 
dñè_mm
[
X_AXIS
] = (
èrgë
[X_AXIS]-
posôi⁄
[X_AXIS])/
axis_°ïs_≥r_unô
[X_AXIS];

721 
dñè_mm
[
Y_AXIS
] = (
èrgë
[Y_AXIS]-
posôi⁄
[Y_AXIS])/
axis_°ïs_≥r_unô
[Y_AXIS];

723 
dñè_mm
[
X_AXIS
] = ((
èrgë
[X_AXIS]-
posôi⁄
[X_AXIS]Ë+ (èrgë[
Y_AXIS
]-posôi⁄[Y_AXIS]))/
axis_°ïs_≥r_unô
[X_AXIS];

724 
dñè_mm
[
Y_AXIS
] = ((
èrgë
[
X_AXIS
]-
posôi⁄
[X_AXIS]Ë- (èrgë[Y_AXIS]-posôi⁄[Y_AXIS]))/
axis_°ïs_≥r_unô
[Y_AXIS];

726 
dñè_mm
[
Z_AXIS
] = (
èrgë
[Z_AXIS]-
posôi⁄
[Z_AXIS])/
axis_°ïs_≥r_unô
[Z_AXIS];

727 
dñè_mm
[
E_AXIS
] = ((
èrgë
[E_AXIS]-
posôi⁄
[E_AXIS])/
axis_°ïs_≥r_unô
[E_AXIS])*
vﬁumëric_mu…ùlõr
[
a˘ive_exåudî
]*
exåudemu…ùly
/100.0;

728 i‡–
block
->
°ïs_x
 <=
dr›£gmíts
 && block->
°ïs_y
 <=dr›£gmít†&& block->
°ïs_z
 <=dropsegments )

730 
block
->
mûlimëîs
 = 
	`Ábs
(
dñè_mm
[
E_AXIS
]);

734 
block
->
mûlimëîs
 = 
	`sqπ
(
	`squ¨e
(
dñè_mm
[
X_AXIS
]Ë+ squ¨e(dñè_mm[
Y_AXIS
]Ë+ squ¨e(dñè_mm[
Z_AXIS
]));

736 
övî£_mûlimëîs
 = 1.0/
block
->
mûlimëîs
;

739 
övî£_£c⁄d
 = 
„ed_øã
 * 
övî£_mûlimëîs
;

741 
moves_queued
=(
block_buf„r_hód
-
block_buf„r_èû
 + 
BLOCK_BUFFER_SIZE
) & (BLOCK_BUFFER_SIZE - 1);

744 #ifde‡
OLD_SLOWDOWN


745 if(
moves_queued
 < (
BLOCK_BUFFER_SIZE
 * 0.5) && moves_queued > 1)

746 
„ed_øã
 = fìd_øã*
moves_queued
 / (
BLOCK_BUFFER_SIZE
 * 0.5);

749 #ifde‡
SLOWDOWN


751 
£gmít_time
 = 
	`Ãound
(1000000.0/
övî£_£c⁄d
);

752 i‡((
moves_queued
 > 1Ë&& (moves_queued < (
BLOCK_BUFFER_SIZE
 * 0.5)))

754 i‡(
£gmít_time
 < 
mö£gmíâime
)

756 
övî£_£c⁄d
=1000000.0/(
£gmít_time
+
	`Ãound
(2*(
mö£gmíâime
-£gmít_time)/
moves_queued
));

757 #ifde‡
XY_FREQUENCY_LIMIT


758 
£gmít_time
 = 
	`Ãound
(1000000.0/
övî£_£c⁄d
);

766 
block
->
nomöÆ_•ìd
 = block->
mûlimëîs
 * 
övî£_£c⁄d
;

767 
block
->
nomöÆ_øã
 = 
	`˚û
(block->
°ï_evít_cou¡
 * 
övî£_£c⁄d
);

769 #ifde‡
FILAMENT_SENSOR


773 if((
exåudî
==
FILAMENT_SENSOR_EXTRUDER_NUM
Ë&& (
dñay_ödex2
 > -1))

775 
dñay_di°
 = dñay_di° + 
dñè_mm
[
E_AXIS
];

777 
dñay_di°
 >(10*(
MAX_MEASUREMENT_DELAY
+1)))

778 
dñay_di°
 = dñay_di° - 10*(
MAX_MEASUREMENT_DELAY
+1);

779 
dñay_di°
<0)

780 
dñay_di°
 = dñay_di° + 10*(
MAX_MEASUREMENT_DELAY
+1);

782 
dñay_ödex1
=
dñay_di°
/10.0;

785 if(
dñay_ödex1
<0)

786 
dñay_ödex1
=0;

787 i‡(
dñay_ödex1
>
MAX_MEASUREMENT_DELAY
)

788 
dñay_ödex1
=
MAX_MEASUREMENT_DELAY
;

790 if(
dñay_ödex1
 !
dñay_ödex2
)

792 
mós_ßm∂e
=
	`widthFû_to_size_øtio
()-100;

794  
dñay_ödex1
 !
dñay_ödex2
)

796 
dñay_ödex2
 = delay_index2 + 1;

797 if(
dñay_ödex2
>
MAX_MEASUREMENT_DELAY
)

798 
dñay_ödex2
=dñay_ödex2-(
MAX_MEASUREMENT_DELAY
+1);

799 if(
dñay_ödex2
<0)

800 
dñay_ödex2
=0;

801 i‡(
dñay_ödex2
>
MAX_MEASUREMENT_DELAY
)

802 
dñay_ödex2
=
MAX_MEASUREMENT_DELAY
;

804 
mósuªmít_dñay
[
dñay_ödex2
]=
mós_ßm∂e
;

813 
cuºít_•ìd
[4];

814 
•ìd_Á˘‹
 = 1.0;

815 
i
=0; i < 4; i++)

817 
cuºít_•ìd
[
i
] = 
dñè_mm
[i] * 
övî£_£c⁄d
;

818 if(
	`Ábs
(
cuºít_•ìd
[
i
]Ë> 
max_„edøã
[i])

819 
•ìd_Á˘‹
 = 
	`mö
(•ìd_Á˘‹, 
max_„edøã
[
i
] / 
	`Ábs
(
cuºít_•ìd
[i]));

823 #ifde‡
XY_FREQUENCY_LIMIT


824 
	#MAX_FREQ_TIME
 (1000000.0/
XY_FREQUENCY_LIMIT
)

	)

826 
dúe˘i⁄_ch™ge
 = 
block
->
dúe˘i⁄_bôs
 ^ 
ﬁd_dúe˘i⁄_bôs
;

827 
ﬁd_dúe˘i⁄_bôs
 = 
block
->
dúe˘i⁄_bôs
;

828 
£gmít_time
 = 
	`Ãound
(()£gmít_timê/ 
•ìd_Á˘‹
);

830 if((
dúe˘i⁄_ch™ge
 & (1<<
X_AXIS
)) == 0)

832 
x_£gmít_time
[0] +
£gmít_time
;

836 
x_£gmít_time
[2] = x_segment_time[1];

837 
x_£gmít_time
[1] = x_segment_time[0];

838 
x_£gmít_time
[0] = 
£gmít_time
;

840 if((
dúe˘i⁄_ch™ge
 & (1<<
Y_AXIS
)) == 0)

842 
y_£gmít_time
[0] +
£gmít_time
;

846 
y_£gmít_time
[2] = y_segment_time[1];

847 
y_£gmít_time
[1] = y_segment_time[0];

848 
y_£gmít_time
[0] = 
£gmít_time
;

850 
max_x_£gmít_time
 = 
	`max
(
x_£gmít_time
[0], max(x_segment_time[1], x_segment_time[2]));

851 
max_y_£gmít_time
 = 
	`max
(
y_£gmít_time
[0], max(y_segment_time[1], y_segment_time[2]));

852 
mö_xy_£gmít_time
 =
	`mö
(
max_x_£gmít_time
, 
max_y_£gmít_time
);

853 if(
mö_xy_£gmít_time
 < 
MAX_FREQ_TIME
)

854 
•ìd_Á˘‹
 = 
	`mö
(•ìd_Á˘‹, s≥ed_Á˘‹ * ()
mö_xy_£gmít_time
 / ()
MAX_FREQ_TIME
);

858 if–
•ìd_Á˘‹
 < 1.0)

860 
i
=0; i < 4; i++)

862 
cuºít_•ìd
[
i
] *
•ìd_Á˘‹
;

864 
block
->
nomöÆ_•ìd
 *
•ìd_Á˘‹
;

865 
block
->
nomöÆ_øã
 *
•ìd_Á˘‹
;

869 
°ïs_≥r_mm
 = 
block
->
°ï_evít_cou¡
/block->
mûlimëîs
;

870 if(
block
->
°ïs_x
 =0 && block->
°ïs_y
 =0 && block->
°ïs_z
 == 0)

872 
block
->
ac˚Àøti⁄_°
 = 
	`˚û
(
ªåa˘_ac˚Àøti⁄
 * 
°ïs_≥r_mm
);

876 
block
->
ac˚Àøti⁄_°
 = 
	`˚û
(
ac˚Àøti⁄
 * 
°ïs_≥r_mm
);

878 if((()
block
->
ac˚Àøti⁄_°
 * ()block->
°ïs_x
 / ()block->
°ï_evít_cou¡
Ë> 
axis_°ïs_≥r_sqr_£c⁄d
[
X_AXIS
])

879 
block
->
ac˚Àøti⁄_°
 = 
axis_°ïs_≥r_sqr_£c⁄d
[
X_AXIS
];

880 if((()
block
->
ac˚Àøti⁄_°
 * ()block->
°ïs_y
 / ()block->
°ï_evít_cou¡
Ë> 
axis_°ïs_≥r_sqr_£c⁄d
[
Y_AXIS
])

881 
block
->
ac˚Àøti⁄_°
 = 
axis_°ïs_≥r_sqr_£c⁄d
[
Y_AXIS
];

882 if((()
block
->
ac˚Àøti⁄_°
 * ()block->
°ïs_e
 / ()block->
°ï_evít_cou¡
Ë> 
axis_°ïs_≥r_sqr_£c⁄d
[
E_AXIS
])

883 
block
->
ac˚Àøti⁄_°
 = 
axis_°ïs_≥r_sqr_£c⁄d
[
E_AXIS
];

884 if((()
block
->
ac˚Àøti⁄_°
 * ()block->
°ïs_z
 / ()block->
°ï_evít_cou¡
 ) > 
axis_°ïs_≥r_sqr_£c⁄d
[
Z_AXIS
])

885 
block
->
ac˚Àøti⁄_°
 = 
axis_°ïs_≥r_sqr_£c⁄d
[
Z_AXIS
];

887 
block
->
ac˚Àøti⁄
 = block->
ac˚Àøti⁄_°
 / 
°ïs_≥r_mm
;

888 
block
->
ac˚Àøti⁄_øã
 = ()(()block->
ac˚Àøti⁄_°
 * (16777216.0 / (
F_CPU
 / 8.0)));

892 
unô_vec
[3];

894 
unô_vec
[
X_AXIS
] = 
dñè_mm
[X_AXIS]*
övî£_mûlimëîs
;

895 
unô_vec
[
Y_AXIS
] = 
dñè_mm
[Y_AXIS]*
övî£_mûlimëîs
;

896 
unô_vec
[
Z_AXIS
] = 
dñè_mm
[Z_AXIS]*
övî£_mûlimëîs
;

907 
vmax_jun˘i⁄
 = 
MINIMUM_PLANNER_SPEED
;

910 i‡((
block_buf„r_hód
 !
block_buf„r_èû
Ë&& (
¥evious_nomöÆ_•ìd
 > 0.0)) {

913 
cos_thëa
 = - 
¥evious_unô_vec
[
X_AXIS
] * 
unô_vec
[X_AXIS]

914 - 
¥evious_unô_vec
[
Y_AXIS
] * 
unô_vec
[Y_AXIS]

915 - 
¥evious_unô_vec
[
Z_AXIS
] * 
unô_vec
[Z_AXIS] ;

918 i‡(
cos_thëa
 < 0.95) {

919 
vmax_jun˘i⁄
 = 
	`mö
(
¥evious_nomöÆ_•ìd
,
block
->
nomöÆ_•ìd
);

921 i‡(
cos_thëa
 > -0.95) {

923 
sö_thëa_d2
 = 
	`sqπ
(0.5*(1.0-
cos_thëa
));

924 
vmax_jun˘i⁄
 = 
	`mö
(vmax_junction,

925 
	`sqπ
(
block
->
ac˚Àøti⁄
 * 
jun˘i⁄_devüti⁄
 * 
sö_thëa_d2
/(1.0-sin_theta_d2)) );

931 
vmax_jun˘i⁄
 = 
max_xy_jîk
/2;

932 
vmax_jun˘i⁄_Á˘‹
 = 1.0;

933 if(
	`Ábs
(
cuºít_•ìd
[
Z_AXIS
]Ë> 
max_z_jîk
/2)

934 
vmax_jun˘i⁄
 = 
	`mö
(vmax_jun˘i⁄, 
max_z_jîk
/2);

935 if(
	`Ábs
(
cuºít_•ìd
[
E_AXIS
]Ë> 
max_e_jîk
/2)

936 
vmax_jun˘i⁄
 = 
	`mö
(vmax_jun˘i⁄, 
max_e_jîk
/2);

937 
vmax_jun˘i⁄
 = 
	`mö
(vmax_jun˘i⁄, 
block
->
nomöÆ_•ìd
);

938 
ß„_•ìd
 = 
vmax_jun˘i⁄
;

940 i‡((
moves_queued
 > 1Ë&& (
¥evious_nomöÆ_•ìd
 > 0.0001)) {

941 
jîk
 = 
	`sqπ
(
	`pow
((
cuºít_•ìd
[
X_AXIS
]-
¥evious_•ìd
[X_AXIS]), 2)+pow((cuºít_•ìd[
Y_AXIS
]-previous_speed[Y_AXIS]), 2));

943 
vmax_jun˘i⁄
 = 
block
->
nomöÆ_•ìd
;

945 i‡(
jîk
 > 
max_xy_jîk
) {

946 
vmax_jun˘i⁄_Á˘‹
 = (
max_xy_jîk
/
jîk
);

948 if(
	`Ábs
(
cuºít_•ìd
[
Z_AXIS
] - 
¥evious_•ìd
[Z_AXIS]Ë> 
max_z_jîk
) {

949 
vmax_jun˘i⁄_Á˘‹

	`mö
(vmax_jun˘i⁄_Á˘‹, (
max_z_jîk
/
	`Ábs
(
cuºít_•ìd
[
Z_AXIS
] - 
¥evious_•ìd
[Z_AXIS])));

951 if(
	`Ábs
(
cuºít_•ìd
[
E_AXIS
] - 
¥evious_•ìd
[E_AXIS]Ë> 
max_e_jîk
) {

952 
vmax_jun˘i⁄_Á˘‹
 = 
	`mö
(vmax_jun˘i⁄_Á˘‹, (
max_e_jîk
/
	`Ábs
(
cuºít_•ìd
[
E_AXIS
] - 
¥evious_•ìd
[E_AXIS])));

954 
vmax_jun˘i⁄
 = 
	`mö
(
¥evious_nomöÆ_•ìd
, vmax_jun˘i⁄ * 
vmax_jun˘i⁄_Á˘‹
);

956 
block
->
max_íåy_•ìd
 = 
vmax_jun˘i⁄
;

959 
v_ÆlowabÀ
 = 
	`max_ÆlowabÀ_•ìd
(-
block
->
ac˚Àøti⁄
,
MINIMUM_PLANNER_SPEED
,block->
mûlimëîs
);

960 
block
->
íåy_•ìd
 = 
	`mö
(
vmax_jun˘i⁄
, 
v_ÆlowabÀ
);

970 i‡(
block
->
nomöÆ_•ìd
 <
v_ÆlowabÀ
) {

971 
block
->
nomöÆ_Àngth_Êag
 = 
åue
;

974 
block
->
nomöÆ_Àngth_Êag
 = 
Ál£
;

976 
block
->
ªˇlcuœã_Êag
 = 
åue
;

979 
	`mem˝y
(
¥evious_•ìd
, 
cuºít_•ìd
, (previous_speed));

980 
¥evious_nomöÆ_•ìd
 = 
block
->
nomöÆ_•ìd
;

983 #ifde‡
ADVANCE


985 if((
block
->
°ïs_e
 =0Ë|| (block->
°ïs_x
 =0 && block->
°ïs_y
 =0 && block->
°ïs_z
 == 0)) {

986 
block
->
adv™˚_øã
 = 0;

987 
block
->
adv™˚
 = 0;

990 
acc_di°
 = 
	`e°im©e_ac˚Àøti⁄_di°™˚
(0, 
block
->
nomöÆ_øã
, block->
ac˚Àøti⁄_°
);

991 
adv™˚
 = (
STEPS_PER_CUBIC_MM_E
 * 
EXTRUDER_ADVANCE_K
) *

992 (
cuºít_•ìd
[
E_AXIS
] * cuºít_•ìd[E_AXIS] * 
EXTRUSION_AREA
 * EXTRUSION_AREA)*256;

993 
block
->
adv™˚
 =ádvance;

994 if(
acc_di°
 == 0) {

995 
block
->
adv™˚_øã
 = 0;

998 
block
->
adv™˚_øã
 = 
adv™˚
 / ()
acc_di°
;

1010 
	`ˇlcuœã_å≠ezoid_f‹_block
(
block
, block->
íåy_•ìd
/block->
nomöÆ_•ìd
,

1011 
ß„_•ìd
/
block
->
nomöÆ_•ìd
);

1014 
block_buf„r_hód
 = 
√xt_buf„r_hód
;

1017 
	`mem˝y
(
posôi⁄
, 
èrgë
, (target));

1019 
	`∂™√r_ªˇlcuœã
();

1021 
	`°_wake_up
();

1022 
	}
}

1024 #ifde‡
ENABLE_AUTO_BED_LEVELING


1025 
ve˘‹_3
 
	$∂™_gë_posôi⁄
() {

1026 
ve˘‹_3
 
posôi⁄
 = 
	`ve˘‹_3
(
	`°_gë_posôi⁄_mm
(
X_AXIS
), st_gë_posôi⁄_mm(
Y_AXIS
), st_gë_posôi⁄_mm(
Z_AXIS
));

1030 
m©rix_3x3
 
övî£
 = m©rix_3x3::
	`å™•o£
(
∂™_bed_Àvñ_m©rix
);

1032 
posôi⁄
.
	`≠∂y_rŸ©i⁄
(
övî£
);

1035  
posôi⁄
;

1036 
	}
}

1039 #ifde‡
ENABLE_AUTO_BED_LEVELING


1040 
	$∂™_£t_posôi⁄
(
x
, 
y
, 
z
, c⁄° &
e
)

1042 
	`≠∂y_rŸ©i⁄_xyz
(
∂™_bed_Àvñ_m©rix
, 
x
, 
y
, 
z
);

1044 
	$∂™_£t_posôi⁄
(c⁄° &
x
, c⁄° &
y
, c⁄° &
z
, c⁄° &
e
)

1048 
posôi⁄
[
X_AXIS
] = 
	`Ãound
(
x
*
axis_°ïs_≥r_unô
[X_AXIS]);

1049 
posôi⁄
[
Y_AXIS
] = 
	`Ãound
(
y
*
axis_°ïs_≥r_unô
[Y_AXIS]);

1050 
posôi⁄
[
Z_AXIS
] = 
	`Ãound
(
z
*
axis_°ïs_≥r_unô
[Z_AXIS]);

1051 
posôi⁄
[
E_AXIS
] = 
	`Ãound
(
e
*
axis_°ïs_≥r_unô
[E_AXIS]);

1052 
	`°_£t_posôi⁄
(
posôi⁄
[
X_AXIS
],Öosôi⁄[
Y_AXIS
],Öosôi⁄[
Z_AXIS
],Öosôi⁄[
E_AXIS
]);

1053 
¥evious_nomöÆ_•ìd
 = 0.0;

1054 
¥evious_•ìd
[0] = 0.0;

1055 
¥evious_•ìd
[1] = 0.0;

1056 
¥evious_•ìd
[2] = 0.0;

1057 
¥evious_•ìd
[3] = 0.0;

1058 
	}
}

1060 
	$∂™_£t_e_posôi⁄
(c⁄° &
e
)

1062 
posôi⁄
[
E_AXIS
] = 
	`Ãound
(
e
*
axis_°ïs_≥r_unô
[E_AXIS]);

1063 
	`°_£t_e_posôi⁄
(
posôi⁄
[
E_AXIS
]);

1064 
	}
}

1066 
uöt8_t
 
	$move•œ¬ed
()

1068  (
block_buf„r_hód
-
block_buf„r_èû
 + 
BLOCK_BUFFER_SIZE
) & (BLOCK_BUFFER_SIZE - 1);

1069 
	}
}

1071 #ifde‡
PREVENT_DANGEROUS_EXTRUDE


1072 
	$£t_exåude_mö_ãmp
(
ãmp
)

1074 
exåude_mö_ãmp
=
ãmp
;

1075 
	}
}

1079 
	$ª£t_ac˚Àøti⁄_øãs
()

1081 
öt8_t
 
i
=0; i < 
NUM_AXIS
; i++)

1083 
axis_°ïs_≥r_sqr_£c⁄d
[
i
] = 
max_ac˚Àøti⁄_unôs_≥r_sq_£c⁄d
[i] * 
axis_°ïs_≥r_unô
[i];

1085 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/planner.h

24 #i‚de‡
∂™√r_h


25 
	#∂™√r_h


	)

27 
	~"M¨lö.h
"

29 #ifde‡
ENABLE_AUTO_BED_LEVELING


30 
	~"ve˘‹_3.h
"

37 
	m°ïs_x
, 
	m°ïs_y
, 
	m°ïs_z
, 
	m°ïs_e
;

38 
	m°ï_evít_cou¡
;

39 
	mac˚Àøã_u¡û
;

40 
	mde˚Àøã_a·î
;

41 
	mac˚Àøti⁄_øã
;

42 
	mdúe˘i⁄_bôs
;

43 
	ma˘ive_exåudî
;

44 #ifde‡
ADVANCE


45 
	madv™˚_øã
;

46 vﬁ©ûê
	möôül_adv™˚
;

47 vﬁ©ûê
	mföÆ_adv™˚
;

48 
	madv™˚
;

53 
	mnomöÆ_•ìd
;

54 
	míåy_•ìd
;

55 
	mmax_íåy_•ìd
;

56 
	mmûlimëîs
;

57 
	mac˚Àøti⁄
;

58 
	mªˇlcuœã_Êag
;

59 
	mnomöÆ_Àngth_Êag
;

62 
	mnomöÆ_øã
;

63 
	möôül_øã
;

64 
	mföÆ_øã
;

65 
	mac˚Àøti⁄_°
;

66 
	mÁn_•ìd
;

67 #ifde‡
BARICUDA


68 
	mvÆve_¥essuª
;

69 
	me_to_p_¥essuª
;

71 vﬁ©ûê
	mbusy
;

72 } 
	tblock_t
;

74 #ifde‡
ENABLE_AUTO_BED_LEVELING


76 
m©rix_3x3
 
∂™_bed_Àvñ_m©rix
;

80 
∂™_öô
();

85 #ifde‡
ENABLE_AUTO_BED_LEVELING


86 
∂™_buf„r_löe
(
x
, 
y
, 
z
, c⁄° &
e
, 
„ed_øã
, c⁄° 
uöt8_t
 &
exåudî
);

89 
ve˘‹_3
 
∂™_gë_posôi⁄
();

91 
∂™_buf„r_löe
(c⁄° &
x
, c⁄° &
y
, c⁄° &
z
, c⁄° &
e
, 
„ed_øã
, c⁄° 
uöt8_t
 &
exåudî
);

95 #ifde‡
ENABLE_AUTO_BED_LEVELING


96 
∂™_£t_posôi⁄
(
x
, 
y
, 
z
, c⁄° &
e
);

98 
∂™_£t_posôi⁄
(c⁄° &
x
, c⁄° &
y
, c⁄° &
z
, c⁄° &
e
);

101 
∂™_£t_e_posôi⁄
(c⁄° &
e
);

105 
check_axes_a˘ivôy
();

106 
uöt8_t
 
move•œ¬ed
();

108 
mö£gmíâime
;

109 
max_„edøã
[
NUM_AXIS
];

110 
axis_°ïs_≥r_unô
[
NUM_AXIS
];

111 
max_ac˚Àøti⁄_unôs_≥r_sq_£c⁄d
[
NUM_AXIS
];

112 
möimum„edøã
;

113 
ac˚Àøti⁄
;

114 
ªåa˘_ac˚Àøti⁄
;

115 
max_xy_jîk
;

116 
max_z_jîk
;

117 
max_e_jîk
;

118 
möåavñ„edøã
;

119 
axis_°ïs_≥r_sqr_£c⁄d
[
NUM_AXIS
];

121 #ifde‡
AUTOTEMP


122 
boﬁ
 
autŸemp_íabÀd
;

123 
autŸemp_max
;

124 
autŸemp_mö
;

125 
autŸemp_Á˘‹
;

131 
block_t
 
block_buf„r
[
BLOCK_BUFFER_SIZE
];

132 vﬁ©ûê
block_buf„r_hód
;

133 vﬁ©ûê
block_buf„r_èû
;

136 
FORCE_INLINE
 
	$∂™_disˇrd_cuºít_block
()

138 i‡(
block_buf„r_hód
 !
block_buf„r_èû
) {

139 
block_buf„r_èû
 = (block_buf„r_èû + 1Ë& (
BLOCK_BUFFER_SIZE
 - 1);

141 
	}
}

144 
FORCE_INLINE
 
block_t
 *
	$∂™_gë_cuºít_block
()

146 i‡(
block_buf„r_hód
 =
block_buf„r_èû
) {

147 (
NULL
);

149 
block_t
 *
block
 = &
block_buf„r
[
block_buf„r_èû
];

150 
block
->
busy
 = 
åue
;

151 (
block
);

152 
	}
}

155 
FORCE_INLINE
 
boﬁ
 
	$blocks_queued
(Ë{  (
block_buf„r_hód
 !
block_buf„r_èû
); 
	}
}

157 #ifde‡
PREVENT_DANGEROUS_EXTRUDE


158 
£t_exåude_mö_ãmp
(
ãmp
);

161 
ª£t_ac˚Àøti⁄_øãs
();

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/qr_solve.cpp

1 
	~"qr_sﬁve.h
"

3 #ifde‡
AUTO_BED_LEVELING_GRID


5 
	~<°dlib.h
>

6 
	~<m©h.h
>

10 
	$i4_mö
 ( 
i1
, 
i2
 )

37 
vÆue
;

39 i‡–
i1
 < 
i2
 )

41 
vÆue
 = 
i1
;

45 
vÆue
 = 
i2
;

47  
vÆue
;

48 
	}
}

50 
	$r8_ïsû⁄
 ( )

83 c⁄° 
vÆue
 = 2.220446049250313E-016;

85  
vÆue
;

86 
	}
}

88 
	$r8_max
 ( 
x
, 
y
 )

115 
vÆue
;

117 i‡–
y
 < 
x
 )

119 
vÆue
 = 
x
;

123 
vÆue
 = 
y
;

125  
vÆue
;

126 
	}
}

128 
	$r8_abs
 ( 
x
 )

155 
vÆue
;

157 i‡–0.0 <
x
 )

159 
vÆue
 = + 
x
;

163 
vÆue
 = - 
x
;

165  
vÆue
;

166 
	}
}

168 
	$r8_sign
 ( 
x
 )

195 
vÆue
;

197 i‡–
x
 < 0.0 )

199 
vÆue
 = - 1.0;

203 
vÆue
 = + 1.0;

205  
vÆue
;

206 
	}
}

208 
	$r8m©_amax
 ( 
m
, 
n
, 
a
[] )

244 
i
;

245 
j
;

246 
vÆue
;

248 
vÆue
 = 
	`r8_abs
 ( 
a
[0+0*
m
] );

250  
j
 = 0; j < 
n
; j++ )

252  
i
 = 0; i < 
m
; i++ )

254 i‡–
vÆue
 < 
	`r8_abs
 ( 
a
[
i
+
j
*
m
] ) )

256 
vÆue
 = 
	`r8_abs
 ( 
a
[
i
+
j
*
m
] );

260  
vÆue
;

261 
	}
}

263 *
	$r8m©_c›y_√w
 ( 
m
, 
n
, 
a1
[] )

297 *
a2
;

298 
i
;

299 
j
;

301 
a2
 = ( * ) 
	`mÆloc
 ( 
m
 * 
n
 *  ( ) );

303  
j
 = 0; j < 
n
; j++ )

305  
i
 = 0; i < 
m
; i++ )

307 
a2
[
i
+
j
*
m
] = 
a1
[i+j*m];

311  
a2
;

312 
	}
}

316 
	$daxpy
 ( 
n
, 
da
, 
dx
[], 
öcx
, 
dy
[], 
öcy
 )

368 
i
;

369 
ix
;

370 
iy
;

371 
m
;

373 i‡–
n
 <= 0 )

378 i‡–
da
 == 0.0 )

386 i‡–
öcx
 !1 || 
öcy
 != 1 )

388 i‡–0 <
öcx
 )

390 
ix
 = 0;

394 
ix
 = ( - 
n
 + 1 ) * 
öcx
;

397 i‡–0 <
öcy
 )

399 
iy
 = 0;

403 
iy
 = ( - 
n
 + 1 ) * 
öcy
;

406  
i
 = 0; i < 
n
; i++ )

408 
dy
[
iy
] = dy[iy] + 
da
 * 
dx
[
ix
];

409 
ix
 = ix + 
öcx
;

410 
iy
 = iy + 
öcy
;

418 
m
 = 
n
 % 4;

420  
i
 = 0; i < 
m
; i++ )

422 
dy
[
i
] = dy[i] + 
da
 * 
dx
[i];

425  
i
 = 
m
; i < 
n
; i = i + 4 )

427 
dy
[
i
 ] = dy[ò] + 
da
 * 
dx
[i ];

428 
dy
[
i
+1] = dy[i+1] + 
da
 * 
dx
[i+1];

429 
dy
[
i
+2] = dy[i+2] + 
da
 * 
dx
[i+2];

430 
dy
[
i
+3] = dy[i+3] + 
da
 * 
dx
[i+3];

434 
	}
}

437 
	$ddŸ
 ( 
n
, 
dx
[], 
öcx
, 
dy
[], 
öcy
 )

489 
dãmp
;

490 
i
;

491 
ix
;

492 
iy
;

493 
m
;

495 
dãmp
 = 0.0;

497 i‡–
n
 <= 0 )

499  
dãmp
;

505 i‡–
öcx
 !1 || 
öcy
 != 1 )

507 i‡–0 <
öcx
 )

509 
ix
 = 0;

513 
ix
 = ( - 
n
 + 1 ) * 
öcx
;

516 i‡–0 <
öcy
 )

518 
iy
 = 0;

522 
iy
 = ( - 
n
 + 1 ) * 
öcy
;

525  
i
 = 0; i < 
n
; i++ )

527 
dãmp
 = dãm∞+ 
dx
[
ix
] * 
dy
[
iy
];

528 
ix
 = ix + 
öcx
;

529 
iy
 = iy + 
öcy
;

537 
m
 = 
n
 % 5;

539  
i
 = 0; i < 
m
; i++ )

541 
dãmp
 = dãm∞+ 
dx
[
i
] * 
dy
[i];

544  
i
 = 
m
; i < 
n
; i = i + 5 )

546 
dãmp
 = dãm∞+ 
dx
[
i
 ] * 
dy
[i ]

547 + 
dx
[
i
+1] * 
dy
[i+1]

548 + 
dx
[
i
+2] * 
dy
[i+2]

549 + 
dx
[
i
+3] * 
dy
[i+3]

550 + 
dx
[
i
+4] * 
dy
[i+4];

553  
dãmp
;

554 
	}
}

557 
	$dƒm2
 ( 
n
, 
x
[], 
öcx
 )

604 
absxi
;

605 
i
;

606 
ix
;

607 
n‹m
;

608 
sˇÀ
;

609 
ssq
;

610 
vÆue
;

612 i‡–
n
 < 1 || 
öcx
 < 1 )

614 
n‹m
 = 0.0;

616 i‡–
n
 == 1 )

618 
n‹m
 = 
	`r8_abs
 ( 
x
[0] );

622 
sˇÀ
 = 0.0;

623 
ssq
 = 1.0;

624 
ix
 = 0;

626  
i
 = 0; i < 
n
; i++ )

628 i‡–
x
[
ix
] != 0.0 )

630 
absxi
 = 
	`r8_abs
 ( 
x
[
ix
] );

631 i‡–
sˇÀ
 < 
absxi
 )

633 
ssq
 = 1.0 + ssq * ( 
sˇÀ
 / 
absxi
 ) * ( scale /ábsxi );

634 
sˇÀ
 = 
absxi
;

638 
ssq
 = ssq + ( 
absxi
 / 
sˇÀ
 ) * (ábsxi / scale );

641 
ix
 = ix + 
öcx
;

644 
n‹m
 = 
sˇÀ
 * 
	`sqπ
 ( 
ssq
 );

647  
n‹m
;

648 
	}
}

651 
	$dqønk
 ( 
a
[], 
lda
, 
m
, 
n
, 
tﬁ
, *
kr
,

652 
jpvt
[], 
qøux
[] )

726 
i
;

727 
j
;

728 
job
;

729 
k
;

730 *
w‹k
;

732  
i
 = 0; i < 
n
; i++ )

734 
jpvt
[
i
] = 0;

737 
w‹k
 = ( * ) 
	`mÆloc
 ( 
n
 *  ( ) );

738 
job
 = 1;

740 
	`dqrdc
 ( 
a
, 
lda
, 
m
, 
n
, 
qøux
, 
jpvt
, 
w‹k
, 
job
 );

742 *
kr
 = 0;

743 
k
 = 
	`i4_mö
 ( 
m
, 
n
 );

745  
j
 = 0; j < 
k
; j++ )

747 i‡–
	`r8_abs
 ( 
a
[
j
+j*
lda
] ) <
tﬁ
 *Ñ8_abs (á[0+0*lda] ) )

751 *
kr
 = 
j
 + 1;

754 
	`‰ì
 ( 
w‹k
 );

757 
	}
}

760 
	$dqrdc
 ( 
a
[], 
lda
, 
n
, 
p
, 
qøux
[], 
jpvt
[],

761 
w‹k
[], 
job
 )

841 
j
;

842 
jp
;

843 
l
;

844 
lup
;

845 
maxj
;

846 
maxƒm
;

847 
ƒmxl
;

848 
∂
;

849 
pu
;

850 
sw≠j
;

851 
t
;

852 
â
;

854 
∂
 = 1;

855 
pu
 = 0;

859 i‡–
job
 != 0 )

861  
j
 = 1; j <
p
; j++ )

863 
sw≠j
 = ( 0 < 
jpvt
[
j
-1] );

865 i‡–
jpvt
[
j
-1] < 0 )

867 
jpvt
[
j
-1] = -j;

871 
jpvt
[
j
-1] = j;

874 i‡–
sw≠j
 )

876 i‡–
j
 !
∂
 )

878 
	`dsw≠
 ( 
n
, 
a
+0+(
∂
-1)*
lda
, 1,á+0+(
j
-1), 1 );

880 
jpvt
[
j
-1] = jpvt[
∂
-1];

881 
jpvt
[
∂
-1] = 
j
;

882 
∂
 =Öl + 1;

885 
pu
 = 
p
;

887  
j
 = 
p
; 1 <= j; j-- )

889 i‡–
jpvt
[
j
-1] < 0 )

891 
jpvt
[
j
-1] = -jpvt[j-1];

893 i‡–
j
 !
pu
 )

895 
	`dsw≠
 ( 
n
, 
a
+0+(
pu
-1)*
lda
, 1,á+0+(
j
-1)*lda, 1 );

896 
jp
 = 
jpvt
[
pu
-1];

897 
jpvt
[
pu
-1] = jpvt[
j
-1];

898 
jpvt
[
j
-1] = 
jp
;

900 
pu
 =Öu - 1;

907  
j
 = 
∂
; j <
pu
; j++ )

909 
qøux
[
j
-1] = 
	`dƒm2
 ( 
n
, 
a
+0+(j-1)*
lda
, 1 );

912  
j
 = 
∂
; j <
pu
; j++ )

914 
w‹k
[
j
-1] = 
qøux
[j-1];

919 
lup
 = 
	`i4_mö
 ( 
n
, 
p
 );

921  
l
 = 1;Ü <
lup
;Ü++ )

926 i‡–
∂
 <
l
 &&Ü < 
pu
 )

928 
maxƒm
 = 0.0;

929 
maxj
 = 
l
;

930  
j
 = 
l
; j <
pu
; j++ )

932 i‡–
maxƒm
 < 
qøux
[
j
-1] )

934 
maxƒm
 = 
qøux
[
j
-1];

935 
maxj
 = 
j
;

939 i‡–
maxj
 !
l
 )

941 
	`dsw≠
 ( 
n
, 
a
+0+(
l
-1)*
lda
, 1,á+0+(
maxj
-1)*lda, 1 );

942 
qøux
[
maxj
-1] = qøux[
l
-1];

943 
w‹k
[
maxj
-1] = w‹k[
l
-1];

944 
jp
 = 
jpvt
[
maxj
-1];

945 
jpvt
[
maxj
-1] = jpvt[
l
-1];

946 
jpvt
[
l
-1] = 
jp
;

952 
qøux
[
l
-1] = 0.0;

954 i‡–
l
 !
n
 )

956 
ƒmxl
 = 
	`dƒm2
 ( 
n
-
l
+1, 
a
+l-1+÷-1)*
lda
, 1 );

958 i‡–
ƒmxl
 != 0.0 )

960 i‡–
a
[
l
-1+÷-1)*
lda
] != 0.0 )

962 
ƒmxl
 =Çrmx»* 
	`r8_sign
 ( 
a
[
l
-1+÷-1)*
lda
] );

965 
	`dsˇl
 ( 
n
-
l
+1, 1.0 / 
ƒmxl
, 
a
+l-1+÷-1)*
lda
, 1 );

966 
a
[
l
-1+÷-1)*
lda
] = 1.0 +á[l-1+(l-1)*lda];

970  
j
 = 
l
 + 1; j <
p
; j++ )

972 
t
 = -
	`ddŸ
 ( 
n
-
l
+1, 
a
+l-1+÷-1)*
lda
, 1,á+l-1+(
j
-1)*lda, 1 )

973 / 
a
[
l
-1+÷-1)*
lda
];

974 
	`daxpy
 ( 
n
-
l
+1, 
t
, 
a
+l-1+÷-1)*
lda
, 1,á+l-1+(
j
-1)*lda, 1 );

976 i‡–
∂
 <
j
 && j <
pu
 )

978 i‡–
qøux
[
j
-1] != 0.0 )

980 
â
 = 1.0 - 
	`pow
 ( 
	`r8_abs
 ( 
a
[
l
-1+(
j
-1)*
lda
] ) / 
qøux
[j-1], 2 );

981 
â
 = 
	`r8_max
 (Åt, 0.0 );

982 
t
 = 
â
;

983 
â
 = 1.0 + 0.05 *Åà* 
	`pow
 ( 
qøux
[
j
-1] / 
w‹k
[j-1], 2 );

985 i‡–
â
 != 1.0 )

987 
qøux
[
j
-1] = qøux[j-1] * 
	`sqπ
 ( 
t
 );

991 
qøux
[
j
-1] = 
	`dƒm2
 ( 
n
-
l
, 
a
+l+(j-1)*
lda
, 1 );

992 
w‹k
[
j
-1] = 
qøux
[j-1];

1000 
qøux
[
l
-1] = 
a
[l-1+÷-1)*
lda
];

1001 
a
[
l
-1+÷-1)*
lda
] = -
ƒmxl
;

1006 
	}
}

1009 
	$dqæs
 ( 
a
[], 
lda
, 
m
, 
n
, 
tﬁ
, *
kr
, 
b
[],

1010 
x
[], 
rsd
[], 
jpvt
[], 
qøux
[], 
ôask
 )

1117 
öd
;

1119 i‡–
lda
 < 
m
 )

1124 
öd
 = -1;

1125  
öd
;

1128 i‡–
n
 <= 0 )

1133 
öd
 = -2;

1134  
öd
;

1137 i‡–
ôask
 < 1 )

1142 
öd
 = -3;

1143  
öd
;

1146 
öd
 = 0;

1150 i‡–
ôask
 == 1 )

1152 
	`dqønk
 ( 
a
, 
lda
, 
m
, 
n
, 
tﬁ
, 
kr
, 
jpvt
, 
qøux
 );

1157 
	`dqæss
 ( 
a
, 
lda
, 
m
, 
n
, *
kr
, 
b
, 
x
, 
rsd
, 
jpvt
, 
qøux
 );

1159  
öd
;

1160 
	}
}

1163 
	$dqæss
 ( 
a
[], 
lda
, 
m
, 
n
, 
kr
, 
b
[], 
x
[],

1164 
rsd
[], 
jpvt
[], 
qøux
[] )

1237 
i
;

1238 
öfo
;

1239 
j
;

1240 
job
;

1241 
k
;

1242 
t
;

1244 i‡–
kr
 != 0 )

1246 
job
 = 110;

1247 
öfo
 = 
	`dqr¶
 ( 
a
, 
lda
, 
m
, 
kr
, 
qøux
, 
b
, 
rsd
,Ñsd, 
x
,Ñsd,Ñsd, 
job
 );

1250  
i
 = 0; i < 
n
; i++ )

1252 
jpvt
[
i
] = - jpvt[i];

1255  
i
 = 
kr
; i < 
n
; i++ )

1257 
x
[
i
] = 0.0;

1260  
j
 = 1; j <
n
; j++ )

1262 i‡–
jpvt
[
j
-1] <= 0 )

1264 
k
 = - 
jpvt
[
j
-1];

1265 
jpvt
[
j
-1] = 
k
;

1267  
k
 !
j
 )

1269 
t
 = 
x
[
j
-1];

1270 
x
[
j
-1] = x[
k
-1];

1271 
x
[
k
-1] = 
t
;

1272 
jpvt
[
k
-1] = -jpvt[k-1];

1273 
k
 = 
jpvt
[k-1];

1278 
	}
}

1281 
	$dqr¶
 ( 
a
[], 
lda
, 
n
, 
k
, 
qøux
[], 
y
[],

1282 
qy
[], 
qty
[], 
b
[], 
rsd
[], 
ab
[], 
job
 )

1420 
ˇb
;

1421 
cb
;

1422 
cqty
;

1423 
cqy
;

1424 
¸
;

1425 
i
;

1426 
öfo
;

1427 
j
;

1428 
jj
;

1429 
ju
;

1430 
t
;

1431 
ãmp
;

1435 
öfo
 = 0;

1439 
cqy
 = ( 
job
 / 10000 != 0 );

1440 
cqty
 = ( ( 
job
 % 10000 ) != 0 );

1441 
cb
 = ( ( 
job
 % 1000 ) / 100 != 0 );

1442 
¸
 = ( ( 
job
 % 100 ) / 10 != 0 );

1443 
ˇb
 = ( ( 
job
 % 10 ) != 0 );

1445 
ju
 = 
	`i4_mö
 ( 
k
, 
n
-1 );

1449 i‡–
ju
 == 0 )

1451 i‡–
cqy
 )

1453 
qy
[0] = 
y
[0];

1456 i‡–
cqty
 )

1458 
qty
[0] = 
y
[0];

1461 i‡–
ˇb
 )

1463 
ab
[0] = 
y
[0];

1466 i‡–
cb
 )

1468 i‡–
a
[0+0*
lda
] == 0.0 )

1470 
öfo
 = 1;

1474 
b
[0] = 
y
[0] / 
a
[0+0*
lda
];

1478 i‡–
¸
 )

1480 
rsd
[0] = 0.0;

1482  
öfo
;

1487 i‡–
cqy
 )

1489  
i
 = 1; i <
n
; i++ )

1491 
qy
[
i
-1] = 
y
[i-1];

1495 i‡–
cqty
 )

1497  
i
 = 1; i <
n
; i++ )

1499 
qty
[
i
-1] = 
y
[i-1];

1505 i‡–
cqy
 )

1507  
jj
 = 1; jj <
ju
; jj++ )

1509 
j
 = 
ju
 - 
jj
 + 1;

1511 i‡–
qøux
[
j
-1] != 0.0 )

1513 
ãmp
 = 
a
[
j
-1+(j-1)*
lda
];

1514 
a
[
j
-1+(j-1)*
lda
] = 
qøux
[j-1];

1515 
t
 = -
	`ddŸ
 ( 
n
-
j
+1, 
a
+j-1+(j-1)*
lda
, 1, 
qy
+j-1, 1 ) /á[j-1+(j-1)*lda];

1516 
	`daxpy
 ( 
n
-
j
+1, 
t
, 
a
+j-1+(j-1)*
lda
, 1, 
qy
+j-1, 1 );

1517 
a
[
j
-1+(j-1)*
lda
] = 
ãmp
;

1524 i‡–
cqty
 )

1526  
j
 = 1; j <
ju
; j++ )

1528 i‡–
qøux
[
j
-1] != 0.0 )

1530 
ãmp
 = 
a
[
j
-1+(j-1)*
lda
];

1531 
a
[
j
-1+(j-1)*
lda
] = 
qøux
[j-1];

1532 
t
 = -
	`ddŸ
 ( 
n
-
j
+1, 
a
+j-1+(j-1)*
lda
, 1, 
qty
+j-1, 1 ) /á[j-1+(j-1)*lda];

1533 
	`daxpy
 ( 
n
-
j
+1, 
t
, 
a
+j-1+(j-1)*
lda
, 1, 
qty
+j-1, 1 );

1534 
a
[
j
-1+(j-1)*
lda
] = 
ãmp
;

1541 i‡–
cb
 )

1543  
i
 = 1; i <
k
; i++ )

1545 
b
[
i
-1] = 
qty
[i-1];

1549 i‡–
ˇb
 )

1551  
i
 = 1; i <
k
; i++ )

1553 
ab
[
i
-1] = 
qty
[i-1];

1557 i‡–
¸
 && 
k
 < 
n
 )

1559  
i
 = 
k
+1; i <
n
; i++ )

1561 
rsd
[
i
-1] = 
qty
[i-1];

1565 i‡–
ˇb
 && 
k
+1 <
n
 )

1567  
i
 = 
k
+1; i <
n
; i++ )

1569 
ab
[
i
-1] = 0.0;

1573 i‡–
¸
 )

1575  
i
 = 1; i <
k
; i++ )

1577 
rsd
[
i
-1] = 0.0;

1583 i‡–
cb
 )

1585  
jj
 = 1; jj <
k
; jj++ )

1587 
j
 = 
k
 - 
jj
 + 1;

1589 i‡–
a
[
j
-1+(j-1)*
lda
] == 0.0 )

1591 
öfo
 = 
j
;

1595 
b
[
j
-1] = b[j-1] / 
a
[j-1+(j-1)*
lda
];

1597 i‡–
j
 != 1 )

1599 
t
 = -
b
[
j
-1];

1600 
	`daxpy
 ( 
j
-1, 
t
, 
a
+0+(j-1)*
lda
, 1, 
b
, 1 );

1607 i‡–
¸
 || 
ˇb
 )

1609  
jj
 = 1; jj <
ju
; jj++ )

1611 
j
 = 
ju
 - 
jj
 + 1;

1613 i‡–
qøux
[
j
-1] != 0.0 )

1615 
ãmp
 = 
a
[
j
-1+(j-1)*
lda
];

1616 
a
[
j
-1+(j-1)*
lda
] = 
qøux
[j-1];

1618 i‡–
¸
 )

1620 
t
 = -
	`ddŸ
 ( 
n
-
j
+1, 
a
+j-1+(j-1)*
lda
, 1, 
rsd
+j-1, 1 )

1621 / 
a
[
j
-1+(j-1)*
lda
];

1622 
	`daxpy
 ( 
n
-
j
+1, 
t
, 
a
+j-1+(j-1)*
lda
, 1, 
rsd
+j-1, 1 );

1625 i‡–
ˇb
 )

1627 
t
 = -
	`ddŸ
 ( 
n
-
j
+1, 
a
+j-1+(j-1)*
lda
, 1, 
ab
+j-1, 1 )

1628 / 
a
[
j
-1+(j-1)*
lda
];

1629 
	`daxpy
 ( 
n
-
j
+1, 
t
, 
a
+j-1+(j-1)*
lda
, 1, 
ab
+j-1, 1 );

1631 
a
[
j
-1+(j-1)*
lda
] = 
ãmp
;

1636  
öfo
;

1637 
	}
}

1642 
	$dsˇl
 ( 
n
, 
ß
, 
x
[], 
öcx
 )

1685 
i
;

1686 
ix
;

1687 
m
;

1689 i‡–
n
 <= 0 )

1692 i‡–
öcx
 == 1 )

1694 
m
 = 
n
 % 5;

1696  
i
 = 0; i < 
m
; i++ )

1698 
x
[
i
] = 
ß
 * x[i];

1701  
i
 = 
m
; i < 
n
; i = i + 5 )

1703 
x
[
i
] = 
ß
 * x[i];

1704 
x
[
i
+1] = 
ß
 * x[i+1];

1705 
x
[
i
+2] = 
ß
 * x[i+2];

1706 
x
[
i
+3] = 
ß
 * x[i+3];

1707 
x
[
i
+4] = 
ß
 * x[i+4];

1712 i‡–0 <
öcx
 )

1714 
ix
 = 0;

1718 
ix
 = ( - 
n
 + 1 ) * 
öcx
;

1721  
i
 = 0; i < 
n
; i++ )

1723 
x
[
ix
] = 
ß
 * x[ix];

1724 
ix
 = ix + 
öcx
;

1728 
	}
}

1732 
	$dsw≠
 ( 
n
, 
x
[], 
öcx
, 
y
[], 
öcy
 )

1777 
i
;

1778 
ix
;

1779 
iy
;

1780 
m
;

1781 
ãmp
;

1783 i‡–
n
 <= 0 )

1786 i‡–
öcx
 =1 && 
öcy
 == 1 )

1788 
m
 = 
n
 % 3;

1790  
i
 = 0; i < 
m
; i++ )

1792 
ãmp
 = 
x
[
i
];

1793 
x
[
i
] = 
y
[i];

1794 
y
[
i
] = 
ãmp
;

1797  
i
 = 
m
; i < 
n
; i = i + 3 )

1799 
ãmp
 = 
x
[
i
];

1800 
x
[
i
] = 
y
[i];

1801 
y
[
i
] = 
ãmp
;

1803 
ãmp
 = 
x
[
i
+1];

1804 
x
[
i
+1] = 
y
[i+1];

1805 
y
[
i
+1] = 
ãmp
;

1807 
ãmp
 = 
x
[
i
+2];

1808 
x
[
i
+2] = 
y
[i+2];

1809 
y
[
i
+2] = 
ãmp
;

1814 i‡–0 <
öcx
 )

1816 
ix
 = 0;

1820 
ix
 = ( - 
n
 + 1 ) * 
öcx
;

1823 i‡–0 <
öcy
 )

1825 
iy
 = 0;

1829 
iy
 = ( - 
n
 + 1 ) * 
öcy
;

1832  
i
 = 0; i < 
n
; i++ )

1834 
ãmp
 = 
x
[
ix
];

1835 
x
[
ix
] = 
y
[
iy
];

1836 
y
[
iy
] = 
ãmp
;

1837 
ix
 = ix + 
öcx
;

1838 
iy
 = iy + 
öcy
;

1844 
	}
}

1849 *
	$qr_sﬁve
 ( 
m
, 
n
, 
a
[], 
b
[] )

1899 *
a_qr
;

1900 
öd
;

1901 
ôask
;

1902 *
jpvt
;

1903 
kr
;

1904 
lda
;

1905 *
qøux
;

1906 *
r
;

1907 
tﬁ
;

1908 *
x
;

1910 
a_qr
 = 
	`r8m©_c›y_√w
 ( 
m
, 
n
, 
a
 );

1911 
lda
 = 
m
;

1912 
tﬁ
 = 
	`r8_ïsû⁄
 ( ) / 
	`r8m©_amax
 ( 
m
, 
n
, 
a_qr
 );

1913 
x
 = ( * ) 
	`mÆloc
 ( 
n
 *  ( ) );

1914 
jpvt
 = ( * ) 
	`mÆloc
 ( 
n
 *  ( ) );

1915 
qøux
 = ( * ) 
	`mÆloc
 ( 
n
 *  ( ) );

1916 
r
 = ( * ) 
	`mÆloc
 ( 
m
 *  ( ) );

1917 
ôask
 = 1;

1919 
öd
 = 
	`dqæs
 ( 
a_qr
, 
lda
, 
m
, 
n
, 
tﬁ
, &
kr
, 
b
, 
x
, 
r
, 
jpvt
, 
qøux
, 
ôask
 );

1921 
	`‰ì
 ( 
a_qr
 );

1922 
	`‰ì
 ( 
jpvt
 );

1923 
	`‰ì
 ( 
qøux
 );

1924 
	`‰ì
 ( 
r
 );

1926  
x
;

1927 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/qr_solve.h

1 
	~"C⁄figuøti⁄.h
"

3 #ifde‡
AUTO_BED_LEVELING_GRID


5 
daxpy
 ( 
n
, 
da
, 
dx
[], 
öcx
, 
dy
[], 
öcy
 );

6 
ddŸ
 ( 
n
, 
dx
[], 
öcx
, 
dy
[], 
öcy
 );

7 
dƒm2
 ( 
n
, 
x
[], 
öcx
 );

8 
dqønk
 ( 
a
[], 
lda
, 
m
, 
n
, 
tﬁ
, *
kr
,

9 
jpvt
[], 
qøux
[] );

10 
dqrdc
 ( 
a
[], 
lda
, 
n
, 
p
, 
qøux
[], 
jpvt
[],

11 
w‹k
[], 
job
 );

12 
dqæs
 ( 
a
[], 
lda
, 
m
, 
n
, 
tﬁ
, *
kr
, 
b
[],

13 
x
[], 
rsd
[], 
jpvt
[], 
qøux
[], 
ôask
 );

14 
dqæss
 ( 
a
[], 
lda
, 
m
, 
n
, 
kr
, 
b
[], 
x
[],

15 
rsd
[], 
jpvt
[], 
qøux
[] );

16 
dqr¶
 ( 
a
[], 
lda
, 
n
, 
k
, 
qøux
[], 
y
[],

17 
qy
[], 
qty
[], 
b
[], 
rsd
[], 
ab
[], 
job
 );

18 
dsˇl
 ( 
n
, 
ß
, 
x
[], 
öcx
 );

19 
dsw≠
 ( 
n
, 
x
[], 
öcx
, 
y
[], 
öcy
 );

20 *
qr_sﬁve
 ( 
m
, 
n
, 
a
[], 
b
[] );

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/speed_lookuptable.h

1 #i‚de‡
SPEED_LOOKUPTABLE_H


2 
	#SPEED_LOOKUPTABLE_H


	)

4 
	~"M¨lö.h
"

6 #i‡
F_CPU
 == 16000000

8 c⁄° 
uöt16_t
 
	g•ìd_looku±abÀ_Á°
[256][2] 
	gPROGMEM
 = {\

43 c⁄° 
uöt16_t
 
	g•ìd_looku±abÀ_¶ow
[256][2] 
	gPROGMEM
 = {\

78 #ñi‡
F_CPU
 == 20000000

80 c⁄° 
uöt16_t
 
	g•ìd_looku±abÀ_Á°
[256][2] 
	gPROGMEM
 = {

115 c⁄° 
uöt16_t
 
	g•ìd_looku±abÀ_¶ow
[256][2] 
	gPROGMEM
 = {

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/stepper.cpp

24 
	~"M¨lö.h
"

25 
	~"°ï≥r.h
"

26 
	~"∂™√r.h
"

27 
	~"ãm≥øtuª.h
"

28 
	~"u…ølcd.h
"

29 
	~"œnguage.h
"

30 
	~"ˇrdªadî.h
"

31 
	~"•ìd_looku±abÀ.h
"

32 #i‡
deföed
(
DIGIPOTSS_PIN
) && DIGIPOTSS_PIN > -1

33 
	~<SPI.h
>

40 
block_t
 *
	gcuºít_block
;

49 
	gout_bôs
;

50 
	gcou¡î_x
,

51 
	gcou¡î_y
,

52 
	gcou¡î_z
,

53 
	gcou¡î_e
;

54 vﬁ©ûê
	g°ï_evíts_com∂ëed
;

55 #ifde‡
ADVANCE


56 
	gadv™˚_øã
, 
	gadv™˚
, 
	gföÆ_adv™˚
 = 0;

57 
	gﬁd_adv™˚
 = 0;

58 
	ge_°ïs
[3];

60 
	gac˚Àøti⁄_time
, 
	gde˚Àøti⁄_time
;

62 
	gacc_°ï_øã
;

63 
	g°ï_lo›s
;

64 
	gOCR1A_nomöÆ
;

65 
	g°ï_lo›s_nomöÆ
;

67 vﬁ©ûê
	gíd°›s_åig°ïs
[3]={0,0,0};

68 vﬁ©ûê
	gíd°›s_°ïsTŸÆ
,
	gíd°›s_°ïsD⁄e
;

69 vﬁ©ûê
boﬁ
 
	gíd°›_x_hô
=
Ál£
;

70 vﬁ©ûê
boﬁ
 
	gíd°›_y_hô
=
Ál£
;

71 vﬁ©ûê
boﬁ
 
	gíd°›_z_hô
=
Ál£
;

72 #ifde‡
ABORT_ON_ENDSTOP_HIT_FEATURE_ENABLED


73 
boﬁ
 
	gab‹t_⁄_íd°›_hô
 = 
Ál£
;

75 #ifde‡
MOTOR_CURRENT_PWM_XY_PIN


76 
	gmŸ‹_cuºít_£âög
[3] = 
DEFAULT_PWM_MOTOR_CURRENT
;

79 
boﬁ
 
	gﬁd_x_mö_íd°›
=
Ál£
;

80 
boﬁ
 
	gﬁd_x_max_íd°›
=
Ál£
;

81 
boﬁ
 
	gﬁd_y_mö_íd°›
=
Ál£
;

82 
boﬁ
 
	gﬁd_y_max_íd°›
=
Ál£
;

83 
boﬁ
 
	gﬁd_z_mö_íd°›
=
Ál£
;

84 
boﬁ
 
	gﬁd_z_max_íd°›
=
Ál£
;

86 
boﬁ
 
	gcheck_íd°›s
 = 
åue
;

88 vﬁ©ûê
	gcou¡_posôi⁄
[
NUM_AXIS
] = { 0, 0, 0, 0};

89 vﬁ©ûêsig√d 
	gcou¡_dúe˘i⁄
[
NUM_AXIS
] = { 1, 1, 1, 1};

95 
	#CHECK_ENDSTOPS
 if(
check_íd°›s
)

	)

101 
	#Mu…iU16X8toH16
(
ötRes
, 
ch¨In1
, 
ötIn2
) \

102 
asm
 volatile ( \

114 "=&r" (
ötRes
) \

116 "d" (
ch¨In1
), \

117 "d" (
ötIn2
) \

120 )

	)

126 
	#Mu…iU24X24toH16
(
ötRes
, 
l⁄gIn1
, 
l⁄gIn2
) \

127 
asm
 volatile ( \

159 "=&r" (
ötRes
) \

161 "d" (
l⁄gIn1
), \

162 "d" (
l⁄gIn2
) \

165 )

	)

169 
	#ENABLE_STEPPER_DRIVER_INTERRUPT
(Ë
TIMSK1
 |(1<<
OCIE1A
)

	)

170 
	#DISABLE_STEPPER_DRIVER_INTERRUPT
(Ë
TIMSK1
 &~(1<<
OCIE1A
)

	)

173 
	$checkHôEnd°›s
()

175 if–
íd°›_x_hô
 || 
íd°›_y_hô
 || 
íd°›_z_hô
) {

176 
SERIAL_ECHO_START
;

177 
	`SERIAL_ECHOPGM
(
MSG_ENDSTOPS_HIT
);

178 if(
íd°›_x_hô
) {

179 
	`SERIAL_ECHOPAIR
(" X:",()
íd°›s_åig°ïs
[
X_AXIS
]/
axis_°ïs_≥r_unô
[X_AXIS]);

180 
	`LCD_MESSAGEPGM
(
MSG_ENDSTOPS_HIT
 "X");

182 if(
íd°›_y_hô
) {

183 
	`SERIAL_ECHOPAIR
(" Y:",()
íd°›s_åig°ïs
[
Y_AXIS
]/
axis_°ïs_≥r_unô
[Y_AXIS]);

184 
	`LCD_MESSAGEPGM
(
MSG_ENDSTOPS_HIT
 "Y");

186 if(
íd°›_z_hô
) {

187 
	`SERIAL_ECHOPAIR
(" Z:",()
íd°›s_åig°ïs
[
Z_AXIS
]/
axis_°ïs_≥r_unô
[Z_AXIS]);

188 
	`LCD_MESSAGEPGM
(
MSG_ENDSTOPS_HIT
 "Z");

190 
	`SERIAL_ECHOLN
("");

191 
íd°›_x_hô
=
Ál£
;

192 
íd°›_y_hô
=
Ál£
;

193 
íd°›_z_hô
=
Ál£
;

194 #i‡
	`deföed
(
ABORT_ON_ENDSTOP_HIT_FEATURE_ENABLED
Ë&& deföed(
SDSUPPORT
)

195 i‡(
ab‹t_⁄_íd°›_hô
)

197 
ˇrd
.
sd¥ötög
 = 
Ál£
;

198 
ˇrd
.
	`˛o£fûe
();

199 
	`quickSt›
();

200 
	`£tT¨gëHŸíd0
(0);

201 
	`£tT¨gëHŸíd1
(0);

202 
	`£tT¨gëHŸíd2
(0);

206 
	}
}

208 
	$íd°›s_hô_⁄_puΩo£
()

210 
íd°›_x_hô
=
Ál£
;

211 
íd°›_y_hô
=
Ál£
;

212 
íd°›_z_hô
=
Ál£
;

213 
	}
}

215 
	$íabÀ_íd°›s
(
boﬁ
 
check
)

217 
check_íd°›s
 = 
check
;

218 
	}
}

236 
	$°_wake_up
() {

238 
	`ENABLE_STEPPER_DRIVER_INTERRUPT
();

239 
	}
}

241 
	$°ï_waô
(){

242 
öt8_t
 
i
=0; i < 6; i++){

244 
	}
}

247 
FORCE_INLINE
 
	$ˇlc_timî
(
°ï_øã
) {

248 
timî
;

249 if(
°ï_øã
 > 
MAX_STEP_FREQUENCY
) step_rate = MAX_STEP_FREQUENCY;

251 if(
°ï_øã
 > 20000) {

252 
°ï_øã
 = (step_rate >> 2)&0x3fff;

253 
°ï_lo›s
 = 4;

255 if(
°ï_øã
 > 10000) {

256 
°ï_øã
 = (step_rate >> 1)&0x7fff;

257 
°ï_lo›s
 = 2;

260 
°ï_lo›s
 = 1;

263 if(
°ï_øã
 < (
F_CPU
/500000)) step_rate = (F_CPU/500000);

264 
°ï_øã
 -(
F_CPU
/500000);

265 if(
°ï_øã
 >= (8*256)){

266 
èbÀ_addªss
 = ()&
•ìd_looku±abÀ_Á°
[()(
°ï_øã
>>8)][0];

267 
tmp_°ï_øã
 = (
°ï_øã
 & 0x00ff);

268 
gaö
 = ()
	`pgm_ªad_w‹d_√¨
(
èbÀ_addªss
+2);

269 
	`Mu…iU16X8toH16
(
timî
, 
tmp_°ï_øã
, 
gaö
);

270 
timî
 = ()
	`pgm_ªad_w‹d_√¨
(
èbÀ_addªss
) -Åimer;

273 
èbÀ_addªss
 = ()&
•ìd_looku±abÀ_¶ow
[0][0];

274 
èbÀ_addªss
 +((
°ï_øã
)>>1) & 0xfffc;

275 
timî
 = ()
	`pgm_ªad_w‹d_√¨
(
èbÀ_addªss
);

276 
timî
 -((()
	`pgm_ªad_w‹d_√¨
(
èbÀ_addªss
+2Ë* ()(
°ï_øã
 & 0x0007))>>3);

278 if(
timî
 < 100Ë{Åimî = 100; 
MYSERIAL
.
	`¥öt
(
MSG_STEPPER_TOO_HIGH
); MYSERIAL.
	`¥öén
(
°ï_øã
); }

279  
timî
;

280 
	}
}

284 
FORCE_INLINE
 
	$å≠ezoid_gíî©‹_ª£t
() {

285 #ifde‡
ADVANCE


286 
adv™˚
 = 
cuºít_block
->
öôül_adv™˚
;

287 
föÆ_adv™˚
 = 
cuºít_block
->final_advance;

289 
e_°ïs
[
cuºít_block
->
a˘ive_exåudî
] +((
adv™˚
 >>8Ë- 
ﬁd_adv™˚
);

290 
ﬁd_adv™˚
 = 
adv™˚
 >>8;

292 
de˚Àøti⁄_time
 = 0;

294 
OCR1A_nomöÆ
 = 
	`ˇlc_timî
(
cuºít_block
->
nomöÆ_øã
);

296 
°ï_lo›s_nomöÆ
 = 
°ï_lo›s
;

297 
acc_°ï_øã
 = 
cuºít_block
->
öôül_øã
;

298 
ac˚Àøti⁄_time
 = 
	`ˇlc_timî
(
acc_°ï_øã
);

299 
OCR1A
 = 
ac˚Àøti⁄_time
;

311 
	}
}

315 
	$ISR
(
TIMER1_COMPA_ve˘
)

318 i‡(
cuºít_block
 =
NULL
) {

320 
cuºít_block
 = 
	`∂™_gë_cuºít_block
();

321 i‡(
cuºít_block
 !
NULL
) {

322 
cuºít_block
->
busy
 = 
åue
;

323 
	`å≠ezoid_gíî©‹_ª£t
();

324 
cou¡î_x
 = -(
cuºít_block
->
°ï_evít_cou¡
 >> 1);

325 
cou¡î_y
 = 
cou¡î_x
;

326 
cou¡î_z
 = 
cou¡î_x
;

327 
cou¡î_e
 = 
cou¡î_x
;

328 
°ï_evíts_com∂ëed
 = 0;

330 #ifde‡
Z_LATE_ENABLE


331 if(
cuºít_block
->
°ïs_z
 > 0) {

332 
	`íabÀ_z
();

333 
OCR1A
 = 2000;

343 
OCR1A
=2000;

347 i‡(
cuºít_block
 !
NULL
) {

349 
out_bôs
 = 
cuºít_block
->
dúe˘i⁄_bôs
;

353 if((
out_bôs
 & (1<<
X_AXIS
))!=0){

354 #ifde‡
DUAL_X_CARRIAGE


355 i‡(
exåudî_du∂iˇti⁄_íabÀd
){

356 
	`WRITE
(
X_DIR_PIN
, 
INVERT_X_DIR
);

357 
	`WRITE
(
X2_DIR_PIN
, 
INVERT_X_DIR
);

360 i‡(
cuºít_block
->
a˘ive_exåudî
 != 0)

361 
	`WRITE
(
X2_DIR_PIN
, 
INVERT_X_DIR
);

363 
	`WRITE
(
X_DIR_PIN
, 
INVERT_X_DIR
);

366 
	`WRITE
(
X_DIR_PIN
, 
INVERT_X_DIR
);

368 
cou¡_dúe˘i⁄
[
X_AXIS
]=-1;

371 #ifde‡
DUAL_X_CARRIAGE


372 i‡(
exåudî_du∂iˇti⁄_íabÀd
){

373 
	`WRITE
(
X_DIR_PIN
, !
INVERT_X_DIR
);

374 
	`WRITE
(
X2_DIR_PIN
, !
INVERT_X_DIR
);

377 i‡(
cuºít_block
->
a˘ive_exåudî
 != 0)

378 
	`WRITE
(
X2_DIR_PIN
, !
INVERT_X_DIR
);

380 
	`WRITE
(
X_DIR_PIN
, !
INVERT_X_DIR
);

383 
	`WRITE
(
X_DIR_PIN
, !
INVERT_X_DIR
);

385 
cou¡_dúe˘i⁄
[
X_AXIS
]=1;

387 if((
out_bôs
 & (1<<
Y_AXIS
))!=0){

388 
	`WRITE
(
Y_DIR_PIN
, 
INVERT_Y_DIR
);

390 #ifde‡
Y_DUAL_STEPPER_DRIVERS


391 
	`WRITE
(
Y2_DIR_PIN
, !(
INVERT_Y_DIR
 =
INVERT_Y2_VS_Y_DIR
));

394 
cou¡_dúe˘i⁄
[
Y_AXIS
]=-1;

397 
	`WRITE
(
Y_DIR_PIN
, !
INVERT_Y_DIR
);

399 #ifde‡
Y_DUAL_STEPPER_DRIVERS


400 
	`WRITE
(
Y2_DIR_PIN
, (
INVERT_Y_DIR
 =
INVERT_Y2_VS_Y_DIR
));

403 
cou¡_dúe˘i⁄
[
Y_AXIS
]=1;

407 #i‚de‡
COREXY


408 i‡((
out_bôs
 & (1<<
X_AXIS
)) != 0) {

410 i‡((((
out_bôs
 & (1<<
X_AXIS
)Ë!0)&&(out_bô†& (1<<
Y_AXIS
)) != 0)) {

412 
CHECK_ENDSTOPS


414 #ifde‡
DUAL_X_CARRIAGE


416 i‡((
cuºít_block
->
a˘ive_exåudî
 =0 && 
X_HOME_DIR
 == -1)

417 || (
cuºít_block
->
a˘ive_exåudî
 !0 && 
X2_HOME_DIR
 == -1))

420 #i‡
	`deföed
(
X_MIN_PIN
) && X_MIN_PIN > -1

421 
boﬁ
 
x_mö_íd°›
=(
	`READ
(
X_MIN_PIN
Ë!
X_MIN_ENDSTOP_INVERTING
);

422 if(
x_mö_íd°›
 && 
ﬁd_x_mö_íd°›
 && (
cuºít_block
->
°ïs_x
 > 0)) {

423 
íd°›s_åig°ïs
[
X_AXIS
] = 
cou¡_posôi⁄
[X_AXIS];

424 
íd°›_x_hô
=
åue
;

425 
°ï_evíts_com∂ëed
 = 
cuºít_block
->
°ï_evít_cou¡
;

427 
ﬁd_x_mö_íd°›
 = 
x_mö_íd°›
;

433 
CHECK_ENDSTOPS


435 #ifde‡
DUAL_X_CARRIAGE


437 i‡((
cuºít_block
->
a˘ive_exåudî
 =0 && 
X_HOME_DIR
 == 1)

438 || (
cuºít_block
->
a˘ive_exåudî
 !0 && 
X2_HOME_DIR
 == 1))

441 #i‡
	`deföed
(
X_MAX_PIN
) && X_MAX_PIN > -1

442 
boﬁ
 
x_max_íd°›
=(
	`READ
(
X_MAX_PIN
Ë!
X_MAX_ENDSTOP_INVERTING
);

443 if(
x_max_íd°›
 && 
ﬁd_x_max_íd°›
 && (
cuºít_block
->
°ïs_x
 > 0)){

444 
íd°›s_åig°ïs
[
X_AXIS
] = 
cou¡_posôi⁄
[X_AXIS];

445 
íd°›_x_hô
=
åue
;

446 
°ï_evíts_com∂ëed
 = 
cuºít_block
->
°ï_evít_cou¡
;

448 
ﬁd_x_max_íd°›
 = 
x_max_íd°›
;

454 #i‚de‡
COREXY


455 i‡((
out_bôs
 & (1<<
Y_AXIS
)) != 0) {

457 i‡((((
out_bôs
 & (1<<
X_AXIS
)Ë!0)&&(out_bô†& (1<<
Y_AXIS
)) == 0)) {

459 
CHECK_ENDSTOPS


461 #i‡
	`deföed
(
Y_MIN_PIN
) && Y_MIN_PIN > -1

462 
boﬁ
 
y_mö_íd°›
=(
	`READ
(
Y_MIN_PIN
Ë!
Y_MIN_ENDSTOP_INVERTING
);

463 if(
y_mö_íd°›
 && 
ﬁd_y_mö_íd°›
 && (
cuºít_block
->
°ïs_y
 > 0)) {

464 
íd°›s_åig°ïs
[
Y_AXIS
] = 
cou¡_posôi⁄
[Y_AXIS];

465 
íd°›_y_hô
=
åue
;

466 
°ï_evíts_com∂ëed
 = 
cuºít_block
->
°ï_evít_cou¡
;

468 
ﬁd_y_mö_íd°›
 = 
y_mö_íd°›
;

473 
CHECK_ENDSTOPS


475 #i‡
	`deföed
(
Y_MAX_PIN
) && Y_MAX_PIN > -1

476 
boﬁ
 
y_max_íd°›
=(
	`READ
(
Y_MAX_PIN
Ë!
Y_MAX_ENDSTOP_INVERTING
);

477 if(
y_max_íd°›
 && 
ﬁd_y_max_íd°›
 && (
cuºít_block
->
°ïs_y
 > 0)){

478 
íd°›s_åig°ïs
[
Y_AXIS
] = 
cou¡_posôi⁄
[Y_AXIS];

479 
íd°›_y_hô
=
åue
;

480 
°ï_evíts_com∂ëed
 = 
cuºít_block
->
°ï_evít_cou¡
;

482 
ﬁd_y_max_íd°›
 = 
y_max_íd°›
;

487 i‡((
out_bôs
 & (1<<
Z_AXIS
)) != 0) {

488 
	`WRITE
(
Z_DIR_PIN
,
INVERT_Z_DIR
);

490 #ifde‡
Z_DUAL_STEPPER_DRIVERS


491 
	`WRITE
(
Z2_DIR_PIN
,
INVERT_Z_DIR
);

494 
cou¡_dúe˘i⁄
[
Z_AXIS
]=-1;

495 
CHECK_ENDSTOPS


497 #i‡
	`deföed
(
Z_MIN_PIN
) && Z_MIN_PIN > -1

498 
boﬁ
 
z_mö_íd°›
=(
	`READ
(
Z_MIN_PIN
Ë!
Z_MIN_ENDSTOP_INVERTING
);

499 if(
z_mö_íd°›
 && 
ﬁd_z_mö_íd°›
 && (
cuºít_block
->
°ïs_z
 > 0)) {

500 
íd°›s_åig°ïs
[
Z_AXIS
] = 
cou¡_posôi⁄
[Z_AXIS];

501 
íd°›_z_hô
=
åue
;

502 
°ï_evíts_com∂ëed
 = 
cuºít_block
->
°ï_evít_cou¡
;

504 
ﬁd_z_mö_íd°›
 = 
z_mö_íd°›
;

509 
	`WRITE
(
Z_DIR_PIN
,!
INVERT_Z_DIR
);

511 #ifde‡
Z_DUAL_STEPPER_DRIVERS


512 
	`WRITE
(
Z2_DIR_PIN
,!
INVERT_Z_DIR
);

515 
cou¡_dúe˘i⁄
[
Z_AXIS
]=1;

516 
CHECK_ENDSTOPS


518 #i‡
	`deföed
(
Z_MAX_PIN
) && Z_MAX_PIN > -1

519 
boﬁ
 
z_max_íd°›
=(
	`READ
(
Z_MAX_PIN
Ë!
Z_MAX_ENDSTOP_INVERTING
);

520 if(
z_max_íd°›
 && 
ﬁd_z_max_íd°›
 && (
cuºít_block
->
°ïs_z
 > 0)) {

521 
íd°›s_åig°ïs
[
Z_AXIS
] = 
cou¡_posôi⁄
[Z_AXIS];

522 
íd°›_z_hô
=
åue
;

523 
°ï_evíts_com∂ëed
 = 
cuºít_block
->
°ï_evít_cou¡
;

525 
ﬁd_z_max_íd°›
 = 
z_max_íd°›
;

530 #i‚de‡
ADVANCE


531 i‡((
out_bôs
 & (1<<
E_AXIS
)) != 0) {

532 
	`REV_E_DIR
();

533 
cou¡_dúe˘i⁄
[
E_AXIS
]=-1;

536 
	`NORM_E_DIR
();

537 
cou¡_dúe˘i⁄
[
E_AXIS
]=1;

543 
öt8_t
 
i
=0; i < 
°ï_lo›s
; i++) {

544 #i‚de‡
AT90USB


545 
MSîül
.
	`checkRx
();

548 #ifde‡
ADVANCE


549 
cou¡î_e
 +
cuºít_block
->
°ïs_e
;

550 i‡(
cou¡î_e
 > 0) {

551 
cou¡î_e
 -
cuºít_block
->
°ï_evít_cou¡
;

552 i‡((
out_bôs
 & (1<<
E_AXIS
)) != 0) {

553 
e_°ïs
[
cuºít_block
->
a˘ive_exåudî
]--;

556 
e_°ïs
[
cuºít_block
->
a˘ive_exåudî
]++;

561 
cou¡î_x
 +
cuºít_block
->
°ïs_x
;

562 #ifde‡
CONFIG_STEPPERS_TOSHIBA


567 i‡(
cou¡î_x
 > 0) {

568 
	`WRITE
(
X_STEP_PIN
, 
HIGH
);

571 
cou¡î_y
 +
cuºít_block
->
°ïs_y
;

572 i‡(
cou¡î_y
 > 0) {

573 
	`WRITE
(
Y_STEP_PIN
, 
HIGH
);

576 
cou¡î_z
 +
cuºít_block
->
°ïs_z
;

577 i‡(
cou¡î_z
 > 0) {

578 
	`WRITE
(
Z_STEP_PIN
, 
HIGH
);

581 #i‚de‡
ADVANCE


582 
cou¡î_e
 +
cuºít_block
->
°ïs_e
;

583 i‡(
cou¡î_e
 > 0) {

584 
	`WRITE_E_STEP
(
HIGH
);

588 i‡(
cou¡î_x
 > 0) {

589 
cou¡î_x
 -
cuºít_block
->
°ï_evít_cou¡
;

590 
cou¡_posôi⁄
[
X_AXIS
]+=
cou¡_dúe˘i⁄
[X_AXIS];

591 
	`WRITE
(
X_STEP_PIN
, 
LOW
);

594 i‡(
cou¡î_y
 > 0) {

595 
cou¡î_y
 -
cuºít_block
->
°ï_evít_cou¡
;

596 
cou¡_posôi⁄
[
Y_AXIS
]+=
cou¡_dúe˘i⁄
[Y_AXIS];

597 
	`WRITE
(
Y_STEP_PIN
, 
LOW
);

600 i‡(
cou¡î_z
 > 0) {

601 
cou¡î_z
 -
cuºít_block
->
°ï_evít_cou¡
;

602 
cou¡_posôi⁄
[
Z_AXIS
]+=
cou¡_dúe˘i⁄
[Z_AXIS];

603 
	`WRITE
(
Z_STEP_PIN
, 
LOW
);

606 #i‚de‡
ADVANCE


607 i‡(
cou¡î_e
 > 0) {

608 
cou¡î_e
 -
cuºít_block
->
°ï_evít_cou¡
;

609 
cou¡_posôi⁄
[
E_AXIS
]+=
cou¡_dúe˘i⁄
[E_AXIS];

610 
	`WRITE_E_STEP
(
LOW
);

614 i‡(
cou¡î_x
 > 0) {

615 #ifde‡
DUAL_X_CARRIAGE


616 i‡(
exåudî_du∂iˇti⁄_íabÀd
){

617 
	`WRITE
(
X_STEP_PIN
, !
INVERT_X_STEP_PIN
);

618 
	`WRITE
(
X2_STEP_PIN
, !
INVERT_X_STEP_PIN
);

621 i‡(
cuºít_block
->
a˘ive_exåudî
 != 0)

622 
	`WRITE
(
X2_STEP_PIN
, !
INVERT_X_STEP_PIN
);

624 
	`WRITE
(
X_STEP_PIN
, !
INVERT_X_STEP_PIN
);

627 
	`WRITE
(
X_STEP_PIN
, !
INVERT_X_STEP_PIN
);

629 
cou¡î_x
 -
cuºít_block
->
°ï_evít_cou¡
;

630 
cou¡_posôi⁄
[
X_AXIS
]+=
cou¡_dúe˘i⁄
[X_AXIS];

631 #ifde‡
DUAL_X_CARRIAGE


632 i‡(
exåudî_du∂iˇti⁄_íabÀd
){

633 
	`WRITE
(
X_STEP_PIN
, 
INVERT_X_STEP_PIN
);

634 
	`WRITE
(
X2_STEP_PIN
, 
INVERT_X_STEP_PIN
);

637 i‡(
cuºít_block
->
a˘ive_exåudî
 != 0)

638 
	`WRITE
(
X2_STEP_PIN
, 
INVERT_X_STEP_PIN
);

640 
	`WRITE
(
X_STEP_PIN
, 
INVERT_X_STEP_PIN
);

643 
	`WRITE
(
X_STEP_PIN
, 
INVERT_X_STEP_PIN
);

647 
cou¡î_y
 +
cuºít_block
->
°ïs_y
;

648 i‡(
cou¡î_y
 > 0) {

649 
	`WRITE
(
Y_STEP_PIN
, !
INVERT_Y_STEP_PIN
);

651 #ifde‡
Y_DUAL_STEPPER_DRIVERS


652 
	`WRITE
(
Y2_STEP_PIN
, !
INVERT_Y_STEP_PIN
);

655 
cou¡î_y
 -
cuºít_block
->
°ï_evít_cou¡
;

656 
cou¡_posôi⁄
[
Y_AXIS
]+=
cou¡_dúe˘i⁄
[Y_AXIS];

657 
	`WRITE
(
Y_STEP_PIN
, 
INVERT_Y_STEP_PIN
);

659 #ifde‡
Y_DUAL_STEPPER_DRIVERS


660 
	`WRITE
(
Y2_STEP_PIN
, 
INVERT_Y_STEP_PIN
);

664 
cou¡î_z
 +
cuºít_block
->
°ïs_z
;

665 i‡(
cou¡î_z
 > 0) {

666 
	`WRITE
(
Z_STEP_PIN
, !
INVERT_Z_STEP_PIN
);

668 #ifde‡
Z_DUAL_STEPPER_DRIVERS


669 
	`WRITE
(
Z2_STEP_PIN
, !
INVERT_Z_STEP_PIN
);

672 
cou¡î_z
 -
cuºít_block
->
°ï_evít_cou¡
;

673 
cou¡_posôi⁄
[
Z_AXIS
]+=
cou¡_dúe˘i⁄
[Z_AXIS];

674 
	`WRITE
(
Z_STEP_PIN
, 
INVERT_Z_STEP_PIN
);

676 #ifde‡
Z_DUAL_STEPPER_DRIVERS


677 
	`WRITE
(
Z2_STEP_PIN
, 
INVERT_Z_STEP_PIN
);

681 #i‚de‡
ADVANCE


682 
cou¡î_e
 +
cuºít_block
->
°ïs_e
;

683 i‡(
cou¡î_e
 > 0) {

684 
	`WRITE_E_STEP
(!
INVERT_E_STEP_PIN
);

685 
cou¡î_e
 -
cuºít_block
->
°ï_evít_cou¡
;

686 
cou¡_posôi⁄
[
E_AXIS
]+=
cou¡_dúe˘i⁄
[E_AXIS];

687 
	`WRITE_E_STEP
(
INVERT_E_STEP_PIN
);

691 
°ï_evíts_com∂ëed
 += 1;

692 if(
°ï_evíts_com∂ëed
 >
cuºít_block
->
°ï_evít_cou¡
) ;

695 
timî
;

696 
°ï_øã
;

697 i‡(
°ï_evíts_com∂ëed
 <()
cuºít_block
->
ac˚Àøã_u¡û
) {

699 
	`Mu…iU24X24toH16
(
acc_°ï_øã
, 
ac˚Àøti⁄_time
, 
cuºít_block
->
ac˚Àøti⁄_øã
);

700 
acc_°ï_øã
 +
cuºít_block
->
öôül_øã
;

703 if(
acc_°ï_øã
 > 
cuºít_block
->
nomöÆ_øã
)

704 
acc_°ï_øã
 = 
cuºít_block
->
nomöÆ_øã
;

707 
timî
 = 
	`ˇlc_timî
(
acc_°ï_øã
);

708 
OCR1A
 = 
timî
;

709 
ac˚Àøti⁄_time
 +
timî
;

710 #ifde‡
ADVANCE


711 
öt8_t
 
i
=0; i < 
°ï_lo›s
; i++) {

712 
adv™˚
 +
adv™˚_øã
;

716 
e_°ïs
[
cuºít_block
->
a˘ive_exåudî
] +((
adv™˚
 >>8Ë- 
ﬁd_adv™˚
);

717 
ﬁd_adv™˚
 = 
adv™˚
 >>8;

721 i‡(
°ï_evíts_com∂ëed
 > ()
cuºít_block
->
de˚Àøã_a·î
) {

722 
	`Mu…iU24X24toH16
(
°ï_øã
, 
de˚Àøti⁄_time
, 
cuºít_block
->
ac˚Àøti⁄_øã
);

724 if(
°ï_øã
 > 
acc_°ï_øã
) {

725 
°ï_øã
 = 
cuºít_block
->
föÆ_øã
;

728 
°ï_øã
 = 
acc_°ï_øã
 - step_rate;

732 if(
°ï_øã
 < 
cuºít_block
->
föÆ_øã
)

733 
°ï_øã
 = 
cuºít_block
->
föÆ_øã
;

736 
timî
 = 
	`ˇlc_timî
(
°ï_øã
);

737 
OCR1A
 = 
timî
;

738 
de˚Àøti⁄_time
 +
timî
;

739 #ifde‡
ADVANCE


740 
öt8_t
 
i
=0; i < 
°ï_lo›s
; i++) {

741 
adv™˚
 -
adv™˚_øã
;

743 if(
adv™˚
 < 
föÆ_adv™˚
)ádvance = final_advance;

745 
e_°ïs
[
cuºít_block
->
a˘ive_exåudî
] +((
adv™˚
 >>8Ë- 
ﬁd_adv™˚
);

746 
ﬁd_adv™˚
 = 
adv™˚
 >>8;

750 
OCR1A
 = 
OCR1A_nomöÆ
;

752 
°ï_lo›s
 = 
°ï_lo›s_nomöÆ
;

756 i‡(
°ï_evíts_com∂ëed
 >
cuºít_block
->
°ï_evít_cou¡
) {

757 
cuºít_block
 = 
NULL
;

758 
	`∂™_disˇrd_cuºít_block
();

761 
	}
}

763 #ifde‡
ADVANCE


764 
	gﬁd_OCR0A
;

767 
	$ISR
(
TIMER0_COMPA_ve˘
)

769 
ﬁd_OCR0A
 += 52;

770 
OCR0A
 = 
ﬁd_OCR0A
;

772 
i
=0; i<4;i++) {

773 i‡(
e_°ïs
[0] != 0) {

774 
	`WRITE
(
E0_STEP_PIN
, 
INVERT_E_STEP_PIN
);

775 i‡(
e_°ïs
[0] < 0) {

776 
	`WRITE
(
E0_DIR_PIN
, 
INVERT_E0_DIR
);

777 
e_°ïs
[0]++;

778 
	`WRITE
(
E0_STEP_PIN
, !
INVERT_E_STEP_PIN
);

780 i‡(
e_°ïs
[0] > 0) {

781 
	`WRITE
(
E0_DIR_PIN
, !
INVERT_E0_DIR
);

782 
e_°ïs
[0]--;

783 
	`WRITE
(
E0_STEP_PIN
, !
INVERT_E_STEP_PIN
);

786 #i‡
EXTRUDERS
 > 1

787 i‡(
e_°ïs
[1] != 0) {

788 
	`WRITE
(
E1_STEP_PIN
, 
INVERT_E_STEP_PIN
);

789 i‡(
e_°ïs
[1] < 0) {

790 
	`WRITE
(
E1_DIR_PIN
, 
INVERT_E1_DIR
);

791 
e_°ïs
[1]++;

792 
	`WRITE
(
E1_STEP_PIN
, !
INVERT_E_STEP_PIN
);

794 i‡(
e_°ïs
[1] > 0) {

795 
	`WRITE
(
E1_DIR_PIN
, !
INVERT_E1_DIR
);

796 
e_°ïs
[1]--;

797 
	`WRITE
(
E1_STEP_PIN
, !
INVERT_E_STEP_PIN
);

801 #i‡
EXTRUDERS
 > 2

802 i‡(
e_°ïs
[2] != 0) {

803 
	`WRITE
(
E2_STEP_PIN
, 
INVERT_E_STEP_PIN
);

804 i‡(
e_°ïs
[2] < 0) {

805 
	`WRITE
(
E2_DIR_PIN
, 
INVERT_E2_DIR
);

806 
e_°ïs
[2]++;

807 
	`WRITE
(
E2_STEP_PIN
, !
INVERT_E_STEP_PIN
);

809 i‡(
e_°ïs
[2] > 0) {

810 
	`WRITE
(
E2_DIR_PIN
, !
INVERT_E2_DIR
);

811 
e_°ïs
[2]--;

812 
	`WRITE
(
E2_STEP_PIN
, !
INVERT_E_STEP_PIN
);

817 
	}
}

820 
	$°_öô
()

822 
	`digùŸ_öô
();

823 
	`mi¸o°ï_öô
();

826 #i‡
	`deföed
(
X_DIR_PIN
) && X_DIR_PIN > -1

827 
	`SET_OUTPUT
(
X_DIR_PIN
);

829 #i‡
	`deföed
(
X2_DIR_PIN
) && X2_DIR_PIN > -1

830 
	`SET_OUTPUT
(
X2_DIR_PIN
);

832 #i‡
	`deföed
(
Y_DIR_PIN
) && Y_DIR_PIN > -1

833 
	`SET_OUTPUT
(
Y_DIR_PIN
);

835 #i‡
	`deföed
(
Y_DUAL_STEPPER_DRIVERS
Ë&& deföed(
Y2_DIR_PIN
) && (Y2_DIR_PIN > -1)

836 
	`SET_OUTPUT
(
Y2_DIR_PIN
);

839 #i‡
	`deföed
(
Z_DIR_PIN
) && Z_DIR_PIN > -1

840 
	`SET_OUTPUT
(
Z_DIR_PIN
);

842 #i‡
	`deföed
(
Z_DUAL_STEPPER_DRIVERS
Ë&& deföed(
Z2_DIR_PIN
) && (Z2_DIR_PIN > -1)

843 
	`SET_OUTPUT
(
Z2_DIR_PIN
);

846 #i‡
	`deföed
(
E0_DIR_PIN
) && E0_DIR_PIN > -1

847 
	`SET_OUTPUT
(
E0_DIR_PIN
);

849 #i‡
	`deföed
(
E1_DIR_PIN
) && (E1_DIR_PIN > -1)

850 
	`SET_OUTPUT
(
E1_DIR_PIN
);

852 #i‡
	`deföed
(
E2_DIR_PIN
) && (E2_DIR_PIN > -1)

853 
	`SET_OUTPUT
(
E2_DIR_PIN
);

858 #i‡
	`deföed
(
X_ENABLE_PIN
) && X_ENABLE_PIN > -1

859 
	`SET_OUTPUT
(
X_ENABLE_PIN
);

860 if(!
X_ENABLE_ON
Ë
	`WRITE
(
X_ENABLE_PIN
,
HIGH
);

862 #i‡
	`deföed
(
X2_ENABLE_PIN
) && X2_ENABLE_PIN > -1

863 
	`SET_OUTPUT
(
X2_ENABLE_PIN
);

864 if(!
X_ENABLE_ON
Ë
	`WRITE
(
X2_ENABLE_PIN
,
HIGH
);

866 #i‡
	`deföed
(
Y_ENABLE_PIN
) && Y_ENABLE_PIN > -1

867 
	`SET_OUTPUT
(
Y_ENABLE_PIN
);

868 if(!
Y_ENABLE_ON
Ë
	`WRITE
(
Y_ENABLE_PIN
,
HIGH
);

870 #i‡
	`deföed
(
Y_DUAL_STEPPER_DRIVERS
Ë&& deföed(
Y2_ENABLE_PIN
) && (Y2_ENABLE_PIN > -1)

871 
	`SET_OUTPUT
(
Y2_ENABLE_PIN
);

872 if(!
Y_ENABLE_ON
Ë
	`WRITE
(
Y2_ENABLE_PIN
,
HIGH
);

875 #i‡
	`deföed
(
Z_ENABLE_PIN
) && Z_ENABLE_PIN > -1

876 
	`SET_OUTPUT
(
Z_ENABLE_PIN
);

877 if(!
Z_ENABLE_ON
Ë
	`WRITE
(
Z_ENABLE_PIN
,
HIGH
);

879 #i‡
	`deföed
(
Z_DUAL_STEPPER_DRIVERS
Ë&& deföed(
Z2_ENABLE_PIN
) && (Z2_ENABLE_PIN > -1)

880 
	`SET_OUTPUT
(
Z2_ENABLE_PIN
);

881 if(!
Z_ENABLE_ON
Ë
	`WRITE
(
Z2_ENABLE_PIN
,
HIGH
);

884 #i‡
	`deföed
(
E0_ENABLE_PIN
) && (E0_ENABLE_PIN > -1)

885 
	`SET_OUTPUT
(
E0_ENABLE_PIN
);

886 if(!
E_ENABLE_ON
Ë
	`WRITE
(
E0_ENABLE_PIN
,
HIGH
);

888 #i‡
	`deföed
(
E1_ENABLE_PIN
) && (E1_ENABLE_PIN > -1)

889 
	`SET_OUTPUT
(
E1_ENABLE_PIN
);

890 if(!
E_ENABLE_ON
Ë
	`WRITE
(
E1_ENABLE_PIN
,
HIGH
);

892 #i‡
	`deföed
(
E2_ENABLE_PIN
) && (E2_ENABLE_PIN > -1)

893 
	`SET_OUTPUT
(
E2_ENABLE_PIN
);

894 if(!
E_ENABLE_ON
Ë
	`WRITE
(
E2_ENABLE_PIN
,
HIGH
);

899 #i‡
	`deföed
(
X_MIN_PIN
) && X_MIN_PIN > -1

900 
	`SET_INPUT
(
X_MIN_PIN
);

901 #ifde‡
ENDSTOPPULLUP_XMIN


902 
	`WRITE
(
X_MIN_PIN
,
HIGH
);

906 #i‡
	`deföed
(
Y_MIN_PIN
) && Y_MIN_PIN > -1

907 
	`SET_INPUT
(
Y_MIN_PIN
);

908 #ifde‡
ENDSTOPPULLUP_YMIN


909 
	`WRITE
(
Y_MIN_PIN
,
HIGH
);

913 #i‡
	`deföed
(
Z_MIN_PIN
) && Z_MIN_PIN > -1

914 
	`SET_INPUT
(
Z_MIN_PIN
);

915 #ifde‡
ENDSTOPPULLUP_ZMIN


916 
	`WRITE
(
Z_MIN_PIN
,
HIGH
);

920 #i‡
	`deföed
(
X_MAX_PIN
) && X_MAX_PIN > -1

921 
	`SET_INPUT
(
X_MAX_PIN
);

922 #ifde‡
ENDSTOPPULLUP_XMAX


923 
	`WRITE
(
X_MAX_PIN
,
HIGH
);

927 #i‡
	`deföed
(
Y_MAX_PIN
) && Y_MAX_PIN > -1

928 
	`SET_INPUT
(
Y_MAX_PIN
);

929 #ifde‡
ENDSTOPPULLUP_YMAX


930 
	`WRITE
(
Y_MAX_PIN
,
HIGH
);

934 #i‡
	`deföed
(
Z_MAX_PIN
) && Z_MAX_PIN > -1

935 
	`SET_INPUT
(
Z_MAX_PIN
);

936 #ifde‡
ENDSTOPPULLUP_ZMAX


937 
	`WRITE
(
Z_MAX_PIN
,
HIGH
);

943 #i‡
	`deföed
(
X_STEP_PIN
) && (X_STEP_PIN > -1)

944 
	`SET_OUTPUT
(
X_STEP_PIN
);

945 
	`WRITE
(
X_STEP_PIN
,
INVERT_X_STEP_PIN
);

946 
	`dißbÀ_x
();

948 #i‡
	`deföed
(
X2_STEP_PIN
) && (X2_STEP_PIN > -1)

949 
	`SET_OUTPUT
(
X2_STEP_PIN
);

950 
	`WRITE
(
X2_STEP_PIN
,
INVERT_X_STEP_PIN
);

951 
	`dißbÀ_x
();

953 #i‡
	`deföed
(
Y_STEP_PIN
) && (Y_STEP_PIN > -1)

954 
	`SET_OUTPUT
(
Y_STEP_PIN
);

955 
	`WRITE
(
Y_STEP_PIN
,
INVERT_Y_STEP_PIN
);

956 #i‡
	`deföed
(
Y_DUAL_STEPPER_DRIVERS
Ë&& deföed(
Y2_STEP_PIN
) && (Y2_STEP_PIN > -1)

957 
	`SET_OUTPUT
(
Y2_STEP_PIN
);

958 
	`WRITE
(
Y2_STEP_PIN
,
INVERT_Y_STEP_PIN
);

960 
	`dißbÀ_y
();

962 #i‡
	`deföed
(
Z_STEP_PIN
) && (Z_STEP_PIN > -1)

963 
	`SET_OUTPUT
(
Z_STEP_PIN
);

964 
	`WRITE
(
Z_STEP_PIN
,
INVERT_Z_STEP_PIN
);

965 #i‡
	`deföed
(
Z_DUAL_STEPPER_DRIVERS
Ë&& deföed(
Z2_STEP_PIN
) && (Z2_STEP_PIN > -1)

966 
	`SET_OUTPUT
(
Z2_STEP_PIN
);

967 
	`WRITE
(
Z2_STEP_PIN
,
INVERT_Z_STEP_PIN
);

969 
	`dißbÀ_z
();

971 #i‡
	`deföed
(
E0_STEP_PIN
) && (E0_STEP_PIN > -1)

972 
	`SET_OUTPUT
(
E0_STEP_PIN
);

973 
	`WRITE
(
E0_STEP_PIN
,
INVERT_E_STEP_PIN
);

974 
	`dißbÀ_e0
();

976 #i‡
	`deföed
(
E1_STEP_PIN
) && (E1_STEP_PIN > -1)

977 
	`SET_OUTPUT
(
E1_STEP_PIN
);

978 
	`WRITE
(
E1_STEP_PIN
,
INVERT_E_STEP_PIN
);

979 
	`dißbÀ_e1
();

981 #i‡
	`deföed
(
E2_STEP_PIN
) && (E2_STEP_PIN > -1)

982 
	`SET_OUTPUT
(
E2_STEP_PIN
);

983 
	`WRITE
(
E2_STEP_PIN
,
INVERT_E_STEP_PIN
);

984 
	`dißbÀ_e2
();

988 
TCCR1B
 &~(1<<
WGM13
);

989 
TCCR1B
 |(1<<
WGM12
);

990 
TCCR1A
 &~(1<<
WGM11
);

991 
TCCR1A
 &~(1<<
WGM10
);

994 
TCCR1A
 &~(3<<
COM1A0
);

995 
TCCR1A
 &~(3<<
COM1B0
);

1002 
TCCR1B
 = (TCCR1B & ~(0x07<<
CS10
)) | (2<<CS10);

1004 
OCR1A
 = 0x4000;

1005 
TCNT1
 = 0;

1006 
	`ENABLE_STEPPER_DRIVER_INTERRUPT
();

1008 #ifde‡
ADVANCE


1009 #i‡
	`deföed
(
TCCR0A
Ë&& deföed(
WGM01
)

1010 
TCCR0A
 &~(1<<
WGM01
);

1011 
TCCR0A
 &~(1<<
WGM00
);

1013 
e_°ïs
[0] = 0;

1014 
e_°ïs
[1] = 0;

1015 
e_°ïs
[2] = 0;

1016 
TIMSK0
 |(1<<
OCIE0A
);

1019 
	`íabÀ_íd°›s
(
åue
);

1020 
	`£i
();

1021 
	}
}

1025 
	$°_synchr⁄ize
()

1027  
	`blocks_queued
()) {

1028 
	`m™age_hóãr
();

1029 
	`m™age_öa˘ivôy
();

1030 
	`lcd_upd©e
();

1032 
	}
}

1034 
	$°_£t_posôi⁄
(c⁄° &
x
, c⁄° &
y
, c⁄° &
z
, c⁄° &
e
)

1036 
CRITICAL_SECTION_START
;

1037 
cou¡_posôi⁄
[
X_AXIS
] = 
x
;

1038 
cou¡_posôi⁄
[
Y_AXIS
] = 
y
;

1039 
cou¡_posôi⁄
[
Z_AXIS
] = 
z
;

1040 
cou¡_posôi⁄
[
E_AXIS
] = 
e
;

1041 
CRITICAL_SECTION_END
;

1042 
	}
}

1044 
	$°_£t_e_posôi⁄
(c⁄° &
e
)

1046 
CRITICAL_SECTION_START
;

1047 
cou¡_posôi⁄
[
E_AXIS
] = 
e
;

1048 
CRITICAL_SECTION_END
;

1049 
	}
}

1051 
	$°_gë_posôi⁄
(
uöt8_t
 
axis
)

1053 
cou¡_pos
;

1054 
CRITICAL_SECTION_START
;

1055 
cou¡_pos
 = 
cou¡_posôi⁄
[
axis
];

1056 
CRITICAL_SECTION_END
;

1057  
cou¡_pos
;

1058 
	}
}

1060 #ifde‡
ENABLE_AUTO_BED_LEVELING


1061 
	$°_gë_posôi⁄_mm
(
uöt8_t
 
axis
)

1063 
°ïî_posôi⁄_ö_°ïs
 = 
	`°_gë_posôi⁄
(
axis
);

1064  
°ïî_posôi⁄_ö_°ïs
 / 
axis_°ïs_≥r_unô
[
axis
];

1065 
	}
}

1068 
	$föishAndDißbÀSãµîs
()

1070 
	`°_synchr⁄ize
();

1071 
	`dißbÀ_x
();

1072 
	`dißbÀ_y
();

1073 
	`dißbÀ_z
();

1074 
	`dißbÀ_e0
();

1075 
	`dißbÀ_e1
();

1076 
	`dißbÀ_e2
();

1077 
	}
}

1079 
	$quickSt›
()

1081 
	`DISABLE_STEPPER_DRIVER_INTERRUPT
();

1082 
	`blocks_queued
())

1083 
	`∂™_disˇrd_cuºít_block
();

1084 
cuºít_block
 = 
NULL
;

1085 
	`ENABLE_STEPPER_DRIVER_INTERRUPT
();

1086 
	}
}

1088 #ifde‡
BABYSTEPPING


1091 
	$baby°ï
(c⁄° 
uöt8_t
 
axis
,c⁄° 
boﬁ
 
dúe˘i⁄
)

1095 
axis
)

1097 
X_AXIS
:

1099 
	`íabÀ_x
();

1100 
uöt8_t
 
ﬁd_x_dú_pö

	`READ
(
X_DIR_PIN
);

1103 
	`WRITE
(
X_DIR_PIN
,(
INVERT_X_DIR
)^
dúe˘i⁄
);

1104 #ifde‡
DUAL_X_CARRIAGE


1105 
	`WRITE
(
X2_DIR_PIN
,(
INVERT_X_DIR
)^
dúe˘i⁄
);

1109 
	`WRITE
(
X_STEP_PIN
, !
INVERT_X_STEP_PIN
);

1110 #ifde‡
DUAL_X_CARRIAGE


1111 
	`WRITE
(
X2_STEP_PIN
, !
INVERT_X_STEP_PIN
);

1114 
x
=1./(
axis
+1)/(axis+2);

1116 
	`WRITE
(
X_STEP_PIN
, 
INVERT_X_STEP_PIN
);

1117 #ifde‡
DUAL_X_CARRIAGE


1118 
	`WRITE
(
X2_STEP_PIN
, 
INVERT_X_STEP_PIN
);

1122 
	`WRITE
(
X_DIR_PIN
,
ﬁd_x_dú_pö
);

1123 #ifde‡
DUAL_X_CARRIAGE


1124 
	`WRITE
(
X2_DIR_PIN
,
ﬁd_x_dú_pö
);

1129 
Y_AXIS
:

1131 
	`íabÀ_y
();

1132 
uöt8_t
 
ﬁd_y_dú_pö

	`READ
(
Y_DIR_PIN
);

1135 
	`WRITE
(
Y_DIR_PIN
,(
INVERT_Y_DIR
)^
dúe˘i⁄
);

1136 #ifde‡
DUAL_Y_CARRIAGE


1137 
	`WRITE
(
Y2_DIR_PIN
,(
INVERT_Y_DIR
)^
dúe˘i⁄
);

1141 
	`WRITE
(
Y_STEP_PIN
, !
INVERT_Y_STEP_PIN
);

1142 #ifde‡
DUAL_Y_CARRIAGE


1143 
	`WRITE
(
Y2_STEP_PIN
, !
INVERT_Y_STEP_PIN
);

1146 
x
=1./(
axis
+1)/(axis+2);

1148 
	`WRITE
(
Y_STEP_PIN
, 
INVERT_Y_STEP_PIN
);

1149 #ifde‡
DUAL_Y_CARRIAGE


1150 
	`WRITE
(
Y2_STEP_PIN
, 
INVERT_Y_STEP_PIN
);

1154 
	`WRITE
(
Y_DIR_PIN
,
ﬁd_y_dú_pö
);

1155 #ifde‡
DUAL_Y_CARRIAGE


1156 
	`WRITE
(
Y2_DIR_PIN
,
ﬁd_y_dú_pö
);

1162 #i‚de‡
DELTA


1163 
Z_AXIS
:

1165 
	`íabÀ_z
();

1166 
uöt8_t
 
ﬁd_z_dú_pö

	`READ
(
Z_DIR_PIN
);

1168 
	`WRITE
(
Z_DIR_PIN
,(
INVERT_Z_DIR
)^
dúe˘i⁄
^
BABYSTEP_INVERT_Z
);

1169 #ifde‡
Z_DUAL_STEPPER_DRIVERS


1170 
	`WRITE
(
Z2_DIR_PIN
,(
INVERT_Z_DIR
)^
dúe˘i⁄
^
BABYSTEP_INVERT_Z
);

1173 
	`WRITE
(
Z_STEP_PIN
, !
INVERT_Z_STEP_PIN
);

1174 #ifde‡
Z_DUAL_STEPPER_DRIVERS


1175 
	`WRITE
(
Z2_STEP_PIN
, !
INVERT_Z_STEP_PIN
);

1179 
x
=1./(
axis
+1);

1181 
	`WRITE
(
Z_STEP_PIN
, 
INVERT_Z_STEP_PIN
);

1182 #ifde‡
Z_DUAL_STEPPER_DRIVERS


1183 
	`WRITE
(
Z2_STEP_PIN
, 
INVERT_Z_STEP_PIN
);

1187 
	`WRITE
(
Z_DIR_PIN
,
ﬁd_z_dú_pö
);

1188 #ifde‡
Z_DUAL_STEPPER_DRIVERS


1189 
	`WRITE
(
Z2_DIR_PIN
,
ﬁd_z_dú_pö
);

1195 
Z_AXIS
:

1197 
	`íabÀ_x
();

1198 
	`íabÀ_y
();

1199 
	`íabÀ_z
();

1200 
uöt8_t
 
ﬁd_x_dú_pö

	`READ
(
X_DIR_PIN
);

1201 
uöt8_t
 
ﬁd_y_dú_pö

	`READ
(
Y_DIR_PIN
);

1202 
uöt8_t
 
ﬁd_z_dú_pö

	`READ
(
Z_DIR_PIN
);

1204 
	`WRITE
(
X_DIR_PIN
,(
INVERT_X_DIR
)^
dúe˘i⁄
^
BABYSTEP_INVERT_Z
);

1205 
	`WRITE
(
Y_DIR_PIN
,(
INVERT_Y_DIR
)^
dúe˘i⁄
^
BABYSTEP_INVERT_Z
);

1206 
	`WRITE
(
Z_DIR_PIN
,(
INVERT_Z_DIR
)^
dúe˘i⁄
^
BABYSTEP_INVERT_Z
);

1209 
	`WRITE
(
X_STEP_PIN
, !
INVERT_X_STEP_PIN
);

1210 
	`WRITE
(
Y_STEP_PIN
, !
INVERT_Y_STEP_PIN
);

1211 
	`WRITE
(
Z_STEP_PIN
, !
INVERT_Z_STEP_PIN
);

1215 
x
=1./(
axis
+1);

1217 
	`WRITE
(
X_STEP_PIN
, 
INVERT_X_STEP_PIN
);

1218 
	`WRITE
(
Y_STEP_PIN
, 
INVERT_Y_STEP_PIN
);

1219 
	`WRITE
(
Z_STEP_PIN
, 
INVERT_Z_STEP_PIN
);

1222 
	`WRITE
(
X_DIR_PIN
,
ﬁd_x_dú_pö
);

1223 
	`WRITE
(
Y_DIR_PIN
,
ﬁd_y_dú_pö
);

1224 
	`WRITE
(
Z_DIR_PIN
,
ﬁd_z_dú_pö
);

1232 
	}
}

1235 
	$digôÆPŸWrôe
(
addªss
, 
vÆue
)

1237 #i‡
	`deföed
(
DIGIPOTSS_PIN
) && DIGIPOTSS_PIN > -1

1238 
	`digôÆWrôe
(
DIGIPOTSS_PIN
,
LOW
);

1239 
SPI
.
	`å™s„r
(
addªss
);

1240 
SPI
.
	`å™s„r
(
vÆue
);

1241 
	`digôÆWrôe
(
DIGIPOTSS_PIN
,
HIGH
);

1244 
	}
}

1246 
	$digùŸ_öô
()

1248 #i‡
	`deföed
(
DIGIPOTSS_PIN
) && DIGIPOTSS_PIN > -1

1249 c⁄° 
uöt8_t
 
digùŸ_mŸ‹_cuºít
[] = 
DIGIPOT_MOTOR_CURRENT
;

1251 
SPI
.
	`begö
();

1252 
	`pöMode
(
DIGIPOTSS_PIN
, 
OUTPUT
);

1253 
i
=0;i<=4;i++)

1255 
	`digùŸ_cuºít
(
i
,
digùŸ_mŸ‹_cuºít
[i]);

1257 #ifde‡
MOTOR_CURRENT_PWM_XY_PIN


1258 
	`pöMode
(
MOTOR_CURRENT_PWM_XY_PIN
, 
OUTPUT
);

1259 
	`pöMode
(
MOTOR_CURRENT_PWM_Z_PIN
, 
OUTPUT
);

1260 
	`pöMode
(
MOTOR_CURRENT_PWM_E_PIN
, 
OUTPUT
);

1261 
	`digùŸ_cuºít
(0, 
mŸ‹_cuºít_£âög
[0]);

1262 
	`digùŸ_cuºít
(1, 
mŸ‹_cuºít_£âög
[1]);

1263 
	`digùŸ_cuºít
(2, 
mŸ‹_cuºít_£âög
[2]);

1265 
TCCR5B
 = (TCCR5B & ~(
	`_BV
(
CS50
Ë| _BV(
CS51
Ë| _BV(
CS52
))) | _BV(CS50);

1267 
	}
}

1269 
	$digùŸ_cuºít
(
uöt8_t
 
drivî
, 
cuºít
)

1271 #i‡
	`deföed
(
DIGIPOTSS_PIN
) && DIGIPOTSS_PIN > -1

1272 c⁄° 
uöt8_t
 
digùŸ_ch
[] = 
DIGIPOT_CHANNELS
;

1273 
	`digôÆPŸWrôe
(
digùŸ_ch
[
drivî
], 
cuºít
);

1275 #ifde‡
MOTOR_CURRENT_PWM_XY_PIN


1276 i‡(
drivî
 =0Ë
	`™ÆogWrôe
(
MOTOR_CURRENT_PWM_XY_PIN
, ()
cuºít
 * 255L / ()
MOTOR_CURRENT_PWM_RANGE
);

1277 i‡(
drivî
 =1Ë
	`™ÆogWrôe
(
MOTOR_CURRENT_PWM_Z_PIN
, ()
cuºít
 * 255L / ()
MOTOR_CURRENT_PWM_RANGE
);

1278 i‡(
drivî
 =2Ë
	`™ÆogWrôe
(
MOTOR_CURRENT_PWM_E_PIN
, ()
cuºít
 * 255L / ()
MOTOR_CURRENT_PWM_RANGE
);

1280 
	}
}

1282 
	$mi¸o°ï_öô
()

1284 c⁄° 
uöt8_t
 
mi¸o°ï_modes
[] = 
MICROSTEP_MODES
;

1286 #i‡
	`deföed
(
E1_MS1_PIN
) && E1_MS1_PIN > -1

1287 
	`pöMode
(
E1_MS1_PIN
,
OUTPUT
);

1288 
	`pöMode
(
E1_MS2_PIN
,
OUTPUT
);

1291 #i‡
	`deföed
(
X_MS1_PIN
) && X_MS1_PIN > -1

1292 
	`pöMode
(
X_MS1_PIN
,
OUTPUT
);

1293 
	`pöMode
(
X_MS2_PIN
,
OUTPUT
);

1294 
	`pöMode
(
Y_MS1_PIN
,
OUTPUT
);

1295 
	`pöMode
(
Y_MS2_PIN
,
OUTPUT
);

1296 
	`pöMode
(
Z_MS1_PIN
,
OUTPUT
);

1297 
	`pöMode
(
Z_MS2_PIN
,
OUTPUT
);

1298 
	`pöMode
(
E0_MS1_PIN
,
OUTPUT
);

1299 
	`pöMode
(
E0_MS2_PIN
,
OUTPUT
);

1300 
i
=0;i<=4;i++Ë
	`mi¸o°ï_mode
(i,
mi¸o°ï_modes
[i]);

1302 
	}
}

1304 
	$mi¸o°ï_ms
(
uöt8_t
 
drivî
, 
öt8_t
 
ms1
, i¡8_à
ms2
)

1306 if(
ms1
 > -1Ë
drivî
)

1308 0: 
	`digôÆWrôe
–
X_MS1_PIN
,
ms1
); ;

1309 1: 
	`digôÆWrôe
–
Y_MS1_PIN
,
ms1
); ;

1310 2: 
	`digôÆWrôe
–
Z_MS1_PIN
,
ms1
); ;

1311 3: 
	`digôÆWrôe
(
E0_MS1_PIN
,
ms1
); ;

1312 #i‡
	`deföed
(
E1_MS1_PIN
) && E1_MS1_PIN > -1

1313 4: 
	`digôÆWrôe
(
E1_MS1_PIN
,
ms1
); ;

1316 if(
ms2
 > -1Ë
drivî
)

1318 0: 
	`digôÆWrôe
–
X_MS2_PIN
,
ms2
); ;

1319 1: 
	`digôÆWrôe
–
Y_MS2_PIN
,
ms2
); ;

1320 2: 
	`digôÆWrôe
–
Z_MS2_PIN
,
ms2
); ;

1321 3: 
	`digôÆWrôe
(
E0_MS2_PIN
,
ms2
); ;

1322 #i‡
	`deföed
(
E1_MS2_PIN
) && E1_MS2_PIN > -1

1323 4: 
	`digôÆWrôe
(
E1_MS2_PIN
,
ms2
); ;

1326 
	}
}

1328 
	$mi¸o°ï_mode
(
uöt8_t
 
drivî
, uöt8_à
°ïpög_mode
)

1330 
°ïpög_mode
)

1332 1: 
	`mi¸o°ï_ms
(
drivî
,
MICROSTEP1
); ;

1333 2: 
	`mi¸o°ï_ms
(
drivî
,
MICROSTEP2
); ;

1334 4: 
	`mi¸o°ï_ms
(
drivî
,
MICROSTEP4
); ;

1335 8: 
	`mi¸o°ï_ms
(
drivî
,
MICROSTEP8
); ;

1336 16: 
	`mi¸o°ï_ms
(
drivî
,
MICROSTEP16
); ;

1338 
	}
}

1340 
	$mi¸o°ï_ªadögs
()

1342 
	`SERIAL_PROTOCOLPGM
("MS1,MS2 Pins\n");

1343 
	`SERIAL_PROTOCOLPGM
("X: ");

1344 
	`SERIAL_PROTOCOL
–
	`digôÆRód
(
X_MS1_PIN
));

1345 
	`SERIAL_PROTOCOLLN
–
	`digôÆRód
(
X_MS2_PIN
));

1346 
	`SERIAL_PROTOCOLPGM
("Y: ");

1347 
	`SERIAL_PROTOCOL
–
	`digôÆRód
(
Y_MS1_PIN
));

1348 
	`SERIAL_PROTOCOLLN
–
	`digôÆRód
(
Y_MS2_PIN
));

1349 
	`SERIAL_PROTOCOLPGM
("Z: ");

1350 
	`SERIAL_PROTOCOL
–
	`digôÆRód
(
Z_MS1_PIN
));

1351 
	`SERIAL_PROTOCOLLN
–
	`digôÆRód
(
Z_MS2_PIN
));

1352 
	`SERIAL_PROTOCOLPGM
("E0: ");

1353 
	`SERIAL_PROTOCOL
–
	`digôÆRód
(
E0_MS1_PIN
));

1354 
	`SERIAL_PROTOCOLLN
–
	`digôÆRód
(
E0_MS2_PIN
));

1355 #i‡
	`deföed
(
E1_MS1_PIN
) && E1_MS1_PIN > -1

1356 
	`SERIAL_PROTOCOLPGM
("E1: ");

1357 
	`SERIAL_PROTOCOL
–
	`digôÆRód
(
E1_MS1_PIN
));

1358 
	`SERIAL_PROTOCOLLN
–
	`digôÆRód
(
E1_MS2_PIN
));

1360 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/stepper.h

21 #i‚de‡
°ï≥r_h


22 
	#°ï≥r_h


	)

24 
	~"∂™√r.h
"

26 #i‡
EXTRUDERS
 > 2

27 
	#WRITE_E_STEP
(
v
Ë{ if(
cuºít_block
->
a˘ive_exåudî
 =2Ë{ 
	`WRITE
(
E2_STEP_PIN
, v); } { if(cuºít_block->a˘ive_exåudî =1Ë{ WRITE(
E1_STEP_PIN
, v); } { WRITE(
E0_STEP_PIN
, v); }}}

	)

28 
	#NORM_E_DIR
(Ë{ if(
cuºít_block
->
a˘ive_exåudî
 =2Ë{ 
	`WRITE
(
E2_DIR_PIN
, !
INVERT_E2_DIR
); } { if(cuºít_block->a˘ive_exåudî =1Ë{ WRITE(
E1_DIR_PIN
, !
INVERT_E1_DIR
); } { WRITE(
E0_DIR_PIN
, !
INVERT_E0_DIR
); }}}

	)

29 
	#REV_E_DIR
(Ë{ if(
cuºít_block
->
a˘ive_exåudî
 =2Ë{ 
	`WRITE
(
E2_DIR_PIN
, 
INVERT_E2_DIR
); } { if(cuºít_block->a˘ive_exåudî =1Ë{ WRITE(
E1_DIR_PIN
, 
INVERT_E1_DIR
); } { WRITE(
E0_DIR_PIN
, 
INVERT_E0_DIR
); }}}

	)

30 #ñi‡
EXTRUDERS
 > 1

31 #i‚de‡
DUAL_X_CARRIAGE


32 
	#WRITE_E_STEP
(
v
Ë{ if(
cuºít_block
->
a˘ive_exåudî
 =1Ë{ 
	`WRITE
(
E1_STEP_PIN
, v); } { WRITE(
E0_STEP_PIN
, v); }}

	)

33 
	#NORM_E_DIR
(Ë{ if(
cuºít_block
->
a˘ive_exåudî
 =1Ë{ 
	`WRITE
(
E1_DIR_PIN
, !
INVERT_E1_DIR
); } { WRITE(
E0_DIR_PIN
, !
INVERT_E0_DIR
); }}

	)

34 
	#REV_E_DIR
(Ë{ if(
cuºít_block
->
a˘ive_exåudî
 =1Ë{ 
	`WRITE
(
E1_DIR_PIN
, 
INVERT_E1_DIR
); } { WRITE(
E0_DIR_PIN
, 
INVERT_E0_DIR
); }}

	)

36 
boﬁ
 
exåudî_du∂iˇti⁄_íabÀd
;

37 
	#WRITE_E_STEP
(
v
Ë{ if(
exåudî_du∂iˇti⁄_íabÀd
Ë{ 
	`WRITE
(
E0_STEP_PIN
, v); WRITE(
E1_STEP_PIN
, v); } if(
cuºít_block
->
a˘ive_exåudî
 =1Ë{ WRITE(E1_STEP_PIN, v); } { WRITE(E0_STEP_PIN, v); }}

	)

38 
	#NORM_E_DIR
(Ë{ if(
exåudî_du∂iˇti⁄_íabÀd
Ë{ 
	`WRITE
(
E0_DIR_PIN
, !
INVERT_E0_DIR
); WRITE(
E1_DIR_PIN
, !
INVERT_E1_DIR
); } if(
cuºít_block
->
a˘ive_exåudî
 =1Ë{ WRITE(E1_DIR_PIN, !INVERT_E1_DIR); } { WRITE(E0_DIR_PIN, !INVERT_E0_DIR); }}

	)

39 
	#REV_E_DIR
(Ë{ if(
exåudî_du∂iˇti⁄_íabÀd
Ë{ 
	`WRITE
(
E0_DIR_PIN
, 
INVERT_E0_DIR
); WRITE(
E1_DIR_PIN
, 
INVERT_E1_DIR
); } if(
cuºít_block
->
a˘ive_exåudî
 =1Ë{ WRITE(E1_DIR_PIN, INVERT_E1_DIR); } { WRITE(E0_DIR_PIN, INVERT_E0_DIR); }}

	)

42 
	#WRITE_E_STEP
(
v
Ë
	`WRITE
(
E0_STEP_PIN
, v)

	)

43 
	#NORM_E_DIR
(Ë
	`WRITE
(
E0_DIR_PIN
, !
INVERT_E0_DIR
)

	)

44 
	#REV_E_DIR
(Ë
	`WRITE
(
E0_DIR_PIN
, 
INVERT_E0_DIR
)

	)

47 #ifde‡
ABORT_ON_ENDSTOP_HIT_FEATURE_ENABLED


48 
boﬁ
 
ab‹t_⁄_íd°›_hô
;

52 
°_öô
();

55 
°_synchr⁄ize
();

58 
°_£t_posôi⁄
(c⁄° &
x
, c⁄° &
y
, c⁄° &
z
, c⁄° &
e
);

59 
°_£t_e_posôi⁄
(c⁄° &
e
);

62 
°_gë_posôi⁄
(
uöt8_t
 
axis
);

64 #ifde‡
ENABLE_AUTO_BED_LEVELING


66 
°_gë_posôi⁄_mm
(
uöt8_t
 
axis
);

71 
°_wake_up
();

74 
checkHôEnd°›s
();

75 
íd°›s_hô_⁄_puΩo£
();

77 
íabÀ_íd°›s
(
boﬁ
 
check
);

79 
checkSãµîEº‹s
();

81 
föishAndDißbÀSãµîs
();

83 
block_t
 *
cuºít_block
;

85 
quickSt›
();

87 
digôÆPŸWrôe
(
addªss
, 
vÆue
);

88 
mi¸o°ï_ms
(
uöt8_t
 
drivî
, 
öt8_t
 
ms1
, i¡8_à
ms2
);

89 
mi¸o°ï_mode
(
uöt8_t
 
drivî
, uöt8_à
°ïpög
);

90 
digùŸ_öô
();

91 
digùŸ_cuºít
(
uöt8_t
 
drivî
, 
cuºít
);

92 
mi¸o°ï_öô
();

93 
mi¸o°ï_ªadögs
();

95 #ifde‡
BABYSTEPPING


96 
baby°ï
(c⁄° 
uöt8_t
 
axis
,c⁄° 
boﬁ
 
dúe˘i⁄
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/temperature.cpp

32 
	~"M¨lö.h
"

33 
	~"u…ølcd.h
"

34 
	~"ãm≥øtuª.h
"

35 
	~"w©chdog.h
"

37 
	~"Sd2PöM≠.h
"

43 
	gèrgë_ãm≥øtuª
[
EXTRUDERS
] = { 0 };

44 
	gèrgë_ãm≥øtuª_bed
 = 0;

45 
	gcuºít_ãm≥øtuª_øw
[
EXTRUDERS
] = { 0 };

46 
	gcuºít_ãm≥øtuª
[
EXTRUDERS
] = { 0.0 };

47 
	gcuºít_ãm≥øtuª_bed_øw
 = 0;

48 
	gcuºít_ãm≥øtuª_bed
 = 0.0;

49 #ifde‡
TEMP_SENSOR_1_AS_REDUNDANT


50 
	gªdund™t_ãm≥øtuª_øw
 = 0;

51 
	gªdund™t_ãm≥øtuª
 = 0.0;

53 #ifde‡
PIDTEMP


54 
	gKp
=
DEFAULT_Kp
;

55 
	gKi
=(
DEFAULT_Ki
*
PID_dT
);

56 
	gKd
=(
DEFAULT_Kd
/
PID_dT
);

57 #ifde‡
PID_ADD_EXTRUSION_RATE


58 
	gKc
=
DEFAULT_Kc
;

62 #ifde‡
PIDTEMPBED


63 
	gbedKp
=
DEFAULT_bedKp
;

64 
	gbedKi
=(
DEFAULT_bedKi
*
PID_dT
);

65 
	gbedKd
=(
DEFAULT_bedKd
/
PID_dT
);

68 #ifde‡
FAN_SOFT_PWM


69 
	gÁnS≥edSo·Pwm
;

72 
	gso·_pwm_bed
;

74 #ifde‡
BABYSTEPPING


75 vﬁ©ûê
	gbaby°ïsTodo
[3]={0,0,0};

78 #ifde‡
FILAMENT_SENSOR


79 
	gcuºít_øw_fûwidth
 = 0;

84 vﬁ©ûê
boﬁ
 
	gãmp_mós_ªady
 = 
Ál£
;

86 #ifde‡
PIDTEMP


88 
	gãmp_iSèã
[
EXTRUDERS
] = { 0 };

89 
	gãmp_dSèã
[
EXTRUDERS
] = { 0 };

90 
	gpTîm
[
EXTRUDERS
];

91 
	giTîm
[
EXTRUDERS
];

92 
	gdTîm
[
EXTRUDERS
];

94 
	gpid_îr‹
[
EXTRUDERS
];

95 
	gãmp_iSèã_mö
[
EXTRUDERS
];

96 
	gãmp_iSèã_max
[
EXTRUDERS
];

99 
boﬁ
 
	gpid_ª£t
[
EXTRUDERS
];

101 #ifde‡
PIDTEMPBED


103 
	gãmp_iSèã_bed
 = { 0 };

104 
	gãmp_dSèã_bed
 = { 0 };

105 
	gpTîm_bed
;

106 
	giTîm_bed
;

107 
	gdTîm_bed
;

109 
	gpid_îr‹_bed
;

110 
	gãmp_iSèã_mö_bed
;

111 
	gãmp_iSèã_max_bed
;

113 
	g¥evious_mûlis_bed_hóãr
;

115 
	gso·_pwm
[
EXTRUDERS
];

117 #ifde‡
FAN_SOFT_PWM


118 
	gso·_pwm_Án
;

120 #i‡(
deföed
(
EXTRUDER_0_AUTO_FAN_PIN
) && EXTRUDER_0_AUTO_FAN_PIN > -1) || \

121 (
deföed
(
EXTRUDER_1_AUTO_FAN_PIN
Ë&& 
	gEXTRUDER_1_AUTO_FAN_PIN
 > -1) || \

122 (
deföed
(
EXTRUDER_2_AUTO_FAN_PIN
Ë&& 
	gEXTRUDER_2_AUTO_FAN_PIN
 > -1)

123 
	gexåudî_autoÁn_œ°_check
;

126 #i‡
EXTRUDERS
 > 3

127 #îr‹ 
Unsuµ‹ãd
 
numbî
 
of
 
exåudîs


128 #ñi‡
EXTRUDERS
 > 2

129 
	#ARRAY_BY_EXTRUDERS
(
v1
, 
v2
, 
v3
Ë{ v1, v2, v3 }

	)

130 #ñi‡
EXTRUDERS
 > 1

131 
	#ARRAY_BY_EXTRUDERS
(
v1
, 
v2
, 
v3
Ë{ v1, v2 }

	)

133 
	#ARRAY_BY_EXTRUDERS
(
v1
, 
v2
, 
v3
Ë{ v1 }

	)

137 
	gmöâemp_øw
[
EXTRUDERS
] = 
ARRAY_BY_EXTRUDERS
–
HEATER_0_RAW_LO_TEMP
 , 
HEATER_1_RAW_LO_TEMP
 , 
HEATER_2_RAW_LO_TEMP
 );

138 
	gmaxâemp_øw
[
EXTRUDERS
] = 
ARRAY_BY_EXTRUDERS
–
HEATER_0_RAW_HI_TEMP
 , 
HEATER_1_RAW_HI_TEMP
 , 
HEATER_2_RAW_HI_TEMP
 );

139 
	gmöâemp
[
EXTRUDERS
] = 
ARRAY_BY_EXTRUDERS
( 0, 0, 0 );

140 
	gmaxâemp
[
EXTRUDERS
] = 
ARRAY_BY_EXTRUDERS
( 16383, 16383, 16383 );

142 #ifde‡
BED_MAXTEMP


143 
	gbed_maxâemp_øw
 = 
HEATER_BED_RAW_HI_TEMP
;

146 #ifde‡
TEMP_SENSOR_1_AS_REDUNDANT


147 *
	ghóãr_âbl_m≠
[2] = {(*)
HEATER_0_TEMPTABLE
, (*)
HEATER_1_TEMPTABLE
 };

148 
uöt8_t
 
	ghóãr_âbŒí_m≠
[2] = { 
HEATER_0_TEMPTABLE_LEN
, 
HEATER_1_TEMPTABLE_LEN
 };

150 *
	ghóãr_âbl_m≠
[
EXTRUDERS
] = 
ARRAY_BY_EXTRUDERS
–(*)
HEATER_0_TEMPTABLE
, (*)
HEATER_1_TEMPTABLE
, (*)
HEATER_2_TEMPTABLE
 );

151 
uöt8_t
 
	ghóãr_âbŒí_m≠
[
EXTRUDERS
] = 
ARRAY_BY_EXTRUDERS
–
HEATER_0_TEMPTABLE_LEN
, 
HEATER_1_TEMPTABLE_LEN
, 
HEATER_2_TEMPTABLE_LEN
 );

154 
™Æog2ãmp
(
øw
, 
uöt8_t
 
e
);

155 
™Æog2ãmpBed
(
øw
);

156 
upd©eTem≥øtuªsFromRawVÆues
();

158 #ifde‡
WATCH_TEMP_PERIOD


159 
	gw©ch_°¨t_ãmp
[
EXTRUDERS
] = 
ARRAY_BY_EXTRUDERS
(0,0,0);

160 
	gw©chmûlis
[
EXTRUDERS
] = 
ARRAY_BY_EXTRUDERS
(0,0,0);

163 #i‚de‡
SOFT_PWM_SCALE


164 
	#SOFT_PWM_SCALE
 0

	)

167 #ifde‡
FILAMENT_SENSOR


168 
	gmós_shi·_ödex
;

174 
	$PID_autŸu√
(
ãmp
, 
exåudî
, 
ncy˛es
)

176 
öput
 = 0.0;

177 
cy˛es
=0;

178 
boﬁ
 
hótög
 = 
åue
;

180 
ãmp_mûlis
 = 
	`mûlis
();

181 
t1
=
ãmp_mûlis
;

182 
t2
=
ãmp_mûlis
;

183 
t_high
 = 0;

184 
t_low
 = 0;

186 
büs
, 
d
;

187 
Ku
, 
Tu
;

188 
Kp
, 
Ki
, 
Kd
;

189 
max
 = 0, 
mö
 = 10000;

191 i‡((
exåudî
 >
EXTRUDERS
)

192 #i‡(
TEMP_BED_PIN
 <= -1)

193 ||(
exåudî
 < 0)

196 
	`SERIAL_ECHOLN
("PID Autotune failed. BadÉxtruderÇumber.");

200 
	`SERIAL_ECHOLN
("PID Autotune start");

202 
	`dißbÀ_hóãr
();

204 i‡(
exåudî
<0)

206 
so·_pwm_bed
 = (
MAX_BED_POWER
)/2;

207 
büs
 = 
d
 = (
MAX_BED_POWER
)/2;

211 
so·_pwm
[
exåudî
] = (
PID_MAX
)/2;

212 
büs
 = 
d
 = (
PID_MAX
)/2;

220 if(
ãmp_mós_ªady
 =
åue
) {

221 
	`upd©eTem≥øtuªsFromRawVÆues
();

223 
öput
 = (
exåudî
<0)?
cuºít_ãm≥øtuª_bed
:
cuºít_ãm≥øtuª
[extruder];

225 
max
=
	`max
(max,
öput
);

226 
mö
=
	`mö
(mö,
öput
);

227 if(
hótög
 =
åue
 && 
öput
 > 
ãmp
) {

228 if(
	`mûlis
(Ë- 
t2
 > 5000) {

229 
hótög
=
Ál£
;

230 i‡(
exåudî
<0)

231 
so·_pwm_bed
 = (
büs
 - 
d
) >> 1;

233 
so·_pwm
[
exåudî
] = (
büs
 - 
d
) >> 1;

234 
t1
=
	`mûlis
();

235 
t_high
=
t1
 - 
t2
;

236 
max
=
ãmp
;

239 if(
hótög
 =
Ál£
 && 
öput
 < 
ãmp
) {

240 if(
	`mûlis
(Ë- 
t1
 > 5000) {

241 
hótög
=
åue
;

242 
t2
=
	`mûlis
();

243 
t_low
=
t2
 - 
t1
;

244 if(
cy˛es
 > 0) {

245 
büs
 +(
d
*(
t_high
 - 
t_low
))/(t_low +Å_high);

246 
büs
 = 
	`c⁄°øö
(büs, 20 ,(
exåudî
<0?(
MAX_BED_POWER
):(
PID_MAX
))-20);

247 if(
büs
 > (
exåudî
<0?(
MAX_BED_POWER
):(
PID_MAX
))/2Ë
d
 = (extruder<0?(MAX_BED_POWER):(PID_MAX)) - 1 - bias;

248 
d
 = 
büs
;

250 
	`SERIAL_PROTOCOLPGM
(" büs: "); 
	`SERIAL_PROTOCOL
(
büs
);

251 
	`SERIAL_PROTOCOLPGM
(" d: "); 
	`SERIAL_PROTOCOL
(
d
);

252 
	`SERIAL_PROTOCOLPGM
(" mö: "); 
	`SERIAL_PROTOCOL
(
mö
);

253 
	`SERIAL_PROTOCOLPGM
(" max: "); 
	`SERIAL_PROTOCOLLN
(
max
);

254 if(
cy˛es
 > 2) {

255 
Ku
 = (4.0*
d
)/(3.14159*(
max
-
mö
)/2.0);

256 
Tu
 = (()(
t_low
 + 
t_high
)/1000.0);

257 
	`SERIAL_PROTOCOLPGM
(" Ku: "); 
	`SERIAL_PROTOCOL
(
Ku
);

258 
	`SERIAL_PROTOCOLPGM
(" Tu: "); 
	`SERIAL_PROTOCOLLN
(
Tu
);

259 
Kp
 = 0.6*
Ku
;

260 
Ki
 = 2*
Kp
/
Tu
;

261 
Kd
 = 
Kp
*
Tu
/8;

262 
	`SERIAL_PROTOCOLLNPGM
(" Classic PID ");

263 
	`SERIAL_PROTOCOLPGM
(" Kp: "); 
	`SERIAL_PROTOCOLLN
(
Kp
);

264 
	`SERIAL_PROTOCOLPGM
(" Ki: "); 
	`SERIAL_PROTOCOLLN
(
Ki
);

265 
	`SERIAL_PROTOCOLPGM
(" Kd: "); 
	`SERIAL_PROTOCOLLN
(
Kd
);

284 i‡(
exåudî
<0)

285 
so·_pwm_bed
 = (
büs
 + 
d
) >> 1;

287 
so·_pwm
[
exåudî
] = (
büs
 + 
d
) >> 1;

288 
cy˛es
++;

289 
mö
=
ãmp
;

293 if(
öput
 > (
ãmp
 + 20)) {

294 
	`SERIAL_PROTOCOLLNPGM
("PID Autotune failed! TemperatureÅoo high");

297 if(
	`mûlis
(Ë- 
ãmp_mûlis
 > 2000) {

298 
p
;

299 i‡(
exåudî
<0){

300 
p
=
so·_pwm_bed
;

301 
	`SERIAL_PROTOCOLPGM
("ok B:");

303 
p
=
so·_pwm
[
exåudî
];

304 
	`SERIAL_PROTOCOLPGM
("ok T:");

307 
	`SERIAL_PROTOCOL
(
öput
);

308 
	`SERIAL_PROTOCOLPGM
(" @:");

309 
	`SERIAL_PROTOCOLLN
(
p
);

311 
ãmp_mûlis
 = 
	`mûlis
();

313 if(((
	`mûlis
(Ë- 
t1
Ë+ (mûlis(Ë- 
t2
)) > (10L*60L*1000L*2L)) {

314 
	`SERIAL_PROTOCOLLNPGM
("PID Autotune failed!Åimeout");

317 if(
cy˛es
 > 
ncy˛es
) {

318 
	`SERIAL_PROTOCOLLNPGM
("PID Autotune finished! PutÅheÜast Kp, Kiánd Kd constants fromábove into Configuration.h");

321 
	`lcd_upd©e
();

323 
	}
}

325 
	$upd©ePID
()

327 #ifde‡
PIDTEMP


328 
e
 = 0;É < 
EXTRUDERS
;É++) {

329 
ãmp_iSèã_max
[
e
] = 
PID_INTEGRAL_DRIVE_MAX
 / 
Ki
;

332 #ifde‡
PIDTEMPBED


333 
ãmp_iSèã_max_bed
 = 
PID_INTEGRAL_DRIVE_MAX
 / 
bedKi
;

335 
	}
}

337 
	$gëHóãrPowî
(
hóãr
) {

338 i‡(
hóãr
<0)

339  
so·_pwm_bed
;

340  
so·_pwm
[
hóãr
];

341 
	}
}

343 #i‡(
deföed
(
EXTRUDER_0_AUTO_FAN_PIN
) && EXTRUDER_0_AUTO_FAN_PIN > -1) || \

344 (
deföed
(
EXTRUDER_1_AUTO_FAN_PIN
Ë&& 
	gEXTRUDER_1_AUTO_FAN_PIN
 > -1) || \

345 (
deföed
(
EXTRUDER_2_AUTO_FAN_PIN
Ë&& 
	gEXTRUDER_2_AUTO_FAN_PIN
 > -1)

347 #i‡
deföed
(
FAN_PIN
) && FAN_PIN > -1

348 #i‡
EXTRUDER_0_AUTO_FAN_PIN
 =
FAN_PIN


351 #i‡
EXTRUDER_1_AUTO_FAN_PIN
 =
FAN_PIN


354 #i‡
EXTRUDER_2_AUTO_FAN_PIN
 =
FAN_PIN


359 
	$£tExåudîAutoF™Sèã
(
pö
, 
boﬁ
 
°©e
)

361 
√wF™S≥ed
 = (
°©e
 !0Ë? 
EXTRUDER_AUTO_FAN_SPEED
 : 0;

363 
	`pöMode
(
pö
, 
OUTPUT
);

364 
	`digôÆWrôe
(
pö
, 
√wF™S≥ed
);

365 
	`™ÆogWrôe
(
pö
, 
√wF™S≥ed
);

366 
	}
}

368 
	$checkExåudîAutoF™s
()

370 
uöt8_t
 
ÁnSèã
 = 0;

373 #i‡
	`deföed
(
EXTRUDER_0_AUTO_FAN_PIN
) && EXTRUDER_0_AUTO_FAN_PIN > -1

374 i‡(
cuºít_ãm≥øtuª
[0] > 
EXTRUDER_AUTO_FAN_TEMPERATURE
)

375 
ÁnSèã
 |= 1;

377 #i‡
	`deföed
(
EXTRUDER_1_AUTO_FAN_PIN
) && EXTRUDER_1_AUTO_FAN_PIN > -1

378 i‡(
cuºít_ãm≥øtuª
[1] > 
EXTRUDER_AUTO_FAN_TEMPERATURE
)

380 i‡(
EXTRUDER_1_AUTO_FAN_PIN
 =
EXTRUDER_0_AUTO_FAN_PIN
)

381 
ÁnSèã
 |= 1;

383 
ÁnSèã
 |= 2;

386 #i‡
	`deföed
(
EXTRUDER_2_AUTO_FAN_PIN
) && EXTRUDER_2_AUTO_FAN_PIN > -1

387 i‡(
cuºít_ãm≥øtuª
[2] > 
EXTRUDER_AUTO_FAN_TEMPERATURE
)

389 i‡(
EXTRUDER_2_AUTO_FAN_PIN
 =
EXTRUDER_0_AUTO_FAN_PIN
)

390 
ÁnSèã
 |= 1;

391 i‡(
EXTRUDER_2_AUTO_FAN_PIN
 =
EXTRUDER_1_AUTO_FAN_PIN
)

392 
ÁnSèã
 |= 2;

394 
ÁnSèã
 |= 4;

399 #i‡
	`deföed
(
EXTRUDER_0_AUTO_FAN_PIN
) && EXTRUDER_0_AUTO_FAN_PIN > -1

400 
	`£tExåudîAutoF™Sèã
(
EXTRUDER_0_AUTO_FAN_PIN
, (
ÁnSèã
 & 1) != 0);

402 #i‡
	`deföed
(
EXTRUDER_1_AUTO_FAN_PIN
) && EXTRUDER_1_AUTO_FAN_PIN > -1

403 i‡(
EXTRUDER_1_AUTO_FAN_PIN
 !
EXTRUDER_0_AUTO_FAN_PIN
)

404 
	`£tExåudîAutoF™Sèã
(
EXTRUDER_1_AUTO_FAN_PIN
, (
ÁnSèã
 & 2) != 0);

406 #i‡
	`deföed
(
EXTRUDER_2_AUTO_FAN_PIN
) && EXTRUDER_2_AUTO_FAN_PIN > -1

407 i‡(
EXTRUDER_2_AUTO_FAN_PIN
 !
EXTRUDER_0_AUTO_FAN_PIN


408 && 
EXTRUDER_2_AUTO_FAN_PIN
 !
EXTRUDER_1_AUTO_FAN_PIN
)

409 
	`£tExåudîAutoF™Sèã
(
EXTRUDER_2_AUTO_FAN_PIN
, (
ÁnSèã
 & 4) != 0);

411 
	}
}

415 
	$m™age_hóãr
()

417 
pid_öput
;

418 
pid_ouçut
;

420 if(
ãmp_mós_ªady
 !
åue
)

423 
	`upd©eTem≥øtuªsFromRawVÆues
();

425 
e
 = 0;É < 
EXTRUDERS
;É++)

428 #i‡
	`deföed
 (
THERMAL_RUNAWAY_PROTECTION_PERIOD
) && THERMAL_RUNAWAY_PROTECTION_PERIOD > 0

429 
	`thîmÆ_ru«way_¥Ÿe˘i⁄
(&
thîmÆ_ru«way_°©e_machöe
[
e
], &
thîmÆ_ru«way_timî
[e], 
cuºít_ãm≥øtuª
[e], 
èrgë_ãm≥øtuª
[e],É, 
THERMAL_RUNAWAY_PROTECTION_PERIOD
, 
THERMAL_RUNAWAY_PROTECTION_HYSTERESIS
);

432 #ifde‡
PIDTEMP


433 
pid_öput
 = 
cuºít_ãm≥øtuª
[
e
];

435 #i‚de‡
PID_OPENLOOP


436 
pid_îr‹
[
e
] = 
èrgë_ãm≥øtuª
[e] - 
pid_öput
;

437 if(
pid_îr‹
[
e
] > 
PID_FUNCTIONAL_RANGE
) {

438 
pid_ouçut
 = 
BANG_MAX
;

439 
pid_ª£t
[
e
] = 
åue
;

441 if(
pid_îr‹
[
e
] < -
PID_FUNCTIONAL_RANGE
 || 
èrgë_ãm≥øtuª
[e] == 0) {

442 
pid_ouçut
 = 0;

443 
pid_ª£t
[
e
] = 
åue
;

446 if(
pid_ª£t
[
e
] =
åue
) {

447 
ãmp_iSèã
[
e
] = 0.0;

448 
pid_ª£t
[
e
] = 
Ál£
;

450 
pTîm
[
e
] = 
Kp
 * 
pid_îr‹
[e];

451 
ãmp_iSèã
[
e
] +
pid_îr‹
[e];

452 
ãmp_iSèã
[
e
] = 
	`c⁄°øö
—emp_iSèã[e], 
ãmp_iSèã_mö
[e], 
ãmp_iSèã_max
[e]);

453 
iTîm
[
e
] = 
Ki
 * 
ãmp_iSèã
[e];

456 
	#K2
 (1.0-
K1
)

	)

457 
dTîm
[
e
] = (
Kd
 * (
pid_öput
 - 
ãmp_dSèã
[e]))*
K2
 + (
K1
 * dTerm[e]);

458 
pid_ouçut
 = 
	`c⁄°øö
(
pTîm
[
e
] + 
iTîm
[e] - 
dTîm
[e], 0, 
PID_MAX
);

460 
ãmp_dSèã
[
e
] = 
pid_öput
;

462 
pid_ouçut
 = 
	`c⁄°øö
(
èrgë_ãm≥øtuª
[
e
], 0, 
PID_MAX
);

464 #ifde‡
PID_DEBUG


465 
SERIAL_ECHO_START
;

466 
	`SERIAL_ECHO
(" PID_DEBUG ");

467 
	`SERIAL_ECHO
(
e
);

468 
	`SERIAL_ECHO
(": Input ");

469 
	`SERIAL_ECHO
(
pid_öput
);

470 
	`SERIAL_ECHO
(" Output ");

471 
	`SERIAL_ECHO
(
pid_ouçut
);

472 
	`SERIAL_ECHO
("ÖTerm ");

473 
	`SERIAL_ECHO
(
pTîm
[
e
]);

474 
	`SERIAL_ECHO
(" iTerm ");

475 
	`SERIAL_ECHO
(
iTîm
[
e
]);

476 
	`SERIAL_ECHO
(" dTerm ");

477 
	`SERIAL_ECHOLN
(
dTîm
[
e
]);

480 
pid_ouçut
 = 0;

481 if(
cuºít_ãm≥øtuª
[
e
] < 
èrgë_ãm≥øtuª
[e]) {

482 
pid_ouçut
 = 
PID_MAX
;

487 if((
cuºít_ãm≥øtuª
[
e
] > 
möâemp
[e]Ë&& (cuºít_ãm≥øtuª[e] < 
maxâemp
[e]))

489 
so·_pwm
[
e
] = ()
pid_ouçut
 >> 1;

492 
so·_pwm
[
e
] = 0;

495 #ifde‡
WATCH_TEMP_PERIOD


496 if(
w©chmûlis
[
e
] && 
	`mûlis
(Ë- w©chmûlis[e] > 
WATCH_TEMP_PERIOD
)

498 if(
	`degHŸíd
(
e
Ë< 
w©ch_°¨t_ãmp
[e] + 
WATCH_TEMP_INCREASE
)

500 
	`£tT¨gëHŸíd
(0, 
e
);

501 
	`LCD_MESSAGEPGM
("Heating failed");

502 
SERIAL_ECHO_START
;

503 
	`SERIAL_ECHOLN
("Heating failed");

505 
w©chmûlis
[
e
] = 0;

509 #ifde‡
TEMP_SENSOR_1_AS_REDUNDANT


510 if(
	`Ábs
(
cuºít_ãm≥øtuª
[0] - 
ªdund™t_ãm≥øtuª
Ë> 
MAX_REDUNDANT_TEMP_SENSOR_DIFF
) {

511 
	`dißbÀ_hóãr
();

512 if(
	`IsSt›≥d
(Ë=
Ál£
) {

513 
SERIAL_ERROR_START
;

514 
	`SERIAL_ERRORLNPGM
("Extruder switched off. Temperature difference betweenÅemp sensors isÅoo high !");

515 
	`LCD_ALERTMESSAGEPGM
("Err: REDUNDANT TEMP ERROR");

517 #i‚de‡
BOGUS_TEMPERATURE_FAILSAFE_OVERRIDE


518 
	`St›
();

524 #i‡(
	`deföed
(
EXTRUDER_0_AUTO_FAN_PIN
) && EXTRUDER_0_AUTO_FAN_PIN > -1) || \

525 (
	`deföed
(
EXTRUDER_1_AUTO_FAN_PIN
) && EXTRUDER_1_AUTO_FAN_PIN > -1) || \

526 (
	`deföed
(
EXTRUDER_2_AUTO_FAN_PIN
) && EXTRUDER_2_AUTO_FAN_PIN > -1)

527 if(
	`mûlis
(Ë- 
exåudî_autoÁn_œ°_check
 > 2500)

529 
	`checkExåudîAutoF™s
();

530 
exåudî_autoÁn_œ°_check
 = 
	`mûlis
();

534 #i‚de‡
PIDTEMPBED


535 if(
	`mûlis
(Ë- 
¥evious_mûlis_bed_hóãr
 < 
BED_CHECK_INTERVAL
)

537 
¥evious_mûlis_bed_hóãr
 = 
	`mûlis
();

540 #i‡
TEMP_SENSOR_BED
 != 0

542 #ifde‡
THERMAL_RUNAWAY_PROTECTION_PERIOD
 && THERMAL_RUNAWAY_PROTECTION_PERIOD > 0

543 
	`thîmÆ_ru«way_¥Ÿe˘i⁄
(&
thîmÆ_ru«way_bed_°©e_machöe
, &
thîmÆ_ru«way_bed_timî
, 
cuºít_ãm≥øtuª_bed
, 
èrgë_ãm≥øtuª_bed
, 9, 
THERMAL_RUNAWAY_PROTECTION_BED_PERIOD
, 
THERMAL_RUNAWAY_PROTECTION_BED_HYSTERESIS
);

546 #ifde‡
PIDTEMPBED


547 
pid_öput
 = 
cuºít_ãm≥øtuª_bed
;

549 #i‚de‡
PID_OPENLOOP


550 
pid_îr‹_bed
 = 
èrgë_ãm≥øtuª_bed
 - 
pid_öput
;

551 
pTîm_bed
 = 
bedKp
 * 
pid_îr‹_bed
;

552 
ãmp_iSèã_bed
 +
pid_îr‹_bed
;

553 
ãmp_iSèã_bed
 = 
	`c⁄°øö
—emp_iSèã_bed, 
ãmp_iSèã_mö_bed
, 
ãmp_iSèã_max_bed
);

554 
iTîm_bed
 = 
bedKi
 * 
ãmp_iSèã_bed
;

557 
	#K2
 (1.0-
K1
)

	)

558 
dTîm_bed
(
bedKd
 * (
pid_öput
 - 
ãmp_dSèã_bed
))*
K2
 + (
K1
 * dTerm_bed);

559 
ãmp_dSèã_bed
 = 
pid_öput
;

561 
pid_ouçut
 = 
	`c⁄°øö
(
pTîm_bed
 + 
iTîm_bed
 - 
dTîm_bed
, 0, 
MAX_BED_POWER
);

564 
pid_ouçut
 = 
	`c⁄°øö
(
èrgë_ãm≥øtuª_bed
, 0, 
MAX_BED_POWER
);

567 if((
cuºít_ãm≥øtuª_bed
 > 
BED_MINTEMP
Ë&& (cuºít_ãm≥øtuª_bed < 
BED_MAXTEMP
))

569 
so·_pwm_bed
 = ()
pid_ouçut
 >> 1;

572 
so·_pwm_bed
 = 0;

575 #ñi‡!
	`deföed
(
BED_LIMIT_SWITCHING
)

577 if((
cuºít_ãm≥øtuª_bed
 > 
BED_MINTEMP
Ë&& (cuºít_ãm≥øtuª_bed < 
BED_MAXTEMP
))

579 if(
cuºít_ãm≥øtuª_bed
 >
èrgë_ãm≥øtuª_bed
)

581 
so·_pwm_bed
 = 0;

585 
so·_pwm_bed
 = 
MAX_BED_POWER
>>1;

590 
so·_pwm_bed
 = 0;

591 
	`WRITE
(
HEATER_BED_PIN
,
LOW
);

595 if((
cuºít_ãm≥øtuª_bed
 > 
BED_MINTEMP
Ë&& (cuºít_ãm≥øtuª_bed < 
BED_MAXTEMP
))

597 if(
cuºít_ãm≥øtuª_bed
 > 
èrgë_ãm≥øtuª_bed
 + 
BED_HYSTERESIS
)

599 
so·_pwm_bed
 = 0;

601 if(
cuºít_ãm≥øtuª_bed
 <
èrgë_ãm≥øtuª_bed
 - 
BED_HYSTERESIS
)

603 
so·_pwm_bed
 = 
MAX_BED_POWER
>>1;

608 
so·_pwm_bed
 = 0;

609 
	`WRITE
(
HEATER_BED_PIN
,
LOW
);

615 #ifde‡
FILAMENT_SENSOR


616 if(
fûamít_£ns‹
)

618 
mós_shi·_ödex
=
dñay_ödex1
-
mós_dñay_cm
;

619 if(
mós_shi·_ödex
<0)

620 
mós_shi·_ödex
 = mós_shi·_ödex + (
MAX_MEASUREMENT_DELAY
+1);

625 if(
mós_shi·_ödex
<0)

626 
mós_shi·_ödex
=0;

627 i‡(
mós_shi·_ödex
>
MAX_MEASUREMENT_DELAY
)

628 
mós_shi·_ödex
=
MAX_MEASUREMENT_DELAY
;

630 
vﬁumëric_mu…ùlõr
[
FILAMENT_SENSOR_EXTRUDER_NUM
] = 
	`pow
(()(100+
mósuªmít_dñay
[
mós_shi·_ödex
])/100.0,2);

631 i‡(
vﬁumëric_mu…ùlõr
[
FILAMENT_SENSOR_EXTRUDER_NUM
] <0.01)

632 
vﬁumëric_mu…ùlõr
[
FILAMENT_SENSOR_EXTRUDER_NUM
]=0.01;

635 
	}
}

637 
	#PGM_RD_W
(
x
Ë()
	`pgm_ªad_w‹d
(&x)

	)

640 
	$™Æog2ãmp
(
øw
, 
uöt8_t
 
e
) {

641 #ifde‡
TEMP_SENSOR_1_AS_REDUNDANT


642 if(
e
 > 
EXTRUDERS
)

644 if(
e
 >
EXTRUDERS
)

647 
SERIAL_ERROR_START
;

648 
	`SERIAL_ERROR
(()
e
);

649 
	`SERIAL_ERRORLNPGM
(" - InvalidÉxtruderÇumber !");

650 
	`kûl
();

653 #ifde‡
HEATER_0_USES_MAX6675


654 i‡(
e
 == 0)

656  0.25 * 
øw
;

660 if(
hóãr_âbl_m≠
[
e
] !
NULL
)

662 
˚lsius
 = 0;

663 
uöt8_t
 
i
;

664 (*
â
)[][2] = ((*)[][2])(
hóãr_âbl_m≠
[
e
]);

666 
i
=1; i<
hóãr_âbŒí_m≠
[
e
]; i++)

668 i‡(
	`PGM_RD_W
((*
â
)[
i
][0]Ë> 
øw
)

670 
˚lsius
 = 
	`PGM_RD_W
((*
â
)[
i
-1][1]) +

671 (
øw
 - 
	`PGM_RD_W
((*
â
)[
i
-1][0])) *

672 ()(
	`PGM_RD_W
((*
â
)[
i
][1]) - PGM_RD_W((*tt)[i-1][1])) /

673 ()(
	`PGM_RD_W
((*
â
)[
i
][0]) - PGM_RD_W((*tt)[i-1][0]));

679 i‡(
i
 =
hóãr_âbŒí_m≠
[
e
]Ë
˚lsius
 = 
	`PGM_RD_W
((*
â
)[i-1][1]);

681  
˚lsius
;

683  ((
øw
 * ((5.0 * 100.0Ë/ 1024.0Ë/ 
OVERSAMPLENR
Ë* 
TEMP_SENSOR_AD595_GAIN
Ë+ 
TEMP_SENSOR_AD595_OFFSET
;

684 
	}
}

688 
	$™Æog2ãmpBed
(
øw
) {

689 #ifde‡
BED_USES_THERMISTOR


690 
˚lsius
 = 0;

691 
byã
 
i
;

693 
i
=1; i<
BEDTEMPTABLE_LEN
; i++)

695 i‡(
	`PGM_RD_W
(
BEDTEMPTABLE
[
i
][0]Ë> 
øw
)

697 
˚lsius
 = 
	`PGM_RD_W
(
BEDTEMPTABLE
[
i
-1][1]) +

698 (
øw
 - 
	`PGM_RD_W
(
BEDTEMPTABLE
[
i
-1][0])) *

699 ()(
	`PGM_RD_W
(
BEDTEMPTABLE
[
i
][1]) - PGM_RD_W(BEDTEMPTABLE[i-1][1])) /

700 ()(
	`PGM_RD_W
(
BEDTEMPTABLE
[
i
][0]) - PGM_RD_W(BEDTEMPTABLE[i-1][0]));

706 i‡(
i
 =
BEDTEMPTABLE_LEN
Ë
˚lsius
 = 
	`PGM_RD_W
(
BEDTEMPTABLE
[i-1][1]);

708  
˚lsius
;

709 #ñi‡
deföed
 
BED_USES_AD595


710  ((
øw
 * ((5.0 * 100.0Ë/ 1024.0Ë/ 
OVERSAMPLENR
Ë* 
TEMP_SENSOR_AD595_GAIN
Ë+ 
TEMP_SENSOR_AD595_OFFSET
;

714 
	}
}

718 
	$upd©eTem≥øtuªsFromRawVÆues
()

720 
uöt8_t
 
e
=0;e<
EXTRUDERS
;e++)

722 
cuºít_ãm≥øtuª
[
e
] = 
	`™Æog2ãmp
(
cuºít_ãm≥øtuª_øw
[e],É);

724 
cuºít_ãm≥øtuª_bed
 = 
	`™Æog2ãmpBed
(
cuºít_ãm≥øtuª_bed_øw
);

725 #ifde‡
TEMP_SENSOR_1_AS_REDUNDANT


726 
ªdund™t_ãm≥øtuª
 = 
	`™Æog2ãmp
(
ªdund™t_ãm≥øtuª_øw
, 1);

728 #i‡
	`deföed
 (
FILAMENT_SENSOR
Ë&& (
FILWIDTH_PIN
 > -1)

729 
fûamít_width_mós
 = 
	`™Æog2widthFû
();

732 
	`w©chdog_ª£t
();

734 
CRITICAL_SECTION_START
;

735 
ãmp_mós_ªady
 = 
Ál£
;

736 
CRITICAL_SECTION_END
;

737 
	}
}

741 #ifde‡
FILAMENT_SENSOR


742 
	$™Æog2widthFû
() {

743  
cuºít_øw_fûwidth
/16383.0*5.0;

745 
	}
}

748 
	$widthFû_to_size_øtio
() {

750 
ãmp
;

752 
ãmp
=
fûamít_width_mós
;

753 if(
fûamít_width_mós
<
MEASURED_LOWER_LIMIT
)

754 
ãmp
=
fûamít_width_nomöÆ
;

755 i‡(
fûamít_width_mós
>
MEASURED_UPPER_LIMIT
)

756 
ãmp

MEASURED_UPPER_LIMIT
;

759 (
fûamít_width_nomöÆ
/
ãmp
*100);

762 
	}
}

769 
	$ç_öô
()

771 #i‡
	`MB
(
RUMBA
Ë&& ((
TEMP_SENSOR_0
==-1)||(
TEMP_SENSOR_1
==-1)||(
TEMP_SENSOR_2
==-1)||(
TEMP_SENSOR_BED
==-1))

773 
MCUCR
=(1<<
JTD
);

774 
MCUCR
=(1<<
JTD
);

778 
e
 = 0;É < 
EXTRUDERS
;É++) {

780 
maxâemp
[
e
] = maxttemp[0];

781 #ifde‡
PIDTEMP


782 
ãmp_iSèã_mö
[
e
] = 0.0;

783 
ãmp_iSèã_max
[
e
] = 
PID_INTEGRAL_DRIVE_MAX
 / 
Ki
;

785 #ifde‡
PIDTEMPBED


786 
ãmp_iSèã_mö_bed
 = 0.0;

787 
ãmp_iSèã_max_bed
 = 
PID_INTEGRAL_DRIVE_MAX
 / 
bedKi
;

791 #i‡
	`deföed
(
HEATER_0_PIN
) && (HEATER_0_PIN > -1)

792 
	`SET_OUTPUT
(
HEATER_0_PIN
);

794 #i‡
	`deföed
(
HEATER_1_PIN
) && (HEATER_1_PIN > -1)

795 
	`SET_OUTPUT
(
HEATER_1_PIN
);

797 #i‡
	`deföed
(
HEATER_2_PIN
) && (HEATER_2_PIN > -1)

798 
	`SET_OUTPUT
(
HEATER_2_PIN
);

800 #i‡
	`deföed
(
HEATER_BED_PIN
) && (HEATER_BED_PIN > -1)

801 
	`SET_OUTPUT
(
HEATER_BED_PIN
);

803 #i‡
	`deföed
(
FAN_PIN
) && (FAN_PIN > -1)

804 
	`SET_OUTPUT
(
FAN_PIN
);

805 #ifde‡
FAST_PWM_FAN


806 
	`£tPwmFªquícy
(
FAN_PIN
, 1);

808 #ifde‡
FAN_SOFT_PWM


809 
so·_pwm_Án
 = 
ÁnS≥edSo·Pwm
 / 2;

813 #ifde‡
HEATER_0_USES_MAX6675


814 #i‚de‡
SDSUPPORT


815 
	`SET_OUTPUT
(
SCK_PIN
);

816 
	`WRITE
(
SCK_PIN
,0);

818 
	`SET_OUTPUT
(
MOSI_PIN
);

819 
	`WRITE
(
MOSI_PIN
,1);

821 
	`SET_INPUT
(
MISO_PIN
);

822 
	`WRITE
(
MISO_PIN
,1);

827 
	`pöMode
(
SS_PIN
, 
OUTPUT
);

828 
	`digôÆWrôe
(
SS_PIN
,0);

829 
	`pöMode
(
MAX6675_SS
, 
OUTPUT
);

830 
	`digôÆWrôe
(
MAX6675_SS
,1);

834 
ADCSRA
 = 1<<
ADEN
 | 1<<
ADSC
 | 1<<
ADIF
 | 0x07;

835 
DIDR0
 = 0;

836 #ifde‡
DIDR2


837 
DIDR2
 = 0;

839 #i‡
	`deföed
(
TEMP_0_PIN
) && (TEMP_0_PIN > -1)

840 #i‡
TEMP_0_PIN
 < 8

841 
DIDR0
 |1 << 
TEMP_0_PIN
;

843 
DIDR2
 |1<<(
TEMP_0_PIN
 - 8);

846 #i‡
	`deföed
(
TEMP_1_PIN
) && (TEMP_1_PIN > -1)

847 #i‡
TEMP_1_PIN
 < 8

848 
DIDR0
 |1<<
TEMP_1_PIN
;

850 
DIDR2
 |1<<(
TEMP_1_PIN
 - 8);

853 #i‡
	`deföed
(
TEMP_2_PIN
) && (TEMP_2_PIN > -1)

854 #i‡
TEMP_2_PIN
 < 8

855 
DIDR0
 |1 << 
TEMP_2_PIN
;

857 
DIDR2
 |1<<(
TEMP_2_PIN
 - 8);

860 #i‡
	`deföed
(
TEMP_BED_PIN
) && (TEMP_BED_PIN > -1)

861 #i‡
TEMP_BED_PIN
 < 8

862 
DIDR0
 |1<<
TEMP_BED_PIN
;

864 
DIDR2
 |1<<(
TEMP_BED_PIN
 - 8);

869 #ifde‡
FILAMENT_SENSOR


870 #i‡
	`deföed
(
FILWIDTH_PIN
) && (FILWIDTH_PIN > -1)

871 #i‡
FILWIDTH_PIN
 < 8

872 
DIDR0
 |1<<
FILWIDTH_PIN
;

874 
DIDR2
 |1<<(
FILWIDTH_PIN
 - 8);

881 
OCR0B
 = 128;

882 
TIMSK0
 |(1<<
OCIE0B
);

885 
	`dñay
(250);

887 #ifde‡
HEATER_0_MINTEMP


888 
möâemp
[0] = 
HEATER_0_MINTEMP
;

889 
	`™Æog2ãmp
(
möâemp_øw
[0], 0Ë< 
HEATER_0_MINTEMP
) {

890 #i‡
HEATER_0_RAW_LO_TEMP
 < 
HEATER_0_RAW_HI_TEMP


891 
möâemp_øw
[0] +
OVERSAMPLENR
;

893 
möâemp_øw
[0] -
OVERSAMPLENR
;

897 #ifde‡
HEATER_0_MAXTEMP


898 
maxâemp
[0] = 
HEATER_0_MAXTEMP
;

899 
	`™Æog2ãmp
(
maxâemp_øw
[0], 0Ë> 
HEATER_0_MAXTEMP
) {

900 #i‡
HEATER_0_RAW_LO_TEMP
 < 
HEATER_0_RAW_HI_TEMP


901 
maxâemp_øw
[0] -
OVERSAMPLENR
;

903 
maxâemp_øw
[0] +
OVERSAMPLENR
;

908 #i‡(
EXTRUDERS
 > 1Ë&& 
	`deföed
(
HEATER_1_MINTEMP
)

909 
möâemp
[1] = 
HEATER_1_MINTEMP
;

910 
	`™Æog2ãmp
(
möâemp_øw
[1], 1Ë< 
HEATER_1_MINTEMP
) {

911 #i‡
HEATER_1_RAW_LO_TEMP
 < 
HEATER_1_RAW_HI_TEMP


912 
möâemp_øw
[1] +
OVERSAMPLENR
;

914 
möâemp_øw
[1] -
OVERSAMPLENR
;

918 #i‡(
EXTRUDERS
 > 1Ë&& 
	`deföed
(
HEATER_1_MAXTEMP
)

919 
maxâemp
[1] = 
HEATER_1_MAXTEMP
;

920 
	`™Æog2ãmp
(
maxâemp_øw
[1], 1Ë> 
HEATER_1_MAXTEMP
) {

921 #i‡
HEATER_1_RAW_LO_TEMP
 < 
HEATER_1_RAW_HI_TEMP


922 
maxâemp_øw
[1] -
OVERSAMPLENR
;

924 
maxâemp_øw
[1] +
OVERSAMPLENR
;

929 #i‡(
EXTRUDERS
 > 2Ë&& 
	`deföed
(
HEATER_2_MINTEMP
)

930 
möâemp
[2] = 
HEATER_2_MINTEMP
;

931 
	`™Æog2ãmp
(
möâemp_øw
[2], 2Ë< 
HEATER_2_MINTEMP
) {

932 #i‡
HEATER_2_RAW_LO_TEMP
 < 
HEATER_2_RAW_HI_TEMP


933 
möâemp_øw
[2] +
OVERSAMPLENR
;

935 
möâemp_øw
[2] -
OVERSAMPLENR
;

939 #i‡(
EXTRUDERS
 > 2Ë&& 
	`deföed
(
HEATER_2_MAXTEMP
)

940 
maxâemp
[2] = 
HEATER_2_MAXTEMP
;

941 
	`™Æog2ãmp
(
maxâemp_øw
[2], 2Ë> 
HEATER_2_MAXTEMP
) {

942 #i‡
HEATER_2_RAW_LO_TEMP
 < 
HEATER_2_RAW_HI_TEMP


943 
maxâemp_øw
[2] -
OVERSAMPLENR
;

945 
maxâemp_øw
[2] +
OVERSAMPLENR
;

950 #ifde‡
BED_MINTEMP


961 #ifde‡
BED_MAXTEMP


962 
	`™Æog2ãmpBed
(
bed_maxâemp_øw
Ë> 
BED_MAXTEMP
) {

963 #i‡
HEATER_BED_RAW_LO_TEMP
 < 
HEATER_BED_RAW_HI_TEMP


964 
bed_maxâemp_øw
 -
OVERSAMPLENR
;

966 
bed_maxâemp_øw
 +
OVERSAMPLENR
;

970 
	}
}

972 
	$£tW©ch
()

974 #ifde‡
WATCH_TEMP_PERIOD


975 
e
 = 0;É < 
EXTRUDERS
;É++)

977 if(
	`degHŸíd
(
e
Ë< 
	`degT¨gëHŸíd
”Ë- (
WATCH_TEMP_INCREASE
 * 2))

979 
w©ch_°¨t_ãmp
[
e
] = 
	`degHŸíd
(e);

980 
w©chmûlis
[
e
] = 
	`mûlis
();

984 
	}
}

986 #i‡
deföed
 (
THERMAL_RUNAWAY_PROTECTION_PERIOD
) && THERMAL_RUNAWAY_PROTECTION_PERIOD > 0

987 
	$thîmÆ_ru«way_¥Ÿe˘i⁄
(*
°©e
, *
timî
, 
ãm≥øtuª
, 
èrgë_ãm≥øtuª
, 
hóãr_id
, 
≥riod_£c⁄ds
, 
hy°îesis_degc
)

1003 i‡((
èrgë_ãm≥øtuª
 =0Ë|| 
thîmÆ_ru«way
)

1005 *
°©e
 = 0;

1006 *
timî
 = 0;

1009 *
°©e
)

1012 i‡(
èrgë_ãm≥øtuª
 > 0Ë*
°©e
 = 1;

1015 i‡(
ãm≥øtuª
 >
èrgë_ãm≥øtuª
Ë*
°©e
 = 2;

1018 i‡(
ãm≥øtuª
 >(
èrgë_ãm≥øtuª
 - 
hy°îesis_degc
))

1020 *
timî
 = 
	`mûlis
();

1022 i‡–(
	`mûlis
(Ë- *
timî
Ë> 
≥riod_£c⁄ds
*1000)

1024 
SERIAL_ERROR_START
;

1025 
	`SERIAL_ERRORLNPGM
("Thermal Runaway, system stopped! Heater_ID: ");

1026 
	`SERIAL_ERRORLN
(()
hóãr_id
);

1027 
	`LCD_ALERTMESSAGEPGM
("THERMAL RUNAWAY");

1028 
thîmÆ_ru«way
 = 
åue
;

1031 
	`dißbÀ_hóãr
();

1032 
	`dißbÀ_x
();

1033 
	`dißbÀ_y
();

1034 
	`dißbÀ_z
();

1035 
	`dißbÀ_e0
();

1036 
	`dißbÀ_e1
();

1037 
	`dißbÀ_e2
();

1038 
	`m™age_hóãr
();

1039 
	`lcd_upd©e
();

1044 
	}
}

1047 
	$dißbÀ_hóãr
()

1049 
i
=0;i<
EXTRUDERS
;i++)

1050 
	`£tT¨gëHŸíd
(0,
i
);

1051 
	`£tT¨gëBed
(0);

1052 #i‡
	`deföed
(
TEMP_0_PIN
) && TEMP_0_PIN > -1

1053 
èrgë_ãm≥øtuª
[0]=0;

1054 
so·_pwm
[0]=0;

1055 #i‡
	`deföed
(
HEATER_0_PIN
) && HEATER_0_PIN > -1

1056 
	`WRITE
(
HEATER_0_PIN
,
LOW
);

1060 #i‡
	`deföed
(
TEMP_1_PIN
Ë&& TEMP_1_PIN > -1 && 
EXTRUDERS
 > 1

1061 
èrgë_ãm≥øtuª
[1]=0;

1062 
so·_pwm
[1]=0;

1063 #i‡
	`deföed
(
HEATER_1_PIN
) && HEATER_1_PIN > -1

1064 
	`WRITE
(
HEATER_1_PIN
,
LOW
);

1068 #i‡
	`deföed
(
TEMP_2_PIN
Ë&& TEMP_2_PIN > -1 && 
EXTRUDERS
 > 2

1069 
èrgë_ãm≥øtuª
[2]=0;

1070 
so·_pwm
[2]=0;

1071 #i‡
	`deföed
(
HEATER_2_PIN
) && HEATER_2_PIN > -1

1072 
	`WRITE
(
HEATER_2_PIN
,
LOW
);

1076 #i‡
	`deföed
(
TEMP_BED_PIN
) && TEMP_BED_PIN > -1

1077 
èrgë_ãm≥øtuª_bed
=0;

1078 
so·_pwm_bed
=0;

1079 #i‡
	`deföed
(
HEATER_BED_PIN
) && HEATER_BED_PIN > -1

1080 
	`WRITE
(
HEATER_BED_PIN
,
LOW
);

1083 
	}
}

1085 
	$max_ãmp_îr‹
(
uöt8_t
 
e
) {

1086 
	`dißbÀ_hóãr
();

1087 if(
	`IsSt›≥d
(Ë=
Ál£
) {

1088 
SERIAL_ERROR_START
;

1089 
	`SERIAL_ERRORLN
(()
e
);

1090 
	`SERIAL_ERRORLNPGM
(": Extruder switched off. MAXTEMPÅriggered !");

1091 
	`LCD_ALERTMESSAGEPGM
("Err: MAXTEMP");

1093 #i‚de‡
BOGUS_TEMPERATURE_FAILSAFE_OVERRIDE


1094 
	`St›
();

1096 
	}
}

1098 
	$mö_ãmp_îr‹
(
uöt8_t
 
e
) {

1099 
	`dißbÀ_hóãr
();

1100 if(
	`IsSt›≥d
(Ë=
Ál£
) {

1101 
SERIAL_ERROR_START
;

1102 
	`SERIAL_ERRORLN
(()
e
);

1103 
	`SERIAL_ERRORLNPGM
(": Extruder switched off. MINTEMPÅriggered !");

1104 
	`LCD_ALERTMESSAGEPGM
("Err: MINTEMP");

1106 #i‚de‡
BOGUS_TEMPERATURE_FAILSAFE_OVERRIDE


1107 
	`St›
();

1109 
	}
}

1111 
	$bed_max_ãmp_îr‹
() {

1112 #i‡
HEATER_BED_PIN
 > -1

1113 
	`WRITE
(
HEATER_BED_PIN
, 0);

1115 if(
	`IsSt›≥d
(Ë=
Ál£
) {

1116 
SERIAL_ERROR_START
;

1117 
	`SERIAL_ERRORLNPGM
("Temperature heated bed switched off. MAXTEMPÅriggered !!");

1118 
	`LCD_ALERTMESSAGEPGM
("Err: MAXTEMP BED");

1120 #i‚de‡
BOGUS_TEMPERATURE_FAILSAFE_OVERRIDE


1121 
	`St›
();

1123 
	}
}

1125 #ifde‡
HEATER_0_USES_MAX6675


1126 
	#MAX6675_HEAT_INTERVAL
 250

	)

1127 
	gmax6675_¥evious_mûlis
 = 
MAX6675_HEAT_INTERVAL
;

1128 
	gmax6675_ãmp
 = 2000;

1130 
	$ªad_max6675
()

1132 i‡(
	`mûlis
(Ë- 
max6675_¥evious_mûlis
 < 
MAX6675_HEAT_INTERVAL
)

1133  
max6675_ãmp
;

1135 
max6675_¥evious_mûlis
 = 
	`mûlis
();

1136 
max6675_ãmp
 = 0;

1138 #ifdef 
PRR


1139 
PRR
 &~(1<<
PRSPI
);

1140 #ñi‡
deföed
 
PRR0


1141 
PRR0
 &~(1<<
PRSPI
);

1144 
SPCR
 = (1<<
MSTR
Ë| (1<<
SPE
Ë| (1<<
SPR0
);

1147 
	`WRITE
(
MAX6675_SS
, 0);

1150 
	`asm
("nop");

1151 
	`asm
("nop");

1154 
SPDR
 = 0;

1155 ;(
SPSR
 & (1<<
SPIF
)) == 0;);

1156 
max6675_ãmp
 = 
SPDR
;

1157 
max6675_ãmp
 <<= 8;

1160 
SPDR
 = 0;

1161 ;(
SPSR
 & (1<<
SPIF
)) == 0;);

1162 
max6675_ãmp
 |
SPDR
;

1165 
	`WRITE
(
MAX6675_SS
, 1);

1167 i‡(
max6675_ãmp
 & 4)

1170 
max6675_ãmp
 = 2000;

1174 
max6675_ãmp
 = max6675_temp >> 3;

1177  
max6675_ãmp
;

1178 
	}
}

1183 
	$ISR
(
TIMER0_COMPB_ve˘
)

1186 
ãmp_cou¡
 = 0;

1187 
øw_ãmp_0_vÆue
 = 0;

1188 
øw_ãmp_1_vÆue
 = 0;

1189 
øw_ãmp_2_vÆue
 = 0;

1190 
øw_ãmp_bed_vÆue
 = 0;

1191 
ãmp_°©e
 = 10;

1192 
pwm_cou¡
 = (1 << 
SOFT_PWM_SCALE
);

1193 
so·_pwm_0
;

1194 #i‡(
EXTRUDERS
 > 1Ë|| 
	`deföed
(
HEATERS_PARALLEL
)

1195 
so·_pwm_1
;

1197 #i‡
EXTRUDERS
 > 2

1198 
so·_pwm_2
;

1200 #i‡
HEATER_BED_PIN
 > -1

1201 
so·_pwm_b
;

1204 #i‡
	`deföed
(
FILWIDTH_PIN
) &&(FILWIDTH_PIN > -1)

1205 
øw_fûwidth_vÆue
 = 0;

1208 if(
pwm_cou¡
 == 0){

1209 
so·_pwm_0
 = 
so·_pwm
[0];

1210 if(
so·_pwm_0
 > 0) {

1211 
	`WRITE
(
HEATER_0_PIN
,1);

1212 #ifde‡
HEATERS_PARALLEL


1213 
	`WRITE
(
HEATER_1_PIN
,1);

1215 } 
	`WRITE
(
HEATER_0_PIN
,0);

1217 #i‡
EXTRUDERS
 > 1

1218 
so·_pwm_1
 = 
so·_pwm
[1];

1219 if(
so·_pwm_1
 > 0Ë
	`WRITE
(
HEATER_1_PIN
,1); WRITE(HEATER_1_PIN,0);

1221 #i‡
EXTRUDERS
 > 2

1222 
so·_pwm_2
 = 
so·_pwm
[2];

1223 if(
so·_pwm_2
 > 0Ë
	`WRITE
(
HEATER_2_PIN
,1); WRITE(HEATER_2_PIN,0);

1225 #i‡
	`deföed
(
HEATER_BED_PIN
) && HEATER_BED_PIN > -1

1226 
so·_pwm_b
 = 
so·_pwm_bed
;

1227 if(
so·_pwm_b
 > 0Ë
	`WRITE
(
HEATER_BED_PIN
,1); WRITE(HEATER_BED_PIN,0);

1229 #ifde‡
FAN_SOFT_PWM


1230 
so·_pwm_Án
 = 
ÁnS≥edSo·Pwm
 / 2;

1231 if(
so·_pwm_Án
 > 0Ë
	`WRITE
(
FAN_PIN
,1); WRITE(FAN_PIN,0);

1234 if(
so·_pwm_0
 < 
pwm_cou¡
) {

1235 
	`WRITE
(
HEATER_0_PIN
,0);

1236 #ifde‡
HEATERS_PARALLEL


1237 
	`WRITE
(
HEATER_1_PIN
,0);

1240 #i‡
EXTRUDERS
 > 1

1241 if(
so·_pwm_1
 < 
pwm_cou¡
Ë
	`WRITE
(
HEATER_1_PIN
,0);

1243 #i‡
EXTRUDERS
 > 2

1244 if(
so·_pwm_2
 < 
pwm_cou¡
Ë
	`WRITE
(
HEATER_2_PIN
,0);

1246 #i‡
	`deföed
(
HEATER_BED_PIN
) && HEATER_BED_PIN > -1

1247 if(
so·_pwm_b
 < 
pwm_cou¡
Ë
	`WRITE
(
HEATER_BED_PIN
,0);

1249 #ifde‡
FAN_SOFT_PWM


1250 if(
so·_pwm_Án
 < 
pwm_cou¡
Ë
	`WRITE
(
FAN_PIN
,0);

1253 
pwm_cou¡
 +(1 << 
SOFT_PWM_SCALE
);

1254 
pwm_cou¡
 &= 0x7f;

1256 
ãmp_°©e
) {

1258 #i‡
	`deföed
(
TEMP_0_PIN
) && (TEMP_0_PIN > -1)

1259 #i‡
TEMP_0_PIN
 > 7

1260 
ADCSRB
 = 1<<
MUX5
;

1262 
ADCSRB
 = 0;

1264 
ADMUX
 = ((1 << 
REFS0
Ë| (
TEMP_0_PIN
 & 0x07));

1265 
ADCSRA
 |1<<
ADSC
;

1267 
	`lcd_buâ⁄s_upd©e
();

1268 
ãmp_°©e
 = 1;

1271 #i‡
	`deföed
(
TEMP_0_PIN
) && (TEMP_0_PIN > -1)

1272 
øw_ãmp_0_vÆue
 +
ADC
;

1274 #ifde‡
HEATER_0_USES_MAX6675


1275 
øw_ãmp_0_vÆue
 = 
	`ªad_max6675
();

1277 
ãmp_°©e
 = 2;

1280 #i‡
	`deföed
(
TEMP_BED_PIN
) && (TEMP_BED_PIN > -1)

1281 #i‡
TEMP_BED_PIN
 > 7

1282 
ADCSRB
 = 1<<
MUX5
;

1284 
ADCSRB
 = 0;

1286 
ADMUX
 = ((1 << 
REFS0
Ë| (
TEMP_BED_PIN
 & 0x07));

1287 
ADCSRA
 |1<<
ADSC
;

1289 
	`lcd_buâ⁄s_upd©e
();

1290 
ãmp_°©e
 = 3;

1293 #i‡
	`deföed
(
TEMP_BED_PIN
) && (TEMP_BED_PIN > -1)

1294 
øw_ãmp_bed_vÆue
 +
ADC
;

1296 
ãmp_°©e
 = 4;

1299 #i‡
	`deföed
(
TEMP_1_PIN
) && (TEMP_1_PIN > -1)

1300 #i‡
TEMP_1_PIN
 > 7

1301 
ADCSRB
 = 1<<
MUX5
;

1303 
ADCSRB
 = 0;

1305 
ADMUX
 = ((1 << 
REFS0
Ë| (
TEMP_1_PIN
 & 0x07));

1306 
ADCSRA
 |1<<
ADSC
;

1308 
	`lcd_buâ⁄s_upd©e
();

1309 
ãmp_°©e
 = 5;

1312 #i‡
	`deföed
(
TEMP_1_PIN
) && (TEMP_1_PIN > -1)

1313 
øw_ãmp_1_vÆue
 +
ADC
;

1315 
ãmp_°©e
 = 6;

1318 #i‡
	`deföed
(
TEMP_2_PIN
) && (TEMP_2_PIN > -1)

1319 #i‡
TEMP_2_PIN
 > 7

1320 
ADCSRB
 = 1<<
MUX5
;

1322 
ADCSRB
 = 0;

1324 
ADMUX
 = ((1 << 
REFS0
Ë| (
TEMP_2_PIN
 & 0x07));

1325 
ADCSRA
 |1<<
ADSC
;

1327 
	`lcd_buâ⁄s_upd©e
();

1328 
ãmp_°©e
 = 7;

1331 #i‡
	`deföed
(
TEMP_2_PIN
) && (TEMP_2_PIN > -1)

1332 
øw_ãmp_2_vÆue
 +
ADC
;

1334 
ãmp_°©e
 = 8;

1338 #i‡
	`deföed
(
FILWIDTH_PIN
) && (FILWIDTH_PIN> -1)

1339 #i‡
FILWIDTH_PIN
>7

1340 
ADCSRB
 = 1<<
MUX5
;

1342 
ADCSRB
 = 0;

1344 
ADMUX
 = ((1 << 
REFS0
Ë| (
FILWIDTH_PIN
 & 0x07));

1345 
ADCSRA
 |1<<
ADSC
;

1347 
	`lcd_buâ⁄s_upd©e
();

1348 
ãmp_°©e
 = 9;

1351 #i‡
	`deföed
(
FILWIDTH_PIN
) &&(FILWIDTH_PIN > -1)

1353 if(
ADC
>102)

1355 
øw_fûwidth_vÆue
=Ñaw_filwidth_value-(raw_filwidth_value>>7);

1357 
øw_fûwidth_vÆue
øw_fûwidth_vÆuê+ (()
ADC
<<7);

1360 
ãmp_°©e
 = 0;

1362 
ãmp_cou¡
++;

1367 
ãmp_°©e
 = 0;

1375 if(
ãmp_cou¡
 >
OVERSAMPLENR
)

1377 i‡(!
ãmp_mós_ªady
)

1379 
cuºít_ãm≥øtuª_øw
[0] = 
øw_ãmp_0_vÆue
;

1380 #i‡
EXTRUDERS
 > 1

1381 
cuºít_ãm≥øtuª_øw
[1] = 
øw_ãmp_1_vÆue
;

1383 #ifde‡
TEMP_SENSOR_1_AS_REDUNDANT


1384 
ªdund™t_ãm≥øtuª_øw
 = 
øw_ãmp_1_vÆue
;

1386 #i‡
EXTRUDERS
 > 2

1387 
cuºít_ãm≥øtuª_øw
[2] = 
øw_ãmp_2_vÆue
;

1389 
cuºít_ãm≥øtuª_bed_øw
 = 
øw_ãmp_bed_vÆue
;

1393 #i‡
	`deföed
(
FILWIDTH_PIN
) &&(FILWIDTH_PIN > -1)

1394 
cuºít_øw_fûwidth
 = 
øw_fûwidth_vÆue
>>10;

1398 
ãmp_mós_ªady
 = 
åue
;

1399 
ãmp_cou¡
 = 0;

1400 
øw_ãmp_0_vÆue
 = 0;

1401 
øw_ãmp_1_vÆue
 = 0;

1402 
øw_ãmp_2_vÆue
 = 0;

1403 
øw_ãmp_bed_vÆue
 = 0;

1405 #i‡
HEATER_0_RAW_LO_TEMP
 > 
HEATER_0_RAW_HI_TEMP


1406 if(
cuºít_ãm≥øtuª_øw
[0] <
maxâemp_øw
[0]) {

1408 if(
cuºít_ãm≥øtuª_øw
[0] >
maxâemp_øw
[0]) {

1410 
	`max_ãmp_îr‹
(0);

1412 #i‡
HEATER_0_RAW_LO_TEMP
 > 
HEATER_0_RAW_HI_TEMP


1413 if(
cuºít_ãm≥øtuª_øw
[0] >
möâemp_øw
[0]) {

1415 if(
cuºít_ãm≥øtuª_øw
[0] <
möâemp_øw
[0]) {

1417 
	`mö_ãmp_îr‹
(0);

1419 #i‡
EXTRUDERS
 > 1

1420 #i‡
HEATER_1_RAW_LO_TEMP
 > 
HEATER_1_RAW_HI_TEMP


1421 if(
cuºít_ãm≥øtuª_øw
[1] <
maxâemp_øw
[1]) {

1423 if(
cuºít_ãm≥øtuª_øw
[1] >
maxâemp_øw
[1]) {

1425 
	`max_ãmp_îr‹
(1);

1427 #i‡
HEATER_1_RAW_LO_TEMP
 > 
HEATER_1_RAW_HI_TEMP


1428 if(
cuºít_ãm≥øtuª_øw
[1] >
möâemp_øw
[1]) {

1430 if(
cuºít_ãm≥øtuª_øw
[1] <
möâemp_øw
[1]) {

1432 
	`mö_ãmp_îr‹
(1);

1435 #i‡
EXTRUDERS
 > 2

1436 #i‡
HEATER_2_RAW_LO_TEMP
 > 
HEATER_2_RAW_HI_TEMP


1437 if(
cuºít_ãm≥øtuª_øw
[2] <
maxâemp_øw
[2]) {

1439 if(
cuºít_ãm≥øtuª_øw
[2] >
maxâemp_øw
[2]) {

1441 
	`max_ãmp_îr‹
(2);

1443 #i‡
HEATER_2_RAW_LO_TEMP
 > 
HEATER_2_RAW_HI_TEMP


1444 if(
cuºít_ãm≥øtuª_øw
[2] >
möâemp_øw
[2]) {

1446 if(
cuºít_ãm≥øtuª_øw
[2] <
möâemp_øw
[2]) {

1448 
	`mö_ãmp_îr‹
(2);

1453 #i‡
	`deföed
(
BED_MAXTEMP
Ë&& (
TEMP_SENSOR_BED
 != 0)

1454 #i‡
HEATER_BED_RAW_LO_TEMP
 > 
HEATER_BED_RAW_HI_TEMP


1455 if(
cuºít_ãm≥øtuª_bed_øw
 <
bed_maxâemp_øw
) {

1457 if(
cuºít_ãm≥øtuª_bed_øw
 >
bed_maxâemp_øw
) {

1459 
èrgë_ãm≥øtuª_bed
 = 0;

1460 
	`bed_max_ãmp_îr‹
();

1465 #ifde‡
BABYSTEPPING


1466 
uöt8_t
 
axis
=0;axis<3;axis++)

1468 
curTodo
=
baby°ïsTodo
[
axis
];

1470 if(
curTodo
>0)

1472 
	`baby°ï
(
axis
, 
åue
);

1473 
baby°ïsTodo
[
axis
]--;

1476 if(
curTodo
<0)

1478 
	`baby°ï
(
axis
, 
Ál£
);

1479 
baby°ïsTodo
[
axis
]++;

1483 
	}
}

1485 #ifde‡
PIDTEMP


1489 
	$sˇÀPID_i
(
i
)

1491  
i
*
PID_dT
;

1492 
	}
}

1494 
	$unsˇÀPID_i
(
i
)

1496  
i
/
PID_dT
;

1497 
	}
}

1499 
	$sˇÀPID_d
(
d
)

1501  
d
/
PID_dT
;

1502 
	}
}

1504 
	$unsˇÀPID_d
(
d
)

1506  
d
*
PID_dT
;

1507 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/temperature.h

21 #i‚de‡
ãm≥øtuª_h


22 
	#ãm≥øtuª_h


	)

24 
	~"M¨lö.h
"

25 
	~"∂™√r.h
"

26 #ifde‡
PID_ADD_EXTRUSION_RATE


27 
	~"°ï≥r.h
"

31 
ç_öô
();

32 
m™age_hóãr
();

34 #ifde‡
FILAMENT_SENSOR


36 
™Æog2widthFû
();

39 
widthFû_to_size_øtio
();

44 
èrgë_ãm≥øtuª
[
EXTRUDERS
];

45 
cuºít_ãm≥øtuª
[
EXTRUDERS
];

46 #ifde‡
SHOW_TEMP_ADC_VALUES


47 
cuºít_ãm≥øtuª_øw
[
EXTRUDERS
];

48 
cuºít_ãm≥øtuª_bed_øw
;

50 
èrgë_ãm≥øtuª_bed
;

51 
cuºít_ãm≥øtuª_bed
;

52 #ifde‡
TEMP_SENSOR_1_AS_REDUNDANT


53 
ªdund™t_ãm≥øtuª
;

56 #i‡
deföed
(
CONTROLLERFAN_PIN
) && CONTROLLERFAN_PIN > -1

57 
so·_pwm_bed
;

60 #ifde‡
PIDTEMP


61 
Kp
,
Ki
,
Kd
,
Kc
;

62 
sˇÀPID_i
(
i
);

63 
sˇÀPID_d
(
d
);

64 
unsˇÀPID_i
(
i
);

65 
unsˇÀPID_d
(
d
);

68 #ifde‡
PIDTEMPBED


69 
bedKp
,
bedKi
,
bedKd
;

73 #ifde‡
BABYSTEPPING


74 vﬁ©ûê
baby°ïsTodo
[3];

81 
FORCE_INLINE
 
	$degHŸíd
(
uöt8_t
 
exåudî
) {

82  
cuºít_ãm≥øtuª
[
exåudî
];

83 
	}
};

85 #ifde‡
SHOW_TEMP_ADC_VALUES


86 
FORCE_INLINE
 
	$øwHŸídTemp
(
uöt8_t
 
exåudî
) {

87  
cuºít_ãm≥øtuª_øw
[
exåudî
];

88 
	}
};

90 
FORCE_INLINE
 
	$øwBedTemp
() {

91  
cuºít_ãm≥øtuª_bed_øw
;

92 
	}
};

95 
FORCE_INLINE
 
	$degBed
() {

96  
cuºít_ãm≥øtuª_bed
;

97 
	}
};

99 
FORCE_INLINE
 
	$degT¨gëHŸíd
(
uöt8_t
 
exåudî
) {

100  
èrgë_ãm≥øtuª
[
exåudî
];

101 
	}
};

103 
FORCE_INLINE
 
	$degT¨gëBed
() {

104  
èrgë_ãm≥øtuª_bed
;

105 
	}
};

107 
FORCE_INLINE
 
	$£tT¨gëHŸíd
(c⁄° &
˚lsius
, 
uöt8_t
 
exåudî
) {

108 
èrgë_ãm≥øtuª
[
exåudî
] = 
˚lsius
;

109 
	}
};

111 
FORCE_INLINE
 
	$£tT¨gëBed
(c⁄° &
˚lsius
) {

112 
èrgë_ãm≥øtuª_bed
 = 
˚lsius
;

113 
	}
};

115 
FORCE_INLINE
 
boﬁ
 
	$isHótögHŸíd
(
uöt8_t
 
exåudî
){

116  
èrgë_ãm≥øtuª
[
exåudî
] > 
cuºít_ãm≥øtuª
[extruder];

117 
	}
};

119 
FORCE_INLINE
 
boﬁ
 
	$isHótögBed
() {

120  
èrgë_ãm≥øtuª_bed
 > 
cuºít_ãm≥øtuª_bed
;

121 
	}
};

123 
FORCE_INLINE
 
boﬁ
 
	$isCoﬁögHŸíd
(
uöt8_t
 
exåudî
) {

124  
èrgë_ãm≥øtuª
[
exåudî
] < 
cuºít_ãm≥øtuª
[extruder];

125 
	}
};

127 
FORCE_INLINE
 
boﬁ
 
	$isCoﬁögBed
() {

128  
èrgë_ãm≥øtuª_bed
 < 
cuºít_ãm≥øtuª_bed
;

129 
	}
};

131 
	#degHŸíd0
(Ë
	`degHŸíd
(0)

	)

132 
	#degT¨gëHŸíd0
(Ë
	`degT¨gëHŸíd
(0)

	)

133 
	#£tT¨gëHŸíd0
(
_˚lsius
Ë
	`£tT¨gëHŸíd
((_˚lsius), 0)

	)

134 
	#isHótögHŸíd0
(Ë
	`isHótögHŸíd
(0)

	)

135 
	#isCoﬁögHŸíd0
(Ë
	`isCoﬁögHŸíd
(0)

	)

136 #i‡
EXTRUDERS
 > 1

137 
	#degHŸíd1
(Ë
	`degHŸíd
(1)

	)

138 
	#degT¨gëHŸíd1
(Ë
	`degT¨gëHŸíd
(1)

	)

139 
	#£tT¨gëHŸíd1
(
_˚lsius
Ë
	`£tT¨gëHŸíd
((_˚lsius), 1)

	)

140 
	#isHótögHŸíd1
(Ë
	`isHótögHŸíd
(1)

	)

141 
	#isCoﬁögHŸíd1
(Ë
	`isCoﬁögHŸíd
(1)

	)

143 
	#£tT¨gëHŸíd1
(
_˚lsius
Ëdo{}0)

	)

145 #i‡
EXTRUDERS
 > 2

146 
	#degHŸíd2
(Ë
	`degHŸíd
(2)

	)

147 
	#degT¨gëHŸíd2
(Ë
	`degT¨gëHŸíd
(2)

	)

148 
	#£tT¨gëHŸíd2
(
_˚lsius
Ë
	`£tT¨gëHŸíd
((_˚lsius), 2)

	)

149 
	#isHótögHŸíd2
(Ë
	`isHótögHŸíd
(2)

	)

150 
	#isCoﬁögHŸíd2
(Ë
	`isCoﬁögHŸíd
(2)

	)

152 
	#£tT¨gëHŸíd2
(
_˚lsius
Ëdo{}0)

	)

154 #i‡
EXTRUDERS
 > 3

155 #îr‹ 
InvÆid
 
numbî
 
of
 
exåudîs


160 
gëHóãrPowî
(
hóãr
);

161 
dißbÀ_hóãr
();

162 
£tW©ch
();

163 
upd©ePID
();

165 #i‡
deföed
 (
THERMAL_RUNAWAY_PROTECTION_PERIOD
) && THERMAL_RUNAWAY_PROTECTION_PERIOD > 0

166 
thîmÆ_ru«way_¥Ÿe˘i⁄
(*
°©e
, *
timî
, 
ãm≥øtuª
, 
èrgë_ãm≥øtuª
, 
hóãr_id
, 
≥riod_£c⁄ds
, 
hy°îesis_degc
);

167 
	gthîmÆ_ru«way_°©e_machöe
[3];

168 
	gthîmÆ_ru«way_timî
[3];

169 
boﬁ
 
	gthîmÆ_ru«way
 = 
Ál£
;

170 #i‡
TEMP_SENSOR_BED
 != 0

171 
	gthîmÆ_ru«way_bed_°©e_machöe
;

172 
	gthîmÆ_ru«way_bed_timî
;

176 
FORCE_INLINE
 
	$autŸempShutdown
(){

177 #ifde‡
AUTOTEMP


178 if(
autŸemp_íabÀd
)

180 
autŸemp_íabÀd
=
Ál£
;

181 if(
	`degT¨gëHŸíd
(
a˘ive_exåudî
)>
autŸemp_mö
)

182 
	`£tT¨gëHŸíd
(0,
a˘ive_exåudî
);

185 
	}
}

187 
PID_autŸu√
(
ãmp
, 
exåudî
, 
ncy˛es
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/thermistortables.h

1 #i‚de‡
THERMISTORTABLES_H_


2 
	#THERMISTORTABLES_H_


	)

4 
	~"M¨lö.h
"

6 
	#OVERSAMPLENR
 16

	)

8 #i‡(
THERMISTORHEATER_0
 =1Ë|| (
THERMISTORHEATER_1
 =1Ë|| (
THERMISTORHEATER_2
 =1Ë|| (
THERMISTORBED
 == 1)

10 c⁄° 
	gãm±abÀ_1
[][2] 
	gPROGMEM
 = {

11 { 23*
OVERSAMPLENR
 , 300 },

12 { 25*
OVERSAMPLENR
 , 295 },

13 { 27*
OVERSAMPLENR
 , 290 },

14 { 28*
OVERSAMPLENR
 , 285 },

15 { 31*
OVERSAMPLENR
 , 280 },

16 { 33*
OVERSAMPLENR
 , 275 },

17 { 35*
OVERSAMPLENR
 , 270 },

18 { 38*
OVERSAMPLENR
 , 265 },

19 { 41*
OVERSAMPLENR
 , 260 },

20 { 44*
OVERSAMPLENR
 , 255 },

21 { 48*
OVERSAMPLENR
 , 250 },

22 { 52*
OVERSAMPLENR
 , 245 },

23 { 56*
OVERSAMPLENR
 , 240 },

24 { 61*
OVERSAMPLENR
 , 235 },

25 { 66*
OVERSAMPLENR
 , 230 },

26 { 71*
OVERSAMPLENR
 , 225 },

27 { 78*
OVERSAMPLENR
 , 220 },

28 { 84*
OVERSAMPLENR
 , 215 },

29 { 92*
OVERSAMPLENR
 , 210 },

30 { 100*
OVERSAMPLENR
 , 205 },

31 { 109*
OVERSAMPLENR
 , 200 },

32 { 120*
OVERSAMPLENR
 , 195 },

33 { 131*
OVERSAMPLENR
 , 190 },

34 { 143*
OVERSAMPLENR
 , 185 },

35 { 156*
OVERSAMPLENR
 , 180 },

36 { 171*
OVERSAMPLENR
 , 175 },

37 { 187*
OVERSAMPLENR
 , 170 },

38 { 205*
OVERSAMPLENR
 , 165 },

39 { 224*
OVERSAMPLENR
 , 160 },

40 { 245*
OVERSAMPLENR
 , 155 },

41 { 268*
OVERSAMPLENR
 , 150 },

42 { 293*
OVERSAMPLENR
 , 145 },

43 { 320*
OVERSAMPLENR
 , 140 },

44 { 348*
OVERSAMPLENR
 , 135 },

45 { 379*
OVERSAMPLENR
 , 130 },

46 { 411*
OVERSAMPLENR
 , 125 },

47 { 445*
OVERSAMPLENR
 , 120 },

48 { 480*
OVERSAMPLENR
 , 115 },

49 { 516*
OVERSAMPLENR
 , 110 },

50 { 553*
OVERSAMPLENR
 , 105 },

51 { 591*
OVERSAMPLENR
 , 100 },

52 { 628*
OVERSAMPLENR
 , 95 },

53 { 665*
OVERSAMPLENR
 , 90 },

54 { 702*
OVERSAMPLENR
 , 85 },

55 { 737*
OVERSAMPLENR
 , 80 },

56 { 770*
OVERSAMPLENR
 , 75 },

57 { 801*
OVERSAMPLENR
 , 70 },

58 { 830*
OVERSAMPLENR
 , 65 },

59 { 857*
OVERSAMPLENR
 , 60 },

60 { 881*
OVERSAMPLENR
 , 55 },

61 { 903*
OVERSAMPLENR
 , 50 },

62 { 922*
OVERSAMPLENR
 , 45 },

63 { 939*
OVERSAMPLENR
 , 40 },

64 { 954*
OVERSAMPLENR
 , 35 },

65 { 966*
OVERSAMPLENR
 , 30 },

66 { 977*
OVERSAMPLENR
 , 25 },

67 { 985*
OVERSAMPLENR
 , 20 },

68 { 993*
OVERSAMPLENR
 , 15 },

69 { 999*
OVERSAMPLENR
 , 10 },

70 { 1004*
OVERSAMPLENR
 , 5 },

71 { 1008*
OVERSAMPLENR
 , 0 }

74 #i‡(
THERMISTORHEATER_0
 =2Ë|| (
THERMISTORHEATER_1
 =2Ë|| (
THERMISTORHEATER_2
 =2Ë|| (
THERMISTORBED
 == 2)

75 c⁄° 
	gãm±abÀ_2
[][2] 
	gPROGMEM
 = {

79 {1*
OVERSAMPLENR
, 848},

80 {30*
OVERSAMPLENR
, 300},

81 {34*
OVERSAMPLENR
, 290},

82 {39*
OVERSAMPLENR
, 280},

83 {46*
OVERSAMPLENR
, 270},

84 {53*
OVERSAMPLENR
, 260},

85 {63*
OVERSAMPLENR
, 250},

86 {74*
OVERSAMPLENR
, 240},

87 {87*
OVERSAMPLENR
, 230},

88 {104*
OVERSAMPLENR
, 220},

89 {124*
OVERSAMPLENR
, 210},

90 {148*
OVERSAMPLENR
, 200},

91 {176*
OVERSAMPLENR
, 190},

92 {211*
OVERSAMPLENR
, 180},

93 {252*
OVERSAMPLENR
, 170},

94 {301*
OVERSAMPLENR
, 160},

95 {357*
OVERSAMPLENR
, 150},

96 {420*
OVERSAMPLENR
, 140},

97 {489*
OVERSAMPLENR
, 130},

98 {562*
OVERSAMPLENR
, 120},

99 {636*
OVERSAMPLENR
, 110},

100 {708*
OVERSAMPLENR
, 100},

101 {775*
OVERSAMPLENR
, 90},

102 {835*
OVERSAMPLENR
, 80},

103 {884*
OVERSAMPLENR
, 70},

104 {924*
OVERSAMPLENR
, 60},

105 {955*
OVERSAMPLENR
, 50},

106 {977*
OVERSAMPLENR
, 40},

107 {993*
OVERSAMPLENR
, 30},

108 {1004*
OVERSAMPLENR
, 20},

109 {1012*
OVERSAMPLENR
, 10},

110 {1016*
OVERSAMPLENR
, 0},

114 #i‡(
THERMISTORHEATER_0
 =3Ë|| (
THERMISTORHEATER_1
 =3Ë|| (
THERMISTORHEATER_2
 =3Ë|| (
THERMISTORBED
 == 3)

115 c⁄° 
	gãm±abÀ_3
[][2] 
	gPROGMEM
 = {

116 {1*
OVERSAMPLENR
,864},

117 {21*
OVERSAMPLENR
,300},

118 {25*
OVERSAMPLENR
,290},

119 {29*
OVERSAMPLENR
,280},

120 {33*
OVERSAMPLENR
,270},

121 {39*
OVERSAMPLENR
,260},

122 {46*
OVERSAMPLENR
,250},

123 {54*
OVERSAMPLENR
,240},

124 {64*
OVERSAMPLENR
,230},

125 {75*
OVERSAMPLENR
,220},

126 {90*
OVERSAMPLENR
,210},

127 {107*
OVERSAMPLENR
,200},

128 {128*
OVERSAMPLENR
,190},

129 {154*
OVERSAMPLENR
,180},

130 {184*
OVERSAMPLENR
,170},

131 {221*
OVERSAMPLENR
,160},

132 {265*
OVERSAMPLENR
,150},

133 {316*
OVERSAMPLENR
,140},

134 {375*
OVERSAMPLENR
,130},

135 {441*
OVERSAMPLENR
,120},

136 {513*
OVERSAMPLENR
,110},

137 {588*
OVERSAMPLENR
,100},

138 {734*
OVERSAMPLENR
,80},

139 {856*
OVERSAMPLENR
,60},

140 {938*
OVERSAMPLENR
,40},

141 {986*
OVERSAMPLENR
,20},

142 {1008*
OVERSAMPLENR
,0},

143 {1018*
OVERSAMPLENR
,-20}

147 #i‡(
THERMISTORHEATER_0
 =4Ë|| (
THERMISTORHEATER_1
 =4Ë|| (
THERMISTORHEATER_2
 =4Ë|| (
THERMISTORBED
 == 4)

148 c⁄° 
	gãm±abÀ_4
[][2] 
	gPROGMEM
 = {

149 {1*
OVERSAMPLENR
, 430},

150 {54*
OVERSAMPLENR
, 137},

151 {107*
OVERSAMPLENR
, 107},

152 {160*
OVERSAMPLENR
, 91},

153 {213*
OVERSAMPLENR
, 80},

154 {266*
OVERSAMPLENR
, 71},

155 {319*
OVERSAMPLENR
, 64},

156 {372*
OVERSAMPLENR
, 57},

157 {425*
OVERSAMPLENR
, 51},

158 {478*
OVERSAMPLENR
, 46},

159 {531*
OVERSAMPLENR
, 41},

160 {584*
OVERSAMPLENR
, 35},

161 {637*
OVERSAMPLENR
, 30},

162 {690*
OVERSAMPLENR
, 25},

163 {743*
OVERSAMPLENR
, 20},

164 {796*
OVERSAMPLENR
, 14},

165 {849*
OVERSAMPLENR
, 7},

166 {902*
OVERSAMPLENR
, 0},

167 {955*
OVERSAMPLENR
, -11},

168 {1008*
OVERSAMPLENR
, -35}

172 #i‡(
THERMISTORHEATER_0
 =5Ë|| (
THERMISTORHEATER_1
 =5Ë|| (
THERMISTORHEATER_2
 =5Ë|| (
THERMISTORBED
 == 5)

173 c⁄° 
	gãm±abÀ_5
[][2] 
	gPROGMEM
 = {

177 {1*
OVERSAMPLENR
, 713},

178 {17*
OVERSAMPLENR
, 300},

179 {20*
OVERSAMPLENR
, 290},

180 {23*
OVERSAMPLENR
, 280},

181 {27*
OVERSAMPLENR
, 270},

182 {31*
OVERSAMPLENR
, 260},

183 {37*
OVERSAMPLENR
, 250},

184 {43*
OVERSAMPLENR
, 240},

185 {51*
OVERSAMPLENR
, 230},

186 {61*
OVERSAMPLENR
, 220},

187 {73*
OVERSAMPLENR
, 210},

188 {87*
OVERSAMPLENR
, 200},

189 {106*
OVERSAMPLENR
, 190},

190 {128*
OVERSAMPLENR
, 180},

191 {155*
OVERSAMPLENR
, 170},

192 {189*
OVERSAMPLENR
, 160},

193 {230*
OVERSAMPLENR
, 150},

194 {278*
OVERSAMPLENR
, 140},

195 {336*
OVERSAMPLENR
, 130},

196 {402*
OVERSAMPLENR
, 120},

197 {476*
OVERSAMPLENR
, 110},

198 {554*
OVERSAMPLENR
, 100},

199 {635*
OVERSAMPLENR
, 90},

200 {713*
OVERSAMPLENR
, 80},

201 {784*
OVERSAMPLENR
, 70},

202 {846*
OVERSAMPLENR
, 60},

203 {897*
OVERSAMPLENR
, 50},

204 {937*
OVERSAMPLENR
, 40},

205 {966*
OVERSAMPLENR
, 30},

206 {986*
OVERSAMPLENR
, 20},

207 {1000*
OVERSAMPLENR
, 10},

208 {1010*
OVERSAMPLENR
, 0}

212 #i‡(
THERMISTORHEATER_0
 =6Ë|| (
THERMISTORHEATER_1
 =6Ë|| (
THERMISTORHEATER_2
 =6Ë|| (
THERMISTORBED
 == 6)

213 c⁄° 
	gãm±abÀ_6
[][2] 
	gPROGMEM
 = {

214 {1*
OVERSAMPLENR
, 350},

215 {28*
OVERSAMPLENR
, 250},

216 {31*
OVERSAMPLENR
, 245},

217 {35*
OVERSAMPLENR
, 240},

218 {39*
OVERSAMPLENR
, 235},

219 {42*
OVERSAMPLENR
, 230},

220 {44*
OVERSAMPLENR
, 225},

221 {49*
OVERSAMPLENR
, 220},

222 {53*
OVERSAMPLENR
, 215},

223 {62*
OVERSAMPLENR
, 210},

224 {71*
OVERSAMPLENR
, 205},

225 {78*
OVERSAMPLENR
, 200},

226 {94*
OVERSAMPLENR
, 190},

227 {102*
OVERSAMPLENR
, 185},

228 {116*
OVERSAMPLENR
, 170},

229 {143*
OVERSAMPLENR
, 160},

230 {183*
OVERSAMPLENR
, 150},

231 {223*
OVERSAMPLENR
, 140},

232 {270*
OVERSAMPLENR
, 130},

233 {318*
OVERSAMPLENR
, 120},

234 {383*
OVERSAMPLENR
, 110},

235 {413*
OVERSAMPLENR
, 105},

236 {439*
OVERSAMPLENR
, 100},

237 {484*
OVERSAMPLENR
, 95},

238 {513*
OVERSAMPLENR
, 90},

239 {607*
OVERSAMPLENR
, 80},

240 {664*
OVERSAMPLENR
, 70},

241 {781*
OVERSAMPLENR
, 60},

242 {810*
OVERSAMPLENR
, 55},

243 {849*
OVERSAMPLENR
, 50},

244 {914*
OVERSAMPLENR
, 45},

245 {914*
OVERSAMPLENR
, 40},

246 {935*
OVERSAMPLENR
, 35},

247 {954*
OVERSAMPLENR
, 30},

248 {970*
OVERSAMPLENR
, 25},

249 {978*
OVERSAMPLENR
, 22},

250 {1008*
OVERSAMPLENR
, 3},

251 {1023*
OVERSAMPLENR
, 0}

255 #i‡(
THERMISTORHEATER_0
 =7Ë|| (
THERMISTORHEATER_1
 =7Ë|| (
THERMISTORHEATER_2
 =7Ë|| (
THERMISTORBED
 == 7)

256 c⁄° 
	gãm±abÀ_7
[][2] 
	gPROGMEM
 = {

257 {1*
OVERSAMPLENR
, 941},

258 {19*
OVERSAMPLENR
, 362},

259 {37*
OVERSAMPLENR
, 299},

260 {55*
OVERSAMPLENR
, 266},

261 {73*
OVERSAMPLENR
, 245},

262 {91*
OVERSAMPLENR
, 229},

263 {109*
OVERSAMPLENR
, 216},

264 {127*
OVERSAMPLENR
, 206},

265 {145*
OVERSAMPLENR
, 197},

266 {163*
OVERSAMPLENR
, 190},

267 {181*
OVERSAMPLENR
, 183},

268 {199*
OVERSAMPLENR
, 177},

269 {217*
OVERSAMPLENR
, 171},

270 {235*
OVERSAMPLENR
, 166},

271 {253*
OVERSAMPLENR
, 162},

272 {271*
OVERSAMPLENR
, 157},

273 {289*
OVERSAMPLENR
, 153},

274 {307*
OVERSAMPLENR
, 149},

275 {325*
OVERSAMPLENR
, 146},

276 {343*
OVERSAMPLENR
, 142},

277 {361*
OVERSAMPLENR
, 139},

278 {379*
OVERSAMPLENR
, 135},

279 {397*
OVERSAMPLENR
, 132},

280 {415*
OVERSAMPLENR
, 129},

281 {433*
OVERSAMPLENR
, 126},

282 {451*
OVERSAMPLENR
, 123},

283 {469*
OVERSAMPLENR
, 121},

284 {487*
OVERSAMPLENR
, 118},

285 {505*
OVERSAMPLENR
, 115},

286 {523*
OVERSAMPLENR
, 112},

287 {541*
OVERSAMPLENR
, 110},

288 {559*
OVERSAMPLENR
, 107},

289 {577*
OVERSAMPLENR
, 105},

290 {595*
OVERSAMPLENR
, 102},

291 {613*
OVERSAMPLENR
, 99},

292 {631*
OVERSAMPLENR
, 97},

293 {649*
OVERSAMPLENR
, 94},

294 {667*
OVERSAMPLENR
, 92},

295 {685*
OVERSAMPLENR
, 89},

296 {703*
OVERSAMPLENR
, 86},

297 {721*
OVERSAMPLENR
, 84},

298 {739*
OVERSAMPLENR
, 81},

299 {757*
OVERSAMPLENR
, 78},

300 {775*
OVERSAMPLENR
, 75},

301 {793*
OVERSAMPLENR
, 72},

302 {811*
OVERSAMPLENR
, 69},

303 {829*
OVERSAMPLENR
, 66},

304 {847*
OVERSAMPLENR
, 62},

305 {865*
OVERSAMPLENR
, 59},

306 {883*
OVERSAMPLENR
, 55},

307 {901*
OVERSAMPLENR
, 51},

308 {919*
OVERSAMPLENR
, 46},

309 {937*
OVERSAMPLENR
, 41},

310 {955*
OVERSAMPLENR
, 35},

311 {973*
OVERSAMPLENR
, 27},

312 {991*
OVERSAMPLENR
, 17},

313 {1009*
OVERSAMPLENR
, 1},

314 {1023*
OVERSAMPLENR
, 0}

318 #i‡(
THERMISTORHEATER_0
 =71Ë|| (
THERMISTORHEATER_1
 =71Ë|| (
THERMISTORHEATER_2
 =71Ë|| (
THERMISTORBED
 == 71)

324 c⁄° 
	gãm±abÀ_71
[][2] 
	gPROGMEM
 = {

325 {35*
OVERSAMPLENR
, 300},

326 {51*
OVERSAMPLENR
, 270},

327 {54*
OVERSAMPLENR
, 265},

328 {58*
OVERSAMPLENR
, 260},

329 {59*
OVERSAMPLENR
, 258},

330 {61*
OVERSAMPLENR
, 256},

331 {63*
OVERSAMPLENR
, 254},

332 {64*
OVERSAMPLENR
, 252},

333 {66*
OVERSAMPLENR
, 250},

334 {67*
OVERSAMPLENR
, 249},

335 {68*
OVERSAMPLENR
, 248},

336 {69*
OVERSAMPLENR
, 247},

337 {70*
OVERSAMPLENR
, 246},

338 {71*
OVERSAMPLENR
, 245},

339 {72*
OVERSAMPLENR
, 244},

340 {73*
OVERSAMPLENR
, 243},

341 {74*
OVERSAMPLENR
, 242},

342 {75*
OVERSAMPLENR
, 241},

343 {76*
OVERSAMPLENR
, 240},

344 {77*
OVERSAMPLENR
, 239},

345 {78*
OVERSAMPLENR
, 238},

346 {79*
OVERSAMPLENR
, 237},

347 {80*
OVERSAMPLENR
, 236},

348 {81*
OVERSAMPLENR
, 235},

349 {82*
OVERSAMPLENR
, 234},

350 {84*
OVERSAMPLENR
, 233},

351 {85*
OVERSAMPLENR
, 232},

352 {86*
OVERSAMPLENR
, 231},

353 {87*
OVERSAMPLENR
, 230},

354 {89*
OVERSAMPLENR
, 229},

355 {90*
OVERSAMPLENR
, 228},

356 {91*
OVERSAMPLENR
, 227},

357 {92*
OVERSAMPLENR
, 226},

358 {94*
OVERSAMPLENR
, 225},

359 {95*
OVERSAMPLENR
, 224},

360 {97*
OVERSAMPLENR
, 223},

361 {98*
OVERSAMPLENR
, 222},

362 {99*
OVERSAMPLENR
, 221},

363 {101*
OVERSAMPLENR
, 220},

364 {102*
OVERSAMPLENR
, 219},

365 {104*
OVERSAMPLENR
, 218},

366 {106*
OVERSAMPLENR
, 217},

367 {107*
OVERSAMPLENR
, 216},

368 {109*
OVERSAMPLENR
, 215},

369 {110*
OVERSAMPLENR
, 214},

370 {112*
OVERSAMPLENR
, 213},

371 {114*
OVERSAMPLENR
, 212},

372 {115*
OVERSAMPLENR
, 211},

373 {117*
OVERSAMPLENR
, 210},

374 {119*
OVERSAMPLENR
, 209},

375 {121*
OVERSAMPLENR
, 208},

376 {123*
OVERSAMPLENR
, 207},

377 {125*
OVERSAMPLENR
, 206},

378 {126*
OVERSAMPLENR
, 205},

379 {128*
OVERSAMPLENR
, 204},

380 {130*
OVERSAMPLENR
, 203},

381 {132*
OVERSAMPLENR
, 202},

382 {134*
OVERSAMPLENR
, 201},

383 {136*
OVERSAMPLENR
, 200},

384 {139*
OVERSAMPLENR
, 199},

385 {141*
OVERSAMPLENR
, 198},

386 {143*
OVERSAMPLENR
, 197},

387 {145*
OVERSAMPLENR
, 196},

388 {147*
OVERSAMPLENR
, 195},

389 {150*
OVERSAMPLENR
, 194},

390 {152*
OVERSAMPLENR
, 193},

391 {154*
OVERSAMPLENR
, 192},

392 {157*
OVERSAMPLENR
, 191},

393 {159*
OVERSAMPLENR
, 190},

394 {162*
OVERSAMPLENR
, 189},

395 {164*
OVERSAMPLENR
, 188},

396 {167*
OVERSAMPLENR
, 187},

397 {170*
OVERSAMPLENR
, 186},

398 {172*
OVERSAMPLENR
, 185},

399 {175*
OVERSAMPLENR
, 184},

400 {178*
OVERSAMPLENR
, 183},

401 {181*
OVERSAMPLENR
, 182},

402 {184*
OVERSAMPLENR
, 181},

403 {187*
OVERSAMPLENR
, 180},

404 {190*
OVERSAMPLENR
, 179},

405 {193*
OVERSAMPLENR
, 178},

406 {196*
OVERSAMPLENR
, 177},

407 {199*
OVERSAMPLENR
, 176},

408 {202*
OVERSAMPLENR
, 175},

409 {205*
OVERSAMPLENR
, 174},

410 {208*
OVERSAMPLENR
, 173},

411 {212*
OVERSAMPLENR
, 172},

412 {215*
OVERSAMPLENR
, 171},

413 {219*
OVERSAMPLENR
, 170},

414 {237*
OVERSAMPLENR
, 165},

415 {256*
OVERSAMPLENR
, 160},

416 {300*
OVERSAMPLENR
, 150},

417 {351*
OVERSAMPLENR
, 140},

418 {470*
OVERSAMPLENR
, 120},

419 {504*
OVERSAMPLENR
, 115},

420 {538*
OVERSAMPLENR
, 110},

421 {552*
OVERSAMPLENR
, 108},

422 {566*
OVERSAMPLENR
, 106},

423 {580*
OVERSAMPLENR
, 104},

424 {594*
OVERSAMPLENR
, 102},

425 {608*
OVERSAMPLENR
, 100},

426 {622*
OVERSAMPLENR
, 98},

427 {636*
OVERSAMPLENR
, 96},

428 {650*
OVERSAMPLENR
, 94},

429 {664*
OVERSAMPLENR
, 92},

430 {678*
OVERSAMPLENR
, 90},

431 {712*
OVERSAMPLENR
, 85},

432 {745*
OVERSAMPLENR
, 80},

433 {758*
OVERSAMPLENR
, 78},

434 {770*
OVERSAMPLENR
, 76},

435 {783*
OVERSAMPLENR
, 74},

436 {795*
OVERSAMPLENR
, 72},

437 {806*
OVERSAMPLENR
, 70},

438 {818*
OVERSAMPLENR
, 68},

439 {829*
OVERSAMPLENR
, 66},

440 {840*
OVERSAMPLENR
, 64},

441 {850*
OVERSAMPLENR
, 62},

442 {860*
OVERSAMPLENR
, 60},

443 {870*
OVERSAMPLENR
, 58},

444 {879*
OVERSAMPLENR
, 56},

445 {888*
OVERSAMPLENR
, 54},

446 {897*
OVERSAMPLENR
, 52},

447 {905*
OVERSAMPLENR
, 50},

448 {924*
OVERSAMPLENR
, 45},

449 {940*
OVERSAMPLENR
, 40},

450 {955*
OVERSAMPLENR
, 35},

451 {967*
OVERSAMPLENR
, 30},

452 {970*
OVERSAMPLENR
, 29},

453 {972*
OVERSAMPLENR
, 28},

454 {974*
OVERSAMPLENR
, 27},

455 {976*
OVERSAMPLENR
, 26},

456 {978*
OVERSAMPLENR
, 25},

457 {980*
OVERSAMPLENR
, 24},

458 {982*
OVERSAMPLENR
, 23},

459 {984*
OVERSAMPLENR
, 22},

460 {985*
OVERSAMPLENR
, 21},

461 {987*
OVERSAMPLENR
, 20},

462 {995*
OVERSAMPLENR
, 15},

463 {1001*
OVERSAMPLENR
, 10},

464 {1006*
OVERSAMPLENR
, 5},

465 {1010*
OVERSAMPLENR
, 0},

469 #i‡(
THERMISTORHEATER_0
 =8Ë|| (
THERMISTORHEATER_1
 =8Ë|| (
THERMISTORHEATER_2
 =8Ë|| (
THERMISTORBED
 == 8)

471 c⁄° 
	gãm±abÀ_8
[][2] 
	gPROGMEM
 = {

472 {1*
OVERSAMPLENR
, 704},

473 {54*
OVERSAMPLENR
, 216},

474 {107*
OVERSAMPLENR
, 175},

475 {160*
OVERSAMPLENR
, 152},

476 {213*
OVERSAMPLENR
, 137},

477 {266*
OVERSAMPLENR
, 125},

478 {319*
OVERSAMPLENR
, 115},

479 {372*
OVERSAMPLENR
, 106},

480 {425*
OVERSAMPLENR
, 99},

481 {478*
OVERSAMPLENR
, 91},

482 {531*
OVERSAMPLENR
, 85},

483 {584*
OVERSAMPLENR
, 78},

484 {637*
OVERSAMPLENR
, 71},

485 {690*
OVERSAMPLENR
, 65},

486 {743*
OVERSAMPLENR
, 58},

487 {796*
OVERSAMPLENR
, 50},

488 {849*
OVERSAMPLENR
, 42},

489 {902*
OVERSAMPLENR
, 31},

490 {955*
OVERSAMPLENR
, 17},

491 {1008*
OVERSAMPLENR
, 0}

494 #i‡(
THERMISTORHEATER_0
 =9Ë|| (
THERMISTORHEATER_1
 =9Ë|| (
THERMISTORHEATER_2
 =9Ë|| (
THERMISTORBED
 == 9)

496 c⁄° 
	gãm±abÀ_9
[][2] 
	gPROGMEM
 = {

497 {1*
OVERSAMPLENR
, 936},

498 {36*
OVERSAMPLENR
, 300},

499 {71*
OVERSAMPLENR
, 246},

500 {106*
OVERSAMPLENR
, 218},

501 {141*
OVERSAMPLENR
, 199},

502 {176*
OVERSAMPLENR
, 185},

503 {211*
OVERSAMPLENR
, 173},

504 {246*
OVERSAMPLENR
, 163},

505 {281*
OVERSAMPLENR
, 155},

506 {316*
OVERSAMPLENR
, 147},

507 {351*
OVERSAMPLENR
, 140},

508 {386*
OVERSAMPLENR
, 134},

509 {421*
OVERSAMPLENR
, 128},

510 {456*
OVERSAMPLENR
, 122},

511 {491*
OVERSAMPLENR
, 117},

512 {526*
OVERSAMPLENR
, 112},

513 {561*
OVERSAMPLENR
, 107},

514 {596*
OVERSAMPLENR
, 102},

515 {631*
OVERSAMPLENR
, 97},

516 {666*
OVERSAMPLENR
, 92},

517 {701*
OVERSAMPLENR
, 87},

518 {736*
OVERSAMPLENR
, 81},

519 {771*
OVERSAMPLENR
, 76},

520 {806*
OVERSAMPLENR
, 70},

521 {841*
OVERSAMPLENR
, 63},

522 {876*
OVERSAMPLENR
, 56},

523 {911*
OVERSAMPLENR
, 48},

524 {946*
OVERSAMPLENR
, 38},

525 {981*
OVERSAMPLENR
, 23},

526 {1005*
OVERSAMPLENR
, 5},

527 {1016*
OVERSAMPLENR
, 0}

530 #i‡(
THERMISTORHEATER_0
 =10Ë|| (
THERMISTORHEATER_1
 =10Ë|| (
THERMISTORHEATER_2
 =10Ë|| (
THERMISTORBED
 == 10)

532 c⁄° 
	gãm±abÀ_10
[][2] 
	gPROGMEM
 = {

533 {1*
OVERSAMPLENR
, 929},

534 {36*
OVERSAMPLENR
, 299},

535 {71*
OVERSAMPLENR
, 246},

536 {106*
OVERSAMPLENR
, 217},

537 {141*
OVERSAMPLENR
, 198},

538 {176*
OVERSAMPLENR
, 184},

539 {211*
OVERSAMPLENR
, 173},

540 {246*
OVERSAMPLENR
, 163},

541 {281*
OVERSAMPLENR
, 154},

542 {316*
OVERSAMPLENR
, 147},

543 {351*
OVERSAMPLENR
, 140},

544 {386*
OVERSAMPLENR
, 134},

545 {421*
OVERSAMPLENR
, 128},

546 {456*
OVERSAMPLENR
, 122},

547 {491*
OVERSAMPLENR
, 117},

548 {526*
OVERSAMPLENR
, 112},

549 {561*
OVERSAMPLENR
, 107},

550 {596*
OVERSAMPLENR
, 102},

551 {631*
OVERSAMPLENR
, 97},

552 {666*
OVERSAMPLENR
, 91},

553 {701*
OVERSAMPLENR
, 86},

554 {736*
OVERSAMPLENR
, 81},

555 {771*
OVERSAMPLENR
, 76},

556 {806*
OVERSAMPLENR
, 70},

557 {841*
OVERSAMPLENR
, 63},

558 {876*
OVERSAMPLENR
, 56},

559 {911*
OVERSAMPLENR
, 48},

560 {946*
OVERSAMPLENR
, 38},

561 {981*
OVERSAMPLENR
, 23},

562 {1005*
OVERSAMPLENR
, 5},

563 {1016*
OVERSAMPLENR
, 0}

567 #i‡(
THERMISTORHEATER_0
 =11Ë|| (
THERMISTORHEATER_1
 =11Ë|| (
THERMISTORHEATER_2
 =11Ë|| (
THERMISTORBED
 == 11)

570 c⁄° 
	gãm±abÀ_11
[][2] 
	gPROGMEM
 = {

571 {1*
OVERSAMPLENR
, 938},

572 {31*
OVERSAMPLENR
, 314},

573 {41*
OVERSAMPLENR
, 290},

574 {51*
OVERSAMPLENR
, 272},

575 {61*
OVERSAMPLENR
, 258},

576 {71*
OVERSAMPLENR
, 247},

577 {81*
OVERSAMPLENR
, 237},

578 {91*
OVERSAMPLENR
, 229},

579 {101*
OVERSAMPLENR
, 221},

580 {111*
OVERSAMPLENR
, 215},

581 {121*
OVERSAMPLENR
, 209},

582 {131*
OVERSAMPLENR
, 204},

583 {141*
OVERSAMPLENR
, 199},

584 {151*
OVERSAMPLENR
, 195},

585 {161*
OVERSAMPLENR
, 190},

586 {171*
OVERSAMPLENR
, 187},

587 {181*
OVERSAMPLENR
, 183},

588 {191*
OVERSAMPLENR
, 179},

589 {201*
OVERSAMPLENR
, 176},

590 {221*
OVERSAMPLENR
, 170},

591 {241*
OVERSAMPLENR
, 165},

592 {261*
OVERSAMPLENR
, 160},

593 {281*
OVERSAMPLENR
, 155},

594 {301*
OVERSAMPLENR
, 150},

595 {331*
OVERSAMPLENR
, 144},

596 {361*
OVERSAMPLENR
, 139},

597 {391*
OVERSAMPLENR
, 133},

598 {421*
OVERSAMPLENR
, 128},

599 {451*
OVERSAMPLENR
, 123},

600 {491*
OVERSAMPLENR
, 117},

601 {531*
OVERSAMPLENR
, 111},

602 {571*
OVERSAMPLENR
, 105},

603 {611*
OVERSAMPLENR
, 100},

604 {641*
OVERSAMPLENR
, 95},

605 {681*
OVERSAMPLENR
, 90},

606 {711*
OVERSAMPLENR
, 85},

607 {751*
OVERSAMPLENR
, 79},

608 {791*
OVERSAMPLENR
, 72},

609 {811*
OVERSAMPLENR
, 69},

610 {831*
OVERSAMPLENR
, 65},

611 {871*
OVERSAMPLENR
, 57},

612 {881*
OVERSAMPLENR
, 55},

613 {901*
OVERSAMPLENR
, 51},

614 {921*
OVERSAMPLENR
, 45},

615 {941*
OVERSAMPLENR
, 39},

616 {971*
OVERSAMPLENR
, 28},

617 {981*
OVERSAMPLENR
, 23},

618 {991*
OVERSAMPLENR
, 17},

619 {1001*
OVERSAMPLENR
, 9},

620 {1021*
OVERSAMPLENR
, -27}

624 #i‡(
THERMISTORHEATER_0
 =13Ë|| (
THERMISTORHEATER_1
 =13Ë|| (
THERMISTORHEATER_2
 =13Ë|| (
THERMISTORBED
 == 13)

627 c⁄° 
	gãm±abÀ_13
[][2] 
	gPROGMEM
 = {

628 { 22.5*
OVERSAMPLENR
, 300 },

629 { 24.125*
OVERSAMPLENR
, 295 },

630 { 25.875*
OVERSAMPLENR
, 290 },

631 { 27.8125*
OVERSAMPLENR
, 285 },

632 { 29.9375*
OVERSAMPLENR
, 280 },

633 { 32.25*
OVERSAMPLENR
, 275 },

634 { 34.8125*
OVERSAMPLENR
, 270 },

635 { 37.625*
OVERSAMPLENR
, 265 },

636 { 40.6875*
OVERSAMPLENR
, 260 },

637 { 44.0625*
OVERSAMPLENR
, 255 },

638 { 47.75*
OVERSAMPLENR
, 250 },

639 { 51.8125*
OVERSAMPLENR
, 245 },

640 { 56.3125*
OVERSAMPLENR
, 240 },

641 { 61.25*
OVERSAMPLENR
, 235 },

642 { 66.75*
OVERSAMPLENR
, 230 },

643 { 72.8125*
OVERSAMPLENR
, 225 },

644 { 79.5*
OVERSAMPLENR
, 220 },

645 { 87*
OVERSAMPLENR
, 215 },

646 { 95.3125*
OVERSAMPLENR
, 210 },

647 { 104.1875*
OVERSAMPLENR
, 205 },

648 { 112.75*
OVERSAMPLENR
, 200 },

649 { 123.125*
OVERSAMPLENR
, 195 },

650 { 135.75*
OVERSAMPLENR
, 190 },

651 { 148.3125*
OVERSAMPLENR
, 185 },

652 { 163.8125*
OVERSAMPLENR
, 180 },

653 { 179*
OVERSAMPLENR
, 175 },

654 { 211.125*
OVERSAMPLENR
, 170 },

655 { 216.125*
OVERSAMPLENR
, 165 },

656 { 236.5625*
OVERSAMPLENR
, 160 },

657 { 258.5*
OVERSAMPLENR
, 155 },

658 { 279.875*
OVERSAMPLENR
, 150 },

659 { 305.375*
OVERSAMPLENR
, 145 },

660 { 333.25*
OVERSAMPLENR
, 140 },

661 { 362.5625*
OVERSAMPLENR
, 135 },

662 { 393.6875*
OVERSAMPLENR
, 130 },

663 { 425*
OVERSAMPLENR
, 125 },

664 { 460.625*
OVERSAMPLENR
, 120 },

665 { 495.1875*
OVERSAMPLENR
, 115 },

666 { 530.875*
OVERSAMPLENR
, 110 },

667 { 567.25*
OVERSAMPLENR
, 105 },

668 { 601.625*
OVERSAMPLENR
, 100 },

669 { 637.875*
OVERSAMPLENR
, 95 },

670 { 674.5625*
OVERSAMPLENR
, 90 },

671 { 710*
OVERSAMPLENR
, 85 },

672 { 744.125*
OVERSAMPLENR
, 80 },

673 { 775.9375*
OVERSAMPLENR
, 75 },

674 { 806.875*
OVERSAMPLENR
, 70 },

675 { 835.1875*
OVERSAMPLENR
, 65 },

676 { 861.125*
OVERSAMPLENR
, 60 },

677 { 884.375*
OVERSAMPLENR
, 55 },

678 { 904.5625*
OVERSAMPLENR
, 50 },

679 { 923.8125*
OVERSAMPLENR
, 45 },

680 { 940.375*
OVERSAMPLENR
, 40 },

681 { 954.625*
OVERSAMPLENR
, 35 },

682 { 966.875*
OVERSAMPLENR
, 30 },

683 { 977.0625*
OVERSAMPLENR
, 25 },

684 { 986*
OVERSAMPLENR
, 20 },

685 { 993.375*
OVERSAMPLENR
, 15 },

686 { 999.5*
OVERSAMPLENR
, 10 },

687 { 1004.5*
OVERSAMPLENR
, 5 },

688 { 1008.5*
OVERSAMPLENR
, 0 }

693 #i‡(
THERMISTORHEATER_0
 =20Ë|| (
THERMISTORHEATER_1
 =20Ë|| (
THERMISTORHEATER_2
 =20Ë|| (
THERMISTORBED
 == 20)

696 #i‡(
THERMISTORHEATER_0
 == 20)

697 
	#HEATER_0_RAW_HI_TEMP
 16383

	)

698 
	#HEATER_0_RAW_LO_TEMP
 0

	)

700 #i‡(
THERMISTORHEATER_1
 == 20)

701 
	#HEATER_1_RAW_HI_TEMP
 16383

	)

702 
	#HEATER_1_RAW_LO_TEMP
 0

	)

704 #i‡(
THERMISTORHEATER_2
 == 20)

705 
	#HEATER_2_RAW_HI_TEMP
 16383

	)

706 
	#HEATER_2_RAW_LO_TEMP
 0

	)

708 #i‡(
THERMISTORBED
 == 20)

709 
	#HEATER_BED_RAW_HI_TEMP
 16383

	)

710 
	#HEATER_BED_RAW_LO_TEMP
 0

	)

712 c⁄° 
	gãm±abÀ_20
[][2] 
	gPROGMEM
 = {

713 { 0*
OVERSAMPLENR
 , 0 },

714 { 227*
OVERSAMPLENR
 , 1 },

715 { 236*
OVERSAMPLENR
 , 10 },

716 { 245*
OVERSAMPLENR
 , 20 },

717 { 253*
OVERSAMPLENR
 , 30 },

718 { 262*
OVERSAMPLENR
 , 40 },

719 { 270*
OVERSAMPLENR
 , 50 },

720 { 279*
OVERSAMPLENR
 , 60 },

721 { 287*
OVERSAMPLENR
 , 70 },

722 { 295*
OVERSAMPLENR
 , 80 },

723 { 304*
OVERSAMPLENR
 , 90 },

724 { 312*
OVERSAMPLENR
 , 100 },

725 { 320*
OVERSAMPLENR
 , 110 },

726 { 329*
OVERSAMPLENR
 , 120 },

727 { 337*
OVERSAMPLENR
 , 130 },

728 { 345*
OVERSAMPLENR
 , 140 },

729 { 353*
OVERSAMPLENR
 , 150 },

730 { 361*
OVERSAMPLENR
 , 160 },

731 { 369*
OVERSAMPLENR
 , 170 },

732 { 377*
OVERSAMPLENR
 , 180 },

733 { 385*
OVERSAMPLENR
 , 190 },

734 { 393*
OVERSAMPLENR
 , 200 },

735 { 401*
OVERSAMPLENR
 , 210 },

736 { 409*
OVERSAMPLENR
 , 220 },

737 { 417*
OVERSAMPLENR
 , 230 },

738 { 424*
OVERSAMPLENR
 , 240 },

739 { 432*
OVERSAMPLENR
 , 250 },

740 { 440*
OVERSAMPLENR
 , 260 },

741 { 447*
OVERSAMPLENR
 , 270 },

742 { 455*
OVERSAMPLENR
 , 280 },

743 { 463*
OVERSAMPLENR
 , 290 },

744 { 470*
OVERSAMPLENR
 , 300 },

745 { 478*
OVERSAMPLENR
 , 310 },

746 { 485*
OVERSAMPLENR
 , 320 },

747 { 493*
OVERSAMPLENR
 , 330 },

748 { 500*
OVERSAMPLENR
 , 340 },

749 { 507*
OVERSAMPLENR
 , 350 },

750 { 515*
OVERSAMPLENR
 , 360 },

751 { 522*
OVERSAMPLENR
 , 370 },

752 { 529*
OVERSAMPLENR
 , 380 },

753 { 537*
OVERSAMPLENR
 , 390 },

754 { 544*
OVERSAMPLENR
 , 400 },

755 { 614*
OVERSAMPLENR
 , 500 },

756 { 681*
OVERSAMPLENR
 , 600 },

757 { 744*
OVERSAMPLENR
 , 700 },

758 { 805*
OVERSAMPLENR
 , 800 },

759 { 862*
OVERSAMPLENR
 , 900 },

760 { 917*
OVERSAMPLENR
 , 1000 },

761 { 968*
OVERSAMPLENR
 , 1100 }

765 #i‡(
THERMISTORHEATER_0
 =51Ë|| (
THERMISTORHEATER_1
 =51Ë|| (
THERMISTORHEATER_2
 =51Ë|| (
THERMISTORBED
 == 51)

770 c⁄° 
	gãm±abÀ_51
[][2] 
	gPROGMEM
 = {

771 {1*
OVERSAMPLENR
, 350},

772 {190*
OVERSAMPLENR
, 250},

773 {203*
OVERSAMPLENR
, 245},

774 {217*
OVERSAMPLENR
, 240},

775 {232*
OVERSAMPLENR
, 235},

776 {248*
OVERSAMPLENR
, 230},

777 {265*
OVERSAMPLENR
, 225},

778 {283*
OVERSAMPLENR
, 220},

779 {302*
OVERSAMPLENR
, 215},

780 {322*
OVERSAMPLENR
, 210},

781 {344*
OVERSAMPLENR
, 205},

782 {366*
OVERSAMPLENR
, 200},

783 {390*
OVERSAMPLENR
, 195},

784 {415*
OVERSAMPLENR
, 190},

785 {440*
OVERSAMPLENR
, 185},

786 {467*
OVERSAMPLENR
, 180},

787 {494*
OVERSAMPLENR
, 175},

788 {522*
OVERSAMPLENR
, 170},

789 {551*
OVERSAMPLENR
, 165},

790 {580*
OVERSAMPLENR
, 160},

791 {609*
OVERSAMPLENR
, 155},

792 {638*
OVERSAMPLENR
, 150},

793 {666*
OVERSAMPLENR
, 145},

794 {695*
OVERSAMPLENR
, 140},

795 {722*
OVERSAMPLENR
, 135},

796 {749*
OVERSAMPLENR
, 130},

797 {775*
OVERSAMPLENR
, 125},

798 {800*
OVERSAMPLENR
, 120},

799 {823*
OVERSAMPLENR
, 115},

800 {845*
OVERSAMPLENR
, 110},

801 {865*
OVERSAMPLENR
, 105},

802 {884*
OVERSAMPLENR
, 100},

803 {901*
OVERSAMPLENR
, 95},

804 {917*
OVERSAMPLENR
, 90},

805 {932*
OVERSAMPLENR
, 85},

806 {944*
OVERSAMPLENR
, 80},

807 {956*
OVERSAMPLENR
, 75},

808 {966*
OVERSAMPLENR
, 70},

809 {975*
OVERSAMPLENR
, 65},

810 {982*
OVERSAMPLENR
, 60},

811 {989*
OVERSAMPLENR
, 55},

812 {995*
OVERSAMPLENR
, 50},

813 {1000*
OVERSAMPLENR
, 45},

814 {1004*
OVERSAMPLENR
, 40},

815 {1007*
OVERSAMPLENR
, 35},

816 {1010*
OVERSAMPLENR
, 30},

817 {1013*
OVERSAMPLENR
, 25},

818 {1015*
OVERSAMPLENR
, 20},

819 {1017*
OVERSAMPLENR
, 15},

820 {1018*
OVERSAMPLENR
, 10},

821 {1019*
OVERSAMPLENR
, 5},

822 {1020*
OVERSAMPLENR
, 0},

823 {1021*
OVERSAMPLENR
, -5}

827 #i‡(
THERMISTORHEATER_0
 =52Ë|| (
THERMISTORHEATER_1
 =52Ë|| (
THERMISTORHEATER_2
 =52Ë|| (
THERMISTORBED
 == 52)

832 c⁄° 
	gãm±abÀ_52
[][2] 
	gPROGMEM
 = {

833 {1*
OVERSAMPLENR
, 500},

834 {125*
OVERSAMPLENR
, 300},

835 {142*
OVERSAMPLENR
, 290},

836 {162*
OVERSAMPLENR
, 280},

837 {185*
OVERSAMPLENR
, 270},

838 {211*
OVERSAMPLENR
, 260},

839 {240*
OVERSAMPLENR
, 250},

840 {274*
OVERSAMPLENR
, 240},

841 {312*
OVERSAMPLENR
, 230},

842 {355*
OVERSAMPLENR
, 220},

843 {401*
OVERSAMPLENR
, 210},

844 {452*
OVERSAMPLENR
, 200},

845 {506*
OVERSAMPLENR
, 190},

846 {563*
OVERSAMPLENR
, 180},

847 {620*
OVERSAMPLENR
, 170},

848 {677*
OVERSAMPLENR
, 160},

849 {732*
OVERSAMPLENR
, 150},

850 {783*
OVERSAMPLENR
, 140},

851 {830*
OVERSAMPLENR
, 130},

852 {871*
OVERSAMPLENR
, 120},

853 {906*
OVERSAMPLENR
, 110},

854 {935*
OVERSAMPLENR
, 100},

855 {958*
OVERSAMPLENR
, 90},

856 {976*
OVERSAMPLENR
, 80},

857 {990*
OVERSAMPLENR
, 70},

858 {1000*
OVERSAMPLENR
, 60},

859 {1008*
OVERSAMPLENR
, 50},

860 {1013*
OVERSAMPLENR
, 40},

861 {1017*
OVERSAMPLENR
, 30},

862 {1019*
OVERSAMPLENR
, 20},

863 {1021*
OVERSAMPLENR
, 10},

864 {1022*
OVERSAMPLENR
, 0}

868 #i‡(
THERMISTORHEATER_0
 =55Ë|| (
THERMISTORHEATER_1
 =55Ë|| (
THERMISTORHEATER_2
 =55Ë|| (
THERMISTORBED
 == 55)

873 c⁄° 
	gãm±abÀ_55
[][2] 
	gPROGMEM
 = {

874 {1*
OVERSAMPLENR
, 500},

875 {76*
OVERSAMPLENR
, 300},

876 {87*
OVERSAMPLENR
, 290},

877 {100*
OVERSAMPLENR
, 280},

878 {114*
OVERSAMPLENR
, 270},

879 {131*
OVERSAMPLENR
, 260},

880 {152*
OVERSAMPLENR
, 250},

881 {175*
OVERSAMPLENR
, 240},

882 {202*
OVERSAMPLENR
, 230},

883 {234*
OVERSAMPLENR
, 220},

884 {271*
OVERSAMPLENR
, 210},

885 {312*
OVERSAMPLENR
, 200},

886 {359*
OVERSAMPLENR
, 190},

887 {411*
OVERSAMPLENR
, 180},

888 {467*
OVERSAMPLENR
, 170},

889 {527*
OVERSAMPLENR
, 160},

890 {590*
OVERSAMPLENR
, 150},

891 {652*
OVERSAMPLENR
, 140},

892 {713*
OVERSAMPLENR
, 130},

893 {770*
OVERSAMPLENR
, 120},

894 {822*
OVERSAMPLENR
, 110},

895 {867*
OVERSAMPLENR
, 100},

896 {905*
OVERSAMPLENR
, 90},

897 {936*
OVERSAMPLENR
, 80},

898 {961*
OVERSAMPLENR
, 70},

899 {979*
OVERSAMPLENR
, 60},

900 {993*
OVERSAMPLENR
, 50},

901 {1003*
OVERSAMPLENR
, 40},

902 {1010*
OVERSAMPLENR
, 30},

903 {1015*
OVERSAMPLENR
, 20},

904 {1018*
OVERSAMPLENR
, 10},

905 {1020*
OVERSAMPLENR
, 0}

909 #i‡(
THERMISTORHEATER_0
 =60Ë|| (
THERMISTORHEATER_1
 =60Ë|| (
THERMISTORHEATER_2
 =60Ë|| (
THERMISTORBED
 == 60)

918 c⁄° 
	gãm±abÀ_60
[][2] 
	gPROGMEM
 = {

919 {51*
OVERSAMPLENR
, 272},

920 {61*
OVERSAMPLENR
, 258},

921 {71*
OVERSAMPLENR
, 247},

922 {81*
OVERSAMPLENR
, 237},

923 {91*
OVERSAMPLENR
, 229},

924 {101*
OVERSAMPLENR
, 221},

925 {131*
OVERSAMPLENR
, 204},

926 {161*
OVERSAMPLENR
, 190},

927 {191*
OVERSAMPLENR
, 179},

928 {231*
OVERSAMPLENR
, 167},

929 {271*
OVERSAMPLENR
, 157},

930 {311*
OVERSAMPLENR
, 148},

931 {351*
OVERSAMPLENR
, 140},

932 {381*
OVERSAMPLENR
, 135},

933 {411*
OVERSAMPLENR
, 130},

934 {441*
OVERSAMPLENR
, 125},

935 {451*
OVERSAMPLENR
, 123},

936 {461*
OVERSAMPLENR
, 122},

937 {471*
OVERSAMPLENR
, 120},

938 {481*
OVERSAMPLENR
, 119},

939 {491*
OVERSAMPLENR
, 117},

940 {501*
OVERSAMPLENR
, 116},

941 {511*
OVERSAMPLENR
, 114},

942 {521*
OVERSAMPLENR
, 113},

943 {531*
OVERSAMPLENR
, 111},

944 {541*
OVERSAMPLENR
, 110},

945 {551*
OVERSAMPLENR
, 108},

946 {561*
OVERSAMPLENR
, 107},

947 {571*
OVERSAMPLENR
, 105},

948 {581*
OVERSAMPLENR
, 104},

949 {591*
OVERSAMPLENR
, 102},

950 {601*
OVERSAMPLENR
, 101},

951 {611*
OVERSAMPLENR
, 100},

952 {621*
OVERSAMPLENR
, 98},

953 {631*
OVERSAMPLENR
, 97},

954 {641*
OVERSAMPLENR
, 95},

955 {651*
OVERSAMPLENR
, 94},

956 {661*
OVERSAMPLENR
, 92},

957 {671*
OVERSAMPLENR
, 91},

958 {681*
OVERSAMPLENR
, 90},

959 {691*
OVERSAMPLENR
, 88},

960 {701*
OVERSAMPLENR
, 87},

961 {711*
OVERSAMPLENR
, 85},

962 {721*
OVERSAMPLENR
, 84},

963 {731*
OVERSAMPLENR
, 82},

964 {741*
OVERSAMPLENR
, 81},

965 {751*
OVERSAMPLENR
, 79},

966 {761*
OVERSAMPLENR
, 77},

967 {771*
OVERSAMPLENR
, 76},

968 {781*
OVERSAMPLENR
, 74},

969 {791*
OVERSAMPLENR
, 72},

970 {801*
OVERSAMPLENR
, 71},

971 {811*
OVERSAMPLENR
, 69},

972 {821*
OVERSAMPLENR
, 67},

973 {831*
OVERSAMPLENR
, 65},

974 {841*
OVERSAMPLENR
, 63},

975 {851*
OVERSAMPLENR
, 62},

976 {861*
OVERSAMPLENR
, 60},

977 {871*
OVERSAMPLENR
, 57},

978 {881*
OVERSAMPLENR
, 55},

979 {891*
OVERSAMPLENR
, 53},

980 {901*
OVERSAMPLENR
, 51},

981 {911*
OVERSAMPLENR
, 48},

982 {921*
OVERSAMPLENR
, 45},

983 {931*
OVERSAMPLENR
, 42},

984 {941*
OVERSAMPLENR
, 39},

985 {951*
OVERSAMPLENR
, 36},

986 {961*
OVERSAMPLENR
, 32},

987 {981*
OVERSAMPLENR
, 23},

988 {991*
OVERSAMPLENR
, 17},

989 {1001*
OVERSAMPLENR
, 9},

990 {1008*
OVERSAMPLENR
, 0},

993 #i‡(
THERMISTORBED
 == 12)

995 c⁄° 
	gãm±abÀ_12
[][2] 
	gPROGMEM
 = {

996 {35*
OVERSAMPLENR
, 180},

997 {211*
OVERSAMPLENR
, 140},

998 {233*
OVERSAMPLENR
, 135},

999 {261*
OVERSAMPLENR
, 130},

1000 {290*
OVERSAMPLENR
, 125},

1001 {328*
OVERSAMPLENR
, 120},

1002 {362*
OVERSAMPLENR
, 115},

1003 {406*
OVERSAMPLENR
, 110},

1004 {446*
OVERSAMPLENR
, 105},

1005 {496*
OVERSAMPLENR
, 100},

1006 {539*
OVERSAMPLENR
, 95},

1007 {585*
OVERSAMPLENR
, 90},

1008 {629*
OVERSAMPLENR
, 85},

1009 {675*
OVERSAMPLENR
, 80},

1010 {718*
OVERSAMPLENR
, 75},

1011 {758*
OVERSAMPLENR
, 70},

1012 {793*
OVERSAMPLENR
, 65},

1013 {822*
OVERSAMPLENR
, 60},

1014 {841*
OVERSAMPLENR
, 55},

1015 {875*
OVERSAMPLENR
, 50},

1016 {899*
OVERSAMPLENR
, 45},

1017 {926*
OVERSAMPLENR
, 40},

1018 {946*
OVERSAMPLENR
, 35},

1019 {962*
OVERSAMPLENR
, 30},

1020 {977*
OVERSAMPLENR
, 25},

1021 {987*
OVERSAMPLENR
, 20},

1022 {995*
OVERSAMPLENR
, 15},

1023 {1001*
OVERSAMPLENR
, 10},

1024 {1010*
OVERSAMPLENR
, 0},

1025 {1023*
OVERSAMPLENR
, -40},

1034 
	#PtA
 3.9083E-3

	)

1035 
	#PtB
 -5.775E-7

	)

1036 
	#PtRt
(
T
,
R0
Ë((R0)*(1.0+(
PtA
)*(T)+(
PtB
)*(T)*(T)))

	)

1037 
	#PtAdVÆ
(
T
,
R0
,
Rup
Ë()(1024/(Rup/
	`PtRt
(T,R0)+1))

	)

1038 
	#PtLöe
(
T
,
R0
,
Rup
Ë{ 
	`PtAdVÆ
(T,R0,Rup)*
OVERSAMPLENR
, T },

	)

1040 #i‡(
THERMISTORHEATER_0
 =110Ë|| (
THERMISTORHEATER_1
 =110Ë|| (
THERMISTORHEATER_2
 =110Ë|| (
THERMISTORBED
 == 110)

1041 c⁄° 
	gãm±abÀ_110
[][2] 
	gPROGMEM
 = {

1043 
PtLöe
(0,100,1000)

1044 
PtLöe
(50,100,1000)

1045 
PtLöe
(100,100,1000)

1046 
PtLöe
(150,100,1000)

1047 
PtLöe
(200,100,1000)

1048 
PtLöe
(250,100,1000)

1049 
PtLöe
(300,100,1000)

1052 #i‡(
THERMISTORHEATER_0
 =147Ë|| (
THERMISTORHEATER_1
 =147Ë|| (
THERMISTORHEATER_2
 =147Ë|| (
THERMISTORBED
 == 147)

1053 c⁄° 
	gãm±abÀ_147
[][2] 
	gPROGMEM
 = {

1055 
PtLöe
(0,100,4700)

1056 
PtLöe
(50,100,4700)

1057 
PtLöe
(100,100,4700)

1058 
PtLöe
(150,100,4700)

1059 
PtLöe
(200,100,4700)

1060 
PtLöe
(250,100,4700)

1061 
PtLöe
(300,100,4700)

1064 #i‡(
THERMISTORHEATER_0
 =1010Ë|| (
THERMISTORHEATER_1
 =1010Ë|| (
THERMISTORHEATER_2
 =1010Ë|| (
THERMISTORBED
 == 1010)

1065 c⁄° 
	gãm±abÀ_1010
[][2] 
	gPROGMEM
 = {

1066 
PtLöe
(0,1000,1000)

1067 
PtLöe
(25,1000,1000)

1068 
PtLöe
(50,1000,1000)

1069 
PtLöe
(75,1000,1000)

1070 
PtLöe
(100,1000,1000)

1071 
PtLöe
(125,1000,1000)

1072 
PtLöe
(150,1000,1000)

1073 
PtLöe
(175,1000,1000)

1074 
PtLöe
(200,1000,1000)

1075 
PtLöe
(225,1000,1000)

1076 
PtLöe
(250,1000,1000)

1077 
PtLöe
(275,1000,1000)

1078 
PtLöe
(300,1000,1000)

1081 #i‡(
THERMISTORHEATER_0
 =1047Ë|| (
THERMISTORHEATER_1
 =1047Ë|| (
THERMISTORHEATER_2
 =1047Ë|| (
THERMISTORBED
 == 1047)

1082 c⁄° 
	gãm±abÀ_1047
[][2] 
	gPROGMEM
 = {

1084 
PtLöe
(0,1000,4700)

1085 
PtLöe
(50,1000,4700)

1086 
PtLöe
(100,1000,4700)

1087 
PtLöe
(150,1000,4700)

1088 
PtLöe
(200,1000,4700)

1089 
PtLöe
(250,1000,4700)

1090 
PtLöe
(300,1000,4700)

1094 
	#_TT_NAME
(
_N
Ë
ãm±abÀ_
 ## 
	)
_N

1095 
	#TT_NAME
(
_N
Ë
	`_TT_NAME
(_N)

	)

1097 #ifde‡
THERMISTORHEATER_0


1098 
	#HEATER_0_TEMPTABLE
 
	`TT_NAME
(
THERMISTORHEATER_0
)

	)

1099 
	#HEATER_0_TEMPTABLE_LEN
 ((
HEATER_0_TEMPTABLE
)/(*HEATER_0_TEMPTABLE))

	)

1101 #ifde‡
HEATER_0_USES_THERMISTOR


1102 #îr‹ 
No
 
hóãr
 0 
thîmi°‹
 
èbÀ
 
•ecifõd


1104 
	#HEATER_0_TEMPTABLE
 
NULL


	)

1105 
	#HEATER_0_TEMPTABLE_LEN
 0

	)

1110 #i‚de‡
HEATER_0_RAW_HI_TEMP


1111 #ifde‡
HEATER_0_USES_THERMISTOR


1112 
	#HEATER_0_RAW_HI_TEMP
 0

	)

1113 
	#HEATER_0_RAW_LO_TEMP
 16383

	)

1115 
	#HEATER_0_RAW_HI_TEMP
 16383

	)

1116 
	#HEATER_0_RAW_LO_TEMP
 0

	)

1120 #ifde‡
THERMISTORHEATER_1


1121 
	#HEATER_1_TEMPTABLE
 
	`TT_NAME
(
THERMISTORHEATER_1
)

	)

1122 
	#HEATER_1_TEMPTABLE_LEN
 ((
HEATER_1_TEMPTABLE
)/(*HEATER_1_TEMPTABLE))

	)

1124 #ifde‡
HEATER_1_USES_THERMISTOR


1125 #îr‹ 
No
 
hóãr
 1 
thîmi°‹
 
èbÀ
 
•ecifõd


1127 
	#HEATER_1_TEMPTABLE
 
NULL


	)

1128 
	#HEATER_1_TEMPTABLE_LEN
 0

	)

1133 #i‚de‡
HEATER_1_RAW_HI_TEMP


1134 #ifde‡
HEATER_1_USES_THERMISTOR


1135 
	#HEATER_1_RAW_HI_TEMP
 0

	)

1136 
	#HEATER_1_RAW_LO_TEMP
 16383

	)

1138 
	#HEATER_1_RAW_HI_TEMP
 16383

	)

1139 
	#HEATER_1_RAW_LO_TEMP
 0

	)

1143 #ifde‡
THERMISTORHEATER_2


1144 
	#HEATER_2_TEMPTABLE
 
	`TT_NAME
(
THERMISTORHEATER_2
)

	)

1145 
	#HEATER_2_TEMPTABLE_LEN
 ((
HEATER_2_TEMPTABLE
)/(*HEATER_2_TEMPTABLE))

	)

1147 #ifde‡
HEATER_2_USES_THERMISTOR


1148 #îr‹ 
No
 
hóãr
 2 
thîmi°‹
 
èbÀ
 
•ecifõd


1150 
	#HEATER_2_TEMPTABLE
 
NULL


	)

1151 
	#HEATER_2_TEMPTABLE_LEN
 0

	)

1156 #i‚de‡
HEATER_2_RAW_HI_TEMP


1157 #ifde‡
HEATER_2_USES_THERMISTOR


1158 
	#HEATER_2_RAW_HI_TEMP
 0

	)

1159 
	#HEATER_2_RAW_LO_TEMP
 16383

	)

1161 
	#HEATER_2_RAW_HI_TEMP
 16383

	)

1162 
	#HEATER_2_RAW_LO_TEMP
 0

	)

1166 #ifde‡
THERMISTORBED


1167 
	#BEDTEMPTABLE
 
	`TT_NAME
(
THERMISTORBED
)

	)

1168 
	#BEDTEMPTABLE_LEN
 ((
BEDTEMPTABLE
)/(*BEDTEMPTABLE))

	)

1170 #ifde‡
BED_USES_THERMISTOR


1171 #îr‹ 
No
 
bed
 
thîmi°‹
 
èbÀ
 
•ecifõd


1176 #i‚de‡
HEATER_BED_RAW_HI_TEMP


1177 #ifde‡
BED_USES_THERMISTOR


1178 
	#HEATER_BED_RAW_HI_TEMP
 0

	)

1179 
	#HEATER_BED_RAW_LO_TEMP
 16383

	)

1181 
	#HEATER_BED_RAW_HI_TEMP
 16383

	)

1182 
	#HEATER_BED_RAW_LO_TEMP
 0

	)

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/ultralcd.cpp

1 
	~"ãm≥øtuª.h
"

2 
	~"u…ølcd.h
"

3 #ifde‡
ULTRA_LCD


4 
	~"M¨lö.h
"

5 
	~"œnguage.h
"

6 
	~"ˇrdªadî.h
"

7 
	~"ãm≥øtuª.h
"

8 
	~"°ï≥r.h
"

9 
	~"C⁄figuøti⁄St‹e.h
"

11 
öt8_t
 
	gícodîDiff
;

14 
	g∂aPªhótHŸídTemp
;

15 
	g∂aPªhótHPBTemp
;

16 
	g∂aPªhótF™S≥ed
;

18 
	gabsPªhótHŸídTemp
;

19 
	gabsPªhótHPBTemp
;

20 
	gabsPªhótF™S≥ed
;

23 #ifde‡
FILAMENT_LCD_DISPLAY


24 
	gmesßge_mûlis
=0;

29 #ifde‡
ULTIPANEL


30 
	gm™uÆ_„edøã
[] = 
MANUAL_FEEDRATE
;

36 (*
	gmíuFunc_t
)();

38 
uöt8_t
 
	glcd_°©us_mesßge_Àvñ
;

39 
	glcd_°©us_mesßge
[
LCD_WIDTH
+1] = 
WELCOME_MSG
;

41 #ifde‡
DOGLCD


42 
	~"dogm_lcd_im∂emíèti⁄.h
"

44 
	~"u…ølcd_im∂emíèti⁄_hôachi_HD44780.h
"

49 
c›y_™d_sˇÀPID_i
();

50 
c›y_™d_sˇÀPID_d
();

53 
lcd_°©us_s¸ìn
();

54 #ifde‡
ULTIPANEL


55 
boﬁ
 
powîsuµly
;

56 
lcd_maö_míu
();

57 
lcd_tu√_míu
();

58 
lcd_¥ï¨e_míu
();

59 
lcd_move_míu
();

60 
lcd_c⁄åﬁ_míu
();

61 
lcd_c⁄åﬁ_ãm≥øtuª_míu
();

62 
lcd_c⁄åﬁ_ãm≥øtuª_¥ehót_∂a_£âögs_míu
();

63 
lcd_c⁄åﬁ_ãm≥øtuª_¥ehót_abs_£âögs_míu
();

64 
lcd_c⁄åﬁ_mŸi⁄_míu
();

65 #ifde‡
DOGLCD


66 
lcd_£t_c⁄åa°
();

68 
lcd_c⁄åﬁ_ªåa˘_míu
();

69 
lcd_sdˇrd_míu
();

71 
lcd_quick_„edback
();

74 
míu_a˘i⁄_back
(
míuFunc_t
 
d©a
);

75 
míu_a˘i⁄_submíu
(
míuFunc_t
 
d©a
);

76 
míu_a˘i⁄_gcode
(c⁄° * 
pgcode
);

77 
míu_a˘i⁄_fun˘i⁄
(
míuFunc_t
 
d©a
);

78 
míu_a˘i⁄_sdfûe
(c⁄° * 
fûíame
, * 
l⁄gFûíame
);

79 
míu_a˘i⁄_sddúe˘‹y
(c⁄° * 
fûíame
, * 
l⁄gFûíame
);

80 
míu_a˘i⁄_£âög_edô_boﬁ
(c⁄° * 
p°r
, 
boﬁ
* 
±r
);

81 
míu_a˘i⁄_£âög_edô_öt3
(c⁄° * 
p°r
, * 
±r
, 
möVÆue
, 
maxVÆue
);

82 
míu_a˘i⁄_£âög_edô_Êﬂt3
(c⁄° * 
p°r
, * 
±r
, 
möVÆue
, 
maxVÆue
);

83 
míu_a˘i⁄_£âög_edô_Êﬂt32
(c⁄° * 
p°r
, * 
±r
, 
möVÆue
, 
maxVÆue
);

84 
míu_a˘i⁄_£âög_edô_Êﬂt5
(c⁄° * 
p°r
, * 
±r
, 
möVÆue
, 
maxVÆue
);

85 
míu_a˘i⁄_£âög_edô_Êﬂt51
(c⁄° * 
p°r
, * 
±r
, 
möVÆue
, 
maxVÆue
);

86 
míu_a˘i⁄_£âög_edô_Êﬂt52
(c⁄° * 
p°r
, * 
±r
, 
möVÆue
, 
maxVÆue
);

87 
míu_a˘i⁄_£âög_edô_l⁄g5
(c⁄° * 
p°r
, * 
±r
, 
möVÆue
, 
maxVÆue
);

88 
míu_a˘i⁄_£âög_edô_ˇŒback_boﬁ
(c⁄° * 
p°r
, 
boﬁ
* 
±r
, 
míuFunc_t
 
ˇŒbackFunc
);

89 
míu_a˘i⁄_£âög_edô_ˇŒback_öt3
(c⁄° * 
p°r
, * 
±r
, 
möVÆue
, 
maxVÆue
, 
míuFunc_t
 
ˇŒbackFunc
);

90 
míu_a˘i⁄_£âög_edô_ˇŒback_Êﬂt3
(c⁄° * 
p°r
, * 
±r
, 
möVÆue
, 
maxVÆue
, 
míuFunc_t
 
ˇŒbackFunc
);

91 
míu_a˘i⁄_£âög_edô_ˇŒback_Êﬂt32
(c⁄° * 
p°r
, * 
±r
, 
möVÆue
, 
maxVÆue
, 
míuFunc_t
 
ˇŒbackFunc
);

92 
míu_a˘i⁄_£âög_edô_ˇŒback_Êﬂt5
(c⁄° * 
p°r
, * 
±r
, 
möVÆue
, 
maxVÆue
, 
míuFunc_t
 
ˇŒbackFunc
);

93 
míu_a˘i⁄_£âög_edô_ˇŒback_Êﬂt51
(c⁄° * 
p°r
, * 
±r
, 
möVÆue
, 
maxVÆue
, 
míuFunc_t
 
ˇŒbackFunc
);

94 
míu_a˘i⁄_£âög_edô_ˇŒback_Êﬂt52
(c⁄° * 
p°r
, * 
±r
, 
möVÆue
, 
maxVÆue
, 
míuFunc_t
 
ˇŒbackFunc
);

95 
míu_a˘i⁄_£âög_edô_ˇŒback_l⁄g5
(c⁄° * 
p°r
, * 
±r
, 
möVÆue
, 
maxVÆue
, 
míuFunc_t
 
ˇŒbackFunc
);

97 
	#ENCODER_FEEDRATE_DEADZONE
 10

	)

99 #i‡!
deföed
(
LCD_I2C_VIKI
)

100 #i‚de‡
ENCODER_STEPS_PER_MENU_ITEM


101 
	#ENCODER_STEPS_PER_MENU_ITEM
 5

	)

103 #i‚de‡
ENCODER_PULSES_PER_STEP


104 
	#ENCODER_PULSES_PER_STEP
 1

	)

107 #i‚de‡
ENCODER_STEPS_PER_MENU_ITEM


108 
	#ENCODER_STEPS_PER_MENU_ITEM
 2

110 #i‚de‡
ENCODER_PULSES_PER_STEP


	)

111 
	#ENCODER_PULSES_PER_STEP
 1

	)

117 
	#START_MENU
() do { \

118 i‡(
ícodîPosôi⁄
 > 0x8000)ÉncoderPosition = 0; \

119 i‡(
ícodîPosôi⁄
 / 
ENCODER_STEPS_PER_MENU_ITEM
 < 
cuºítMíuVõwOff£t
) currentMenuViewOffset =ÉncoderPosition / ENCODER_STEPS_PER_MENU_ITEM;\

120 
uöt8_t
 
_löeNr
 = 
cuºítMíuVõwOff£t
, 
_míuIãmNr
; \

121 
boﬁ
 
wasClicked
 = 
LCD_CLICKED
;\

122 
uöt8_t
 
_døwLöeNr
 = 0; _døwLöeN∏< 
LCD_HEIGHT
; _døwLöeNr++, 
_löeNr
++) { \

123 
_míuIãmNr
 = 0;

	)

124 
	#MENU_ITEM
(
ty≥
, 
œbñ
, 
¨gs
...) do { \

125 i‡(
_míuIãmNr
 =
_löeNr
) { \

126 i‡(
lcdDøwUpd©e
) { \

127 c⁄° * 
_œbñ_p°r
 = 
	`PSTR
(
œbñ
); \

128 i‡((
ícodîPosôi⁄
 / 
ENCODER_STEPS_PER_MENU_ITEM
Ë=
_míuIãmNr
) { \

129 
lcd_im∂emíèti⁄_døwmíu_
 ## 
ty≥
 ## 
	`_£À˘ed
 (
_døwLöeNr
, 
_œbñ_p°r
 , ## 
¨gs
 ); \

131 
lcd_im∂emíèti⁄_døwmíu_
 ## 
	`ty≥
 (
_døwLöeNr
, 
_œbñ_p°r
 , ## 
¨gs
 ); \

134 i‡(
wasClicked
 && (
ícodîPosôi⁄
 / 
ENCODER_STEPS_PER_MENU_ITEM
Ë=
_míuIãmNr
) {\

135 
	`lcd_quick_„edback
(); \

136 
míu_a˘i⁄_
 ## 
	`ty≥
 ( 
¨gs
 ); \

140 
_míuIãmNr
++;\

141 } 0)

	)

142 
	#MENU_ITEM_DUMMY
(Ëdÿ{ 
_míuIãmNr
++; } 0)

	)

143 
	#MENU_ITEM_EDIT
(
ty≥
, 
œbñ
, 
¨gs
...Ë
	`MENU_ITEM
(
£âög_edô_
 ##Åy≥,Üabñ, 
	`PSTR
÷abñË, ##árg†)

	)

144 
	#MENU_ITEM_EDIT_CALLBACK
(
ty≥
, 
œbñ
, 
¨gs
...Ë
	`MENU_ITEM
(
£âög_edô_ˇŒback_
 ##Åy≥,Üabñ, 
	`PSTR
÷abñË, ##árg†)

	)

145 
	#END_MENU
() \

146 i‡(
ícodîPosôi⁄
 / 
ENCODER_STEPS_PER_MENU_ITEM
 >
_míuIãmNr
)ÉncoderPosition = _menuItemNr * ENCODER_STEPS_PER_MENU_ITEM - 1; \

147 i‡((
uöt8_t
)(
ícodîPosôi⁄
 / 
ENCODER_STEPS_PER_MENU_ITEM
Ë>
cuºítMíuVõwOff£t
 + 
LCD_HEIGHT
Ë{ cuºítMíuVõwOff£à”ncodîPosôi⁄ / ENCODER_STEPS_PER_MENU_ITEMË- LCD_HEIGHT + 1; 
lcdDøwUpd©e
 = 1; 
_löeNr
 = cuºítMíuVõwOff£à- 1; 
_døwLöeNr
 = -1; } \

148 } } 0)

	)

151 #i‚de‡
REPRAPWORLD_KEYPAD


152 vﬁ©ûê
uöt8_t
 
	gbuâ⁄s
;

154 vﬁ©ûê
uöt8_t
 
	gbuâ⁄s_ª¥≠w‹ld_key∑d
;

156 #ifde‡
LCD_HAS_SLOW_BUTTONS


157 vﬁ©ûê
uöt8_t
 
	g¶ow_buâ⁄s
;

159 
uöt8_t
 
	gcuºítMíuVõwOff£t
;

160 
uöt32_t
 
	gblockög_íc
;

161 
uöt8_t
 
	gœ°EncodîBôs
;

162 
uöt32_t
 
	gícodîPosôi⁄
;

163 #i‡(
SDCARDDETECT
 > 0)

164 
boﬁ
 
	glcd_ﬁdˇrd°©us
;

168 
míuFunc_t
 
	gcuºítMíu
 = 
lcd_°©us_s¸ìn
;

169 
uöt32_t
 
	glcd_√xt_upd©e_mûlis
;

170 
uöt8_t
 
	glcd_°©us_upd©e_dñay
;

171 
boﬁ
 
	gign‹e_˛ick
 = 
Ál£
;

172 
boﬁ
 
	gwaô_f‹_un˛ick
;

173 
uöt8_t
 
	glcdDøwUpd©e
 = 2;

176 
míuFunc_t
 
	g¥evMíu
 = 
NULL
;

177 
uöt16_t
 
	g¥evEncodîPosôi⁄
;

179 c⁄° * 
	gedôLabñ
;

180 * 
	gedôVÆue
;

181 
öt32_t
 
	gmöEdôVÆue
, 
	gmaxEdôVÆue
;

182 
míuFunc_t
 
	gˇŒbackFunc
;

185 
	gøw_Ki
, 
	gøw_Kd
;

187 
	$lcd_gŸo_míu
(
míuFunc_t
 
míu
, c⁄° 
uöt32_t
 
ícodî
=0, c⁄° 
boﬁ
 
„edback
=
åue
) {

188 i‡(
cuºítMíu
 !
míu
) {

189 
cuºítMíu
 = 
míu
;

190 
ícodîPosôi⁄
 = 
ícodî
;

191 i‡(
„edback
Ë
	`lcd_quick_„edback
();

193 
	}
}

196 
	$lcd_°©us_s¸ìn
()

198 i‡(
lcd_°©us_upd©e_dñay
)

199 
lcd_°©us_upd©e_dñay
--;

201 
lcdDøwUpd©e
 = 1;

202 i‡(
lcdDøwUpd©e
)

204 
	`lcd_im∂emíèti⁄_°©us_s¸ìn
();

205 
lcd_°©us_upd©e_dñay
 = 10;

207 #ifde‡
ULTIPANEL


209 
boﬁ
 
cuºít_˛ick
 = 
LCD_CLICKED
;

211 i‡(
ign‹e_˛ick
) {

212 i‡(
waô_f‹_un˛ick
) {

213 i‡(!
cuºít_˛ick
) {

214 
ign‹e_˛ick
 = 
waô_f‹_un˛ick
 = 
Ál£
;

217 
cuºít_˛ick
 = 
Ál£
;

220 i‡(
cuºít_˛ick
) {

221 
	`lcd_quick_„edback
();

222 
waô_f‹_un˛ick
 = 
åue
;

223 
cuºít_˛ick
 = 
Ál£
;

227 i‡(
cuºít_˛ick
)

229 
	`lcd_gŸo_míu
(
lcd_maö_míu
);

230 
	`lcd_im∂emíèti⁄_öô
();

231 #ifde‡
FILAMENT_LCD_DISPLAY


232 
mesßge_mûlis
=
	`mûlis
();

236 #ifde‡
ULTIPANEL_FEEDMULTIPLY


238 i‡((
„edmu…ùly
 < 100 && („edmu…ùly + (
ícodîPosôi⁄
)) > 100) ||

239 (
„edmu…ùly
 > 100 && („edmu…ùly + (
ícodîPosôi⁄
)) < 100))

241 
ícodîPosôi⁄
 = 0;

242 
„edmu…ùly
 = 100;

245 i‡(
„edmu…ùly
 =100 && (
ícodîPosôi⁄
Ë> 
ENCODER_FEEDRATE_DEADZONE
)

247 
„edmu…ùly
 +(
ícodîPosôi⁄
Ë- 
ENCODER_FEEDRATE_DEADZONE
;

248 
ícodîPosôi⁄
 = 0;

250 i‡(
„edmu…ùly
 =100 && (
ícodîPosôi⁄
Ë< -
ENCODER_FEEDRATE_DEADZONE
)

252 
„edmu…ùly
 +(
ícodîPosôi⁄
Ë+ 
ENCODER_FEEDRATE_DEADZONE
;

253 
ícodîPosôi⁄
 = 0;

255 i‡(
„edmu…ùly
 != 100)

257 
„edmu…ùly
 +(
ícodîPosôi⁄
);

258 
ícodîPosôi⁄
 = 0;

262 i‡(
„edmu…ùly
 < 10)

263 
„edmu…ùly
 = 10;

264 i‡(
„edmu…ùly
 > 999)

265 
„edmu…ùly
 = 999;

267 
	}
}

269 #ifde‡
ULTIPANEL


270 
	$lcd_ªtu∫_to_°©us
()

272 
	`lcd_gŸo_míu
(
lcd_°©us_s¸ìn
, 0, 
Ál£
);

273 
	}
}

274 
	$lcd_sdˇrd_∑u£
()

276 
ˇrd
.
	`∑u£SDPröt
();

277 
	}
}

278 
	$lcd_sdˇrd_ªsume
()

280 
ˇrd
.
	`°¨tFûïröt
();

281 
	}
}

283 
	$lcd_sdˇrd_°›
()

285 
ˇrd
.
sd¥ötög
 = 
Ál£
;

286 
ˇrd
.
	`˛o£fûe
();

287 
	`quickSt›
();

288 if(
SD_FINISHED_STEPPERRELEASE
)

290 
	`íquecomm™d_P
(
	`PSTR
(
SD_FINISHED_RELEASECOMMAND
));

292 
	`autŸempShutdown
();

294 
ˇn˚l_hótup
 = 
åue
;

296 
	`lcd_£t°©us
(
MSG_PRINT_ABORTED
);

297 
	}
}

300 
	$lcd_maö_míu
()

302 
	`START_MENU
();

303 
	`MENU_ITEM
(
back
, 
MSG_WATCH
, 
lcd_°©us_s¸ìn
);

304 i‡(
	`move•œ¬ed
(Ë|| 
IS_SD_PRINTING
)

306 
	`MENU_ITEM
(
submíu
, 
MSG_TUNE
, 
lcd_tu√_míu
);

308 
	`MENU_ITEM
(
submíu
, 
MSG_PREPARE
, 
lcd_¥ï¨e_míu
);

310 
	`MENU_ITEM
(
submíu
, 
MSG_CONTROL
, 
lcd_c⁄åﬁ_míu
);

311 #ifde‡
SDSUPPORT


312 i‡(
ˇrd
.
ˇrdOK
)

314 i‡(
ˇrd
.
	`isFûeO≥n
())

316 i‡(
ˇrd
.
sd¥ötög
)

317 
	`MENU_ITEM
(
fun˘i⁄
, 
MSG_PAUSE_PRINT
, 
lcd_sdˇrd_∑u£
);

319 
	`MENU_ITEM
(
fun˘i⁄
, 
MSG_RESUME_PRINT
, 
lcd_sdˇrd_ªsume
);

320 
	`MENU_ITEM
(
fun˘i⁄
, 
MSG_STOP_PRINT
, 
lcd_sdˇrd_°›
);

322 
	`MENU_ITEM
(
submíu
, 
MSG_CARD_MENU
, 
lcd_sdˇrd_míu
);

323 #i‡
SDCARDDETECT
 < 1

324 
	`MENU_ITEM
(
gcode
, 
MSG_CNG_SDCARD
, 
	`PSTR
("M21"));

328 
	`MENU_ITEM
(
submíu
, 
MSG_NO_CARD
, 
lcd_sdˇrd_míu
);

329 #i‡
SDCARDDETECT
 < 1

330 
	`MENU_ITEM
(
gcode
, 
MSG_INIT_SDCARD
, 
	`PSTR
("M21"));

334 
	`END_MENU
();

335 
	}
}

337 #ifde‡
SDSUPPORT


338 
	$lcd_auto°¨t_sd
()

340 
ˇrd
.
œ°ƒ
=0;

341 
ˇrd
.
	`£åoŸ
();

342 
ˇrd
.
	`checkauto°¨t
(
åue
);

343 
	}
}

346 
	$lcd_£t_home_off£ts
()

348 
öt8_t
 
i
=0; i < 
NUM_AXIS
; i++) {

349 i‡(
i
 !
E_AXIS
) {

350 
add_homög
[
i
] -
cuºít_posôi⁄
[i];

351 
cuºít_posôi⁄
[
i
] = 0.0;

354 
	`∂™_£t_posôi⁄
(0.0, 0.0, 0.0, 
cuºít_posôi⁄
[
E_AXIS
]);

357 
	`íquecomm™d_P
(
	`PSTR
("M300 S659 P200"));

358 
	`íquecomm™d_P
(
	`PSTR
("M300 S698 P200"));

359 
	`lcd_ªtu∫_to_°©us
();

360 
	}
}

363 #ifde‡
BABYSTEPPING


365 
	$_lcd_baby°ï
(
axis
, c⁄° *
msg
) {

366 i‡(
ícodîPosôi⁄
 != 0) {

367 
baby°ïsTodo
[
axis
] +()
ícodîPosôi⁄
;

368 
ícodîPosôi⁄
 = 0;

369 
lcdDøwUpd©e
 = 1;

371 i‡(
lcdDøwUpd©e
Ë
	`lcd_im∂emíèti⁄_døwedô
(
	`PSTR
(
msg
), "");

372 i‡(
LCD_CLICKED
Ë
	`lcd_gŸo_míu
(
lcd_tu√_míu
);

373 
	}
}

374 
	$lcd_baby°ï_x
(Ë{ 
	`_lcd_baby°ï
(
X_AXIS
, 
MSG_BABYSTEPPING_X
); 
	}
}

375 
	$lcd_baby°ï_y
(Ë{ 
	`_lcd_baby°ï
(
Y_AXIS
, 
MSG_BABYSTEPPING_Y
); 
	}
}

376 
	$lcd_baby°ï_z
(Ë{ 
	`_lcd_baby°ï
(
Z_AXIS
, 
MSG_BABYSTEPPING_Z
); 
	}
}

380 
	$lcd_tu√_míu
()

382 
	`START_MENU
();

383 
	`MENU_ITEM
(
back
, 
MSG_MAIN
, 
lcd_maö_míu
);

384 
	`MENU_ITEM_EDIT
(
öt3
, 
MSG_SPEED
, &
„edmu…ùly
, 10, 999);

385 #i‡
TEMP_SENSOR_0
 != 0

386 
	`MENU_ITEM_EDIT
(
öt3
, 
MSG_NOZZLE
, &
èrgë_ãm≥øtuª
[0], 0, 
HEATER_0_MAXTEMP
 - 15);

388 #i‡
TEMP_SENSOR_1
 != 0

389 
	`MENU_ITEM_EDIT
(
öt3
, 
MSG_NOZZLE1
, &
èrgë_ãm≥øtuª
[1], 0, 
HEATER_1_MAXTEMP
 - 15);

391 #i‡
TEMP_SENSOR_2
 != 0

392 
	`MENU_ITEM_EDIT
(
öt3
, 
MSG_NOZZLE2
, &
èrgë_ãm≥øtuª
[2], 0, 
HEATER_2_MAXTEMP
 - 15);

394 #i‡
TEMP_SENSOR_BED
 != 0

395 
	`MENU_ITEM_EDIT
(
öt3
, 
MSG_BED
, &
èrgë_ãm≥øtuª_bed
, 0, 
BED_MAXTEMP
 - 15);

397 
	`MENU_ITEM_EDIT
(
öt3
, 
MSG_FAN_SPEED
, &
ÁnS≥ed
, 0, 255);

398 
	`MENU_ITEM_EDIT
(
öt3
, 
MSG_FLOW
, &
exåudemu…ùly
, 10, 999);

399 
	`MENU_ITEM_EDIT
(
öt3
, 
MSG_FLOW0
, &
exåudî_mu…ùly
[0], 10, 999);

400 #i‡
TEMP_SENSOR_1
 != 0

401 
	`MENU_ITEM_EDIT
(
öt3
, 
MSG_FLOW1
, &
exåudî_mu…ùly
[1], 10, 999);

403 #i‡
TEMP_SENSOR_2
 != 0

404 
	`MENU_ITEM_EDIT
(
öt3
, 
MSG_FLOW2
, &
exåudî_mu…ùly
[2], 10, 999);

407 #ifde‡
BABYSTEPPING


408 #ifde‡
BABYSTEP_XY


409 
	`MENU_ITEM
(
submíu
, 
MSG_BABYSTEP_X
, 
lcd_baby°ï_x
);

410 
	`MENU_ITEM
(
submíu
, 
MSG_BABYSTEP_Y
, 
lcd_baby°ï_y
);

412 
	`MENU_ITEM
(
submíu
, 
MSG_BABYSTEP_Z
, 
lcd_baby°ï_z
);

414 #ifde‡
FILAMENTCHANGEENABLE


415 
	`MENU_ITEM
(
gcode
, 
MSG_FILAMENTCHANGE
, 
	`PSTR
("M600"));

417 
	`END_MENU
();

418 
	}
}

420 
	$lcd_¥ehót_∂a0
()

422 
	`£tT¨gëHŸíd0
(
∂aPªhótHŸídTemp
);

423 
	`£tT¨gëBed
(
∂aPªhótHPBTemp
);

424 
ÁnS≥ed
 = 
∂aPªhótF™S≥ed
;

425 
	`lcd_ªtu∫_to_°©us
();

426 
	`£tW©ch
();

427 
	}
}

429 
	$lcd_¥ehót_abs0
()

431 
	`£tT¨gëHŸíd0
(
absPªhótHŸídTemp
);

432 
	`£tT¨gëBed
(
absPªhótHPBTemp
);

433 
ÁnS≥ed
 = 
absPªhótF™S≥ed
;

434 
	`lcd_ªtu∫_to_°©us
();

435 
	`£tW©ch
();

436 
	}
}

438 #i‡
TEMP_SENSOR_1
 != 0

439 
	$lcd_¥ehót_∂a1
()

441 
	`£tT¨gëHŸíd1
(
∂aPªhótHŸídTemp
);

442 
	`£tT¨gëBed
(
∂aPªhótHPBTemp
);

443 
ÁnS≥ed
 = 
∂aPªhótF™S≥ed
;

444 
	`lcd_ªtu∫_to_°©us
();

445 
	`£tW©ch
();

446 
	}
}

448 
	$lcd_¥ehót_abs1
()

450 
	`£tT¨gëHŸíd1
(
absPªhótHŸídTemp
);

451 
	`£tT¨gëBed
(
absPªhótHPBTemp
);

452 
ÁnS≥ed
 = 
absPªhótF™S≥ed
;

453 
	`lcd_ªtu∫_to_°©us
();

454 
	`£tW©ch
();

455 
	}
}

458 #i‡
TEMP_SENSOR_2
 != 0

459 
	$lcd_¥ehót_∂a2
()

461 
	`£tT¨gëHŸíd2
(
∂aPªhótHŸídTemp
);

462 
	`£tT¨gëBed
(
∂aPªhótHPBTemp
);

463 
ÁnS≥ed
 = 
∂aPªhótF™S≥ed
;

464 
	`lcd_ªtu∫_to_°©us
();

465 
	`£tW©ch
();

466 
	}
}

468 
	$lcd_¥ehót_abs2
()

470 
	`£tT¨gëHŸíd2
(
absPªhótHŸídTemp
);

471 
	`£tT¨gëBed
(
absPªhótHPBTemp
);

472 
ÁnS≥ed
 = 
absPªhótF™S≥ed
;

473 
	`lcd_ªtu∫_to_°©us
();

474 
	`£tW©ch
();

475 
	}
}

478 #i‡
TEMP_SENSOR_1
 !0 || 
TEMP_SENSOR_2
 != 0

479 
	$lcd_¥ehót_∂a012
()

481 
	`£tT¨gëHŸíd0
(
∂aPªhótHŸídTemp
);

482 
	`£tT¨gëHŸíd1
(
∂aPªhótHŸídTemp
);

483 
	`£tT¨gëHŸíd2
(
∂aPªhótHŸídTemp
);

484 
	`£tT¨gëBed
(
∂aPªhótHPBTemp
);

485 
ÁnS≥ed
 = 
∂aPªhótF™S≥ed
;

486 
	`lcd_ªtu∫_to_°©us
();

487 
	`£tW©ch
();

488 
	}
}

490 
	$lcd_¥ehót_abs012
()

492 
	`£tT¨gëHŸíd0
(
absPªhótHŸídTemp
);

493 
	`£tT¨gëHŸíd1
(
absPªhótHŸídTemp
);

494 
	`£tT¨gëHŸíd2
(
absPªhótHŸídTemp
);

495 
	`£tT¨gëBed
(
absPªhótHPBTemp
);

496 
ÁnS≥ed
 = 
absPªhótF™S≥ed
;

497 
	`lcd_ªtu∫_to_°©us
();

498 
	`£tW©ch
();

499 
	}
}

502 
	$lcd_¥ehót_∂a_bed⁄ly
()

504 
	`£tT¨gëBed
(
∂aPªhótHPBTemp
);

505 
ÁnS≥ed
 = 
∂aPªhótF™S≥ed
;

506 
	`lcd_ªtu∫_to_°©us
();

507 
	`£tW©ch
();

508 
	}
}

510 
	$lcd_¥ehót_abs_bed⁄ly
()

512 
	`£tT¨gëBed
(
absPªhótHPBTemp
);

513 
ÁnS≥ed
 = 
absPªhótF™S≥ed
;

514 
	`lcd_ªtu∫_to_°©us
();

515 
	`£tW©ch
();

516 
	}
}

518 
	$lcd_¥ehót_∂a_míu
()

520 
	`START_MENU
();

521 
	`MENU_ITEM
(
back
, 
MSG_PREPARE
, 
lcd_¥ï¨e_míu
);

522 
	`MENU_ITEM
(
fun˘i⁄
, 
MSG_PREHEAT_PLA0
, 
lcd_¥ehót_∂a0
);

523 #i‡
TEMP_SENSOR_1
 != 0

524 
	`MENU_ITEM
(
fun˘i⁄
, 
MSG_PREHEAT_PLA1
, 
lcd_¥ehót_∂a1
);

526 #i‡
TEMP_SENSOR_2
 != 0

527 
	`MENU_ITEM
(
fun˘i⁄
, 
MSG_PREHEAT_PLA2
, 
lcd_¥ehót_∂a2
);

529 #i‡
TEMP_SENSOR_1
 !0 || 
TEMP_SENSOR_2
 != 0

530 
	`MENU_ITEM
(
fun˘i⁄
, 
MSG_PREHEAT_PLA012
, 
lcd_¥ehót_∂a012
);

532 #i‡
TEMP_SENSOR_BED
 != 0

533 
	`MENU_ITEM
(
fun˘i⁄
, 
MSG_PREHEAT_PLA_BEDONLY
, 
lcd_¥ehót_∂a_bed⁄ly
);

535 
	`END_MENU
();

536 
	}
}

538 
	$lcd_¥ehót_abs_míu
()

540 
	`START_MENU
();

541 
	`MENU_ITEM
(
back
, 
MSG_PREPARE
, 
lcd_¥ï¨e_míu
);

542 
	`MENU_ITEM
(
fun˘i⁄
, 
MSG_PREHEAT_ABS0
, 
lcd_¥ehót_abs0
);

543 #i‡
TEMP_SENSOR_1
 != 0

544 
	`MENU_ITEM
(
fun˘i⁄
, 
MSG_PREHEAT_ABS1
, 
lcd_¥ehót_abs1
);

546 #i‡
TEMP_SENSOR_2
 != 0

547 
	`MENU_ITEM
(
fun˘i⁄
, 
MSG_PREHEAT_ABS2
, 
lcd_¥ehót_abs2
);

549 #i‡
TEMP_SENSOR_1
 !0 || 
TEMP_SENSOR_2
 != 0

550 
	`MENU_ITEM
(
fun˘i⁄
, 
MSG_PREHEAT_ABS012
, 
lcd_¥ehót_abs012
);

552 #i‡
TEMP_SENSOR_BED
 != 0

553 
	`MENU_ITEM
(
fun˘i⁄
, 
MSG_PREHEAT_ABS_BEDONLY
, 
lcd_¥ehót_abs_bed⁄ly
);

555 
	`END_MENU
();

556 
	}
}

558 
	$lcd_coﬁdown
()

560 
	`£tT¨gëHŸíd0
(0);

561 
	`£tT¨gëHŸíd1
(0);

562 
	`£tT¨gëHŸíd2
(0);

563 
	`£tT¨gëBed
(0);

564 
ÁnS≥ed
 = 0;

565 
	`lcd_ªtu∫_to_°©us
();

566 
	}
}

568 
	$lcd_¥ï¨e_míu
()

570 
	`START_MENU
();

571 
	`MENU_ITEM
(
back
, 
MSG_MAIN
, 
lcd_maö_míu
);

572 #ifde‡
SDSUPPORT


573 #ifde‡
MENU_ADDAUTOSTART


574 
	`MENU_ITEM
(
fun˘i⁄
, 
MSG_AUTOSTART
, 
lcd_auto°¨t_sd
);

577 
	`MENU_ITEM
(
gcode
, 
MSG_DISABLE_STEPPERS
, 
	`PSTR
("M84"));

578 
	`MENU_ITEM
(
gcode
, 
MSG_AUTO_HOME
, 
	`PSTR
("G28"));

579 
	`MENU_ITEM
(
fun˘i⁄
, 
MSG_SET_HOME_OFFSETS
, 
lcd_£t_home_off£ts
);

581 #i‡
TEMP_SENSOR_0
 != 0

582 #i‡
TEMP_SENSOR_1
 !0 || 
TEMP_SENSOR_2
 !0 || 
TEMP_SENSOR_BED
 != 0

583 
	`MENU_ITEM
(
submíu
, 
MSG_PREHEAT_PLA
, 
lcd_¥ehót_∂a_míu
);

584 
	`MENU_ITEM
(
submíu
, 
MSG_PREHEAT_ABS
, 
lcd_¥ehót_abs_míu
);

586 
	`MENU_ITEM
(
fun˘i⁄
, 
MSG_PREHEAT_PLA
, 
lcd_¥ehót_∂a0
);

587 
	`MENU_ITEM
(
fun˘i⁄
, 
MSG_PREHEAT_ABS
, 
lcd_¥ehót_abs0
);

590 
	`MENU_ITEM
(
fun˘i⁄
, 
MSG_COOLDOWN
, 
lcd_coﬁdown
);

591 #i‡
PS_ON_PIN
 > -1

592 i‡(
powîsuµly
)

594 
	`MENU_ITEM
(
gcode
, 
MSG_SWITCH_PS_OFF
, 
	`PSTR
("M81"));

596 
	`MENU_ITEM
(
gcode
, 
MSG_SWITCH_PS_ON
, 
	`PSTR
("M80"));

599 
	`MENU_ITEM
(
submíu
, 
MSG_MOVE_AXIS
, 
lcd_move_míu
);

600 
	`END_MENU
();

601 
	}
}

603 
	gmove_míu_sˇÀ
;

604 
lcd_move_míu_axis
();

606 
	$_lcd_move
(c⁄° *
«me
, 
axis
, 
mö
, 
max
) {

607 i‡(
ícodîPosôi⁄
 != 0) {

608 
	`ª‰esh_cmd_timeout
();

609 
cuºít_posôi⁄
[
axis
] +(()
ícodîPosôi⁄
Ë* 
move_míu_sˇÀ
;

610 i‡(
mö_so·w¨e_íd°›s
 && 
cuºít_posôi⁄
[
axis
] < 
mö
) current_position[axis] = min;

611 i‡(
max_so·w¨e_íd°›s
 && 
cuºít_posôi⁄
[
axis
] > 
max
) current_position[axis] = max;

612 
ícodîPosôi⁄
 = 0;

613 #ifde‡
DELTA


614 
	`ˇlcuœã_dñè
(
cuºít_posôi⁄
);

615 
	`∂™_buf„r_löe
(
dñè
[
X_AXIS
], dñè[
Y_AXIS
], dñè[
Z_AXIS
], 
cuºít_posôi⁄
[
E_AXIS
], 
m™uÆ_„edøã
[
axis
]/60, 
a˘ive_exåudî
);

617 
	`∂™_buf„r_löe
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
], cuºít_posôi⁄[
E_AXIS
], 
m™uÆ_„edøã
[
axis
]/60, 
a˘ive_exåudî
);

619 
lcdDøwUpd©e
 = 1;

621 i‡(
lcdDøwUpd©e
Ë
	`lcd_im∂emíèti⁄_døwedô
(
«me
, 
	`·o°r31
(
cuºít_posôi⁄
[
axis
]));

622 i‡(
LCD_CLICKED
Ë
	`lcd_gŸo_míu
(
lcd_move_míu_axis
);

623 
	}
}

624 
	$lcd_move_x
(Ë{ 
	`_lcd_move
(
	`PSTR
("X"), 
X_AXIS
, 
X_MIN_POS
, 
X_MAX_POS
); 
	}
}

625 
	$lcd_move_y
(Ë{ 
	`_lcd_move
(
	`PSTR
("Y"), 
Y_AXIS
, 
Y_MIN_POS
, 
Y_MAX_POS
); 
	}
}

626 
	$lcd_move_z
(Ë{ 
	`_lcd_move
(
	`PSTR
("Z"), 
Z_AXIS
, 
Z_MIN_POS
, 
Z_MAX_POS
); 
	}
}

628 
	$lcd_move_e
()

630 i‡(
ícodîPosôi⁄
 != 0)

632 
cuºít_posôi⁄
[
E_AXIS
] +(()
ícodîPosôi⁄
Ë* 
move_míu_sˇÀ
;

633 
ícodîPosôi⁄
 = 0;

634 #ifde‡
DELTA


635 
	`ˇlcuœã_dñè
(
cuºít_posôi⁄
);

636 
	`∂™_buf„r_löe
(
dñè
[
X_AXIS
], dñè[
Y_AXIS
], dñè[
Z_AXIS
], 
cuºít_posôi⁄
[
E_AXIS
], 
m™uÆ_„edøã
[E_AXIS]/60, 
a˘ive_exåudî
);

638 
	`∂™_buf„r_löe
(
cuºít_posôi⁄
[
X_AXIS
], cuºít_posôi⁄[
Y_AXIS
], cuºít_posôi⁄[
Z_AXIS
], cuºít_posôi⁄[
E_AXIS
], 
m™uÆ_„edøã
[E_AXIS]/60, 
a˘ive_exåudî
);

640 
lcdDøwUpd©e
 = 1;

642 i‡(
lcdDøwUpd©e
)

644 
	`lcd_im∂emíèti⁄_døwedô
(
	`PSTR
("Exåudî"), 
	`·o°r31
(
cuºít_posôi⁄
[
E_AXIS
]));

646 i‡(
LCD_CLICKED
Ë
	`lcd_gŸo_míu
(
lcd_move_míu_axis
);

647 
	}
}

649 
	$lcd_move_míu_axis
()

651 
	`START_MENU
();

652 
	`MENU_ITEM
(
back
, 
MSG_MOVE_AXIS
, 
lcd_move_míu
);

653 
	`MENU_ITEM
(
submíu
, 
MSG_MOVE_X
, 
lcd_move_x
);

654 
	`MENU_ITEM
(
submíu
, 
MSG_MOVE_Y
, 
lcd_move_y
);

655 i‡(
move_míu_sˇÀ
 < 10.0)

657 
	`MENU_ITEM
(
submíu
, 
MSG_MOVE_Z
, 
lcd_move_z
);

658 
	`MENU_ITEM
(
submíu
, 
MSG_MOVE_E
, 
lcd_move_e
);

660 
	`END_MENU
();

661 
	}
}

663 
	$lcd_move_míu_10mm
()

665 
move_míu_sˇÀ
 = 10.0;

666 
	`lcd_move_míu_axis
();

667 
	}
}

668 
	$lcd_move_míu_1mm
()

670 
move_míu_sˇÀ
 = 1.0;

671 
	`lcd_move_míu_axis
();

672 
	}
}

673 
	$lcd_move_míu_01mm
()

675 
move_míu_sˇÀ
 = 0.1;

676 
	`lcd_move_míu_axis
();

677 
	}
}

679 
	$lcd_move_míu
()

681 
	`START_MENU
();

682 
	`MENU_ITEM
(
back
, 
MSG_PREPARE
, 
lcd_¥ï¨e_míu
);

683 
	`MENU_ITEM
(
submíu
, 
MSG_MOVE_10MM
, 
lcd_move_míu_10mm
);

684 
	`MENU_ITEM
(
submíu
, 
MSG_MOVE_1MM
, 
lcd_move_míu_1mm
);

685 
	`MENU_ITEM
(
submíu
, 
MSG_MOVE_01MM
, 
lcd_move_míu_01mm
);

687 
	`END_MENU
();

688 
	}
}

690 
	$lcd_c⁄åﬁ_míu
()

692 
	`START_MENU
();

693 
	`MENU_ITEM
(
back
, 
MSG_MAIN
, 
lcd_maö_míu
);

694 
	`MENU_ITEM
(
submíu
, 
MSG_TEMPERATURE
, 
lcd_c⁄åﬁ_ãm≥øtuª_míu
);

695 
	`MENU_ITEM
(
submíu
, 
MSG_MOTION
, 
lcd_c⁄åﬁ_mŸi⁄_míu
);

696 #ifde‡
DOGLCD


698 
	`MENU_ITEM
(
submíu
, 
MSG_CONTRAST
, 
lcd_£t_c⁄åa°
);

700 #ifde‡
FWRETRACT


701 
	`MENU_ITEM
(
submíu
, 
MSG_RETRACT
, 
lcd_c⁄åﬁ_ªåa˘_míu
);

703 #ifde‡
EEPROM_SETTINGS


704 
	`MENU_ITEM
(
fun˘i⁄
, 
MSG_STORE_EPROM
, 
C⁄fig_St‹eSëtögs
);

705 
	`MENU_ITEM
(
fun˘i⁄
, 
MSG_LOAD_EPROM
, 
C⁄fig_RërõveSëtögs
);

707 
	`MENU_ITEM
(
fun˘i⁄
, 
MSG_RESTORE_FAILSAFE
, 
C⁄fig_Re£tDeÁu…
);

708 
	`END_MENU
();

709 
	}
}

711 
	$lcd_c⁄åﬁ_ãm≥øtuª_míu
()

713 #ifde‡
PIDTEMP


715 
øw_Ki
 = 
	`unsˇÀPID_i
(
Ki
);

716 
øw_Kd
 = 
	`unsˇÀPID_d
(
Kd
);

719 
	`START_MENU
();

720 
	`MENU_ITEM
(
back
, 
MSG_CONTROL
, 
lcd_c⁄åﬁ_míu
);

721 #i‡
TEMP_SENSOR_0
 != 0

722 
	`MENU_ITEM_EDIT
(
öt3
, 
MSG_NOZZLE
, &
èrgë_ãm≥øtuª
[0], 0, 
HEATER_0_MAXTEMP
 - 15);

724 #i‡
TEMP_SENSOR_1
 != 0

725 
	`MENU_ITEM_EDIT
(
öt3
, 
MSG_NOZZLE1
, &
èrgë_ãm≥øtuª
[1], 0, 
HEATER_1_MAXTEMP
 - 15);

727 #i‡
TEMP_SENSOR_2
 != 0

728 
	`MENU_ITEM_EDIT
(
öt3
, 
MSG_NOZZLE2
, &
èrgë_ãm≥øtuª
[2], 0, 
HEATER_2_MAXTEMP
 - 15);

730 #i‡
TEMP_SENSOR_BED
 != 0

731 
	`MENU_ITEM_EDIT
(
öt3
, 
MSG_BED
, &
èrgë_ãm≥øtuª_bed
, 0, 
BED_MAXTEMP
 - 15);

733 
	`MENU_ITEM_EDIT
(
öt3
, 
MSG_FAN_SPEED
, &
ÁnS≥ed
, 0, 255);

734 #i‡
deföed
 
AUTOTEMP
 && (
TEMP_SENSOR_0
 != 0)

735 
	`MENU_ITEM_EDIT
(
boﬁ
, 
MSG_AUTOTEMP
, &
autŸemp_íabÀd
);

736 
	`MENU_ITEM_EDIT
(
Êﬂt3
, 
MSG_MIN
, &
autŸemp_mö
, 0, 
HEATER_0_MAXTEMP
 - 15);

737 
	`MENU_ITEM_EDIT
(
Êﬂt3
, 
MSG_MAX
, &
autŸemp_max
, 0, 
HEATER_0_MAXTEMP
 - 15);

738 
	`MENU_ITEM_EDIT
(
Êﬂt32
, 
MSG_FACTOR
, &
autŸemp_Á˘‹
, 0.0, 1.0);

740 #ifde‡
PIDTEMP


741 
	`MENU_ITEM_EDIT
(
Êﬂt52
, 
MSG_PID_P
, &
Kp
, 1, 9990);

743 
	`MENU_ITEM_EDIT_CALLBACK
(
Êﬂt52
, 
MSG_PID_I
, &
øw_Ki
, 0.01, 9990, 
c›y_™d_sˇÀPID_i
);

744 
	`MENU_ITEM_EDIT_CALLBACK
(
Êﬂt52
, 
MSG_PID_D
, &
øw_Kd
, 1, 9990, 
c›y_™d_sˇÀPID_d
);

745 #ifde‡
PID_ADD_EXTRUSION_RATE


746 
	`MENU_ITEM_EDIT
(
Êﬂt3
, 
MSG_PID_C
, &
Kc
, 1, 9990);

749 
	`MENU_ITEM
(
submíu
, 
MSG_PREHEAT_PLA_SETTINGS
, 
lcd_c⁄åﬁ_ãm≥øtuª_¥ehót_∂a_£âögs_míu
);

750 
	`MENU_ITEM
(
submíu
, 
MSG_PREHEAT_ABS_SETTINGS
, 
lcd_c⁄åﬁ_ãm≥øtuª_¥ehót_abs_£âögs_míu
);

751 
	`END_MENU
();

752 
	}
}

754 
	$lcd_c⁄åﬁ_ãm≥øtuª_¥ehót_∂a_£âögs_míu
()

756 
	`START_MENU
();

757 
	`MENU_ITEM
(
back
, 
MSG_TEMPERATURE
, 
lcd_c⁄åﬁ_ãm≥øtuª_míu
);

758 
	`MENU_ITEM_EDIT
(
öt3
, 
MSG_FAN_SPEED
, &
∂aPªhótF™S≥ed
, 0, 255);

759 #i‡
TEMP_SENSOR_0
 != 0

760 
	`MENU_ITEM_EDIT
(
öt3
, 
MSG_NOZZLE
, &
∂aPªhótHŸídTemp
, 0, 
HEATER_0_MAXTEMP
 - 15);

762 #i‡
TEMP_SENSOR_BED
 != 0

763 
	`MENU_ITEM_EDIT
(
öt3
, 
MSG_BED
, &
∂aPªhótHPBTemp
, 0, 
BED_MAXTEMP
 - 15);

765 #ifde‡
EEPROM_SETTINGS


766 
	`MENU_ITEM
(
fun˘i⁄
, 
MSG_STORE_EPROM
, 
C⁄fig_St‹eSëtögs
);

768 
	`END_MENU
();

769 
	}
}

771 
	$lcd_c⁄åﬁ_ãm≥øtuª_¥ehót_abs_£âögs_míu
()

773 
	`START_MENU
();

774 
	`MENU_ITEM
(
back
, 
MSG_TEMPERATURE
, 
lcd_c⁄åﬁ_ãm≥øtuª_míu
);

775 
	`MENU_ITEM_EDIT
(
öt3
, 
MSG_FAN_SPEED
, &
absPªhótF™S≥ed
, 0, 255);

776 #i‡
TEMP_SENSOR_0
 != 0

777 
	`MENU_ITEM_EDIT
(
öt3
, 
MSG_NOZZLE
, &
absPªhótHŸídTemp
, 0, 
HEATER_0_MAXTEMP
 - 15);

779 #i‡
TEMP_SENSOR_BED
 != 0

780 
	`MENU_ITEM_EDIT
(
öt3
, 
MSG_BED
, &
absPªhótHPBTemp
, 0, 
BED_MAXTEMP
 - 15);

782 #ifde‡
EEPROM_SETTINGS


783 
	`MENU_ITEM
(
fun˘i⁄
, 
MSG_STORE_EPROM
, 
C⁄fig_St‹eSëtögs
);

785 
	`END_MENU
();

786 
	}
}

788 
	$lcd_c⁄åﬁ_mŸi⁄_míu
()

790 
	`START_MENU
();

791 
	`MENU_ITEM
(
back
, 
MSG_CONTROL
, 
lcd_c⁄åﬁ_míu
);

792 #ifde‡
ENABLE_AUTO_BED_LEVELING


793 
	`MENU_ITEM_EDIT
(
Êﬂt32
, 
MSG_ZPROBE_ZOFFSET
, &
z¥obe_zoff£t
, 0.5, 50);

795 
	`MENU_ITEM_EDIT
(
Êﬂt5
, 
MSG_ACC
, &
ac˚Àøti⁄
, 500, 99000);

796 
	`MENU_ITEM_EDIT
(
Êﬂt3
, 
MSG_VXY_JERK
, &
max_xy_jîk
, 1, 990);

797 
	`MENU_ITEM_EDIT
(
Êﬂt52
, 
MSG_VZ_JERK
, &
max_z_jîk
, 0.1, 990);

798 
	`MENU_ITEM_EDIT
(
Êﬂt3
, 
MSG_VE_JERK
, &
max_e_jîk
, 1, 990);

799 
	`MENU_ITEM_EDIT
(
Êﬂt3
, 
MSG_VMAX
 
MSG_X
, &
max_„edøã
[
X_AXIS
], 1, 999);

800 
	`MENU_ITEM_EDIT
(
Êﬂt3
, 
MSG_VMAX
 
MSG_Y
, &
max_„edøã
[
Y_AXIS
], 1, 999);

801 
	`MENU_ITEM_EDIT
(
Êﬂt3
, 
MSG_VMAX
 
MSG_Z
, &
max_„edøã
[
Z_AXIS
], 1, 999);

802 
	`MENU_ITEM_EDIT
(
Êﬂt3
, 
MSG_VMAX
 
MSG_E
, &
max_„edøã
[
E_AXIS
], 1, 999);

803 
	`MENU_ITEM_EDIT
(
Êﬂt3
, 
MSG_VMIN
, &
möimum„edøã
, 0, 999);

804 
	`MENU_ITEM_EDIT
(
Êﬂt3
, 
MSG_VTRAV_MIN
, &
möåavñ„edøã
, 0, 999);

805 
	`MENU_ITEM_EDIT_CALLBACK
(
l⁄g5
, 
MSG_AMAX
 
MSG_X
, &
max_ac˚Àøti⁄_unôs_≥r_sq_£c⁄d
[
X_AXIS
], 100, 99000, 
ª£t_ac˚Àøti⁄_øãs
);

806 
	`MENU_ITEM_EDIT_CALLBACK
(
l⁄g5
, 
MSG_AMAX
 
MSG_Y
, &
max_ac˚Àøti⁄_unôs_≥r_sq_£c⁄d
[
Y_AXIS
], 100, 99000, 
ª£t_ac˚Àøti⁄_øãs
);

807 
	`MENU_ITEM_EDIT_CALLBACK
(
l⁄g5
, 
MSG_AMAX
 
MSG_Z
, &
max_ac˚Àøti⁄_unôs_≥r_sq_£c⁄d
[
Z_AXIS
], 100, 99000, 
ª£t_ac˚Àøti⁄_øãs
);

808 
	`MENU_ITEM_EDIT_CALLBACK
(
l⁄g5
, 
MSG_AMAX
 
MSG_E
, &
max_ac˚Àøti⁄_unôs_≥r_sq_£c⁄d
[
E_AXIS
], 100, 99000, 
ª£t_ac˚Àøti⁄_øãs
);

809 
	`MENU_ITEM_EDIT
(
Êﬂt5
, 
MSG_A_RETRACT
, &
ªåa˘_ac˚Àøti⁄
, 100, 99000);

810 
	`MENU_ITEM_EDIT
(
Êﬂt52
, 
MSG_XSTEPS
, &
axis_°ïs_≥r_unô
[
X_AXIS
], 5, 9999);

811 
	`MENU_ITEM_EDIT
(
Êﬂt52
, 
MSG_YSTEPS
, &
axis_°ïs_≥r_unô
[
Y_AXIS
], 5, 9999);

812 
	`MENU_ITEM_EDIT
(
Êﬂt51
, 
MSG_ZSTEPS
, &
axis_°ïs_≥r_unô
[
Z_AXIS
], 5, 9999);

813 
	`MENU_ITEM_EDIT
(
Êﬂt51
, 
MSG_ESTEPS
, &
axis_°ïs_≥r_unô
[
E_AXIS
], 5, 9999);

814 #ifde‡
ABORT_ON_ENDSTOP_HIT_FEATURE_ENABLED


815 
	`MENU_ITEM_EDIT
(
boﬁ
, 
MSG_ENDSTOP_ABORT
, &
ab‹t_⁄_íd°›_hô
);

817 #ifde‡
SCARA


818 
	`MENU_ITEM_EDIT
(
Êﬂt74
, 
MSG_XSCALE
, &
axis_sˇlög
[
X_AXIS
],0.5,2);

819 
	`MENU_ITEM_EDIT
(
Êﬂt74
, 
MSG_YSCALE
, &
axis_sˇlög
[
Y_AXIS
],0.5,2);

821 
	`END_MENU
();

822 
	}
}

824 #ifde‡
DOGLCD


825 
	$lcd_£t_c⁄åa°
()

827 i‡(
ícodîPosôi⁄
 != 0)

829 
lcd_c⁄åa°
 -
ícodîPosôi⁄
;

830 i‡(
lcd_c⁄åa°
 < 0)Ücd_contrast = 0;

831 i‡(
lcd_c⁄åa°
 > 63)Ücd_contrast = 63;

832 
ícodîPosôi⁄
 = 0;

833 
lcdDøwUpd©e
 = 1;

834 
u8g
.
	`£tC⁄åa°
(
lcd_c⁄åa°
);

836 i‡(
lcdDøwUpd©e
)

838 
	`lcd_im∂emíèti⁄_døwedô
(
	`PSTR
(
MSG_CONTRAST
), 
	`ôo°r2
(
lcd_c⁄åa°
));

840 i‡(
LCD_CLICKED
Ë
	`lcd_gŸo_míu
(
lcd_c⁄åﬁ_míu
);

841 
	}
}

844 #ifde‡
FWRETRACT


845 
	$lcd_c⁄åﬁ_ªåa˘_míu
()

847 
	`START_MENU
();

848 
	`MENU_ITEM
(
back
, 
MSG_CONTROL
, 
lcd_c⁄åﬁ_míu
);

849 
	`MENU_ITEM_EDIT
(
boﬁ
, 
MSG_AUTORETRACT
, &
aut‹ëø˘_íabÀd
);

850 
	`MENU_ITEM_EDIT
(
Êﬂt52
, 
MSG_CONTROL_RETRACT
, &
ªåa˘_Àngth
, 0, 100);

851 #i‡
EXTRUDERS
 > 1

852 
	`MENU_ITEM_EDIT
(
Êﬂt52
, 
MSG_CONTROL_RETRACT_SWAP
, &
ªåa˘_Àngth_sw≠
, 0, 100);

854 
	`MENU_ITEM_EDIT
(
Êﬂt3
, 
MSG_CONTROL_RETRACTF
, &
ªåa˘_„edøã
, 1, 999);

855 
	`MENU_ITEM_EDIT
(
Êﬂt52
, 
MSG_CONTROL_RETRACT_ZLIFT
, &
ªåa˘_zli·
, 0, 999);

856 
	`MENU_ITEM_EDIT
(
Êﬂt52
, 
MSG_CONTROL_RETRACT_RECOVER
, &
ªåa˘_ªcovî_Àngth
, 0, 100);

857 #i‡
EXTRUDERS
 > 1

858 
	`MENU_ITEM_EDIT
(
Êﬂt52
, 
MSG_CONTROL_RETRACT_RECOVER_SWAP
, &
ªåa˘_ªcovî_Àngth_sw≠
, 0, 100);

860 
	`MENU_ITEM_EDIT
(
Êﬂt3
, 
MSG_CONTROL_RETRACT_RECOVERF
, &
ªåa˘_ªcovî_„edøã
, 1, 999);

861 
	`END_MENU
();

862 
	}
}

866 #i‡
SDCARDDETECT
 == -1

867 
	$lcd_sd_ª‰esh
()

869 
ˇrd
.
	`öôsd
();

870 
cuºítMíuVõwOff£t
 = 0;

871 
	}
}

873 
	$lcd_sd_updú
()

875 
ˇrd
.
	`updú
();

876 
cuºítMíuVõwOff£t
 = 0;

877 
	}
}

879 
	$lcd_sdˇrd_míu
()

881 i‡(
lcdDøwUpd©e
 =0 && 
LCD_CLICKED
 == 0)

883 
uöt16_t
 
fûeC¡
 = 
ˇrd
.
	`gëƒfûíames
();

884 
	`START_MENU
();

885 
	`MENU_ITEM
(
back
, 
MSG_MAIN
, 
lcd_maö_míu
);

886 
ˇrd
.
	`gëW‹kDúName
();

887 if(
ˇrd
.
fûíame
[0]=='/')

889 #i‡
SDCARDDETECT
 == -1

890 
	`MENU_ITEM
(
fun˘i⁄
, 
LCD_STR_REFRESH
 
MSG_REFRESH
, 
lcd_sd_ª‰esh
);

893 
	`MENU_ITEM
(
fun˘i⁄
, 
LCD_STR_FOLDER
 "..", 
lcd_sd_updú
);

896 
uöt16_t
 
i
=0;i<
fûeC¡
;i++)

898 i‡(
_míuIãmNr
 =
_löeNr
)

900 #i‚de‡
SDCARD_RATHERRECENTFIRST


901 
ˇrd
.
	`gëfûíame
(
i
);

903 
ˇrd
.
	`gëfûíame
(
fûeC¡
-1-
i
);

905 i‡(
ˇrd
.
fûíameIsDú
)

907 
	`MENU_ITEM
(
sddúe˘‹y
, 
MSG_CARD_MENU
, 
ˇrd
.
fûíame
, c¨d.
l⁄gFûíame
);

909 
	`MENU_ITEM
(
sdfûe
, 
MSG_CARD_MENU
, 
ˇrd
.
fûíame
, c¨d.
l⁄gFûíame
);

912 
	`MENU_ITEM_DUMMY
();

915 
	`END_MENU
();

916 
	}
}

918 
	#míu_edô_ty≥
(
_ty≥
, 
_«me
, 
_°rFunc
, 
sˇÀ
) \

919 
míu_edô_
 ## 
	`_«me
 () \

921 i‡((
öt32_t
)
ícodîPosôi⁄
 < 0) \

922 
ícodîPosôi⁄
 = 0; \

923 i‡((
öt32_t
)
ícodîPosôi⁄
 > 
maxEdôVÆue
) \

924 
ícodîPosôi⁄
 = 
maxEdôVÆue
; \

925 i‡(
lcdDøwUpd©e
) \

926 
	`lcd_im∂emíèti⁄_døwedô
(
edôLabñ
, 
	`_°rFunc
(((
_ty≥
)((
öt32_t
)
ícodîPosôi⁄
 + 
möEdôVÆue
)Ë/ 
sˇÀ
)); \

927 i‡(
LCD_CLICKED
) \

929 *((
_ty≥
*)
edôVÆue
Ë((_ty≥)((
öt32_t
)
ícodîPosôi⁄
 + 
möEdôVÆue
)Ë/ 
sˇÀ
; \

930 
	`lcd_gŸo_míu
(
¥evMíu
, 
¥evEncodîPosôi⁄
); \

933 
míu_edô_ˇŒback_
 ## 
	`_«me
 () { \

934 
míu_edô_
 ## 
	`_«me
 (); \

935 i‡(
LCD_CLICKED
Ë(*
ˇŒbackFunc
)(); \

937 
míu_a˘i⁄_£âög_edô_
 ## 
	`_«me
 (c⁄° * 
p°r
, 
_ty≥
* 
±r
, _ty≥ 
möVÆue
, _ty≥ 
maxVÆue
) \

939 
¥evMíu
 = 
cuºítMíu
; \

940 
¥evEncodîPosôi⁄
 = 
ícodîPosôi⁄
; \

942 
lcdDøwUpd©e
 = 2; \

943 
cuºítMíu
 = 
míu_edô_
 ## 
_«me
; \

945 
edôLabñ
 = 
p°r
; \

946 
edôVÆue
 = 
±r
; \

947 
möEdôVÆue
 = 
möVÆue
 * 
sˇÀ
; \

948 
maxEdôVÆue
 = 
maxVÆue
 * 
sˇÀ
 - 
möEdôVÆue
; \

949 
ícodîPosôi⁄
 = (*
±r
Ë* 
sˇÀ
 - 
möEdôVÆue
; \

951 
míu_a˘i⁄_£âög_edô_ˇŒback_
 ## 
	`_«me
 (c⁄° * 
p°r
, 
_ty≥
* 
±r
, _ty≥ 
möVÆue
, _ty≥ 
maxVÆue
, 
míuFunc_t
 
ˇŒback
) \

953 
¥evMíu
 = 
cuºítMíu
; \

954 
¥evEncodîPosôi⁄
 = 
ícodîPosôi⁄
; \

956 
lcdDøwUpd©e
 = 2; \

957 
cuºítMíu
 = 
míu_edô_ˇŒback_
 ## 
_«me
; \

959 
edôLabñ
 = 
p°r
; \

960 
edôVÆue
 = 
±r
; \

961 
möEdôVÆue
 = 
möVÆue
 * 
sˇÀ
; \

962 
maxEdôVÆue
 = 
maxVÆue
 * 
sˇÀ
 - 
möEdôVÆue
; \

963 
ícodîPosôi⁄
 = (*
±r
Ë* 
sˇÀ
 - 
möEdôVÆue
; \

964 
ˇŒbackFunc
 = 
ˇŒback
;\

965 }

	)

966 
	$míu_edô_ty≥
(, 
öt3
, 
ôo°r3
, 1)

967 
	$míu_edô_ty≥
(, 
Êﬂt3
, 
·o°r3
, 1)

968 
	$míu_edô_ty≥
(, 
Êﬂt32
, 
·o°r32
, 100)

969 
	$míu_edô_ty≥
(, 
Êﬂt5
, 
·o°r5
, 0.01)

970 
	$míu_edô_ty≥
(, 
Êﬂt51
, 
·o°r51
, 10)

971 
	$míu_edô_ty≥
(, 
Êﬂt52
, 
·o°r52
, 100)

972 
	$míu_edô_ty≥
(, 
l⁄g5
, 
·o°r5
, 0.01)

974 #ifde‡
REPRAPWORLD_KEYPAD


975 
	$ª¥≠w‹ld_key∑d_move_z_up
() {

976 
ícodîPosôi⁄
 = 1;

977 
move_míu_sˇÀ
 = 
REPRAPWORLD_KEYPAD_MOVE_STEP
;

978 
	`lcd_move_z
();

979 
	}
}

980 
	$ª¥≠w‹ld_key∑d_move_z_down
() {

981 
ícodîPosôi⁄
 = -1;

982 
move_míu_sˇÀ
 = 
REPRAPWORLD_KEYPAD_MOVE_STEP
;

983 
	`lcd_move_z
();

984 
	}
}

985 
	$ª¥≠w‹ld_key∑d_move_x_À·
() {

986 
ícodîPosôi⁄
 = -1;

987 
move_míu_sˇÀ
 = 
REPRAPWORLD_KEYPAD_MOVE_STEP
;

988 
	`lcd_move_x
();

989 
	}
}

990 
	$ª¥≠w‹ld_key∑d_move_x_right
() {

991 
ícodîPosôi⁄
 = 1;

992 
move_míu_sˇÀ
 = 
REPRAPWORLD_KEYPAD_MOVE_STEP
;

993 
	`lcd_move_x
();

994 
	}
}

995 
	$ª¥≠w‹ld_key∑d_move_y_down
() {

996 
ícodîPosôi⁄
 = 1;

997 
move_míu_sˇÀ
 = 
REPRAPWORLD_KEYPAD_MOVE_STEP
;

998 
	`lcd_move_y
();

999 
	}
}

1000 
	$ª¥≠w‹ld_key∑d_move_y_up
() {

1001 
ícodîPosôi⁄
 = -1;

1002 
move_míu_sˇÀ
 = 
REPRAPWORLD_KEYPAD_MOVE_STEP
;

1003 
	`lcd_move_y
();

1004 
	}
}

1005 
	$ª¥≠w‹ld_key∑d_move_home
() {

1006 
	`íquecomm™d_P
((
	`PSTR
("G28")));

1007 
	}
}

1012 
	$lcd_quick_„edback
()

1014 
lcdDøwUpd©e
 = 2;

1015 
blockög_íc
 = 
	`mûlis
() + 500;

1016 
	`lcd_im∂emíèti⁄_quick_„edback
();

1017 
	}
}

1020 
	$míu_a˘i⁄_back
(
míuFunc_t
 
d©a
Ë{ 
	`lcd_gŸo_míu
(d©a); 
	}
}

1021 
	$míu_a˘i⁄_submíu
(
míuFunc_t
 
d©a
Ë{ 
	`lcd_gŸo_míu
(d©a); 
	}
}

1022 
	$míu_a˘i⁄_gcode
(c⁄° * 
pgcode
Ë{ 
	`íquecomm™d_P
’gcode); 
	}
}

1023 
	$míu_a˘i⁄_fun˘i⁄
(
míuFunc_t
 
d©a
Ë{ (*d©a)(); 
	}
}

1024 
	$míu_a˘i⁄_sdfûe
(c⁄° * 
fûíame
, * 
l⁄gFûíame
)

1026 
cmd
[30];

1027 * 
c
;

1028 
	`•rötf_P
(
cmd
, 
	`PSTR
("M23 %s"), 
fûíame
);

1029 
c
 = &
cmd
[4]; *c; c++)

1030 *
c
 = 
	`tﬁowî
(*c);

1031 
	`íquecomm™d
(
cmd
);

1032 
	`íquecomm™d_P
(
	`PSTR
("M24"));

1033 
	`lcd_ªtu∫_to_°©us
();

1034 
	}
}

1035 
	$míu_a˘i⁄_sddúe˘‹y
(c⁄° * 
fûíame
, * 
l⁄gFûíame
)

1037 
ˇrd
.
	`chdú
(
fûíame
);

1038 
ícodîPosôi⁄
 = 0;

1039 
	}
}

1040 
	$míu_a˘i⁄_£âög_edô_boﬁ
(c⁄° * 
p°r
, 
boﬁ
* 
±r
)

1042 *
±r
 = !(*ptr);

1043 
	}
}

1047 
	$lcd_öô
()

1049 
	`lcd_im∂emíèti⁄_öô
();

1051 #ifde‡
NEWPANEL


1052 
	`pöMode
(
BTN_EN1
,
INPUT
);

1053 
	`pöMode
(
BTN_EN2
,
INPUT
);

1054 
	`WRITE
(
BTN_EN1
,
HIGH
);

1055 
	`WRITE
(
BTN_EN2
,
HIGH
);

1056 #i‡
BTN_ENC
 > 0

1057 
	`pöMode
(
BTN_ENC
,
INPUT
);

1058 
	`WRITE
(
BTN_ENC
,
HIGH
);

1060 #ifde‡
REPRAPWORLD_KEYPAD


1061 
	`pöMode
(
SHIFT_CLK
,
OUTPUT
);

1062 
	`pöMode
(
SHIFT_LD
,
OUTPUT
);

1063 
	`pöMode
(
SHIFT_OUT
,
INPUT
);

1064 
	`WRITE
(
SHIFT_OUT
,
HIGH
);

1065 
	`WRITE
(
SHIFT_LD
,
HIGH
);

1068 #ifde‡
SR_LCD_2W_NL


1069 
	`pöMode
 (
SR_DATA_PIN
, 
OUTPUT
);

1070 
	`pöMode
 (
SR_CLK_PIN
, 
OUTPUT
);

1071 #ñi‡
	`deföed
(
SHIFT_CLK
)

1072 
	`pöMode
(
SHIFT_CLK
,
OUTPUT
);

1073 
	`pöMode
(
SHIFT_LD
,
OUTPUT
);

1074 
	`pöMode
(
SHIFT_EN
,
OUTPUT
);

1075 
	`pöMode
(
SHIFT_OUT
,
INPUT
);

1076 
	`WRITE
(
SHIFT_OUT
,
HIGH
);

1077 
	`WRITE
(
SHIFT_LD
,
HIGH
);

1078 
	`WRITE
(
SHIFT_EN
,
LOW
);

1080 #ifde‡
ULTIPANEL


1081 #îr‹ 
ULTIPANEL
 
ªquúes
 
™
 
ícodî


1086 #i‡
	`deföed
 (
SDSUPPORT
Ë&& deföed(
SDCARDDETECT
) && (SDCARDDETECT > 0)

1087 
	`pöMode
(
SDCARDDETECT
,
INPUT
);

1088 
	`WRITE
(
SDCARDDETECT
, 
HIGH
);

1089 
lcd_ﬁdˇrd°©us
 = 
IS_SD_INSERTED
;

1091 #ifde‡
LCD_HAS_SLOW_BUTTONS


1092 
¶ow_buâ⁄s
 = 0;

1094 
	`lcd_buâ⁄s_upd©e
();

1095 #ifde‡
ULTIPANEL


1096 
ícodîDiff
 = 0;

1098 
	}
}

1100 
	$lcd_upd©e
()

1102 
timeoutToSètus
 = 0;

1104 #ifde‡
LCD_HAS_SLOW_BUTTONS


1105 
¶ow_buâ⁄s
 = 
	`lcd_im∂emíèti⁄_ªad_¶ow_buâ⁄s
();

1108 
	`lcd_buâ⁄s_upd©e
();

1110 #i‡(
SDCARDDETECT
 > 0)

1111 if((
IS_SD_INSERTED
 !
lcd_ﬁdˇrd°©us
 && 
	`lcd_dëe˘ed
()))

1113 
lcdDøwUpd©e
 = 2;

1114 
lcd_ﬁdˇrd°©us
 = 
IS_SD_INSERTED
;

1115 
	`lcd_im∂emíèti⁄_öô
();

1117 if(
lcd_ﬁdˇrd°©us
)

1119 
ˇrd
.
	`öôsd
();

1120 
	`LCD_MESSAGEPGM
(
MSG_SD_INSERTED
);

1124 
ˇrd
.
	`ªÀa£
();

1125 
	`LCD_MESSAGEPGM
(
MSG_SD_REMOVED
);

1130 i‡(
lcd_√xt_upd©e_mûlis
 < 
	`mûlis
())

1132 #ifde‡
ULTIPANEL


1133 #ifde‡
REPRAPWORLD_KEYPAD


1134 i‡(
REPRAPWORLD_KEYPAD_MOVE_Z_UP
) {

1135 
	`ª¥≠w‹ld_key∑d_move_z_up
();

1137 i‡(
REPRAPWORLD_KEYPAD_MOVE_Z_DOWN
) {

1138 
	`ª¥≠w‹ld_key∑d_move_z_down
();

1140 i‡(
REPRAPWORLD_KEYPAD_MOVE_X_LEFT
) {

1141 
	`ª¥≠w‹ld_key∑d_move_x_À·
();

1143 i‡(
REPRAPWORLD_KEYPAD_MOVE_X_RIGHT
) {

1144 
	`ª¥≠w‹ld_key∑d_move_x_right
();

1146 i‡(
REPRAPWORLD_KEYPAD_MOVE_Y_DOWN
) {

1147 
	`ª¥≠w‹ld_key∑d_move_y_down
();

1149 i‡(
REPRAPWORLD_KEYPAD_MOVE_Y_UP
) {

1150 
	`ª¥≠w‹ld_key∑d_move_y_up
();

1152 i‡(
REPRAPWORLD_KEYPAD_MOVE_HOME
) {

1153 
	`ª¥≠w‹ld_key∑d_move_home
();

1156 i‡(
	`abs
(
ícodîDiff
Ë>
ENCODER_PULSES_PER_STEP
)

1158 
lcdDøwUpd©e
 = 1;

1159 
ícodîPosôi⁄
 +
ícodîDiff
 / 
ENCODER_PULSES_PER_STEP
;

1160 
ícodîDiff
 = 0;

1161 
timeoutToSètus
 = 
	`mûlis
(Ë+ 
LCD_TIMEOUT_TO_STATUS
;

1163 i‡(
LCD_CLICKED
)

1164 
timeoutToSètus
 = 
	`mûlis
(Ë+ 
LCD_TIMEOUT_TO_STATUS
;

1167 #ifde‡
DOGLCD


1168 
blök
++;

1169 
u8g
.
	`fú°Page
();

1172 
u8g
.
	`£tF⁄t
(
u8g_f⁄t_6x10_m¨lö
);

1173 
u8g
.
	`£tPrötPos
(125,0);

1174 i‡(
blök
 % 2Ë
u8g
.
	`£tCﬁ‹Index
(1); u8g.setColorIndex(0);

1175 
u8g
.
	`døwPixñ
(127,63);

1176 
u8g
.
	`£tCﬁ‹Index
(1);

1177 (*
cuºítMíu
)();

1178 i‡(!
lcdDøwUpd©e
) ;

1179 }  
u8g
.
	`√xtPage
() );

1181 (*
cuºítMíu
)();

1184 #ifde‡
LCD_HAS_STATUS_INDICATORS


1185 
	`lcd_im∂emíèti⁄_upd©e_ödiˇt‹s
();

1188 #ifde‡
ULTIPANEL


1189 if(
timeoutToSètus
 < 
	`mûlis
(Ë&& 
cuºítMíu
 !
lcd_°©us_s¸ìn
)

1191 
	`lcd_ªtu∫_to_°©us
();

1192 
lcdDøwUpd©e
 = 2;

1195 i‡(
lcdDøwUpd©e
 == 2)

1196 
	`lcd_im∂emíèti⁄_˛ór
();

1197 i‡(
lcdDøwUpd©e
)

1198 
lcdDøwUpd©e
--;

1199 
lcd_√xt_upd©e_mûlis
 = 
	`mûlis
(Ë+ 
LCD_UPDATE_INTERVAL
;

1201 
	}
}

1203 
	$lcd_ign‹e_˛ick
(
boﬁ
 
b
)

1205 
ign‹e_˛ick
 = 
b
;

1206 
waô_f‹_un˛ick
 = 
Ál£
;

1207 
	}
}

1209 
	$lcd_£t°©us
(c⁄° * 
mesßge
)

1211 i‡(
lcd_°©us_mesßge_Àvñ
 > 0)

1213 
	`°∫˝y
(
lcd_°©us_mesßge
, 
mesßge
, 
LCD_WIDTH
);

1215 
size_t
 
i
 = 
	`°æí
(
lcd_°©us_mesßge
);

1216 
	`mem£t
(
lcd_°©us_mesßge
 + 
i
, ' ', 
LCD_WIDTH
 - i);

1217 
lcd_°©us_mesßge
[
LCD_WIDTH
] = '\0';

1219 
lcdDøwUpd©e
 = 2;

1220 #ifde‡
FILAMENT_LCD_DISPLAY


1221 
mesßge_mûlis
=
	`mûlis
();

1223 
	}
}

1224 
	$lcd_£t°©u•gm
(c⁄° * 
mesßge
)

1226 i‡(
lcd_°©us_mesßge_Àvñ
 > 0)

1228 
	`°∫˝y_P
(
lcd_°©us_mesßge
, 
mesßge
, 
LCD_WIDTH
);

1230 
size_t
 
i
 = 
	`°æí
(
lcd_°©us_mesßge
);

1231 
	`mem£t
(
lcd_°©us_mesßge
 + 
i
, ' ', 
LCD_WIDTH
 - i);

1232 
lcd_°©us_mesßge
[
LCD_WIDTH
] = '\0';

1234 
lcdDøwUpd©e
 = 2;

1235 #ifde‡
FILAMENT_LCD_DISPLAY


1236 
mesßge_mûlis
=
	`mûlis
();

1238 
	}
}

1239 
	$lcd_£èÀπ°©u•gm
(c⁄° * 
mesßge
)

1241 
	`lcd_£t°©u•gm
(
mesßge
);

1242 
lcd_°©us_mesßge_Àvñ
 = 1;

1243 #ifde‡
ULTIPANEL


1244 
	`lcd_ªtu∫_to_°©us
();

1246 
	}
}

1247 
	$lcd_ª£t_Æît_Àvñ
()

1249 
lcd_°©us_mesßge_Àvñ
 = 0;

1250 
	}
}

1252 #ifde‡
DOGLCD


1253 
	$lcd_£tc⁄åa°
(
uöt8_t
 
vÆue
)

1255 
lcd_c⁄åa°
 = 
vÆue
 & 63;

1256 
u8g
.
	`£tC⁄åa°
(
lcd_c⁄åa°
);

1257 
	}
}

1260 #ifde‡
ULTIPANEL


1262 
	$lcd_buâ⁄s_upd©e
()

1264 #ifde‡
NEWPANEL


1265 
uöt8_t
 
√wbuâ⁄
=0;

1266 if(
	`READ
(
BTN_EN1
)==0Ë
√wbuâ⁄
|=
EN_A
;

1267 if(
	`READ
(
BTN_EN2
)==0Ë
√wbuâ⁄
|=
EN_B
;

1268 #i‡
BTN_ENC
 > 0

1269 if((
blockög_íc
<
	`mûlis
()Ë&& (
	`READ
(
BTN_ENC
)==0))

1270 
√wbuâ⁄
 |
EN_C
;

1272 
buâ⁄s
 = 
√wbuâ⁄
;

1273 #ifde‡
LCD_HAS_SLOW_BUTTONS


1274 
buâ⁄s
 |
¶ow_buâ⁄s
;

1276 #ifde‡
REPRAPWORLD_KEYPAD


1278 
uöt8_t
 
√wbuâ⁄_ª¥≠w‹ld_key∑d
=0;

1279 
	`WRITE
(
SHIFT_LD
,
LOW
);

1280 
	`WRITE
(
SHIFT_LD
,
HIGH
);

1281 
öt8_t
 
i
=0;i<8;i++) {

1282 
√wbuâ⁄_ª¥≠w‹ld_key∑d
 =Çewbutton_reprapworld_keypad>>1;

1283 if(
	`READ
(
SHIFT_OUT
))

1284 
√wbuâ⁄_ª¥≠w‹ld_key∑d
|=(1<<7);

1285 
	`WRITE
(
SHIFT_CLK
,
HIGH
);

1286 
	`WRITE
(
SHIFT_CLK
,
LOW
);

1288 
buâ⁄s_ª¥≠w‹ld_key∑d
=~
√wbuâ⁄_ª¥≠w‹ld_key∑d
;

1291 
uöt8_t
 
√wbuâ⁄
=0;

1292 
	`WRITE
(
SHIFT_LD
,
LOW
);

1293 
	`WRITE
(
SHIFT_LD
,
HIGH
);

1294 
tmp_buâ⁄s
=0;

1295 
öt8_t
 
i
=0;i<8;i++)

1297 
√wbuâ⁄
 =Çewbutton>>1;

1298 if(
	`READ
(
SHIFT_OUT
))

1299 
√wbuâ⁄
|=(1<<7);

1300 
	`WRITE
(
SHIFT_CLK
,
HIGH
);

1301 
	`WRITE
(
SHIFT_CLK
,
LOW
);

1303 
buâ⁄s
=~
√wbuâ⁄
;

1307 
uöt8_t
 
íc
=0;

1308 i‡(
buâ⁄s
 & 
EN_A
Ë
íc
 |
B01
;

1309 i‡(
buâ⁄s
 & 
EN_B
Ë
íc
 |
B10
;

1310 if(
íc
 !
œ°EncodîBôs
)

1312 
íc
)

1314 
í¸Ÿ0
:

1315 if(
œ°EncodîBôs
==
í¸Ÿ3
)

1316 
ícodîDiff
++;

1317 if(
œ°EncodîBôs
==
í¸Ÿ1
)

1318 
ícodîDiff
--;

1320 
í¸Ÿ1
:

1321 if(
œ°EncodîBôs
==
í¸Ÿ0
)

1322 
ícodîDiff
++;

1323 if(
œ°EncodîBôs
==
í¸Ÿ2
)

1324 
ícodîDiff
--;

1326 
í¸Ÿ2
:

1327 if(
œ°EncodîBôs
==
í¸Ÿ1
)

1328 
ícodîDiff
++;

1329 if(
œ°EncodîBôs
==
í¸Ÿ3
)

1330 
ícodîDiff
--;

1332 
í¸Ÿ3
:

1333 if(
œ°EncodîBôs
==
í¸Ÿ2
)

1334 
ícodîDiff
++;

1335 if(
œ°EncodîBôs
==
í¸Ÿ0
)

1336 
ícodîDiff
--;

1340 
œ°EncodîBôs
 = 
íc
;

1341 
	}
}

1343 
boﬁ
 
	$lcd_dëe˘ed
()

1345 #i‡(
	`deföed
(
LCD_I2C_TYPE_MCP23017
Ë|| deföed(
LCD_I2C_TYPE_MCP23008
)Ë&& deföed(
DETECT_DEVICE
)

1346  
lcd
.
	`LcdDëe˘ed
() == 1;

1348  
åue
;

1350 
	}
}

1352 
	$lcd_buzz
(
duøti⁄
, 
uöt16_t
 
‰eq
)

1354 #ifde‡
LCD_USE_I2C_BUZZER


1355 
lcd
.
	`buzz
(
duøti⁄
,
‰eq
);

1357 
	}
}

1359 
boﬁ
 
	$lcd_˛icked
()

1361  
LCD_CLICKED
;

1362 
	}
}

1369 
	gc⁄v
[8];

1370 *
	$·o°r3
(c⁄° &
x
)

1372  
	`ôo°r3
(()
x
);

1373 
	}
}

1375 *
	$ôo°r2
(c⁄° 
uöt8_t
 &
x
)

1378 
xx
=
x
;

1379 
c⁄v
[0]=(
xx
/10)%10+'0';

1380 
c⁄v
[1]=(
xx
)%10+'0';

1381 
c⁄v
[2]=0;

1382  
c⁄v
;

1383 
	}
}

1386 *
	$·o°r31
(c⁄° &
x
)

1388 
xx
=
x
*10;

1389 
c⁄v
[0]=(
xx
>=0)?'+':'-';

1390 
xx
=
	`abs
(xx);

1391 
c⁄v
[1]=(
xx
/1000)%10+'0';

1392 
c⁄v
[2]=(
xx
/100)%10+'0';

1393 
c⁄v
[3]=(
xx
/10)%10+'0';

1394 
c⁄v
[4]='.';

1395 
c⁄v
[5]=(
xx
)%10+'0';

1396 
c⁄v
[6]=0;

1397  
c⁄v
;

1398 
	}
}

1401 *
	$·o°r31ns
(c⁄° &
x
)

1403 
xx
=
x
*10;

1405 
xx
=
	`abs
(xx);

1406 
c⁄v
[0]=(
xx
/1000)%10+'0';

1407 
c⁄v
[1]=(
xx
/100)%10+'0';

1408 
c⁄v
[2]=(
xx
/10)%10+'0';

1409 
c⁄v
[3]='.';

1410 
c⁄v
[4]=(
xx
)%10+'0';

1411 
c⁄v
[5]=0;

1412  
c⁄v
;

1413 
	}
}

1415 *
	$·o°r32
(c⁄° &
x
)

1417 
xx
=
x
*100;

1418 i‡(
xx
 >= 0)

1419 
c⁄v
[0]=(
xx
/10000)%10+'0';

1421 
c⁄v
[0]='-';

1422 
xx
=
	`abs
(xx);

1423 
c⁄v
[1]=(
xx
/1000)%10+'0';

1424 
c⁄v
[2]=(
xx
/100)%10+'0';

1425 
c⁄v
[3]='.';

1426 
c⁄v
[4]=(
xx
/10)%10+'0';

1427 
c⁄v
[5]=(
xx
)%10+'0';

1428 
c⁄v
[6]=0;

1429  
c⁄v
;

1430 
	}
}

1433 *
	$·o°r12ns
(c⁄° &
x
)

1435 
xx
=
x
*100;

1437 
xx
=
	`abs
(xx);

1438 
c⁄v
[0]=(
xx
/100)%10+'0';

1439 
c⁄v
[1]='.';

1440 
c⁄v
[2]=(
xx
/10)%10+'0';

1441 
c⁄v
[3]=(
xx
)%10+'0';

1442 
c⁄v
[4]=0;

1443  
c⁄v
;

1444 
	}
}

1446 *
	$ôo°r31
(c⁄° &
xx
)

1448 
c⁄v
[0]=(
xx
>=0)?'+':'-';

1449 
c⁄v
[1]=(
xx
/1000)%10+'0';

1450 
c⁄v
[2]=(
xx
/100)%10+'0';

1451 
c⁄v
[3]=(
xx
/10)%10+'0';

1452 
c⁄v
[4]='.';

1453 
c⁄v
[5]=(
xx
)%10+'0';

1454 
c⁄v
[6]=0;

1455  
c⁄v
;

1456 
	}
}

1459 *
	$ôo°r3
(c⁄° &
x
)

1461 
xx
 = 
x
;

1462 i‡(
xx
 < 0) {

1463 
c⁄v
[0]='-';

1464 
xx
 = -xx;

1465 } i‡(
xx
 >= 100)

1466 
c⁄v
[0]=(
xx
/100)%10+'0';

1468 
c⁄v
[0]=' ';

1469 i‡(
xx
 >= 10)

1470 
c⁄v
[1]=(
xx
/10)%10+'0';

1472 
c⁄v
[1]=' ';

1473 
c⁄v
[2]=(
xx
)%10+'0';

1474 
c⁄v
[3]=0;

1475  
c⁄v
;

1476 
	}
}

1478 *
	$ôo°r3À·
(c⁄° &
xx
)

1480 i‡(
xx
 >= 100)

1482 
c⁄v
[0]=(
xx
/100)%10+'0';

1483 
c⁄v
[1]=(
xx
/10)%10+'0';

1484 
c⁄v
[2]=(
xx
)%10+'0';

1485 
c⁄v
[3]=0;

1487 i‡(
xx
 >= 10)

1489 
c⁄v
[0]=(
xx
/10)%10+'0';

1490 
c⁄v
[1]=(
xx
)%10+'0';

1491 
c⁄v
[2]=0;

1495 
c⁄v
[0]=(
xx
)%10+'0';

1496 
c⁄v
[1]=0;

1498  
c⁄v
;

1499 
	}
}

1502 *
	$ôo°r4
(c⁄° &
xx
) {

1503 
c⁄v
[0] = 
xx
 >= 1000 ? (xx / 1000) % 10 + '0' : ' ';

1504 
c⁄v
[1] = 
xx
 >= 100 ? (xx / 100) % 10 + '0' : ' ';

1505 
c⁄v
[2] = 
xx
 >= 10 ? (xx / 10) % 10 + '0' : ' ';

1506 
c⁄v
[3] = 
xx
 % 10 + '0';

1507 
c⁄v
[4] = 0;

1508  
c⁄v
;

1509 
	}
}

1512 *
	$·o°r5
(c⁄° &
x
) {

1513 
xx
 = 
	`abs
(
x
);

1514 
c⁄v
[0] = 
xx
 >= 10000 ? (xx / 10000) % 10 + '0' : ' ';

1515 
c⁄v
[1] = 
xx
 >= 1000 ? (xx / 1000) % 10 + '0' : ' ';

1516 
c⁄v
[2] = 
xx
 >= 100 ? (xx / 100) % 10 + '0' : ' ';

1517 
c⁄v
[3] = 
xx
 >= 10 ? (xx / 10) % 10 + '0' : ' ';

1518 
c⁄v
[4] = 
xx
 % 10 + '0';

1519 
c⁄v
[5] = 0;

1520  
c⁄v
;

1521 
	}
}

1524 *
	$·o°r51
(c⁄° &
x
)

1526 
xx
=
x
*10;

1527 
c⁄v
[0]=(
xx
>=0)?'+':'-';

1528 
xx
=
	`abs
(xx);

1529 
c⁄v
[1]=(
xx
/10000)%10+'0';

1530 
c⁄v
[2]=(
xx
/1000)%10+'0';

1531 
c⁄v
[3]=(
xx
/100)%10+'0';

1532 
c⁄v
[4]=(
xx
/10)%10+'0';

1533 
c⁄v
[5]='.';

1534 
c⁄v
[6]=(
xx
)%10+'0';

1535 
c⁄v
[7]=0;

1536  
c⁄v
;

1537 
	}
}

1540 *
	$·o°r52
(c⁄° &
x
)

1542 
xx
=
x
*100;

1543 
c⁄v
[0]=(
xx
>=0)?'+':'-';

1544 
xx
=
	`abs
(xx);

1545 
c⁄v
[1]=(
xx
/10000)%10+'0';

1546 
c⁄v
[2]=(
xx
/1000)%10+'0';

1547 
c⁄v
[3]=(
xx
/100)%10+'0';

1548 
c⁄v
[4]='.';

1549 
c⁄v
[5]=(
xx
/10)%10+'0';

1550 
c⁄v
[6]=(
xx
)%10+'0';

1551 
c⁄v
[7]=0;

1552  
c⁄v
;

1553 
	}
}

1557 
	$c›y_™d_sˇÀPID_i
()

1559 #ifde‡
PIDTEMP


1560 
Ki
 = 
	`sˇÀPID_i
(
øw_Ki
);

1561 
	`upd©ePID
();

1563 
	}
}

1567 
	$c›y_™d_sˇÀPID_d
()

1569 #ifde‡
PIDTEMP


1570 
Kd
 = 
	`sˇÀPID_d
(
øw_Kd
);

1571 
	`upd©ePID
();

1573 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/ultralcd.h

1 #i‚de‡
ULTRALCD_H


2 
	#ULTRALCD_H


	)

4 
	~"M¨lö.h
"

6 #ifde‡
ULTRA_LCD


8 
lcd_upd©e
();

9 
lcd_öô
();

10 
lcd_£t°©us
(c⁄° * 
mesßge
);

11 
lcd_£t°©u•gm
(c⁄° * 
mesßge
);

12 
lcd_£èÀπ°©u•gm
(c⁄° * 
mesßge
);

13 
lcd_ª£t_Æît_Àvñ
();

14 
boﬁ
 
lcd_dëe˘ed
();

16 #ifde‡
DOGLCD


17 
lcd_c⁄åa°
;

18 
lcd_£tc⁄åa°
(
uöt8_t
 
vÆue
);

21 
	gblök
 = 0;

23 
	#LCD_MESSAGEPGM
(
x
Ë
	`lcd_£t°©u•gm
(
	`PSTR
(x))

	)

24 
	#LCD_ALERTMESSAGEPGM
(
x
Ë
	`lcd_£èÀπ°©u•gm
(
	`PSTR
(x))

	)

26 
	#LCD_UPDATE_INTERVAL
 100

	)

27 
	#LCD_TIMEOUT_TO_STATUS
 15000

	)

29 #ifde‡
ULTIPANEL


30 
lcd_buâ⁄s_upd©e
();

31 vﬁ©ûê
uöt8_t
 
buâ⁄s
;

32 #ifde‡
REPRAPWORLD_KEYPAD


33 vﬁ©ûê
uöt8_t
 
buâ⁄s_ª¥≠w‹ld_key∑d
;

36 
FORCE_INLINE
 
	$lcd_buâ⁄s_upd©e
(Ë{
	}
}

39 
∂aPªhótHŸídTemp
;

40 
∂aPªhótHPBTemp
;

41 
∂aPªhótF™S≥ed
;

43 
absPªhótHŸídTemp
;

44 
absPªhótHPBTemp
;

45 
absPªhótF™S≥ed
;

47 
boﬁ
 
ˇn˚l_hótup
;

49 #ifde‡
FILAMENT_LCD_DISPLAY


50 
mesßge_mûlis
;

53 
lcd_buzz
(
duøti⁄
,
uöt16_t
 
‰eq
);

54 
boﬁ
 
lcd_˛icked
();

56 
lcd_ign‹e_˛ick
(
boﬁ
 
b
=
åue
);

58 #ifde‡
NEWPANEL


59 
	#EN_C
 (1<<
BLEN_C
)

	)

60 
	#EN_B
 (1<<
BLEN_B
)

	)

61 
	#EN_A
 (1<<
BLEN_A
)

	)

63 
	#LCD_CLICKED
 (
buâ⁄s
&
EN_C
)

	)

64 #ifde‡
REPRAPWORLD_KEYPAD


65 
	#EN_REPRAPWORLD_KEYPAD_F3
 (1<<
BLEN_REPRAPWORLD_KEYPAD_F3
)

	)

66 
	#EN_REPRAPWORLD_KEYPAD_F2
 (1<<
BLEN_REPRAPWORLD_KEYPAD_F2
)

	)

67 
	#EN_REPRAPWORLD_KEYPAD_F1
 (1<<
BLEN_REPRAPWORLD_KEYPAD_F1
)

	)

68 
	#EN_REPRAPWORLD_KEYPAD_UP
 (1<<
BLEN_REPRAPWORLD_KEYPAD_UP
)

	)

69 
	#EN_REPRAPWORLD_KEYPAD_RIGHT
 (1<<
BLEN_REPRAPWORLD_KEYPAD_RIGHT
)

	)

70 
	#EN_REPRAPWORLD_KEYPAD_MIDDLE
 (1<<
BLEN_REPRAPWORLD_KEYPAD_MIDDLE
)

	)

71 
	#EN_REPRAPWORLD_KEYPAD_DOWN
 (1<<
BLEN_REPRAPWORLD_KEYPAD_DOWN
)

	)

72 
	#EN_REPRAPWORLD_KEYPAD_LEFT
 (1<<
BLEN_REPRAPWORLD_KEYPAD_LEFT
)

	)

74 
	#LCD_CLICKED
 ((
buâ⁄s
&
EN_C
Ë|| (
buâ⁄s_ª¥≠w‹ld_key∑d
&
EN_REPRAPWORLD_KEYPAD_F1
))

	)

75 
	#REPRAPWORLD_KEYPAD_MOVE_Z_UP
 (
buâ⁄s_ª¥≠w‹ld_key∑d
&
EN_REPRAPWORLD_KEYPAD_F2
)

	)

76 
	#REPRAPWORLD_KEYPAD_MOVE_Z_DOWN
 (
buâ⁄s_ª¥≠w‹ld_key∑d
&
EN_REPRAPWORLD_KEYPAD_F3
)

	)

77 
	#REPRAPWORLD_KEYPAD_MOVE_X_LEFT
 (
buâ⁄s_ª¥≠w‹ld_key∑d
&
EN_REPRAPWORLD_KEYPAD_LEFT
)

	)

78 
	#REPRAPWORLD_KEYPAD_MOVE_X_RIGHT
 (
buâ⁄s_ª¥≠w‹ld_key∑d
&
EN_REPRAPWORLD_KEYPAD_RIGHT
)

	)

79 
	#REPRAPWORLD_KEYPAD_MOVE_Y_DOWN
 (
buâ⁄s_ª¥≠w‹ld_key∑d
&
EN_REPRAPWORLD_KEYPAD_DOWN
)

	)

80 
	#REPRAPWORLD_KEYPAD_MOVE_Y_UP
 (
buâ⁄s_ª¥≠w‹ld_key∑d
&
EN_REPRAPWORLD_KEYPAD_UP
)

	)

81 
	#REPRAPWORLD_KEYPAD_MOVE_HOME
 (
buâ⁄s_ª¥≠w‹ld_key∑d
&
EN_REPRAPWORLD_KEYPAD_MIDDLE
)

	)

85 
	#B_LE
 (1<<
BL_LE
)

	)

86 
	#B_UP
 (1<<
BL_UP
)

	)

87 
	#B_MI
 (1<<
BL_MI
)

	)

88 
	#B_DW
 (1<<
BL_DW
)

	)

89 
	#B_RI
 (1<<
BL_RI
)

	)

90 
	#B_ST
 (1<<
BL_ST
)

	)

91 
	#EN_B
 (1<<
BLEN_B
)

	)

92 
	#EN_A
 (1<<
BLEN_A
)

	)

94 
	#LCD_CLICKED
 ((
buâ⁄s
&
B_MI
)||(buâ⁄s&
B_ST
))

	)

98 
FORCE_INLINE
 
	$lcd_upd©e
(Ë{
	}
}

99 
FORCE_INLINE
 
	$lcd_öô
(Ë{
	}
}

100 
FORCE_INLINE
 
	$lcd_£t°©us
(c⁄° * 
mesßge
Ë{
	}
}

101 
FORCE_INLINE
 
	$lcd_buâ⁄s_upd©e
(Ë{
	}
}

102 
FORCE_INLINE
 
	$lcd_ª£t_Æît_Àvñ
(Ë{
	}
}

103 
FORCE_INLINE
 
	$lcd_buzz
(
duøti⁄
,
uöt16_t
 
‰eq
Ë{
	}
}

104 
FORCE_INLINE
 
boﬁ
 
	$lcd_dëe˘ed
(Ë{  
åue
; 
	}
}

106 
	#LCD_MESSAGEPGM
(
x
)

	)

107 
	#LCD_ALERTMESSAGEPGM
(
x
)

	)

111 *
ôo°r2
(c⁄° 
uöt8_t
 &
x
);

112 *
ôo°r31
(c⁄° &
xx
);

113 *
ôo°r3
(c⁄° &
xx
);

114 *
ôo°r3À·
(c⁄° &
xx
);

115 *
ôo°r4
(c⁄° &
xx
);

117 *
·o°r3
(c⁄° &
x
);

118 *
·o°r31ns
(c⁄° &
x
);

119 *
·o°r31
(c⁄° &
x
);

120 *
·o°r32
(c⁄° &
x
);

121 *
·o°r12ns
(c⁄° &
x
);

122 *
·o°r5
(c⁄° &
x
);

123 *
·o°r51
(c⁄° &
x
);

124 *
·o°r52
(c⁄° &
x
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/ultralcd_implementation_hitachi_HD44780.h

1 #i‚de‡
ULTRA_LCD_IMPLEMENTATION_HITACHI_HD44780_H


2 
	#ULTRA_LCD_IMPLEMENTATION_HITACHI_HD44780_H


	)

9 #i‚de‡
REPRAPWORLD_KEYPAD


10 vﬁ©ûê
uöt8_t
 
buâ⁄s
;

12 vﬁ©ûê
uöt16_t
 
buâ⁄s
;

22 #ifde‡
ULTIPANEL


24 
	#BLEN_B
 1

	)

25 
	#BLEN_A
 0

	)

27 
	#EN_B
 (1<<
BLEN_B
)

28 
	#EN_A
 (1<<
BLEN_A
)

	)

30 #i‡
deföed
(
BTN_ENC
) && BTN_ENC > -1

32 
	#BLEN_C
 2

	)

33 
	#EN_C
 (1<<
BLEN_C
)

	)

39 #i‡
deföed
(
LCD_I2C_VIKI
)

40 
	#B_I2C_BTN_OFFSET
 3

41 

	)

43 
	#B_LE
 (
BUTTON_LEFT
<<
B_I2C_BTN_OFFSET
)

44 
	#B_UP
 (
BUTTON_UP
<<
B_I2C_BTN_OFFSET
)

	)

45 
	#B_MI
 (
BUTTON_SELECT
<<
B_I2C_BTN_OFFSET
)

	)

46 
	#B_DW
 (
BUTTON_DOWN
<<
B_I2C_BTN_OFFSET
)

	)

47 
	#B_RI
 (
BUTTON_RIGHT
<<
B_I2C_BTN_OFFSET
)

	)

49 #i‡
deföed
(
BTN_ENC
) && BTN_ENC > -1

51 
	#B_ST
 (
EN_C
)

52 
	#LCD_CLICKED
 (
buâ⁄s
&(
B_MI
|
B_RI
|
B_ST
))

53 #ñ£

	)

54 
	#LCD_CLICKED
 (
buâ⁄s
&(
B_MI
|
B_RI
))

	)

58 
	#LCD_HAS_SLOW_BUTTONS


	)

60 #ñi‡
deföed
(
LCD_I2C_PANELOLU2
)

62 #i‡
BTN_ENC
 <= 0

63 
	#B_I2C_BTN_OFFSET
 3

64 

	)

65 
	#B_MI
 (
PANELOLU2_ENCODER_C
<<
B_I2C_BTN_OFFSET
)

66 

	)

67 
	#LCD_CLICKED
 (
buâ⁄s
&
B_MI
)

	)

70 
	#LCD_HAS_SLOW_BUTTONS


	)

72 
	#LCD_CLICKED
 (
buâ⁄s
&
EN_C
)

	)

75 #ñi‡
deföed
(
REPRAPWORLD_KEYPAD
)

77 
	#BLEN_REPRAPWORLD_KEYPAD_F3
 0

	)

78 
	#BLEN_REPRAPWORLD_KEYPAD_F2
 1

	)

79 
	#BLEN_REPRAPWORLD_KEYPAD_F1
 2

	)

80 
	#BLEN_REPRAPWORLD_KEYPAD_UP
 3

	)

81 
	#BLEN_REPRAPWORLD_KEYPAD_RIGHT
 4

	)

82 
	#BLEN_REPRAPWORLD_KEYPAD_MIDDLE
 5

	)

83 
	#BLEN_REPRAPWORLD_KEYPAD_DOWN
 6

	)

84 
	#BLEN_REPRAPWORLD_KEYPAD_LEFT
 7

	)

86 
	#REPRAPWORLD_BTN_OFFSET
 3

87 

	)

88 
	#EN_REPRAPWORLD_KEYPAD_F3
 (1<<(
BLEN_REPRAPWORLD_KEYPAD_F3
+
REPRAPWORLD_BTN_OFFSET
))

	)

89 
	#EN_REPRAPWORLD_KEYPAD_F2
 (1<<(
BLEN_REPRAPWORLD_KEYPAD_F2
+
REPRAPWORLD_BTN_OFFSET
))

	)

90 
	#EN_REPRAPWORLD_KEYPAD_F1
 (1<<(
BLEN_REPRAPWORLD_KEYPAD_F1
+
REPRAPWORLD_BTN_OFFSET
))

	)

91 
	#EN_REPRAPWORLD_KEYPAD_UP
 (1<<(
BLEN_REPRAPWORLD_KEYPAD_UP
+
REPRAPWORLD_BTN_OFFSET
))

	)

92 
	#EN_REPRAPWORLD_KEYPAD_RIGHT
 (1<<(
BLEN_REPRAPWORLD_KEYPAD_RIGHT
+
REPRAPWORLD_BTN_OFFSET
))

	)

93 
	#EN_REPRAPWORLD_KEYPAD_MIDDLE
 (1<<(
BLEN_REPRAPWORLD_KEYPAD_MIDDLE
+
REPRAPWORLD_BTN_OFFSET
))

	)

94 
	#EN_REPRAPWORLD_KEYPAD_DOWN
 (1<<(
BLEN_REPRAPWORLD_KEYPAD_DOWN
+
REPRAPWORLD_BTN_OFFSET
))

	)

95 
	#EN_REPRAPWORLD_KEYPAD_LEFT
 (1<<(
BLEN_REPRAPWORLD_KEYPAD_LEFT
+
REPRAPWORLD_BTN_OFFSET
))

	)

97 
	#LCD_CLICKED
 ((
buâ⁄s
&
EN_C
Ë|| (buâ⁄s&
EN_REPRAPWORLD_KEYPAD_F1
))

	)

98 
	#REPRAPWORLD_KEYPAD_MOVE_Y_DOWN
 (
buâ⁄s
&
EN_REPRAPWORLD_KEYPAD_DOWN
)

	)

99 
	#REPRAPWORLD_KEYPAD_MOVE_Y_UP
 (
buâ⁄s
&
EN_REPRAPWORLD_KEYPAD_UP
)

	)

100 
	#REPRAPWORLD_KEYPAD_MOVE_HOME
 (
buâ⁄s
&
EN_REPRAPWORLD_KEYPAD_MIDDLE
)

	)

102 #ñi‡
deföed
(
NEWPANEL
)

103 
	#LCD_CLICKED
 (
buâ⁄s
&
EN_C
)

	)

108 
	#BL_LE
 7

	)

109 
	#BL_UP
 6

	)

110 
	#BL_MI
 5

	)

111 
	#BL_DW
 4

	)

112 
	#BL_RI
 3

	)

113 
	#BL_ST
 2

	)

116 
	#B_LE
 (1<<
BL_LE
)

	)

117 
	#B_UP
 (1<<
BL_UP
)

	)

118 
	#B_MI
 (1<<
BL_MI
)

	)

119 
	#B_DW
 (1<<
BL_DW
)

	)

120 
	#B_RI
 (1<<
BL_RI
)

	)

121 
	#B_ST
 (1<<
BL_ST
)

	)

123 
	#LCD_CLICKED
 (
buâ⁄s
&(
B_MI
|
B_ST
))

	)

130 #i‡
deföed
(
EN_A
Ë&& deföed(
EN_B
)

131 
	#í¸Ÿ0
 0

	)

132 
	#í¸Ÿ1
 2

	)

133 
	#í¸Ÿ2
 3

	)

134 
	#í¸Ÿ3
 1

	)

141 #i‡
deföed
(
LCD_I2C_TYPE_PCF8575
)

143 
	#LCD_I2C_PIN_BL
 3

	)

144 
	#LCD_I2C_PIN_EN
 2

	)

145 
	#LCD_I2C_PIN_RW
 1

	)

146 
	#LCD_I2C_PIN_RS
 0

	)

147 
	#LCD_I2C_PIN_D4
 4

	)

148 
	#LCD_I2C_PIN_D5
 5

	)

149 
	#LCD_I2C_PIN_D6
 6

	)

150 
	#LCD_I2C_PIN_D7
 7

	)

152 
	~<Wúe.h
>

153 
	~<LCD.h
>

154 
	~<LiquidCry°Æ_I2C.h
>

155 
	#LCD_CLASS
 
LiquidCry°Æ_I2C


	)

156 
LCD_CLASS
 
lcd
(
LCD_I2C_ADDRESS
,
LCD_I2C_PIN_EN
,
LCD_I2C_PIN_RW
,
LCD_I2C_PIN_RS
,
LCD_I2C_PIN_D4
,
LCD_I2C_PIN_D5
,
LCD_I2C_PIN_D6
,
LCD_I2C_PIN_D7
);

158 #ñi‡
deföed
(
LCD_I2C_TYPE_MCP23017
)

160 
	#LED_A
 0x04

161 
	#LED_B
 0x02

162 
	#LED_C
 0x01

163 

	)

164 
	#LCD_HAS_STATUS_INDICATORS


	)

166 
	~<Wúe.h
>

167 
	~<LiquidTWI2.h
>

168 
	#LCD_CLASS
 
LiquidTWI2


	)

169 #i‡
deföed
(
DETECT_DEVICE
)

170 
LCD_CLASS
 
lcd
(
LCD_I2C_ADDRESS
, 1);

172 
LCD_CLASS
 
lcd
(
LCD_I2C_ADDRESS
);

175 #ñi‡
deföed
(
LCD_I2C_TYPE_MCP23008
)

176 
	~<Wúe.h
>

177 
	~<LiquidTWI2.h
>

178 
	#LCD_CLASS
 
LiquidTWI2


	)

179 #i‡
deföed
(
DETECT_DEVICE
)

180 
LCD_CLASS
 
lcd
(
LCD_I2C_ADDRESS
, 1);

182 
LCD_CLASS
 
lcd
(
LCD_I2C_ADDRESS
);

185 #ñi‡
deföed
(
LCD_I2C_TYPE_PCA8574
)

186 
	~<LiquidCry°Æ_I2C.h
>

187 
	#LCD_CLASS
 
LiquidCry°Æ_I2C


	)

188 
LCD_CLASS
 
lcd
(
LCD_I2C_ADDRESS
, 
LCD_WIDTH
, 
LCD_HEIGHT
);

192 #ñi‡
deföed
(
SR_LCD_2W_NL
)

194 
	~<LCD.h
>

195 
	~<LiquidCry°Æ_SR.h
>

196 
	#LCD_CLASS
 
LiquidCry°Æ_SR


	)

197 
LCD_CLASS
 
lcd
(
SR_DATA_PIN
, 
SR_CLK_PIN
);

201 #i‡
LANGUAGE_CHOICE
 =
ru


202 
	~"LiquidCry°ÆRus.h
"

203 
	#LCD_CLASS
 
LiquidCry°ÆRus


	)

205 
	~<LiquidCry°Æ.h
>

206 
	#LCD_CLASS
 
LiquidCry°Æ


	)

208 
LCD_CLASS
 
lcd
(
LCD_PINS_RS
, 
LCD_PINS_ENABLE
, 
LCD_PINS_D4
, 
LCD_PINS_D5
,
LCD_PINS_D6
,
LCD_PINS_D7
);

212 
	#LCD_STR_BEDTEMP
 "\x00"

	)

213 
	#LCD_STR_DEGREE
 "\x01"

	)

214 
	#LCD_STR_THERMOMETER
 "\x02"

	)

215 
	#LCD_STR_UPLEVEL
 "\x03"

	)

216 
	#LCD_STR_REFRESH
 "\x04"

	)

217 
	#LCD_STR_FOLDER
 "\x05"

	)

218 
	#LCD_STR_FEEDRATE
 "\x06"

	)

219 
	#LCD_STR_CLOCK
 "\x07"

	)

220 
	#LCD_STR_ARROW_RIGHT
 "\x7E"

	)

222 
	$lcd_im∂emíèti⁄_öô
()

224 
byã
 
bedTemp
[8] =

226 
B00000
,

227 
B11111
,

228 
B10101
,

229 
B10001
,

230 
B10101
,

231 
B11111
,

232 
B00000
,

233 
B00000


235 
byã
 
degªe
[8] =

237 
B01100
,

238 
B10010
,

239 
B10010
,

240 
B01100
,

241 
B00000
,

242 
B00000
,

243 
B00000
,

244 
B00000


246 
byã
 
thîmomëî
[8] =

248 
B00100
,

249 
B01010
,

250 
B01010
,

251 
B01010
,

252 
B01010
,

253 
B10001
,

254 
B10001
,

255 
B01110


257 
byã
 
u∂evñ
[8]={

258 
B00100
,

259 
B01110
,

260 
B11111
,

261 
B00100
,

262 
B11100
,

263 
B00000
,

264 
B00000
,

265 
B00000


267 
byã
 
ª‰esh
[8]={

268 
B00000
,

269 
B00110
,

270 
B11001
,

271 
B11000
,

272 
B00011
,

273 
B10011
,

274 
B01100
,

275 
B00000
,

277 
byã
 
fﬁdî
 [8]={

278 
B00000
,

279 
B11100
,

280 
B11111
,

281 
B10001
,

282 
B10001
,

283 
B11111
,

284 
B00000
,

285 
B00000


287 
byã
 
„edøã
 [8]={

288 
B11100
,

289 
B10000
,

290 
B11000
,

291 
B10111
,

292 
B00101
,

293 
B00110
,

294 
B00101
,

295 
B00000


297 
byã
 
˛ock
 [8]={

298 
B00000
,

299 
B01110
,

300 
B10011
,

301 
B10101
,

302 
B10001
,

303 
B01110
,

304 
B00000
,

305 
B00000


308 #i‡
	`deföed
(
LCD_I2C_TYPE_PCF8575
)

309 
lcd
.
	`begö
(
LCD_WIDTH
, 
LCD_HEIGHT
);

310 #ifde‡
LCD_I2C_PIN_BL


311 
lcd
.
	`£tBacklightPö
(
LCD_I2C_PIN_BL
,
POSITIVE
);

312 
lcd
.
	`£tBacklight
(
HIGH
);

315 #ñi‡
	`deföed
(
LCD_I2C_TYPE_MCP23017
)

316 
lcd
.
	`£tMCPTy≥
(
LTI_TYPE_MCP23017
);

317 
lcd
.
	`begö
(
LCD_WIDTH
, 
LCD_HEIGHT
);

318 
lcd
.
	`£tBacklight
(0);

320 #ñi‡
	`deföed
(
LCD_I2C_TYPE_MCP23008
)

321 
lcd
.
	`£tMCPTy≥
(
LTI_TYPE_MCP23008
);

322 
lcd
.
	`begö
(
LCD_WIDTH
, 
LCD_HEIGHT
);

324 #ñi‡
	`deföed
(
LCD_I2C_TYPE_PCA8574
)

325 
lcd
.
	`öô
();

326 
lcd
.
	`backlight
();

329 
lcd
.
	`begö
(
LCD_WIDTH
, 
LCD_HEIGHT
);

332 
lcd
.
	`¸óãCh¨
(
LCD_STR_BEDTEMP
[0], 
bedTemp
);

333 
lcd
.
	`¸óãCh¨
(
LCD_STR_DEGREE
[0], 
degªe
);

334 
lcd
.
	`¸óãCh¨
(
LCD_STR_THERMOMETER
[0], 
thîmomëî
);

335 
lcd
.
	`¸óãCh¨
(
LCD_STR_UPLEVEL
[0], 
u∂evñ
);

336 
lcd
.
	`¸óãCh¨
(
LCD_STR_REFRESH
[0], 
ª‰esh
);

337 
lcd
.
	`¸óãCh¨
(
LCD_STR_FOLDER
[0], 
fﬁdî
);

338 
lcd
.
	`¸óãCh¨
(
LCD_STR_FEEDRATE
[0], 
„edøã
);

339 
lcd
.
	`¸óãCh¨
(
LCD_STR_CLOCK
[0], 
˛ock
);

340 
lcd
.
	`˛ór
();

341 
	}
}

342 
	$lcd_im∂emíèti⁄_˛ór
()

344 
lcd
.
	`˛ór
();

345 
	}
}

347 
	$lcd_¥ötPGM
(c⁄° * 
°r
)

349 
c
;

350 (
c
 = 
	`pgm_ªad_byã
(
°r
++)) != '\0')

352 
lcd
.
	`wrôe
(
c
);

354 
	}
}

383 
	$lcd_im∂emíèti⁄_°©us_s¸ìn
()

385 
tHŸíd
=(
	`degHŸíd
(0) + 0.5);

386 
tT¨gë
=(
	`degT¨gëHŸíd
(0) + 0.5);

388 #i‡
LCD_WIDTH
 < 20

389 
lcd
.
	`£tCurs‹
(0, 0);

390 
lcd
.
	`¥öt
(
	`ôo°r3
(
tHŸíd
));

391 
lcd
.
	`¥öt
('/');

392 
lcd
.
	`¥öt
(
	`ôo°r3À·
(
tT¨gë
));

394 #i‡
EXTRUDERS
 > 1 || 
TEMP_SENSOR_BED
 != 0

396 
lcd
.
	`£tCurs‹
(8, 0);

397 #i‡
EXTRUDERS
 > 1

398 
tHŸíd
 = (
	`degHŸíd
(1) + 0.5);

399 
tT¨gë
 = (
	`degT¨gëHŸíd
(1) + 0.5);

400 
lcd
.
	`¥öt
(
LCD_STR_THERMOMETER
[0]);

402 
tHŸíd
=(
	`degBed
() + 0.5);

403 
tT¨gë
=(
	`degT¨gëBed
() + 0.5);

404 
lcd
.
	`¥öt
(
LCD_STR_BEDTEMP
[0]);

406 
lcd
.
	`¥öt
(
	`ôo°r3
(
tHŸíd
));

407 
lcd
.
	`¥öt
('/');

408 
lcd
.
	`¥öt
(
	`ôo°r3À·
(
tT¨gë
));

412 
lcd
.
	`£tCurs‹
(0, 0);

413 
lcd
.
	`¥öt
(
LCD_STR_THERMOMETER
[0]);

414 
lcd
.
	`¥öt
(
	`ôo°r3
(
tHŸíd
));

415 
lcd
.
	`¥öt
('/');

416 
lcd
.
	`¥öt
(
	`ôo°r3À·
(
tT¨gë
));

417 
	`lcd_¥ötPGM
(
	`PSTR
(
LCD_STR_DEGREE
 " "));

418 i‡(
tT¨gë
 < 10)

419 
lcd
.
	`¥öt
(' ');

421 #i‡
EXTRUDERS
 > 1 || 
TEMP_SENSOR_BED
 != 0

423 
lcd
.
	`£tCurs‹
(10, 0);

424 #i‡
EXTRUDERS
 > 1

425 
tHŸíd
 = (
	`degHŸíd
(1) + 0.5);

426 
tT¨gë
 = (
	`degT¨gëHŸíd
(1) + 0.5);

427 
lcd
.
	`¥öt
(
LCD_STR_THERMOMETER
[0]);

429 
tHŸíd
=(
	`degBed
() + 0.5);

430 
tT¨gë
=(
	`degT¨gëBed
() + 0.5);

431 
lcd
.
	`¥öt
(
LCD_STR_BEDTEMP
[0]);

433 
lcd
.
	`¥öt
(
	`ôo°r3
(
tHŸíd
));

434 
lcd
.
	`¥öt
('/');

435 
lcd
.
	`¥öt
(
	`ôo°r3À·
(
tT¨gë
));

436 
	`lcd_¥ötPGM
(
	`PSTR
(
LCD_STR_DEGREE
 " "));

437 i‡(
tT¨gë
 < 10)

438 
lcd
.
	`¥öt
(' ');

442 #i‡
LCD_HEIGHT
 > 2

444 #i‡
LCD_WIDTH
 < 20

445 #ifde‡
SDSUPPORT


446 
lcd
.
	`£tCurs‹
(0, 2);

447 
	`lcd_¥ötPGM
(
	`PSTR
("SD"));

448 i‡(
IS_SD_PRINTING
)

449 
lcd
.
	`¥öt
(
	`ôo°r3
(
ˇrd
.
	`≥r˚¡D⁄e
()));

451 
	`lcd_¥ötPGM
(
	`PSTR
("---"));

452 
lcd
.
	`¥öt
('%');

455 #i‡
EXTRUDERS
 > 1 && 
TEMP_SENSOR_BED
 != 0

457 
tHŸíd
=(
	`degBed
() + 0.5);

458 
tT¨gë
=(
	`degT¨gëBed
() + 0.5);

460 
lcd
.
	`£tCurs‹
(0, 1);

461 
lcd
.
	`¥öt
(
LCD_STR_BEDTEMP
[0]);

462 
lcd
.
	`¥öt
(
	`ôo°r3
(
tHŸíd
));

463 
lcd
.
	`¥öt
('/');

464 
lcd
.
	`¥öt
(
	`ôo°r3À·
(
tT¨gë
));

465 
	`lcd_¥ötPGM
(
	`PSTR
(
LCD_STR_DEGREE
 " "));

466 i‡(
tT¨gë
 < 10)

467 
lcd
.
	`¥öt
(' ');

469 
lcd
.
	`£tCurs‹
(0,1);

470 
lcd
.
	`¥öt
('X');

471 
lcd
.
	`¥öt
(
	`·o°r3
(
cuºít_posôi⁄
[
X_AXIS
]));

472 
	`lcd_¥ötPGM
(
	`PSTR
(" Y"));

473 
lcd
.
	`¥öt
(
	`·o°r3
(
cuºít_posôi⁄
[
Y_AXIS
]));

476 
lcd
.
	`£tCurs‹
(
LCD_WIDTH
 - 8, 1);

477 
lcd
.
	`¥öt
('Z');

478 
lcd
.
	`¥öt
(
	`·o°r32
(
cuºít_posôi⁄
[
Z_AXIS
] + 0.00001));

481 #i‡
LCD_HEIGHT
 > 3

482 
lcd
.
	`£tCurs‹
(0, 2);

483 
lcd
.
	`¥öt
(
LCD_STR_FEEDRATE
[0]);

484 
lcd
.
	`¥öt
(
	`ôo°r3
(
„edmu…ùly
));

485 
lcd
.
	`¥öt
('%');

486 #i‡
LCD_WIDTH
 > 19

487 #ifde‡
SDSUPPORT


488 
lcd
.
	`£tCurs‹
(7, 2);

489 
	`lcd_¥ötPGM
(
	`PSTR
("SD"));

490 i‡(
IS_SD_PRINTING
)

491 
lcd
.
	`¥öt
(
	`ôo°r3
(
ˇrd
.
	`≥r˚¡D⁄e
()));

493 
	`lcd_¥ötPGM
(
	`PSTR
("---"));

494 
lcd
.
	`¥öt
('%');

497 
lcd
.
	`£tCurs‹
(
LCD_WIDTH
 - 6, 2);

498 
lcd
.
	`¥öt
(
LCD_STR_CLOCK
[0]);

499 if(
°¨âime
 != 0)

501 
uöt16_t
 
time
 = 
	`mûlis
()/60000 - 
°¨âime
/60000;

502 
lcd
.
	`¥öt
(
	`ôo°r2
(
time
/60));

503 
lcd
.
	`¥öt
(':');

504 
lcd
.
	`¥öt
(
	`ôo°r2
(
time
%60));

506 
	`lcd_¥ötPGM
(
	`PSTR
("--:--"));

511 #ifde‡
FILAMENT_LCD_DISPLAY


512 if(
mesßge_mûlis
+5000>
	`mûlis
()){

513 
lcd
.
	`£tCurs‹
(0, 
LCD_HEIGHT
 - 1);

514 
lcd
.
	`¥öt
(
lcd_°©us_mesßge
);

516 
lcd
.
	`£tCurs‹
(0,
LCD_HEIGHT
 - 1);

517 
	`lcd_¥ötPGM
(
	`PSTR
("Dia "));

518 
lcd
.
	`¥öt
(
	`·o°r12ns
(
fûamít_width_mós
));

519 
	`lcd_¥ötPGM
(
	`PSTR
(" V"));

520 
lcd
.
	`¥öt
(
	`ôo°r3
(100.0*
vﬁumëric_mu…ùlõr
[
FILAMENT_SENSOR_EXTRUDER_NUM
]));

521 
lcd
.
	`¥öt
('%');

524 
lcd
.
	`£tCurs‹
(0, 
LCD_HEIGHT
 - 1);

525 
lcd
.
	`¥öt
(
lcd_°©us_mesßge
);

527 
	}
}

528 
	$lcd_im∂emíèti⁄_døwmíu_gíîic
(
uöt8_t
 
row
, c⁄° * 
p°r
, 
¥e_ch¨
, 
po°_ch¨
)

530 
c
;

532 #i‡
LCD_WIDTH
 < 20

533 
uöt8_t
 
n
 = 
LCD_WIDTH
 - 1 - 1;

535 
uöt8_t
 
n
 = 
LCD_WIDTH
 - 1 - 2;

537 
lcd
.
	`£tCurs‹
(0, 
row
);

538 
lcd
.
	`¥öt
(
¥e_ch¨
);

539  ((
c
 = 
	`pgm_ªad_byã
(
p°r
)Ë!'\0'Ë&& (
n
>0) )

541 
lcd
.
	`¥öt
(
c
);

542 
p°r
++;

543 
n
--;

545 
n
--)

546 
lcd
.
	`¥öt
(' ');

547 
lcd
.
	`¥öt
(
po°_ch¨
);

548 
lcd
.
	`¥öt
(' ');

549 
	}
}

550 
	$lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
(
uöt8_t
 
row
, c⁄° * 
p°r
, 
¥e_ch¨
, * 
d©a
)

552 
c
;

554 #i‡
LCD_WIDTH
 < 20

555 
uöt8_t
 
n
 = 
LCD_WIDTH
 - 1 - 1 - 
	`°æí
(
d©a
);

557 
uöt8_t
 
n
 = 
LCD_WIDTH
 - 1 - 2 - 
	`°æí
(
d©a
);

559 
lcd
.
	`£tCurs‹
(0, 
row
);

560 
lcd
.
	`¥öt
(
¥e_ch¨
);

561  ((
c
 = 
	`pgm_ªad_byã
(
p°r
)Ë!'\0'Ë&& (
n
>0) )

563 
lcd
.
	`¥öt
(
c
);

564 
p°r
++;

565 
n
--;

567 
lcd
.
	`¥öt
(':');

568 
n
--)

569 
lcd
.
	`¥öt
(' ');

570 
lcd
.
	`¥öt
(
d©a
);

571 
	}
}

572 
	$lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic_P
(
uöt8_t
 
row
, c⁄° * 
p°r
, 
¥e_ch¨
, c⁄° * 
d©a
)

574 
c
;

576 #i‡
LCD_WIDTH
 < 20

577 
uöt8_t
 
n
 = 
LCD_WIDTH
 - 1 - 1 - 
	`°æí_P
(
d©a
);

579 
uöt8_t
 
n
 = 
LCD_WIDTH
 - 1 - 2 - 
	`°æí_P
(
d©a
);

581 
lcd
.
	`£tCurs‹
(0, 
row
);

582 
lcd
.
	`¥öt
(
¥e_ch¨
);

583  ((
c
 = 
	`pgm_ªad_byã
(
p°r
)Ë!'\0'Ë&& (
n
>0) )

585 
lcd
.
	`¥öt
(
c
);

586 
p°r
++;

587 
n
--;

589 
lcd
.
	`¥öt
(':');

590 
n
--)

591 
lcd
.
	`¥öt
(' ');

592 
	`lcd_¥ötPGM
(
d©a
);

593 
	}
}

594 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_öt3_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`ôo°r3
(*(d©a)))

	)

595 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_öt3
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`ôo°r3
(*(d©a)))

	)

596 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_Êﬂt3_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`·o°r3
(*(d©a)))

	)

597 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_Êﬂt3
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`·o°r3
(*(d©a)))

	)

598 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_Êﬂt32_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`·o°r32
(*(d©a)))

	)

599 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_Êﬂt32
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`·o°r32
(*(d©a)))

	)

600 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_Êﬂt5_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`·o°r5
(*(d©a)))

	)

601 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_Êﬂt5
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`·o°r5
(*(d©a)))

	)

602 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_Êﬂt52_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`·o°r52
(*(d©a)))

	)

603 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_Êﬂt52
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`·o°r52
(*(d©a)))

	)

604 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_Êﬂt51_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`·o°r51
(*(d©a)))

	)

605 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_Êﬂt51
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`·o°r51
(*(d©a)))

	)

606 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_l⁄g5_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`·o°r5
(*(d©a)))

	)

607 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_l⁄g5
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`·o°r5
(*(d©a)))

	)

608 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_boﬁ_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic_P
‘ow,Ö°r, '>', (*(d©a))?
	`PSTR
(
MSG_ON
):PSTR(
MSG_OFF
))

	)

609 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_boﬁ
(
row
, 
p°r
, 
p°r2
, 
d©a
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic_P
‘ow,Ö°r, ' ', (*(d©a))?
	`PSTR
(
MSG_ON
):PSTR(
MSG_OFF
))

	)

612 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_öt3_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`ôo°r3
(*(d©a)))

	)

613 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_öt3
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`ôo°r3
(*(d©a)))

	)

614 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_Êﬂt3_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`·o°r3
(*(d©a)))

	)

615 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_Êﬂt3
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`·o°r3
(*(d©a)))

	)

616 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_Êﬂt32_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`·o°r32
(*(d©a)))

	)

617 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_Êﬂt32
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`·o°r32
(*(d©a)))

	)

618 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_Êﬂt5_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`·o°r5
(*(d©a)))

	)

619 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_Êﬂt5
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`·o°r5
(*(d©a)))

	)

620 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_Êﬂt52_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`·o°r52
(*(d©a)))

	)

621 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_Êﬂt52
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`·o°r52
(*(d©a)))

	)

622 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_Êﬂt51_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`·o°r51
(*(d©a)))

	)

623 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_Êﬂt51
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`·o°r51
(*(d©a)))

	)

624 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_l⁄g5_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, '>', 
	`·o°r5
(*(d©a)))

	)

625 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_l⁄g5
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
möVÆue
, 
maxVÆue
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic
‘ow,Ö°r, ' ', 
	`·o°r5
(*(d©a)))

	)

626 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_boﬁ_£À˘ed
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic_P
‘ow,Ö°r, '>', (*(d©a))?
	`PSTR
(
MSG_ON
):PSTR(
MSG_OFF
))

	)

627 
	#lcd_im∂emíèti⁄_døwmíu_£âög_edô_ˇŒback_boﬁ
(
row
, 
p°r
, 
p°r2
, 
d©a
, 
ˇŒback
Ë
	`lcd_im∂emíèti⁄_døwmíu_£âög_edô_gíîic_P
‘ow,Ö°r, ' ', (*(d©a))?
	`PSTR
(
MSG_ON
):PSTR(
MSG_OFF
))

	)

630 
	$lcd_im∂emíèti⁄_døwedô
(c⁄° * 
p°r
, * 
vÆue
)

632 
lcd
.
	`£tCurs‹
(1, 1);

633 
	`lcd_¥ötPGM
(
p°r
);

634 
lcd
.
	`¥öt
(':');

635 #i‡
LCD_WIDTH
 < 20

636 
lcd
.
	`£tCurs‹
(
LCD_WIDTH
 - 
	`°æí
(
vÆue
), 1);

638 
lcd
.
	`£tCurs‹
(
LCD_WIDTH
 -1 - 
	`°æí
(
vÆue
), 1);

640 
lcd
.
	`¥öt
(
vÆue
);

641 
	}
}

642 
	$lcd_im∂emíèti⁄_døwmíu_sdfûe_£À˘ed
(
uöt8_t
 
row
, c⁄° * 
p°r
, c⁄° * 
fûíame
, * 
l⁄gFûíame
)

644 
c
;

645 
uöt8_t
 
n
 = 
LCD_WIDTH
 - 1;

646 
lcd
.
	`£tCurs‹
(0, 
row
);

647 
lcd
.
	`¥öt
('>');

648 i‡(
l⁄gFûíame
[0] != '\0')

650 
fûíame
 = 
l⁄gFûíame
;

651 
l⁄gFûíame
[
LCD_WIDTH
-1] = '\0';

653  ((
c
 = *
fûíame
Ë!'\0'Ë&& (
n
>0) )

655 
lcd
.
	`¥öt
(
c
);

656 
fûíame
++;

657 
n
--;

659 
n
--)

660 
lcd
.
	`¥öt
(' ');

661 
	}
}

662 
	$lcd_im∂emíèti⁄_døwmíu_sdfûe
(
uöt8_t
 
row
, c⁄° * 
p°r
, c⁄° * 
fûíame
, * 
l⁄gFûíame
)

664 
c
;

665 
uöt8_t
 
n
 = 
LCD_WIDTH
 - 1;

666 
lcd
.
	`£tCurs‹
(0, 
row
);

667 
lcd
.
	`¥öt
(' ');

668 i‡(
l⁄gFûíame
[0] != '\0')

670 
fûíame
 = 
l⁄gFûíame
;

671 
l⁄gFûíame
[
LCD_WIDTH
-1] = '\0';

673  ((
c
 = *
fûíame
Ë!'\0'Ë&& (
n
>0) )

675 
lcd
.
	`¥öt
(
c
);

676 
fûíame
++;

677 
n
--;

679 
n
--)

680 
lcd
.
	`¥öt
(' ');

681 
	}
}

682 
	$lcd_im∂emíèti⁄_døwmíu_sddúe˘‹y_£À˘ed
(
uöt8_t
 
row
, c⁄° * 
p°r
, c⁄° * 
fûíame
, * 
l⁄gFûíame
)

684 
c
;

685 
uöt8_t
 
n
 = 
LCD_WIDTH
 - 2;

686 
lcd
.
	`£tCurs‹
(0, 
row
);

687 
lcd
.
	`¥öt
('>');

688 
lcd
.
	`¥öt
(
LCD_STR_FOLDER
[0]);

689 i‡(
l⁄gFûíame
[0] != '\0')

691 
fûíame
 = 
l⁄gFûíame
;

692 
l⁄gFûíame
[
LCD_WIDTH
-2] = '\0';

694  ((
c
 = *
fûíame
Ë!'\0'Ë&& (
n
>0) )

696 
lcd
.
	`¥öt
(
c
);

697 
fûíame
++;

698 
n
--;

700 
n
--)

701 
lcd
.
	`¥öt
(' ');

702 
	}
}

703 
	$lcd_im∂emíèti⁄_døwmíu_sddúe˘‹y
(
uöt8_t
 
row
, c⁄° * 
p°r
, c⁄° * 
fûíame
, * 
l⁄gFûíame
)

705 
c
;

706 
uöt8_t
 
n
 = 
LCD_WIDTH
 - 2;

707 
lcd
.
	`£tCurs‹
(0, 
row
);

708 
lcd
.
	`¥öt
(' ');

709 
lcd
.
	`¥öt
(
LCD_STR_FOLDER
[0]);

710 i‡(
l⁄gFûíame
[0] != '\0')

712 
fûíame
 = 
l⁄gFûíame
;

713 
l⁄gFûíame
[
LCD_WIDTH
-2] = '\0';

715  ((
c
 = *
fûíame
Ë!'\0'Ë&& (
n
>0) )

717 
lcd
.
	`¥öt
(
c
);

718 
fûíame
++;

719 
n
--;

721 
n
--)

722 
lcd
.
	`¥öt
(' ');

723 
	}
}

724 
	#lcd_im∂emíèti⁄_døwmíu_back_£À˘ed
(
row
, 
p°r
, 
d©a
Ë
	`lcd_im∂emíèti⁄_døwmíu_gíîic
‘ow,Ö°r, 
LCD_STR_UPLEVEL
[0], LCD_STR_UPLEVEL[0])

	)

725 
	#lcd_im∂emíèti⁄_døwmíu_back
(
row
, 
p°r
, 
d©a
Ë
	`lcd_im∂emíèti⁄_døwmíu_gíîic
‘ow,Ö°r, ' ', 
LCD_STR_UPLEVEL
[0])

	)

726 
	#lcd_im∂emíèti⁄_døwmíu_submíu_£À˘ed
(
row
, 
p°r
, 
d©a
Ë
	`lcd_im∂emíèti⁄_døwmíu_gíîic
‘ow,Ö°r, '>', 
LCD_STR_ARROW_RIGHT
[0])

	)

727 
	#lcd_im∂emíèti⁄_døwmíu_submíu
(
row
, 
p°r
, 
d©a
Ë
	`lcd_im∂emíèti⁄_døwmíu_gíîic
‘ow,Ö°r, ' ', 
LCD_STR_ARROW_RIGHT
[0])

	)

728 
	#lcd_im∂emíèti⁄_døwmíu_gcode_£À˘ed
(
row
, 
p°r
, 
gcode
Ë
	`lcd_im∂emíèti⁄_døwmíu_gíîic
‘ow,Ö°r, '>', ' ')

	)

729 
	#lcd_im∂emíèti⁄_døwmíu_gcode
(
row
, 
p°r
, 
gcode
Ë
	`lcd_im∂emíèti⁄_døwmíu_gíîic
‘ow,Ö°r, ' ', ' ')

	)

730 
	#lcd_im∂emíèti⁄_døwmíu_fun˘i⁄_£À˘ed
(
row
, 
p°r
, 
d©a
Ë
	`lcd_im∂emíèti⁄_døwmíu_gíîic
‘ow,Ö°r, '>', ' ')

	)

731 
	#lcd_im∂emíèti⁄_døwmíu_fun˘i⁄
(
row
, 
p°r
, 
d©a
Ë
	`lcd_im∂emíèti⁄_døwmíu_gíîic
‘ow,Ö°r, ' ', ' ')

	)

733 
	$lcd_im∂emíèti⁄_quick_„edback
()

735 #ifde‡
LCD_USE_I2C_BUZZER


736 #i‡!
	`deföed
(
LCD_FEEDBACK_FREQUENCY_HZ
Ë|| !deföed(
LCD_FEEDBACK_FREQUENCY_DURATION_MS
)

737 
	`lcd_buzz
(1000/6,100);

739 
	`lcd_buzz
(
LCD_FEEDBACK_FREQUENCY_DURATION_MS
,
LCD_FEEDBACK_FREQUENCY_HZ
);

741 #ñi‡
	`deföed
(
BEEPER
) && BEEPER > -1

742 
	`SET_OUTPUT
(
BEEPER
);

743 #i‡!
	`deföed
(
LCD_FEEDBACK_FREQUENCY_HZ
Ë|| !deföed(
LCD_FEEDBACK_FREQUENCY_DURATION_MS
)

744 
öt8_t
 
i
=0;i<10;i++)

746 
	`WRITE
(
BEEPER
,
HIGH
);

747 
	`dñayMi¸o£c⁄ds
(100);

748 
	`WRITE
(
BEEPER
,
LOW
);

749 
	`dñayMi¸o£c⁄ds
(100);

752 
öt8_t
 
i
=0;i<(
LCD_FEEDBACK_FREQUENCY_DURATION_MS
 / (1000 / 
LCD_FEEDBACK_FREQUENCY_HZ
));i++)

754 
	`WRITE
(
BEEPER
,
HIGH
);

755 
	`dñayMi¸o£c⁄ds
(1000000 / 
LCD_FEEDBACK_FREQUENCY_HZ
 / 2);

756 
	`WRITE
(
BEEPER
,
LOW
);

757 
	`dñayMi¸o£c⁄ds
(1000000 / 
LCD_FEEDBACK_FREQUENCY_HZ
 / 2);

761 
	}
}

763 #ifde‡
LCD_HAS_STATUS_INDICATORS


764 
	$lcd_im∂emíèti⁄_upd©e_ödiˇt‹s
()

766 #i‡
	`deföed
(
LCD_I2C_PANELOLU2
Ë|| deföed(
LCD_I2C_VIKI
)

768 
uöt8_t
 
Àd•ªv
 = 0;

769 
uöt8_t
 
Àds
 = 0;

770 i‡(
èrgë_ãm≥øtuª_bed
 > 0Ë
Àds
 |
LED_A
;

771 i‡(
èrgë_ãm≥øtuª
[0] > 0Ë
Àds
 |
LED_B
;

772 i‡(
ÁnS≥ed
Ë
Àds
 |
LED_C
;

773 #i‡
EXTRUDERS
 > 1

774 i‡(
èrgë_ãm≥øtuª
[1] > 0Ë
Àds
 |
LED_C
;

776 i‡(
Àds
 !
Àd•ªv
) {

777 
lcd
.
	`£tBacklight
(
Àds
);

778 
Àd•ªv
 = 
Àds
;

781 
	}
}

784 #ifde‡
LCD_HAS_SLOW_BUTTONS


785 
uöt32_t
 
blockög_íc
;

787 
uöt8_t
 
	$lcd_im∂emíèti⁄_ªad_¶ow_buâ⁄s
()

789 #ifde‡
LCD_I2C_TYPE_MCP23017


790 
uöt8_t
 
¶ow_buâ⁄s
;

793 
¶ow_buâ⁄s
 = 
lcd
.
	`ªadBuâ⁄s
(Ë<< 
B_I2C_BTN_OFFSET
;

794 #i‡
	`deföed
(
LCD_I2C_VIKI
)

795 if(
¶ow_buâ⁄s
 & (
B_MI
|
B_RI
)) {

796 if(
blockög_íc
 > 
	`mûlis
()) {

797 
¶ow_buâ⁄s
 &~(
B_MI
|
B_RI
);

801  
¶ow_buâ⁄s
;

803 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/ultralcd_st7920_u8glib_rrd.h

1 #i‚de‡
ULCDST7920_H


2 
	#ULCDST7920_H


	)

4 
	~"M¨lö.h
"

6 #ifde‡
U8GLIB_ST7920


9 #¥agm®
GCC
 
›timize
 (3)

11 
	#ST7920_CLK_PIN
 
LCD_PINS_D4


	)

12 
	#ST7920_DAT_PIN
 
LCD_PINS_ENABLE


	)

13 
	#ST7920_CS_PIN
 
LCD_PINS_RS


	)

17 
	#PAGE_HEIGHT
 32

18 

	)

19 
	#WIDTH
 128

	)

20 
	#HEIGHT
 64

	)

22 
	~<U8glib.h
>

24 
	$ST7920_SWSPI_SND_8BIT
(
uöt8_t
 
vÆ
)

26 
uöt8_t
 
i
;

27  
i
=0; i<8; i++ )

29 
	`WRITE
(
ST7920_CLK_PIN
,0);

30 
	`WRITE
(
ST7920_DAT_PIN
,
vÆ
&0x80);

31 
vÆ
<<=1;

32 
	`WRITE
(
ST7920_CLK_PIN
,1);

34 
	}
}

36 
	#ST7920_CS
(Ë{
	`WRITE
(
ST7920_CS_PIN
,1);
	`u8g_10Mi¸oDñay
();}

	)

37 
	#ST7920_NCS
(Ë{
	`WRITE
(
ST7920_CS_PIN
,0);}

	)

38 
	#ST7920_SET_CMD
(Ë{
	`ST7920_SWSPI_SND_8BIT
(0xf8);
	`u8g_10Mi¸oDñay
();}

	)

39 
	#ST7920_SET_DAT
(Ë{
	`ST7920_SWSPI_SND_8BIT
(0xÁ);
	`u8g_10Mi¸oDñay
();}

	)

40 
	#ST7920_WRITE_BYTE
(
a
Ë{
	`ST7920_SWSPI_SND_8BIT
(◊)&0xf0);ST7920_SWSPI_SND_8BIT(◊)<<4);
	`u8g_10Mi¸oDñay
();}

	)

41 
	#ST7920_WRITE_BYTES
(
p
,
l
Ë{
uöt8_t
 
i
;i=0;i<l;i++){
	`ST7920_SWSPI_SND_8BIT
(*p&0xf0);ST7920_SWSPI_SND_8BIT(*p<<4);p++;}
	`u8g_10Mi¸oDñay
();}

	)

43 
uöt8_t
 
	$u8g_dev_ºd_°7920_128x64_‚
(
u8g_t
 *
u8g
, 
u8g_dev_t
 *
dev
, 
uöt8_t
 
msg
, *
¨g
)

45 
uöt8_t
 
i
,
y
;

46 
msg
)

48 
U8G_DEV_MSG_INIT
:

50 
	`SET_OUTPUT
(
ST7920_CS_PIN
);

51 
	`WRITE
(
ST7920_CS_PIN
,0);

52 
	`SET_OUTPUT
(
ST7920_DAT_PIN
);

53 
	`WRITE
(
ST7920_DAT_PIN
,0);

54 
	`SET_OUTPUT
(
ST7920_CLK_PIN
);

55 
	`WRITE
(
ST7920_CLK_PIN
,1);

57 
	`ST7920_CS
();

58 
	`u8g_Dñay
(90);

59 
	`ST7920_SET_CMD
();

60 
	`ST7920_WRITE_BYTE
(0x08);

61 
	`ST7920_WRITE_BYTE
(0x01);

62 
	`u8g_Dñay
(10);

63 
	`ST7920_WRITE_BYTE
(0x3E);

64 
y
=0;y<
HEIGHT
/2;y++)

66 
	`ST7920_WRITE_BYTE
(0x80|
y
);

67 
	`ST7920_WRITE_BYTE
(0x80);

68 
	`ST7920_SET_DAT
();

69 
i
=0;i<2*
WIDTH
/8;i++)

70 
	`ST7920_WRITE_BYTE
(0);

71 
	`ST7920_SET_CMD
();

73 
	`ST7920_WRITE_BYTE
(0x0C);

74 
	`ST7920_NCS
();

78 
U8G_DEV_MSG_STOP
:

80 
U8G_DEV_MSG_PAGE_NEXT
:

82 
uöt8_t
 *
±r
;

83 
u8g_pb_t
 *
pb
 = (u8g_pb_à*)(
dev
->
dev_mem
);

84 
y
 = 
pb
->
p
.
∑ge_y0
;

85 
±r
 = (
uöt8_t
*)
pb
->
buf
;

87 
	`ST7920_CS
();

88  
i
 = 0; i < 
PAGE_HEIGHT
; i ++ )

90 
	`ST7920_SET_CMD
();

91 i‡–
y
 < 32 )

93 
	`ST7920_WRITE_BYTE
(0x80 | 
y
);

94 
	`ST7920_WRITE_BYTE
(0x80);

98 
	`ST7920_WRITE_BYTE
(0x80 | (
y
-32));

99 
	`ST7920_WRITE_BYTE
(0x80 | 8);

102 
	`ST7920_SET_DAT
();

103 
	`ST7920_WRITE_BYTES
(
±r
,
WIDTH
/8);

104 
y
++;

106 
	`ST7920_NCS
();

110 #i‡
PAGE_HEIGHT
 == 8

111  
	`u8g_dev_pb8h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

112 #ñi‡
PAGE_HEIGHT
 == 16

113  
	`u8g_dev_pb16h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

115  
	`u8g_dev_pb32h1_ba£_‚
(
u8g
, 
dev
, 
msg
, 
¨g
);

117 
	}
}

119 
uöt8_t
 
	gu8g_dev_°7920_128x64_ºd_buf
[
WIDTH
*(
PAGE_HEIGHT
/8)] 
	gU8G_NOCOMMON
;

120 
u8g_pb_t
 
	gu8g_dev_°7920_128x64_ºd_pb
 = {{
PAGE_HEIGHT
,
HEIGHT
,0,0,0},
WIDTH
,
u8g_dev_°7920_128x64_ºd_buf
};

121 
u8g_dev_t
 
	gu8g_dev_°7920_128x64_ºd_sw_•i
 = {
u8g_dev_ºd_°7920_128x64_‚
,&
u8g_dev_°7920_128x64_ºd_pb
,&
u8g_com_nuŒ_‚
};

123 ˛as†
	cU8GLIB_ST7920_128X64_RRD
 : 
public
 
U8GLIB


125 
public
:

126 
	$U8GLIB_ST7920_128X64_RRD
(
uöt8_t
 
dummy
Ë: 
	$U8GLIB
(&
u8g_dev_°7920_128x64_ºd_sw_•i
) {}

127 
	}
};

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/vector_3.cpp

19 
	~<m©h.h
>

20 
	~"M¨lö.h
"

22 #ifde‡
ENABLE_AUTO_BED_LEVELING


23 
	~"ve˘‹_3.h
"

25 
	gve˘‹_3
::
	$ve˘‹_3
(Ë: 
	`x
(0), 
	`y
(0), 
	$z
(0Ë{ 
	}
}

27 
	gve˘‹_3
::
	$ve˘‹_3
(
x_
, 
y_
, 
z_
Ë: 
	`x
(x_), 
	`y
(y_), 
	$z
(
z_
Ë{ 
	}
}

29 
ve˘‹_3
 
	gve˘‹_3
::
	$¸oss
(
ve˘‹_3
 
À·
, ve˘‹_3 
right
)

31  
	`ve˘‹_3
(
À·
.
y
 * 
right
.
z
 -Üeft.z *Ñight.y,

32 
À·
.
z
 * 
right
.
x
 -Üeft.x *Ñight.z,

33 
À·
.
x
 * 
right
.
y
 -Üeft.y *Ñight.x);

34 
	}
}

36 
ve˘‹_3
 
	gve˘‹_3
::
›î©‹
+(ve˘‹_3 
v
)

38  
ve˘‹_3
((
x
 + 
v
.x), (
y
 + v.y), (
z
 + v.z));

41 
ve˘‹_3
 
	gve˘‹_3
::
›î©‹
-(ve˘‹_3 
v
)

43  
ve˘‹_3
((
x
 - 
v
.x), (
y
 - v.y), (
z
 - v.z));

46 
ve˘‹_3
 
	gve˘‹_3
::
	$gë_n‹mÆ
()

48 
ve˘‹_3
 
n‹mÆized
 = 
	`ve˘‹_3
(
x
, 
y
, 
z
);

49 
n‹mÆized
.
	`n‹mÆize
();

50  
n‹mÆized
;

51 
	}
}

53 
	gve˘‹_3
::
	$gë_Àngth
()

55 
Àngth
 = 
	`sqπ
((
x
 * xË+ (
y
 * yË+ (
z
 * z));

56  
Àngth
;

57 
	}
}

59 
	gve˘‹_3
::
	$n‹mÆize
()

61 
Àngth
 = 
	`gë_Àngth
();

62 
x
 /
Àngth
;

63 
y
 /
Àngth
;

64 
z
 /
Àngth
;

65 
	}
}

67 
	gve˘‹_3
::
	$≠∂y_rŸ©i⁄
(
m©rix_3x3
 
m©rix
)

69 
ªsu…X
 = 
x
 * 
m©rix
.m©rix[3*0+0] + 
y
 * m©rix.m©rix[3*1+0] + 
z
 * matrix.matrix[3*2+0];

70 
ªsu…Y
 = 
x
 * 
m©rix
.m©rix[3*0+1] + 
y
 * m©rix.m©rix[3*1+1] + 
z
 * matrix.matrix[3*2+1];

71 
ªsu…Z
 = 
x
 * 
m©rix
.m©rix[3*0+2] + 
y
 * m©rix.m©rix[3*1+2] + 
z
 * matrix.matrix[3*2+2];

73 
x
 = 
ªsu…X
;

74 
y
 = 
ªsu…Y
;

75 
z
 = 
ªsu…Z
;

76 
	}
}

78 
	gve˘‹_3
::
	$debug
(* 
tôÀ
)

80 
	`SERIAL_PROTOCOL
(
tôÀ
);

81 
	`SERIAL_PROTOCOLPGM
(" x: ");

82 
	`SERIAL_PROTOCOL
(
x
);

83 
	`SERIAL_PROTOCOLPGM
(" y: ");

84 
	`SERIAL_PROTOCOL
(
y
);

85 
	`SERIAL_PROTOCOLPGM
(" z: ");

86 
	`SERIAL_PROTOCOL
(
z
);

87 
	`SERIAL_PROTOCOLPGM
("\n");

88 
	}
}

90 
	$≠∂y_rŸ©i⁄_xyz
(
m©rix_3x3
 
m©rix
, &
x
, & 
y
, & 
z
)

92 
ve˘‹_3
 
ve˘‹
 = 
	`ve˘‹_3
(
x
, 
y
, 
z
);

93 
ve˘‹
.
	`≠∂y_rŸ©i⁄
(
m©rix
);

94 
x
 = 
ve˘‹
.x;

95 
y
 = 
ve˘‹
.y;

96 
z
 = 
ve˘‹
.z;

97 
	}
}

99 
m©rix_3x3
 
	gm©rix_3x3
::
	$¸óã_‰om_rows
(
ve˘‹_3
 
row_0
, ve˘‹_3 
row_1
, ve˘‹_3 
row_2
)

104 
m©rix_3x3
 
√w_m©rix
;

105 
√w_m©rix
.
m©rix
[0] = 
row_0
.
x
;Çew_m©rix.m©rix[1] =Ñow_0.
y
;Çew_m©rix.m©rix[2] =Ñow_0.
z
;

106 
√w_m©rix
.
m©rix
[3] = 
row_1
.
x
;Çew_m©rix.m©rix[4] =Ñow_1.
y
;Çew_m©rix.m©rix[5] =Ñow_1.
z
;

107 
√w_m©rix
.
m©rix
[6] = 
row_2
.
x
;Çew_m©rix.m©rix[7] =Ñow_2.
y
;Çew_m©rix.m©rix[8] =Ñow_2.
z
;

110  
√w_m©rix
;

111 
	}
}

113 
	gm©rix_3x3
::
	$£t_to_idítôy
()

115 
m©rix
[0] = 1; matrix[1] = 0; matrix[2] = 0;

116 
m©rix
[3] = 0; matrix[4] = 1; matrix[5] = 0;

117 
m©rix
[6] = 0; matrix[7] = 0; matrix[8] = 1;

118 
	}
}

120 
m©rix_3x3
 
	gm©rix_3x3
::
	$¸óã_look_©
(
ve˘‹_3
 
èrgë
)

122 
ve˘‹_3
 
z_row
 = 
èrgë
.
	`gë_n‹mÆ
();

123 
ve˘‹_3
 
x_row
 = 
	`ve˘‹_3
(1, 0, -
èrgë
.
x
/èrgë.
z
).
	`gë_n‹mÆ
();

124 
ve˘‹_3
 
y_row
 = ve˘‹_3::
	`¸oss
(
z_row
, 
x_row
).
	`gë_n‹mÆ
();

132 
m©rix_3x3
 
rŸ
 = m©rix_3x3::
	`¸óã_‰om_rows
(
x_row
, 
y_row
, 
z_row
);

135  
rŸ
;

136 
	}
}

139 
m©rix_3x3
 
	gm©rix_3x3
::
	$å™•o£
(
m©rix_3x3
 
‹igöÆ
)

141 
m©rix_3x3
 
√w_m©rix
;

142 
√w_m©rix
.
m©rix
[0] = 
‹igöÆ
.matrix[0];Çew_matrix.matrix[1] = original.matrix[3];Çew_matrix.matrix[2] = original.matrix[6];

143 
√w_m©rix
.
m©rix
[3] = 
‹igöÆ
.matrix[1];Çew_matrix.matrix[4] = original.matrix[4];Çew_matrix.matrix[5] = original.matrix[7];

144 
√w_m©rix
.
m©rix
[6] = 
‹igöÆ
.matrix[2];Çew_matrix.matrix[7] = original.matrix[5];Çew_matrix.matrix[8] = original.matrix[8];

145  
√w_m©rix
;

146 
	}
}

148 
	gm©rix_3x3
::
	$debug
(* 
tôÀ
)

150 
	`SERIAL_PROTOCOL
(
tôÀ
);

151 
	`SERIAL_PROTOCOL
("\n");

152 
cou¡
 = 0;

153 
i
=0; i<3; i++)

155 
j
=0; j<3; j++)

157 
	`SERIAL_PROTOCOL
(
m©rix
[
cou¡
]);

158 
	`SERIAL_PROTOCOLPGM
(" ");

159 
cou¡
++;

162 
	`SERIAL_PROTOCOLPGM
("\n");

164 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/vector_3.h

19 #i‚de‡
VECTOR_3_H


20 
	#VECTOR_3_H


	)

22 #ifde‡
ENABLE_AUTO_BED_LEVELING


23 
˛ass
 
	gm©rix_3x3
;

25 
	sve˘‹_3


27 
	mx
, 
	my
, 
	mz
;

29 
ve˘‹_3
();

30 
ve˘‹_3
(
x
, 
y
, 
z
);

32 
ve˘‹_3
 
¸oss
(ve˘‹_3 
a
, ve˘‹_3 
b
);

34 
ve˘‹_3
 
	m›î©‹
+(ve˘‹_3 
	mv
);

35 
ve˘‹_3
 
	m›î©‹
-(ve˘‹_3 
	mv
);

36 
n‹mÆize
();

37 
gë_Àngth
();

38 
ve˘‹_3
 
gë_n‹mÆ
();

40 
debug
(* 
tôÀ
);

42 
≠∂y_rŸ©i⁄
(
m©rix_3x3
 
m©rix
);

45 
	sm©rix_3x3


47 
	mm©rix
[9];

49 
m©rix_3x3
 
¸óã_‰om_rows
(
ve˘‹_3
 
row_0
, ve˘‹_3 
row_1
, ve˘‹_3 
row_2
);

50 
m©rix_3x3
 
¸óã_look_©
(
ve˘‹_3
 
èrgë
);

51 
m©rix_3x3
 
å™•o£
(m©rix_3x3 
‹igöÆ
);

53 
£t_to_idítôy
();

55 
debug
(* 
tôÀ
);

59 
≠∂y_rŸ©i⁄_xyz
(
m©rix_3x3
 
rŸ©i⁄M©rix
, &
x
, & 
y
, & 
z
);

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/watchdog.cpp

1 
	~"M¨lö.h
"

3 #ifde‡
USE_WATCHDOG


4 
	~<avr/wdt.h
>

6 
	~"w©chdog.h
"

7 
	~"u…ølcd.h
"

19 
	$w©chdog_öô
()

21 #ifde‡
WATCHDOG_RESET_MANUAL


24 
	`wdt_ª£t
();

25 
_WD_CONTROL_REG
 = 
	`_BV
(
_WD_CHANGE_BIT
Ë| _BV(
WDE
);

26 
_WD_CONTROL_REG
 = 
	`_BV
(
WDIE
Ë| 
WDTO_4S
;

28 
	`wdt_íabÀ
(
WDTO_4S
);

30 
	}
}

33 
	$w©chdog_ª£t
()

35 
	`wdt_ª£t
();

36 
	}
}

43 #ifde‡
WATCHDOG_RESET_MANUAL


44 
	$ISR
(
WDT_ve˘
)

47 
	`LCD_ALERTMESSAGEPGM
("ERR:Please Reset");

48 
	`lcd_upd©e
();

49 
SERIAL_ERROR_START
;

50 
	`SERIAL_ERRORLNPGM
("Something is wrong,ÖleaseÅurn offÅheÖrinter.");

51 
	`kûl
();

53 
	}
}

	@/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/watchdog.h

1 #i‚de‡
WATCHDOG_H


2 
	#WATCHDOG_H


	)

4 
	~"M¨lö.h
"

6 #ifde‡
USE_WATCHDOG


8 
w©chdog_öô
();

10 
w©chdog_ª£t
();

13 
FORCE_INLINE
 
	$w©chdog_öô
(Ë{
	}
};

14 
FORCE_INLINE
 
	$w©chdog_ª£t
(Ë{
	}
};

	@
1
.
0
613
75783
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/bootloaders/atmega644p/ATmegaBOOT.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/Arduino.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/HardwareSerial.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/HardwareSerial.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/Print.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/Print.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/Stream.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/Tone.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/WCharacter.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/WConstants.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/WInterrupts.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/WMath.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/WProgram.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/WString.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/WString.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/binary.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/main.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/pins_arduino.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/pins_arduino.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/wiring.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/wiring.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/wiring_analog.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/wiring_digital.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/wiring_private.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/wiring_pulse.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen6/cores/arduino/wiring_shift.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/HardwareSerial.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/HardwareSerial.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/Print.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/Print.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/Tone.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/WCharacter.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/WConstants.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/WInterrupts.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/WMath.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/WProgram.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/WString.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/WString.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/binary.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/main.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/pins_arduino.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/pins_arduino.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/wiring.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/wiring.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/wiring_analog.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/wiring_digital.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/wiring_private.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/wiring_pulse.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/wiring_serial.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Gen7/cores/arduino/wiring_shift.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/bootloaders/atmega1284p/boot.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/bootloaders/atmega1284p/optiboot.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/bootloaders/atmega1284p/pin_defs.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/bootloaders/atmega1284p/stk500.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/bootloaders/atmega644p/ATmegaBOOT.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/HardwareSerial.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/HardwareSerial.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/Print.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/Print.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/Stream.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/Tone.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/WCharacter.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/WConstants.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/WInterrupts.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/WMath.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/WProgram.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/WString.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/WString.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/binary.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/main.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/pins_arduino.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/pins_arduino.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/wiring.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/wiring.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/wiring_analog.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/wiring_digital.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/wiring_private.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/wiring_pulse.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/Sanguino/cores/arduino/wiring_shift.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/LiquidCrystal/LiquidCrystal.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/LiquidCrystal/LiquidCrystal.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/SPI/SPI.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/SPI/SPI.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/U8glib.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/U8glib.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/chessengine.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_bitmap.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_circle.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_clip.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_api.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_api_16gr.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_arduino_common.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_arduino_fast_parallel.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_arduino_hw_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_arduino_no_en_parallel.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_arduino_parallel.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_arduino_port_d_wr.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_arduino_ssd_i2c.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_arduino_st7920_hw_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_arduino_st7920_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_arduino_std_sw_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_arduino_sw_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_arduino_t6963.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_atmega_hw_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_atmega_parallel.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_atmega_st7920_hw_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_atmega_st7920_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_atmega_sw_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_i2c.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_io.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_com_null.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_cursor.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_delay.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_flipdisc_2x7.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_gprof.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_ili9325d_320x240.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_ks0108_128x64.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_lc7981_160x80.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_lc7981_240x128.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_lc7981_240x64.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_lc7981_320x64.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_null.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_pcd8544_84x48.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_pcf8812_96x65.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_sbn1661_122x32.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_ssd1306_128x32.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_ssd1306_128x64.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_ssd1309_128x64.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_ssd1322_nhd31oled_bw.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_ssd1322_nhd31oled_gr.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_ssd1325_nhd27oled_bw.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_ssd1325_nhd27oled_bw_new.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_ssd1325_nhd27oled_gr.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_ssd1325_nhd27oled_gr_new.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_ssd1327_96x96_gr.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_st7565_64128n.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_st7565_dogm128.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_st7565_dogm132.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_st7565_lm6059.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_st7565_lm6063.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_st7565_nhd_c12832.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_st7565_nhd_c12864.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_st7687_c144mvgd.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_st7920_128x64.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_st7920_192x32.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_st7920_202x32.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_t6963_128x64.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_t6963_240x128.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_t6963_240x64.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_tls8204_84x48.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_uc1610_dogxl160.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_uc1701_dogs102.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_dev_uc1701_mini12864.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_ellipse.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_font.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_font_data.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_line.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_ll_api.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_page.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_pb.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_pb14v1.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_pb16h1.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_pb16h2.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_pb16v1.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_pb16v2.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_pb32h1.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_pb8h1.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_pb8h1f.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_pb8h2.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_pb8h8.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_pb8v1.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_pb8v2.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_rect.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_rot.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_scale.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_state.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_u16toa.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_u8toa.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_0.xx/libraries/U8glib/utility/u8g_virtual_screen.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/OMC_tkj/bootloaders/atmega644p/ATmegaBOOT.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/OMC_tkj/variants/sanguino/pins_arduino.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/bootloaders/atmega/ATmegaBOOT_168.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/bootloaders/atmega644p/ATmegaBOOT.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/Arduino.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/CDC.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/Client.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/HID.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/HardwareSerial.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/HardwareSerial.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/IPAddress.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/IPAddress.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/Platform.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/Print.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/Print.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/Printable.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/Server.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/Stream.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/Stream.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/Tone.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/USBAPI.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/USBCore.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/USBCore.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/USBDesc.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/Udp.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/WCharacter.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/WInterrupts.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/WMath.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/WString.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/WString.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/binary.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/main.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/new.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/new.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/wiring.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/wiring_analog.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/wiring_digital.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/wiring_private.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/wiring_pulse.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/wiring_shift.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/variants/standard/pins_arduino.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/Arduino.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/CDC.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/Client.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/HID.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/HardwareSerial.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/HardwareSerial.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/IPAddress.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/IPAddress.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/Platform.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/Print.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/Print.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/Printable.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/Server.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/Stream.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/Stream.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/Tone.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/USBAPI.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/USBCore.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/USBCore.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/USBDesc.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/Udp.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/WCharacter.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/WInterrupts.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/WMath.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/WString.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/WString.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/binary.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/main.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/new.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/new.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/wiring.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/wiring_analog.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/wiring_digital.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/wiring_private.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/wiring_pulse.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/wiring_shift.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/variants/standard/pins_arduino.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/LiquidCrystal/LiquidCrystal.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/LiquidCrystal/LiquidCrystal.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/SPI/SPI.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/SPI/SPI.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/U8glib.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/U8glib.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/chessengine.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_bitmap.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_circle.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_clip.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_api.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_api_16gr.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_arduino_common.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_arduino_fast_parallel.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_arduino_hw_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_arduino_no_en_parallel.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_arduino_parallel.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_arduino_port_d_wr.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_arduino_ssd_i2c.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_arduino_st7920_hw_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_arduino_st7920_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_arduino_std_sw_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_arduino_sw_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_arduino_t6963.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_atmega_hw_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_atmega_parallel.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_atmega_st7920_hw_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_atmega_st7920_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_atmega_sw_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_i2c.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_io.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_com_null.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_cursor.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_delay.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_flipdisc_2x7.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_gprof.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_ili9325d_320x240.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_ks0108_128x64.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_lc7981_160x80.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_lc7981_240x128.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_lc7981_240x64.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_lc7981_320x64.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_null.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_pcd8544_84x48.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_pcf8812_96x65.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_sbn1661_122x32.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_ssd1306_128x32.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_ssd1306_128x64.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_ssd1309_128x64.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_ssd1322_nhd31oled_bw.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_ssd1322_nhd31oled_gr.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_ssd1325_nhd27oled_bw.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_ssd1325_nhd27oled_bw_new.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_ssd1325_nhd27oled_gr.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_ssd1325_nhd27oled_gr_new.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_ssd1327_96x96_gr.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_st7565_64128n.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_st7565_dogm128.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_st7565_dogm132.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_st7565_lm6059.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_st7565_lm6063.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_st7565_nhd_c12832.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_st7565_nhd_c12864.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_st7687_c144mvgd.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_st7920_128x64.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_st7920_192x32.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_st7920_202x32.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_t6963_128x64.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_t6963_240x128.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_t6963_240x64.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_tls8204_84x48.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_uc1610_dogxl160.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_uc1701_dogs102.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_dev_uc1701_mini12864.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_ellipse.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_font.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_font_data.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_line.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_ll_api.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_page.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_pb.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_pb14v1.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_pb16h1.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_pb16h2.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_pb16v1.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_pb16v2.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_pb32h1.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_pb8h1.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_pb8h1f.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_pb8h2.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_pb8h8.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_pb8v1.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_pb8v2.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_rect.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_rot.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_scale.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_state.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_u16toa.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_u8toa.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_virtual_screen.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/bootloaders/atmega/ATmegaBOOT_168.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/U8glib.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/U8glib.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/chessengine.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_bitmap.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_circle.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_clip.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_api.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_api_16gr.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_arduino_common.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_arduino_fast_parallel.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_arduino_hw_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_arduino_no_en_parallel.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_arduino_parallel.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_arduino_port_d_wr.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_arduino_ssd_i2c.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_arduino_st7920_hw_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_arduino_st7920_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_arduino_std_sw_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_arduino_sw_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_arduino_t6963.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_atmega_hw_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_atmega_parallel.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_atmega_st7920_hw_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_atmega_st7920_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_atmega_sw_spi.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_i2c.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_io.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_null.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_cursor.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_delay.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_flipdisc_2x7.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_gprof.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_ili9325d_320x240.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_ks0108_128x64.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_lc7981_160x80.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_lc7981_240x128.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_lc7981_240x64.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_lc7981_320x64.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_null.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_pcd8544_84x48.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_pcf8812_96x65.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_sbn1661_122x32.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_ssd1306_128x32.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_ssd1306_128x64.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_ssd1309_128x64.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_ssd1322_nhd31oled_bw.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_ssd1322_nhd31oled_gr.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_ssd1325_nhd27oled_bw.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_ssd1325_nhd27oled_bw_new.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_ssd1325_nhd27oled_gr.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_ssd1325_nhd27oled_gr_new.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_ssd1327_96x96_gr.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_st7565_64128n.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_st7565_dogm128.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_st7565_dogm132.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_st7565_lm6059.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_st7565_lm6063.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_st7565_nhd_c12832.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_st7565_nhd_c12864.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_st7687_c144mvgd.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_st7920_128x64.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_st7920_192x32.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_st7920_202x32.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_t6963_128x64.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_t6963_240x128.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_t6963_240x64.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_tls8204_84x48.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_uc1610_dogxl160.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_uc1701_dogs102.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_dev_uc1701_mini12864.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_ellipse.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_font.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_font_data.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_line.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_ll_api.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_page.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_pb.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_pb14v1.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_pb16h1.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_pb16h2.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_pb16v1.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_pb16v2.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_pb32h1.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_pb8h1.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_pb8h1f.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_pb8h2.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_pb8h8.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_pb8v1.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_pb8v2.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_rect.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_rot.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_scale.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_state.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_u16toa.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_u8toa.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_virtual_screen.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/variants/rambo/pins_arduino.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/variants/sanguino/pins_arduino.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/Arduino.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/CDC.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/Client.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/HID.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/HardwareSerial.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/HardwareSerial.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/IPAddress.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/IPAddress.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/Platform.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/Print.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/Print.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/Printable.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/Server.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/Stream.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/Stream.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/Tone.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/USBAPI.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/USBCore.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/USBCore.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/USBDesc.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/Udp.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/WCharacter.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/WInterrupts.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/WMath.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/WString.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/WString.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/binary.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/main.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/new.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/new.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/wiring.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/wiring_analog.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/wiring_digital.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/wiring_private.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/wiring_pulse.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/cores/arduino/wiring_shift.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Gen7-dist/variants/gen7/pins_arduino.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/bootloaders/atmega644p/ATmegaBOOT.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/Arduino.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/CDC.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/Client.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/HID.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/HardwareSerial.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/HardwareSerial.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/IPAddress.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/IPAddress.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/Platform.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/Print.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/Print.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/Printable.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/Server.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/Stream.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/Stream.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/Tone.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/USBAPI.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/USBCore.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/USBCore.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/USBDesc.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/Udp.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/WCharacter.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/WInterrupts.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/WMath.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/WString.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/WString.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/binary.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/main.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/new.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/new.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/wiring.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/wiring_analog.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/wiring_digital.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/wiring_private.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/wiring_pulse.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/cores/arduino/wiring_shift.c
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/ArduinoAddons/Arduino_1.x.x/hardware/Melzi/variants/standard/pins_arduino.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/BlinkM.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/BlinkM.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/Configuration.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/ConfigurationStore.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/ConfigurationStore.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/Configuration_adv.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/DOGMbitmaps.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/LiquidCrystalRus.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/LiquidCrystalRus.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/Marlin.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/MarlinSerial.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/MarlinSerial.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/Marlin_main.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/Sd2Card.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/Sd2Card.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/Sd2PinMap.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/SdBaseFile.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/SdBaseFile.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/SdFatConfig.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/SdFatStructs.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/SdFatUtil.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/SdFatUtil.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/SdFile.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/SdFile.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/SdInfo.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/SdVolume.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/SdVolume.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/Servo.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/Servo.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/boards.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/cardreader.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/cardreader.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/digipot_mcp4451.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/dogm_font_data_marlin.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/dogm_lcd_implementation.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/example_configurations/SCARA/Configuration.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/example_configurations/SCARA/Configuration_adv.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/example_configurations/delta/Configuration.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/example_configurations/delta/Configuration_adv.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/example_configurations/makibox/Configuration.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/example_configurations/makibox/Configuration_adv.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/example_configurations/tvrrug/Round2/Configuration.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/example_configurations/tvrrug/Round2/Configuration_adv.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/fastio.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language_an.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language_ca.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language_de.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language_en.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language_es.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language_eu.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language_fi.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language_fr.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language_it.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language_nl.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language_pl.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language_pt.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/language_ru.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/motion_control.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/motion_control.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/pins.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/planner.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/planner.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/qr_solve.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/qr_solve.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/speed_lookuptable.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/stepper.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/stepper.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/temperature.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/temperature.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/thermistortables.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/ultralcd.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/ultralcd.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/ultralcd_implementation_hitachi_HD44780.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/ultralcd_st7920_u8glib_rrd.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/vector_3.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/vector_3.h
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/watchdog.cpp
/home/sandy/raspberrypi/3dprinter/code/jcrocholl/Marlin/Marlin/watchdog.h
